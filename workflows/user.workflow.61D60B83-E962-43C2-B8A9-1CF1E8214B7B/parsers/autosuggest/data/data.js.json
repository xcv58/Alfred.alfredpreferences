[{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date","title":"Date","description":"Creates JavaScript\u00a0Date instances which let you work with dates and times. Syntax \r           new Date() new Date(milliseconds) new Date(dateString) new Date(year, month, day [, hour, minute, second, millisecond ])\r          Note:\u00a0Note that JavaScript Date objects can only be instantiated by calling JavaScript Date as a constructor: calling it as a regular function (i.e. without the new operator) will return a string rather than a Date object; unlike other JavaScript object types, JavaScript Date objects have no literal syntax.  Parameters  milliseconds Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).   dateString String value representing a date. The string should be in a format recognized by the parse method (IETF-compliant RFC 1123 timestamps).   year Integer value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98.   month Integer value representing the month, beginning with 0 for January to 11 for December.   day Integer value representing the day of the month (1-31).   hour Integer value representing the hour of the day (0-23).   minute Integer value representing the minute segment (0-59) of a time reading.   second Integer value representing the second segment (0-59) of a time reading.   millisecond Integer value representing the millisecond segment (0-999) of a time reading.  Description If you supply no arguments, the constructor creates a JavaScript Date object for today's date and time according to local time. If you supply some arguments but not others, the missing arguments are set to 0. If you supply any arguments, you must supply at least the year, month, and day. You can omit the hours, minutes, seconds, and milliseconds. The JavaScript\u00a0date is measured in milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The JavaScript Date object range is -100,000,000 days to 100,000,000 days relative to 01 January, 1970 UTC. The JavaScript Date object provides uniform behavior across platforms. The JavaScript\u00a0Date object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed. Invoking JavaScript\u00a0Date in a non-constructor context (i.e., without the new operator) will return a string representing the current time. Properties For properties available on Date instances, see Properties of Date instances.             prototype Allows the addition of properties to a JavaScript\u00a0Date object.    Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on Date instances, see Methods of Date instances.             now Returns the numeric value corresponding to the current time. parse Parses a string representation of a JavaScript date, and returns the number of milliseconds since January 1, 1970, 00:00:00, local time. UTC Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a JavaScript\u00a0Date object since January 1, 1970, 00:00:00, universal time.    Methods inherited from  Function:apply, call, toSource, toString   JavaScript\u00a0Date instances   Date instances inherit from Date.prototype  . You can modify the constructor's prototype object to affect properties and methods inherited by JavaScript\u00a0Date instances. For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods getFullYear, setFullYear, getUTCFullYear, and setUTCFullYear. \t  Properties   constructor Returns the function that created an instance. This is the  Date constructor by default.     Properties inherited from  Object:__parent__, __proto__     Methods   getDate Returns the day of the month (1-31) for the specified date according to local time.   getDay Returns the day of the week (0-6) for the specified date according to local time.   getFullYear Returns the year (4 digits for 4-digit years) of the specified date according to local time.   getHours Returns the hour (0-23) in the specified date according to local time.   getMilliseconds Returns the milliseconds (0-999) in the specified date according to local time.   getMinutes Returns the minutes (0-59) in the specified date according to local time.   getMonth Returns the month (0-11) in the specified date according to local time.   getSeconds Returns the seconds (0-59) in the specified date according to local time.   getTime Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).   getTimezoneOffset Returns the time-zone offset in minutes for the current locale.   getUTCDate Returns the day (date) of the month (1-31) in the specified date according to universal time.   getUTCDay Returns the day of the week (0-6) in the specified date according to universal time.   getUTCFullYear Returns the year (4 digits for 4-digit years) in the specified date according to universal time.   getUTCHours Returns the hours (0-23) in the specified date according to universal time.   getUTCMilliseconds Returns the milliseconds (0-999) in the specified date according to universal time.   getUTCMinutes Returns the minutes (0-59) in the specified date according to universal time.   getUTCMonth Returns the month (0-11) in the specified date according to universal time.   getUTCSeconds Returns the seconds (0-59) in the specified date according to universal time.   getYear   Deprecated   Returns the year (usually 2-3 digits) in the specified date according to local time. Use getFullYear instead.   setDate Sets the day of the month (1-31) for a specified date according to local time.   setFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to local time.   setHours Sets the hours (0-23) for a specified date according to local time.   setMilliseconds Sets the milliseconds (0-999) for a specified date according to local time.   setMinutes Sets the minutes (0-59) for a specified date according to local time.   setMonth Sets the month (0-11) for a specified date according to local time.   setSeconds Sets the seconds (0-59) for a specified date according to local time.   setTime Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.   setUTCDate Sets the day of the month (1-31) for a specified date according to universal time.   setUTCFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to universal time.   setUTCHours Sets the hour (0-23) for a specified date according to universal time.   setUTCMilliseconds Sets the milliseconds (0-999) for a specified date according to universal time.   setUTCMinutes Sets the minutes (0-59) for a specified date according to universal time.   setUTCMonth Sets the month (0-11) for a specified date according to universal time.   setUTCSeconds Sets the seconds (0-59) for a specified date according to universal time.   setYear   Deprecated   Sets the year (usually 2-3 digits) for a specified date according to local time. Use setFullYear instead.   toDateString Returns the \"date\" portion of the Date as a human-readable string. toISOString Converts a date to a string following the ISO 8601 Extended Format. toJSON  Requires JavaScript 1.8.5  Returns a string encapsulating the Date object in JSON\u00a0format.   toGMTString   Deprecated   Converts a date to a string, using the Internet GMT conventions. Use toUTCString instead.   toLocaleDateString Returns the \"date\" portion of the Date as a string, using the current locale's conventions.   toLocaleFormat Non-standard      Converts a date to a string, using a format string.   toLocaleString Converts a date to a string, using the current locale's conventions. Overrides the Object.toLocaleString method.   toLocaleTimeString Returns the \"time\" portion of the Date as a string, using the current locale's conventions.   toSource Non-standard      Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.   toString Returns a string representing the specified Date object. Overrides the Object.prototype.toString method.   toTimeString Returns the \"time\" portion of the Date as a human-readable string.   toUTCString Converts a date to a string, using the universal time convention.   valueOf Returns the primitive value of a Date object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch   Examples Example: Several ways to assign dates The following examples show several ways to assign JavaScript\u00a0dates: \r           today = new Date(); birthday = new Date(\"December 17, 1995 03:24:00\"); birthday = new Date(1995,11,17); birthday = new Date(1995,11,17,3,24,0);\r          Example: Calculating elapsed time The following examples show how to determine the elapsed time between two JavaScript\u00a0dates: \r           \/\/ using static methods var start = Date.now(); \/\/ the event you'd like to time goes here: doSomethingForALongTime(); var end = Date.now(); var elapsed = end - start; \/\/ time in milliseconds\r          \/\/ if you have Date objects var start = new Date(); \/\/ the event you'd like to time goes here: doSomethingForALongTime(); var end = new Date(); var elapsed = end.getTime() - start.getTime(); \/\/ time in milliseconds  \r           \/\/ if you want to test a function and get back its return function printElapsedTime (fTest) { \tvar nStartTime = Date.now(), vReturn = fTest(), nEndTime = Date.now(); \talert(\"Elapsed time: \" + String(nEndTime - nStartTime) + \" milliseconds\"); \treturn vReturn; }  yourFunctionReturn = printElapsedTime(yourFunction);\r          Example: ISO 8601 formatted dates Date.toISOString() is now supported, so you can use that. The following example demonstrates how to manually format a JavaScript date, in an ISO 8601 format using UTC: \r           \/* use a function for the exact format desired... *\/ function ISODateString(d){   function pad(n){return n<10 ? '0'+n : n}   return d.getUTCFullYear()+'-'       + pad(d.getUTCMonth()+1)+'-'       + pad(d.getUTCDate())+'T'       + pad(d.getUTCHours())+':'       + pad(d.getUTCMinutes())+':'       + pad(d.getUTCSeconds())+'Z' }  var d = new Date(); console.log(ISODateString(d)); \/\/ prints something like 2009-09-28T19:03:12Z\r           Example: Several ways to assign dates The following examples show several ways to assign JavaScript\u00a0dates: \r           today = new Date(); birthday = new Date(\"December 17, 1995 03:24:00\"); birthday = new Date(1995,11,17); birthday = new Date(1995,11,17,3,24,0);\r          Example: Calculating elapsed time The following examples show how to determine the elapsed time between two JavaScript\u00a0dates: \r           \/\/ using static methods var start = Date.now(); \/\/ the event you'd like to time goes here: doSomethingForALongTime(); var end = Date.now(); var elapsed = end - start; \/\/ time in milliseconds\r          \/\/ if you have Date objects var start = new Date(); \/\/ the event you'd like to time goes here: doSomethingForALongTime(); var end = new Date(); var elapsed = end.getTime() - start.getTime(); \/\/ time in milliseconds  \r           \/\/ if you want to test a function and get back its return function printElapsedTime (fTest) { \tvar nStartTime = Date.now(), vReturn = fTest(), nEndTime = Date.now(); \talert(\"Elapsed time: \" + String(nEndTime - nStartTime) + \" milliseconds\"); \treturn vReturn; }  yourFunctionReturn = printElapsedTime(yourFunction);\r          Example: ISO 8601 formatted dates Date.toISOString() is now supported, so you can use that. The following example demonstrates how to manually format a JavaScript date, in an ISO 8601 format using UTC: \r           \/* use a function for the exact format desired... *\/ function ISODateString(d){   function pad(n){return n<10 ? '0'+n : n}   return d.getUTCFullYear()+'-'       + pad(d.getUTCMonth()+1)+'-'       + pad(d.getUTCDate())+'T'       + pad(d.getUTCHours())+':'       + pad(d.getUTCMinutes())+':'       + pad(d.getUTCSeconds())+'Z' }  var d = new Date(); console.log(ISODateString(d)); \/\/ prints something like 2009-09-28T19:03:12Z\r           Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean","title":"Boolean","description":"The Boolean object is an object wrapper for a boolean value. Syntax \r           new Boolean(value)\r          Parameters  value The initial value of the Boolean object.  Description The value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (\"\"), the object has an initial value of false. All other values, including any object or the string \"false\", create an object with an initial value of true. Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object. Any object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true: \r           x = new Boolean(false); if (x) {   \/\/ . . . this code is executed }\r          This behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false: \r           x = false; if (x) {   \/\/ . . . this code is not executed }\r          Do not use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task: \r           x = Boolean(expression);     \/\/ preferred x = new Boolean(expression); \/\/ don't use\r          If you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true. \r           myFalse = new Boolean(false);   \/\/ initial value of false g = new Boolean(myFalse);       \/\/ initial value of true myString = new String(\"Hello\"); \/\/ string object s = new Boolean(myString);      \/\/ initial value of true\r          Do not use a Boolean object in place of a Boolean primitive. Properties For properties available on Boolean instances, see Properties of Boolean instances.            prototype: Defines a property that is shared by all Boolean objects.   Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on Boolean instances, see Methods of Boolean instances.            The global Boolean object contains no methods of its own, however, it does inherit some methods through the prototype chain.   Methods inherited from  Function:apply, call, toSource, toString   Boolean instances All Boolean instances inherit from Boolean.prototype. As with all constructors, the prototype object dictates instances' inherited properties and methods. Properties   constructor Returns the function that created an instance's prototype. This is the Boolean function by default.    Properties inherited from  Object:__parent__, __proto__    Methods   toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.   toString Returns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toStringmethod.   valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch    Properties   constructor Returns the function that created an instance's prototype. This is the Boolean function by default.    Properties inherited from  Object:__parent__, __proto__    Methods   toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.   toString Returns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toStringmethod.   valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch    Examples Creating Boolean objects with an initial value of false \r           bNoParam = new Boolean(); bZero = new Boolean(0); bNull = new Boolean(null); bEmptyString = new Boolean(\"\"); bfalse = new Boolean(false);\r          Creating Boolean objects with an initial value of true \r           btrue = new Boolean(true); btrueString = new Boolean(\"true\"); bfalseString = new Boolean(\"false\"); bSuLin = new Boolean(\"Su Lin\");\r          Creating Boolean objects with an initial value of false \r           bNoParam = new Boolean(); bZero = new Boolean(0); bNull = new Boolean(null); bEmptyString = new Boolean(\"\"); bfalse = new Boolean(false);\r          Creating Boolean objects with an initial value of true \r           btrue = new Boolean(true); btrueString = new Boolean(\"true\"); bfalseString = new Boolean(\"false\"); bSuLin = new Boolean(\"Su Lin\");\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     See also  Boolean.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects","title":"Global Objects","description":"Standard global objects (by category) General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  Standard global objects (alphabetically)  Array ArrayBuffer Boolean Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error eval EvalError Float32Array Float64Array Function Infinity Int16Array Int32Array Int8Array isFinite isNaN Iterator JSON Math NaN Number Object parseFloat parseInt RangeError ReferenceError RegExp StopIteration String SyntaxError TypeError Uint16Array Uint32Array Uint8Array Uint8ClampedArray undefined uneval URIError  Other objects in the global scope are either created by the user script or provided by the host application. The host objects available in Gecko-based browsers are documented in the Gecko DOM Reference. For more information about the distinction between the DOM and core JavaScript, see The DOM and JavaScript article."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array","title":"Array","description":"The JavaScript\u00a0Array global object is a constructor for arrays, which are high-level, list-like objects. Syntax  \r           [element0, element1, ..., elementN] new Array(element0, element1, ..., elementN) new Array(arrayLength)\r            element0, element1, ..., elementN  A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the\u00a0Array constructor and that argument is a number. (See below.) Note that this special case only applies to JavaScript arrays created with the\u00a0Array constructor, not with array literals created with the bracket syntax. arrayLength If the first argument passed to the\u00a0Array constructor is an integer between 0 and 232-1 (inclusive), a new JavaScript array is created with that number of elements. If the argument is any other number, a RangeError exception is thrown.  Description Arrays are list-like objects that come with a several built-in methods to perform traversal and mutation operations. Neither the size of a JavaScript array nor the types of its elements are fixed.\u00a0 Since an array's size can grow or shrink at any time, JavaScript arrays are not guaranteed to be dense.\u00a0 In general, these are convenient characteristics, but if these are desirable things to have for your use case, you might consider using WebGL typed arrays. Note that you shouldn't use an array as an associative array. You can use plain objects instead, although doing so comes with its own caveats. See the post Lightweight JavaScript dictionaries with arbitrary keys as an example. Accessing array elements JavaScript arrays are zero-indexed; the first element of an array is actually at index 0, and the last element is at the index one less than the value of the array's length property. \r           var arr = [\"this is the first element\", \"this is the second element\"]; console.log(arr[0]);              \/\/ prints \"this is the first element\" console.log(arr[1]);              \/\/ prints \"this is the second element\" console.log(arr[arr.length - 1]); \/\/ prints \"this is the second element\"\r          Array elements are just object properties, in the way that toString is a property. However, note that trying to access the first element of an array as follows will throw a syntax error: \r           console.log(arr.0);\r          Note that there is nothing unique about JavaScript arrays and their properties that causes this. JavaScript properties that begin with a digit cannot be referenced with the dot notation.\u00a0 They must be accessed using bracket notation.\u00a0 For example, if you had an object with a property \"3d\", it would not be possible to access it using dot notation, either. It, too, would have to be referenced using bracket notation.\u00a0 This similarity is exhibited in the following two code samples: \r           var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]; try {   console.log(years.0); } catch (ex) {   console.log(\"Using bracket notation\");   console.log(years[0]); }\r          \r           try {   renderer.3d.setTexture(model, \"character.png\"); } catch (ex) {   console.log(\"Using bracket notation\");   renderer[\"3d\"].setTexture(model, \"character.png\"); }\r          Note that in the 3d example, \"3d\" had to be quoted.\u00a0 It's possible to quote the JavaScript array indexes as well (e.g., years[\"2\"] instead of years[2]), though it's not necessary.\u00a0 The 2 in years[2] eventually gets coerced into a string by the JavaScript engine anyway, through an implicit toString conversion.\u00a0 It is for this reason that \"2\" and \"02\" would refer to two different slots on the years object and the following example logs true: \r           console.log(years[\"2\"] != years[\"02\"]);\r          Relationship between length and numerical properties A JavaScript array's length property and numerical properties are connected.\u00a0 Several of the built-in array methods (e.g., join, slice, indexOf, etc.) take into account the value of an array's length property when they're called.\u00a0 Other methods (e.g., push, splice, etc.) also result in updates to an array's length property. \r           var fruits = []; fruits.push(\"banana\", \"apple\", \"peach\");  console.log(fruits.length); \/\/ logs 3\r          When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the array will grow to a size large enough to accommodate an element at that index, and the engine will update the array's length property accordingly: \r           fruits[3] = \"mango\"; console.log(fruits[3]); console.log(fruits.length); \/\/ logs 4\r          Setting the length property directly also results in special behavior. \r           fruits.length = 10; console.log(fruits);        \/\/ The array gets padded with undefined console.log(fruits.length); \/\/ 10\r          This is explained further on the length page. Creating an array using the result of a match The result of a match between a regular expression and a string can create a JavaScript array. This array has properties and elements that provide information about the match. An array is the return value of RegExp.exec, String.match, and String.replace. To help explain these properties and elements, look at the following example and then refer to the table below: \r           \/\/ Match one d followed by one or more b's followed by one d \/\/ Remember matched b's and the following d \/\/ Ignore case  var myRe = \/d(b+)(d)\/i; var myArray = myRe.exec(\"cdbBdbsbz\");\r          The properties and elements returned from this match are as follows:    Property\/Element Description Example   input A read-only property that reflects the original string against which the regular expression was matched. cdbBdbsbz   index A read-only property that is the zero-based index of the match in the string. 1   [0] A read-only element that specifies the last matched characters. dbBd   [1], ...[n] Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited. [1]: bB [2]: d    Accessing array elements JavaScript arrays are zero-indexed; the first element of an array is actually at index 0, and the last element is at the index one less than the value of the array's length property. \r           var arr = [\"this is the first element\", \"this is the second element\"]; console.log(arr[0]);              \/\/ prints \"this is the first element\" console.log(arr[1]);              \/\/ prints \"this is the second element\" console.log(arr[arr.length - 1]); \/\/ prints \"this is the second element\"\r          Array elements are just object properties, in the way that toString is a property. However, note that trying to access the first element of an array as follows will throw a syntax error: \r           console.log(arr.0);\r          Note that there is nothing unique about JavaScript arrays and their properties that causes this. JavaScript properties that begin with a digit cannot be referenced with the dot notation.\u00a0 They must be accessed using bracket notation.\u00a0 For example, if you had an object with a property \"3d\", it would not be possible to access it using dot notation, either. It, too, would have to be referenced using bracket notation.\u00a0 This similarity is exhibited in the following two code samples: \r           var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]; try {   console.log(years.0); } catch (ex) {   console.log(\"Using bracket notation\");   console.log(years[0]); }\r          \r           try {   renderer.3d.setTexture(model, \"character.png\"); } catch (ex) {   console.log(\"Using bracket notation\");   renderer[\"3d\"].setTexture(model, \"character.png\"); }\r          Note that in the 3d example, \"3d\" had to be quoted.\u00a0 It's possible to quote the JavaScript array indexes as well (e.g., years[\"2\"] instead of years[2]), though it's not necessary.\u00a0 The 2 in years[2] eventually gets coerced into a string by the JavaScript engine anyway, through an implicit toString conversion.\u00a0 It is for this reason that \"2\" and \"02\" would refer to two different slots on the years object and the following example logs true: \r           console.log(years[\"2\"] != years[\"02\"]);\r          Relationship between length and numerical properties A JavaScript array's length property and numerical properties are connected.\u00a0 Several of the built-in array methods (e.g., join, slice, indexOf, etc.) take into account the value of an array's length property when they're called.\u00a0 Other methods (e.g., push, splice, etc.) also result in updates to an array's length property. \r           var fruits = []; fruits.push(\"banana\", \"apple\", \"peach\");  console.log(fruits.length); \/\/ logs 3\r          When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the array will grow to a size large enough to accommodate an element at that index, and the engine will update the array's length property accordingly: \r           fruits[3] = \"mango\"; console.log(fruits[3]); console.log(fruits.length); \/\/ logs 4\r          Setting the length property directly also results in special behavior. \r           fruits.length = 10; console.log(fruits);        \/\/ The array gets padded with undefined console.log(fruits.length); \/\/ 10\r          This is explained further on the length page. Creating an array using the result of a match The result of a match between a regular expression and a string can create a JavaScript array. This array has properties and elements that provide information about the match. An array is the return value of RegExp.exec, String.match, and String.replace. To help explain these properties and elements, look at the following example and then refer to the table below: \r           \/\/ Match one d followed by one or more b's followed by one d \/\/ Remember matched b's and the following d \/\/ Ignore case  var myRe = \/d(b+)(d)\/i; var myArray = myRe.exec(\"cdbBdbsbz\");\r          The properties and elements returned from this match are as follows:    Property\/Element Description Example   input A read-only property that reflects the original string against which the regular expression was matched. cdbBdbsbz   index A read-only property that is the zero-based index of the match in the string. 1   [0] A read-only element that specifies the last matched characters. dbBd   [1], ...[n] Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited. [1]: bB [2]: d    Properties For properties available on Array instances, see Properties of Array instances.               prototype Allows the addition of properties to all objects.      Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on Array instances, see Methods of Array instances.             isArray   Requires JavaScript 1.8.5  Return true if a variable is an array, if not false.   Array instances Array\u00a0instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all JavaScript\u00a0Array instances. Properties   constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch   Methods Mutator methods  These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.   Accessor methods   These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.   Iteration methods  Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.   Properties   constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch   Methods Mutator methods  These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.   Accessor methods   These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.   Iteration methods  Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.   Mutator methods  These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.   Accessor methods   These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.   Iteration methods  Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.   Examples Example: Creating an Array The following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100. \r           var msgArray = new Array(); msgArray[0] = \"Hello\"; msgArray[99] = \"world\";  if (msgArray.length == 100)    print(\"The length is 100.\");\r          Example: Creating a Two-dimensional Array The following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 6,4 to 4,4. The position 4,4 is left blank. \r           var board =  [ ['R','N','B','Q','K','B','N','R'],   ['P','P','P','P','P','P','P','P'],   [' ',' ',' ',' ',' ',' ',' ',' '],   [' ',' ',' ',' ',' ',' ',' ',' '],   [' ',' ',' ',' ',' ',' ',' ',' '],   [' ',' ',' ',' ',' ',' ',' ',' '],   ['p','p','p','p','p','p','p','p'],   ['r','n','b','q','k','b','n','r']]; print(board.join('\\n') + '\\n\\n');  \/\/ Move King's Pawn forward 2 board[4][4] = board[6][4]; board[6][4] = ' '; print(board.join('\\n'));\r          Here is the output: R,N,B,Q,K,B,N,R P,P,P,P,P,P,P,P  , , , , , , ,   , , , , , , ,   , , , , , , ,   , , , , , , ,  p,p,p,p,p,p,p,p r,n,b,q,k,b,n,r  R,N,B,Q,K,B,N,R P,P,P,P,P,P,P,P  , , , , , , ,   , , , , , , ,   , , , ,p, , ,   , , , , , , ,  p,p,p,p, ,p,p,p r,n,b,q,k,b,n,r  Example: Creating an Array The following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100. \r           var msgArray = new Array(); msgArray[0] = \"Hello\"; msgArray[99] = \"world\";  if (msgArray.length == 100)    print(\"The length is 100.\");\r          Example: Creating a Two-dimensional Array The following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 6,4 to 4,4. The position 4,4 is left blank. \r           var board =  [ ['R','N','B','Q','K','B','N','R'],   ['P','P','P','P','P','P','P','P'],   [' ',' ',' ',' ',' ',' ',' ',' '],   [' ',' ',' ',' ',' ',' ',' ',' '],   [' ',' ',' ',' ',' ',' ',' ',' '],   [' ',' ',' ',' ',' ',' ',' ',' '],   ['p','p','p','p','p','p','p','p'],   ['r','n','b','q','k','b','n','r']]; print(board.join('\\n') + '\\n\\n');  \/\/ Move King's Pawn forward 2 board[4][4] = board[6][4]; board[6][4] = ' '; print(board.join('\\n'));\r          Here is the output: R,N,B,Q,K,B,N,R P,P,P,P,P,P,P,P  , , , , , , ,   , , , , , , ,   , , , , , , ,   , , , , , , ,  p,p,p,p,p,p,p,p r,n,b,q,k,b,n,r  R,N,B,Q,K,B,N,R P,P,P,P,P,P,P,P  , , , , , , ,   , , , , , , ,   , , , ,p, , ,   , , , , , , ,  p,p,p,p, ,p,p,p r,n,b,q,k,b,n,r  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)     See Also  Indexing Object Properties in Core JavaScript 1.5 Guide:Working with Object New in JavaScript 1.7: Array comprehensions New in JavaScript 1.6: Array extras Draft: Typed Arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function","title":"Function","description":"Every function in JavaScript is actually a Function object. Syntax new Function ([arg1[, arg2[, ... argN]],] functionBody) Parameters  arg1, arg2, ... argN Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example \"x\", \"theValue\", or \"a,b\".   functionBody A string containing the JavaScript statements comprising the function definition.  Description Function objects created with the Function constructor are parsed when the function is created. This is less efficient than declaring a function and calling it within your code, because functions declared with the function statement are parsed with the rest of the code. All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed. Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor. Properties For properties available on Function instances, see Properties of Function instances.             prototype Allows the extension of all Function objects.    Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on Function instances, see Methods of Function instances.            Although the Function object does not provide any methods of its own, it does inherit methods through the prototype chain.   Methods inherited from  Function:apply, call, toSource, toString   Function instances Function instances inherit from Function.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Function instances. Properties   arguments  Deprecated   An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.   arity  Obsolete since JavaScript 1.8.6 Specifies the number of arguments expected by the function. Use the length property instead.   caller Non-standard      Specifies the function that invoked the currently executing function.   constructor Specifies the function that creates an object's prototype.   length Specifies the number of arguments expected by the function.   name Non-standard      The name of the function.    Properties inherited from  Object:__parent__, __proto__   Methods   apply Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.   bind\u00a0 Requires JavaScript 1.8.5  Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.   call Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. isGenerator  Requires JavaScript 1.8.6  Returns true if the function is a generator; otherwise returns false.   toSource\u00a0Non-standard      Returns a string representing the source code of the function. Overrides the Object.toSource method.   toString Returns a string representing the source code of the function. Overrides the Object.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch    Properties   arguments  Deprecated   An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.   arity  Obsolete since JavaScript 1.8.6 Specifies the number of arguments expected by the function. Use the length property instead.   caller Non-standard      Specifies the function that invoked the currently executing function.   constructor Specifies the function that creates an object's prototype.   length Specifies the number of arguments expected by the function.   name Non-standard      The name of the function.    Properties inherited from  Object:__parent__, __proto__   Methods   apply Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.   bind\u00a0 Requires JavaScript 1.8.5  Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.   call Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. isGenerator  Requires JavaScript 1.8.6  Returns true if the function is a generator; otherwise returns false.   toSource\u00a0Non-standard      Returns a string representing the source code of the function. Overrides the Object.toSource method.   toString Returns a string representing the source code of the function. Overrides the Object.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch    Example: Specifying arguments with the Function constructor The following code creates a Function object that takes two arguments. \r           \/\/ Example can be run directly in your JavaScript console  \/\/ Create a function that takes two arguments and returns the sum of those arguments var adder = new Function(\"a\", \"b\", \"return a + b\");  \/\/ Call the function adder(2, 6); \/\/ > 8\r          The arguments \"a\" and \"b\" are formal argument names that are used in the function body, \"return a + b\". Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     See also  function Operator function Statement Functions"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number","title":"Number","description":"Creates a wrapper object to allow you to work with numerical values. Syntax new Number(value) Parameters  value The numeric value of the object being created.  Description The primary uses for the Number object are: If the argument cannot be converted into a number, it returns NaN. In a non-constructor context (i.e., without the new operator), Number can be used to perform a type conversion. Properties For properties available on Number instances, see Properties of Number instances.            The largest positive representable number.\u00a0 The largest negative representable number is -MAX_VALUE.  MAX_VALUE  The smallest positive representable number -- that is, the positive number closest to zero (without actually being zero).\u00a0 The smallest negative representable number is -MIN_VALUE.  MIN_VALUE   NaN Special \"not a number\" value.   NEGATIVE_INFINITY Special value representing negative infinity; returned on overflow.   POSITIVE_INFINITY Special value representing infinity; returned on overflow.   prototype Allows the addition of properties to a Number object.    Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on Number instances, see Methods of Number instances.            Although the Number object contains no methods of its own, it does inherit some methods through the prototype chain.   Methods inherited from  Function:apply, call, toSource, toString   Number instances All Number instances inherit from Number.prototype. The prototype object of the Number constructor can be modified to affect all Number instances. Properties   constructor Returns the function that created this object's instance. By default this is the Number object.    Properties inherited from  Object:__parent__, __proto__    Methods   toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    Properties   constructor Returns the function that created this object's instance. By default this is the Number object.    Properties inherited from  Object:__parent__, __proto__    Methods   toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    Examples Example: Using the Number object to assign values to numeric variables The following example uses the Number object's properties to assign values to several numeric variables: \r           biggestNum = Number.MAX_VALUE; smallestNum = Number.MIN_VALUE; infiniteNum = Number.POSITIVE_INFINITY; negInfiniteNum = Number.NEGATIVE_INFINITY; notANum = Number.NaN;\r          Example: Using Number to convert a Date object The following example converts the Date object to a numerical value using Number as a function: \r           var d = new Date(\"December 17, 1995 03:24:00\"); print(Number(d));\r          This displays \"819199440000\". Example: Using the Number object to assign values to numeric variables The following example uses the Number object's properties to assign values to several numeric variables: \r           biggestNum = Number.MAX_VALUE; smallestNum = Number.MIN_VALUE; infiniteNum = Number.POSITIVE_INFINITY; negInfiniteNum = Number.NEGATIVE_INFINITY; notANum = Number.NaN;\r          Example: Using Number to convert a Date object The following example converts the Date object to a numerical value using Number as a function: \r           var d = new Date(\"December 17, 1995 03:24:00\"); print(Number(d));\r          This displays \"819199440000\". Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     See also  NaN The Math global object"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object","title":"Object","description":"Creates an object wrapper. Syntax new Object( [ value ] ) Parameters  value Any value.  Description The Object constructor creates an object wrapper for the given value. If the value is null or undefined, it will create and return an empty object, otherwise, it will return an object of a type that corresponds to the given value. When called in a non-constructor context, Object behaves identically. Properties For properties available on Object instances, see Properties of Object instances.             prototype Allows the addition of properties to all objects of type Object.    Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on Object instances, see Methods of Object instances.             create  Requires JavaScript 1.8.5  Creates a new object with the specified prototype object and properties. defineProperty  Requires JavaScript 1.8.5  Adds the named property described by a given descriptor to an object. defineProperties  Requires JavaScript 1.8.5  Adds the named properties described by the given descriptors to an object. getOwnPropertyDescriptor  Requires JavaScript 1.8.5  Returns a property descriptor for a named property on an object. keys  Requires JavaScript 1.8.5  Returns an array containing the names of all of the given object's own enumerable properties. getOwnPropertyNames  Requires JavaScript 1.8.5  Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties. getPrototypeOf  Requires JavaScript 1.8.1  Returns the prototype of the specified object. preventExtensions  Requires JavaScript 1.8.5  Prevents any extensions of an object. isExtensible  Requires JavaScript 1.8.5  Determine if extending of an object is allowed. seal  Requires JavaScript 1.8.5  Prevents other code from deleting properties of an object. isSealed  Requires JavaScript 1.8.5  Determine if an object is sealed. freeze  Requires JavaScript 1.8.5  Freezes an object: other code can't delete or change any properties. isFrozen  Requires JavaScript 1.8.5  Determine if an object was frozen.    Methods inherited from  Function:apply, call, toSource, toString   Object instances All objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden. For example, other constructors' prototypes override the constructor property and provide their own toString methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain. Properties   constructor Specifies the function that creates an object's prototype. __count__   Obsolete since JavaScript 1.8.5 Returns the number of enumerable properties directly on a user-defined object. __parent__   Obsolete since JavaScript 1.8.5 Points to an object's context. __proto__ Non-standard      Points to the object which was used as prototype when the object was instantiated.   Methods   __defineGetter__ Non-standard      Associates a function with a property that, when accessed, executes that function and returns its return value.   __defineSetter__ Non-standard      Associates a function with a property that, when set, executes that function which modifies the property.   eval   Obsolete since JavaScript 1.8.5 Evaluates a string of JavaScript code in the context of the specified object. hasOwnProperty Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. isPrototypeOf Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.   __lookupGetter__ Non-standard      Returns the function associated with the specified property by the __defineGetter__ method.   __lookupSetter__ Non-standard      Returns the function associated with the specified property by the __defineSetter__ method.   __noSuchMethod__ Non-standard      Allows a function to be defined that will be executed when an undefined object member is called as a method.   propertyIsEnumerable Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.   toSource Non-standard      Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.   toLocaleString Calls toString.   toString Returns a string representation of the object.   unwatch Non-standard      Removes a watchpoint from a property of the object.   valueOf Returns the primitive value of the specified object.   watch Non-standard      Adds a watchpoint to a property of the object.   Properties   constructor Specifies the function that creates an object's prototype. __count__   Obsolete since JavaScript 1.8.5 Returns the number of enumerable properties directly on a user-defined object. __parent__   Obsolete since JavaScript 1.8.5 Points to an object's context. __proto__ Non-standard      Points to the object which was used as prototype when the object was instantiated.   Methods   __defineGetter__ Non-standard      Associates a function with a property that, when accessed, executes that function and returns its return value.   __defineSetter__ Non-standard      Associates a function with a property that, when set, executes that function which modifies the property.   eval   Obsolete since JavaScript 1.8.5 Evaluates a string of JavaScript code in the context of the specified object. hasOwnProperty Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. isPrototypeOf Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.   __lookupGetter__ Non-standard      Returns the function associated with the specified property by the __defineGetter__ method.   __lookupSetter__ Non-standard      Returns the function associated with the specified property by the __defineSetter__ method.   __noSuchMethod__ Non-standard      Allows a function to be defined that will be executed when an undefined object member is called as a method.   propertyIsEnumerable Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.   toSource Non-standard      Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.   toLocaleString Calls toString.   toString Returns a string representation of the object.   unwatch Non-standard      Removes a watchpoint from a property of the object.   valueOf Returns the primitive value of the specified object.   watch Non-standard      Adds a watchpoint to a property of the object.   Examples Example: Using Object given undefined and null types The following examples store an empty Object object in o: \r           var o = new Object();\r          \r           var o = new Object(undefined);\r          \r           var o = new Object(null);\r          Example: Using Object to create Boolean objects The following examples store Boolean objects in o: \r           \/\/ equivalent to o = new Boolean(true); var o = new Object(true);\r          \r           \/\/ equivalent to o = new Boolean(false); var o = new Object(Boolean());\r          Example: Using Object given undefined and null types The following examples store an empty Object object in o: \r           var o = new Object();\r          \r           var o = new Object(undefined);\r          \r           var o = new Object(null);\r          Example: Using Object to create Boolean objects The following examples store Boolean objects in o: \r           \/\/ equivalent to o = new Boolean(true); var o = new Object(true);\r          \r           \/\/ equivalent to o = new Boolean(false); var o = new Object(Boolean());\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp","title":"RegExp","description":"Creates a regular expression object for matching text with a pattern. Syntax RegExp(pattern [, flags]) \/pattern\/flags Parameters  pattern The text of the regular expression.   flags  If specified, flags can have any combination of the following values:  g global match i ignore case m Treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)   y  New in Firefox 3  Non-standard      sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes). This allows the match-only-at-start capabilities of the character \"^\" to effectively be used at any location in a string by changing the value of the lastIndex property.  Description When using the constructor function, the normal string escape rules (preceding special characters with \\ when included in a string) are necessary. For example, the following are equivalent: \r           var re = new RegExp(\"\\\\w+\"); var re = \/\\w+\/;\r          Notice that the parameters to the literal format do not use quotation marks to indicate strings, while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression: \r           \/ab+c\/i; new RegExp(\"ab+c\", \"i\");\r          Special characters in regular expressions    Character Meaning   \\  For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, \/b\/ matches the character 'b'. By placing a backslash in front of b, that is by using \/\\b\/, the character becomes special to mean match a word boundary. or For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, * is a special character that means 0 or more occurrences of the preceding character should be matched; for example, \/a*\/ means match 0 or more \"a\"s. To match * literally, precede it with a backslash; for example, \/a\\*\/ matches 'a*'.    ^  Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character. For example, \/^A\/ does not match the 'A' in \"an A\", but does match the first 'A' in \"An A.\"    $  Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character. For example, \/t$\/ does not match the 't' in \"eater\", but does match it in \"eat\".    *  Matches the preceding item 0 or more times. For example, \/bo*\/ matches 'boooo' in \"A ghost booooed\" and 'b' in \"A bird warbled\", but nothing in \"A goat grunted\".    +  Matches the preceding item 1 or more times. Equivalent to {1,}. For example, \/a+\/ matches the 'a' in \"candy\" and all the a's in \"caaaaaaandy\".    ?  Matches the preceding item 0 or 1 time. For example, \/e?le?\/ matches the 'el' in \"angel\" and the 'le' in \"angle.\" If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times). Also used in lookahead assertions, described under (?=), (?!), and (?:) in this table.    .  (The decimal point) matches any single character except the newline characters: \\n \\r \\u2028 or \\u2029. ([\\s\\S] can be used to match any character including newlines.) For example, \/.n\/ matches 'an' and 'on' in \"nay, an apple is on the tree\", but not 'nay'.    (x)  Matches x and remembers the match. These are called capturing parentheses. For example, \/(foo)\/ matches and remembers 'foo' in \"foo bar.\" The matched substring can be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    (?:x)  Matches x but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    x(?=y)  Matches x only if x is followed by y. For example, \/Jack(?=Sprat)\/ matches 'Jack' only if it is followed by 'Sprat'. \/Jack(?=Sprat|Frost)\/ matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.    x(?!y)  Matches x only if x is not followed by y. For example, \/\\d+(?!\\.)\/ matches a number only if it is not followed by a decimal point. \/\\d+(?!\\.)\/.exec(\"3.141\") matches 141 but not 3.141.    x|y  Matches either x or y. For example, \/green|red\/ matches 'green' in \"green apple\" and 'red' in \"red apple.\"    {n}  Where n is a positive integer. Matches exactly n occurrences of the preceding item. For example, \/a{2}\/ doesn't match the 'a' in \"candy,\" but it matches all of the a's in \"caandy,\" and the first two a's in \"caaandy.\"    {n,}  Where n is a positive integer. Matches at least n occurrences of the preceding item. For example, \/a{2,}\/ doesn't match the 'a' in \"candy\", but matches all of the a's in \"caandy\" and in \"caaaaaaandy.\"    {n,m}  Where n and m are positive integers. Matches at least n and at most m occurrences of the preceding item. For example, \/a{1,3}\/ matches nothing in \"cndy\", the 'a' in \"candy,\" the first two a's in \"caandy,\" and the first three a's in \"caaaaaaandy\". Notice that when matching \"caaaaaaandy\", the match is \"aaa\", even though the original string had more a's in it.    [xyz]  A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen. For example, [abcd] is the same as [a-d]. They match the 'b' in \"brisket\" and the 'c' in \"chop\".    [^xyz]  A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen. For example, [^abc] is the same as [^a-c]. They initially match 'r' in \"brisket\" and 'h' in \"chop.\"    [\\b]  Matches a backspace. (Not to be confused with \\b.)    \\b  Matches a word boundary, such as a space. (Not to be confused with [\\b].) For example, \/\\bn\\w\/ matches the 'no' in \"noonday\"; \/\\wy\\b\/ matches the 'ly' in \"possibly yesterday.\"    \\B  Matches a non-word boundary. For example, \/\\w\\Bn\/ matches 'on' in \"noonday\", and \/y\\B\\w\/ matches 'ye' in \"possibly yesterday.\"    \\cX  Where X is a letter from A - Z. Matches a control character in a string. For example, \/\\cM\/ matches control-M in a string.    \\d  Matches a digit character in the basic Latin alphabet. Equivalent to [0-9]. Note: In Firefox 2 and earlier, matches a digit character from any alphabet. (  bug 378738 ) For example, \/\\d\/ or \/[0-9]\/ matches '2' in \"B2 is the suite number.\"    \\D  Matches any character that is not a digit in the basic Latin alphabet. Equivalent to [^0-9]. Note: In Firefox 2 and earlier, excludes digit characters from all alphabets. (  bug 378738 ) For example, \/\\D\/ or \/[^0-9]\/ matches 'B' in \"B2 is the suite number.\"    \\f  Matches a form-feed.    \\n  Matches a linefeed.    \\r  Matches a carriage return.    \\s  Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces. [equivalent_s] For example, \/\\s\\w*\/ matches ' bar' in \"foo bar.\"    \\S  Matches a single character other than white space. [equivalent_S] For example, \/\\S\\w*\/ matches 'foo' in \"foo bar.\"    \\t  Matches a tab.    \\v  Matches a vertical tab.    \\w  Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to [A-Za-z0-9_]. For example, \/\\w\/ matches 'a' in \"apple,\" '5' in \"$5.28,\" and '3' in \"3D.\"    \\W  Matches any character that is not a word character from the basic Latin alphabet. Equivalent to [^A-Za-z0-9_]. For example, \/\\W\/ or \/[^A-Za-z0-9_]\/ matches '%' in \"50%.\"    \\n  Where n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses). For example, \/apple(,)\\sorange\\1\/ matches 'apple, orange,' in \"apple, orange, cherry, peach.\" A more complete example follows this table.    \\0  Matches a NUL character. Do not follow this with another digit.    \\xhh  Matches the character with the code hh (two hexadecimal digits)    \\uhhhh  Matches the character with the Unicode value hhhh (four hexadecimal digits).     The literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration. The constructor of the regular expression object, for example, new RegExp(\"ab+c\"), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.   ^Equivalent to: [\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]   ^Equivalent to: [^\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000] Special characters in regular expressions    Character Meaning   \\  For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, \/b\/ matches the character 'b'. By placing a backslash in front of b, that is by using \/\\b\/, the character becomes special to mean match a word boundary. or For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, * is a special character that means 0 or more occurrences of the preceding character should be matched; for example, \/a*\/ means match 0 or more \"a\"s. To match * literally, precede it with a backslash; for example, \/a\\*\/ matches 'a*'.    ^  Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character. For example, \/^A\/ does not match the 'A' in \"an A\", but does match the first 'A' in \"An A.\"    $  Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character. For example, \/t$\/ does not match the 't' in \"eater\", but does match it in \"eat\".    *  Matches the preceding item 0 or more times. For example, \/bo*\/ matches 'boooo' in \"A ghost booooed\" and 'b' in \"A bird warbled\", but nothing in \"A goat grunted\".    +  Matches the preceding item 1 or more times. Equivalent to {1,}. For example, \/a+\/ matches the 'a' in \"candy\" and all the a's in \"caaaaaaandy\".    ?  Matches the preceding item 0 or 1 time. For example, \/e?le?\/ matches the 'el' in \"angel\" and the 'le' in \"angle.\" If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times). Also used in lookahead assertions, described under (?=), (?!), and (?:) in this table.    .  (The decimal point) matches any single character except the newline characters: \\n \\r \\u2028 or \\u2029. ([\\s\\S] can be used to match any character including newlines.) For example, \/.n\/ matches 'an' and 'on' in \"nay, an apple is on the tree\", but not 'nay'.    (x)  Matches x and remembers the match. These are called capturing parentheses. For example, \/(foo)\/ matches and remembers 'foo' in \"foo bar.\" The matched substring can be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    (?:x)  Matches x but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    x(?=y)  Matches x only if x is followed by y. For example, \/Jack(?=Sprat)\/ matches 'Jack' only if it is followed by 'Sprat'. \/Jack(?=Sprat|Frost)\/ matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.    x(?!y)  Matches x only if x is not followed by y. For example, \/\\d+(?!\\.)\/ matches a number only if it is not followed by a decimal point. \/\\d+(?!\\.)\/.exec(\"3.141\") matches 141 but not 3.141.    x|y  Matches either x or y. For example, \/green|red\/ matches 'green' in \"green apple\" and 'red' in \"red apple.\"    {n}  Where n is a positive integer. Matches exactly n occurrences of the preceding item. For example, \/a{2}\/ doesn't match the 'a' in \"candy,\" but it matches all of the a's in \"caandy,\" and the first two a's in \"caaandy.\"    {n,}  Where n is a positive integer. Matches at least n occurrences of the preceding item. For example, \/a{2,}\/ doesn't match the 'a' in \"candy\", but matches all of the a's in \"caandy\" and in \"caaaaaaandy.\"    {n,m}  Where n and m are positive integers. Matches at least n and at most m occurrences of the preceding item. For example, \/a{1,3}\/ matches nothing in \"cndy\", the 'a' in \"candy,\" the first two a's in \"caandy,\" and the first three a's in \"caaaaaaandy\". Notice that when matching \"caaaaaaandy\", the match is \"aaa\", even though the original string had more a's in it.    [xyz]  A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen. For example, [abcd] is the same as [a-d]. They match the 'b' in \"brisket\" and the 'c' in \"chop\".    [^xyz]  A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen. For example, [^abc] is the same as [^a-c]. They initially match 'r' in \"brisket\" and 'h' in \"chop.\"    [\\b]  Matches a backspace. (Not to be confused with \\b.)    \\b  Matches a word boundary, such as a space. (Not to be confused with [\\b].) For example, \/\\bn\\w\/ matches the 'no' in \"noonday\"; \/\\wy\\b\/ matches the 'ly' in \"possibly yesterday.\"    \\B  Matches a non-word boundary. For example, \/\\w\\Bn\/ matches 'on' in \"noonday\", and \/y\\B\\w\/ matches 'ye' in \"possibly yesterday.\"    \\cX  Where X is a letter from A - Z. Matches a control character in a string. For example, \/\\cM\/ matches control-M in a string.    \\d  Matches a digit character in the basic Latin alphabet. Equivalent to [0-9]. Note: In Firefox 2 and earlier, matches a digit character from any alphabet. (  bug 378738 ) For example, \/\\d\/ or \/[0-9]\/ matches '2' in \"B2 is the suite number.\"    \\D  Matches any character that is not a digit in the basic Latin alphabet. Equivalent to [^0-9]. Note: In Firefox 2 and earlier, excludes digit characters from all alphabets. (  bug 378738 ) For example, \/\\D\/ or \/[^0-9]\/ matches 'B' in \"B2 is the suite number.\"    \\f  Matches a form-feed.    \\n  Matches a linefeed.    \\r  Matches a carriage return.    \\s  Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces. [equivalent_s] For example, \/\\s\\w*\/ matches ' bar' in \"foo bar.\"    \\S  Matches a single character other than white space. [equivalent_S] For example, \/\\S\\w*\/ matches 'foo' in \"foo bar.\"    \\t  Matches a tab.    \\v  Matches a vertical tab.    \\w  Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to [A-Za-z0-9_]. For example, \/\\w\/ matches 'a' in \"apple,\" '5' in \"$5.28,\" and '3' in \"3D.\"    \\W  Matches any character that is not a word character from the basic Latin alphabet. Equivalent to [^A-Za-z0-9_]. For example, \/\\W\/ or \/[^A-Za-z0-9_]\/ matches '%' in \"50%.\"    \\n  Where n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses). For example, \/apple(,)\\sorange\\1\/ matches 'apple, orange,' in \"apple, orange, cherry, peach.\" A more complete example follows this table.    \\0  Matches a NUL character. Do not follow this with another digit.    \\xhh  Matches the character with the code hh (two hexadecimal digits)    \\uhhhh  Matches the character with the Unicode value hhhh (four hexadecimal digits).     The literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration. The constructor of the regular expression object, for example, new RegExp(\"ab+c\"), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.   ^Equivalent to: [\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]   ^Equivalent to: [^\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000] Properties For properties available on RegExp instances, see Properties of RegExp instances.             prototype Allows the addition of properties to all objects.    Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on RegExp instances, see Methods of RegExp instances.            The global RegExp object has no methods of its own, however, it does inherit some methods through the prototype chain.   Methods inherited from  Function:apply, call, toSource, toString   RegExp instances Properties  See also Deprecated RegExp Properties Note that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.  constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky  New in Firefox 3  Non-standard      Whether or not the search is sticky.    Properties inherited from  Object:__parent__, __proto__    Methods    See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   Properties  See also Deprecated RegExp Properties Note that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.  constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky  New in Firefox 3  Non-standard      Whether or not the search is sticky.    Properties inherited from  Object:__parent__, __proto__    Methods    See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   Examples Example: Using a regular expression to change data format The following script uses the replace method inherited by the String instance to match a name in the format first last and output it in the format last, first. In the replacement text, the script uses $1 and $2 to indicate the results of the corresponding matching parentheses in the regular expression pattern. \r           var re = \/(\\w+)\\s(\\w+)\/; var str = \"John Smith\"; var newstr = str.replace(re, \"$2, $1\"); print(newstr);\r          This displays \"Smith, John\". Example: Using a regular expression with the \"sticky\" flag This example demonstrates how one could use the sticky flag on regular expressions to match individual lines of multiline input. \r           var text = \"First line\\nsecond line\"; var regex = \/(\\S+) line\\n?\/y;  var match = regex.exec(text); print(match[1]);  \/\/ prints \"First\" print(regex.lastIndex); \/\/ prints 11  var match2 = regex.exec(text); print(match2[1]); \/\/ prints \"Second\" print(regex.lastIndex); \/\/ prints \"22\"  var match3 = regex.exec(text); print(match3 === null); \/\/ prints \"true\"\r          One can test at run-time whether the sticky flag is supported, using try\u00a0{\u00a0\u2026\u00a0} catch\u00a0{\u00a0\u2026\u00a0}. For this, either an eval(\u2026) expression or the RegExp(regex-string,\u00a0flags-string) syntax must be used (since the \/regex\/flags notation is processed at compile-time, so throws an exception before the catch block is encountered). For example: \r           var supports_sticky; try { RegExp('','y'); supports_sticky = true; } catch(e) { supports_sticky = false; } alert(supports_sticky); \/\/ alerts \"false\" in Firefox 2, \"true\" in Firefox 3+\r          Example: Using a regular expression to change data format The following script uses the replace method inherited by the String instance to match a name in the format first last and output it in the format last, first. In the replacement text, the script uses $1 and $2 to indicate the results of the corresponding matching parentheses in the regular expression pattern. \r           var re = \/(\\w+)\\s(\\w+)\/; var str = \"John Smith\"; var newstr = str.replace(re, \"$2, $1\"); print(newstr);\r          This displays \"Smith, John\". Example: Using a regular expression with the \"sticky\" flag This example demonstrates how one could use the sticky flag on regular expressions to match individual lines of multiline input. \r           var text = \"First line\\nsecond line\"; var regex = \/(\\S+) line\\n?\/y;  var match = regex.exec(text); print(match[1]);  \/\/ prints \"First\" print(regex.lastIndex); \/\/ prints 11  var match2 = regex.exec(text); print(match2[1]); \/\/ prints \"Second\" print(regex.lastIndex); \/\/ prints \"22\"  var match3 = regex.exec(text); print(match3 === null); \/\/ prints \"true\"\r          One can test at run-time whether the sticky flag is supported, using try\u00a0{\u00a0\u2026\u00a0} catch\u00a0{\u00a0\u2026\u00a0}. For this, either an eval(\u2026) expression or the RegExp(regex-string,\u00a0flags-string) syntax must be used (since the \/regex\/flags notation is processed at compile-time, so throws an exception before the catch block is encountered). For example: \r           var supports_sticky; try { RegExp('','y'); supports_sticky = true; } catch(e) { supports_sticky = false; } alert(supports_sticky); \/\/ alerts \"false\" in Firefox 2, \"true\" in Firefox 3+\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     See also  Regular Expressions chapter in the JavaScript Guide"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String","title":"String","description":"The String global object is a constructor for strings, or a sequence of characters. Syntax String literals take the forms: \r           'string text' \"string text\"\r          Or, using the String global object directly: \r           String(thing) new String(thing)\r          Parameters  thing Anything to be converted to a string.  Description Strings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their length, to build and concatenate them using the + and += string operators, and checking for the existence or location of substrings with the substring and substr methods. Character access There are two ways to access an individual character in a string. The first is the charAt method: \r           return 'cat'.charAt(1); \/\/ returns \"a\"\r          The other way is to treat the string as an array-like object, where individual characters correspond to a numerical index: \r           return 'cat'[1]; \/\/ returns \"a\"\r          Array-like character access (the second way above) is not part of ECMAScript 3. It is a JavaScript and ECMAScript 5 feature. For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See Object.defineProperty for more information.) Comparing strings C developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators: \r           var a = \"a\"; var b = \"b\"; if (a < b) \/\/ true   print(a + \" is less than \" + b); else if (a > b)   print(a + \" is greater than \" + b); else   print(a + \" and \" + b + \" are equal.\");\r          A similar result can be achieved using the localeCompare method inherited by String instances. Distinction between string primitives and String objects Note that JavaScript distinguishes between String objects and primitive string values. (The same is true of booleans and numbers.) String literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the new keyword) are primitive strings. JavaScript automatically converts primitives and String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup. \r           var s_prim = \"foo\"; var s_obj = new String(s_prim);  console.log(typeof s_prim); \/\/ Logs \"string\" console.log(typeof s_obj);  \/\/ Logs \"object\"\r          String primitives and String objects also give different results when using eval. Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object. For example: \r           s1 = \"2 + 2\";               \/\/ creates a string primitive s2 = new String(\"2 + 2\");   \/\/ creates a String object console.log(eval(s1));      \/\/ returns the number 4 console.log(eval(s2));      \/\/ returns the string \"2 + 2\"\r          For these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction. A String object can always be converted to its primitive counterpart with the valueOf method. \r           console.log(eval(s2.valueOf())); \/\/ returns the number 4\r          Character access There are two ways to access an individual character in a string. The first is the charAt method: \r           return 'cat'.charAt(1); \/\/ returns \"a\"\r          The other way is to treat the string as an array-like object, where individual characters correspond to a numerical index: \r           return 'cat'[1]; \/\/ returns \"a\"\r          Array-like character access (the second way above) is not part of ECMAScript 3. It is a JavaScript and ECMAScript 5 feature. For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See Object.defineProperty for more information.) Comparing strings C developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators: \r           var a = \"a\"; var b = \"b\"; if (a < b) \/\/ true   print(a + \" is less than \" + b); else if (a > b)   print(a + \" is greater than \" + b); else   print(a + \" and \" + b + \" are equal.\");\r          A similar result can be achieved using the localeCompare method inherited by String instances. Distinction between string primitives and String objects Note that JavaScript distinguishes between String objects and primitive string values. (The same is true of booleans and numbers.) String literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the new keyword) are primitive strings. JavaScript automatically converts primitives and String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup. \r           var s_prim = \"foo\"; var s_obj = new String(s_prim);  console.log(typeof s_prim); \/\/ Logs \"string\" console.log(typeof s_obj);  \/\/ Logs \"object\"\r          String primitives and String objects also give different results when using eval. Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object. For example: \r           s1 = \"2 + 2\";               \/\/ creates a string primitive s2 = new String(\"2 + 2\");   \/\/ creates a String object console.log(eval(s1));      \/\/ returns the number 4 console.log(eval(s2));      \/\/ returns the string \"2 + 2\"\r          For these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction. A String object can always be converted to its primitive counterpart with the valueOf method. \r           console.log(eval(s2.valueOf())); \/\/ returns the number 4\r          Properties For properties available on String instances, see Properties of String instances.             prototype Allows the addition of properties to a String object.    Properties inherited from  Function:arity, caller, constructor, length, name   Methods For methods available on String instances, see Methods of String instances.             fromCharCode Returns a string created by using the specified sequence of Unicode values.    Methods inherited from  Function:apply, call, toSource, toString   String instances Properties   constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.    Properties inherited from  Object:__parent__, __proto__    Methods    Methods unrelated to HTML   charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    HTML wrapper methods    Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch    Example It's possible to use String as a \"safer\" toString alternative, as although it still normally calls the underlying toString, it also works for null and undefined. For example: \r           var outputStrings = []; for (let i = 0, n = inputValues.length; i < n; ++i) {   outputStrings.push(String(inputValues[i])); }\r          Properties   constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.    Properties inherited from  Object:__parent__, __proto__    Methods    Methods unrelated to HTML   charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    HTML wrapper methods    Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch    Example It's possible to use String as a \"safer\" toString alternative, as although it still normally calls the underlying toString, it also works for null and undefined. For example: \r           var outputStrings = []; for (let i = 0, n = inputValues.length; i < n; ++i) {   outputStrings.push(String(inputValues[i])); }\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 0.2 (Supported) (Supported) (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBuffer","title":"ArrayBuffer","description":"Method overview    ArrayBuffer ArrayBuffer(unsigned long length);    Attributes    Attribute Type Description   byteLength unsigned long The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. Read only.    Methods ArrayBuffer() The constructor accepts as input a byte length for the new buffer, and returns the newly-created ArrayBuffer object.  ArrayBuffer ArrayBuffer( \u00a0 unsigned long length );  Parameters  length The size, in bytes, of the array buffer to create.  Return value A new ArrayBuffer object of the specified size. Its contents are initialized to 0. ArrayBuffer() The constructor accepts as input a byte length for the new buffer, and returns the newly-created ArrayBuffer object.  ArrayBuffer ArrayBuffer( \u00a0 unsigned long length );  Parameters  length The size, in bytes, of the array buffer to create.  Return value A new ArrayBuffer object of the specified size. Its contents are initialized to 0. Parameters  length The size, in bytes, of the array buffer to create.  Return value A new ArrayBuffer object of the specified size. Its contents are initialized to 0. Example In this example, we create a 32-byte buffer: \r           var buf = new ArrayBuffer(32);\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 7 4.0 (2)  10 11.6 5.1         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 4.0 4.0 (2)  -- -- 4.2     See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float32Array","title":"Float32Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Float32Array Float32Array(unsigned long length);    Float32Array Float32Array(TypedArray array);    Float32Array Float32Array(sequence<type> array);    Float32Array Float32Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Float32Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.    Constructor Returns a new Float32Array object.  Float32Array Float32Array( \u00a0 unsigned long length );  Float32Array Float32Array( \u00a0 TypedArray array );  Float32Array Float32Array( \u00a0 sequence<type> array );  Float32Array Float32Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float32Array's view of the buffer will start with the first byte.  Return value A new Float32Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 32-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit float. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit float. The final form of the constructor creates a new Float32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float32Array's view of the buffer will start with the first byte.  Return value A new Float32Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 32-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit float. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit float. The final form of the constructor creates a new Float32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Float32Array view on the ArrayBuffer store for this Float32Array object.  Float32Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Float32Array object. end  Optional  The offset to the last element in the array to be referenced by the new Float32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Float32Array view on the ArrayBuffer store for this Float32Array object.  Float32Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Float32Array object. end  Optional  The offset to the last element in the array to be referenced by the new Float32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Float32Array object. end  Optional  The offset to the last element in the array to be referenced by the new Float32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float64Array","title":"Float64Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Float64Array Float64Array(unsigned long length);    Float64Array Float64Array(TypedArray array);    Float64Array Float64Array(sequence<type> array);    Float64Array Float64Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Float64Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 8 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 8 The size, in bytes, of each array element.    Constructor Returns a new Float64Array object.  Float64Array Float64Array( \u00a0 unsigned long length );  Float64Array Float64Array( \u00a0 TypedArray array );  Float64Array Float64Array( \u00a0 sequence<type> array );  Float64Array Float64Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 64-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float64Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float64Array's view of the buffer will start with the first byte.  Return value A new Float64Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 64-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 64-bit float. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 64-bit float. The final form of the constructor creates a new Float64Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 64-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float64Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float64Array's view of the buffer will start with the first byte.  Return value A new Float64Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 64-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 64-bit float. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 64-bit float. The final form of the constructor creates a new Float64Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Float64Array view on the ArrayBuffer store for this Float64Array object.  Float64Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Float64Array object. end  Optional  The offset to the last element in the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Float64Array view on the ArrayBuffer store for this Float64Array object.  Float64Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Float64Array object. end  Optional  The offset to the last element in the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Float64Array object. end  Optional  The offset to the last element in the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int16Array","title":"Int16Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Int16Array Int16Array(unsigned long length);    Int16Array Int16Array(TypedArray array);    Int16Array Int16Array(sequence<type> array);    Int16Array Int16Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Int16Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.    Constructor Returns a new Int16Array object.  Int16Array Int16Array( \u00a0 unsigned long length );  Int16Array Int16Array( \u00a0 TypedArray array );  Int16Array Int16Array( \u00a0 sequence<type> array );  Int16Array Int16Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int16Array's view of the buffer will start with the first byte.  Return value A new Int16Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit signed integer. The final form of the constructor creates a new Int16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int16Array's view of the buffer will start with the first byte.  Return value A new Int16Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit signed integer. The final form of the constructor creates a new Int16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int16Array view on the ArrayBuffer store for this Int16Array object.  Int16Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Int16Array object. end  Optional  The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int16Array view on the ArrayBuffer store for this Int16Array object.  Int16Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Int16Array object. end  Optional  The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Int16Array object. end  Optional  The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int32Array","title":"Int32Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Int32Array Int32Array(unsigned long length);    Int32Array Int32Array(TypedArray array);    Int32Array Int32Array(sequence<type> array);    Int32Array Int32Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Int32Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.    Constructor Returns a new Int32Array object.  Int32Array Int32Array( \u00a0 unsigned long length );  Int32Array Int32Array( \u00a0 TypedArray array );  Int32Array Int32Array( \u00a0 sequence<type> array );  Int32Array Int32Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int32Array's view of the buffer will start with the first byte.  Return value A new Int32Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit signed integer. The final form of the constructor creates a new Int32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int32Array's view of the buffer will start with the first byte.  Return value A new Int32Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit signed integer. The final form of the constructor creates a new Int32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int32Array view on the ArrayBuffer store for this Int32Array object.  Int32Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Int32Array object. end  Optional  The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int32Array view on the ArrayBuffer store for this Int32Array object.  Int32Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Int32Array object. end  Optional  The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Int32Array object. end  Optional  The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int8Array","title":"Int8Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Int8Array Int8Array(unsigned long length);    Int8Array Int8Array(TypedArray array);    Int8Array Int8Array(sequence<type> array);    Int8Array\u00a0Int8Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Int8Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array; for these 8-bit values, this is the same as the size of the array in bytes. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.    Constructor Returns a new Int8Array object.  Int8Array Int8Array( \u00a0 unsigned long length );  Int8Array Int8Array( \u00a0 TypedArray array );  Int8Array Int8Array( \u00a0 sequence<type> array );  Int8Array Int8Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int8Array's view of the buffer will start with the first byte.  Return value A new Int8Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer. The final form of the constructor creates a new Int8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int8Array's view of the buffer will start with the first byte.  Return value A new Int8Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer. The final form of the constructor creates a new Int8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods  set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int8Array view on the ArrayBuffer store for this Int8Array object.  Int8Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Int8Array object. end  Optional  The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int8Array view on the ArrayBuffer store for this Int8Array object.  Int8Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Int8Array object. end  Optional  The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Int8Array object. end  Optional  The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint16Array","title":"Uint16Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Uint16Array Uint16Array(unsigned long length);    Uint16Array Uint16Array(TypedArray array);    Uint16Array Uint16Array(sequence<type> array);    Uint16Array Uint16Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Uint16Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.    Constructor Returns a new Uint16Array object.  Uint16Array Uint16Array( \u00a0 unsigned long length );  Uint16Array Uint16Array( \u00a0 TypedArray array );  Uint16Array Uint16Array( \u00a0 sequence<type> array );  Uint16Array Uint16Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint16Array's view of the buffer will start with the first byte.  Return value A new Uint16Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit unsigned integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit unsigned integer. The final form of the constructor creates a new Uint16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint16Array's view of the buffer will start with the first byte.  Return value A new Uint16Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit unsigned integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit unsigned integer. The final form of the constructor creates a new Uint16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Uint16Array view on the ArrayBuffer store for this Uint16Array object.  Uint16Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Uint16Array object. end  Optional  The offset to the last element in the array to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Uint16Array view on the ArrayBuffer store for this Uint16Array object.  Uint16Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Uint16Array object. end  Optional  The offset to the last element in the array to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Uint16Array object. end  Optional  The offset to the last element in the array to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint32Array","title":"Uint32Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Uint32Array Uint32Array(unsigned long length);    Uint32Array Uint32Array(TypedArray array);    Uint32Array Uint32Array(sequence<type> array);    Uint32Array Uint32Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Uint32Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.    Constructor Returns a new Uint32Array object.  Uint32Array Uint32Array( \u00a0 unsigned long length );  Uint32Array Uint32Array( \u00a0 TypedArray array );  Uint32Array Uint32Array( \u00a0 sequence<type> array );  Uint32Array Uint32Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint32Array's view of the buffer will start with the first byte.  Return value A new Uint32Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit unsigned integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit unsigned integer. The final form of the constructor creates a new Uint32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint32Array's view of the buffer will start with the first byte.  Return value A new Uint32Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit unsigned integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit unsigned integer. The final form of the constructor creates a new Uint32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Uint32Array view on the ArrayBuffer store for this Uint32Array object.  Uint32Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Uint32Array object. end  Optional  The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Uint32Array view on the ArrayBuffer store for this Uint32Array object.  Uint32Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Uint32Array object. end  Optional  The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Uint32Array object. end  Optional  The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint8Array","title":"Uint8Array","description":"Constructors Note: In these methods, TypedArray represents any of the typed array object types.    Uint8Array Uint8Array(unsigned long length);    Uint8Array Uint8Array(TypedArray array);    Uint8Array Uint8Array(sequence<type> array);    Uint8Array Uint8Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);     Method overview Note: In these methods, TypedArray represents any of the typed array object types.    void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Uint8Array subarray(long begin, optional long end);    Attributes    Attribute Type Description   length unsigned long  The number of entries in the array; for these 8-bit values, this is the same as the size of the array in bytes. Read only.    Constants Element size    Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.    Element size    Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.    Constructor Returns a new Uint8Array object.  Uint8Array Uint8Array( \u00a0 unsigned long length );  Uint8Array Uint8Array( \u00a0 TypedArray array );  Uint8Array Uint8Array( \u00a0 sequence<type> array );  Uint8Array Uint8Array( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long length );  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint8Array's view of the buffer will start with the first byte.  Return value A new Uint8Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer. The final form of the constructor creates a new Uint8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Parameters  length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint8Array's view of the buffer will start with the first byte.  Return value A new Uint8Array object representing the specified data buffer. Notes The first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case. The second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer. The third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer. The final form of the constructor creates a new Uint8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer. Exceptions thrown  INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.  Methods set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Uint8Array view on the ArrayBuffer store for this Uint8Array object.  Uint8Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Uint8Array object. end  Optional  The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.set() Sets multiple values in the typed array, reading input values from a specified array.  void set( \u00a0 TypedArray array, \u00a0 optional unsigned long offset );  void set( \u00a0 type[] array, \u00a0 optional unsigned long offset );  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset  Optional  The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Uint8Array view on the ArrayBuffer store for this Uint8Array object.  Uint8Array subarray( \u00a0 long begin, \u00a0 optional long end );  Parameters  begin The offset to the first element in the array to be referenced by the new Uint8Array object. end  Optional  The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.Parameters  begin The offset to the first element in the array to be referenced by the new Uint8Array object. end  Optional  The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.See also  Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error","title":"Error","description":"Creates an error object. Syntax new Error([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description Runtime errors result in new Error objects being created and thrown. This page documents the use of the Error object itself and its use as a constructor function. For a list of properties and methods inherited by Error instances, see Error.prototype. Error types Besides the generic Error constructor, there are six other core error constructors in JavaScript. For client-side exceptions, see Exception Handling Statements.  EvalError Creates an instance representing an error that occurs regarding the global function eval()   RangeError Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range   ReferenceError Creates an instance representing an error that occurs when de-referencing an invalid reference   SyntaxError Creates an instance representing a syntax error that occurs while parsing code in eval()   TypeError Creates an instance representing an error that occurs when a variable or parameter is not of a valid type   URIError Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters  Custom Error Types The Error object can be extended to create Error Types for your project. \r           \/\/ Create a new object, that prototypally inherits from the Error constructor. function MyError(message) {     this.name = \"MyError\";     this.message = message || \"Default Message\"; } MyError.prototype = new Error(); MyError.prototype.constructor = MyError;  try {     throw new MyError(); } catch (e) {     console.log(e.name);     \/\/ \"MyError\"     console.log(e.message);  \/\/ \"Default Message\" }  try {     throw new MyError(\"custom message\"); } catch (e) {     console.log(e.name);     \/\/ \"MyError\"     console.log(e.message);  \/\/ \"custom message\" }\r          Error types Besides the generic Error constructor, there are six other core error constructors in JavaScript. For client-side exceptions, see Exception Handling Statements.  EvalError Creates an instance representing an error that occurs regarding the global function eval()   RangeError Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range   ReferenceError Creates an instance representing an error that occurs when de-referencing an invalid reference   SyntaxError Creates an instance representing a syntax error that occurs while parsing code in eval()   TypeError Creates an instance representing an error that occurs when a variable or parameter is not of a valid type   URIError Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters  Custom Error Types The Error object can be extended to create Error Types for your project. \r           \/\/ Create a new object, that prototypally inherits from the Error constructor. function MyError(message) {     this.name = \"MyError\";     this.message = message || \"Default Message\"; } MyError.prototype = new Error(); MyError.prototype.constructor = MyError;  try {     throw new MyError(); } catch (e) {     console.log(e.name);     \/\/ \"MyError\"     console.log(e.message);  \/\/ \"Default Message\" }  try {     throw new MyError(\"custom message\"); } catch (e) {     console.log(e.name);     \/\/ \"MyError\"     console.log(e.message);  \/\/ \"custom message\" }\r          Properties For properties available on Error instances, see Properties of Error instances.             prototype Allows the addition of properties to Error instances.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on Error instances, see Methods of Error instances.            The global Error object contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    Error instances All Error instances and instances of non-generic errors inherit from Error.prototype. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor. \u00a0 Properties Standard properties  constructor Specifies the function that created an instance's prototype. message Error message. name Error name.  Vendor-specific extensions   Non-standard Microsoft  description Error description. Similar to message. number Error number.  Mozilla  fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.  Methods  toSource Non-standard      Returns a string containing the source of the specified Error object; you can use this value to create a new object. Overrides the Object.toSource method. toString Returns a string representing the specified object. Overrides the Object.toString method.     Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    Examples Example: Throwing a generic error Usually you create an Error object with the intention of raising it using the throw keyword. You can handle the error using the try...catch construct: \r           try {     throw new Error(\"Whoops!\"); } catch (e) {     alert(e.name + \": \" + e.message); }\r          Example: Handling a specific error  You can choose to handle only specific error types by testing the error type with the error's constructor property or, if you're writing for modern JavaScript engines, instanceof keyword: \r           try {     foo.bar(); } catch (e) {     if (e instanceof EvalError) {         alert(e.name + \": \" + e.message);     } else if (e instanceof RangeError) {         alert(e.name + \": \" + e.message);     }     \/\/ ... etc }\r          Example: Throwing a generic error Usually you create an Error object with the intention of raising it using the throw keyword. You can handle the error using the try...catch construct: \r           try {     throw new Error(\"Whoops!\"); } catch (e) {     alert(e.name + \": \" + e.message); }\r          Example: Handling a specific error  You can choose to handle only specific error types by testing the error type with the error's constructor property or, if you're writing for modern JavaScript engines, instanceof keyword: \r           try {     foo.bar(); } catch (e) {     if (e instanceof EvalError) {         alert(e.name + \": \" + e.message);     } else if (e instanceof RangeError) {         alert(e.name + \": \" + e.message);     }     \/\/ ... etc }\r          See also  Error.prototype throw try...catch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError","title":"EvalError","description":"Represents an error regarding the eval function. Syntax new EvalError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description An EvalError is thrown when eval is used improperly. Properties For properties available on EvalError instances, see Properties of EvalError instances.             prototype Allows the addition of properties to an EvalError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on EvalError instances, see Methods of EvalError instances.            The global EvalError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    EvalError instances Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Note:\u00a0Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the EvalError prototype object does not contain any methods of its own, EvalError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Note:\u00a0Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the EvalError prototype object does not contain any methods of its own, EvalError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Error eval EvalError.prototype  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError","title":"RangeError","description":"Represents an error when a number is not within the correct range allowed. Syntax new RangeError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A RangeError is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the Array constructor, or when passing bad values to the numeric methods toExponential, toFixed, or toPrecision. Properties For properties available on RangeError instances, see Properties of RangeError instances.             prototype Allows the addition of properties to an RangeError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on RangeError instances, see Methods of RangeError instances.            The global RangeError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    RangeError instances Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Array Error RangeError.prototype toExponential toFixed toPrecision"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError","title":"ReferenceError","description":"Represents an error when a non-existent variable is referenced. Description A ReferenceError is thrown when trying to dereference a variable that has not been declared. Syntax new ReferenceError([message[, fileName[, linenumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Properties For properties available on ReferenceError instances, see Properties of ReferenceError instances.             prototype Allows the addition of properties to an ReferenceError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on ReferenceError instances, see Methods of ReferenceError instances.            The global ReferenceError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    ReferenceError instances Properties   constructor Specifies the function that created an instance's prototype.   name Error name.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     Properties   constructor Specifies the function that created an instance's prototype.   name Error name.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Error ReferenceError.prototype  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError","title":"SyntaxError","description":"Represents an error when trying to interpret syntactically invalid code. Description A SyntaxError is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code. Syntax new SyntaxError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Properties For properties available on SyntaxError instances, see Properties of SyntaxError instances.             prototype Allows the addition of properties to an SyntaxError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on SyntaxError instances, see Methods of SyntaxError instances.            The global SyntaxError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    SyntaxError instances All SyntaxError instances inherit from SyntaxError.prototype. You can use the prototype to add properties or methods to all instances. Properties   constructor Specifies the function that created an instance's prototype. name Error name.  Note: Although ECMA-262\u00a0 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the SyntaxError prototype object does not contain any methods of its own, SyntaxError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype   See also  Error SyntaxError.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError","title":"TypeError","description":"Represents an error when a value is not of the expected type. Syntax new TypeError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A TypeError is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function. Properties For properties available on TypeError instances, see Properties of TypeError instances.             prototype Allows the addition of properties to an TypeError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on TypeError instances, see Methods of TypeError instances.            The global TypeError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    TypeError instances All TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances. Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Error apply call TypeError.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError","title":"URIError","description":"Represents an error when a malformed URI is encountered. Syntax new URIError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A URIError is thrown when the URI handling functions are passed a malformed URI. Properties For properties available on URIError instances, see Properties of URIError instances.             prototype Allows the addition of properties to a URIError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on URIError instances, see Methods of URIError instances.            The global URIError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    URIError instances All URIError instances inherit from URIError.prototype. You can use the prototype to add properties or methods to all instances. Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262\u00a0specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the URIError prototype object does not contain any methods of its own, URIErrror instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  decodeURI decodeURIComponent encodeURI encodeURIComponent Error URIError.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURI","title":"decodeURI","description":"Core Function Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.    Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax   decodeURI(encodedURI)    Parameters   encodedURI\u00a0 A complete, encoded Uniform Resource Identifier.   Description  Replaces each escape sequence in the encoded URI with the character that it represents. Does not decode escape sequences that could not have been introduced by encodeURI.   See also  decodeURIComponent, encodeURI, encodeURIComponent"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURIComponent","title":"decodeURIComponent","description":"Decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.    Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?   Syntax  decodeURIComponent(encodedURI)  Parameters  encodedURI\u00a0 An encoded component of a Uniform Resource Identifier.  Description Replaces each escape sequence in the encoded URI component with the character that it represents. See Also decodeURI, encodeURI, encodeURIComponent \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseFloat","title":"parseFloat","description":"Parses a string argument and returns a floating point number.    Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax  parseFloat(string)  Parameters  string\u00a0 A string that represents the value you want to parse.  Description parseFloat is a top-level function and is not associated with any object. parseFloat parses its argument, a string, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed. If the first character cannot be converted to a number, parseFloat returns NaN. For arithmetic purposes, the NaN value is not a number in any radix. You can call the isNaN function to determine if the result of parseFloat is NaN. If NaN is passed on to arithmetic operations, the operation results will also be NaN. Examples Example: parseFloat returning a number The following examples all return 3.14 \r           parseFloat(\"3.14\"); parseFloat(\"314e-2\"); parseFloat(\"0.0314E+2\"); parseFloat(\"3.14more non-digit characters\");\r         Example: parseFloat returning NaN The following example returns NaN \r           parseFloat(\"FF2\");\r         Example: parseFloat returning a number The following examples all return 3.14 \r           parseFloat(\"3.14\"); parseFloat(\"314e-2\"); parseFloat(\"0.0314E+2\"); parseFloat(\"3.14more non-digit characters\");\r         Example: parseFloat returning NaN The following example returns NaN \r           parseFloat(\"FF2\");\r         See Also isNaN, parseInt \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseInt","title":"parseInt","description":"Parses a string argument and returns an integer of the specified radix or base.    Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax  var intValue = parseInt(string[, radix]);  Parameters  string\u00a0 The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.   radix\u00a0 An integer that represents the radix of the above mentioned string. While this parameter is optional, always specify it to eliminate reader confusion and to guarantee predictable behavior.\u00a0 Different implementations produce different results when a radix is not specified.  Description parseInt is a top-level function and is not associated with any object. The parseInt function converts its first argument to a string, parses it, and returns an integer or NaN. If not NaN, the returned value will be the decimal integer representation of the first argument taken as a number in the specified radix (base). For example, a radix of 10 indicates to convert from a decimal number, 8 octal, 16 hexadecimal, and so on. For radices above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used. If parseInt encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. parseInt truncates numbers to integer values. Leading and trailing spaces are allowed. If radix is undefined or 0, JavaScript assumes the following:  If the input string begins with \"0x\" or \"0X\", radix is 16 (hexadecimal). If the input string begins with \"0\", radix is eight (octal). This feature is non-standard, and some implementations deliberately do not support it (instead using the radix 10).\u00a0 For this reason always specify a radix when using parseInt. If the input string begins with any other value, the radix is 10 (decimal).  If the first character cannot be converted to a number, parseInt returns NaN. For arithmetic purposes, the NaN value is not a number in any radix. You can call the isNaN function to determine if the result of parseInt is NaN. If NaN is passed on to arithmetic operations, the operation results will also be NaN. To convert number to its string literal in a particular radix use intValue.toString(radix). Examples Example: Using parseInt The following examples all return 15:  parseInt(\" 0xF\", 16); parseInt(\" F\", 16); parseInt(\"17\", 8); parseInt(021, 8); parseInt(\"015\", 10); parseInt(15.99, 10); parseInt(\"FXX123\", 16); parseInt(\"1111\", 2); parseInt(\"15*3\", 10); parseInt(\"15e2\", 10); parseInt(\"15px\", 10); parseInt(\"12\", 13);  The following examples all return NaN:  parseInt(\"Hello\", 8); \/\/ Not a number at all parseInt(\"546\", 2);   \/\/ Digits are not valid for binary representations  The following examples all return -15:  parseInt(\"-F\", 16); parseInt(\"-0F\", 16); parseInt(\"-0XF\", 16); parseInt(-10, 16); parseInt(-15.1, 10) parseInt(\" -17\", 8); parseInt(\" -15\", 10); parseInt(\"-1111\", 2); parseInt(\"-15e1\", 10); parseInt(\"-12\", 13);  The following example returns 224:  parseInt(\"0e0\", 16);  Example: Using parseInt The following examples all return 15:  parseInt(\" 0xF\", 16); parseInt(\" F\", 16); parseInt(\"17\", 8); parseInt(021, 8); parseInt(\"015\", 10); parseInt(15.99, 10); parseInt(\"FXX123\", 16); parseInt(\"1111\", 2); parseInt(\"15*3\", 10); parseInt(\"15e2\", 10); parseInt(\"15px\", 10); parseInt(\"12\", 13);  The following examples all return NaN:  parseInt(\"Hello\", 8); \/\/ Not a number at all parseInt(\"546\", 2);   \/\/ Digits are not valid for binary representations  The following examples all return -15:  parseInt(\"-F\", 16); parseInt(\"-0F\", 16); parseInt(\"-0XF\", 16); parseInt(-10, 16); parseInt(-15.1, 10) parseInt(\" -17\", 8); parseInt(\" -15\", 10); parseInt(\"-1111\", 2); parseInt(\"-15e1\", 10); parseInt(\"-12\", 13);  The following example returns 224:  parseInt(\"0e0\", 16);  Octal Interpretations with No Radix Although discouraged by ECMAScript 3, many implementations interpret a numeric string beginning with a leading 0 as octal. The following may have an octal result.  parseInt(\"0e0\"); \/\/ 0 parseInt(\"08\"); \/\/ 0, '8' is not an octal digit.   ECMAScript 5 Removes Octal Interpretation The ECMAScript 5 specification of the function parseInt no longer allows implementations to treat Strings beginning with a 0 character as octal values. ECMAScript 5 states: The parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, number may also optionally begin with the character pairs 0x or 0X. This differs from ECMAScript 3, which discouraged but allowed octal interpretation. Since many implementations have not adopted this behavior as of 2011, and because older browsers must be supported, always specify a radix. See also isNaN, parseFloat, Object.valueOf, Number.toString  ECMAScript 5 Removes Octal Interpretation The ECMAScript 5 specification of the function parseInt no longer allows implementations to treat Strings beginning with a 0 character as octal values. ECMAScript 5 states: The parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, number may also optionally begin with the character pairs 0x or 0X. This differs from ECMAScript 3, which discouraged but allowed octal interpretation. Since many implementations have not adopted this behavior as of 2011, and because older browsers must be supported, always specify a radix. See also isNaN, parseFloat, Object.valueOf, Number.toString  See also isNaN, parseFloat, Object.valueOf, Number.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Infinity","title":"Infinity","description":"A numeric value representing infinity.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax  Infinity  Description Infinity is a property of the global object, i.e. it is a variable in global scope. The initial value of Infinity is Number.POSITIVE_INFINITY. The value Infinity (positive infinity) is greater than any other number including itself. This value behaves mathematically like infinity; for example, anything multiplied by Infinity is Infinity, and anything divided by Infinity is 0.  JavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), Infinity is read only, as per the ECMAScript 5 specification. See also Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON","title":"JSON","description":"The JSON object contains methods for converting values to JSON notation and for converting JSON notation to values. JSON Notation JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and null. \u00a0It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON, and some JSON is not JavaScript. The main differences between standard object and array literal notation and JSON notation are that all property names in a JSON object must be double-quoted strings and that trailing commas in objects and arrays are forbidden. \u00a0The main differences between standard number notation and JSON number notation are that in JSON leading zeroes are prohibited and the decimal point in a number must be followed by at least one digit. \u00a0The main differences between standard string notation and JSON string notation are that in JSON only a limited set of characters may be escaped in strings, certain control characters are prohibited in strings, the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted, and that strings must be double-quoted.\u00a0\u00a0 The full JSON syntax is as follows: JSON = null     or true or false     or JSONNumber     or JSONString     or JSONObject     or JSONArray  JSONNumber = - PositiveNumber           or PositiveNumber PositiveNumber = DecimalNumber               or DecimalNumber . Digits               or DecimalNumber . Digits ExponentPart               or DecimalNumber ExponentPart DecimalNumber = 0              or OneToNine Digits ExponentPart = e Exponent             or E Exponent Exponent = Digits         or + Digits         or - Digits Digits = Digit       or Digits Digit Digit = 0 through 9 OneToNine = 1 through 9  JSONString = \"\"           or \" StringCharacters \" StringCharacters = StringCharacter                 or StringCharacters StringCharacter StringCharacter = any character                   except \" or \\ or U+0000 through U+001F                or EscapeSequence EscapeSequence = \\\" or \\\/ or \\\\ or \\b or \\f or \\n or \\r or \\t               or \\u HexDigit HexDigit HexDigit HexDigit HexDigit = 0 through 9         or A through F         or a through f  JSONObject = { }           or { Members } Members = JSONString : JSON        or Members , JSONString : JSON  JSONArray = [ ]          or [ ArrayElements ] ArrayElements = JSON              or ArrayElements , JSON Insignificant whitespace may be present anywhere except within a JSONNumber (numbers must contain no whitespace) or JSONString (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (U+0009), carriage return (U+000D), line feed (U+000A), and space (U+0020) characters are the only valid whitespace characters. JSON Notation JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and null. \u00a0It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON, and some JSON is not JavaScript. The main differences between standard object and array literal notation and JSON notation are that all property names in a JSON object must be double-quoted strings and that trailing commas in objects and arrays are forbidden. \u00a0The main differences between standard number notation and JSON number notation are that in JSON leading zeroes are prohibited and the decimal point in a number must be followed by at least one digit. \u00a0The main differences between standard string notation and JSON string notation are that in JSON only a limited set of characters may be escaped in strings, certain control characters are prohibited in strings, the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted, and that strings must be double-quoted.\u00a0\u00a0 The full JSON syntax is as follows: JSON = null     or true or false     or JSONNumber     or JSONString     or JSONObject     or JSONArray  JSONNumber = - PositiveNumber           or PositiveNumber PositiveNumber = DecimalNumber               or DecimalNumber . Digits               or DecimalNumber . Digits ExponentPart               or DecimalNumber ExponentPart DecimalNumber = 0              or OneToNine Digits ExponentPart = e Exponent             or E Exponent Exponent = Digits         or + Digits         or - Digits Digits = Digit       or Digits Digit Digit = 0 through 9 OneToNine = 1 through 9  JSONString = \"\"           or \" StringCharacters \" StringCharacters = StringCharacter                 or StringCharacters StringCharacter StringCharacter = any character                   except \" or \\ or U+0000 through U+001F                or EscapeSequence EscapeSequence = \\\" or \\\/ or \\\\ or \\b or \\f or \\n or \\r or \\t               or \\u HexDigit HexDigit HexDigit HexDigit HexDigit = 0 through 9         or A through F         or a through f  JSONObject = { }           or { Members } Members = JSONString : JSON        or Members , JSONString : JSON  JSONArray = [ ]          or [ ArrayElements ] ArrayElements = JSON              or ArrayElements , JSON Insignificant whitespace may be present anywhere except within a JSONNumber (numbers must contain no whitespace) or JSONString (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (U+0009), carriage return (U+000D), line feed (U+000A), and space (U+0020) characters are the only valid whitespace characters. Description The JSON object contains methods for parsing JSON and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own. Properties    Properties inherited from  Object:constructor, __parent__, __proto__    Methods  parse Parse a string as JSON, optionally transform the produced value and its properties, and return the value. stringify Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.  Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) (Supported) 10.5 (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?       Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, toString, unwatch, valueOf, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math","title":"Math","description":"A built-in object that has properties and methods for mathematical constants and functions. Description Unlike the other global objects, Math is not a constructor. All properties and methods of Math are static. You refer to the constant pi as Math.PI and you call the sine function as Math.sin(x), where x is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.Properties  E Euler's constant and the base of natural logarithms, approximately 2.718.   LN2 Natural logarithm of 2, approximately 0.693.   LN10 Natural logarithm of 10, approximately 2.302.   LOG2E Base 2 logarithm of E, approximately 1.442.   LOG10E Base 10 logarithm of E, approximately 0.434.   PI Ratio of the circumference of a circle to its diameter, approximately 3.14159.   SQRT1_2 Square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.   SQRT2 Square root of 2, approximately 1.414.    Properties inherited from  Object:constructor, __parent__, __proto__   Methods   Note that the trigonometric functions (sin, cos, tan, asin, acos, atan, atan2) expect or return angles in radians - to convert radians to degrees divide by (Math.PI \/ 180), and multiply by this to convert the other way. abs Returns the absolute value (modulus) of a number.   acos Returns the arccosine of a number.   asin Returns the arcsine of a number.   atan Returns the arctangent of a number.   atan2 Returns the arctangent of the quotient of its arguments.   ceil Returns the smallest integer greater than or equal to a number.   cos Returns the cosine of a number.   exp Returns Enumber, where number is the argument, and E is Euler's constant (2.718...), the base of the natural logarithm.   floor Returns the largest integer less than or equal to a number.   log Returns the natural logarithm (loge, also ln) of a number.   max Returns the largest of zero or more numbers.   min Returns the smallest of zero or more numbers.   pow Returns base to the exponent power, that is, baseexponent.   random Returns a pseudo-random number between 0 and 1.   round Returns the value of a number rounded to the nearest integer.   sin Returns the sine of a number.   sqrt Returns the positive square root of a number.   tan Returns the tangent of a number.   toSource Non-standard      Returns the string \"Math\".    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, toString, unwatch, valueOf, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/NaN","title":"NaN","description":"A value representing Not-A-Number.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax NaN Description NaN is a property of the global object. The initial value of NaN is Not-A-Number \u2014 the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)) or when a function trying to parse a number fails (parseInt(\"blabla\")). Testing against NaN Equality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead. \r           NaN === NaN;        \/\/ false Number.NaN === NaN; \/\/ false isNaN(NaN);         \/\/ true isNaN(Number.NaN);  \/\/ true\r          Testing against NaN Equality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead. \r           NaN === NaN;        \/\/ false Number.NaN === NaN; \/\/ false isNaN(NaN);         \/\/ true isNaN(Number.NaN);  \/\/ true\r          See also isNaN"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/undefined","title":"undefined","description":"The value undefined.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax  undefined  Description undefined is a property of the global object, i.e. it is a variable in global scope. The initial value of undefined is the primitive value undefined.   JavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), undefined is non-writable, as per the ECMAScript 5 specification. A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned. You can use undefined and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable x is not defined, and the if statement evaluates to true. \r           var x; if (x === undefined) {    \/\/ these statements execute } if (x !== undefined) {    \/\/ these statements do not execute }\r          Note: The strict equality operator rather than the standard equality operator must be used here, because x == undefined also checks whether x is null, while strict equality doesn't. null is not equivalent to undefined. See comparison operators for details. Alternatively, typeof can be used: \r           var x; if (typeof x == 'undefined') {    \/\/ these statements execute }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/block","title":"block","description":"A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets. Version Information    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax \r           {    statement_1    statement_2    ...    statement_n }\r          Parameters  statement_1, statement_2, statement_n Statements grouped within the block statement.  Description This statement is commonly used with control flow statements (e.g. if, for, while). For example: \r           while (x < 10) {    x++; }\r          Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example: \r           var x = 1; {    var x = 2; } alert(x); \/\/ outputs 2\r          This outputs 2 because the var x statement within the conditional is in the same scope as the var x statement before the conditional. In C or Java, the equivalent code would have outputted 1."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/break","title":"break","description":"Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement. Version Information    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version:  ECMA-262 (for the unlabeled version) ECMA-262, Edition 3 (for the labeled version)     Syntax \r           break [label];\r          Parameters  label\u00a0 Identifier associated with the label of the statement.\u00a0 If the statement is not a loop or switch, this is required.  Description The break statement includes an optional label that allows the program to break out of a labeled statement. The break statement needs to be nested within this labelled statement. The labelled statement can be any block statement; it does not have to be preceded by a loop statement. Example The following function has a break statement that terminates the while loop when i is 3, and then returns the value 3 * x. \r           function testBreak(x) {    var i = 0;    while (i < 6) {       if (i == 3) {          break;       }       i += 1;    }    return i * x; }\r          See also  continue label switch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/const","title":"const","description":"Declares a read-only, named constant.    Statement   Implemented in: JavaScript 1.5, NES 6.0 (Netscape extension, C engine only)    Syntax const varname1 = value1 [, varname2 = value2 [, varname3 = value3 [, ... [, varnameN = valueN]]]]; Parameters  varnameN Constant name. It can be any legal identifier.   valueN Value of the constant. It can be any legal expression.  Description Creates a constant that can be global or local to the function in which it is declared. Constants follow the same scope rules as variables. The value of a constant cannot change through re-assignment, and a constant cannot be re-declared. Because of this, although it is possible to declare a constant without initializing it, it would be useless to do so. A constant cannot share its name with a function or a variable in the same scope. \u00a0 Browser Compatibility const\u00a0is a\u00a0Mozilla-specific extension and is not part of ECMAScript 5.\u00a0 It is supported in Firefox & Chrome (V8) and partially supported in Opera 9+ & Safari (though it acts as a var). It is not supported in IE6-9. \u00a0 Examples The following example produces the output \"a is 7.\" \r           const a = 7; console.log(\"a is \" + a + \".\");\r          See also  var let Constants in JavaScript Guide"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/continue","title":"continue","description":"Terminates execution of the statements in the current iteration of the current or labelled loop, and continues execution of the loop with the next iteration.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262 (for the unlabeled version) ECMA-262, Edition 3 (for the labeled version)     Syntax continue [label];  Parameters  label Identifier associated with the label of the statement.  Description In contrast to the break statement, continue does not terminate the execution of the loop entirely: instead,  In a while loop, it jumps back to the condition.   In a for loop, it jumps to the update expression.  The continue statement can include an optional label that allows the program to jump to the next iteration of a labelled loop statement instead of the current loop. In this case, the continue statement needs to be nested within this labelled statement. Examples Example: Using continue with while The following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12. \r           i = 0; n = 0; while (i < 5) {    i++;    if (i == 3)       continue;    n += i; }\r          Example: Using continue with a label In the following example, a statement labeled checkiandj contains a statement labeled checkj. If continue is encountered, the program continues at the top of the checkj statement. Each time continue is encountered, checkj reiterates until its condition returns false. When false is returned, the remainder of the checkiandj statement is completed. If continue had a label of checkiandj, the program would continue at the top of the checkiandj statement. \r           checkiandj: while (i < 4) {    document.write(i + \"<br>\");    i += 1;     checkj:    while (j > 4) {       document.write(j + \"<br>\");       j -= 1;       if ((j % 2) == 0)          continue checkj;       document.write(j + \" is odd.<br>\");    }    document.write(\"i = \" + i + \"<br>\");    document.write(\"j = \" + j + \"<br>\"); }\r          Example: Using continue with while The following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12. \r           i = 0; n = 0; while (i < 5) {    i++;    if (i == 3)       continue;    n += i; }\r          Example: Using continue with a label In the following example, a statement labeled checkiandj contains a statement labeled checkj. If continue is encountered, the program continues at the top of the checkj statement. Each time continue is encountered, checkj reiterates until its condition returns false. When false is returned, the remainder of the checkiandj statement is completed. If continue had a label of checkiandj, the program would continue at the top of the checkiandj statement. \r           checkiandj: while (i < 4) {    document.write(i + \"<br>\");    i += 1;     checkj:    while (j > 4) {       document.write(j + \"<br>\");       j -= 1;       if ((j % 2) == 0)          continue checkj;       document.write(j + \" is odd.<br>\");    }    document.write(\"i = \" + i + \"<br>\");    document.write(\"j = \" + j + \"<br>\"); }\r          See also break, label \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/debugger","title":"debugger","description":"Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.    Statement   Implemented in JavaScript 1.0   ECMAScript Edition ECMA-262 5th Edition   Syntax debugger; Examples  The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.  function potentiallyBuggyCode() {   debugger;   \/\/ do potentially buggy stuff to examine, step through, etc. }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/do...while","title":"do...while","description":"Summary  Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.    Statement   Implemented in: JavaScript 1.2, NES 3.0   ECMA Version: ECMA-262, Edition 3     Syntax  do    statement while (condition);   Parameters   statement\u00a0 A statement that is executed at least once and is re-executed each time the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.   condition\u00a0 An expression evaluated after each pass through the loop. If condition evaluates to true, the statement is re-executed. When condition evaluates to false, control passes to the statement following the do...while.   Examples   Example: Using do...while  In the following example, the do...while loop iterates at least once and reiterates until i is no longer less than 5.  do {    i += 1;    document.write(i); } while (i < 5);   Example: Using do...while  In the following example, the do...while loop iterates at least once and reiterates until i is no longer less than 5.  do {    i += 1;    document.write(i); } while (i < 5);   See also  while, for"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/export","title":"export","description":"Allows a signed script to provide properties, functions, and objects to other signed or unsigned scripts. This feature is not in ECMA-262, Edition 3.    Statement   Implemented in: JavaScript 1.2, NES 3.0    Syntax  export name1, name2, ..., nameN;   export *;  Parameters  nameN\u00a0 Property, function, or object to be exported.  Description Typically, information in a signed script is available only to scripts signed by the same principals. By exporting properties, functions, or objects, a signed script makes this information available to any script (signed or unsigned). The receiving script uses the companion import statement to access the information. The first syntax exports the specified properties, functions, and objects. The second syntax exports all properties, functions, and objects from the script. See also import \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for","title":"for","description":"Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax for ([initialization]; [condition]; [final-expression])    statement  Parameters  initialization An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the var keyword. These variables are not local to the loop, i.e. they are in the same scope the for loop is in. The result of this expression is discarded.   condition An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the for construct.   final-expression An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of condition. Generally used to update or increment the counter variable.   statement A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.  Examples Example: Using for The following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. \r           for (var i = 0; i < 9; i++) {    n += i;    myfunc(n); }\r          Example: Using for without the statement section The following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section: \r           function showOffsetPos (sId) {   var nLeft = 0, nTop = 0;   for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);   alert(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\"); }\r          Note: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle. Example: Using for The following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. \r           for (var i = 0; i < 9; i++) {    n += i;    myfunc(n); }\r          Example: Using for without the statement section The following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section: \r           function showOffsetPos (sId) {   var nLeft = 0, nTop = 0;   for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);   alert(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\"); }\r          Note: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle. See also while, do...while, for...in"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for...in","title":"for...in","description":"Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax for (variable in object) {   ... }   Parameters  variable A different property name is assigned to variable on each iteratation.   object Object whose enumerable properties are iterated.  Description A for...in loop does not iterate over non\u2013enumerable properties. Objects created from built\u2013in constructors like Array and Object have inherited non\u2013enumerable properties from Object.prototype and String.prototype that are not enumerable, such as String's indexOf method or Object's toString method. The loop will iterate over all enumerable properties of the object or that it inherits from its constructor's proptotype (including any which overwrite built-in properties). A for...in loop iterates over the properties of an object in an arbitrary order (see the delete operator for more on why one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting). If a property is modified in one iteration and then visited at a later time, its value in the loop is its value at that later time. A property that is deleted before it has been visited will not be visited later. Properties added to the object over which iteration is occurring may either be visited or omitted from iteration. In general it is best not to add, modify or remove properties from the object during iteration, other than the property currently being visited. There is no guarantee whether or not an added property will be visited, whether a modified property (other than the current one) will be visited before or after it is modified, or whether a deleted property will be visited before it is deleted. Where only the properties of the object should be considered, a\u00a0hasOwnProperty\u00a0check should be performed to ensure that only properties of the object and not inherited properties are used (propertyIsEnumerable\u00a0can also be used but is not intuitive).  In some cases, built\u2013in prototypes be usefully extended by the user where there are no concerns caused by inclusion of other code that may use\u00a0for..in\u00a0 and not perform the above checks.  for..in should not be used to iterate over an Array where index order is important. Array indexes are just enumerable properties with integer names and are otherwise identical to general Object properties.\u00a0 There is no guarantee that for...in will return the indexes in any particular order and it will return all enumerable properties, including those with non\u2013integer names and those that are inherited. Because the order of iteration is implementation dependent, iterating over an array may not visit elements in a consistent order. Therefore it is better to use a for loop with a numeric index when iterating over arrays where the order of access is important.  Examples The following function takes as its arguments an object and the object's name. It then iterates over all the object's enumerable properties and returns a string of the property names and their values. \r           var o = {a:1, b:2, c:3};  function show_props(obj, objName) {      var result = \"\";      for (var prop in obj) {         result += objName + \".\" + prop + \" = \" + obj[prop] + \"\\n\";      }      return result;   }    alert(show_props(o, \"o\")); \/* alerts: o.a = 1 o.b = 2 o.c = 3 *\/\r          Iterating over only\u00a0 Iterating over only\u00a0 See also  for each...in - similar to for...in, but iterates over the values of object's properties, rather than the property names themselves. (New in JavaScript 1.6.) for Generator expressions (uses the for...in syntax)"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for_each...in","title":"for each...in","description":"Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed. Note: for each...in is a Mozilla extension, and is not part of the ECMAScript standard.    Statement   Implemented in: JavaScript 1.6   ECMA Version: none    Syntax  for each (variable in object)   statement  Parameters  variable\u00a0 Variable to iterate over property values, optionally declared with the var keyword. This variable is local to the function, not to the loop.   object\u00a0 Object for which the properties are iterated.   statement\u00a0 A statement to execute for each property. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.  Description Some built-in properties are not iterated over. These include all built-in methods of objects, e.g. String's indexOf method. However, all user-defined properties are iterated over. Examples Example: Using for each...in Warning: Never use a loop like this on arrays. Only use it on objects. Details. The following snippet iterates over an object's properties, calculating their sum:  var sum = 0; var obj = {prop1: 5, prop2: 13, prop3: 8}; for each (var item in obj) {   sum += item; } print(sum); \/\/ prints \"26\", which is 5+13+8  Example: Using for each...in Warning: Never use a loop like this on arrays. Only use it on objects. Details. The following snippet iterates over an object's properties, calculating their sum:  var sum = 0; var obj = {prop1: 5, prop2: 13, prop3: 8}; for each (var item in obj) {   sum += item; } print(sum); \/\/ prints \"26\", which is 5+13+8  See also  for...in - a similar statement that iterates over the property names. for Array\u00a0comprehensions (these use for each)  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/function","title":"function","description":"Declares a function with the specified parameters. You can also define functions using the Function constructor and the function operator (function expression).    Statement   Implemented in JavaScript 1.0   ECMAScript Edition ECMA-262    Syntax  function name([param] [, param] [..., param]) {    statements }   Parameters   name\u00a0 The function name.   param\u00a0 The name of an argument to be passed to the function. A function can have up to 255 arguments.   statements\u00a0 The statements which comprise the body of the function.   Description  To return a value, the function must have a return statement that specifies the value to return. A function created with the function statement is a Function object and has all the properties, methods, and behavior of Function objects. See Function for detailed information on functions. A function can also be declared inside an expression. In this case the function is usually anonymous. See function operator for more information about the function (function expression). Functions can be conditionally declared. That is, a function definition can be nested within an if statement. Technically, such declarations are not actually function declarations; they are function expressions.   Examples   Example: Using function  The following code declares a function that returns the total dollar amount of sales, when given the number of units sold of products a, b, and c.  function calc_sales(units_a, units_b, units_c) {    return units_a*79 + units_b * 129 + units_c * 699; }   Example: Using function  The following code declares a function that returns the total dollar amount of sales, when given the number of units sold of products a, b, and c.  function calc_sales(units_a, units_b, units_c) {    return units_a*79 + units_b * 129 + units_c * 699; }   See also  Functions, Function, function operator"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/if...else","title":"if...else","description":"Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax  if (condition)    statement1 [else    statement2]  Parameters  condition\u00a0 An expression that evaluates to true or false.   statement1\u00a0 Statement that is executed if condition evaluates to true. Can be any statement, including further nested if statements. To execute multiple statements, use a block statement ({ ... }) to group those statements.   statement2\u00a0 Statement that is executed if condition evaluates to false and the else clause exists. Can be any statement, including block statements and further nested if statements.  Description Multiple if...else statements can be nested to create an else if clause:  if (condition1)    statement1 else if (condition2)    statement2 else if (condition3)    statement3 ... else    statementN  To see how this works, this is how it would look like if the nesting were properly indented:  if (condition1)    statement1 else    if (condition2)       statement2    else       if (condition3) ...  To execute multiple statements within a clause, use a block statement ({ ... }) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested if statements:  if (condition) {    statements1 } else {    statements2 }  Do not confuse the primitive boolean values true and false with the true and false values of the Boolean object. Any value that is not undefined, null, 0, NaN, or the empty string (\"\"), and any object, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example:  var b = new Boolean(false); if (b) \/\/ this condition evaluates to true  Examples Example: Using if...else  if (cipher_char == from_char) {    result = result + to_char;    x++; } else {    result = result + clear_char;  Example: Assignment within the conditional expression It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:  if (x = y) {    \/* do the right thing *\/ }  If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:  if ((x = y)) {    \/* do the right thing *\/ }  \u00a0 \u00a0  Example: Using if...else  if (cipher_char == from_char) {    result = result + to_char;    x++; } else {    result = result + clear_char;  Example: Assignment within the conditional expression It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:  if (x = y) {    \/* do the right thing *\/ }  If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:  if ((x = y)) {    \/* do the right thing *\/ }  \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/import","title":"import","description":"Summary  Allows a script to import properties, functions, and objects from a signed script that has exported the information. This feature is not in ECMA 262, Edition 3.    Statement   Implemented in: JavaScript 1.2, NES 3.0    Syntax   import objectName.name1, objectName.name2, ..., objectName.nameN;   import objectName.*;    Parameters   objectName\u00a0 Name of the object that will receive the imported names.   nameN\u00a0 Property, function, or object to be imported.   Description  The objectName parameter is the name of the object that will receive the imported names. For example, if f and p have been exported, and if obj is an object from the importing script, the following code makes f and p accessible in the importing script as properties of obj.  import obj.f, obj.p;  The first syntax imports the specified properties, functions, and objects from the exported script. The second syntax imports all properties, functions, and objects from the exported script. Typically, information in a signed script is available only to scripts signed by the same principals. By exporting (using the export statement) properties, functions, or objects, a signed script makes this information available to any script (signed or unsigned). The receiving script uses the import statement to access the information. The script must load the export script into a window, frame, or layer before it can import and use any exported properties, functions, and objects.   See also  export"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/label","title":"label","description":"Provides a statement with an identifier that you can refer to using a break or continue statement. For example, you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution.    Statement   Implemented in: JavaScript 1.2, NES 3.0   ECMA Version: ECMA-262, Edition 3    Syntax label\u00a0:    statement  Parameters  label Any JavaScript identifier that is not a reserved word.   statement Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements.  Avoid using labels Labels are not very commonly used in JavaScript since they make programs harder to read an understand. As much as possible, avoid using labels and, depending on the cases, prefer calling functions or throwing an error. Examples continue Example \r           var i,j;  loop1: for (i = 0; i < 3; i++) {      \/\/The first for statement is labeled \"loop1\"    loop2:    for (j = 0; j < 3; j++) {   \/\/The second for statement is labeled \"loop2\"       if (i == 1 && j == 1) {          continue loop1;       } else {          console.log(\"i = \" + i + \", j = \" + j);       }    } }  \/\/ Output is: \/\/   \"i = 0, j = 0\" \/\/   \"i = 0, j = 1\" \/\/   \"i = 0, j = 2\" \/\/   \"i = 1, j = 0\" \/\/   \"i = 2, j = 0\" \/\/   \"i = 2, j = 1\" \/\/   \"i = 2, j = 2\" \/\/ Notice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\"\r          Example 2 (continue) Given an array of items and an array of tests, this example counts the number of items that passes all the tests. \r           var itemsPassed = 0; var i, j;  top: for (i = 0; i < items.length; i++){   for (j = 0; j < tests.length; j++)     if (!tests[j].pass(items[i]))       continue top;   itemsPassed++; }\r          Example 3 (break) Given an array of items and an array of tests, this example determines whether all items pass all tests. \r           var allPass = true; var i, j;  top: for (i = 0; items.length; i++)   for (j = 0; j < tests.length; i++)     if (!tests[j].pass(items[i])){       allPass = false;       break top;     }\r          continue Example \r           var i,j;  loop1: for (i = 0; i < 3; i++) {      \/\/The first for statement is labeled \"loop1\"    loop2:    for (j = 0; j < 3; j++) {   \/\/The second for statement is labeled \"loop2\"       if (i == 1 && j == 1) {          continue loop1;       } else {          console.log(\"i = \" + i + \", j = \" + j);       }    } }  \/\/ Output is: \/\/   \"i = 0, j = 0\" \/\/   \"i = 0, j = 1\" \/\/   \"i = 0, j = 2\" \/\/   \"i = 1, j = 0\" \/\/   \"i = 2, j = 0\" \/\/   \"i = 2, j = 1\" \/\/   \"i = 2, j = 2\" \/\/ Notice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\"\r          Example 2 (continue) Given an array of items and an array of tests, this example counts the number of items that passes all the tests. \r           var itemsPassed = 0; var i, j;  top: for (i = 0; i < items.length; i++){   for (j = 0; j < tests.length; j++)     if (!tests[j].pass(items[i]))       continue top;   itemsPassed++; }\r          Example 3 (break) Given an array of items and an array of tests, this example determines whether all items pass all tests. \r           var allPass = true; var i, j;  top: for (i = 0; items.length; i++)   for (j = 0; j < tests.length; i++)     if (!tests[j].pass(items[i])){       allPass = false;       break top;     }\r          See also break, continue"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/let","title":"let","description":"Declares a local variable, optionally initializing it to a value. Syntax let definition: \r           let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];\r          let expression: \r           let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) expression;\r          let statement: \r           let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) statement;\r          Parameters    Parameter Description     var1, var2, \u2026, varN Variable name. It can be any legal identifier.   value1, value2, \u2026, valueN Initial value of the variable. It can be any legal expression.   expression Any legal expression.   statement Any legal statement.    Description let allows you to declare variables, limiting its scope to the block, statement, or expression on which is used. This is unlike the var keyword, which defines a variable globally, or local to an entire function regardless of block scope. Examples A let expression limit the scope of the variable declared only in that expression. \r           var a = 5; let(a = 6) alert(a); \/\/ 6 alert(a); \/\/ 5\r          \u00a0Used inside a block, let limits the variable's scope to that block. Note the difference between var which its scope is inside the function where is declared \r           var a = 5; var b = 10; if (a === 5) {   let a = 4; \/\/ The scope is inside the if-block   var b = 1; \/\/ The scope is inside the function    console.log(a);  \/\/ 4   console.log(b);  \/\/ 1 }  console.log(a); \/\/ 5 console.log(b); \/\/ 1\r          You can use the let keyword to bind variables locally in the scope of for loops instead of using a global variable (defined using var) for that. \r           for (let i = 0; i<10; i++) {   alert(i); \/\/ 1, 2, 3, 4 ... 9 }  alert(i); \/\/ i is not defined\r          See also  var const New in\u00a0JavaScript 1.7"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/return","title":"return","description":"Summary  Specifies the value to be returned by a function.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax   return [expression];    Parameters   expression\u00a0 The expression to return. If omitted, undefined is returned instead.   Examples   Example: Using return  The following function returns the square of its argument, x, where x is a number.  function square(x) {    return x * x; }   Example: Using return  The following function returns the square of its argument, x, where x is a number.  function square(x) {    return x * x; }   See also  Functions"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/switch","title":"switch","description":"Evaluates an expression, matching the expression's value to a case label, and executes statements associated with that case.    Statement   Implemented in: JavaScript 1.2, NES 3.0   ECMA Version: ECMA-262, Edition 3    Syntax  switch (expression) {    case label1:       statements1       [break;]    case label2:       statements2       [break;]    ...    case labelN:       statementsN       [break;]    default:       statements_def       [break;] }  Parameters  expression\u00a0 An expression matched against each label.   labelN\u00a0 Identifier used to match against expression.   statementsN\u00a0 Statements that are executed if expression matches the associated label.   statements_def\u00a0 Statements that are executed if expression does not match any label.  Description If a match is found, the program executes the associated statements. If multiple cases match the provided value, the first case that matches is selected, even if the cases are not equal to each other. The program first looks for a case clause with a label matching the value of expression and then transfers control to that clause, executing the associated statements. If no matching label is found, the program looks for the optional default clause, and if found, transfers control to that clause, executing the associated statements. If no default clause is found, the program continues execution at the statement following the end of switch. By convention, the default clause is the last clause, but it does not need to be so. The optional break statement associated with each case label ensures that the program breaks out of switch once the matched statement is executed and continues execution at the statement following switch. If break is omitted, the program continues execution at the next statement in the switch statement. Examples Example: Using switch In the following example, if expression evaluates to \"Bananas\", the program matches the value with case \"Bananas\" and executes the associated statement. When break is encountered, the program breaks out of switch and executes the statement following switch. If break were omitted, the statement for case \"Cherries\" would also be executed. \r           switch (expr) {    case \"Oranges\":       document.write(\"Oranges are $0.59 a pound.<br>\");       break;    case \"Apples\":       document.write(\"Apples are $0.32 a pound.<br>\");       break;    case \"Bananas\":       document.write(\"Bananas are $0.48 a pound.<br>\");       break;    case \"Cherries\":       document.write(\"Cherries are $3.00 a pound.<br>\");       break;    case \"Mangoes\":    case \"Papayas\":       document.write(\"Mangoes and papayas are $2.79 a pound.<br>\");       break;    default:       document.write(\"Sorry, we are out of \" + expr + \".<br>\"); } document.write(\"Is there anything else you'd like?<br>\");\r          \u00a0 Example: Using switch In the following example, if expression evaluates to \"Bananas\", the program matches the value with case \"Bananas\" and executes the associated statement. When break is encountered, the program breaks out of switch and executes the statement following switch. If break were omitted, the statement for case \"Cherries\" would also be executed. \r           switch (expr) {    case \"Oranges\":       document.write(\"Oranges are $0.59 a pound.<br>\");       break;    case \"Apples\":       document.write(\"Apples are $0.32 a pound.<br>\");       break;    case \"Bananas\":       document.write(\"Bananas are $0.48 a pound.<br>\");       break;    case \"Cherries\":       document.write(\"Cherries are $3.00 a pound.<br>\");       break;    case \"Mangoes\":    case \"Papayas\":       document.write(\"Mangoes and papayas are $2.79 a pound.<br>\");       break;    default:       document.write(\"Sorry, we are out of \" + expr + \".<br>\"); } document.write(\"Is there anything else you'd like?<br>\");\r          \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/throw","title":"throw","description":"Throws a user-defined exception.    Statement   Implemented in: JavaScript 1.4   ECMA Version: ECMA-262, Edition 3    Syntax throw expression;  Parameters  expression The expression to throw.  Description Use the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception:  throw \"Error2\"; \/\/ generates an exception with a string value throw 42; \/\/ generates an exception with the value 42 throw true; \/\/ generates an exception with the value true  Examples Example: Throw an object You can specify an object when you throw an exception. You can then reference the object's properties in the catch block. The following example creates an object myUserException of type UserException and uses it in a throw statement. function UserException(message) {    this.message = message;    this.name = \"UserException\"; } function getMonthName(mo) {    mo = mo-1; \/\/ Adjust month number for array index (1=Jan, 12=Dec)    var months = new Array(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",       \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\");    if (months[mo]\u00a0!== undefined) {       return months[mo];    } else {       myUserException = new UserException(\"InvalidMonthNo\");       throw myUserException;    } }  try {    \/\/ statements to try    var myMonth = 15; \/\/ 15 is out of bound to raise the exception    monthName = getMonthName(myMonth); } catch (e) {    monthName = \"unknown\";    logMyErrors(e.message, e.name); \/\/ pass exception object to err handler }  Example: Another example of throwing an object The following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type ZipCodeFormatException. \/*  * Creates a ZipCode object.  *  * Accepted formats for a zip code are:  *    12345  *    12345-6789  *    123456789  *    12345 6789  *  * If the argument passed to the ZipCode constructor does not  * conform to one of these patterns, an exception is thrown.  *\/  function ZipCode(zip) {    zip = new String(zip);    pattern = \/[0-9]{5}([- ]?[0-9]{4})?\/;    if (pattern.test(zip)) {       \/\/ zip code value will be the first match in the string       this.value = zip.match(pattern)[0];       this.valueOf = function() {          return this.value       };       this.toString = function() {          return String(this.value)       };    } else {       throw new ZipCodeFormatException(zip);    } }  function ZipCodeFormatException(value) {    this.value = value;    this.message = \"does not conform to the expected format for a zip code\";    this.toString = function() {       return this.value + this.message    }; }  \/*  * This could be in a script that validates address data  * for US addresses.  *\/  var ZIPCODE_INVALID = -1; var ZIPCODE_UNKNOWN_ERROR = -2;  function verifyZipCode(z) {    try {       z = new ZipCode(z);    } catch (e) {       if (e instanceof ZipCodeFormatException) {          return ZIPCODE_INVALID;       } else {          return ZIPCODE_UNKNOWN_ERROR;       }    }    return z; }  a = verifyZipCode(95060);         \/\/ returns 95060 b = verifyZipCode(9560;)          \/\/ returns -1 c = verifyZipCode(\"a\");           \/\/ returns -1 d = verifyZipCode(\"95060\");       \/\/ returns 95060 e = verifyZipCode(\"95060 1234\");  \/\/ returns 95060 1234  Example: Rethrow an exception You can use throw to rethrow an exception after you catch it. The following example catches an exception with a numeric value and rethrows it if the value is over 50. The rethrown exception propagates up to the enclosing function or to the top level so that the user sees it. try {    throw n; \/\/ throws an exception with a numeric value } catch (e) {    if (e <= 50) {       \/\/ statements to handle exceptions 1-50    } else {       \/\/ cannot handle this exception, so rethrow       throw e;    } }  Example: Throw an object You can specify an object when you throw an exception. You can then reference the object's properties in the catch block. The following example creates an object myUserException of type UserException and uses it in a throw statement. function UserException(message) {    this.message = message;    this.name = \"UserException\"; } function getMonthName(mo) {    mo = mo-1; \/\/ Adjust month number for array index (1=Jan, 12=Dec)    var months = new Array(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",       \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\");    if (months[mo]\u00a0!== undefined) {       return months[mo];    } else {       myUserException = new UserException(\"InvalidMonthNo\");       throw myUserException;    } }  try {    \/\/ statements to try    var myMonth = 15; \/\/ 15 is out of bound to raise the exception    monthName = getMonthName(myMonth); } catch (e) {    monthName = \"unknown\";    logMyErrors(e.message, e.name); \/\/ pass exception object to err handler }  Example: Another example of throwing an object The following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type ZipCodeFormatException. \/*  * Creates a ZipCode object.  *  * Accepted formats for a zip code are:  *    12345  *    12345-6789  *    123456789  *    12345 6789  *  * If the argument passed to the ZipCode constructor does not  * conform to one of these patterns, an exception is thrown.  *\/  function ZipCode(zip) {    zip = new String(zip);    pattern = \/[0-9]{5}([- ]?[0-9]{4})?\/;    if (pattern.test(zip)) {       \/\/ zip code value will be the first match in the string       this.value = zip.match(pattern)[0];       this.valueOf = function() {          return this.value       };       this.toString = function() {          return String(this.value)       };    } else {       throw new ZipCodeFormatException(zip);    } }  function ZipCodeFormatException(value) {    this.value = value;    this.message = \"does not conform to the expected format for a zip code\";    this.toString = function() {       return this.value + this.message    }; }  \/*  * This could be in a script that validates address data  * for US addresses.  *\/  var ZIPCODE_INVALID = -1; var ZIPCODE_UNKNOWN_ERROR = -2;  function verifyZipCode(z) {    try {       z = new ZipCode(z);    } catch (e) {       if (e instanceof ZipCodeFormatException) {          return ZIPCODE_INVALID;       } else {          return ZIPCODE_UNKNOWN_ERROR;       }    }    return z; }  a = verifyZipCode(95060);         \/\/ returns 95060 b = verifyZipCode(9560;)          \/\/ returns -1 c = verifyZipCode(\"a\");           \/\/ returns -1 d = verifyZipCode(\"95060\");       \/\/ returns 95060 e = verifyZipCode(\"95060 1234\");  \/\/ returns 95060 1234  Example: Rethrow an exception You can use throw to rethrow an exception after you catch it. The following example catches an exception with a numeric value and rethrows it if the value is over 50. The rethrown exception propagates up to the enclosing function or to the top level so that the user sees it. try {    throw n; \/\/ throws an exception with a numeric value } catch (e) {    if (e <= 50) {       \/\/ statements to handle exceptions 1-50    } else {       \/\/ cannot handle this exception, so rethrow       throw e;    } }  See also try...catch \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/try...catch","title":"try...catch","description":"Marks a block of statements to try, and specifies a response, should an exception be thrown.    Statement   Implemented in: JavaScript 1.4 JavaScript 1.5, NES 6.0: Added multiple catch clauses (Netscape extension).    ECMA Version: ECMA-262, Edition 3    Syntax try {    try_statements } [catch (exception_var_1 if condition_1) {    catch_statements_1 }] ... [catch (exception_var_2) {    catch_statements_2 }] [finally {    finally_statements }]  Parameters  try_statements The statements to be executed.   catch_statements_1, catch_statements_2 Statements that are executed if an exception is thrown in the try block.   exception_var_1, exception_var_2 An identifier to hold an exception object for the associated catch clause.   condition_1 A conditional expression.   finally_statements Statements that are executed after the try statement completes. These statements execute regardless of whether or not an exception was thrown or caught.  Description The try statement consists of a try block, which contains one or more statements, and at least one catch clause or a finally clause, or both. That is, there are three forms of the try statement:  try...catch try...finally try...catch...finally  A catch clause contain statements that specify what to do if an exception is thrown in the try block. That is, you want the try block to succeed, and if it does not succeed, you want control to pass to the catch block. If any statement within the try block (or in a function called from within the try block) throws an exception, control immediately shifts to the catch clause. If no exception is thrown in the try block, the catch clause is skipped. The finally clause executes after the try block and catch clause(s) execute but before the statements following the try statement. It always executes, regardless of whether or not an exception was thrown or caught. You can nest one or more try statements. If an inner try statement does not have a catch clause, the enclosing try statement's catch clause is entered. You also use the try statement to handle Java exceptions. See the Core JavaScript 1.5 Guide for information on Java exceptions. Unconditional catch clause When a single, unconditional catch clause is used, the catch block is entered when any exception is thrown. For example, when the exception occurs in the following code, control transfers to the catch clause. \r           try {    throw \"myException\"; \/\/ generates an exception } catch (e) {    \/\/ statements to handle any exceptions    logMyErrors(e); \/\/ pass exception object to error handler }\r          Conditional catch clauses You can also use one or more conditional catch clauses to handle specific exceptions. In this case, the appropriate catch clause is entered when the specified exception is thrown. In the following example, code in the try block can potentially throw three exceptions: TypeError, RangeError, and EvalError. When an exception occurs, control transfers to the appropriate catch clause. If the exception is not one of the specified exceptions and an unconditional catch clause is found, control transfers to that catch clause. If you use an unconditional catch clause with one or more conditional catch clauses, the unconditional catch clause must be specified last. Otherwise, the unconditional catch clause will intercept all types of exception before they can reach the conditional ones. \r           try {    myroutine(); \/\/ may throw three exceptions } catch (e if e instanceof TypeError) {    \/\/ statements to handle TypeError exceptions } catch (e if e instanceof RangeError) {    \/\/ statements to handle RangeError exceptions } catch (e if e instanceof EvalError) {    \/\/ statements to handle EvalError exceptions } catch (e) {    \/\/ statements to handle any unspecified exceptions    logMyErrors(e); \/\/ pass exception object to error handler }\r          Note: This functionality is not part of the ECMAScript specification. The exception identifier When an exception is thrown in the try block, exception_var (e.g. the e in catch (e)) holds the value specified by the throw statement. You can use this identifier to get information about the exception that was thrown. This identifier is local to the catch clause. That is, it is created when the catch clause is entered, and after the catch clause finishes executing, the identifier is no longer available. The finally clause The finally clause contains statements to execute after the try block and catch clause(s) execute but before the statements following the try statement. The finally clause executes regardless of whether or not an exception is thrown. If an exception is thrown, the statements in the finally clause execute even if no catch clause handles the exception. You can use the finally clause to make your script fail gracefully when an exception occurs; for example, you may need to release a resource that your script has tied up. The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the finally clause closes the file before the script fails. \r           openMyFile() try {    \/\/ tie up a resource    writeMyFile(theData); } finally {    closeMyFile(); \/\/ always close the resource }\r          Unconditional catch clause When a single, unconditional catch clause is used, the catch block is entered when any exception is thrown. For example, when the exception occurs in the following code, control transfers to the catch clause. \r           try {    throw \"myException\"; \/\/ generates an exception } catch (e) {    \/\/ statements to handle any exceptions    logMyErrors(e); \/\/ pass exception object to error handler }\r          Conditional catch clauses You can also use one or more conditional catch clauses to handle specific exceptions. In this case, the appropriate catch clause is entered when the specified exception is thrown. In the following example, code in the try block can potentially throw three exceptions: TypeError, RangeError, and EvalError. When an exception occurs, control transfers to the appropriate catch clause. If the exception is not one of the specified exceptions and an unconditional catch clause is found, control transfers to that catch clause. If you use an unconditional catch clause with one or more conditional catch clauses, the unconditional catch clause must be specified last. Otherwise, the unconditional catch clause will intercept all types of exception before they can reach the conditional ones. \r           try {    myroutine(); \/\/ may throw three exceptions } catch (e if e instanceof TypeError) {    \/\/ statements to handle TypeError exceptions } catch (e if e instanceof RangeError) {    \/\/ statements to handle RangeError exceptions } catch (e if e instanceof EvalError) {    \/\/ statements to handle EvalError exceptions } catch (e) {    \/\/ statements to handle any unspecified exceptions    logMyErrors(e); \/\/ pass exception object to error handler }\r          Note: This functionality is not part of the ECMAScript specification. The exception identifier When an exception is thrown in the try block, exception_var (e.g. the e in catch (e)) holds the value specified by the throw statement. You can use this identifier to get information about the exception that was thrown. This identifier is local to the catch clause. That is, it is created when the catch clause is entered, and after the catch clause finishes executing, the identifier is no longer available. The finally clause The finally clause contains statements to execute after the try block and catch clause(s) execute but before the statements following the try statement. The finally clause executes regardless of whether or not an exception is thrown. If an exception is thrown, the statements in the finally clause execute even if no catch clause handles the exception. You can use the finally clause to make your script fail gracefully when an exception occurs; for example, you may need to release a resource that your script has tied up. The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the finally clause closes the file before the script fails. \r           openMyFile() try {    \/\/ tie up a resource    writeMyFile(theData); } finally {    closeMyFile(); \/\/ always close the resource }\r          Examples See the examples for throw. See also  throw Error  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/while","title":"while","description":"Summary  Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA version: ECMA-262    Syntax  while (condition)   statement   Parameters   condition\u00a0 An expression evaluated before each pass through the loop. If this condition evaluates to true, statement is executed. When condition evaluates to false, execution continues with the statement after the while loop.   statement\u00a0 A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.   Examples  The following while loop iterates as long as n is less than three.  n = 0; x = 0; while (n < 3) {   n ++;   x += n; }  Each iteration, the loop increments n and adds it to x. Therefore, x and n take on the following values:   After the first pass: n = 1 and x = 1  After the second pass: n = 2 and x = 3  After the third pass: n = 3 and x = 6  After completing the third pass, the condition n < 3 is no longer true, so the loop terminates.   See also  do...while, for"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/var","title":"var","description":"Declares a variable, optionally initializing it to a value.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax var varname1 [= value1 [, varname2 [, varname3 ... [, varnameN]]]]; Parameters  varnameN Variable name. It can be any legal identifier.   valueN Initial value of the variable. It can be any legal expression.  Description The scope of a variable declared with var is the enclosing function or, for variables declared outside a function, the global scope (which is bound to the global object). Using var outside a function is optional; assigning a value to an undeclared variable implicitly declares it as a global variable (also a property of the global object). The difference is that z declared variable is a non-configurable property of the global object while an undeclared is configurable. \r           var a = 1; b = 2;  delete this.a; \/\/ Throws a TypeError in strict mode. Fails silently otherwise. delete this.b;  console.log(a, b); \/\/ Throws a ReferenceError. Since the 'b' property doesn't exist in the global object, \/\/ the 'b' variable stops being a variable\r          Consequently, it is recommended to always declare your variables, regardless of being in the global scope or in a function Failure to declare the variable in these cases will very likely lead to unexpected results. For that reason, in ECMAScript 5 strict mode, assigning a value an undeclared variable inside a function throws an error. var hoisting In JavaScript, variable can be declared after being used. \r           bla = 2 var bla; \/\/ ...  \/\/ is implicitly understood as:  var bla; bla = 2;\r          For that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases: \r           var cells = document.getElementsByTagName('td');  for(var i=0; i<cells.length; i++){   var cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?   }, false); }\r          Here, while the intention is to capture the 'local' cell within the loop, what happened is the following: \r           var i, cell; var cells = document.getElementsByTagName('td');  for(i=0; i<cells.length; i++){   cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F';   }, false); }\r          The 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.var hoisting In JavaScript, variable can be declared after being used. \r           bla = 2 var bla; \/\/ ...  \/\/ is implicitly understood as:  var bla; bla = 2;\r          For that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases: \r           var cells = document.getElementsByTagName('td');  for(var i=0; i<cells.length; i++){   var cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?   }, false); }\r          Here, while the intention is to capture the 'local' cell within the loop, what happened is the following: \r           var i, cell; var cells = document.getElementsByTagName('td');  for(i=0; i<cells.length; i++){   cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F';   }, false); }\r          The 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.Examples Declaring and initializing two variables: \r           var a = 0, b = 0;\r          Assigning 2 variables with single string value. \r           var a = \"A\"; var b = a;  \/\/ Equivalent to:  var a, b = a = \"A\";\r          Be careful of the order though: \r           var x = y, y = 'A'; console.log(x + y); \/\/ undefinedA  \/\/ Here, x is declared. y declaration (but not initialisation!) is hoisted \/\/ so, at the time of \"x = y\", y is declared (no ReferenceError is thrown) and its value is 'undefined' \/\/ then, y is assigned its value. \/\/ Consequently, after the first line, x === undefined && y === 'A'. Hence the concatenation\r          Be careful of initialization of several variables: \r           var x = 0;  function f(){   var x = y = 1; \/\/ x is declared locally. y is not! } f();  console.log(x, y); \/\/ 0, 1 \/\/ x is the global one as expected \/\/ y leaked outside of the function, though!\r          See also  let const How One Missing `var` Ruined our Launch."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/with","title":"with","description":"Summary  Extends the scope chain for a statement.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA version: ECMA-262    Syntax  with (object)   statement   Parameters   object\u00a0 Adds the given object to the scope chain used when evaluating the statement. The parentheses around object are required.   statement\u00a0 Any statement. To execute multiple statements, use a block statement ({ ... }) to group those statements.  Description JavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The 'with' statement adds the given object to the head of this scope chain during the evaluation of its statement body. If an unqualified name used in the body matches a property in the scope chain, then the name is bound to the property and the object containing the property. Otherwise a 'ReferenceError' is thrown. Using with is not recommended, and is forbidden in ECMAScript 5 strict mode. The recommended alternative is to assign the object whose properties you want to access to a temporary variable. (On a historical note, Firefox 1.5 used to generate a warning when the 'with' statement was used: \"deprecated with statement usage\". This has been removed in Firefox 1.5.0.1 (  bug 322430 ).) Performance Pro & Con  Pro: 'with' can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. The scope chain change required by 'with' is not computationally expensive. Use of 'with' will relieve the interpreter of parsing repeated object references. Note, however, that in many cases this benefit can be achieved by using a temporary variable to store a reference to the desired object.   Con: 'with' forces the specified object to be searched first for all name lookups. Therefore all identifiers that aren't members of the specified object will be found more slowly in a 'with' block. Where performance is important, 'with' should only be used to encompass code blocks that access members of the specified object.  Ambiguity Con  Con: 'with' makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. So given this example:  function f(x, o) {   with (o)     print(x); }  only when f is called is x either found or not, and if found, either in o or (if no such property exists) in f's activation object, where x names the first formal argument. If you forget to define x in the object you pass as the second argument, or if there's some similar bug or confusion, you won't get an error -- just unexpected results.   Examples   Example: Using with  The following with statement specifies that the Math object is the default object. The statements following the with statement refer to the PI property and the cos and sin methods, without specifying an object. JavaScript assumes the Math object for these references.  var a, x, y; var r = 10; with (Math) {   a = PI * r * r;   x = r * cos(PI);   y = r * sin(PI \/ 2); }       Example: Using with  The following with statement specifies that the Math object is the default object. The statements following the with statement refer to the PI property and the cos and sin methods, without specifying an object. JavaScript assumes the Math object for these references.  var a, x, y; var r = 10; with (Math) {   a = PI * r * r;   x = r * cos(PI);   y = r * sin(PI \/ 2); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Arithmetic_Operators","title":"Arithmetic Operators","description":"Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (\/). These operators work as they do in most other programming languages when used with floating point numbers (in particular, note that division by zero produces +\/-Infinity). For example:  1 \/ 2      \/\/ returns 0.5 in JavaScript 1 \/ 2      \/\/ returns 0 in Java (neither number is explicitly a floating point number)  1.0 \/ 2.0  \/\/ returns 0.5 in both JavaScript and Java  2.0 \/ 0    \/\/ returns Infinity in Javascript 2.0 \/ 0.0  \/\/ returns Infinity too 2.0 \/ -0.0 \/\/ returns -Infinity in Javascript      Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    \u00a0% (Modulus) The modulus operator is used as follows:  var1\u00a0% var2  The modulus operator returns the first operand modulo the second operand, that is, var1 modulo var2, in the preceding statement, where var1 and var2 are variables. The modulo function is the integer remainder of dividing var1 by var2. For example, 12\u00a0% 5 returns 2. The result will have the same sign as var1; that is, \u22121\u00a0% 2 returns \u22121. ++ (Increment) The increment operator is used as follows: var++ or ++var This operator increments (adds one to) its operand and returns a value. If used postfix, with operator after operand (for example, x++), then it returns the value before incrementing. If used prefix with operator before operand (for example, ++x), then it returns the value after incrementing. For example, if x is three, then the statement y = x++ sets y to 3 and increments x to 4. If x is 3, then the statement y = ++x increments x to 4 and sets y to 4. -- (Decrement) The decrement operator is used as follows: var-- or --var This operator decrements (subtracts one from) its operand and returns a value. If used postfix (for example, x--), then it returns the value before decrementing. If used prefix (for example, --x), then it returns the value after decrementing. For example, if x is three, then the statement y = x-- sets y to 3 and decrements x to 2. If x is 3, then the statement y = --x decrements x to 2 and sets y to 2. - (Unary Negation) The unary negation operator precedes its operand and negates it. For example, y = -x negates the value of x and assigns that to y; that is, if x were 3, y would get the value -3 and x would retain the value 3. + (Unary Plus) The unary plus operator precedes its operand and evaluates to its operand but attempts to converts it into a number, if it isn't already. For example, y = +x takes the value of x and assigns that to y; that is, if x were 3, y would get the value 3 and x would retain the value 3; but if x were the string \"3\", y would also get the value 3. Although unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number. It can convert string representations of integers and floats, as well as the non-string values true, false, and null. Integers in both decimal and hexadecimal (\"0x\"-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to NaN. \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Assignment_Operators","title":"Assignment Operators","description":"An assignment operator assigns a value to its left operand based on the value of its right operand.    Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    The basic assignment operator is equal (=), which assigns the value of its right operand to its left operand. That is, x = y assigns the value of y to x. The other assignment operators are usually shorthand for standard operations, as shown in the following table.    Shorthand operator Meaning   x += y x = x + y   x -= y x = x - y   x *= y x = x * y   x \/= y x = x \/ y   x\u00a0%= y x = x\u00a0% y   x <<= y x = x << y   x >>= y x = x >> y   x >>>= y x = x >>> y   x &= y x = x & y   x ^= y x = x ^ y   x |= y x = x | y    In unusual situations, the assignment operator is not identical to the Meaning expression in this table. When the left operand of an assignment operator itself contains an assignment operator, the left operand is evaluated only once. For example:  a[i++] += 5 \/\/i is evaluated only once a[i++] = a[i++] + 5 \/\/i is evaluated twice"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Bitwise_Operators","title":"Bitwise Operators","description":"Bitwise operators treat their operands as a sequence of 32 bits (zeros and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.    Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    The following table summarizes JavaScript's bitwise operators:    Operator Usage Description   Bitwise AND a & b Returns a one in each bit position for which the corresponding bits of both operands are ones.   Bitwise OR a | b Returns a one in each bit position for which the corresponding bits of either or both operands are ones.   Bitwise XOR a ^ b Returns a one in each bit position for which the corresponding bits of either but not both operands are ones.   Bitwise NOT ~ a Inverts the bits of its operand.   Left shift a << b Shifts a in binary representation b (< 32) bits to the left, shifting in zeros from the right.   Sign-propagating right shift a >> b Shifts a in binary representation b (< 32) bits to the right, discarding bits shifted off.   Zero-fill right shift a >>> b Shifts a in binary representation b (< 32) bits to the right, discarding bits shifted off, and shifting in zeros from the left.    Signed 32-bit integers The operands of all bitwise operators are converted to signed 32-bit integers in big-endian order and in two's complement format. Big-endian order means that the most significant bit (the bit position with the greatest value) is the left-most bit if the 32 bits are arranged in a horizontal line. Two's complement format means that a number's negative counterpart (e.g. 5 vs. -5) is all the number's bits inverted (bitwise NOT of the number, a.k.a. one's complement of the number) plus one. For example, the following encodes the integer 314 (base 10):  00000000000000000000000100111010  The following encodes ~314, i.e. the one's complement of 314:  11111111111111111111111011000101  Finally, the following encodes -314, i.e. the two's complement of 314:  11111111111111111111111011000110  The two's complement guarantees that the left-most bit is 0 when the number is positive and 1 when the number is negative. Thus, it is called the sign bit. The number 0 is the integer that is composed completely of 0 bits. The number -1 is the integer that is composed completely of 1 bits. Bitwise logical operators Conceptually, the bitwise logical operators work as follows:  The operands are converted to 32-bit integers and expressed by a series of bits (zeros and ones). Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on. The operator is applied to each pair of bits, and the result is constructed bitwise.  & (Bitwise AND) Performs the AND operation on each pair of bits. a AND b yields 1 only if both a and b are 1. The truth table for the AND operation is:    a b a AND b   0 0 0   0 1 0   1 0 0   1 1 1    Example:       9 (base 10) = 00000000000000000000000000001001 (base 2)     14 (base 10) = 00000000000000000000000000001110 (base 2)                    -------------------------------- 14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)  Bitwise ANDing any number x with 0 yields 0. Bitwise ANDing any number x with -1 yields x. | (Bitwise OR) Performs the OR operation on each pair of bits. a OR b yields 1 if either a or b is 1. The truth table for the OR operation is:    a b a OR b   0 0 0   0 1 1   1 0 1   1 1 1          9 (base 10) = 00000000000000000000000000001001 (base 2)     14 (base 10) = 00000000000000000000000000001110 (base 2)                    -------------------------------- 14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)  Bitwise ORing any number x with 0 yields x. Bitwise ORing any number x with -1 yields -1. ^ (Bitwise XOR) Performs the XOR operation on each pair of bits. a XOR b yields 1 if a and b are different. The truth table for the XOR operation is:    a b a XOR b   0 0 0   0 1 1   1 0 1   1 1 0    Example:       9 (base 10) = 00000000000000000000000000001001 (base 2)     14 (base 10) = 00000000000000000000000000001110 (base 2)                    -------------------------------- 14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)  Bitwise XORing any number x with 0 yields x. Bitwise XORing any number x with -1 yields ~x. ~ (Bitwise NOT) Performs the NOT operator on each bit. NOT a yields the inverted value (a.k.a. one's complement) of a. The truth table for the NOT operation is:    a NOT a   0 1   1 0    Example:   9 (base 10) = 00000000000000000000000000001001 (base 2)                -------------------------------- ~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)  Bitwise NOTing any number x yields -(x + 1). For example, ~5 yields -6. & (Bitwise AND) Performs the AND operation on each pair of bits. a AND b yields 1 only if both a and b are 1. The truth table for the AND operation is:    a b a AND b   0 0 0   0 1 0   1 0 0   1 1 1    Example:       9 (base 10) = 00000000000000000000000000001001 (base 2)     14 (base 10) = 00000000000000000000000000001110 (base 2)                    -------------------------------- 14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)  Bitwise ANDing any number x with 0 yields 0. Bitwise ANDing any number x with -1 yields x. | (Bitwise OR) Performs the OR operation on each pair of bits. a OR b yields 1 if either a or b is 1. The truth table for the OR operation is:    a b a OR b   0 0 0   0 1 1   1 0 1   1 1 1          9 (base 10) = 00000000000000000000000000001001 (base 2)     14 (base 10) = 00000000000000000000000000001110 (base 2)                    -------------------------------- 14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)  Bitwise ORing any number x with 0 yields x. Bitwise ORing any number x with -1 yields -1. ^ (Bitwise XOR) Performs the XOR operation on each pair of bits. a XOR b yields 1 if a and b are different. The truth table for the XOR operation is:    a b a XOR b   0 0 0   0 1 1   1 0 1   1 1 0    Example:       9 (base 10) = 00000000000000000000000000001001 (base 2)     14 (base 10) = 00000000000000000000000000001110 (base 2)                    -------------------------------- 14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)  Bitwise XORing any number x with 0 yields x. Bitwise XORing any number x with -1 yields ~x. ~ (Bitwise NOT) Performs the NOT operator on each bit. NOT a yields the inverted value (a.k.a. one's complement) of a. The truth table for the NOT operation is:    a NOT a   0 1   1 0    Example:   9 (base 10) = 00000000000000000000000000001001 (base 2)                -------------------------------- ~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)  Bitwise NOTing any number x yields -(x + 1). For example, ~5 yields -6. Bitwise shift operators The bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be shifted. The direction of the shift operation is controlled by the operator used. Shift operators convert their operands to 32-bit integers in big-endian order and return a result of the same type as the left operand.\u00a0 The right operand should be less than 32, but if not only the low five bits will be used. << (Left shift) This operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right. For example, 9 << 2 yields 36:       9 (base 10): 00000000000000000000000000001001 (base 2)                   -------------------------------- 9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)  Bitwise shifting any number x to the left by y bits yields x * y^2. >> (Sign-propagating right shift) This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name \"sign-propagating\". For example, 9 >> 2 yields 2:       9 (base 10): 00000000000000000000000000001001 (base 2)                   -------------------------------- 9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)  Likewise, -9 >> 2 yields -3, because the sign is preserved:       -9 (base 10): 11111111111111111111111111110111 (base 2)                    -------------------------------- -9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)  >>> (Zero-fill right shift) This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always positive. For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, 9 >>> 2 yields 2, the same as 9 >> 2:        9 (base 10): 00000000000000000000000000001001 (base 2)                    -------------------------------- 9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)  However, this is not the case for negative numbers. For example, -9 >>> 2 yields 1073741821, which is different than -9 >> 2 (which yields -3):        -9 (base 10): 11111111111111111111111111110111 (base 2)                     -------------------------------- -9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)  << (Left shift) This operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right. For example, 9 << 2 yields 36:       9 (base 10): 00000000000000000000000000001001 (base 2)                   -------------------------------- 9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)  Bitwise shifting any number x to the left by y bits yields x * y^2. >> (Sign-propagating right shift) This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name \"sign-propagating\". For example, 9 >> 2 yields 2:       9 (base 10): 00000000000000000000000000001001 (base 2)                   -------------------------------- 9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)  Likewise, -9 >> 2 yields -3, because the sign is preserved:       -9 (base 10): 11111111111111111111111111110111 (base 2)                    -------------------------------- -9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)  >>> (Zero-fill right shift) This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always positive. For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, 9 >>> 2 yields 2, the same as 9 >> 2:        9 (base 10): 00000000000000000000000000001001 (base 2)                    -------------------------------- 9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)  However, this is not the case for negative numbers. For example, -9 >>> 2 yields 1073741821, which is different than -9 >> 2 (which yields -3):        -9 (base 10): 11111111111111111111111111110111 (base 2)                     -------------------------------- -9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)  Examples Example: Flags and bitmasks The bitwise logical operators are often used to create, manipulate, and read sequences of flags, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32). Suppose there are 4 flags:  flag A: we have an ant problem flag B: we own a bat flag C: we own a cat flag D: we own a duck  These flags are represented by a sequence of bits: DCBA. When a flag is set, it has a value of 1. When a flag is cleared, it has a value of 0. Suppose a variable flags has the binary value 0101:  var flags = 0x5;   \/\/ binary 0101  This value indicates:  flag A is true (we have an ant problem); flag B is false (we don't own a bat); flag C is true (we own a cat); flag D is false (we don't own a duck);  Since bitwise operators are 32-bit, 0101 is actually 00000000000000000000000000000101, but the preceding zeroes can be neglected since they contain no meaningful information. A bitmask is a sequence of bits that can manipulate and\/or read flags. Typically, a \"primitive\" bitmask for each flag is defined:  var FLAG_A = 0x1; \/\/ 0001 var FLAG_B = 0x2; \/\/ 0010 var FLAG_C = 0x4; \/\/ 0100 var FLAG_D = 0x8; \/\/ 1000  New bitmasks can be created by using the bitwise logical operators on these primitive bitmasks. For example, the bitmask 1011 can be created by ORing FLAG_A, FLAG_B, and FLAG_D:  var mask = FLAG_A | FLAG_B | FLAG_D; \/\/ 0001 | 0010 | 1000 => 1011  Individual flag values can be extracted by ANDing them with a bitmask, where each bit with the value of one will \"extract\" the corresponding flag. The bitmask masks out the non-relevant flags by ANDing with zeros (hence the term \"bitmask\"). For example, the bitmask 0100 can be used to see if flag C is set:  \/\/ if we own a cat if (flags & FLAG_C) { \/\/ 0101 & 0100 => 0100 => true    \/\/ do stuff }  A bitmask with multiple set flags acts like an \"either\/or\". For example, the following two are equivalent:  \/\/ if we own a bat or we own a cat if ((flags & FLAG_B) || (flags & FLAG_C)) { \/\/ (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true    \/\/ do stuff }   \/\/ if we own a bat or cat var mask = FLAG_B | FLAG_C; \/\/ 0010 | 0100 => 0110 if (flags & mask) { \/\/ 0101 & 0110 => 0100 => true    \/\/ do stuff }  Flags can be set by ORing them with a bitmask, where each bit with the value one will set the corresponding flag, if that flag isn't already set. For example, the bitmask 1010 can be used to set flags C and D:  \/\/ yes, we own a cat and a duck var mask = FLAG_C | FLAG_D; \/\/ 0100 | 1000 => 1100 flags |= mask;   \/\/ 0101 | 1100 => 1101  Flags can be cleared by ANDing them with a bitmask, where each bit with the value zero will clear the corresponding flag, if it isn't already cleared. This bitmask can be created by NOTing primitive bitmasks. For example, the bitmask 1010 can be used to clear flags A and C:  \/\/ no, we don't neither have an ant problem nor own a cat var mask = ~(FLAG_A | FLAG_C); \/\/ ~0101 => 1010 flags &= mask;   \/\/ 1101 & 1010 => 1000  The mask could also have been created with ~FLAG_A & ~FLAG_C (De Morgan's law):  \/\/ no, we don't have an ant problem, and we don't own a cat var mask = ~FLAG_A & ~FLAG_C; flags &= mask;   \/\/ 1101 & 1010 => 1000  Flags can be toggled by XORing them with a bitmask, where each bit with the value one will toggle the corresponding flag. For example, the bitmask 0110 can be used to toggle flags B and C:  \/\/ if we didn't have a bat, we have one now, and if we did have one, bye-bye bat \/\/ same thing for cats var mask = FLAG_B | FLAG_C; flags = flags ^ mask;   \/\/ 1100 ^ 0110 => 1010  Finally, the flags can all be flipped with the NOT operator:  \/\/ entering parallel universe... flags = ~flags;    \/\/ ~1010 => 0101  Example: Flags and bitmasks The bitwise logical operators are often used to create, manipulate, and read sequences of flags, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32). Suppose there are 4 flags:  flag A: we have an ant problem flag B: we own a bat flag C: we own a cat flag D: we own a duck  These flags are represented by a sequence of bits: DCBA. When a flag is set, it has a value of 1. When a flag is cleared, it has a value of 0. Suppose a variable flags has the binary value 0101:  var flags = 0x5;   \/\/ binary 0101  This value indicates:  flag A is true (we have an ant problem); flag B is false (we don't own a bat); flag C is true (we own a cat); flag D is false (we don't own a duck);  Since bitwise operators are 32-bit, 0101 is actually 00000000000000000000000000000101, but the preceding zeroes can be neglected since they contain no meaningful information. A bitmask is a sequence of bits that can manipulate and\/or read flags. Typically, a \"primitive\" bitmask for each flag is defined:  var FLAG_A = 0x1; \/\/ 0001 var FLAG_B = 0x2; \/\/ 0010 var FLAG_C = 0x4; \/\/ 0100 var FLAG_D = 0x8; \/\/ 1000  New bitmasks can be created by using the bitwise logical operators on these primitive bitmasks. For example, the bitmask 1011 can be created by ORing FLAG_A, FLAG_B, and FLAG_D:  var mask = FLAG_A | FLAG_B | FLAG_D; \/\/ 0001 | 0010 | 1000 => 1011  Individual flag values can be extracted by ANDing them with a bitmask, where each bit with the value of one will \"extract\" the corresponding flag. The bitmask masks out the non-relevant flags by ANDing with zeros (hence the term \"bitmask\"). For example, the bitmask 0100 can be used to see if flag C is set:  \/\/ if we own a cat if (flags & FLAG_C) { \/\/ 0101 & 0100 => 0100 => true    \/\/ do stuff }  A bitmask with multiple set flags acts like an \"either\/or\". For example, the following two are equivalent:  \/\/ if we own a bat or we own a cat if ((flags & FLAG_B) || (flags & FLAG_C)) { \/\/ (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true    \/\/ do stuff }   \/\/ if we own a bat or cat var mask = FLAG_B | FLAG_C; \/\/ 0010 | 0100 => 0110 if (flags & mask) { \/\/ 0101 & 0110 => 0100 => true    \/\/ do stuff }  Flags can be set by ORing them with a bitmask, where each bit with the value one will set the corresponding flag, if that flag isn't already set. For example, the bitmask 1010 can be used to set flags C and D:  \/\/ yes, we own a cat and a duck var mask = FLAG_C | FLAG_D; \/\/ 0100 | 1000 => 1100 flags |= mask;   \/\/ 0101 | 1100 => 1101  Flags can be cleared by ANDing them with a bitmask, where each bit with the value zero will clear the corresponding flag, if it isn't already cleared. This bitmask can be created by NOTing primitive bitmasks. For example, the bitmask 1010 can be used to clear flags A and C:  \/\/ no, we don't neither have an ant problem nor own a cat var mask = ~(FLAG_A | FLAG_C); \/\/ ~0101 => 1010 flags &= mask;   \/\/ 1101 & 1010 => 1000  The mask could also have been created with ~FLAG_A & ~FLAG_C (De Morgan's law):  \/\/ no, we don't have an ant problem, and we don't own a cat var mask = ~FLAG_A & ~FLAG_C; flags &= mask;   \/\/ 1101 & 1010 => 1000  Flags can be toggled by XORing them with a bitmask, where each bit with the value one will toggle the corresponding flag. For example, the bitmask 0110 can be used to toggle flags B and C:  \/\/ if we didn't have a bat, we have one now, and if we did have one, bye-bye bat \/\/ same thing for cats var mask = FLAG_B | FLAG_C; flags = flags ^ mask;   \/\/ 1100 ^ 0110 => 1010  Finally, the flags can all be flipped with the NOT operator:  \/\/ entering parallel universe... flags = ~flags;    \/\/ ~1010 => 0101"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comparison_Operators","title":"Comparison Operators","description":"The operands can be numerical or string values. Strings are compared based on standard lexicographical ordering, using Unicode values. JavaScript has both strict and type-converting equality comparison. For strict equality the objects being compared must have the same type and:  Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions. Two numbers are strictly equal when they are numerically equal (have the same number value). NaN is not equal to anything, including NaN. Positive and negative zeros are equal to one another. Two Boolean operands are strictly equal if both are true or both are false. Two objects are strictly equal if they refer to the same Object. Null and Undefined types are == (but not ===).  The following table describes the comparison operators:    Operator Description Examples returning true1   Equal (==) If the two operands are not of the same type, JavaScript converts the operands then applies strict comparison. If either operand is a number or a boolean, the operands are converted to numbers if possible; else if either operand is a string, the other operand is converted to a string if possible. If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory.  3 == var1 \"3\" == var1 3 == '3'     Not equal (!=) Returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison.\u00a0If both operands are\u00a0objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.  var1\u00a0!= 4 var1\u00a0!= \"5\"    Strict equal (===) Returns true if the operands are strictly equal (see above) with no type conversion.  3 === var1    Strict not equal (!==) Returns true if the operands are not equal and\/or not of the same type.  var2\u00a0!== 3 3\u00a0!== '3'    Greater than (>) Returns true if the left operand is greater than the right operand.  var2 > var1    Greater than or equal (>=) Returns true if the left operand is greater than or equal to the right operand.  var2 >= var1 var1 >= 3    Less than (<) Returns true if the left operand is less than the right operand.  var1 < var2    Less than or equal to (<=) Returns true if the left operand is less than or equal to the right operand.  var1 <= var2 var2 <= 5     1 These examples assume that var1 has been assigned the value 3 and var2 has been assigned the value 4. Using the Equality Operators The standard equality operators (== and !=) compare two operands without regard to their type. The strict equality operators (=== and !==) perform equality comparisons on operands of the same type. Use strict equality operators if the operands must be of a specific type as well as value or if the exact type of the operands is important. Otherwise, use the standard equality operators, which allow you to compare the identity of two operands even if they are not of the same type. When type conversion is needed, JavaScript converts String, Number, Boolean, or Object operands as follows.  When comparing a number and a string, the string is converted to a number value. JavaScript attempts to convert the string numeric literal to a Number type value. First, a mathematical value is derived from the string numeric literal. Next, this value is rounded to nearest Number type value. If one of the operands is Boolean, the Boolean operand is converted to 1 if it is true and +0 if it is false. If an object is compared with a number or string, JavaScript attempts to return the default value for the object. Operators attempt to convert the object to a primitive value, a String or Number value, using the valueOf and toString methods of the objects. If this attempt to convert the object fails, a runtime error is generated. Note that an object is converted into a primitive if, and only if, its comparand is a primitive. If both operands are objects, they're compared as objects, and the equality test is true only if both refer the same object."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Logical_Operators","title":"Logical Operators","description":"Logical operators are typically used with Boolean (logical) values; when they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.    Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    The logical operators are described in the following table:    Operator Usage Description   Logical AND (&&) expr1 && expr2 Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if both operands are true; otherwise, returns false.   Logical OR (||) expr1 || expr2 Returns expr1 if it can be converted to true; otherwise, returns expr2. Thus, when used with Boolean values, || returns true if either operand is true; if both are false, returns false.   Logical NOT (!) !expr Returns false if its single operand can be converted to true; otherwise, returns true.    Examples of expressions that can be converted to false are those that evaluate to null, 0, the empty string (\"\"), or undefined. Even though the && and || operators can be used with operands that are not Boolean values, they can still be considered Boolean operators since their return values can always be converted to Boolean values. Short-Circuit Evaluation As logical expressions are evaluated left to right, they are tested for possible \"short-circuit\" evaluation using the following rules:  false && anything is short-circuit evaluated to false. true || anything is short-circuit evaluated to true.  The rules of logic guarantee that these evaluations are always correct. Note that the anything part of the above expressions is not evaluated, so any side effects of doing so do not take effect. For example, the following two functions are equivalent. function shortCircuitEvaluation() { \u00a0\u00a0doSomething() || doSomethingElse() }  function equivalentEvaluation() { \u00a0 var flag = doSomething(); \u00a0 if (!flag) { \u00a0 \u00a0 doSomethingElse(); \u00a0 } }  Short-Circuit Evaluation As logical expressions are evaluated left to right, they are tested for possible \"short-circuit\" evaluation using the following rules:  false && anything is short-circuit evaluated to false. true || anything is short-circuit evaluated to true.  The rules of logic guarantee that these evaluations are always correct. Note that the anything part of the above expressions is not evaluated, so any side effects of doing so do not take effect. For example, the following two functions are equivalent. function shortCircuitEvaluation() { \u00a0\u00a0doSomething() || doSomethingElse() }  function equivalentEvaluation() { \u00a0 var flag = doSomething(); \u00a0 if (!flag) { \u00a0 \u00a0 doSomethingElse(); \u00a0 } }  Backward Compatibility JavaScript 1.0 and 1.1 The && and || operators behave as follows:    Operator Usage Behavior   && expr1 && expr2 If the first operand (expr1) can be converted to false, the && operator returns false rather than the value of expr1.   || expr1 || expr2 If the first operand (expr1) can be converted to true, the || operator returns true rather than the value of expr1.    JavaScript 1.0 and 1.1 The && and || operators behave as follows:    Operator Usage Behavior   && expr1 && expr2 If the first operand (expr1) can be converted to false, the && operator returns false rather than the value of expr1.   || expr1 || expr2 If the first operand (expr1) can be converted to true, the || operator returns true rather than the value of expr1.    Examples Logical AND (&&) The following code shows examples of the && (logical AND) operator.  a1=true && true       \/\/ t && t returns true a2=true && false      \/\/ t && f returns false a3=false && true      \/\/ f && t returns false a4=false && (3 == 4)  \/\/ f && f returns false a5=\"Cat\" && \"Dog\"     \/\/ t && t returns Dog a6=false && \"Cat\"     \/\/ f && t returns false a7=\"Cat\" && false     \/\/ t && f returns false  Logical OR (||) The following code shows examples of the || (logical OR) operator.  o1=true || true       \/\/ t || t returns true o2=false || true      \/\/ f || t returns true o3=true || false      \/\/ t || f returns true o4=false || (3 == 4)  \/\/ f || f returns false o5=\"Cat\" || \"Dog\"     \/\/ t || t returns Cat o6=false || \"Cat\"     \/\/ f || t returns Cat o7=\"Cat\" || false     \/\/ t || f returns Cat  Logical NOT (!) The following code shows examples of the ! (logical NOT) operator.  n1=!true              \/\/\u00a0!t returns false n2=!false             \/\/\u00a0!f returns true n3=!\"Cat\"             \/\/\u00a0!t returns false  \u00a0 Logical AND (&&) The following code shows examples of the && (logical AND) operator.  a1=true && true       \/\/ t && t returns true a2=true && false      \/\/ t && f returns false a3=false && true      \/\/ f && t returns false a4=false && (3 == 4)  \/\/ f && f returns false a5=\"Cat\" && \"Dog\"     \/\/ t && t returns Dog a6=false && \"Cat\"     \/\/ f && t returns false a7=\"Cat\" && false     \/\/ t && f returns false  Logical OR (||) The following code shows examples of the || (logical OR) operator.  o1=true || true       \/\/ t || t returns true o2=false || true      \/\/ f || t returns true o3=true || false      \/\/ t || f returns true o4=false || (3 == 4)  \/\/ f || f returns false o5=\"Cat\" || \"Dog\"     \/\/ t || t returns Cat o6=false || \"Cat\"     \/\/ f || t returns Cat o7=\"Cat\" || false     \/\/ t || f returns Cat  Logical NOT (!) The following code shows examples of the ! (logical NOT) operator.  n1=!true              \/\/\u00a0!t returns false n2=!false             \/\/\u00a0!f returns true n3=!\"Cat\"             \/\/\u00a0!t returns false  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/String_Operators","title":"String Operators","description":"Summary  In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings. For example, \"my \" + \"string\" returns the string \"my string\". The shorthand assignment operator += can also be used to concatenate strings. For example, if the variable mystring has the value \"alpha\", then the expression mystring += \"bet\" evaluates to \"alphabet\" and assigns this value to mystring.    Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Member_Operators","title":"Member Operators","description":"Member operators provide access to an object's properties and methods. An object is actually an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of object members. It's typical when speaking of an object's members to make a distinction between properties and methods. However, the property\/method distinction is little more than a convention. A method is simply a property with a function as its value. There are two ways to access object members: dot notation and bracket notation (a.k.a. subscript operator). Note:\u00a0The ECMAScript specification labels these operators as \"property accessors\" rather than \"member operators\". Given the property\/method distinction above, however, we will use \"member\" as an inclusive term for properties and methods, for the sake of clarity.  Dot notation  get = object.property; object.property = set;  property must be a valid JavaScript identifier, i.e. a sequence of alphanumerical characters, also including the underscore (\"_\") and dollar sign (\"$\"), that cannot start with a number. For example, object.$1 is valid, while object.1 is not. Example:  document.createElement('pre');  Here, the method named \"createElement\" is retrieved from document and is called. Bracket notation  get = object[property_name]; object[property_name] = set;  property_name is a string. The string does not have to be a valid identifier; it can have any value, e.g. \"1foo\", \"!bar!\", or even \" \" (a space). Example:  document['createElement']('pre');  This does the exact same thing as the previous example. Property names Property names must be strings. This means that non-string objects cannot be used as keys in the object. Any non-string object, including a number, is typecasted into a string via the toString method. Examples:  var object = {}; object['1'] = 'value'; alert(object[1]);  This outputs \"value\", since 1 is typecasted into '1'.  var foo = {unique_prop: 1}, bar = {unique_prop: 2}, object = {}; object[foo] = 'value'; alert(object[bar]);  This also outputs \"value\", since both foo and bar are converted to the same string. In the SpiderMonkey JavaScript engine, this string would be \"[object Object]\". Method binding A method is not bound to the object that it is a method of. Specifically, this is not fixed in a method, i.e. this does not necessarily refer to an object containing the method. this is instead \"passed\" by the function call. See method binding. Note on eval JavaScript novices often make the mistake of using eval where the bracket notation can be used instead. For example, the following syntax is often seen in many scripts.  x = eval('document.form_name.' + strFormControl + '.value');  eval is slow and should be avoided whenever possible. It is better to use the bracket notation instead:  x = document.form_name[strFormControl].value;  \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Conditional_Operator","title":"Conditional Operator","description":"Summary  The conditional operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.    Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    Syntax   condition\u00a0? expr1\u00a0: expr2    Parameters   condition\u00a0 An expression that evaluates to true or false.   expr1, expr2\u00a0 Expressions with values of any type.   Description  If condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2. For example, to display a different message based on the value of the isMember variable, you could use this statement:   document.write (\"The fee is \" + (isMember\u00a0? \"$2.00\"\u00a0: \"$10.00\"))"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comma_Operator","title":"Comma Operator","description":"The comma operator evaluates both of its operands (from left to right)\u00a0and returns the value of the second operand.    Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    Syntax  expr1, expr2  Parameters  expr1, expr2\u00a0 Any expressions.  Description You can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a for loop. Example If a is a 2-dimensional array with 10 elements on a side, the following code uses the comma operator to increment two variables at once. The code prints the values of the diagonal elements in the array: \r           for (var i = 0, j = 9; i <= 9; i++, j--)   document.writeln(\"a[\" + i + \"][\" + j + \"] = \" + a[i][j]);"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/delete","title":"delete","description":"The delete operator deletes a property of an object.    Operator     Implemented in: JavaScript 1.2   ECMAScript Edition: ECMA-262 ? Edition   Syntax delete expression \u00a0 where expression should evaluate to a property reference, e.g.:  delete variableName delete objectExpression.property delete objectExpression[\"property\"] delete objectExpression[index] delete property \/\/ legal only within a with statement  If expression does not evaluate to a property, delete does nothing.Parameters  objectName The name of an object.   property The property to delete.   index An integer representing the array index to delete.  Returns Returns false only if the property exists and cannot be deleted. It returns true in all other cases. Description The fifth form is legal only within a with statement, to delete a property from an object. You can use the delete operator to delete variables declared implicitly but not those declared with the var or the function statement. If the delete operator succeeds, it removes the property from the object entirely, although this might reveal a similarly named property on a prototype of the object. Some object properties cannot be deleted. In the ECMA 262 specification these are marked as DontDelete. \r           x = 42;        \/\/ assigns as property of global object var y = 43;    \/\/ declares as variable myobj = new Number(); myobj.h = 4;    \/\/ create property h myobj.k = 5;    \/\/ create property k  delete x;       \/\/ returns true (can delete if declared implicitly) delete y;       \/\/ returns false (cannot delete if declared with var, property is DontDelete) delete Math.PI; \/\/ returns false (cannot delete most predefined properties, declared DontDelete) delete myobj.h; \/\/ returns true (can delete user-defined properties) with(myobj) {    delete k;    \/\/ returns true (equivalent to delete myobj.k) }  delete myobj;   \/\/ returns true (can delete if declared implicitly, equivalent to x)\r          You cannot delete a property on an object that it inherits from a prototype (although you can delete it directly on the prototype). \r           function Foo(){}  Foo.prototype.bar = 42;  var foo = new Foo();  delete foo.bar;           \/\/ but doesn't do anything  alert(foo.bar);           \/\/ alerts 42, property inherited  delete Foo.prototype.bar; \/\/ deletes property on prototype  alert(foo.bar);           \/\/ alerts \"undefined\", property no longer inherited\r          Deleting array elements When you delete an array element, the array length is not affected. For example, if you delete a[3], a[4] is still a[4] and a[3] is undefined. This holds even if you delete the last element of the array (delete a[a.length-1]). When the delete operator removes an array element, that element is no longer in the array. In the following example, trees[3] is removed with delete. \r           var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"]; delete trees[3]; if (3 in trees) {    \/\/ this does not get executed }\r          If you want an array element to exist but have an undefined value, use the undefined value instead of the delete operator. In the following example, trees[3] is assigned the value undefined, but the array element still exists: \r           var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"]; trees[3]=undefined; if (3 in trees) {    \/\/ this gets executed }\r          Deleting array elements When you delete an array element, the array length is not affected. For example, if you delete a[3], a[4] is still a[4] and a[3] is undefined. This holds even if you delete the last element of the array (delete a[a.length-1]). When the delete operator removes an array element, that element is no longer in the array. In the following example, trees[3] is removed with delete. \r           var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"]; delete trees[3]; if (3 in trees) {    \/\/ this does not get executed }\r          If you want an array element to exist but have an undefined value, use the undefined value instead of the delete operator. In the following example, trees[3] is assigned the value undefined, but the array element still exists: \r           var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"]; trees[3]=undefined; if (3 in trees) {    \/\/ this gets executed }\r          Cross-browser issues Although ECMAScript makes iteration order of objects implementation-dependent, it may appear that all major browsers support an iteration order based on the earliest added property coming first (at least for properties not on the prototype). However, in the case of Internet Explorer, when one uses delete on a property, some confusing behavior results, preventing other browsers from using simple objects like object literals as ordered associative arrays. In Explorer, while the property value is indeed set to undefined, if one later adds back a property with the same name, the property will be iterated in its old position--not at the end of the iteration sequence as one might expect after having deleted the property and then added it back. So if you want to simulate an ordered associative array in a cross-browser environment, you are forced to either use two separate arrays (one for the keys and the other for the values), or build an array of single-property objects, etc."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/get","title":"get","description":"Binds an object property to a function that will be called when that property is looked up. Syntax {get prop() { .\u00a0.\u00a0. } } Parameters  prop the name of the property to bind to the given function  Description Sometimes it is desirable to allow access to a property that returns a dynamically computed value, or you may want reflect the status of an internal variable without requiring the use of explicit method calls. In JavaScript, this can be accomplished with the use of a getter. It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it is possible to use a getter and a setter in conjunction to create a type of pseudo-property.  JavaScript 1.8.5 noteStarting in JavaScript 1.8.5, the get operator:        can have an identifier which is either a number or a string;     must have exactly zero parameters (see        Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments       for more information);     must not appear in an object literal with another get       or with a data entry for the same property ({ get x() { }, get x() { } }       and { x: ..., get x() { } } are forbidden).    A getter can be removed using the delete operator. Examples Defining a getter with the get operator This will create a pseudo-property latest of object o that will return the most recent entry into o.log: \r           var o = {   get latest () {     if (this.log.length > 0) {       return this.log[this.log.length - 1];     }     else {       return null;     }   },   log: [] }\r          Note that attempting to assign a value to latest will not change it. Deleting a getter using the delete operator \r           delete o.latest;\r          Defining a getter with the get operator This will create a pseudo-property latest of object o that will return the most recent entry into o.log: \r           var o = {   get latest () {     if (this.log.length > 0) {       return this.log[this.log.length - 1];     }     else {       return null;     }   },   log: [] }\r          Note that attempting to assign a value to latest will not change it. Deleting a getter using the delete operator \r           delete o.latest;\r          Browser compatibility Based on Robert Nyman's page No support (notably in IE6-8) means that the script will trigger a syntax error.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 2.0 (1.8.1)  1 9 9.5 3         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    See also  delete set __defineGetter__ __defineSetter__ Defining Getters and Setters in JavaScript Guide"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/in","title":"in","description":"The in operator returns true if the specified property is in the specified object.    Operator   Implemented in: JavaScript 1.4    Syntax  prop in objectName  Parameters  prop A string or numeric expression representing a property name or array index.   objectName Name of an object.  Description The following examples show some uses of the in operator.  \/\/ Arrays var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); 0 in trees        \/\/ returns true 3 in trees        \/\/ returns true 6 in trees        \/\/ returns false \"bay\" in trees    \/\/ returns false (you must specify the index number,                   \/\/ not the value at that index) \"length\" in trees \/\/ returns true (length is an Array property)  \/\/ Predefined objects \"PI\" in Math          \/\/ returns true  \/\/ Custom objects var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; \"make\" in mycar  \/\/ returns true \"model\" in mycar \/\/ returns true  You must specify an object on the right side of the in operator. For example, you can specify a string created with the String constructor, but you cannot specify a string literal.  var color1 = new String(\"green\"); \"length\" in color1 \/\/ returns true var color2 = \"coral\"; \"length\" in color2 \/\/ generates an error (color is not a String object)  Using in with deleted or undefined properties If you delete a property with the delete operator, the in operator returns false for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; delete mycar.make; \"make\" in mycar;  \/\/ returns false  var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); delete trees[3]; 3 in trees; \/\/ returns false  If you set a property to undefined but do not delete it, the in operator returns true for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; mycar.make = undefined; \"make\" in mycar;  \/\/ returns true   var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); trees[3] = undefined; 3 in trees; \/\/ returns true  Inherited properties The in operator returns true for properties in the prototype chain.  \"toString\" in {}; \/\/ returns true Using in with deleted or undefined properties If you delete a property with the delete operator, the in operator returns false for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; delete mycar.make; \"make\" in mycar;  \/\/ returns false  var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); delete trees[3]; 3 in trees; \/\/ returns false  If you set a property to undefined but do not delete it, the in operator returns true for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; mycar.make = undefined; \"make\" in mycar;  \/\/ returns true   var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); trees[3] = undefined; 3 in trees; \/\/ returns true  Inherited properties The in operator returns true for properties in the prototype chain.  \"toString\" in {}; \/\/ returns true See also  delete Object.prototype.hasOwnProperty"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/instanceof","title":"instanceof","description":"The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.    Operator     Implemented in: JavaScript 1.4   ECMAScript Edition: ECMA-262 ? Edition    Syntax object instanceof constructorParameters  object The object to test.   constructor Function to test against  Description The instanceof operator tests presence of constructor.prototype in object prototype chain. \r           function C(){} \/\/ defining a constructor function D(){} \/\/ defining another constructor  var o = new C(); o instanceof C; \/\/ true, because: Object.getPrototypeOf(o) === C.prototype o instanceof D; \/\/ false, because D.prototype is nowhere in o's prototype chain o instanceof Object; \/\/ true, because: C.prototype instanceof Object \/\/ true  C.prototype = {}; var o2 = new C(); o2 instanceof C; \/\/ true o instanceof C; \/\/ false, because C.prototype is nowhere in o's prototype chain anymore  D.prototype = Object.getPrototypeOf(o); o instanceof D; \/\/ true\r          Note that if the value of an instanceof test can change based on changes to the prototype property of constructors, it cannot be changed by changing an object prototype, because changing an object prototype is not possible in standard ECMAScript. It is however possible using the non-standard __proto__ pseudo-property. instanceof and multiple context (e.g. frames or windows) Different scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers In code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test. Unlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope. instanceof and multiple context (e.g. frames or windows) Different scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers In code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test. Unlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope. Examples Also see the examples for throw. Example: Determining whether theDay is a Date object The following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.  var theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995 if (theDay instanceof Date) {   print(\"theDay is a Date object\");   \/\/ whatever else... }   Example: Demonstrating that String and Date are of type Object The following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object). \r           var myString = new String(); var myDate = new Date();  myString instanceof String; \/\/ returns true myString instanceof Object; \/\/ returns true myString instanceof Date;   \/\/ returns false  myDate instanceof Date;     \/\/ returns true myDate instanceof Object;   \/\/ returns true myDate instanceof String;   \/\/ returns false\r          Example: Demonstrating that mycar is of type Car and type Object The following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object. \r           function Car(make, model, year) {   this.make = make;   this.model = model;   this.year = year; } var mycar = new Car(\"Honda\", \"Accord\", 1998); var a = mycar instanceof Car;    \/\/ returns true var b = mycar instanceof Object; \/\/ returns true\r          Example: Determining whether theDay is a Date object The following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.  var theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995 if (theDay instanceof Date) {   print(\"theDay is a Date object\");   \/\/ whatever else... }   Example: Demonstrating that String and Date are of type Object The following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object). \r           var myString = new String(); var myDate = new Date();  myString instanceof String; \/\/ returns true myString instanceof Object; \/\/ returns true myString instanceof Date;   \/\/ returns false  myDate instanceof Date;     \/\/ returns true myDate instanceof Object;   \/\/ returns true myDate instanceof String;   \/\/ returns false\r          Example: Demonstrating that mycar is of type Car and type Object The following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object. \r           function Car(make, model, year) {   this.make = make;   this.model = model;   this.year = year; } var mycar = new Car(\"Honda\", \"Accord\", 1998); var a = mycar instanceof Car;    \/\/ returns true var b = mycar instanceof Object; \/\/ returns true"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/set","title":"set","description":"Binds an object property to a function to be called when there is an attempt to set that property. Syntax {set prop(val) { .\u00a0.\u00a0. }} Parameters  prop the name of the property to bind to the given function   val an alias for the variable that holds the value attempted to be assigned to prop  Description In JavaScript, a setter can be used to execute a function whenever a specified property is attempted to be changed. Setters are most often used in conjunction with getters to create a type of pseudo-property. It is not possible to simultaneously have a setter on a property that holds an actual value.  JavaScript 1.8.1 noteStarting in JavaScript 1.8.1, setters are no longer called when setting properties in object and array initializers.  JavaScript 1.8.5 noteStarting in JavaScript 1.8.5, set operator:        can have an identifier which is either a number or a string;     must have exactly one parameter (see        Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments       for more information);     must not appear in an object literal with another set       or with a data entry for the same property ({ set x(v) { }, set x(v) { } }       and { x: ..., set x(v) { } } are forbidden).    A setter can be removed using the delete operator.Examples Defining a setter with the set operator This will define a pseudo-property current of object o that, when assigned a value, will update log with that value: \r           var o = {   set current (str) {     return this.log[this.log.length] = str;   },   log: [] }\r          Note that current is not defined and any attempts to access it will result in undefined Removing a setter with the delete operator \r           delete o.current;\r          Defining a setter with the set operator This will define a pseudo-property current of object o that, when assigned a value, will update log with that value: \r           var o = {   set current (str) {     return this.log[this.log.length] = str;   },   log: [] }\r          Note that current is not defined and any attempts to access it will result in undefined Removing a setter with the delete operator \r           delete o.current;\r          Browser compatibility Based on Robert Nyman's page No support (notably in IE6-8) means that the script will trigger a syntax error.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 2.0 (1.8.1)  1 9 9.5 3         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    See also  delete get __defineGetter__ __defineSetter__ Defining Getters and Setters in JavaScript Guide"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/new","title":"new","description":"The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.    Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262    Syntax new constructor[([arguments])] Parameters  constructor A function that specifies the type of the object instance.   arguments A list of values that the constructor will be called with.  Description Creating a user-defined object requires two steps:  Define the object type by writing a function. Create an instance of the object with new.  To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself another object. See the examples below. When the code new foo(...) is executed, the following things happen:  A new object is created, inheriting from foo.prototype. The constructor function foo is called with the specified arguments and this bound to the newly created object. new foo is equivalent to new foo(), i.e. if no argument list is specified, foo is called without arguments. The object returned by the constructor function becomes the result of the whole new expression. If the constructor function doesn't explicitly return an object, the object created in step 1 is used instead. (Normally constructors don't return a value, but they can choose to do so if they want to override the normal object creation process.)  You can always add a property to a previously defined object. For example, the statement car1.color = \"black\" adds a property color to car1, and assigns it a value of \"black\". However, this does not affect any other objects. To add the new property to all objects of the same type, you must add the property to the definition of the car object type. You can add a shared property to a previously defined object type by using the Function.prototype property. This defines a property that is shared by all objects created with that function, rather than by just one instance of the object type. The following code adds a color property with value null to all objects of type car, and then overwrites that value with the string \"black\" only in the instance object car1. For more information, see prototype.   function Car() {}  car1 = new Car()    alert(car1.color)           \/\/ undefined    Car.prototype.color = null  alert(car1.color)           \/\/ null    car1.color = \"black\"  alert(car1.color)           \/\/ black  Examples Example: Object type and object instance Suppose you want to create an object type for cars. You want this type of object to be called car, and you want it to have properties for make, model, and year. To do this, you would write the following function:  function car(make, model, year) {    this.make = make;    this.model = model;    this.year = year; }  Now you can create an object called mycar as follows:  var mycar = new car(\"Eagle\", \"Talon TSi\", 1993);  This statement creates mycar and assigns it the specified values for its properties. Then the value of mycar.make is the string \"Eagle\", mycar.year is the integer 1993, and so on. You can create any number of car objects by calls to new. For example:  var kenscar = new car(\"Nissan\", \"300ZX\", 1992);  Example: Object property that is itself another object Suppose you define an object called person as follows:  function person(name, age, sex) {    this.name = name;    this.age = age;    this.sex = sex; }  And then instantiate two new person objects as follows:  var rand = new person(\"Rand McNally\", 33, \"M\"); var ken = new person(\"Ken Jones\", 39, \"M\");  Then you can rewrite the definition of car to include an owner property that takes a person object, as follows:  function car(make, model, year, owner) {    this.make = make;    this.model = model;    this.year = year;    this.owner = owner; }  To instantiate the new objects, you then use the following:  var car1 = new car(\"Eagle\", \"Talon TSi\", 1993, rand); var car2 = new car(\"Nissan\", \"300ZX\", 1992, ken);  Instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects rand and ken as the parameters for the owners. To find out the name of the owner of car2, you can access the following property:  car2.owner  \u00a0 Example: Object type and object instance Suppose you want to create an object type for cars. You want this type of object to be called car, and you want it to have properties for make, model, and year. To do this, you would write the following function:  function car(make, model, year) {    this.make = make;    this.model = model;    this.year = year; }  Now you can create an object called mycar as follows:  var mycar = new car(\"Eagle\", \"Talon TSi\", 1993);  This statement creates mycar and assigns it the specified values for its properties. Then the value of mycar.make is the string \"Eagle\", mycar.year is the integer 1993, and so on. You can create any number of car objects by calls to new. For example:  var kenscar = new car(\"Nissan\", \"300ZX\", 1992);  Example: Object property that is itself another object Suppose you define an object called person as follows:  function person(name, age, sex) {    this.name = name;    this.age = age;    this.sex = sex; }  And then instantiate two new person objects as follows:  var rand = new person(\"Rand McNally\", 33, \"M\"); var ken = new person(\"Ken Jones\", 39, \"M\");  Then you can rewrite the definition of car to include an owner property that takes a person object, as follows:  function car(make, model, year, owner) {    this.make = make;    this.model = model;    this.year = year;    this.owner = owner; }  To instantiate the new objects, you then use the following:  var car1 = new car(\"Eagle\", \"Talon TSi\", 1993, rand); var car2 = new car(\"Nissan\", \"300ZX\", 1992, ken);  Instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects rand and ken as the parameters for the owners. To find out the name of the owner of car2, you can access the following property:  car2.owner  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/this","title":"this","description":"Introduction A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode. In general, the object bound to this in the current scope is determined by how the current function was called, it can't be set by assignment during execution, and it can be different each time the function is called. ES5 introduced the bind method to fix a function's this regardless of how it's called.Global context In the global context (outside of any function), this refers to the global object, whether in strict mode or not. console.log(this.document === document); \/\/ true  \/\/ In web browsers, the window object is also the global object: console.log(this === window); \/\/ true  this.a = 37; console.log(window.a); \/\/ 37  Function context When the this keyword occurs inside a function, its value depends on how the function is called. Simple call \r           function f1(){   return this; }  f1() === window; \/\/ global object   function f2(){   \"use strict\"; \/\/ see strict mode   return this; }  f2() === undefined;\r          Note: In the second example, this should be undefined, because f2 was called without providing any base (e.g. window.f2()). This feature wasn't implemented in some browsers when they first started to support strict mode; because of this, they incorrectly returned the window object. As an object method When a function is called as a method of an object, its this is set to the object the method is called on. In the following example, when o.f() is invoked, inside the function this is bound to the o object. \r           var o = {   prop: 37,   f: function() {     return this.prop;   } };  console.log(o.f()); \/\/ logs 37\r          Note that this behavior is not at all affected by how or where the function was defined. In the previous example, we defined the function inline as the f member during the definition of o.\u00a0 However, we could have just as easily defined the function first and later attached it to o.f. Doing so results in the same behavior: \r           var o = {prop: 37};  function independent() {   return this.prop; }  o.f = independent;  console.log(o.f()); \/\/ logs 37\r          This demonstrates that it matters only that the function was invoked from the f member of o. Similarly, the this binding is only affected by the most immediate member reference. In the following example, when we invoke the function, we call it as a method g of the object o.b. This time during execution, this inside the function will refer to o.b. The fact that the object is itself a member of o has no consequence; the most immediate reference is all that matters. \r           o.b = {g: independent, prop: 42}; console.log(o.b.g()); \/\/ logs 42\r          ... on the prototype chain The same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method was on the object. \r           var o = {f:function(){ return this.a + this.b; }}; var p = Object.create(o); p.a = 1; p.b = 4;  console.log(p.f()); \/\/ 5\r          In this example, the object assigned to the variable p doesn't have its own f property, it inherits it from its prototype. But it doesn't matter that the lookup for f eventually finds a member with that name on o; the lookup began as a reference to p.f, so this inside the function takes the value of the object referred to as p. That is, since f is called as a method of p, its this refers to p. This is an interesting feature of JavaScript's prototype inheritance. ... or as a getter or setter Again, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten. \r           function modulus(){   return Math.sqrt(this.re * this.re + this.im * this.im); }  var o = {   re: 1,   im: -1,   get phase(){     return Math.atan2(this.im, this.re);   } };  Object.defineProperty(o, 'modulus', {get: modulus, enumerable:true, configurable:true});  console.log(o.phase, o.modulus); \/\/ logs -0.78 1.4142\r          As a constructor When a function is used as a constructor (with the new keyword), its this is bound to new object being constructed, unless execution of the constructor results in the JavaScript engine encountering a return statement where the value to be returned is an object. \r           \/*  * Constructors work like this:  *  * function MyConstructor(){  *   \/\/ Actual function body code goes here.  Create properties on |this| as  *   \/\/ desired by assigning to them.  E.g.,  *   this.fum = \"nom\";  *   \/\/ et cetera...  *  *   \/\/ If the function has a return statement that returns an object, that  *   \/\/ object will be the result of the |new| expression.  Otherwise, the  *   \/\/ result of the expression is the object currently bound to |this|  *   \/\/ (i.e., the common case most usually seen).  * }  *\/  function C(){   this.a = 37; }  var o = new C(); console.log(o.a); \/\/ logs 37   function C2(){   this.a = 37;   return {a:38}; }  o = new C2(); console.log(o.a); \/\/ logs 38\r          In the last example (C2), because an object was returned during construction, the new object that this was bound to simply gets discarded. (This essentially makes the statement \"this.a = 37;\" dead code. It's not exactly dead, because it gets executed, but it can be eliminated with no outside effects.) call and apply Where a function uses the this keyword in its body, its value can be bound to a particular object during execution using the call or apply methods that all functions inherit from Function.prototype. \r           function add(c, d){   return this.a + this.b + c + d; }  var o = {a:1, b:3};  \/\/ The first parameter is the object to use as 'this', subsequent parameters are passed as  \/\/ arguments in the function call add.call(o, 5, 7); \/\/ 1 + 3 + 5 + 7 = 16  \/\/ The first parameter is the object to use as 'this', the second is an array whose \/\/ members are used as the arguments in the function call add.apply(o, [10, 20]); \/\/ 1 + 3 + 10 + 20 = 34\r          Bound functions ECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject) creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used. \r           function f(){   return this.a; }  var g = f.bind({a:\"azerty\"}); console.log(g()); \/\/ azerty  var o = {a:37, f:f, g:g}; console.log(o.f(), o.g()); \/\/ 37, azerty\r          As a DOM event handler When a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener). \r           \/\/ When called as a listener, turns the related element blue function bluify(e){   console.log(this === e.currentTarget); \/\/ Always true   console.log(this === e.target);        \/\/ true when currentTarget and target are the same object   this.style.backgroundColor = '#A5D9F3'; }  \/\/ Get a list of every element in the document var elements = document.getElementsByTagName('*');  \/\/ Add bluify as a click listener so when the element is clicked on, \/\/ it turns blue for(var i=0 ; i<elements.length ; i++){   elements[i].addEventListener('click', bluify, false); }\r          Simple call \r           function f1(){   return this; }  f1() === window; \/\/ global object   function f2(){   \"use strict\"; \/\/ see strict mode   return this; }  f2() === undefined;\r          Note: In the second example, this should be undefined, because f2 was called without providing any base (e.g. window.f2()). This feature wasn't implemented in some browsers when they first started to support strict mode; because of this, they incorrectly returned the window object. As an object method When a function is called as a method of an object, its this is set to the object the method is called on. In the following example, when o.f() is invoked, inside the function this is bound to the o object. \r           var o = {   prop: 37,   f: function() {     return this.prop;   } };  console.log(o.f()); \/\/ logs 37\r          Note that this behavior is not at all affected by how or where the function was defined. In the previous example, we defined the function inline as the f member during the definition of o.\u00a0 However, we could have just as easily defined the function first and later attached it to o.f. Doing so results in the same behavior: \r           var o = {prop: 37};  function independent() {   return this.prop; }  o.f = independent;  console.log(o.f()); \/\/ logs 37\r          This demonstrates that it matters only that the function was invoked from the f member of o. Similarly, the this binding is only affected by the most immediate member reference. In the following example, when we invoke the function, we call it as a method g of the object o.b. This time during execution, this inside the function will refer to o.b. The fact that the object is itself a member of o has no consequence; the most immediate reference is all that matters. \r           o.b = {g: independent, prop: 42}; console.log(o.b.g()); \/\/ logs 42\r          ... on the prototype chain The same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method was on the object. \r           var o = {f:function(){ return this.a + this.b; }}; var p = Object.create(o); p.a = 1; p.b = 4;  console.log(p.f()); \/\/ 5\r          In this example, the object assigned to the variable p doesn't have its own f property, it inherits it from its prototype. But it doesn't matter that the lookup for f eventually finds a member with that name on o; the lookup began as a reference to p.f, so this inside the function takes the value of the object referred to as p. That is, since f is called as a method of p, its this refers to p. This is an interesting feature of JavaScript's prototype inheritance. ... or as a getter or setter Again, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten. \r           function modulus(){   return Math.sqrt(this.re * this.re + this.im * this.im); }  var o = {   re: 1,   im: -1,   get phase(){     return Math.atan2(this.im, this.re);   } };  Object.defineProperty(o, 'modulus', {get: modulus, enumerable:true, configurable:true});  console.log(o.phase, o.modulus); \/\/ logs -0.78 1.4142\r          ... on the prototype chain The same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method was on the object. \r           var o = {f:function(){ return this.a + this.b; }}; var p = Object.create(o); p.a = 1; p.b = 4;  console.log(p.f()); \/\/ 5\r          In this example, the object assigned to the variable p doesn't have its own f property, it inherits it from its prototype. But it doesn't matter that the lookup for f eventually finds a member with that name on o; the lookup began as a reference to p.f, so this inside the function takes the value of the object referred to as p. That is, since f is called as a method of p, its this refers to p. This is an interesting feature of JavaScript's prototype inheritance. ... or as a getter or setter Again, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten. \r           function modulus(){   return Math.sqrt(this.re * this.re + this.im * this.im); }  var o = {   re: 1,   im: -1,   get phase(){     return Math.atan2(this.im, this.re);   } };  Object.defineProperty(o, 'modulus', {get: modulus, enumerable:true, configurable:true});  console.log(o.phase, o.modulus); \/\/ logs -0.78 1.4142\r          As a constructor When a function is used as a constructor (with the new keyword), its this is bound to new object being constructed, unless execution of the constructor results in the JavaScript engine encountering a return statement where the value to be returned is an object. \r           \/*  * Constructors work like this:  *  * function MyConstructor(){  *   \/\/ Actual function body code goes here.  Create properties on |this| as  *   \/\/ desired by assigning to them.  E.g.,  *   this.fum = \"nom\";  *   \/\/ et cetera...  *  *   \/\/ If the function has a return statement that returns an object, that  *   \/\/ object will be the result of the |new| expression.  Otherwise, the  *   \/\/ result of the expression is the object currently bound to |this|  *   \/\/ (i.e., the common case most usually seen).  * }  *\/  function C(){   this.a = 37; }  var o = new C(); console.log(o.a); \/\/ logs 37   function C2(){   this.a = 37;   return {a:38}; }  o = new C2(); console.log(o.a); \/\/ logs 38\r          In the last example (C2), because an object was returned during construction, the new object that this was bound to simply gets discarded. (This essentially makes the statement \"this.a = 37;\" dead code. It's not exactly dead, because it gets executed, but it can be eliminated with no outside effects.) call and apply Where a function uses the this keyword in its body, its value can be bound to a particular object during execution using the call or apply methods that all functions inherit from Function.prototype. \r           function add(c, d){   return this.a + this.b + c + d; }  var o = {a:1, b:3};  \/\/ The first parameter is the object to use as 'this', subsequent parameters are passed as  \/\/ arguments in the function call add.call(o, 5, 7); \/\/ 1 + 3 + 5 + 7 = 16  \/\/ The first parameter is the object to use as 'this', the second is an array whose \/\/ members are used as the arguments in the function call add.apply(o, [10, 20]); \/\/ 1 + 3 + 10 + 20 = 34\r          Bound functions ECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject) creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used. \r           function f(){   return this.a; }  var g = f.bind({a:\"azerty\"}); console.log(g()); \/\/ azerty  var o = {a:37, f:f, g:g}; console.log(o.f(), o.g()); \/\/ 37, azerty\r          As a DOM event handler When a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener). \r           \/\/ When called as a listener, turns the related element blue function bluify(e){   console.log(this === e.currentTarget); \/\/ Always true   console.log(this === e.target);        \/\/ true when currentTarget and target are the same object   this.style.backgroundColor = '#A5D9F3'; }  \/\/ Get a list of every element in the document var elements = document.getElementsByTagName('*');  \/\/ Add bluify as a click listener so when the element is clicked on, \/\/ it turns blue for(var i=0 ; i<elements.length ; i++){   elements[i].addEventListener('click', bluify, false); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/typeof","title":"typeof","description":"The typeof operator returns a string indicating the type of the unevaluated operand.    Operator     Implemented in: JavaScript 1.1   ECMA Version: ECMA-262 (and ECMA-357 for E4X objects)    Syntax The typeof operator is used in either of the following ways:  typeof operand typeof (operand)  Parameters operand is the string, variable, keyword, or object for which the type is to be returned. The parentheses are optional. Description This table summarizes the possible return values of typeof:    Type Result     Undefined \"undefined\"   Null \"object\"   Boolean \"boolean\"   Number \"number\"   String \"string\"   Host object (provided by the JS environment) Implementation-dependent   Function object (implements [[Call]] in ECMA-262 terms) \"function\"   E4X\u00a0XML\u00a0object \"xml\"   E4X\u00a0XMLList object \"xml\"   Any other object \"object\"    Examples Normal cases \r           \/\/ Numbers typeof 37 === 'number'; typeof 3.14 === 'number'; typeof Math.LN2 === 'number'; typeof Infinity === 'number'; typeof NaN === 'number'; \/\/ Despite being \"Not-A-Number\" typeof Number(1) === 'number'; \/\/ but never use this form!  \/\/ Strings typeof \"\" === 'string'; typeof \"bla\" === 'string'; typeof (typeof 1) === 'string'; \/\/ typeof always return a string typeof String(\"abc\") === 'string'; \/\/ but never use this form!  \/\/ Booleans typeof true === 'boolean'; typeof false === 'boolean'; typeof Boolean(true) === 'boolean'; \/\/ but never use this form!  \/\/ Undefined typeof undefined === 'undefined'; typeof blabla === 'undefined'; \/\/ an undefined variable  \/\/ Objects typeof {a:1} === 'object'; typeof [1, 2, 4] === 'object'; \/\/ use Array.isArray or Object.prototype.toString.call to differentiate regular objects from arrays typeof new Date() === 'object';  typeof new Boolean(true) === 'object' \/\/ this is confusing. Don't use! typeof new Number(1) === 'object' \/\/ this is confusing. Don't use! typeof new String(\"abc\") === 'object';  \/\/ this is confusing. Don't use!  \/\/ Functions typeof function(){} === 'function'; typeof Math.sin === 'function';\r          null \r           typeof null === 'object'; \/\/ This stands since the beginning of JavaScript\r          In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. null was represented as the NULL pointer (0x00 is most platforms). Consequently, null had 0 as type tag, hence the bogus typeof return value. (reference needed) This is planned on being fixed in the next version of ECMAScript (which will be available via an opt-in). It will result in typeof null === 'null'.Regular expressions Callable regular expressions were a non-standard addition in some browsers (need reference to say which). \r           typeof \/s\/ === 'function'; \/\/ Chrome 1-12 ... \/\/ Non-conform to ECMAScript 5.1 typeof \/s\/ === 'object'; \/\/ Firefox 5+ ...    \/\/ Conform to ECMAScript 5.1\r          Other quirks alert in old Internet Explorer versions On IE 6, 7 and 8, typeof alert === 'object'Normal cases \r           \/\/ Numbers typeof 37 === 'number'; typeof 3.14 === 'number'; typeof Math.LN2 === 'number'; typeof Infinity === 'number'; typeof NaN === 'number'; \/\/ Despite being \"Not-A-Number\" typeof Number(1) === 'number'; \/\/ but never use this form!  \/\/ Strings typeof \"\" === 'string'; typeof \"bla\" === 'string'; typeof (typeof 1) === 'string'; \/\/ typeof always return a string typeof String(\"abc\") === 'string'; \/\/ but never use this form!  \/\/ Booleans typeof true === 'boolean'; typeof false === 'boolean'; typeof Boolean(true) === 'boolean'; \/\/ but never use this form!  \/\/ Undefined typeof undefined === 'undefined'; typeof blabla === 'undefined'; \/\/ an undefined variable  \/\/ Objects typeof {a:1} === 'object'; typeof [1, 2, 4] === 'object'; \/\/ use Array.isArray or Object.prototype.toString.call to differentiate regular objects from arrays typeof new Date() === 'object';  typeof new Boolean(true) === 'object' \/\/ this is confusing. Don't use! typeof new Number(1) === 'object' \/\/ this is confusing. Don't use! typeof new String(\"abc\") === 'object';  \/\/ this is confusing. Don't use!  \/\/ Functions typeof function(){} === 'function'; typeof Math.sin === 'function';\r          null \r           typeof null === 'object'; \/\/ This stands since the beginning of JavaScript\r          In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. null was represented as the NULL pointer (0x00 is most platforms). Consequently, null had 0 as type tag, hence the bogus typeof return value. (reference needed) This is planned on being fixed in the next version of ECMAScript (which will be available via an opt-in). It will result in typeof null === 'null'.Regular expressions Callable regular expressions were a non-standard addition in some browsers (need reference to say which). \r           typeof \/s\/ === 'function'; \/\/ Chrome 1-12 ... \/\/ Non-conform to ECMAScript 5.1 typeof \/s\/ === 'object'; \/\/ Firefox 5+ ...    \/\/ Conform to ECMAScript 5.1\r          Other quirks alert in old Internet Explorer versions On IE 6, 7 and 8, typeof alert === 'object'alert in old Internet Explorer versions On IE 6, 7 and 8, typeof alert === 'object'Specification ECMA-262 section 11.4.3"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/void","title":"void","description":"Syntax void expression The void operator evaluates the given expression and then returns undefined.    Operator   Implemented in: JavaScript 1.1   ECMA Version: ECMA-262    Uses This operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired. The void operator is often used merely to obtain the undefined primitive value, usually using \"void(0)\" (which is equivalent to \"void 0\"). In these cases, the global variable undefined can be used instead (assuming it has not been assigned to a non-default value). JavaScript URIs When a browser follows a javascript: URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is undefined. The void operator can be used to return undefined. For example:  <a href=\"javascript:void(0);\">Click here to do nothing<\/a> <a href=\"javascript:void(document.body.style.backgroundColor='green');\">Click here for green background<\/a>  Note, however, that the javascript: pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Operator_Precedence","title":"Operator Precedence","description":"Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first. A common example:  3 + 4 * 5 \/\/ returns 23\t   The multiplication operator (\"*\") has higher precedence than the addition operator (\"+\") and thus will be evaluated first. Associativity Associativity determines the order in which operators of the same precedence are processed. For example, consider an expression:  a OP b OP c  Left-associativity (left-to-right) means that it is processed as (a OP b) OP c, while right-associativity (right-to-left) means it is interpreted as a OP (b OP c). Assignment operators are right-associative, so you can write:  a = b = 5;  with the expected result that a and b get the value 5. This is because the assignment operator returns the value that it assigned. First, b is set to 5. Then the a is set to the value of b. Table The following table is ordered from highest (1) to lowest (17) precedence.    Precedence Operator type Associativity Individual operators   1 member left-to-right .   []   new right-to-left new   2 function call left-to-right ()   3 increment n\/a ++   decrement n\/a --   4 logical-not right-to-left !   bitwise not right-to-left ~   unary + right-to-left +   unary negation right-to-left -   typeof right-to-left typeof   void right-to-left void   delete right-to-left delete   5 multiplication left-to-right *   division left-to-right \/   modulus left-to-right    6 addition left-to-right +   subtraction left-to-right -   7 bitwise shift left-to-right <<   >>   >>>   8 relational left-to-right <   <=   >   >=   in left-to-right in   instanceof left-to-right instanceof   9 equality left-to-right ==   !=   ===   !==   10 bitwise-and left-to-right &   11 bitwise-xor left-to-right ^   12 bitwise-or left-to-right |   13 logical-and left-to-right &&   14 logical-or left-to-right ||   15 conditional right-to-left ?:   16 assignment right-to-left =   +=   -=   *=   \/=   %=   <<=   >>=   >>>=   &=   ^=   |=   17 comma left-to-right ,"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/parse","title":"Date.parse","description":"Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  Date.parse(dateString)  Parameters  dateString A string representing an RFC822 or ISO 8601 date. Description The parse method takes a date string (such as \"Dec 25, 1995\") and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. The local time zone is used to interpret arguments that do not contain time zone information. This function is useful for setting date values based on string values, for example in conjunction with the setTime method and the Date object. Given a string representing a time, parse returns the time value. It accepts the RFC822 \/ IETF date syntax (RFC 1123 Section 5.2.14 and elsewhere), e.g. \"Mon, 25 Dec 1995 13:30:00 GMT\". It understands the continental US time-zone abbreviations, but for general use, use a time-zone offset, for example, \"Mon, 25 Dec 1995 13:30:00 GMT+0430\" (4 hours, 30 minutes east of the Greenwich meridian). If you do not specify a time zone, the local time zone is assumed. GMT and UTC are considered equivalent.  JavaScript 1.8.5 noteA subset of ISO 8601 formatted date strings can now also be parsed. Alternatively, the date\/time string may be in ISO 8601 format. Starting with JavaScript 1.8.5 \/ Firefox 4, a subset of ISO 8601 is supported. For example, \"2011-10-10\" (just date) or \"2011-10-10T14:48:00 (date and time) can be passed and parsed. Timezones in ISO dates are not yet supported, so e.g. \"2011-10-10T14:48:00+0200\" (with timezone) does not give the intended result yet. Note that while time zone specifiers are used during date string parsing to properly interpret the argument, they do not affect the value returned, which is always the number of milliseconds between January 1, 1970 00:00:00 UTC and the point in time represented by the argument. Because parse is a static method of Date, you always use it as Date.parse(), rather than as a method of a Date object you created.Examples Example: Using parse If IPOdate is an existing Date object, then you can set it to August 9, 1995 (local time) as follows: \r           IPOdate.setTime(Date.parse(\"Aug 9, 1995\"));\r          Some other examples: \r           \/\/ Returns 807937200000 in time zone GMT-0300, and other values in other \/\/ timezones, since the argument does not specify a time zone. Date.parse(\"Aug 9, 1995\");\r          \r           \/\/ Returns 807926400000 no matter the local time zone. Date.parse(\"Wed, 09 Aug 1995 00:00:00 GMT\");\r          \r           \/\/ Returns 807937200000 in timezone GMT-0300, and other values in other \/\/ timezones, since there is no time zone specifier in the argument. Date.parse(\"Wed, 09 Aug 1995 00:00:00\");\r          \r           \/\/ Returns 0 no matter the local time zone. Date.parse(\"Thu, 01 Jan 1970 00:00:00 GMT\");\r          \r           \/\/ Returns 14400000 in timezone GMT-0400, and other values in other  \/\/ timezones, since there is no time zone specifier in the argument. Date.parse(\"Thu, 01 Jan 1970 00:00:00\");\r          \r           \/\/ Returns 14400000 no matter the local time zone. Date.parse(\"Thu, 01 Jan 1970 00:00:00 GMT-0400\");\r          Example: Using parse If IPOdate is an existing Date object, then you can set it to August 9, 1995 (local time) as follows: \r           IPOdate.setTime(Date.parse(\"Aug 9, 1995\"));\r          Some other examples: \r           \/\/ Returns 807937200000 in time zone GMT-0300, and other values in other \/\/ timezones, since the argument does not specify a time zone. Date.parse(\"Aug 9, 1995\");\r          \r           \/\/ Returns 807926400000 no matter the local time zone. Date.parse(\"Wed, 09 Aug 1995 00:00:00 GMT\");\r          \r           \/\/ Returns 807937200000 in timezone GMT-0300, and other values in other \/\/ timezones, since there is no time zone specifier in the argument. Date.parse(\"Wed, 09 Aug 1995 00:00:00\");\r          \r           \/\/ Returns 0 no matter the local time zone. Date.parse(\"Thu, 01 Jan 1970 00:00:00 GMT\");\r          \r           \/\/ Returns 14400000 in timezone GMT-0400, and other values in other  \/\/ timezones, since there is no time zone specifier in the argument. Date.parse(\"Thu, 01 Jan 1970 00:00:00\");\r          \r           \/\/ Returns 14400000 no matter the local time zone. Date.parse(\"Thu, 01 Jan 1970 00:00:00 GMT-0400\");\r          See also Date.UTC \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/prototype","title":"Date.prototype","description":"Represents the prototype for the Date constructor. Description  JavaScript Date  instances inherit from  Date.prototype . You can modify the constructor's prototype object to affect properties and methods inherited by JavaScript\u00a0Date instances. For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods getFullYear, setFullYear, getUTCFullYear, and setUTCFullYear. \t Properties    constructor Returns the function that created an instance. This is the Date      Properties inherited from  Object:__parent__, __proto__    Methods    getDate Returns the day of the month (1-31) for the specified date according to local time.   getDay Returns the day of the week (0-6) for the specified date according to local time.   getFullYear Returns the year (4 digits for 4-digit years) of the specified date according to local time.   getHours Returns the hour (0-23) in the specified date according to local time.   getMilliseconds Returns the milliseconds (0-999) in the specified date according to local time.   getMinutes Returns the minutes (0-59) in the specified date according to local time.   getMonth Returns the month (0-11) in the specified date according to local time.   getSeconds Returns the seconds (0-59) in the specified date according to local time.   getTime Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).   getTimezoneOffset Returns the time-zone offset in minutes for the current locale.   getUTCDate Returns the day (date) of the month (1-31) in the specified date according to universal time.   getUTCDay Returns the day of the week (0-6) in the specified date according to universal time.   getUTCFullYear Returns the year (4 digits for 4-digit years) in the specified date according to universal time.   getUTCHours Returns the hours (0-23) in the specified date according to universal time.   getUTCMilliseconds Returns the milliseconds (0-999) in the specified date according to universal time.   getUTCMinutes Returns the minutes (0-59) in the specified date according to universal time.   getUTCMonth Returns the month (0-11) in the specified date according to universal time.   getUTCSeconds Returns the seconds (0-59) in the specified date according to universal time.   getYear   Deprecated   Returns the year (usually 2-3 digits) in the specified date according to local time. Use getFullYear instead.   setDate Sets the day of the month (1-31) for a specified date according to local time.   setFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to local time.   setHours Sets the hours (0-23) for a specified date according to local time.   setMilliseconds Sets the milliseconds (0-999) for a specified date according to local time.   setMinutes Sets the minutes (0-59) for a specified date according to local time.   setMonth Sets the month (0-11) for a specified date according to local time.   setSeconds Sets the seconds (0-59) for a specified date according to local time.   setTime Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.   setUTCDate Sets the day of the month (1-31) for a specified date according to universal time.   setUTCFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to universal time.   setUTCHours Sets the hour (0-23) for a specified date according to universal time.   setUTCMilliseconds Sets the milliseconds (0-999) for a specified date according to universal time.   setUTCMinutes Sets the minutes (0-59) for a specified date according to universal time.   setUTCMonth Sets the month (0-11) for a specified date according to universal time.   setUTCSeconds Sets the seconds (0-59) for a specified date according to universal time.   setYear   Deprecated   Sets the year (usually 2-3 digits) for a specified date according to local time. Use setFullYear instead.   toDateString Returns the \"date\" portion of the Date as a human-readable string. toISOString Converts a date to a string following the ISO 8601 Extended Format. toJSON  Requires JavaScript 1.8.5  Returns a string encapsulating the Date object in JSON\u00a0format.   toGMTString   Deprecated   Converts a date to a string, using the Internet GMT conventions. Use toUTCString instead.   toLocaleDateString Returns the \"date\" portion of the Date as a string, using the current locale's conventions.   toLocaleFormat Non-standard      Converts a date to a string, using a format string.   toLocaleString Converts a date to a string, using the current locale's conventions. Overrides the Object.toLocaleString method.   toLocaleTimeString Returns the \"time\" portion of the Date as a string, using the current locale's conventions.   toSource Non-standard      Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.   toString Returns a string representing the specified Date object. Overrides the Object.prototype.toString method.   toTimeString Returns the \"time\" portion of the Date as a human-readable string.   toUTCString Converts a date to a string, using the universal time convention.   valueOf Returns the primitive value of a Date object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    See also     Date    Function.prototype    See also"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Arity","title":"Function.Arity","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None    Description The arity property no longer exists and has been replaced by the Function.prototype.length property."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Caller","title":"Function.Caller","description":"Returns the function that invoked the specified function. This property is not part of ECMA-262 Edition 3 standard. It is implemented at least in SpiderMonkey (the JavaScript engine used in Mozilla) (see   bug 65683 ), V8 (the JavaScript engine used in Chrome) and JScript.    Property of Function     Implemented in JavaScript 1.5   ECMAScript Edition none    Description If the function f was invoked by the top level code, the value of f.caller is null, otherwise it's the function that called f This property replaces deprecated arguments.caller. Notes Note that in case of recursion, you can't reconstruct the call stack using this property. Consider:  function f(n) { g(n-1) } function g(n) { if(n>0) f(n); else stop() } f(2)  At the moment stop() is called the call stack will be:  f(2) -> g(1) -> f(1) -> g(0) -> stop()  The following is true:  stop.caller === g && f.caller === g && g.caller === f  so if you tried to get the stack trace in the stop() function like this:  var f = stop; var stack = \"Stack trace:\"; while (f) {   stack += \"\\n\" + f.name;   f = f.caller; }  the loop would never stop. The special property __caller__, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons. Examples Example: Checking the value of a function's caller property The following code checks the value a function's caller property.  function myFunc() {    if (myFunc.caller == null) {       return (\"The function was called from the top!\");    } else       return (\"This function's caller was \" + myFunc.caller); }  \u00a0 Example: Checking the value of a function's caller property The following code checks the value a function's caller property.  function myFunc() {    if (myFunc.caller == null) {       return (\"The function was called from the top!\");    } else       return (\"This function's caller was \" + myFunc.caller); }  \u00a0 Browser Support Function.caller is currently supported by all major browsers:\u00a0Firefox, Safari, Chrome, Opera and IE. \u00a0Test page with results. \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Constructor","title":"Function.Constructor","description":"Summary  Returns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Length","title":"Function.Length","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description length is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function. Example \r           console.log((function () {}).length);  \/* 0 *\/ console.log((function (a) {}).length); \/* 1 *\/ console.log((function (a, b) {}).length); \/* 2 etc. *\/\r          \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Name","title":"Function.Name","description":"The name of the function.    Property of Function     Implemented in JavaScript ?   ECMAScript Edition None    Description The name property returns the name of a function, or an empty string for anonymous functions: function doSomething() {} alert(doSomething.name); \/\/ alerts \"doSomething\"  Functions created with the syntax new Function(...) or just Function(...) have their name property set to \"anonymous\" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer. Note that in these examples anonymous functions are created, so name returns an empty string: var f = function() { }; var object = {   someMethod: function() {} };  alert(f.name == \"\"); \/\/ true alert(object.someMethod.name == \"\"); \/\/ also true  You can define a function with a name in a function expression: var object = {   someMethod: function object_someMethod() {} }; alert(object.someMethod.name); \/\/ alerts \"object_someMethod\"  try { object_someMethod } catch(e) { alert(e); } \/\/ ReferenceError: object_someMethod is not defined  You cannot change the name of a function, this property is read-only: var object = {   \/\/ anonymous   someMethod: function(){} }; object.someMethod.name = \"someMethod\"; alert(object.someMethod.name); \/\/ empty string, someMethod is anonymous  Examples You can use obj.constructor.name to check the \"class\" of an object: function a() { }  var b = new a(); alert(b.constructor.name); \/\/Alerts \"a\""},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/now","title":"Date.now","description":"Introduction Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.    Method of Date     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 5th Edition    Syntax \r           var timeInMs = Date.now();\r          Parameters None. Description The now method returns the milliseconds elapsed since 1 January 1970 00:00:00 UTC up until now as a number. When using now to create timestamps or unique IDs, keep in mind that the resolution may be 15 milliseconds on Windows (see   bug 363258 ), so you could end up with several equal values if now is called multiple times within a short time span. Compatibility This method was standardized in ECMA-262 5th edition.\u00a0 Engines which have not been updated to support this method can work around the absence of this method using the following shim: \r           if (!Date.now) {   Date.now = function now() {     return +(new Date);   }; }\r          Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3 5 9 10.50 4         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/UTC","title":"Date.UTC","description":"Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax   Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])    Parameters   year\u00a0 A year after 1900.   month\u00a0 An integer between 0 and 11 representing the month.   date\u00a0 An integer between 1 and 31 representing the day of the month.   hrs\u00a0 An integer between 0 and 23 representing the hours.   min\u00a0 An integer between 0 and 59 representing the minutes.   sec\u00a0 An integer between 0 and 59 representing the seconds.   ms\u00a0 An integer between 0 and 999 representing the milliseconds.   Description  UTC takes comma-delimited date parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, universal time and the time you specified. You should specify a full year for the year; for example, 1998. If a year between 0 and 99 is specified, the method converts the year to a year in the 20th century (1900 + year); for example, if you specify 95, the year 1995 is used. The UTC method differs from the Date constructor in two ways.   Date.UTC uses universal time instead of the local time.  Date.UTC returns a time value as a number instead of creating a Date object.  If a parameter you specify is outside of the expected range, the UTC method updates the other parameters to allow for your number. For example, if you use 15 for month, the year will be incremented by 1 (year + 1), and 3 will be used for the month. Because UTC is a static method of Date, you always use it as Date.UTC(), rather than as a method of a Date object you created.   Examples   Example: Using Date.UTC  The following statement creates a Date object using GMT instead of local time:  gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));   Example: Using Date.UTC  The following statement creates a Date object using GMT instead of local time:  gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));   See also  parse"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Apply","title":"Function.Apply","description":"Calls a function with a given this value and arguments provided as an array. NOTE:\u00a0While the syntax of this function is almost identical to that of\u00a0call(), the fundamental difference is that\u00a0call()\u00a0accepts an argument list, while\u00a0apply()\u00a0accepts a single array of arguments.    Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMA-262 3rd Edition    Syntax fun.apply(thisArg[, argsArray]) Parameters  thisArg    The value of\u00a0this\u00a0provided for the call to\u00a0fun. \u00a0Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code,\u00a0null\u00a0and\u00a0undefined\u00a0will be replaced with the global object, and primitive values will be boxed.     argsArray An array like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function.   JavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), this method works according to the ECMAScript 5 specification. That is, the arguments can be a generic array-like object instead of an array. See   bug 562448  for details on this change. Description You can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object. apply is very similar to call, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, ['eat', 'bananas']), or an Array object, for example, fun.apply(this, new Array('eat', 'bananas')). You can also use arguments for the argsArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments. Since ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property length and integer properties in the range [0...length). As an example you can now use a NodeList or a own custom object like {'length': 2, '0': 'eat', '1':\u00a0'bananas'}. Note:\u00a0Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array like objects and will throw an exception.  Examples Using apply to chain constructors You can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.apply(this, arguments);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.apply(this, arguments);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          apply and built-in functions Clever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array. \r           \/* min\/max number in an array *\/ var numbers = [5, 6, 2, 3, 7];  \/* using Math.min\/Math.max apply *\/ var max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/ var min = Math.min.apply(null, numbers);  \/* vs. simple loop based algorithm *\/ max = -Infinity, min = +Infinity;  for (var i = 0; i < numbers.length; i++) {   if (numbers[i] > max)     max = numbers[i];   if (numbers[i] < min)      min = numbers[i]; }\r          But beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)\u00a0 If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time: \r           function minOfArray(arr) {   var min = Infinity;   var QUANTUM = 32768;   for (var i = 0, len = arr.length; i < len; i += QUANTUM)   {     var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));     min = Math.min(submin, min);   }   return min; }  var min = minOfArray([5, 6, 2, 3, 7]);\r          Using apply to chain constructors You can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.apply(this, arguments);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.apply(this, arguments);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          apply and built-in functions Clever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array. \r           \/* min\/max number in an array *\/ var numbers = [5, 6, 2, 3, 7];  \/* using Math.min\/Math.max apply *\/ var max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/ var min = Math.min.apply(null, numbers);  \/* vs. simple loop based algorithm *\/ max = -Infinity, min = +Infinity;  for (var i = 0; i < numbers.length; i++) {   if (numbers[i] > max)     max = numbers[i];   if (numbers[i] < min)      min = numbers[i]; }\r          But beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)\u00a0 If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time: \r           function minOfArray(arr) {   var min = Infinity;   var QUANTUM = 32768;   for (var i = 0, len = arr.length; i < len; i += QUANTUM)   {     var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));     min = Math.min(submin, min);   }   return min; }  var min = minOfArray([5, 6, 2, 3, 7]);\r          See Also call, bind, arguments"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Call","title":"Function.Call","description":"Calls a function with a given this value and arguments provided individually. NOTE: While the syntax of this function is almost identical to that of\u00a0apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.    Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 3rd Edition    Syntax fun.call(thisArg[, arg1[, arg2[, ...]]]) Parameters  thisArg The value of this provided for the call to\u00a0fun. \u00a0Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.   arg1, arg2, ... Arguments for the object. Description You can assign a different this object when calling an existing function. this refers to the current object, the calling object. With call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object. Examples Using call to chain constructors for an object You can use call to chain constructors for an object, similar to Java.\u00a0In the following example, the constructor for the\u00a0Product\u00a0object is defined with two parameters, name\u00a0and\u00a0value. Two other functions\u00a0Food\u00a0and\u00a0Toy\u00a0invoke\u00a0Product\u00a0passing\u00a0this\u00a0and\u00a0name\u00a0and\u00a0value. Product initializes the properties name and price, both specialized functions define the category. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.call(this, name, price);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.call(this, name, price);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          Using call to invoke an anonymous function In this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose. \r           var animals = [   {species: 'Lion', name: 'King'},   {species: 'Whale', name: 'Fail'} ];  for (var i = 0; i < animals.length; i++) {   (function (i) {      this.print = function () {        console.log('#' + i  + ' ' + this.species + ': ' + this.name);      }    }).call(animals[i], i); }\r          Using call to chain constructors for an object You can use call to chain constructors for an object, similar to Java.\u00a0In the following example, the constructor for the\u00a0Product\u00a0object is defined with two parameters, name\u00a0and\u00a0value. Two other functions\u00a0Food\u00a0and\u00a0Toy\u00a0invoke\u00a0Product\u00a0passing\u00a0this\u00a0and\u00a0name\u00a0and\u00a0value. Product initializes the properties name and price, both specialized functions define the category. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.call(this, name, price);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.call(this, name, price);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          Using call to invoke an anonymous function In this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose. \r           var animals = [   {species: 'Lion', name: 'King'},   {species: 'Whale', name: 'Fail'} ];  for (var i = 0; i < animals.length; i++) {   (function (i) {      this.print = function () {        console.log('#' + i  + ' ' + this.species + ': ' + this.name);      }    }).call(animals[i], i); }\r          See Also apply"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToSource","title":"Function.ToSource","description":"Summary  Returns a string representing the source code for the function.     Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  var sourceString = function.toSource();   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Function object, toSource returns the following string indicating that the source code is not available:  function Function() {    [native code] }   For custom functions, toSource returns the JavaScript source that defines the object as a string.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.   See Also  toString Object.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToString","title":"Function.ToString","description":"Returns a string representing the source code of the function.    Method of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax function.toString(indentation) Parameters  indentation Non-standard      The amount of spaces to indent the string representation of the source code. If indentation is less than or equal to -1, most unnecessary spaces are removed.  Description The Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For Function objects, the toString method returns a string representation of the object in the form of a function declaration.\u00a0 That is, toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body. JavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string. See also Object.prototype.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getFullYear","title":"Date.getFullYear","description":"Summary  Returns the year of the specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getFullYear()    Parameters  None.   Description  The value returned by getFullYear is an absolute number. For dates between the years 1000 and 9999, getFullYear returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000. Use this method instead of the getYear method.   Examples   Example: Using getFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var today = new Date(); var yr = today.getFullYear();    Example: Using getFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var today = new Date(); var yr = today.getFullYear();    See Also  getYear, getUTCFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setFullYear","title":"Date.setFullYear","description":"Summary  Sets the full year for a specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setFullYear(yearValue[, monthValue[, dayValue]])    Parameters   yearValue\u00a0 An integer specifying the numeric value of the year, for example, 1995.   monthValue\u00a0 An integer between 0 and 11 representing the months January through December.   dayValue\u00a0 An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.   Description  If you do not specify the monthValue and dayValue parameters, the values returned from the getMonth and getDate methods are used. If a parameter you specify is outside of the expected range, setFullYear attempts to update the other parameters and the date information in the Date object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.   Examples   Example: Using setFullYear   theBigDay = new Date(); theBigDay.setFullYear(1997);   Example: Using setFullYear   theBigDay = new Date(); theBigDay.setFullYear(1997);   See Also  getUTCFullYear, setUTCFullYear, setYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCFullYear","title":"Date.getUTCFullYear","description":"Summary  Returns the year in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCFullYear()    Parameters  None.   Description  The value returned by getUTCFullYear is an absolute number that is compliant with year-2000, for example, 1995.   Examples   Example: Using getUTCFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var yr; Today = new Date(); yr = Today.getUTCFullYear();    Example: Using getUTCFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var yr; Today = new Date(); yr = Today.getUTCFullYear();    See Also  getFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCFullYear","title":"Date.setUTCFullYear","description":"Summary  Sets the full year for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCFullYear(yearValue[, monthValue[, dayValue]])    Parameters   yearValue\u00a0 An integer specifying the numeric value of the year, for example, 1995.   monthValue\u00a0 An integer between 0 and 11 representing the months January through December.   dayValue\u00a0 An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.   Description  If you do not specify the monthValue and dayValue parameters, the values returned from the getMonth and getDate methods are used. If a parameter you specify is outside of the expected range, setUTCFullYear attempts to update the other parameters and the date information in the Date object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.   Examples   Example: Using setUTCFullYear   theBigDay = new Date(); theBigDay.setUTCFullYear(1997);   Example: Using setUTCFullYear   theBigDay = new Date(); theBigDay.setUTCFullYear(1997);   See Also  getUTCFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/constructor","title":"Date.constructor","description":"Summary  Returns a reference to the Date function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Parent","title":"Object.Parent","description":"Points to an object's context. Syntax obj.__parent__ Description For top-level objects, this is the e.g. window. See Also  SpiderMonkey change du jour: the special __parent__ property has been removed"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Proto","title":"Object.Proto","description":"Refers to the prototype of the object, which may be an object or null\u00a0(which usually means the object is Object.prototype, which has no prototype). \u00a0It is sometimes used to implement prototype-inheritance based property lookup. This property is deprecated and should not be used in new code: use Object.getPrototypeOf\u00a0instead. Syntax var proto = obj.__proto__; Note: this is two underscores, followed by the five characters \"proto\", followed by two more underscores. Description When an object is created, its __proto__ property is set to constructing function's prototype property. For example var fred = new Employee(); will cause fred.__proto__ = Employee.prototype;. This is used at runtime to look up properties which are not declared in the object directly. E.g. when fred.doSomething() is executed and fred does not contain a doSomething, fred.__proto__ is checked, which points to Employee.prototype, which contains a doSomething, i.e. fred.__proto__.doSomething() is invoked. Note that __proto__ is a property of the instances, whereas prototype is a property of their constructor functions. Example This example demonstrates that the __proto__ property can be changed to point to a different object after initial construction. This change will alter the lookup results for object properties. This example also illustrates that all objects have __proto__, including the objects bound to the prototype property of functions. The object  anOnion will have a __proto__ property equal to Plant.prototype; if we write anOnion.foo, then we will lookup foo in the anOnion object first, then in Plant.prototype (the value of anOnion.__proto__), then in Lifeform.prototype (the value of Plant.prototype set by the call to extend()), and finally in Lifeform.__proto__. \r           function extend(child, supertype) {    child.prototype.__proto__ = supertype.prototype; }  extend(Animal, Lifeform); extend(Plant, Lifeform);  var anOnion = new Plant();\r          However, this only applies to extensible objects:\u00a0a non-extensible object's\u00a0__proto__\u00a0property (more generally, the object's prototype) cannot be changed: \r           var obj = {}; Object.preventExtensions(obj);  obj.__proto__ = {}; \/\/ throws a TypeError"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDate","title":"Date.getDate","description":"Summary  Returns the day of the month for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   getDate()    Parameters  None.   Description  The value returned by getDate is an integer between 1 and 31.   Examples   Example: Using getDate  The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") day = Xmas95.getDate()    Example: Using getDate  The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") day = Xmas95.getDate()    See Also  getUTCDate, getUTCDay, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDay","title":"Date.getDay","description":"Summary  Returns the day of the week for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getDay()    Parameters  None.   Description  The value returned by getDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.   Examples   Example: Using getDay  The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.   Xmas95 = new Date(\"December 25, 1995 23:15:00\"); weekday = Xmas95.getDay();   Example: Using getDay  The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.   Xmas95 = new Date(\"December 25, 1995 23:15:00\"); weekday = Xmas95.getDay();   See Also  getUTCDay, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getHours","title":"Date.getHours","description":"Summary  Returns the hour for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getHours()    Parameters  None.   Description  The value returned by getHours is an integer between 0 and 23.   Examples   Example: Using getHours  The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") hours = Xmas95.getHours()    Example: Using getHours  The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") hours = Xmas95.getHours()    See Also  getUTCHours, setHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMilliseconds","title":"Date.getMilliseconds","description":"Summary  Returns the milliseconds in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMilliseconds()    Parameters  None.   Description  The value returned by getMilliseconds is a number between 0 and 999.   Examples   Example: Using getMilliseconds  The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getMilliseconds();    Example: Using getMilliseconds  The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getMilliseconds();    See Also  getUTCMilliseconds, setMilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMinutes","title":"Date.getMinutes","description":"Summary  Returns the minutes in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMinutes()    Parameters  None.   Description  The value returned by getMinutes is an integer between 0 and 59.   Examples   Example: Using getMinutes  The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") minutes = Xmas95.getMinutes()   Example: Using getMinutes  The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") minutes = Xmas95.getMinutes()   See Also  getUTCMinutes, setMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMonth","title":"Date.getMonth","description":"Summary  Returns the month in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMonth()    Parameters  None.   Description  The value returned by getMonth is an integer between 0 and 11. 0 corresponds to January, 1 to February, and so on.   Examples   Example: Using getMonth  The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") month = Xmas95.getMonth()    Example: Using getMonth  The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") month = Xmas95.getMonth()    See Also  getUTCMonth, setMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getSeconds","title":"Date.getSeconds","description":"Summary  Returns the seconds in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getSeconds()    Parameters  None.   Description  The value returned by getSeconds is an integer between 0 and 59.   Examples   Example: Using getSeconds  The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:30\") secs = Xmas95.getSeconds()   Example: Using getSeconds  The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:30\") secs = Xmas95.getSeconds()   See Also  getUTCSeconds, setSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTime","title":"Date.getTime","description":"Returns the numeric value corresponding to the time for the specified date according to universal time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  getTime()  Parameters None. Description The value returned by the getTime method is the number of milliseconds since 1 January 1970 00:00:00 UTC. You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf method. Examples Using getTime for copying dates Constructing a date object with the identical time value. \r           var birthday = new Date(1994, 12, 10); var copy = new Date(); copy.setTime(birthday.getTime());\r          Measuring execution time Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. \r           var end, start;  start = new Date(); for (var i = 0; i < 1000; i++)   Math.sqrt(i); end = new Date();  console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\r         Using getTime for copying dates Constructing a date object with the identical time value. \r           var birthday = new Date(1994, 12, 10); var copy = new Date(); copy.setTime(birthday.getTime());\r          Measuring execution time Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. \r           var end, start;  start = new Date(); for (var i = 0; i < 1000; i++)   Math.sqrt(i); end = new Date();  console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\r         See also getUTCHours, setTime, valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTimezoneOffset","title":"Date.getTimezoneOffset","description":"Returns the time-zone offset from UTC, in minutes, for the current locale.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  getTimezoneOffset()  Parameters None. Description The time-zone offset is the difference, in minutes, between UTC\u00a0and local time. Note that this means that the offset is positive if the local timezone is behind UTC\u00a0and negative if it is ahead.\u00a0 For example, if your time zone is UTC+10 (Australian Eastern Standard Time), -600 will be returned. Daylight savings time prevents this value from being a constant even for a given locale Examples Example: Using getTimezoneOffset x = new Date() currentTimeZoneOffsetInHours = x.getTimezoneOffset()\/60  Example: Using getTimezoneOffset x = new Date() currentTimeZoneOffsetInHours = x.getTimezoneOffset()\/60"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDate","title":"Date.getUTCDate","description":"Summary  Returns the day (date) of the month in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCDate()    Parameters  None.   Description  The value returned by getUTCDate is an integer between 1 and 31.   Examples   Example: Using getUTCDate  The following example assigns the day portion of the current date to the variable d.   var d; Today = new Date(); d = Today.getUTCDate();    Example: Using getUTCDate  The following example assigns the day portion of the current date to the variable d.   var d; Today = new Date(); d = Today.getUTCDate();    See Also  getDate, getUTCDay, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDay","title":"Date.getUTCDay","description":"Summary  Returns the day of the week in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCDay()    Parameters  None.   Description  The value returned by getUTCDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.   Examples   Example: Using getUTCDay  The following example assigns the weekday portion of the current date to the variable weekday.   var weekday; Today = new Date() weekday = Today.getUTCDay()   Example: Using getUTCDay  The following example assigns the weekday portion of the current date to the variable weekday.   var weekday; Today = new Date() weekday = Today.getUTCDay()   See Also  getDay, getUTCDate, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCHours","title":"Date.getUTCHours","description":"Summary  Returns the hours in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCHours    Parameters  None.   Description  The value returned by getUTCHours is an integer between 0 and 23.   Examples   Example: Using getUTCHours  The following example assigns the hours portion of the current time to the variable hrs.   var hrs; Today = new Date(); hrs = Today.getUTCHours();   Example: Using getUTCHours  The following example assigns the hours portion of the current time to the variable hrs.   var hrs; Today = new Date(); hrs = Today.getUTCHours();   See Also  getHours, setUTCHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMilliseconds","title":"Date.getUTCMilliseconds","description":"Summary  Returns the milliseconds in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMilliseconds()    Parameters  None.   Description  The value returned by getUTCMilliseconds is an integer between 0 and 999.   Examples   Example: Using getUTCMilliseconds = The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getUTCMilliseconds();   See Also  getMilliseconds, setUTCmilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMinutes","title":"Date.getUTCMinutes","description":"Summary  Returns the minutes in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMinutes()    Parameters  None.   Description  The value returned by getUTCMinutes is an integer between 0 and 59.   Examples   Example: Using getUTCMinutes  The following example assigns the minutes portion of the current time to the variable min.   var min; Today = new Date(); min = Today.getUTCMinutes();   Example: Using getUTCMinutes  The following example assigns the minutes portion of the current time to the variable min.   var min; Today = new Date(); min = Today.getUTCMinutes();   See Also  getMinutes, setUTCMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMonth","title":"Date.getUTCMonth","description":"Summary  Returns the month of the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMonth()    Parameters  None.   Description  The value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month. 0 for January, 1 for February, 2 for March, and so on.   Examples   Example: Using getUTCMonth  The following example assigns the month portion of the current date to the variable mon.   var mon; Today = new Date(); mon = Today.getUTCMonth();   Example: Using getUTCMonth  The following example assigns the month portion of the current date to the variable mon.   var mon; Today = new Date(); mon = Today.getUTCMonth();   See Also  getMonth, setUTCMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCSeconds","title":"Date.getUTCSeconds","description":"Summary  Returns the seconds in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCSeconds()    Parameters  None.   Description  The value returned by getUTCSeconds is an integer between 0 and 59.   Examples   Example: Using getUTCSeconds  The following example assigns the seconds portion of the current time to the variable sec.   var sec; Today = new Date(); sec = Today.getUTCSeconds();   Example: Using getUTCSeconds  The following example assigns the seconds portion of the current time to the variable sec.   var sec; Today = new Date(); sec = Today.getUTCSeconds();   See Also  getSeconds, setUTCSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getYear","title":"Date.getYear","description":"Returns the year in the specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getYear()    Parameters  None.   Description  getYear is no longer used and has been replaced by the getFullYear method. The getYear method returns the year minus 1900; thus:   For years greater than or equal to 2000, the value returned by getYear is 100 or greater. For example, if the year is 2026, getYear returns 126.   For years between and including 1900 and 1999, the value returned by getYear is between 0 and 99. For example, if the year is 1976, getYear returns 76.   For years less than 1900, the value returned by getYear is less than 0. For example, if the year is 1800, getYear returns -100.  To take into account years before and after 2000, you should use getFullYear instead of getYear so that the year is specified in full.   Backward Compatibility   JavaScript 1.2 and earlier  The getYear method returns either a 2-digit or 4-digit year:   For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.   For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.   JavaScript 1.2 and earlier  The getYear method returns either a 2-digit or 4-digit year:   For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.   For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.   Examples   Example: Years between 1900 and 1999  The second statement assigns the value 95 to the variable year.   Xmas = new Date(\"December 25, 1995 23:15:00\") year = Xmas.getYear() \/\/ returns 95   Example: Years above 1999  The second statement assigns the value 100 to the variable year.   Xmas = new Date(\"December 25, 2000 23:15:00\") year = Xmas.getYear() \/\/ returns 100   Example: Years below 1900  The second statement assigns the value -100 to the variable year.   Xmas = new Date(\"December 25, 1800 23:15:00\") year = Xmas.getYear() \/\/ returns -100   Example: Setting and getting a year between 1900 and 1999  The second statement assigns the value 95 to the variable year, representing the year 1995.   Xmas.setYear(95) year = Xmas.getYear() \/\/ returns 95    Example: Years between 1900 and 1999  The second statement assigns the value 95 to the variable year.   Xmas = new Date(\"December 25, 1995 23:15:00\") year = Xmas.getYear() \/\/ returns 95   Example: Years above 1999  The second statement assigns the value 100 to the variable year.   Xmas = new Date(\"December 25, 2000 23:15:00\") year = Xmas.getYear() \/\/ returns 100   Example: Years below 1900  The second statement assigns the value -100 to the variable year.   Xmas = new Date(\"December 25, 1800 23:15:00\") year = Xmas.getYear() \/\/ returns -100   Example: Setting and getting a year between 1900 and 1999  The second statement assigns the value 95 to the variable year, representing the year 1995.   Xmas.setYear(95) year = Xmas.getYear() \/\/ returns 95    See Also  getFullYear, getUTCFullYear, setYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setDate","title":"Date.setDate","description":"Sets the day of the month for a specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  setDate(dayValue)  Parameters  dayValue\u00a0 An integer from 1 to 31, representing the day of the month.  Description If the parameter you specify is outside of the expected range, setDate attempts to update the date information in the Date object accordingly. For example, if you use 0 for dayValue, the date will be set to the last day of the previous month. Examples Example: Using setDate The second statement below changes the day for theBigDay to July 24 from its original value.  theBigDay = new Date(\"July 27, 1962 23:30:00\") theBigDay.setDate(24)   Example: Using setDate The second statement below changes the day for theBigDay to July 24 from its original value.  theBigDay = new Date(\"July 27, 1962 23:30:00\") theBigDay.setDate(24)   See Also getDate, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setHours","title":"Date.setHours","description":"Sets the hours for a specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax   setHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])    Versions prior to JavaScript 1.3   setHours(hoursValue)    Versions prior to JavaScript 1.3   setHours(hoursValue)    Parameters   hoursValue\u00a0 An integer between 0 and 23, representing the hour.   minutesValue\u00a0 An integer between 0 and 59, representing the minutes.   secondsValue\u00a0 An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.   msValue\u00a0 A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.   Description  If you do not specify the minutesValue, secondsValue, and msValue parameters, the values returned from the getUTCMinutes, getUTCSeconds, and getMilliseconds methods are used. If a parameter you specify is outside of the expected range, setHours attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.   Examples   Example: Using setHours   theBigDay.setHours(7)   Example: Using setHours   theBigDay.setHours(7)   See Also  getHours, setUTCHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMilliseconds","title":"Date.setMilliseconds","description":"Summary  Sets the milliseconds for a specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setMilliseconds(millisecondsValue)    Parameters   millisecondsValue\u00a0 A number between 0 and 999, representing the milliseconds.   Description  If you specify a number outside the expected range, the date information in the Date object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.   Examples   Example: Using setMilliseconds   theBigDay = new Date(); theBigDay.setMilliseconds(100);   Example: Using setMilliseconds   theBigDay = new Date(); theBigDay.setMilliseconds(100);   See Also  getMilliseconds, setUTCMilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMinutes","title":"Date.setMinutes","description":"Sets the minutes for a specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax   setMinutes(minutesValue[, secondsValue[, msValue]])    Versions prior to JavaScript 1.3   setMinutes(minutesValue)    Versions prior to JavaScript 1.3   setMinutes(minutesValue)    Parameters   minutesValue\u00a0 An integer between 0 and 59, representing the minutes.   secondsValue\u00a0 An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.   msValue\u00a0 A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.   Description  If you do not specify the secondsValue and msValue parameters, the values returned from getSeconds and getMilliseconds methods are used. If a parameter you specify is outside of the expected range, setMinutes attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes (minutesValue) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.   Examples   Example: Using setMinutes   theBigDay.setMinutes(45)   Example: Using setMinutes   theBigDay.setMinutes(45)   See Also  getMinutes, setUTCMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setSeconds","title":"Date.setSeconds","description":"Sets the seconds for a specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax   setSeconds(secondsValue[, msValue])    Versions prior to JavaScript 1.3   setSeconds(secondsValue)    Versions prior to JavaScript 1.3   setSeconds(secondsValue)    Parameters   secondsValue\u00a0 An integer between 0 and 59.   msValue\u00a0 A number between 0 and 999, representing the milliseconds.   Description  If you do not specify the msValue parameter, the value returned from the getMilliseconds method is used. If a parameter you specify is outside of the expected range, setSeconds attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes stored in the Date object will be incremented by 1, and 40 will be used for seconds.   Examples   Example: Using setSeconds   theBigDay.setSeconds(30)   Example: Using setSeconds   theBigDay.setSeconds(30)   See Also  getSeconds, setUTCSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMonth","title":"Date.setMonth","description":"Set the month for a specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax   setMonth(monthValue[, dayValue])    Versions prior to JavaScript 1.3   setMonth(monthValue)    Versions prior to JavaScript 1.3   setMonth(monthValue)    Parameter   monthValue\u00a0 An integer between 0 and 11 (representing the months January through December).   dayValue\u00a0 An integer from 1 to 31, representing the day of the month.   Description  If you do not specify the dayValue parameter, the value returned from the getDate method is used. If a parameter you specify is outside of the expected range, setMonth attempts to update the date information in the Date object accordingly. For example, if you use 15 for monthValue, the year will be incremented by 1 (year + 1), and 3 will be used for month.   Examples   Example: Using setMonth   theBigDay.setMonth(6)   Example: Using setMonth   theBigDay.setMonth(6)   See Also  getMonth, setUTCMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCDate","title":"Date.setUTCDate","description":"Summary  Sets the day of the month for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCDate(dayValue)    Parameters   dayValue\u00a0 An integer from 1 to 31, representing the day of the month.   Description  If a parameter you specify is outside of the expected range, setUTCDate attempts to update the date information in the Date object accordingly. For example, if you use 40 for dayValue, and the month stored in the Date object is June, the day will be changed to 10 and the month will be incremented to July.   Examples   Example: Using setUTCDate   theBigDay = new Date(); theBigDay.setUTCDate(20);   Example: Using setUTCDate   theBigDay = new Date(); theBigDay.setUTCDate(20);   See Also  getUTCDate, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setTime","title":"Date.setTime","description":"Summary  Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   setTime(timeValue)    Parameters   timeValue\u00a0 An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.   Description  Use the setTime method to help assign a date and time to another Date object.   Examples   Example: Using setTime   theBigDay = new Date(\"July 1, 1999\") sameAsBigDay = new Date() sameAsBigDay.setTime(theBigDay.getTime())   Example: Using setTime   theBigDay = new Date(\"July 1, 1999\") sameAsBigDay = new Date() sameAsBigDay.setTime(theBigDay.getTime())   See Also  getTime, setUTCHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCHours","title":"Date.setUTCHours","description":"Summary  Sets the hour for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])    Parameters   hoursValue\u00a0 An integer between 0 and 23, representing the hour.   minutesValue\u00a0 An integer between 0 and 59, representing the minutes.   secondsValue\u00a0 An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.   msValue\u00a0 A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.   Description  If you do not specify the minutesValue, secondsValue, and msValue parameters, the values returned from the getUTCMinutes, getUTCSeconds, and getUTCMilliseconds methods are used. If a parameter you specify is outside of the expected range, setUTCHours attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.   Examples   Example: Using setUTCHours   theBigDay = new Date(); theBigDay.setUTCHours(8);   Example: Using setUTCHours   theBigDay = new Date(); theBigDay.setUTCHours(8);   See Also  getUTCHours, setHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMilliseconds","title":"Date.setUTCMilliseconds","description":"Summary  Sets the milliseconds for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCMilliseconds(millisecondsValue)    Parameters   millisecondsValue\u00a0 A number between 0 and 999, representing the milliseconds.   Description  If a parameter you specify is outside of the expected range, setUTCMilliseconds attempts to update the date information in the Date object accordingly. For example, if you use 1100 for millisecondsValue, the seconds stored in the Date object will be incremented by 1, and 100 will be used for milliseconds.   Examples   Example: Using setUTCMilliseconds   theBigDay = new Date(); theBigDay.setUTCMilliseconds(500);   Example: Using setUTCMilliseconds   theBigDay = new Date(); theBigDay.setUTCMilliseconds(500);   See Also  getUTCMilliseconds, setMilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMinutes","title":"Date.setUTCMinutes","description":"Summary  Sets the minutes for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCMinutes(minutesValue[, secondsValue[, msValue]])    Parameters   minutesValue\u00a0 An integer between 0 and 59, representing the minutes.   secondsValue\u00a0 An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.   msValue\u00a0 A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.   Description  If you do not specify the secondsValue and msValue parameters, the values returned from getUTCSeconds and getUTCMilliseconds methods are used. If a parameter you specify is outside of the expected range, setUTCMinutes attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes (minutesValue) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.   Examples   Example: Using setUTCMinutes   theBigDay = new Date(); theBigDay.setUTCMinutes(43);   Example: Using setUTCMinutes   theBigDay = new Date(); theBigDay.setUTCMinutes(43);   See Also  getUTCMinutes, setMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMonth","title":"Date.setUTCMonth","description":"Summary  Sets the month for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCMonth(monthValue[, dayValue])    Parameters   monthValue\u00a0 An integer between 0 and 11, representing the months January through December.   dayValue\u00a0 An integer from 1 to 31, representing the day of the month.   Description  If you do not specify the dayValue parameter, the value returned from the getUTCDate method is used. If a parameter you specify is outside of the expected range, setUTCMonth attempts to update the date information in the Date object accordingly. For example, if you use 15 for monthValue, the year will be incremented by 1 (year + 1), and 3 will be used for month.   Examples   Example: Using setUTCMonth   theBigDay = new Date(); theBigDay.setUTCMonth(11);   Example: Using setUTCMonth   theBigDay = new Date(); theBigDay.setUTCMonth(11);   See Also  getUTCMonth, setMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCSeconds","title":"Date.setUTCSeconds","description":"Summary  Sets the seconds for a specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   setUTCSeconds(secondsValue[, msValue])    Parameters   secondsValue\u00a0 An integer between 0 and 59.   msValue\u00a0 A number between 0 and 999, representing the milliseconds.   Description  If you do not specify the msValue parameter, the value returned from the getUTCMilliseconds methods is used. If a parameter you specify is outside of the expected range, setUTCSeconds attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes stored in the Date object will be incremented by 1, and 40 will be used for seconds.   Examples   Example: Using setUTCSeconds   theBigDay = new Date(); theBigDay.setUTCSeconds(20);   Example: Using setUTCSeconds   theBigDay = new Date(); theBigDay.setUTCSeconds(20);   See Also  getUTCSeconds, setSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setYear","title":"Date.setYear","description":"Sets the year for a specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax   setYear(yearValue)    Parameters   yearValue\u00a0 An integer.   Description  setYear is no longer used and has been replaced by the setFullYear method. If yearValue<\/code. is a number between 0 and 99 (inclusive), then the year for <code>dateObjectName is set to 1900 + yearValue. Otherwise, the year for dateObjectName is set to yearValue. To take into account years before and after 2000, you should use setFullYear instead of setYear so that the year is specified in full.   Examples   Example: Using setYear  The first two lines set the year to 1996. The third sets the year to 2000.   theBigDay.setYear(96) theBigDay.setYear(1996) theBigDay.setYear(2000)   Example: Using setYear  The first two lines set the year to 1996. The third sets the year to 2000.   theBigDay.setYear(96) theBigDay.setYear(1996) theBigDay.setYear(2000)   See Also  getYear, setFullYear, setUTCFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toDateString","title":"Date.toDateString","description":"Returns the date portion of a Date object in human readable form in American English.    Method of Date     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax date.toDateString() Description Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the date portion; such a thing can be accomplished with the toDateString method. The toDateString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines. Example Example: A basic usage of toDateString var d = new Date(1993, 6, 28, 14, 39, 7); println(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT) println(d.toDateString()); \/\/ prints Wed Jul 28 1993  See also  toLocaleDateString toTimeString toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toISOString","title":"Date.toISOString","description":"JavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format. The Date.prototype.toISOString is an ECMAScript 5 addition. Format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ     Method of Date     Implemented in JavaScript 1.8   ECMAScript Edition ECMAScript 5th Edition    Syntax myDate.toISOString()  Note: mydate is a Date object. Parameters None. Examples \r           var today = new Date(\"05 October 2011 14:48 UTC\"); alert(today.toISOString()); \/\/ Returns 2011-10-10T14:48:00.000z\r          See Also toUTCString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toJSON","title":"Date.toJSON","description":"Returns a JSON representation of the Date object.    Method of Date     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition   Syntax date.toJSON()Description Date instances refer to a specific point in time. Calling toJSON() returns a JSON formatted string representing the Date object's value. \u00a0This method is generally intended to, by default, usefully serialize Date objects during JSON serialization. Example \r           var jsonDate = (new Date()).toJSON(); var backToDate = new Date(jsonDate);  console.log(\"Serialized date object: \" + jsonDate);"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toGMTString","title":"Date.toGMTString","description":"Converts a date to a string, using Internet GMT conventioins.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  toGMTString()  Parameters None. Description toGMTString is deprecated and should no longer be used, it's only there for backwards compatibility, use toUTCString instead. The exact format of the value returned by toGMTString varies according to the platform and browser, in general it should represent a human readable date string.Examples Example: Using toGMTString In the following example, today is a Date object: today.toGMTString()  In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform. Mon, 18 Dec 1995 17:28:35 GMT  Example: Using toGMTString In the following example, today is a Date object: today.toGMTString()  In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform. Mon, 18 Dec 1995 17:28:35 GMT  See Also toLocaleString, toUTCString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toUTCString","title":"Date.toUTCString","description":"Converts a date to a string, using the universal time convention.    Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax toUTCString()  Parameters None. Description The value returned by toUTCString is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform. The most common return value is a RFC-1123 formatted date stamp, which is a slightly updated version of RFC-822 date stamps. Examples Example: Using toUTCString var today = new Date(); var UTCstring = today.toUTCString(); \/\/ Mon, 03 Jul 2006 21:44:38 GMT  Example: Using toUTCString var today = new Date(); var UTCstring = today.toUTCString(); \/\/ Mon, 03 Jul 2006 21:44:38 GMT  See Also toLocaleString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleDateString","title":"Date.toLocaleDateString","description":"Summary  Converts a date to a string, returning the \"date\" portion using the operating system's locale's conventions.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   toLocaleDateString()    Parameters  None.  Description The toLocaleDateString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleDateString returns a string that is not year-2000 compliant. toLocaleDateString behaves similarly to toString when converting a year that the operating system does not properly format. Methods such as getDate, getMonth, and getFullYear give more portable results than toLocaleDateString. Use toLocaleDateString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples Using toLocaleDateString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleDateString()  In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleDateString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleDateString(); \/\/ Bad exampleUsing toLocaleDateString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleDateString()  In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleDateString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleDateString(); \/\/ Bad exampleSee Also  toDateString toLocaleString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toLocaleString","title":"Object.toLocaleString","description":"Summary  Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.    Method of Object   ECMA Version: ECMA-262 Edition 3    Syntax   toLocaleString()    Parameters  None.   Description  Object's toLocaleString returns the result of calling toString. This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.   See also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleTimeString","title":"Date.toLocaleTimeString","description":"Converts a date to a string, returning the \"time\" portion using the current locale's conventions.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleTimeString()  Parameters None. Description The toLocaleTimeString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). Methods such as getHours, getMinutes, and getSeconds give more consistent results than toLocaleTimeString. Use toLocaleTimeString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings. Examples Using toLocaleTimeString In the following example, today is a Date object:  today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleTimeString()  In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.  17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale.  \"Last visit: \" + someDate.toLocaleTimeString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleTimeString(); \/\/ Bad example Using toLocaleTimeString In the following example, today is a Date object:  today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleTimeString()  In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.  17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale.  \"Last visit: \" + someDate.toLocaleTimeString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleTimeString(); \/\/ Bad example See Also  toTimeString toLocaleString toLocaleDateString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleFormat","title":"Date.toLocaleFormat","description":"Converts a date to a string using the specified formatting.    Method of Date     Implemented in JavaScript 1.6   ECMAScript Edition None    Syntax dateObj.toLocaleFormat(formatString)Parameters  formatString\u00a0 A format string in the same format expected by the strftime() function in C.  Description The toLocaleFormat() provides greater software control over the formatting of the generated date and\/or time. Names for months and days of the week are localized using the operating system's locale. However, ordering of the day and month and other localization tasks are not handled automatically since you have control over the order in which they occur.You should take care that the format string is localized properly according to the user's system settings. Be aware that the locale used is not necessarily the same as the locale of the browser. Extension and XulRunner developers should know that just loading the format string from a .dtd or .properties file using a chrome:\/\/somedomain\/locale\/somefile.ext URI should be avoided, as the dtd\/properties file and the toLocaleFormat method does not not necessarily use the same locale, which could result in odd looking or even ambiguous or unreadable dates. Also note that the behavior of the used locale depends on the platform, and the user might customize the locale used, so using the system locale the choose the format string might in some cases not even be adequate. You might consider using some of the more general toLocale* methods of the Date object or doing your own custom localization of the date to be displayed using some of the get* methods of the Date object instead of using this method. Examples Example: Using toLocaleFormat var today = new Date(); var date = today.toLocaleFormat(\"%A,\u00a0%B\u00a0%e,\u00a0%Y\"); \/\/\u00a0Bad example  In this example, toLocaleFormat() returns a string such as \"Wednesday, October 3, 2007\". Note that the format string in this example is not properly localized, which will result in the problems described above. Example: Using toLocaleFormat var today = new Date(); var date = today.toLocaleFormat(\"%A,\u00a0%B\u00a0%e,\u00a0%Y\"); \/\/\u00a0Bad example  In this example, toLocaleFormat() returns a string such as \"Wednesday, October 3, 2007\". Note that the format string in this example is not properly localized, which will result in the problems described above. See Also  toLocaleString toLocaleDateString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleString","title":"Date.toLocaleString","description":"Summary  Converts a date to a string, using the operating system's locale's conventions.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   toLocaleString()    Parameters  None.  Description The toLocaleString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleString returns a string that is not year-2000 compliant. toLocaleString behaves similarly to toString when converting a year that the operating system does not properly format. Methods such as getDate, getMonth, getFullYear, getHours, getMinutes, and getSeconds give more portable results than toLocaleString. Use toLocaleString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples Using toLocaleString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11 today.toLocaleString();  In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95 17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleString(); \/\/ Bad example Using toLocaleString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11 today.toLocaleString();  In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95 17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleString(); \/\/ Bad example See also  toString toUTCString toLocaleDateString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toSource","title":"Date.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax  date.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Date object, toSource returns the following string indicating that the source code is not available:  function Date() {    [native code] }   For instances of Date, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toSource","title":"Object.toSource","description":"Returns a string representing the source code of the object.    Method of Object     Implemented in JavaScript 1.3   ECMAScript Edition None   Syntax obj.toSource() Parameters None. Description The toSource method returns the following values:  For the built-in Object object, toSource returns the following string indicating that the source code is not available:   function Object() {    [native code] }   For instances of Object, toSource returns a string representing the source code.  You can call toSource while debugging to examine the contents of an object. It is safe for objects to override the toSource method.\u00a0 For example:  function Person(name) {     this.name = name; } Person.prototype.toSource = function Person_toSource() {     return \"new Person(\" + uneval(this.name) + \")\"; }; alert(new Person(\"Joe\").toSource());    \/\/ --->\u00a0new Person(\"Joe\")  Built-in toSource methods Each core JavaScript type has its own toSource method. These objects are:    toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.    Built-in toSource methods Each core JavaScript type has its own toSource method. These objects are:    toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.    Examples Example: Using toSource The following code defines the Dog object type and creates theDog, an object of type Dog:  function Dog(name, breed, color, sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"girl\");  Calling the toSource method of theDog displays the JavaScript source that defines the object:  theDog.toSource();  returns  ({name:\"Gabby\", breed:\"Lab\", color:\"chocolate\", sex:\"girl\"})  Example: Using toSource The following code defines the Dog object type and creates theDog, an object of type Dog:  function Dog(name, breed, color, sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"girl\");  Calling the toSource method of theDog displays the JavaScript source that defines the object:  theDog.toSource();  returns  ({name:\"Gabby\", breed:\"Lab\", color:\"chocolate\", sex:\"girl\"})  See Also toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toString","title":"Date.toString","description":"Returns a string representing the specified Date object.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  toString()  Parameters None. Description The Date object overrides the toString method of the Object object; it does not inherit Object.toString. For Date objects, the toString method returns a string representation of the object. toString always returns a string representation of the date in American English. JavaScript calls the toString method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation. Examples Example: Using toString The following assigns the toString value of a Date object to myVar: x = new Date(); myVar=x.toString();   \/\/assigns a value to myVar similar to:      \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)  Example: Using toString The following assigns the toString value of a Date object to myVar: x = new Date(); myVar=x.toString();   \/\/assigns a value to myVar similar to:      \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)  See also  Object.toString toDateString toTimeString toLocaleString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toString","title":"Object.toString","description":"Returns a string representing the object.    Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition    Syntax object.toString() Description Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:  var o = new Object(); o.toString();           \/\/ returns [object Object]  Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type. Examples Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         See Also  toSource valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toTimeString","title":"Date.toTimeString","description":"Syntax date.toTimeString() Description Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the toTimeString method. The toTimeString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines. Example Example: A basic usage of toTimeString  var d = new Date(1993, 6, 28, 14, 39, 7); println(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT) println(d.toTimeString()); \/\/ prints 14:39:07 GMT-0600 (PDT)  See also  toLocaleTimeString toDateString toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/valueOf","title":"Date.valueOf","description":"Summary  Returns the primitive value of a Date object.     Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  The valueOf method returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC. This method is functionally equivalent to the getTime method. This method is usually called internally by JavaScript and not explicitly in code.   Examples   Example: Using valueOf  x = new Date(56, 6, 17); myVar = x.valueOf();      \/\/assigns -424713600000 to myVar     Example: Using valueOf  x = new Date(56, 6, 17); myVar = x.valueOf();      \/\/assigns -424713600000 to myVar     See also  Object.valueOf, getTime"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/valueOf","title":"Object.valueOf","description":"Summary  Returns the primitive value of the specified object     Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:   [object Object]  You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.   Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.See Also  parseInt toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineGetter","title":"Object.DefineGetter","description":"Binds an object's property to a function to be called when that property is looked up.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__defineGetter__(sprop, fun) Parameters  sprop a string containing the name of the property to bind to the given function   fun a function to be bound to a lookup of the specified property  Description The __defineGetter__ allows a getter to be defined on a pre-existing object. See also  get __lookupGetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineSetter","title":"Object.DefineSetter","description":"Binds an object's property to a function to be called when an attempt is made to set that property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__defineSetter__(sprop, fun) Parameters  sprop a string containing the name of the property to be bound to the given function   fun a function to be called when there is an attempt to set the specified property. This function takes the form function (val) { .\u00a0.\u00a0. }  val an alias for the variable that holds the value attempted to be assigned to prop    Description The __defineSetter__ method allows a setter to be defined on a pre-existing object. See also  set __lookupSetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/HasOwnProperty","title":"Object.HasOwnProperty","description":"Returns a boolean indicating whether the object has the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.hasOwnProperty(prop) Parameters  prop The name of the property to test.  Description Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain. Examples Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          See also for...in in inheritance"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/IsPrototypeOf","title":"Object.IsPrototypeOf","description":"Tests for an object in another object's prototype chain.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 5th Edition    Syntax prototype.isPrototypeOf(object) Parameters  prototype \u00a0 an object to be tested against each link in the prototype chain of the object\u00a0 argument  Note:\u00a0isPrototypeOf differs from instanceof operator. In the expression object instanceof AFunction, the object prototype chain is checked against AFunction.prototype, not against AFunction itself   object the object whose prototype chain will be searched  Description isPrototypeOf allows you to check whether or not an object exists within another object's prototype chain. For example, consider the following prototype chain: function Fee() {   \/\/ . . . }  function Fi() {   \/\/ . . . } Fi.prototype = new Fee();  function Fo() {   \/\/ . . . } Fo.prototype = new Fi();  function Fum() {   \/\/ . . . } Fum.prototype = new Fo();  Later on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this: var fum = new Fum(); . . .  if (Fi.prototype.isPrototypeOf(fum)) {   \/\/ do something safe }  This, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object. See also  instanceof getProtoypeOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupGetter","title":"Object.LookupGetter","description":"Return the function bound as a getter to the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None, but see getOwnPropertyDescriptor and getPrototypeOf.   Syntax obj.__lookupGetter__(sprop) Parameters  sprop a string containing the name of the property whose getter should be returned  Description If a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. __lookupGetter__ can be used to obtain a reference to the getter function. It is now possible to do this in a standardized way using getOwnPropertyDescriptor and getPrototypeOf.See also  get __defineGetter__ __defineSetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupSetter","title":"Object.LookupSetter","description":"Return the function bound as a setter to the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__lookupSetter__(sprop) Parameters  sprop a string containing the name of the property whose setter should be returned  Description If a setter has been defined for an object's property, it's not possible to reference the setter function through that property, because that property refers to the return value of that function. __lookupSetter__ can be used to obtain a reference to the setter function. See also  set __defineSetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/NoSuchMethod","title":"Object.NoSuchMethod","description":"Executes a function when a non-existent method is called on an object.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__noSuchMethod__ = fun Parameters  fun a function that takes the form function (id, args) { .\u00a0.\u00a0. }  id the name of the non-existent method that was called args an array of the arguments passed to the method    Description By default, an attempt to call a method that doesn't exist on an object results in a TypeError being thrown. This behavior can be circumvented by defining a function at that object's __noSuchMethod__ member. The function takes two arguments, the first is the name of the method attempted and the second is an array of the arguments that were passed in the method call. The second argument is an actual array (that is, it inherits through the Array prototype chain) and not the array-like arguments object. If this method cannot be called, either as if undefined by default, if deleted, or if manually set to a non-function, the JavaScript engine will revert to throwing TypeErrors. Example __noSuchMethod__ can be used to simulate multiple inheritance. An example of code that implements a primitive form of multiple inheritance is shown below. \r           \/\/ Doesn't work with multiple inheritance objects as parents  function noMethod(name, args) {   var parents=this.__parents_;      \/\/ Go through all parents      for (var i=0;i<parents.length;i++) {     \/\/ If we find a function on the parent, we call it     if (typeof parents[i][name] ==\"function\") {       return parents[i][name].apply(this, args);     }   }      \/\/ If we get here, the method hasn't been found      throw new TypeError; }  \/\/ Used to add a parent for multiple inheritance  function addParent(obj, parent) {   \/\/ If the object isn't initialized, initialize it      if (!obj.__parents_) {     obj.__parents_=[];     obj.__noSuchMethod__=noMethod;   }      \/\/ Add the parent      obj.__parents_.push(parent); }\r          An example of using this idea is shown below. \r           \/\/ Example base class 1  function NamedThing(name){   this.name=name; }  NamedThing.prototype = {   getName: function() {return this.name;},   setName: function(newName) {this.name=newName;} }  \/\/Example base class 2  function AgedThing(age){   this.age=age; }  AgedThing.prototype = {   getAge: function(){return this.age;},   setAge: function(age){this.age=age;} }  \/\/ Child class. inherits from NamedThing and AgedThing as well as defining address  function Person(name, age, address){   addParent(this, NamedThing.prototype);   NamedThing.call(this, name);   addParent(this, AgedThing.prototype);   AgedThing.call(this, age);   this.address=address; }  Person.prototype = {   getAddr: function() {return this.address;},   setAddr: function(addr) {this.address=addr;} }  var bob=new Person(\"bob\", 25, \"New York\");  console.log(\"getAge is \"+((\"getAge\" in bob)?\"in\":\"not in\")+\" bob\"); console.log(\"bob's age is: \"+bob.getAge()); console.log(\"getName is \"+((\"getName\" in bob)?\"in\":\"not in\")+\" bob\"); console.log(\"bob's name is: \"+bob.getName()); console.log(\"getAddr is \"+((\"getAddr\" in bob)?\"in\":\"not in\")+\" bob\"); console.log(\"bob's address is: \"+bob.getAddr());"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/PropertyIsEnumerable","title":"Object.PropertyIsEnumerable","description":"Returns a Boolean indicating whether the specified property is enumerable.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.propertyIsEnumerable(prop)Parameters  prop\u00a0 The name of the property to test.  Description Every object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false. Note: Starting in JavaScript 1.8.1 (in Firefox 3.6), propertyIsEnumerable(\"prototype\") returns false instead of true; this makes the result compliant with ECMAScript 5. Examples Example: A basic use of propertyIsEnumerable The following example shows the use of propertyIsEnumerable on objects and arrays: \r           var o = {}; var a = []; o.prop = 'is enumerable'; a[0] = 'is enumerable';  o.propertyIsEnumerable('prop');   \/\/ returns true a.propertyIsEnumerable(0);        \/\/ returns true\r          Example: User-defined versus built-in objects The following example demonstrates the enumerability of user-defined versus built-in properties: \r           var a = ['is enumerable'];  a.propertyIsEnumerable(0);          \/\/ returns true a.propertyIsEnumerable('length');   \/\/ returns false  Math.propertyIsEnumerable('random');   \/\/ returns false this.propertyIsEnumerable('Math');     \/\/ returns false\r          Example: Direct versus inherited properties \r           var a = []; a.propertyIsEnumerable('constructor');         \/\/ returns false  function firstConstructor() {   this.property = 'is not enumerable'; } firstConstructor.prototype.firstMethod = function () {};  function secondConstructor() {   this.method = function method() { return 'is enumerable'; }; }  secondConstructor.prototype = new firstConstructor; secondConstructor.prototype.constructor = secondConstructor;  var o = new secondConstructor(); o.arbitraryProperty = 'is enumerable';  o.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true o.propertyIsEnumerable('method');              \/\/ returns true o.propertyIsEnumerable('property');            \/\/ returns false  o.property = 'is enumerable';  o.propertyIsEnumerable('property');            \/\/ returns true  \/\/ These return false as they are on the prototype which  \/\/ propertyIsEnumerable does not consider (even though the last two \/\/ are iteratable with for-in) o.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6) o.propertyIsEnumerable('constructor'); \/\/ returns false o.propertyIsEnumerable('firstMethod'); \/\/ returns false\r          Example: A basic use of propertyIsEnumerable The following example shows the use of propertyIsEnumerable on objects and arrays: \r           var o = {}; var a = []; o.prop = 'is enumerable'; a[0] = 'is enumerable';  o.propertyIsEnumerable('prop');   \/\/ returns true a.propertyIsEnumerable(0);        \/\/ returns true\r          Example: User-defined versus built-in objects The following example demonstrates the enumerability of user-defined versus built-in properties: \r           var a = ['is enumerable'];  a.propertyIsEnumerable(0);          \/\/ returns true a.propertyIsEnumerable('length');   \/\/ returns false  Math.propertyIsEnumerable('random');   \/\/ returns false this.propertyIsEnumerable('Math');     \/\/ returns false\r          Example: Direct versus inherited properties \r           var a = []; a.propertyIsEnumerable('constructor');         \/\/ returns false  function firstConstructor() {   this.property = 'is not enumerable'; } firstConstructor.prototype.firstMethod = function () {};  function secondConstructor() {   this.method = function method() { return 'is enumerable'; }; }  secondConstructor.prototype = new firstConstructor; secondConstructor.prototype.constructor = secondConstructor;  var o = new secondConstructor(); o.arbitraryProperty = 'is enumerable';  o.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true o.propertyIsEnumerable('method');              \/\/ returns true o.propertyIsEnumerable('property');            \/\/ returns false  o.property = 'is enumerable';  o.propertyIsEnumerable('property');            \/\/ returns true  \/\/ These return false as they are on the prototype which  \/\/ propertyIsEnumerable does not consider (even though the last two \/\/ are iteratable with for-in) o.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6) o.propertyIsEnumerable('constructor'); \/\/ returns false o.propertyIsEnumerable('firstMethod'); \/\/ returns false\r          See also for...in"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Unwatch","title":"Object.Unwatch","description":"Removes a watchpoint set with the watch() method.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax unwatch(prop)  Parameters  prop The name of a property of the object to stop watching.  Description The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. By default, this method is inherited by every object descended from Object. Note: The reason for unwatch() to take the property name prop as its only parameter is due to the \"single handler allowing\" behavior of the watch() method.Examples See watch()."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Watch","title":"Object.Watch","description":"Watches for a property to be assigned a value and runs a function when that occurs.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax object.watch(prop, handler)  Parameters  prop The name of a property of the object on which you wish to monitor changes.   handler A function to call when the specified property's value changes.  Description Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details. Watches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval). If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect. To remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object. The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. In Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler. Note: Calling watch() on an object for a specific property overrides and previous handler attached for that property. Examples Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Compatibility  This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work  See also unwatch()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/prototype","title":"Boolean.prototype","description":"Represents the prototype for the Boolean constructor. Description Boolean instances inherit from Boolean.prototype. You can use the constructor's prototype object to add properties or methods to all Boolean instances. Properties  constructor Returns the function that created an instance's prototype. This is the Boolean function by default.    Properties inherited from  Object:__parent__, __proto__   Methods  toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.   toString Returns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toStringmethod.   valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/constructor","title":"Boolean.constructor","description":"Summary  Returns a reference to the Boolean function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toSource","title":"Boolean.toSource","description":"Returns a string representing the source code of the object.    Method of Boolean     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  boolean.toSource()    Parameters  None.   Description  The toSource method returns the following values:    For the built-in Boolean object, toSource returns the following string indicating that the source code is not available:  function Boolean() {    [native code] }   For instances of Boolean, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toString","title":"Boolean.toString","description":"Returns a string representing the specified Boolean object.    Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax bool.toString() Parameters  None.  Description The Boolean object overrides the toString method of the Object object; it does not inherit Object.toString. For Boolean objects, the toString method returns a string representation of the object. JavaScript calls the toString method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation. For Boolean objects and values, the built-in toString method returns the string \"true\" or \"false\" depending on the value of the boolean object. In the following code, flag.toString returns \"true\".  var flag = new Boolean(true) var myVar = flag.toString()  See Also  Object.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/valueOf","title":"Boolean.valueOf","description":"Returns the primitive value of a Boolean object.    Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax bool.valueOf() Parameters None. Description The valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type. This method is usually called internally by JavaScript and not explicitly in code. Examples Example: Using valueOf  x = new Boolean(); myVar = x.valueOf()      \/\/assigns false to myVar  Example: Using valueOf  x = new Boolean(); myVar = x.valueOf()      \/\/assigns false to myVar  See Also Object.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToLocaleString","title":"Object.ToLocaleString","description":"Summary  Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.    Method of Object   ECMA Version: ECMA-262 Edition 3    Syntax   toLocaleString()    Parameters  None.   Description  Object's toLocaleString returns the result of calling toString. This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.   See also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/length","title":"Array.length","description":"An unsigned, 32-bit integer that specifies the number of elements in an array.    Property of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description  The value of the length property is an integer with a positive sign and a value less than 2 to the 32 power (232). You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements does not increase; for example, if you set length to 3 when it is currently 2, the array still contains only 2 elements.   Examples   Example: Iterating over an array  In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.   var numbers = [1,2,3,4,5]; for (var i = 0; i < numbers.length; i++) {   numbers[i] *= 2; } \/\/ numbers is now [2,4,6,8,10];   Example: Shortening an array  The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.   if (statesUS.length > 50) {    statesUS.length=50 }     Example: Iterating over an array  In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.   var numbers = [1,2,3,4,5]; for (var i = 0; i < numbers.length; i++) {   numbers[i] *= 2; } \/\/ numbers is now [2,4,6,8,10];   Example: Shortening an array  The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.   if (statesUS.length > 50) {    statesUS.length=50 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/join","title":"Array.join","description":"Joins all elements of an array into a string.    Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax array.join(separator) Parameters  separator\u00a0 Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.  Description The string conversions of all array elements are joined into one string. Examples Example: Joining an array three different ways The following example creates an array, a, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.  var a = new Array(\"Wind\",\"Rain\",\"Fire\"); var myVar1 = a.join();      \/\/ assigns \"Wind,Rain,Fire\" to myVar1 var myVar2 = a.join(\", \");  \/\/ assigns \"Wind, Rain, Fire\" to myVar2 var myVar3 = a.join(\" + \"); \/\/ assigns \"Wind + Rain + Fire\" to myVar3  Example: Joining an array three different ways The following example creates an array, a, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.  var a = new Array(\"Wind\",\"Rain\",\"Fire\"); var myVar1 = a.join();      \/\/ assigns \"Wind,Rain,Fire\" to myVar1 var myVar2 = a.join(\", \");  \/\/ assigns \"Wind, Rain, Fire\" to myVar2 var myVar3 = a.join(\" + \"); \/\/ assigns \"Wind + Rain + Fire\" to myVar3  See Also  reverse String:split toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/slice","title":"Array.slice","description":"Returns a one-level deep copy of a portion of an array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.slice(begin[, end]) Parameters  begin\u00a0 Zero-based index at which to begin extraction. As a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence.   end\u00a0 Zero-based index at which to end extraction. slice extracts up to but not including end. slice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3). As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence. If end is omitted, slice extracts to the end of the sequence.  Description slice does not alter the original array, but returns a new \"one level deep\" copy that contains copies of the elements sliced from the original array. Elements of the original array are copied into the new array as follows:  For object references (and not the actual object), slice copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.   For strings and numbers (not String and Number objects), slice copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.  If a new element is added to either array, the other array is not affected. Examples Example: Using slice In the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change.  \/\/ Using slice, create newCar from myCar. var myHonda = { color: \"red\", wheels: 4, engine: { cylinders: 4, size: 2.2 } }; var myCar = [myHonda, 2, \"cherry condition\", \"purchased 1997\"]; var newCar = myCar.slice(0, 2);  \/\/ Print the values of myCar, newCar, and the color of myHonda \/\/  referenced from both arrays. print(\"myCar = \" + myCar.toSource()); print(\"newCar = \" + newCar.toSource()); print(\"myCar[0].color = \" + myCar[0].color); print(\"newCar[0].color = \" + newCar[0].color);  \/\/ Change the color of myHonda. myHonda.color = \"purple\"; print(\"The new color of my Honda is \" + myHonda.color);  \/\/ Print the color of myHonda referenced from both arrays. print(\"myCar[0].color = \" + myCar[0].color); print(\"newCar[0].color = \" + newCar[0].color);  This script writes:  myCar = [{color:\"red\", wheels:4, engine:{cylinders:4, size:2.2}}, 2, \"cherry condition\", \"purchased 1997\"] newCar = [{color:\"red\", wheels:4, engine:{cylinders:4, size:2.2}}, 2] myCar[0].color = red  newCar[0].color = red The new color of my Honda is purple myCar[0].color = purple newCar[0].color = purple  Example: Using slice In the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change.  \/\/ Using slice, create newCar from myCar. var myHonda = { color: \"red\", wheels: 4, engine: { cylinders: 4, size: 2.2 } }; var myCar = [myHonda, 2, \"cherry condition\", \"purchased 1997\"]; var newCar = myCar.slice(0, 2);  \/\/ Print the values of myCar, newCar, and the color of myHonda \/\/  referenced from both arrays. print(\"myCar = \" + myCar.toSource()); print(\"newCar = \" + newCar.toSource()); print(\"myCar[0].color = \" + myCar[0].color); print(\"newCar[0].color = \" + newCar[0].color);  \/\/ Change the color of myHonda. myHonda.color = \"purple\"; print(\"The new color of my Honda is \" + myHonda.color);  \/\/ Print the color of myHonda referenced from both arrays. print(\"myCar[0].color = \" + myCar[0].color); print(\"newCar[0].color = \" + newCar[0].color);  This script writes:  myCar = [{color:\"red\", wheels:4, engine:{cylinders:4, size:2.2}}, 2, \"cherry condition\", \"purchased 1997\"] newCar = [{color:\"red\", wheels:4, engine:{cylinders:4, size:2.2}}, 2] myCar[0].color = red  newCar[0].color = red The new color of my Honda is purple myCar[0].color = purple newCar[0].color = purple"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf","title":"Array.indexOf","description":"Returns the first index at which a given element can be found in the array, or -1 if it is not present.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.indexOf(searchElement[, fromIndex]) Parameters  searchElement Element to locate in the array. fromIndex The index at which to begin the search. Defaults to 0, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from front to back. If the calculated index is less than 0, the whole array will be searched.  Description indexOf compares searchElement to elements of the Array using strict equality (the same method used by the ===, or triple-equals, operator). Compatibility indexOf is a recent addition to the ECMA-262 standard; as such it may not be present in all browsers. You can work around this by inserting the following code at the beginning of your scripts, allowing use of indexOf in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object,\u00a0TypeError,\u00a0Number, Math.floor, Math.abs, and\u00a0Math.max have their original value. \u00a0 \r           if (!Array.prototype.indexOf) {     Array.prototype.indexOf = function (searchElement \/*, fromIndex *\/ ) {         \"use strict\";         if (this == null) {             throw new TypeError();         }         var t = Object(this);         var len = t.length >>> 0;         if (len === 0) {             return -1;         }         var n = 0;         if (arguments.length > 0) {             n = Number(arguments[1]);             if (n != n) { \/\/ shortcut for verifying if it's NaN                 n = 0;             } else if (n != 0 && n != Infinity && n != -Infinity) {                 n = (n > 0 || -1) * Math.floor(Math.abs(n));             }         }         if (n >= len) {             return -1;         }         var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);         for (; k < len; k++) {             if (k in t && t[k] === searchElement) {                 return k;             }         }         return -1;     } }\r          Examples Example: Using indexOf The following example uses indexOf to locate values in an array. \r           var array = [2, 5, 9]; var index = array.indexOf(2); \/\/ index is 0 index = array.indexOf(7); \/\/ index is -1\r          Example: Finding all the occurrences of an element The following example uses indexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.  \r           var indices = []; var idx = array.indexOf(element); while (idx != -1) {     indices.push(idx);     idx = array.indexOf(element, idx + 1); }\r           Example: Using indexOf The following example uses indexOf to locate values in an array. \r           var array = [2, 5, 9]; var index = array.indexOf(2); \/\/ index is 0 index = array.indexOf(7); \/\/ index is -1\r          Example: Finding all the occurrences of an element The following example uses indexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.  \r           var indices = []; var idx = array.indexOf(element); while (idx != -1) {     indices.push(idx);     idx = array.indexOf(element, idx + 1); }\r           Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also lastIndexOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/push","title":"Array.push","description":"Mutates an array by appending the given elements and returning the new length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.push(element1, ..., elementN) Parameters  element1, ..., elementN The elements to add to the end of the array.  Returns The new length property of the object upon which the method was called. Description The push method is useful for easily appending values to an array. push is intentionally generic. This method can be called or applied to objects resembling arrays. The push method relies on a length property to determine where to start inserting the given values. If the length property cannot be converted into a number, the index used is 0. This includes the possibility of length being nonexistent, in which case length will also be created. The only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable. Examples Example: Adding elements to an array The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: \"soccer\", \"baseball\", \"football\" and \"swimming\". \r           var sports = [\"soccer\", \"baseball\"]; sports.push(\"football\", \"swimming\");\r          Example: Adding elements to an array The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: \"soccer\", \"baseball\", \"football\" and \"swimming\". \r           var sports = [\"soccer\", \"baseball\"]; sports.push(\"football\", \"swimming\");\r          See Also  pop shift unshift concat"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/splice","title":"Array.splice","description":"Changes the content of an array, adding new elements while removing old elements.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.splice(index , howMany[, element1[, ...[, elementN]]]) array.splice(index[, howMany[, element1[, ...[, elementN]]]]) Parameters  index Index at which to start changing the array. If negative, will begin that many elements from the end.   howMany An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.   element1, ..., elementN The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.  Returns An array containing the removed elements. If only one element is removed, an array of one element is returned. Description If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call. Backward Compatibility JavaScript 1.2 The splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array. JavaScript 1.2 The splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array. Examples Example: Using splice The following script illustrate the use of splice: \r           \/\/ assumes a print function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; print(\"myFish: \" + myFish);  var removed = myFish.splice(2, 0, \"drum\"); print(\"After adding 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(3, 1); print(\"After removing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(2, 1, \"trumpet\"); print(\"After replacing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\"); print(\"After replacing 2: \" + myFish); print(\"removed is: \" + removed);\r          This script displays:  myFish: angel,clown,mandarin,surgeon After adding 1: angel,clown,drum,mandarin,surgeon removed is:  After removing 1: angel,clown,drum,surgeon removed is: mandarin After replacing 1: angel,clown,trumpet,surgeon removed is: drum After replacing 2: parrot,anemone,blue,trumpet,surgeon removed is: angel,clown  Example: Using splice The following script illustrate the use of splice: \r           \/\/ assumes a print function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; print(\"myFish: \" + myFish);  var removed = myFish.splice(2, 0, \"drum\"); print(\"After adding 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(3, 1); print(\"After removing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(2, 1, \"trumpet\"); print(\"After replacing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\"); print(\"After replacing 2: \" + myFish); print(\"removed is: \" + removed);\r          This script displays:  myFish: angel,clown,mandarin,surgeon After adding 1: angel,clown,drum,mandarin,surgeon removed is:  After removing 1: angel,clown,drum,surgeon removed is: mandarin After replacing 1: angel,clown,trumpet,surgeon removed is: drum After replacing 2: parrot,anemone,blue,trumpet,surgeon removed is: angel,clown"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/isArray","title":"Array.isArray","description":"Returns true if an object is an array, false if it is not.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Array.isArray(obj) Parameters  obj The object to be checked  Description This function is part of the ECMAScript 5 standard. See the\u00a0Web Tech Blog for more details. Examples \r           \/\/ all following calls return true Array.isArray([]); Array.isArray([1]); Array.isArray( new Array() ); Array.isArray( Array.prototype ); \/\/ Little known fact: Array.prototype itself is an array.  \/\/ all following calls return false Array.isArray(); Array.isArray({}); Array.isArray(null); Array.isArray(undefined); Array.isArray(17); Array.isArray(\"Array\"); Array.isArray(true); Array.isArray(false);\r          Compatibility Running the following code before any other code will create Array.isArray if it's not natively available. This relies on Object.prototype.toString being unchanged and call resolving to the native Function.prototype.call method. \r           if(!Array.isArray) {   Array.isArray = function (arg) {     return Object.prototype.toString.call(arg) == '[object Array]';   }; }\r          Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 9 10.5 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Bug\u00a0510537 - ES5: Array.isArray"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/prototype","title":"Array.prototype","description":"Represents the prototype for the Array constructor. Description Array instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances. Properties  constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch  Methods Mutator methods These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.  Accessor methods  These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.  Iteration methods Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.  Generic methods Many methods on the JavaScript Array object are designed to be generally applied to all objects which \"look like\" Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set.   concat join pop push reverse shift slice sort splice toSource toString unshift   Introduced in JavaScript 1.6  every filter forEach indexOf lastIndexOf map some    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   Mutator methods These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.  Accessor methods  These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.  Iteration methods Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.  Generic methods Many methods on the JavaScript Array object are designed to be generally applied to all objects which \"look like\" Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set.   concat join pop push reverse shift slice sort splice toSource toString unshift   Introduced in JavaScript 1.6  every filter forEach indexOf lastIndexOf map some    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   See also  Core JavaScript 1.5 Reference:Global Objects:Array Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/constructor","title":"Array.constructor","description":"Summary  Returns a reference to the Array function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.    Property of Array   Implemented in: JavaScript 1.1, NES 2.0   ECMA Version: ECMA-262    Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToSource","title":"Object.ToSource","description":"Returns a string representing the source code of the object.    Method of Object     Implemented in JavaScript 1.3   ECMAScript Edition None   Syntax obj.toSource() Parameters None. Description The toSource method returns the following values:  For the built-in Object object, toSource returns the following string indicating that the source code is not available:   function Object() {    [native code] }   For instances of Object, toSource returns a string representing the source code.  You can call toSource while debugging to examine the contents of an object. It is safe for objects to override the toSource method.\u00a0 For example:  function Person(name) {     this.name = name; } Person.prototype.toSource = function Person_toSource() {     return \"new Person(\" + uneval(this.name) + \")\"; }; alert(new Person(\"Joe\").toSource());    \/\/ --->\u00a0new Person(\"Joe\")  Built-in toSource methods Each core JavaScript type has its own toSource method. These objects are:    toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.    Built-in toSource methods Each core JavaScript type has its own toSource method. These objects are:    toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.    Examples Example: Using toSource The following code defines the Dog object type and creates theDog, an object of type Dog:  function Dog(name, breed, color, sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"girl\");  Calling the toSource method of theDog displays the JavaScript source that defines the object:  theDog.toSource();  returns  ({name:\"Gabby\", breed:\"Lab\", color:\"chocolate\", sex:\"girl\"})  Example: Using toSource The following code defines the Dog object type and creates theDog, an object of type Dog:  function Dog(name, breed, color, sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"girl\");  Calling the toSource method of theDog displays the JavaScript source that defines the object:  theDog.toSource();  returns  ({name:\"Gabby\", breed:\"Lab\", color:\"chocolate\", sex:\"girl\"})  See Also toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToString","title":"Object.ToString","description":"Returns a string representing the object.    Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition    Syntax object.toString() Description Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:  var o = new Object(); o.toString();           \/\/ returns [object Object]  Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type. Examples Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         See Also  toSource valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ValueOf","title":"Object.ValueOf","description":"Summary  Returns the primitive value of the specified object     Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:   [object Object]  You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.   Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.See Also  parseInt toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/pop","title":"Array.pop","description":"Removes the last element from an array and returns that element.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax  array.pop()  Description The pop method removes the last element from an array and returns that value to the caller. pop is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Example Example: Removing the last element of an array The following code creates the myFish array containing four elements, then removes its last element.  myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; popped = myFish.pop();  Example: Removing the last element of an array The following code creates the myFish array containing four elements, then removes its last element.  myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; popped = myFish.pop();  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7)  1.0 5.5 \u00a0 \u00a0           See Also push, shift, unshift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/reverse","title":"Array.reverse","description":"Reverses an array in place.\u00a0 The first array element becomes the last and the last becomes the first.    Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax array.reverse() Parameters None. Description The reverse method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array. Examples Example: Reversing the elements in an array The following example creates an array myArray, containing three elements, then reverses the array.  var myArray = [\"one\", \"two\", \"three\"]; myArray.reverse();  This code changes myArray so that:  myArray[0] is \"three\" myArray[1] is \"two\" myArray[2] is \"one\"  Example: Reversing the elements in an array The following example creates an array myArray, containing three elements, then reverses the array.  var myArray = [\"one\", \"two\", \"three\"]; myArray.reverse();  This code changes myArray so that:  myArray[0] is \"three\" myArray[1] is \"two\" myArray[2] is \"one\"  See Also join, sort"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/shift","title":"Array.shift","description":"Removes the first element from an array and returns that element. This method changes the length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition   Syntax array.shift() Description The shift method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value. shift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Examples Example: Removing an element from an array The following code displays the myFish array before and after removing its first element. It also displays the removed element:  \/\/ assumes a println function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; println(\"myFish before: \" + myFish); var shifted = myFish.shift(); println(\"myFish after: \" + myFish); println(\"Removed this element: \" + shifted);  This example displays the following:  myFish before: angel,clown,mandarin,surgeon myFish after: clown,mandarin,surgeon Removed this element: angel  Example: Removing an element from an array The following code displays the myFish array before and after removing its first element. It also displays the removed element:  \/\/ assumes a println function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; println(\"myFish before: \" + myFish); var shifted = myFish.shift(); println(\"myFish after: \" + myFish); println(\"Removed this element: \" + shifted);  This example displays the following:  myFish before: angel,clown,mandarin,surgeon myFish after: clown,mandarin,surgeon Removed this element: angel  See also  pop push unshift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/sort","title":"Array.sort","description":"Sorts the elements of an array in place and returns the array. Works across all browsers.    Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition   Syntax array.sort([compareFunction]) Parameters  compareFunction\u00a0 Specifies a function that defines the sort order. If omitted, the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.  Description If compareFunction is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic (\"dictionary\" or \"telephone book,\" not numerical) order. For example, \"80\" comes before \"9\" in lexicographic order, but in a numeric sort 9 comes before 80. If compareFunction is supplied, the array elements are sorted according to the return value of the compare function. If a and b are two elements being compared, then:  If compareFunction(a, b) is less than 0, sort a to a lower index than b.   If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.   If compareFunction(a, b) is greater than 0, sort b to a lower index than a.   compareFunction(a, b) must always returns the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined  So, the compare function has the following form: \r           function compare(a, b) {   if (a is less than b by some ordering criterion)      return -1;   if (a is greater than b by the ordering criterion)      return 1;   \/\/ a must be equal to b   return 0; }\r          To compare numbers instead of strings, the compare function can simply subtract b from a: \r           function compareNumbers(a, b) {   return a - b; }\r          Some implementations of JavaScript implement a stable sort: the index partial order of a and b does not change if a and b are equal. If a's index was less than b's before sorting, it will be after sorting, no matter how a and b move due to sorting. Sort is stable in SpiderMonkey and all Mozilla-based browsers starting with Gecko 1.9 (see   bug 224128 ). The behavior of the sort method changed between JavaScript 1.1 and JavaScript 1.2. In JavaScript 1.1, on some platforms, the sort method does not work. This method works on all platforms for JavaScript 1.2. In JavaScript 1.2, this method no longer converts undefined elements to null; instead it sorts them to the high end of the array. For example, assume you have this script: \r           var a = []; a[0] = \"Ant\"; a[5] = \"Zebra\";  \/\/ assumes a print function is defined function writeArray(x) {   for (i = 0; i < x.length; i++)   {     print(x[i]);     if (i < x.length-1)       print(\", \");   } }  writeArray(a); a.sort(); print(\"\\n\"); writeArray(a);\r          In JavaScript 1.1, JavaScript prints:  ant, null, null, null, null, zebra ant, null, null, null, null, zebra  In JavaScript 1.2, JavaScript prints:  ant, undefined, undefined, undefined, undefined, zebra ant, zebra, undefined, undefined, undefined, undefined  The sort()\u00a0method can be conveniently used with closures:\u00a0 \r           var numbers = [4, 2, 5, 1, 3]; numbers.sort(function(a, b) {     return a - b; }); print(numbers);\r          Examples Example: Creating, displaying, and sorting an array The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function. \r           var stringArray = [\"Blue\", \"Humpback\", \"Beluga\"]; var numericStringArray = [\"80\", \"9\", \"700\"]; var numberArray = [40, 1, 5, 200]; var mixedNumericArray = [\"80\", \"9\", \"700\", 40, 1, 5, 200];  function compareNumbers(a, b) {   return a - b; }  \/\/ again, assumes a print function is defined print(\"stringArray: \" + stringArray.join() +\"\\n\"); print(\"Sorted: \" + stringArray.sort() +\"\\n\\n\");  print(\"numberArray: \" + numberArray.join() +\"\\n\"); print(\"Sorted without a compare function: \" + numberArray.sort() +\"\\n\"); print(\"Sorted with compareNumbers: \" + numberArray.sort(compareNumbers) +\"\\n\\n\");  print(\"numericStringArray: \" + numericStringArray.join() +\"\\n\"); print(\"Sorted without a compare function: \" + numericStringArray.sort() +\"\\n\"); print(\"Sorted with compareNumbers: \" + numericStringArray.sort(compareNumbers) +\"\\n\\n\");  print(\"mixedNumericArray: \" + mixedNumericArray.join() +\"\\n\"); print(\"Sorted without a compare function: \" + mixedNumericArray.sort() +\"\\n\"); print(\"Sorted with compareNumbers: \" + mixedNumericArray.sort(compareNumbers) +\"\\n\\n\");\r          This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.  stringArray: Blue,Humpback,Beluga Sorted: Beluga,Blue,Humpback  numberArray: 40,1,5,200 Sorted without a compare function: 1,200,40,5 Sorted with compareNumbers: 1,5,40,200  numericStringArray: 80,9,700 Sorted without a compare function: 700,80,9 Sorted with compareNumbers: 9,80,700  mixedNumericArray: 80,9,700,40,1,5,200 Sorted without a compare function: 1,200,40,5,700,80,9 Sorted with compareNumbers: 1,5,9,40,80,200,700  Example: Creating, displaying, and sorting an array The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function. \r           var stringArray = [\"Blue\", \"Humpback\", \"Beluga\"]; var numericStringArray = [\"80\", \"9\", \"700\"]; var numberArray = [40, 1, 5, 200]; var mixedNumericArray = [\"80\", \"9\", \"700\", 40, 1, 5, 200];  function compareNumbers(a, b) {   return a - b; }  \/\/ again, assumes a print function is defined print(\"stringArray: \" + stringArray.join() +\"\\n\"); print(\"Sorted: \" + stringArray.sort() +\"\\n\\n\");  print(\"numberArray: \" + numberArray.join() +\"\\n\"); print(\"Sorted without a compare function: \" + numberArray.sort() +\"\\n\"); print(\"Sorted with compareNumbers: \" + numberArray.sort(compareNumbers) +\"\\n\\n\");  print(\"numericStringArray: \" + numericStringArray.join() +\"\\n\"); print(\"Sorted without a compare function: \" + numericStringArray.sort() +\"\\n\"); print(\"Sorted with compareNumbers: \" + numericStringArray.sort(compareNumbers) +\"\\n\\n\");  print(\"mixedNumericArray: \" + mixedNumericArray.join() +\"\\n\"); print(\"Sorted without a compare function: \" + mixedNumericArray.sort() +\"\\n\"); print(\"Sorted with compareNumbers: \" + mixedNumericArray.sort(compareNumbers) +\"\\n\\n\");\r          This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.  stringArray: Blue,Humpback,Beluga Sorted: Beluga,Blue,Humpback  numberArray: 40,1,5,200 Sorted without a compare function: 1,200,40,5 Sorted with compareNumbers: 1,5,40,200  numericStringArray: 80,9,700 Sorted without a compare function: 700,80,9 Sorted with compareNumbers: 9,80,700  mixedNumericArray: 80,9,700,40,1,5,200 Sorted without a compare function: 1,200,40,5,700,80,9 Sorted with compareNumbers: 1,5,9,40,80,200,700  See Also join, reverse"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toSource","title":"Array.toSource","description":"Summary  Returns a string representing the source code of the array.     Method of Array     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  array.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Array object, toSource returns the following string indicating that the source code is not available:  function Array() {     [native code] }   For instances of Array, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an array.   Examples   Example: Examining the source code of an array  To examine the source code of an array:  alpha = new Array(\"a\", \"b\", \"c\"); alpha.toSource()                    \/\/returns [\"a\", \"b\", \"c\"]   Example: Examining the source code of an array  To examine the source code of an array:  alpha = new Array(\"a\", \"b\", \"c\"); alpha.toSource()                    \/\/returns [\"a\", \"b\", \"c\"]   See Also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/concat","title":"Array.concat","description":"Returns a new array comprised of this array joined with other array(s) and\/or value(s).    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.concat(value1, value2, ..., valueN) Parameters  valueN\u00a0 Arrays and\/or values to concatenate to the resulting array.  Description concat creates a new array consisting of the elements in the this object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array). concat does not alter this or any of the arrays provided as arguments but instead returns a \"one level deep\" copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows:  Object references (and not the actual object): concat copies object references into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.   Strings and numbers (not String and Number objects): concat copies the values of strings and numbers into the new array.  Any operation on the new array will have no effect on the original arrays, and vice versa. Examples Example: Concatenating two arrays The following code concatenates two arrays: \r           var alpha = [\"a\", \"b\", \"c\"]; var numeric = [1, 2, 3];  \/\/ creates array [\"a\", \"b\", \"c\", 1, 2, 3]; alpha and numeric are unchanged var alphaNumeric = alpha.concat(numeric);\r          Example: Concatenating three arrays The following code concatenates three arrays: \r           var num1 = [1, 2, 3]; var num2 = [4, 5, 6]; var num3 = [7, 8, 9];  \/\/ creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged var nums = num1.concat(num2, num3);\r          Example: Concatenating values to an array The following code concatenates three values to an array: \r           var alpha = ['a', 'b', 'c'];  \/\/ creates array [\"a\", \"b\", \"c\", 1, 2, 3], leaving alpha unchanged var alphaNumeric = alpha.concat(1, [2, 3]);\r          Example: Concatenating two arrays The following code concatenates two arrays: \r           var alpha = [\"a\", \"b\", \"c\"]; var numeric = [1, 2, 3];  \/\/ creates array [\"a\", \"b\", \"c\", 1, 2, 3]; alpha and numeric are unchanged var alphaNumeric = alpha.concat(numeric);\r          Example: Concatenating three arrays The following code concatenates three arrays: \r           var num1 = [1, 2, 3]; var num2 = [4, 5, 6]; var num3 = [7, 8, 9];  \/\/ creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged var nums = num1.concat(num2, num3);\r          Example: Concatenating values to an array The following code concatenates three values to an array: \r           var alpha = ['a', 'b', 'c'];  \/\/ creates array [\"a\", \"b\", \"c\", 1, 2, 3], leaving alpha unchanged var alphaNumeric = alpha.concat(1, [2, 3]);"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/unshift","title":"Array.unshift","description":"Adds one or more elements to the beginning of an array and returns the new length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax arrayName.unshift(element1, ..., elementN)  Parameters  element1, ..., elementN The elements to add to the front of the array.  Returns The new length property of the object upon which the method was called.   Description The unshift method inserts the given values to the beginning of an array-like object. unshift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Examples Example: Adding elements to an array The following code displays the myFish array before and after adding elements to it.  \/\/ assumes a println function exists myFish = [\"angel\", \"clown\"]; println(\"myFish before: \" + myFish); unshifted = myFish.unshift(\"drum\", \"lion\"); println(\"myFish after: \" + myFish); println(\"New length: \" + unshifted);  This example displays the following:  myFish before: [\"angel\", \"clown\"] myFish after: [\"drum\", \"lion\", \"angel\", \"clown\"] New length: 4  Example: Adding elements to an array The following code displays the myFish array before and after adding elements to it.  \/\/ assumes a println function exists myFish = [\"angel\", \"clown\"]; println(\"myFish before: \" + myFish); unshifted = myFish.unshift(\"drum\", \"lion\"); println(\"myFish after: \" + myFish); println(\"New length: \" + unshifted);  This example displays the following:  myFish before: [\"angel\", \"clown\"] myFish after: [\"drum\", \"lion\", \"angel\", \"clown\"] New length: 4  See Also  pop push shift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toString","title":"Array.toString","description":"Returns a string representing the specified array and its elements.    Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax array.toString() Parameters None.   JavaScript 1.8.5 note Starting in\u00a0JavaScript 1.8.5, and consistent with ECMAScript 5th edition semantics, the toString()\u00a0method is generic and can be used with any object. If the object has a\u00a0join()\u00a0method, it will be called and that value will be returned. \u00a0Otherwise Object.prototype.toString()\u00a0will be called, and the resulting value will be returned.  Description The Array object overrides the toString method of Object. For Array objects, the toString method joins the array and returns one string containing each array element separated by commas. For example, the following code creates an array and uses toString to convert the array to a string. var monthNames = ['Jan', 'Feb', 'Mar', 'Apr']; var myVar = monthNames.toString(); \/\/ assigns \"Jan,Feb,Mar,Apr\" to myVar.  JavaScript calls the toString method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation. See also toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/lastIndexOf","title":"Array.lastIndexOf","description":"Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.lastIndexOf(searchElement[, fromIndex]) Parameters  searchElement Element to locate in the array. fromIndex The index at which to start searching backwards. Defaults to the array's length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.  Description lastIndexOf compares searchElement to elements of the Array using strict equality (the same method used by the ===, or triple-equals, operator). Compatibility lastIndexOf is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of lastIndexOf in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object,\u00a0TypeError,\u00a0Number, Math.floor, Math.abs, and Math.min have their original values.  \r           if (!Array.prototype.lastIndexOf) {   Array.prototype.lastIndexOf = function(searchElement \/*, fromIndex*\/)   {     \"use strict\";      if (this == null)       throw new TypeError();      var t = Object(this);     var len = t.length >>> 0;     if (len === 0)       return -1;      var n = len;     if (arguments.length > 1)     {       n = Number(arguments[1]);       if (n != n)         n = 0;       else if (n != 0 && n != (1 \/ 0) && n != -(1 \/ 0))         n = (n > 0 || -1) * Math.floor(Math.abs(n));     }      var k = n >= 0           ? Math.min(n, len - 1)           : len - Math.abs(n);      for (; k >= 0; k--)     {       if (k in t && t[k] === searchElement)         return k;     }     return -1;   }; }\r          Again, note that this implementation aims for absolute compatibility with lastIndexOf in Firefox and the SpiderMonkey JavaScript engine, including in several cases which are arguably edge cases. If you intend to use this in real-world applications, you may be able to calculate from with less complicated code if you ignore those cases. Examples Example: Using lastIndexOf The following example uses lastIndexOf to locate values in an array. var array = [2, 5, 9, 2]; var index = array.lastIndexOf(2); \/\/ index is 3 index = array.lastIndexOf(7); \/\/ index is -1 index = array.lastIndexOf(2, 3); \/\/ index is 3 index = array.lastIndexOf(2, 2); \/\/ index is 0 index = array.lastIndexOf(2, -2); \/\/ index is 0 index = array.lastIndexOf(2, -1); \/\/ index is 3  Example: Finding all the occurrences of an element The following example uses lastIndexOf to find all the indices of an element in a given array, using push to add them to another array as they are found. var indices = []; var idx = array.lastIndexOf(element); while (idx\u00a0!= -1) {   indices.push(idx);   idx = (idx > 0\u00a0? array.lastIndexOf(element, idx - 1)\u00a0: -1); }  Note that we have to handle the case idx == 0 separately here because the element will always be found regardless of the fromIndex parameter if it is the first element of the array. This is different from the indexOf method. Example: Using lastIndexOf The following example uses lastIndexOf to locate values in an array. var array = [2, 5, 9, 2]; var index = array.lastIndexOf(2); \/\/ index is 3 index = array.lastIndexOf(7); \/\/ index is -1 index = array.lastIndexOf(2, 3); \/\/ index is 3 index = array.lastIndexOf(2, 2); \/\/ index is 0 index = array.lastIndexOf(2, -2); \/\/ index is 0 index = array.lastIndexOf(2, -1); \/\/ index is 3  Example: Finding all the occurrences of an element The following example uses lastIndexOf to find all the indices of an element in a given array, using push to add them to another array as they are found. var indices = []; var idx = array.lastIndexOf(element); while (idx\u00a0!= -1) {   indices.push(idx);   idx = (idx > 0\u00a0? array.lastIndexOf(element, idx - 1)\u00a0: -1); }  Note that we have to handle the case idx == 0 separately here because the element will always be found regardless of the fromIndex parameter if it is the first element of the array. This is different from the indexOf method. Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also indexOf \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/filter","title":"Array.filter","description":"Creates a new array with all elements that pass the test implemented by the provided function.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.filter(callback[, thisObject]) Parameters  callback Function to test each element of the array. thisObject Object to use as this when executing callback.  Description filter calls a provided callback function once for each element in an array, and constructs a new array of all the values for which callback returns a true value. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the callback test are simply skipped, and are not included in the new array. callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed. If a thisObject parameter is provided to filter, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead. filter does not mutate the array on which it is called. The range of elements processed by filter is set before the first invocation of callback. Elements which are appended to the array after the call to filter begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time filter visits them; elements that are deleted are not visited. Compatibility filter is a JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of filter in ECMA-262 implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object\u00a0and\u00a0TypeError\u00a0have their original values, that\u00a0fun.call\u00a0evaluates to the original value of\u00a0Function.prototype.call, and that Array.prototype.push has its original value.\u00a0 \r           if (!Array.prototype.filter) {   Array.prototype.filter = function(fun \/*, thisp *\/)   {     \"use strict\";      if (this == null)       throw new TypeError();      var t = Object(this);     var len = t.length >>> 0;     if (typeof fun != \"function\")       throw new TypeError();      var res = [];     var thisp = arguments[1];     for (var i = 0; i < len; i++)     {       if (i in t)       {         var val = t[i]; \/\/ in case fun mutates this         if (fun.call(thisp, val, i, t))           res.push(val);       }     }      return res;   }; }\r          Examples Example: Filtering out all small values The following example uses filter to create a filtered array that has all elements with values less than 10 removed. \r           function isBigEnough(element, index, array) {   return (element >= 10); } var filtered = [12, 5, 8, 130, 44].filter(isBigEnough); \/\/ filtered is [12, 130, 44]\r          Example: Filtering out all small values The following example uses filter to create a filtered array that has all elements with values less than 10 removed. \r           function isBigEnough(element, index, array) {   return (element >= 10); } var filtered = [12, 5, 8, 130, 44].filter(isBigEnough); \/\/ filtered is [12, 130, 44]\r          Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/forEach","title":"Array.forEach","description":"Executes a provided function once per array element.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.forEach(callback[, thisArg]) Parameters  callback Function to execute for each element. thisArg Object to use as this when executing callback.  Description forEach executes the provided function (callback) once for each element present in the array. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. callback is invoked with three arguments:  the element value the element index the array being traversed  If a thisArg parameter is provided to forEach, it will be used as the this value for each callback invocation as if callback.call(thisArg, element, index, array) was called. If thisArg is undefined or null, the this value within the function depends on whether the function is in strict mode or not (passed value if in strict mode, global object if in non-strict mode). The range of elements processed by forEach is set before the first invocation of callback. Elements which are appended to the array after the call to forEach begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time forEach visits them; elements that are deleted are not visited. Compatibility forEach is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of forEach in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming Object and TypeError have their original values and that callback.call\u00a0evaluates to the original value of Function.prototype.call.  \r           \/\/ Production steps of ECMA-262, Edition 5, 15.4.4.18 \/\/ Reference: http:\/\/es5.github.com\/#x15.4.4.18 if ( !Array.prototype.forEach ) {    Array.prototype.forEach = function( callback, thisArg ) {      var T, k;      if ( this == null ) {       throw new TypeError( \" this is null or not defined\" );     }      \/\/ 1. Let O be the result of calling ToObject passing the |this| value as the argument.     var O = Object(this);      \/\/ 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".     \/\/ 3. Let len be ToUint32(lenValue).     var len = O.length >>> 0; \/\/ Hack to convert O.length to a UInt32      \/\/ 4. If IsCallable(callback) is false, throw a TypeError exception.     \/\/ See: http:\/\/es5.github.com\/#x9.11     if ( {}.toString.call(callback) != \"[object Function]\" ) {       throw new TypeError( callback + \" is not a function\" );     }      \/\/ 5. If thisArg was supplied, let T be thisArg; else let T be undefined.     if ( thisArg ) {       T = thisArg;     }      \/\/ 6. Let k be 0     k = 0;      \/\/ 7. Repeat, while k < len     while( k < len ) {        var kValue;        \/\/ a. Let Pk be ToString(k).       \/\/   This is implicit for LHS operands of the in operator       \/\/ b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.       \/\/   This step can be combined with c       \/\/ c. If kPresent is true, then       if ( k in O ) {          \/\/ i. Let kValue be the result of calling the Get internal method of O with argument Pk.         kValue = O[ k ];          \/\/ ii. Call the Call internal method of callback with T as the this value and         \/\/ argument list containing kValue, k, and O.         callback.call( T, kValue, k, O );       }       \/\/ d. Increase k by 1.       k++;     }     \/\/ 8. return undefined   }; }\r          Examples Printing the contents of an array The following code logs a line for each element in an array: \r           function logArrayElements(element, index, array) {     console.log(\"a[\" + index + \"] = \" + element); } [2, 5, 9].forEach(logArrayElements); \/\/ logs: \/\/ a[0] = 2 \/\/ a[1] = 5 \/\/ a[2] = 9\r          An object copy function The following code creates a copy of a given object. There are different ways to create a copy of an object. This one is just one of them here to explain how Array.prototype.forEach works. It uses a couple of new ECMAScript 5 Object.* functions. \r           function copy(o){   var copy = Object.create( Object.getPrototypeOf(o) );   var propNames = Object.getOwnPropertyNames(o);   propNames.forEach(function(name){                       var desc = Object.getOwnPropertyDescriptor(o, name);                       Object.defineProperty(copy, name, desc);                     });   return copy; }   var o1 = {a:1, b:2}; var o2 = copy(o1); \/\/ o2 looks like o1 now\r          Printing the contents of an array The following code logs a line for each element in an array: \r           function logArrayElements(element, index, array) {     console.log(\"a[\" + index + \"] = \" + element); } [2, 5, 9].forEach(logArrayElements); \/\/ logs: \/\/ a[0] = 2 \/\/ a[1] = 5 \/\/ a[2] = 9\r          An object copy function The following code creates a copy of a given object. There are different ways to create a copy of an object. This one is just one of them here to explain how Array.prototype.forEach works. It uses a couple of new ECMAScript 5 Object.* functions. \r           function copy(o){   var copy = Object.create( Object.getPrototypeOf(o) );   var propNames = Object.getOwnPropertyNames(o);   propNames.forEach(function(name){                       var desc = Object.getOwnPropertyDescriptor(o, name);                       Object.defineProperty(copy, name, desc);                     });   return copy; }   var o1 = {a:1, b:2}; var o2 = copy(o1); \/\/ o2 looks like o1 now\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat tables"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/every","title":"Array.every","description":"Tests whether all elements in the array pass the test implemented by the provided function.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.every(callback[, thisObject]) Parameters  callback Function to test for each element. thisObject Object to use as this when executing callback.  Description every executes the provided callback function once for each element present in the array until it finds one where callback returns a false value. If such an element is found, the every method immediately returns false. Otherwise, if callback returned a true value for all elements, every will return true. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed. If a thisObject parameter is provided to every, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead. every does not mutate the array on which it is called. The range of elements processed by every is set before the first invocation of callback. Elements which are appended to the array after the call to every begins will not be visited by callback. If existing elements of the array are changed, their value as passed to callback will be the value at the time every visits them; elements that are deleted are not visited. every acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns true. (It is vacuously true that all elements of the empty set satisfy any given condition.) Compatibility every is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of every in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object\u00a0and\u00a0TypeError\u00a0have their original values and that\u00a0fun.call\u00a0evaluates to the original value of\u00a0Function.prototype.call. \u00a0 \r           if (!Array.prototype.every) {   Array.prototype.every = function(fun \/*, thisp *\/)   {     \"use strict\";      if (this == null)       throw new TypeError();      var t = Object(this);     var len = t.length >>> 0;     if (typeof fun != \"function\")       throw new TypeError();      var thisp = arguments[1];     for (var i = 0; i < len; i++)     {       if (i in t && !fun.call(thisp, t[i], i, t))         return false;     }      return true;   }; }\r          Examples Example: Testing size of all array elements The following example tests whether all elements in the array are bigger than 10. \r           function isBigEnough(element, index, array) {   return (element >= 10); } var passed = [12, 5, 8, 130, 44].every(isBigEnough); \/\/ passed is false passed = [12, 54, 18, 130, 44].every(isBigEnough); \/\/ passed is true\r          Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Example: Testing size of all array elements The following example tests whether all elements in the array are bigger than 10. \r           function isBigEnough(element, index, array) {   return (element >= 10); } var passed = [12, 5, 8, 130, 44].every(isBigEnough); \/\/ passed is false passed = [12, 54, 18, 130, 44].every(isBigEnough); \/\/ passed is true\r          Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/map","title":"Array.map","description":"Creates a new array with the results of calling a provided function on every element in this array.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.map(callback[, thisArg]) Parameters  callback Function that produces an element of the new Array from an element of the current one. thisArg Object to use as this when executing callback.  Description map calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed. If a thisArg parameter is provided to map, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead. map does not mutate the array on which it is called. The range of elements processed by map is set before the first invocation of callback. Elements which are appended to the array after the call to map begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time map visits them; elements that are deleted are not visited. Compatibility map is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of map in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object,\u00a0TypeError, and Array have their original values and that\u00a0callback.call\u00a0evaluates to the original value of\u00a0Function.prototype.call. \u00a0 \r           \/\/ Production steps of ECMA-262, Edition 5, 15.4.4.19 \/\/ Reference: http:\/\/es5.github.com\/#x15.4.4.19 if (!Array.prototype.map) {   Array.prototype.map = function(callback, thisArg) {      var T, A, k;      if (this == null) {       throw new TypeError(\" this is null or not defined\");     }      \/\/ 1. Let O be the result of calling ToObject passing the |this| value as the argument.     var O = Object(this);      \/\/ 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".     \/\/ 3. Let len be ToUint32(lenValue).     var len = O.length >>> 0;      \/\/ 4. If IsCallable(callback) is false, throw a TypeError exception.     \/\/ See: http:\/\/es5.github.com\/#x9.11     if ({}.toString.call(callback) != \"[object Function]\") {       throw new TypeError(callback + \" is not a function\");     }      \/\/ 5. If thisArg was supplied, let T be thisArg; else let T be undefined.     if (thisArg) {       T = thisArg;     }      \/\/ 6. Let A be a new array created as if by the expression new Array(len) where Array is     \/\/ the standard built-in constructor with that name and len is the value of len.     A = new Array(len);      \/\/ 7. Let k be 0     k = 0;      \/\/ 8. Repeat, while k < len     while(k < len) {        var kValue, mappedValue;        \/\/ a. Let Pk be ToString(k).       \/\/   This is implicit for LHS operands of the in operator       \/\/ b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.       \/\/   This step can be combined with c       \/\/ c. If kPresent is true, then       if (k in O) {          \/\/ i. Let kValue be the result of calling the Get internal method of O with argument Pk.         kValue = O[ k ];          \/\/ ii. Let mappedValue be the result of calling the Call internal method of callback         \/\/ with T as the this value and argument list containing kValue, k, and O.         mappedValue = callback.call(T, kValue, k, O);          \/\/ iii. Call the DefineOwnProperty internal method of A with arguments         \/\/ Pk, Property Descriptor {Value: mappedValue, Writable: true, Enumerable: true, Configurable: true},         \/\/ and false.          \/\/ In browsers that support Object.defineProperty, use the following:         \/\/ Object.defineProperty(A, Pk, { value: mappedValue, writable: true, enumerable: true, configurable: true });          \/\/ For best browser support, use the following:         A[ k ] = mappedValue;       }       \/\/ d. Increase k by 1.       k++;     }      \/\/ 9. return A     return A;   };       }\r          Examples Example: Pluralizing the words (strings) in an array The following code creates an array of \"plural\" forms of nouns from an array of their singular forms. \r           function fuzzyPlural(single) {   return single.replace(\/o\/g, 'e'); }  var words = [\"foot\", \"goose\", \"moose\"]; console.log(words.map(fuzzyPlural));  \/\/ [\"feet\", \"geese\", \"meese\"]\r          Example: Mapping an array of numbers to an array of square roots The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array. \r           var numbers = [1, 4, 9]; var roots = numbers.map(Math.sqrt); \/* roots is now [1, 2, 3], numbers is still [1, 4, 9] *\/\r          Example: using map generically This example shows how to use map on a string to get an array of bytes in the ASCII encoding representing the character values: \r           var map = Array.prototype.map var a = map.call(\"Hello World\", function(x) { return x.charCodeAt(0); }) \/\/ a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r          Tricky use case (inspired by this blog post) It is common to use the callback with one argument (the element being traversed). Some functions are also commonly used with one argument. These habits may lead to confusing behaviors. \r           \/\/ Consider: [\"1\", \"2\", \"3\"].map(parseInt); \/\/ While one could expect [1, 2, 3] \/\/ The actual result is [1, NaN, NaN]  \/\/ parseInt is often used with one argument, but takes two. The second being the radix \/\/ To the callback function, Array.prototype.map passes 3 arguments: the element, the index, the array \/\/ The third argument is ignored by parseInt, but not the second one, hence the possible confusion. \/\/ See the blog post for more details\r          Example: Pluralizing the words (strings) in an array The following code creates an array of \"plural\" forms of nouns from an array of their singular forms. \r           function fuzzyPlural(single) {   return single.replace(\/o\/g, 'e'); }  var words = [\"foot\", \"goose\", \"moose\"]; console.log(words.map(fuzzyPlural));  \/\/ [\"feet\", \"geese\", \"meese\"]\r          Example: Mapping an array of numbers to an array of square roots The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array. \r           var numbers = [1, 4, 9]; var roots = numbers.map(Math.sqrt); \/* roots is now [1, 2, 3], numbers is still [1, 4, 9] *\/\r          Example: using map generically This example shows how to use map on a string to get an array of bytes in the ASCII encoding representing the character values: \r           var map = Array.prototype.map var a = map.call(\"Hello World\", function(x) { return x.charCodeAt(0); }) \/\/ a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r          Tricky use case (inspired by this blog post) It is common to use the callback with one argument (the element being traversed). Some functions are also commonly used with one argument. These habits may lead to confusing behaviors. \r           \/\/ Consider: [\"1\", \"2\", \"3\"].map(parseInt); \/\/ While one could expect [1, 2, 3] \/\/ The actual result is [1, NaN, NaN]  \/\/ parseInt is often used with one argument, but takes two. The second being the radix \/\/ To the callback function, Array.prototype.map passes 3 arguments: the element, the index, the array \/\/ The third argument is ignored by parseInt, but not the second one, hence the possible confusion. \/\/ See the blog post for more details\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat tables"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/some","title":"Array.some","description":"Tests whether some element in the array passes the test implemented by the provided function.    Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition    Syntax array.some(callback[, thisObject]) Parameters  callback Function to test for each element. thisObject Object to use as this when executing callback.  Description some executes the callback function once for each element present in the array until it finds one where callback returns a true value. If such an element is found, some immediately returns true. Otherwise, some returns false. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed. If a thisObject parameter is provided to some, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead. some does not mutate the array on which it is called. The range of elements processed by some is set before the first invocation of callback. Elements that are appended to the array after the call to some begins will not be visited by callback. If an existing, unvisited element of the array is changed by callback, its value passed to the visiting callback will be the value at the time that some visits that element's index; elements that are deleted are not visited. Compatibility some is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of some in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object\u00a0and\u00a0TypeError\u00a0have their original values and that\u00a0fun.call\u00a0evaluates to the original value of\u00a0Function.prototype.call. \u00a0 \u00a0 <meta http-equiv=\"content-type\" content=\"text\/html; charset=utf-8\"\/> <meta http-equiv=\"content-type\" content=\"text\/html; charset=utf-8\"\/> if (!Array.prototype.some) {   Array.prototype.some = function(fun \/*, thisp *\/)   {     \"use strict\";      if (this == null)       throw new TypeError();      var t = Object(this);     var len = t.length >>> 0;     if (typeof fun\u00a0!= \"function\")       throw new TypeError();      var thisp = arguments[1];     for (var i = 0; i < len; i++)     {       if (i in t && fun.call(thisp, t[i], i, t))         return true;     }      return false;   }; }  Examples Example: Testing size of all array elements The following example tests whether some element in the array is bigger than 10. function isBigEnough(element, index, array) {   return (element >= 10); } var passed = [2, 5, 8, 1, 4].some(isBigEnough); \/\/ passed is false passed = [12, 5, 8, 1, 4].some(isBigEnough); \/\/ passed is true  Example: Testing size of all array elements The following example tests whether some element in the array is bigger than 10. function isBigEnough(element, index, array) {   return (element >= 10); } var passed = [2, 5, 8, 1, 4].some(isBigEnough); \/\/ passed is false passed = [12, 5, 8, 1, 4].some(isBigEnough); \/\/ passed is true  Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/ReduceRight","title":"Array.ReduceRight","description":"Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.    Method of Array     Implemented in JavaScript 1.8   ECMAScript Edition ECMAScript 5th Edition    Syntax array.reduceRight(callback[, initialValue]) Parameters  callback Function to execute on each value in the array. initialValue Object to use as the first argument to the first call of the callback.  Description reduceRight executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring. The call to the reduceRight callback would look something like this: array.reduceRight(function(previousValue, currentValue, index, array) {     \/\/ ... });  The first time the function is called, the previousValue and currentValue can be one of two values. If an initialValue was provided in the call to reduceRight, then previousValue will be equal to initialValue and currentValue will be equal to the last value in the array. If no initialValue was provided, then previousValue will be equal to the last value in the array and currentValue will be equal to the second-to-last value. Some example run-throughs of the function would look like this: \r           [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {     return previousValue + currentValue; });  \/\/ First call previousValue = 4, currentValue = 3, index = 3  \/\/ Second call previousValue = 7, currentValue = 2, index = 2  \/\/ Third call previousValue = 9, currentValue = 1, index = 1  \/\/ Fourth call previousValue = 10, currentValue = 0, index = 0  \/\/ array is always the object [0,1,2,3,4] upon which reduceRight was called  \/\/ Return Value: 10\r          And if you were to provide an initialValue, the result would look like this: \r           [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {     return previousValue + currentValue; }, 10);  \/\/ First call previousValue = 10, currentValue = 4, index = 4  \/\/ Second call previousValue = 14, currentValue = 3, index = 3  \/\/ Third call previousValue = 17, currentValue = 2, index = 2  \/\/ Fourth call previousValue = 19, currentValue = 1, index = 1  \/\/ Fifth call previousValue = 20, currentValue = 0, index = 0  \/\/ array is always the object [0,1,2,3,4] upon which reduceRight was called  \/\/ Return Value: 20\r          Compatibility reduceRight is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of reduceRight in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\u00a0Object\u00a0and\u00a0TypeError\u00a0have their original value\u00a0and that\u00a0callbackfn.call\u00a0evaluates to the original value of\u00a0Function.prototype.call. \u00a0 \r           if (!Array.prototype.reduceRight) {   Array.prototype.reduceRight = function(callbackfn \/*, initialValue *\/)   {     \"use strict\";      if (this == null)       throw new TypeError();      var t = Object(this);     var len = t.length >>> 0;     if (typeof callbackfn != \"function\")       throw new TypeError();      \/\/ no value to return if no initial value, empty array     if (len === 0 && arguments.length === 1)       throw new TypeError();      var k = len - 1;     var accumulator;     if (arguments.length >= 2)     {       accumulator = arguments[1];     }     else     {       do       {         if (k in this)         {           accumulator = this[k--];           break;         }          \/\/ if array contains no values, no initial value to return         if (--k < 0)           throw new TypeError();       }       while (true);     }      while (k >= 0)     {       if (k in t)         accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);       k--;     }      return accumulator;   }; }\r          Examples Example: Sum up all values within an array \r           var total = [0, 1, 2, 3].reduceRight(function(a, b) {     return a + b; }); \/\/ total == 6\r          Example: Flatten an array of arrays \r           var flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {     return a.concat(b); }, []); \/\/ flattened is [4, 5, 2, 3, 0, 1]\r          Example: Sum up all values within an array \r           var total = [0, 1, 2, 3].reduceRight(function(a, b) {     return a + b; }); \/\/ total == 6\r          Example: Flatten an array of arrays \r           var flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {     return a.concat(b); }, []); \/\/ flattened is [4, 5, 2, 3, 0, 1]\r          See Also  reduce  Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.0 (1.9)  (Supported) 9 10.5 4.0         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/Reduce","title":"Array.Reduce","description":"Syntax array.reduce(callback[, initialValue]) Parameters  callback Function to execute on each value in the array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied. (See below.) currentValue The current element being processed in the array. index The index of the current element being processed in the array. array The array reduce was called upon.   initialValue Object to use as the first argument to the first call of the callback.  Description reduce executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring. The first time the callback is called, previousValue and currentValue can be one of two values. If initialValue is provided in the call to reduce, then previousValue will be equal to initialValue and currentValue will be equal to the first value in the array. If no initialValue was provided, then previousValue will be equal to the first value in the array and currentValue will be equal to the second. Suppose the following use of reduce occurred: \r           [0,1,2,3,4].reduce(function(previousValue, currentValue, index, array){   return previousValue + currentValue; });\r          The callback would be invoked four times, with the arguments and return values in each call being as follows:    \u00a0 previousValue  currentValue  index array return value     first call 0  1  1  [0,1,2,3,4] 1    second call 1  2  2  [0,1,2,3,4] 3    third call 3  3  3  [0,1,2,3,4] 6    fourth call 6  4  4  [0,1,2,3,4] 10     The value returned by reduce would be that of the last callback invocation (10). If you were to provide an initial value as the second argument to reduce, the result would look like this: \r           [0,1,2,3,4].reduce(function(previousValue, currentValue, index, array){   return previousValue + currentValue; }, 10);\r             \u00a0 previousValue  currentValue  index array return value     first call 10  0  0  [0,1,2,3,4] 10    second call 10  1  1 [0,1,2,3,4] 11    third call 11  2  2  [0,1,2,3,4] 13    fourth call 13  3  3  [0,1,2,3,4] 16    fifth call 16 4 4 [0,1,2,3,4] 20     The value returned by reduce this time would be, of course, 20. Compatibility Array.prototype.reduce is an ECMAScript 5 addition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of reduce in implementations which do not natively support it. \r           if ( !Array.prototype.reduce ) {   Array.prototype.reduce = function reduce(accumulator){         var i, l = this.length, curr;                  if(typeof accumulator !== \"function\") \/\/ ES5 : \"If IsCallable(callbackfn) is false, throw a TypeError exception.\"           throw new TypeError(\"First argument is not callable\");          if((l == 0 || l === null) && (arguments.length <= 1))\/\/ == on purpose to test 0 and false.           throw new TypeError(\"Array length is 0 and no second argument\");                  if(arguments.length <= 1){           curr = this[0]; \/\/ Increase i to start searching the secondly defined element in the array           i = 1; \/\/ start accumulating at the second element         }         else{           curr = arguments[1];         }                  for(i = i || 0 ; i < l ; ++i){           if(i in this)             curr = accumulator.call(undefined, curr, this[i], i, this);         }                  return curr;       };   }\r          Examples Example: Sum up all values within an array \r           var total = [0, 1, 2, 3].reduce(function(a, b) {     return a + b; }); \/\/ total == 6\r          Example: Flatten an array of arrays \r           var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {     return a.concat(b); }); \/\/ flattened is [0, 1, 2, 3, 4, 5]\r          Example: Sum up all values within an array \r           var total = [0, 1, 2, 3].reduce(function(a, b) {     return a + b; }); \/\/ total == 6\r          Example: Flatten an array of arrays \r           var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {     return a.concat(b); }); \/\/ flattened is [0, 1, 2, 3, 4, 5]\r          See Also  reduceRight  Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.0 (1.9)  (Supported) 9 10.5 4.0         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.0 (1.9)  (Supported) 9 10.5 4.0         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays","title":"JavaScript typed arrays","description":"Buffers and views:\u00a0typed array architecture To achieve maximum flexibility and efficiency, JavaScript typed arrays split the implementation into a buffer and a view. A buffer (implemented by the ArrayBuffer class) is an object representing a chunk of data; it has no format to speak of, and offers no mechanism for accessing its contents. In order to access the memory contained in a buffer, you need to use a view. A view provides a context\u2014that is, a data type, starting offset, and number of elements\u2014that turns the data into an actual typed array. Views are implemented by the ArrayBufferView class and its subclasses. ArrayBufferArrayBufferViewDataViewFloat32ArrayFloat64ArrayInt16ArrayInt32ArrayInt8ArrayUint16ArrayUint32ArrayUint8Array Using views with buffers Let's create a 16-byte buffer: \r           var buffer = new ArrayBuffer(16);\r          At this point, we have a chunk of memory whose bytes are all pre-initialized to 0. There's not a lot we can do with it, though. We can confirm that it is indeed 16 bytes long, and that's about it: \r           if (buffer.byteLength == 16) {   alert(\"Yes, it's 16 bytes.\"); } else {   alert(\"Oh no, it's the wrong size!\"); }\r          Before we can really work with this buffer, we need to create a view. Let's create a view that treats the data in the buffer as an array of 32-bit signed integers: \r           var int32View = new Int32Array(buffer);\r          Now we can access the fields in the array just like a normal array: \r           for (var i=0; i<int32View.length; i++) {   int32View[i] = i*2; }\r          This fills out the 4 entries in the array (4 entries at 4 bytes each makes 16 total bytes) with the values 0, 2, 4, and 6. Multiple views on the same data Things start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this: \r           var int16View = new Int16Array(buffer);  for (var i=0; i<int16View.length; i++) {   console.log(\"Entry \" + i + \": \" + int16View[i]); }\r          Here we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output 0, 0, 2, 0, 4, 0, 6, 0. You can go a step farther, though. Consider this: \r           int16View[0] = 32; console.log(\"Entry 0 in the 32-bit array is now \" + int32View[0]);\r          The output from this is \"Entry 0 in the 32-bit array is now 32\". In other words, the two arrays are indeed simply views on the same data buffer, treating it as different formats. You can do this with any view types. Multiple views on the same data Things start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this: \r           var int16View = new Int16Array(buffer);  for (var i=0; i<int16View.length; i++) {   console.log(\"Entry \" + i + \": \" + int16View[i]); }\r          Here we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output 0, 0, 2, 0, 4, 0, 6, 0. You can go a step farther, though. Consider this: \r           int16View[0] = 32; console.log(\"Entry 0 in the 32-bit array is now \" + int32View[0]);\r          The output from this is \"Entry 0 in the 32-bit array is now 32\". In other words, the two arrays are indeed simply views on the same data buffer, treating it as different formats. You can do this with any view types. Working with complex data structures By combining a single buffer with multiple views of different types, starting at different offsets into the buffer, you can interact with data objects containing multiple data types. This lets you, for example, interact with complex data structures from WebGL, data files, or C structures you need to use while using js-ctypes. Consider this C structure: \r           struct someStruct {   unsigned long id;   char username[16];   float amountDue; };\r          You can access a buffer containing data in this format like this: \r           var buffer = new ArrayBuffer(24);  \/\/ ... read the data into the buffer ...  var idView = new Uint32Array(buffer, 0, 1); var usernameView = new Uint8Array(buffer, 4, 16); var amountDueView = new Float32Array(buffer, 20, 1);\r          Then you can access, for example, the amount due with amountDueView[0]. Note: The data structure alignment in a C structure is platform-dependent. Take precautions and considerations for these padding differences. Compatibility Typed arrays are available in WebKit as well. Chrome 7 includes support for ArrayBuffer, Float32Array, Int16Array, and Uint8Array. Chrome 9 adds support for DataView objects. Specification  Typed Arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/prototype","title":"Function.prototype","description":"Represents the Function prototype object.  Description Function objects inherit from Function.prototype. Modifications to the Function.prototype object are propagated to all Function instances. Properties  arguments  Deprecated   An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.   arity  Obsolete since JavaScript 1.8.6 Specifies the number of arguments expected by the function. Use the length property instead.   caller Non-standard      Specifies the function that invoked the currently executing function.   constructor Specifies the function that creates an object's prototype.   length Specifies the number of arguments expected by the function.   name Non-standard      The name of the function.    Properties inherited from  Object:__parent__, __proto__  Methods  apply Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.   bind\u00a0 Requires JavaScript 1.8.5  Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.   call Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. isGenerator  Requires JavaScript 1.8.6  Returns true if the function is a generator; otherwise returns false.   toSource\u00a0Non-standard      Returns a string representing the source code of the function. Overrides the Object.toSource method.   toString Returns a string representing the source code of the function. Overrides the Object.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arguments","title":"Function.arguments","description":"Summary  An array-like object corresponding to the arguments passed to a function.  Description Use the arguments object available within functions instead of Function.arguments. Notes  In the case of recursion, i.e. if function f appears several times on the call stack, the value of f.arguments represents the arguments corresponding to the most recent invocation of the function.   Example  function f(n) { g(n-1) } function g(n) {   print(\"before: \" + g.arguments[0]);   if(n>0)     f(n);   print(\"after: \" + g.arguments[0]); } f(2)  outputs:  before: 1 before: 0 after: 0 after: 1"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arity","title":"Function.arity","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None    Description The arity property no longer exists and has been replaced by the Function.prototype.length property."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/length","title":"Function.length","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description length is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function. Example \r           console.log((function () {}).length);  \/* 0 *\/ console.log((function (a) {}).length); \/* 1 *\/ console.log((function (a, b) {}).length); \/* 2 etc. *\/\r          \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/constructor","title":"Function.constructor","description":"Summary  Returns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/caller","title":"Function.caller","description":"Returns the function that invoked the specified function. This property is not part of ECMA-262 Edition 3 standard. It is implemented at least in SpiderMonkey (the JavaScript engine used in Mozilla) (see   bug 65683 ), V8 (the JavaScript engine used in Chrome) and JScript.    Property of Function     Implemented in JavaScript 1.5   ECMAScript Edition none    Description If the function f was invoked by the top level code, the value of f.caller is null, otherwise it's the function that called f This property replaces deprecated arguments.caller. Notes Note that in case of recursion, you can't reconstruct the call stack using this property. Consider:  function f(n) { g(n-1) } function g(n) { if(n>0) f(n); else stop() } f(2)  At the moment stop() is called the call stack will be:  f(2) -> g(1) -> f(1) -> g(0) -> stop()  The following is true:  stop.caller === g && f.caller === g && g.caller === f  so if you tried to get the stack trace in the stop() function like this:  var f = stop; var stack = \"Stack trace:\"; while (f) {   stack += \"\\n\" + f.name;   f = f.caller; }  the loop would never stop. The special property __caller__, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons. Examples Example: Checking the value of a function's caller property The following code checks the value a function's caller property.  function myFunc() {    if (myFunc.caller == null) {       return (\"The function was called from the top!\");    } else       return (\"This function's caller was \" + myFunc.caller); }  \u00a0 Example: Checking the value of a function's caller property The following code checks the value a function's caller property.  function myFunc() {    if (myFunc.caller == null) {       return (\"The function was called from the top!\");    } else       return (\"This function's caller was \" + myFunc.caller); }  \u00a0 Browser Support Function.caller is currently supported by all major browsers:\u00a0Firefox, Safari, Chrome, Opera and IE. \u00a0Test page with results. \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/name","title":"Function.name","description":"The name of the function.    Property of Function     Implemented in JavaScript ?   ECMAScript Edition None    Description The name property returns the name of a function, or an empty string for anonymous functions: function doSomething() {} alert(doSomething.name); \/\/ alerts \"doSomething\"  Functions created with the syntax new Function(...) or just Function(...) have their name property set to \"anonymous\" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer. Note that in these examples anonymous functions are created, so name returns an empty string: var f = function() { }; var object = {   someMethod: function() {} };  alert(f.name == \"\"); \/\/ true alert(object.someMethod.name == \"\"); \/\/ also true  You can define a function with a name in a function expression: var object = {   someMethod: function object_someMethod() {} }; alert(object.someMethod.name); \/\/ alerts \"object_someMethod\"  try { object_someMethod } catch(e) { alert(e); } \/\/ ReferenceError: object_someMethod is not defined  You cannot change the name of a function, this property is read-only: var object = {   \/\/ anonymous   someMethod: function(){} }; object.someMethod.name = \"someMethod\"; alert(object.someMethod.name); \/\/ empty string, someMethod is anonymous  Examples You can use obj.constructor.name to check the \"class\" of an object: function a() { }  var b = new a(); alert(b.constructor.name); \/\/Alerts \"a\""},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/bind","title":"Function.bind","description":"Creates a new function that, when called, itself calls this function in the context of the provided this value, with a given sequence of arguments preceding any provided when the new function was called.    Method of Function     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax fun.bind(thisArg[, arg1[, arg2[, ...]]]) Parameters  thisArg The value to be passed as the this parameter to the target function when the bound function is called. \u00a0The value is ignored if the bound function is constructed using the new operator. arg1, arg2, ... Arguments to prepend to arguments provided to the bound function when invoking the target function.  Description The bind function creates a new function (a bound function) with the same function body (internal Call attribute in ECMAScript 5 terms) as the function it is being called on (the bound function's target function) with the this value bound to the first argument of bind, which cannot be overridden. bind also accepts leading default arguments to provide to the target function when the bound function is called. \u00a0A bound function may also be constructed using the new operator: doing so acts as though the target function had instead been constructed. \u00a0The provided this value is ignored, while prepended arguments are provided to the emulated function. Compatibility The bind function is a recent addition to ECMA-262, 5th edition; as such it may not be present in all browsers. You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of bind in implementations that do not natively support it. \r           if (!Function.prototype.bind) {   Function.prototype.bind = function (oThis) {     if (typeof this !== \"function\") {       \/\/ closest thing possible to the ECMAScript 5 internal IsCallable function       throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");     }      var aArgs = Array.prototype.slice.call(arguments, 1),          fToBind = this,          fNOP = function () {},         fBound = function () {           return fToBind.apply(this instanceof fNOP                                  ? this                                  : oThis || window,                                aArgs.concat(Array.prototype.slice.call(arguments)));         };      fNOP.prototype = this.prototype;     fBound.prototype = new fNOP();      return fBound;   }; }\r          Some of the many differences (there may well be others, as this list does not seriously attempt to be exhaustive) between this algorithm and the specified algorithm are:  The partial implementation relies Array.prototype.slice, Array.prototype.concat, Function.prototype.call and Function.prototype.apply, built-in methods to have their original values. The partial implementation creates functions that do not have immutable \"poison pill\" caller and arguments properties that throw a TypeError upon get, set, or deletion. (This could be added if the implementation supports Object.defineProperty, or partially implemented [without throw-on-delete behavior] if the implementation supports the __defineGetter__ and __defineSetter__ extensions.) The partial implementation creates functions that have a prototype property. (Proper bound functions have none.) The partial implementation creates bound functions whose length property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.  If you choose to use this partial implementation, you must not rely on those cases where behavior deviates from ECMA-262, 5th edition! With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when bind is widely implemented according to the specification. Examples Creating a bound function The simplest use of bind is to make a function that, no matter how it is called, is called with a particular this value. \u00a0A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its this (e.g. by using that method in callback-based code). \u00a0Without special care, however, the original object is usually lost. \u00a0Creating a bound function from the function, using the original object, neatly solves this problem: \r           var x = 9;  var module = {   x: 81,   getX: function() { return this.x; } };  module.getX(); \/\/ 81  var getX = module.getX; getX(); \/\/ 9, because in this case, \"this\" refers to the global object  \/\/ create a new function with 'this' bound to module var boundGetX = getX.bind(module); boundGetX(); \/\/ 81\r          Currying The next simplest use of bind is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called. \r           function list() {   return Array.prototype.slice.call(arguments); }  var list1 = list(1, 2, 3); \/\/ [1, 2, 3]  \/\/  Create a function with a preset leading argument var leadingZeroList = list.bind(undefined, 37);  var list2 = leadingZeroList(); \/\/ [37] var list3 = leadingZeroList(1, 2, 3); \/\/ [37, 1, 2, 3]\r          Bound functions used as constructors Bound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored. However, provided arguments are still prepended to the constructor call: \r           function Point(x, y) {   this.x = x;   this.y = y; }  Point.prototype.toString = function() {    return this.x + \",\" + this.y;  };  var p = new Point(1, 2); p.toString(); \/\/ \"1,2\"   var emptyObj = {}; var YAxisPoint = Point.bind(emptyObj, 0 \/* x *\/);  var axisPoint = new YAxisPoint(5); axisPoint.toString(); \/\/  \"0,5\"  axisPoint instanceof Point; \/\/ true axisPoint instanceof YAxisPoint; \/\/ true new Point(17, 42) instanceof YAxisPoint; \/\/ false with native bind \/\/ true, when using the above polyfill\r          Note that you need do nothing special to create a bound function for use with new. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using new. If you wish to support use of a bound function only using new, or only by calling it, the target function must enforce that restriction. \r           \/\/ Example can be run directly in your JavaScript console \/\/ ...continuing from above  \/\/ Can still be called as a normal function (although usually this is undesired) YAxisPoint(13);  emptyObj.x + \",\" + emptyObj.y; \/\/ >  \"0,13\"\r          Creating Shortcuts  bind\u00a0is also helpful in cases where you want to create a shortcut to a function which requires a specific this value. Take\u00a0Array.prototype.slice, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:  var slice = Array.prototype.slice;  \/\/ ...  slice.call(arguments); With\u00a0bind, this can be simplified to the following. slice will be a bound function to the .call function of Function.prototype, with the this value set to the .slice function of Array.prototype. This means that additional .call calls can be eliminated:  var slice = Function.prototype.call.bind(Array.prototype.slice);  \/\/ ...  slice(arguments);  Creating a bound function The simplest use of bind is to make a function that, no matter how it is called, is called with a particular this value. \u00a0A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its this (e.g. by using that method in callback-based code). \u00a0Without special care, however, the original object is usually lost. \u00a0Creating a bound function from the function, using the original object, neatly solves this problem: \r           var x = 9;  var module = {   x: 81,   getX: function() { return this.x; } };  module.getX(); \/\/ 81  var getX = module.getX; getX(); \/\/ 9, because in this case, \"this\" refers to the global object  \/\/ create a new function with 'this' bound to module var boundGetX = getX.bind(module); boundGetX(); \/\/ 81\r          Currying The next simplest use of bind is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called. \r           function list() {   return Array.prototype.slice.call(arguments); }  var list1 = list(1, 2, 3); \/\/ [1, 2, 3]  \/\/  Create a function with a preset leading argument var leadingZeroList = list.bind(undefined, 37);  var list2 = leadingZeroList(); \/\/ [37] var list3 = leadingZeroList(1, 2, 3); \/\/ [37, 1, 2, 3]\r          Bound functions used as constructors Bound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored. However, provided arguments are still prepended to the constructor call: \r           function Point(x, y) {   this.x = x;   this.y = y; }  Point.prototype.toString = function() {    return this.x + \",\" + this.y;  };  var p = new Point(1, 2); p.toString(); \/\/ \"1,2\"   var emptyObj = {}; var YAxisPoint = Point.bind(emptyObj, 0 \/* x *\/);  var axisPoint = new YAxisPoint(5); axisPoint.toString(); \/\/  \"0,5\"  axisPoint instanceof Point; \/\/ true axisPoint instanceof YAxisPoint; \/\/ true new Point(17, 42) instanceof YAxisPoint; \/\/ false with native bind \/\/ true, when using the above polyfill\r          Note that you need do nothing special to create a bound function for use with new. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using new. If you wish to support use of a bound function only using new, or only by calling it, the target function must enforce that restriction. \r           \/\/ Example can be run directly in your JavaScript console \/\/ ...continuing from above  \/\/ Can still be called as a normal function (although usually this is undesired) YAxisPoint(13);  emptyObj.x + \",\" + emptyObj.y; \/\/ >  \"0,13\"\r          Creating Shortcuts  bind\u00a0is also helpful in cases where you want to create a shortcut to a function which requires a specific this value. Take\u00a0Array.prototype.slice, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:  var slice = Array.prototype.slice;  \/\/ ...  slice.call(arguments); With\u00a0bind, this can be simplified to the following. slice will be a bound function to the .call function of Function.prototype, with the this value set to the .slice function of Array.prototype. This means that additional .call calls can be eliminated:  var slice = Function.prototype.call.bind(Array.prototype.slice);  \/\/ ...  slice(arguments);  Supplemental One interesting wrinkle of bound functions working \"as expected\" with the new operator is that it is now possible to implement what one might call \"Function.prototype.construct\", an analog to Function.prototype.apply that takes an array of values as its sole argument,\u00a0constructing this function with the provided arguments using the new operator: \r           \/\/ Function.prototype.construct will work with the Function.prototype.bind defined above  if (!Function.prototype.construct) {    Function.prototype.construct = function(aArgs) {      if (aArgs.constructor !== Array)       throw new TypeError(\"second argument to Function.prototype.construct must be an array\");      var aBoundArgs = Array.prototype.concat.apply([null], aArgs),          fBound = this.bind.apply(this, aBoundArgs);              return new fBound();    }; }  \/\/ Now consider the string \"2011-7-16 19:35:46\". Without an analog of the Function.apply method for constructors, \/\/ you would run a lot of steps in order to construct a Date object from it:  var aDateArgs = \"2011-7-16 19:35:46\".split(\/[- :]\/),     oMyDate1 = new Date(aDateArgs[0], aDateArgs[1], aDateArgs[2], aDateArgs[3], aDateArgs[4], aDateArgs[5]); alert(oMyDate1.toLocaleString());   \/\/ With the Function.construct method we could do the same thing with a single step: var oMyDate2 = Date.construct(\"2011-7-16 19:35:46\".split(\/[- :]\/)); alert(oMyDate2.toLocaleString());  \/\/ Here is another example:  function Point(x, y) {   this.x = x;   this.y = y; }  Point.prototype.toString = function() {    return this.x + \",\" + this.y;  };  alert(Point.construct([2, 4]).toString()); \/\/ \"2,4\"\r          But note well: the efficiency of constructing a new function every time you wish to construct an object by invoking a bound function via new with a variable number of arguments is questionable. Your code will be faster and more efficient if you use Function.prototype.apply instead, with normal call syntax rather than using new operator-based syntax. Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 7 9 11.60 --         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat tables. See also  Function.prototype.apply Function.prototype.call"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/apply","title":"Function.apply","description":"Calls a function with a given this value and arguments provided as an array. NOTE:\u00a0While the syntax of this function is almost identical to that of\u00a0call(), the fundamental difference is that\u00a0call()\u00a0accepts an argument list, while\u00a0apply()\u00a0accepts a single array of arguments.    Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMA-262 3rd Edition    Syntax fun.apply(thisArg[, argsArray]) Parameters  thisArg    The value of\u00a0this\u00a0provided for the call to\u00a0fun. \u00a0Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code,\u00a0null\u00a0and\u00a0undefined\u00a0will be replaced with the global object, and primitive values will be boxed.     argsArray An array like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function.   JavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), this method works according to the ECMAScript 5 specification. That is, the arguments can be a generic array-like object instead of an array. See   bug 562448  for details on this change. Description You can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object. apply is very similar to call, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, ['eat', 'bananas']), or an Array object, for example, fun.apply(this, new Array('eat', 'bananas')). You can also use arguments for the argsArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments. Since ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property length and integer properties in the range [0...length). As an example you can now use a NodeList or a own custom object like {'length': 2, '0': 'eat', '1':\u00a0'bananas'}. Note:\u00a0Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array like objects and will throw an exception.  Examples Using apply to chain constructors You can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.apply(this, arguments);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.apply(this, arguments);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          apply and built-in functions Clever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array. \r           \/* min\/max number in an array *\/ var numbers = [5, 6, 2, 3, 7];  \/* using Math.min\/Math.max apply *\/ var max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/ var min = Math.min.apply(null, numbers);  \/* vs. simple loop based algorithm *\/ max = -Infinity, min = +Infinity;  for (var i = 0; i < numbers.length; i++) {   if (numbers[i] > max)     max = numbers[i];   if (numbers[i] < min)      min = numbers[i]; }\r          But beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)\u00a0 If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time: \r           function minOfArray(arr) {   var min = Infinity;   var QUANTUM = 32768;   for (var i = 0, len = arr.length; i < len; i += QUANTUM)   {     var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));     min = Math.min(submin, min);   }   return min; }  var min = minOfArray([5, 6, 2, 3, 7]);\r          Using apply to chain constructors You can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.apply(this, arguments);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.apply(this, arguments);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          apply and built-in functions Clever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array. \r           \/* min\/max number in an array *\/ var numbers = [5, 6, 2, 3, 7];  \/* using Math.min\/Math.max apply *\/ var max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/ var min = Math.min.apply(null, numbers);  \/* vs. simple loop based algorithm *\/ max = -Infinity, min = +Infinity;  for (var i = 0; i < numbers.length; i++) {   if (numbers[i] > max)     max = numbers[i];   if (numbers[i] < min)      min = numbers[i]; }\r          But beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)\u00a0 If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time: \r           function minOfArray(arr) {   var min = Infinity;   var QUANTUM = 32768;   for (var i = 0, len = arr.length; i < len; i += QUANTUM)   {     var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));     min = Math.min(submin, min);   }   return min; }  var min = minOfArray([5, 6, 2, 3, 7]);\r          See Also call, bind, arguments"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/call","title":"Function.call","description":"Calls a function with a given this value and arguments provided individually. NOTE: While the syntax of this function is almost identical to that of\u00a0apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.    Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 3rd Edition    Syntax fun.call(thisArg[, arg1[, arg2[, ...]]]) Parameters  thisArg The value of this provided for the call to\u00a0fun. \u00a0Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.   arg1, arg2, ... Arguments for the object. Description You can assign a different this object when calling an existing function. this refers to the current object, the calling object. With call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object. Examples Using call to chain constructors for an object You can use call to chain constructors for an object, similar to Java.\u00a0In the following example, the constructor for the\u00a0Product\u00a0object is defined with two parameters, name\u00a0and\u00a0value. Two other functions\u00a0Food\u00a0and\u00a0Toy\u00a0invoke\u00a0Product\u00a0passing\u00a0this\u00a0and\u00a0name\u00a0and\u00a0value. Product initializes the properties name and price, both specialized functions define the category. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.call(this, name, price);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.call(this, name, price);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          Using call to invoke an anonymous function In this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose. \r           var animals = [   {species: 'Lion', name: 'King'},   {species: 'Whale', name: 'Fail'} ];  for (var i = 0; i < animals.length; i++) {   (function (i) {      this.print = function () {        console.log('#' + i  + ' ' + this.species + ': ' + this.name);      }    }).call(animals[i], i); }\r          Using call to chain constructors for an object You can use call to chain constructors for an object, similar to Java.\u00a0In the following example, the constructor for the\u00a0Product\u00a0object is defined with two parameters, name\u00a0and\u00a0value. Two other functions\u00a0Food\u00a0and\u00a0Toy\u00a0invoke\u00a0Product\u00a0passing\u00a0this\u00a0and\u00a0name\u00a0and\u00a0value. Product initializes the properties name and price, both specialized functions define the category. \r           function Product(name, price) {   this.name = name;   this.price = price;    if (price < 0)     throw RangeError('Cannot create product \"' + name + '\" with a negative price');   return this; }  function Food(name, price) {   Product.call(this, name, price);   this.category = 'food'; } Food.prototype = new Product();  function Toy(name, price) {   Product.call(this, name, price);   this.category = 'toy'; } Toy.prototype = new Product();  var cheese = new Food('feta', 5); var fun = new Toy('robot', 40);\r          Using call to invoke an anonymous function In this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose. \r           var animals = [   {species: 'Lion', name: 'King'},   {species: 'Whale', name: 'Fail'} ];  for (var i = 0; i < animals.length; i++) {   (function (i) {      this.print = function () {        console.log('#' + i  + ' ' + this.species + ': ' + this.name);      }    }).call(animals[i], i); }\r          See Also apply"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/isGenerator","title":"Function.isGenerator","description":"Determines whether or not a function is a generator.    Method of Function     Implemented in JavaScript 1.8.6   ECMAScript Edition None (Harmony Proposal)   Syntax result = fun.isGenerator()Parameters None. Description This method lets you determine whether or not a function is a generator. Examples \r           function f() {} function g() {   yield 42; } console.log(\"f.isGenerator() = \" + f.isGenerator()); console.log(\"g.isGenerator() = \" + g.isGenerator());\r          The output from this code is:  f.isGenerator()\u00a0= false g.isGenerator()\u00a0= true   See also  Iterators and generators"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toSource","title":"Function.toSource","description":"Summary  Returns a string representing the source code for the function.     Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  var sourceString = function.toSource();   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Function object, toSource returns the following string indicating that the source code is not available:  function Function() {    [native code] }   For custom functions, toSource returns the JavaScript source that defines the object as a string.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.   See Also  toString Object.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toString","title":"Function.toString","description":"Returns a string representing the source code of the function.    Method of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax function.toString(indentation) Parameters  indentation Non-standard      The amount of spaces to indent the string representation of the source code. If indentation is less than or equal to -1, most unnecessary spaces are removed.  Description The Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For Function objects, the toString method returns a string representation of the object in the form of a function declaration.\u00a0 That is, toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body. JavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string. See also Object.prototype.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MAX_VALUE","title":"Number.MAX_VALUE","description":"Summary  The maximum numeric value representable in JavaScript.     Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  The MAX_VALUE property has a value of approximately 1.79E+308. Values larger than MAX_VALUE are represented as \"Infinity\". Because MAX_VALUE is a static property of Number, you always use it as Number.MAX_VALUE, rather than as a property of a Number object you created.   Examples   Example: Using MAX_VALUE  The following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 * num2 <= Number.MAX_VALUE)    func1(); else    func2();   Example: Using MAX_VALUE  The following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 * num2 <= Number.MAX_VALUE)    func1(); else    func2();"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MIN_VALUE","title":"Number.MIN_VALUE","description":"The smallest positive numeric value representable in JavaScript.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent. MIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0. Because MIN_VALUE is a static property of Number, you always use it as Number.MIN_VALUE, rather than as a property of a Number object you created. Examples Example: Using MIN_VALUE The following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 \/ num2 >= Number.MIN_VALUE)    func1() else    func2()  Example: Using MIN_VALUE The following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 \/ num2 >= Number.MIN_VALUE)    func1() else    func2()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NEGATIVE_INFINITY","title":"Number.NEGATIVE_INFINITY","description":"A value representing the negative Infinity value.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description The value of Number.NEGATIVE_INFINITY is the same as the negative value of the global object's Infinity property. This value behaves slightly differently than mathematical infinity:  Any positive value, including POSITIVE_INFINITY, multiplied by NEGATIVE_INFINITY is NEGATIVE_INFINITY. Any negative value, including NEGATIVE_INFINITY, multiplied by NEGATIVE_INFINITY is POSITIVE_INFINITY. Zero multiplied by NEGATIVE_INFINITY is NaN. NaN multiplied by NEGATIVE_INFINITY is NaN. NEGATIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is POSITIVE_INFINITY. NEGATIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is NEGATIVE_INFINITY. NEGATIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN. Any number divided by NEGATIVE_INFINITY is Zero.  Several JavaScript methods (such as the Number constructor, parseFloat, and parseInt) return NaN if the value specified in the parameter is significantly lower than Number.MIN_VALUE. You might use the Number.NEGATIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case. Example In the following example, the variable smallNumber is assigned a value that is smaller than the minimum value. When the if statement executes, smallNumber has the value \"-Infinity\", so smallNumber is set to a more manageable value before continuing.  var smallNumber = (-Number.MAX_VALUE) * 2 if (smallNumber == Number.NEGATIVE_INFINITY) {  smallNumber = returnFinite(); }  See Also Infinity, POSITIVE_INFINITY, isFinite \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NaN","title":"Number.NaN","description":"A value representing Not-A-Number.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description Number.NaN is the same thing than NaN. See the NaN page for more info."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/POSITIVE_INFINITY","title":"Number.POSITIVE_INFINITY","description":"A value representing the positive Infinity value.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description The value of Number.POSITIVE_INFINITY is the same as the value of the global object's Infinity property. This value behaves slightly differently than mathematical infinity:  Any positive value, including POSITIVE_INFINITY, multiplied by POSITIVE_INFINITY is POSITIVE_INFINITY. Any negative value, including NEGATIVE_INFINITY, multiplied by POSITIVE_INFINITY is NEGATIVE_INFINITY. Zero multiplied by POSITIVE_INFINITY is NaN. NaN multiplied by POSITIVE_INFINITY is NaN. POSITIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is NEGATIVE_INFINITY. POSITIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is POSITIVE_INFINITY. POSITIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN. Any number divided by POSITIVE_INFINITY is Zero.  Several JavaScript methods (such as the Number constructor, parseFloat, and parseInt) return NaN if the value specified in the parameter is significantly higher than Number.MAX_VALUE. You might use the Number.POSITIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case. Example In the following example, the variable bigNumber is assigned a value that is larger than the maximum value. When the if statement executes, bigNumber has the value \"Infinity\", so bigNumber is set to a more manageable value before continuing.  var bigNumber = Number.MAX_VALUE * 2 if (bigNumber == Number.POSITIVE_INFINITY) {  bigNumber = returnFinite(); }  See Also Infinity, NEGATIVE_INFINITY, isFinite \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/prototype","title":"Number.prototype","description":"Represents the prototype for the Number constructor. Description All Number instances inherit from Number.prototype. The prototype object of the Number constructor can be modified to affect all Number instances. Properties  constructor Returns the function that created this object's instance. By default this is the Number object.    Properties inherited from  Object:__parent__, __proto__   Methods  toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/constructor","title":"Number.constructor","description":"Summary  Returns a reference to the Number function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toExponential","title":"Number.toExponential","description":"Returns a string representing the Number object in exponential notation    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition     Syntax  number.toExponential( [fractionDigits] )   Parameter   fractionDigits  An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.   Returns  A string representing a Number object in exponential notation with one digit before the decimal point, rounded to fractionDigits digits after the decimal point. If the fractionDigits argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely. If you use the toExponential method for a numeric literal and the numeric literal has no exponent and no decimal point, leave a space before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point. If a number has more digits that requested by the fractionDigits parameter, the number is rounded to the nearest number represented by fractionDigits digits. See the discussion of rounding in the description of the toFixed method, which also applies to toExponential.   Example   var num=77.1234;  alert(\"num.toExponential() is \" + num.toExponential()); \/\/displays 7.71234e+1  alert(\"num.toExponential(4) is \" + num.toExponential(4)); \/\/displays 7.7123e+1  alert(\"num.toExponential(2) is \" + num.toExponential(2)); \/\/displays 7.71e+1  alert(\"77.1234.toExponential() is \" + 77.1234.toExponential()); \/\/displays 7.71234e+1  alert(\"77 .toExponential() is \" + 77 .toExponential()); \/\/displays 7.7e+1   See Also  Number.toFixed(), Number.toPrecision(), Number.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toFixed","title":"Number.toFixed","description":"Formats a number using fixed-point notation    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition    Syntax number.toFixed( [digits] ) Parameter  digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.  Returns A string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation. Throws  RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well.   TypeError If this method is invoked on an object that is not a Number.  Example  var n = 12345.6789;  n.toFixed();              \/\/ Returns \"12346\": note rounding, no fractional part  n.toFixed(1);             \/\/ Returns \"12345.7\": note rounding  n.toFixed(6);             \/\/ Returns \"12345.678900\": note added zeros  (1.23e+20).toFixed(2);    \/\/ Returns \"123000000000000000000.00\"  (1.23e-10).toFixed(2);    \/\/ Returns \"0.00\"  2.34.toFixed(1);          \/\/ Returns \"2.3\"  -2.34.toFixed(1);         \/\/ Returns -2.3 (due to operator precedence, negative numbers don't return a string...)  (-2.24).toFixed(1);       \/\/ Returns \"-2.3\" (...unless you use parentheses)  See Also Number.toExponential(), Number.toLocaleString(), Number.toPrecision(), Number.toString(), Number.toSource(), Number.valueOf()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/ToLocaleString","title":"Number.ToLocaleString","description":"Syntax number.toLocaleString() Examples \r           var number = 3500 console.log(number.toLocaleString()); \/* Displays \"3,500\" in English locale *\/\r          See Also Number.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toPrecision","title":"Number.toPrecision","description":"Returns a string representing the Number object to the specified precision.    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition    Syntax number.toPrecision( [ precision ] ) Parameter  precision An integer specifying the number of significant digits.  Returns A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits. See the discussion of rounding in the description of the toFixed method, which also applies to toPrecision. If the precision argument is omitted, behaves as Number.toString. If it is a non-integer value, it is rounded to the nearest integer. After rounding, if that value is not between 1 and 100 (inclusive), a RangeError is thrown. ECMA-262 only requires a precision of up to 21 significant digits. Other implementations may not support precisions higher than required by the standard. Example  var num = 5.123456; println(\"num.toPrecision() is \" + num.toPrecision());   \/\/displays 5.123456 println(\"num.toPrecision(5) is \" + num.toPrecision(5)); \/\/displays 5.1235 println(\"num.toPrecision(2) is \" + num.toPrecision(2)); \/\/displays 5.1 println(\"num.toPrecision(1) is \" + num.toPrecision(1)); \/\/displays 5  See Also  toExponential toFixed toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toSource","title":"Number.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of Number     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  number.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Number object, toSource returns the following string indicating that the source code is not available:  function Number() {[native code]}   For instances of Number, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toString","title":"Number.toString","description":"Summary  Returns a string representing the specified Number object     Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax  number.toString( [radix] )   Parameter   radix  An integer between 2 and 36 specifying the base to use for representing numeric values.   Description  The Number object overrides the toString method of the Object object; it does not inherit Object.toString. For Number objects, the toString method returns a string representation of the object in the specified radix. The toString method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used. If toString is given a radix not between 2 and 36, an exception is thrown. If the radix is not specified, JavaScript assumes the preferred radix is 10.   Examples  var count = 10; print(count.toString());   \/\/ displays \"10\" print((17).toString());    \/\/ displays \"17\"  var x = 7; print(x.toString(2));      \/\/ displays \"111\"   See Also  Number.prototype.toExponential Number.prototype.toLocaleString Number.prototype.toPrecision Number.prototype.toFixed Number.prototype.toSource Number.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/valueOf","title":"Number.valueOf","description":"Summary  Returns the primitive value of a Number object.     Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax number.valueOf() Parameters  None.   Description  The valueOf method of Number returns the primitive value of a Number object as a number data type. This method is usually called internally by JavaScript and not explicitly in code.   Examples  var x = new Number(); print(x.valueOf());     \/\/ prints \"0\"   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperty","title":"Object.defineProperty","description":"Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.defineProperty(obj, prop, descriptor) Parameters  obj The object on which to define the property. prop The name of the property to be defined or modified. descriptor The descriptor for the property being defined or modified.  Description This method allows precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (for...in loop), whose values may be changed, and which may be deleted. This method allows these extra details to be changed from their defaults. Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both. All descriptors regardless of flavor include the configurable and enumerable fields. A property descriptor is an object with the following fields:  value The value associated with the property. (data descriptors only).\u00a0Defaults to undefined. writable True if and only if the value associated with the property may be changed. (data descriptors only). Defaults to false. get A function which serves as a getter for the property, or undefined if there is no getter. (accessor descriptors only).\u00a0Defaults to undefined. set A function which serves as a setter for the property, or undefined if there is no setter. (accessor descriptors only).\u00a0Defaults to undefined. configurable True if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\u00a0Defaults to false. enumerable True if and only if this property shows up during enumeration of the properties on the corresponding object.\u00a0Defaults to false.   Creating a property When the property specified doesn't exist in the object, Object.defineProperty creates a new property as described. Fields may be omitted from the descriptor, and default values for those fields are imputed. All of the boolean-valued fields default to false. The value, get, and set fields default to undefined. Example \r           var o = {}; \/\/ Creates a new object  \/\/ Example of an object property added with defineProperty with a data property descriptor Object.defineProperty(o, \"a\", {value : 37,                                writable : true,                                enumerable : true,                                configurable : true}); \/\/ 'a' property exists in the o object and its value is 37  \/\/ Example of an object property added with defineProperty with an accessor property descriptor var bValue; Object.defineProperty(o, \"b\", {get : function(){ return bValue; },                                set : function(newValue){ bValue = newValue; },                                enumerable : true,                                configurable : true}); o.b = 38; \/\/ 'b' property exists in the o object and its value is 38 \/\/ The value of o.b is now always identical to bValue, unless o.b is redefined  \/\/ You cannot try to mix both : Object.defineProperty(o, \"conflict\", { value: 0x9f91102,                                         get: function() { return 0xdeadbeef; } }); \/\/ throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\r          You can use the Object.defineProperty method with native objects also. The following example shows how to implement the HTMLSelectElement's selectedIndex property in radio button groups. \r           <!doctype html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/> <title>Radio group selectedIndex example<\/title> <script type=\"text\/javascript\"> Object.defineProperty(NodeList.prototype, \"selectedIndex\", { \tget: function() { \t\tvar nIndex = this.length - 1; \t\twhile (nIndex > -1 && !this[nIndex].checked) { nIndex--; } \t\treturn nIndex; \t}, \tset: function(nNewIndex) { \t\tif (isNaN(nNewIndex)) { return; } \t\tvar nOldIndex = this.selectedIndex; \t\tif (nOldIndex > -1) { this[nOldIndex].checked = false; } \t\tif (nNewIndex > -1) { this[nNewIndex].checked = true; } \t}, \tenumerable : true, \tconfigurable : false });  \/\/ try it! function checkForm() { \tvar nSelectedIndex = document.myForm.myRadioGroup.selectedIndex; \tif (nSelectedIndex < 0) { alert(\"Select a gadget!!\"); return false; } \talert(\"Congratulations!! You selected the \" + document.myForm.myRadioGroup[nSelectedIndex].value + \".\"); \treturn true; } <\/script>  <\/head>  <body> \t\t\t\t\t\t <form name=\"myForm\" onsubmit=\"return(checkForm());\"> <fieldset><legend>Select a gadget<\/legend> <p><input type=\"radio\" name=\"myRadioGroup\" id=\"ourShirt\" value=\"shirt\" \/> <label for=\"ourShirt\">shirt<\/label><br \/> <input type=\"radio\" name=\"myRadioGroup\" id=\"ourPants\" value=\"pants\" \/> <label for=\"ourPants\">pants<\/label><br \/> <input type=\"radio\" name=\"myRadioGroup\" id=\"ourBelt\" value=\"belt\" \/> <label for=\"ourBelt\">belt<\/label><br \/> <input type=\"radio\" name=\"myRadioGroup\" id=\"ourShoes\" value=\"shoes\" \/> <label for=\"ourShoes\">shoes<\/label><\/p> <p><span style=\"cursor:pointer;text-decoration:underline;color:#0000ff;\" onclick=\"document.myForm.myRadioGroup.selectedIndex=2;\">Select our favorite gadget ;-)<\/span><\/p> <p><input type=\"submit\" value=\"Order!\" \/> <\/fieldset> <\/form> <\/body> <\/html>\r          Example \r           var o = {}; \/\/ Creates a new object  \/\/ Example of an object property added with defineProperty with a data property descriptor Object.defineProperty(o, \"a\", {value : 37,                                writable : true,                                enumerable : true,                                configurable : true}); \/\/ 'a' property exists in the o object and its value is 37  \/\/ Example of an object property added with defineProperty with an accessor property descriptor var bValue; Object.defineProperty(o, \"b\", {get : function(){ return bValue; },                                set : function(newValue){ bValue = newValue; },                                enumerable : true,                                configurable : true}); o.b = 38; \/\/ 'b' property exists in the o object and its value is 38 \/\/ The value of o.b is now always identical to bValue, unless o.b is redefined  \/\/ You cannot try to mix both : Object.defineProperty(o, \"conflict\", { value: 0x9f91102,                                         get: function() { return 0xdeadbeef; } }); \/\/ throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\r          You can use the Object.defineProperty method with native objects also. The following example shows how to implement the HTMLSelectElement's selectedIndex property in radio button groups. \r           <!doctype html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/> <title>Radio group selectedIndex example<\/title> <script type=\"text\/javascript\"> Object.defineProperty(NodeList.prototype, \"selectedIndex\", { \tget: function() { \t\tvar nIndex = this.length - 1; \t\twhile (nIndex > -1 && !this[nIndex].checked) { nIndex--; } \t\treturn nIndex; \t}, \tset: function(nNewIndex) { \t\tif (isNaN(nNewIndex)) { return; } \t\tvar nOldIndex = this.selectedIndex; \t\tif (nOldIndex > -1) { this[nOldIndex].checked = false; } \t\tif (nNewIndex > -1) { this[nNewIndex].checked = true; } \t}, \tenumerable : true, \tconfigurable : false });  \/\/ try it! function checkForm() { \tvar nSelectedIndex = document.myForm.myRadioGroup.selectedIndex; \tif (nSelectedIndex < 0) { alert(\"Select a gadget!!\"); return false; } \talert(\"Congratulations!! You selected the \" + document.myForm.myRadioGroup[nSelectedIndex].value + \".\"); \treturn true; } <\/script>  <\/head>  <body> \t\t\t\t\t\t <form name=\"myForm\" onsubmit=\"return(checkForm());\"> <fieldset><legend>Select a gadget<\/legend> <p><input type=\"radio\" name=\"myRadioGroup\" id=\"ourShirt\" value=\"shirt\" \/> <label for=\"ourShirt\">shirt<\/label><br \/> <input type=\"radio\" name=\"myRadioGroup\" id=\"ourPants\" value=\"pants\" \/> <label for=\"ourPants\">pants<\/label><br \/> <input type=\"radio\" name=\"myRadioGroup\" id=\"ourBelt\" value=\"belt\" \/> <label for=\"ourBelt\">belt<\/label><br \/> <input type=\"radio\" name=\"myRadioGroup\" id=\"ourShoes\" value=\"shoes\" \/> <label for=\"ourShoes\">shoes<\/label><\/p> <p><span style=\"cursor:pointer;text-decoration:underline;color:#0000ff;\" onclick=\"document.myForm.myRadioGroup.selectedIndex=2;\">Select our favorite gadget ;-)<\/span><\/p> <p><input type=\"submit\" value=\"Order!\" \/> <\/fieldset> <\/form> <\/body> <\/html>\r          Modifying a property When the property already exists, Object.defineProperty attempts to modify the property according to the values in the descriptor and the object current configuration. If the old descriptor had its configurable attribute set to false (the property is said \"non-configurable\"), then no attribute besides writable can be changed. In that case, it is also not possible to switch back and forth from data\/accessor properties type (a property which would have been defined without get\/set\/value\/writable is called \"generic\" and is \"typed\" as a data descriptor). A TypeError is thrown when non-configurable property attributes are changed unless it's the writable attribute or if the current and new values are equal. Writable attribute When the writable property attribute is set to false, the property is said to be \"non-writable\". It cannot be assigned. Example \r           var o = {}; \/\/ Creates a new object  Object.defineProperty(o, \"a\", {value : 37,                                writable : false});  alert(o.a); \/\/ alerts 37 o.a = 25; alert(o.a); \/\/ alerts 37. The assignment didn't work. No error thrown\r          As seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either. Example \r           var o = {}; \/\/ Creates a new object  Object.defineProperty(o, \"a\", {value : 37,                                writable : false});  alert(o.a); \/\/ alerts 37 o.a = 25; alert(o.a); \/\/ alerts 37. The assignment didn't work. No error thrown\r          As seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either. Enumerable attribute The Enumerable property attribute defines whether the property shows up in a for...in loop or not. Example \r           var i; var o = {}; Object.defineProperty(o, \"a\", { value : 1, enumerable:true }); Object.defineProperty(o, \"b\", { value : 2, enumerable:false }); Object.defineProperty(o, \"c\", { value : 3 }); \/\/ enumerable defaults to false o.d = 4;  for (i in o) {         alert(i);   } \/\/ alerts 'a' then 'd'\r          Example \r           var i; var o = {}; Object.defineProperty(o, \"a\", { value : 1, enumerable:true }); Object.defineProperty(o, \"b\", { value : 2, enumerable:false }); Object.defineProperty(o, \"c\", { value : 3 }); \/\/ enumerable defaults to false o.d = 4;  for (i in o) {         alert(i);   } \/\/ alerts 'a' then 'd'\r          Configurable attribute The configurable attribute controls at the same time whether the property can be deleted from the object and whether its attributes (other than writable) can be changed. Example \r           var o = {}; Object.defineProperty(o, \"a\", { get : function(){return 1;},                                  configurable : false } );  Object.defineProperty(o, \"a\", {configurable : true}); \/\/ throws a TypeError Object.defineProperty(o, \"a\", {enumerable : true}); \/\/ throws a TypeError Object.defineProperty(o, \"a\", {set : function(){}}); \/\/ throws a TypeError (set was undefined previously) Object.defineProperty(o, \"a\", {get : function(){return 1;}}); \/\/ throws a TypeError (even though the new get does exactly the same thing) Object.defineProperty(o, \"a\", {value : 12}); \/\/ throws a TypeError  alert(o.a); \/\/ alerts 1 delete o.a; \/\/ Nothing happens alert(o.a); \/\/ alerts 1\r          If o.a configurable attribute was true, none of the error would be thrown and the property would be deleted at the end. Example \r           var o = {}; Object.defineProperty(o, \"a\", { get : function(){return 1;},                                  configurable : false } );  Object.defineProperty(o, \"a\", {configurable : true}); \/\/ throws a TypeError Object.defineProperty(o, \"a\", {enumerable : true}); \/\/ throws a TypeError Object.defineProperty(o, \"a\", {set : function(){}}); \/\/ throws a TypeError (set was undefined previously) Object.defineProperty(o, \"a\", {get : function(){return 1;}}); \/\/ throws a TypeError (even though the new get does exactly the same thing) Object.defineProperty(o, \"a\", {value : 12}); \/\/ throws a TypeError  alert(o.a); \/\/ alerts 1 delete o.a; \/\/ Nothing happens alert(o.a); \/\/ alerts 1\r          If o.a configurable attribute was true, none of the error would be thrown and the property would be deleted at the end. Difference with usual property addition and default values \r           var o = {};  o.a = 1; \/\/ is equivalent to : Object.defineProperty(o, \"a\", {value : 1,                                writable : true,                                configurable : true,                                enumerable : true});   \/\/ On the other hand, Object.defineProperty(o, \"a\", {value : 1}); \/\/ is equivalent to : Object.defineProperty(o, \"a\", {value : 1,                                writable : false,                                configurable : false,                                enumerable : false});\r          Code considerations If you have to define many properties through the Object.defineProperty method, you can utilise the same descriptor object for each property, redefining it from time to time through binary flags. Examples \r           var oDesc = {}; function setProp (nMask, oObj, sKey, vVal_fGet, fSet) { \tif (nMask & 12) { \t\tif (arguments.length > 3) { oDesc.value = vVal_fGet; } else { delete oDesc.value; } \t\toDesc.writable = Boolean(nMask & 8); \t\tdelete oDesc.get; \t\tdelete oDesc.set; \t} else { \t\tif (vVal_fGet) { oDesc.get = vVal_fGet; } else { delete oDesc.get; } \t\tif (fSet) { oDesc.set = fSet; } else { delete oDesc.set; } \t\tdelete oDesc.value; \t\tdelete oDesc.writable; \t} \toDesc.enumerable = Boolean(nMask & 1); \toDesc.configurable = Boolean(nMask & 2); \tObject.defineProperty(oObj, sKey, oDesc); }  \/** *\t:: function setProp :: * *\tvVal_fGet is the value to assign to a data descriptor or the getter function to assign to an accessor descriptor; * *\tnMask is a bitmask: * *\tflag 0x1: property is enumerable, *\tflag 0x2: property is configurable, *\tflag 0x4: property is data descriptor, *\tflag 0x8: property is writable. *\tNote: If flag 0x8 is setted to \"writable\", the propery will be considered a data descriptor even if the flag 0x4 is setted to \"accessor descriptor\"! * *\tValues: * *\t0  : accessor descriptor - not configurable, not enumerable (0000). *\t1  : accessor descriptor - not configurable, enumerable (0001). *\t2  : accessor descriptor - configurable, not enumerable (0010). *\t3  : accessor descriptor - configurable, enumerable (0011). *\t4  : readonly data descriptor - not configurable, not enumerable (0100). *\t5  : readonly data descriptor - not configurable, enumerable (0101). *\t6  : readonly data descriptor - configurable, not enumerable (0110). *\t7  : readonly data descriptor - configurable, enumerable (0111). *\t8  : writable data descriptor - not configurable, not enumerable (1000). *\t9  : writable data descriptor - not configurable, enumerable (1001). *\t10 : writable data descriptor - configurable, not enumerable (1010). *\t11 : writable data descriptor - configurable, enumerable (1011). *\/  \/\/ creating a new empty object var myObj = {};  \/\/ adding a writable data descriptor - not configurable, not enumerable setProp(8, myObj, \"myNumber\", 25);  \/\/ adding a readonly data descriptor - not configurable, enumerable setProp(5, myObj, \"myString\", \"Hello world!\");  \/\/ adding an accessor descriptor - not configurable, enumerable setProp(1, myObj, \"myArray\", function() { \tfor (var iBit = 0, iFlag = 1, aBoolArr = [false]; iFlag < this.myNumber + 1 || (this.myNumber & iFlag); iFlag = iFlag << 1) { aBoolArr[iBit++] = Boolean(this.myNumber & iFlag); } \treturn aBoolArr; }, function(aNewMask) { \tfor (var nNew = 0, iBit = 0; iBit < aNewMask.length; iBit++) { nNew |= Boolean(aNewMask[iBit]) << iBit; } \tthis.myNumber = nNew; });  \/\/ adding a writable data descriptor (undefined value) - configurable, enumerable setProp(11, myObj, \"myUndefined\");  \/\/ adding an accessor descriptor (only getter) - not configurable, enumerable setProp(1, myObj, \"myDate\", function() { return new Date(); });  \/\/ adding an accessor descriptor (only setter) - not configurable, not enumerable setProp(0, myObj, \"myAlert\", null, function(sTxt) { alert(sTxt); });  myObj.myAlert = myObj.myDate.toLocaleString() + \"\\n\\n\" + myObj.myString + \"\\nThe number \" + myObj.myNumber + \" represents the following bitmask: \" + myObj.myArray.join(\", \") + \".\";\r          You can do the same thing with an anonymous descriptor object. \r           new (function() { \tfunction buildProp (nMask, oObj, sKey, vVal_fGet, fSet) { \t\tif (nMask & 12) { \t\t\tif (arguments.length > 3) { this.value = vVal_fGet; } else { delete this.value; } \t\t\tthis.writable = Boolean(nMask & 8); \t\t\tdelete this.get; \t\t\tdelete this.set; \t\t} else { \t\t\tif (vVal_fGet) { this.get = vVal_fGet; } else { delete this.get; } \t\t\tif (fSet) { this.set = fSet; } else { delete this.set; } \t\t\tdelete this.value; \t\t\tdelete this.writable; \t\t} \t\tthis.enumerable = Boolean(nMask & 1); \t\tthis.configurable = Boolean(nMask & 2); \t\tObject.defineProperty(oObj, sKey, this); \t}; \tbuildProp(5, window, \"setProp\", buildProp); })();  \/\/ creating a new empty object var myObj = {};  \/\/ adding a writable data descriptor - not configurable, not enumerable setProp(8, myObj, \"myNumber\", 25);  \/\/ adding a readonly data descriptor - not configurable, enumerable setProp(5, myObj, \"myString\", \"Hello world!\"); \/\/ etc. etc.\r          Examples \r           var oDesc = {}; function setProp (nMask, oObj, sKey, vVal_fGet, fSet) { \tif (nMask & 12) { \t\tif (arguments.length > 3) { oDesc.value = vVal_fGet; } else { delete oDesc.value; } \t\toDesc.writable = Boolean(nMask & 8); \t\tdelete oDesc.get; \t\tdelete oDesc.set; \t} else { \t\tif (vVal_fGet) { oDesc.get = vVal_fGet; } else { delete oDesc.get; } \t\tif (fSet) { oDesc.set = fSet; } else { delete oDesc.set; } \t\tdelete oDesc.value; \t\tdelete oDesc.writable; \t} \toDesc.enumerable = Boolean(nMask & 1); \toDesc.configurable = Boolean(nMask & 2); \tObject.defineProperty(oObj, sKey, oDesc); }  \/** *\t:: function setProp :: * *\tvVal_fGet is the value to assign to a data descriptor or the getter function to assign to an accessor descriptor; * *\tnMask is a bitmask: * *\tflag 0x1: property is enumerable, *\tflag 0x2: property is configurable, *\tflag 0x4: property is data descriptor, *\tflag 0x8: property is writable. *\tNote: If flag 0x8 is setted to \"writable\", the propery will be considered a data descriptor even if the flag 0x4 is setted to \"accessor descriptor\"! * *\tValues: * *\t0  : accessor descriptor - not configurable, not enumerable (0000). *\t1  : accessor descriptor - not configurable, enumerable (0001). *\t2  : accessor descriptor - configurable, not enumerable (0010). *\t3  : accessor descriptor - configurable, enumerable (0011). *\t4  : readonly data descriptor - not configurable, not enumerable (0100). *\t5  : readonly data descriptor - not configurable, enumerable (0101). *\t6  : readonly data descriptor - configurable, not enumerable (0110). *\t7  : readonly data descriptor - configurable, enumerable (0111). *\t8  : writable data descriptor - not configurable, not enumerable (1000). *\t9  : writable data descriptor - not configurable, enumerable (1001). *\t10 : writable data descriptor - configurable, not enumerable (1010). *\t11 : writable data descriptor - configurable, enumerable (1011). *\/  \/\/ creating a new empty object var myObj = {};  \/\/ adding a writable data descriptor - not configurable, not enumerable setProp(8, myObj, \"myNumber\", 25);  \/\/ adding a readonly data descriptor - not configurable, enumerable setProp(5, myObj, \"myString\", \"Hello world!\");  \/\/ adding an accessor descriptor - not configurable, enumerable setProp(1, myObj, \"myArray\", function() { \tfor (var iBit = 0, iFlag = 1, aBoolArr = [false]; iFlag < this.myNumber + 1 || (this.myNumber & iFlag); iFlag = iFlag << 1) { aBoolArr[iBit++] = Boolean(this.myNumber & iFlag); } \treturn aBoolArr; }, function(aNewMask) { \tfor (var nNew = 0, iBit = 0; iBit < aNewMask.length; iBit++) { nNew |= Boolean(aNewMask[iBit]) << iBit; } \tthis.myNumber = nNew; });  \/\/ adding a writable data descriptor (undefined value) - configurable, enumerable setProp(11, myObj, \"myUndefined\");  \/\/ adding an accessor descriptor (only getter) - not configurable, enumerable setProp(1, myObj, \"myDate\", function() { return new Date(); });  \/\/ adding an accessor descriptor (only setter) - not configurable, not enumerable setProp(0, myObj, \"myAlert\", null, function(sTxt) { alert(sTxt); });  myObj.myAlert = myObj.myDate.toLocaleString() + \"\\n\\n\" + myObj.myString + \"\\nThe number \" + myObj.myNumber + \" represents the following bitmask: \" + myObj.myArray.join(\", \") + \".\";\r          You can do the same thing with an anonymous descriptor object. \r           new (function() { \tfunction buildProp (nMask, oObj, sKey, vVal_fGet, fSet) { \t\tif (nMask & 12) { \t\t\tif (arguments.length > 3) { this.value = vVal_fGet; } else { delete this.value; } \t\t\tthis.writable = Boolean(nMask & 8); \t\t\tdelete this.get; \t\t\tdelete this.set; \t\t} else { \t\t\tif (vVal_fGet) { this.get = vVal_fGet; } else { delete this.get; } \t\t\tif (fSet) { this.set = fSet; } else { delete this.set; } \t\t\tdelete this.value; \t\t\tdelete this.writable; \t\t} \t\tthis.enumerable = Boolean(nMask & 1); \t\tthis.configurable = Boolean(nMask & 2); \t\tObject.defineProperty(oObj, sKey, this); \t}; \tbuildProp(5, window, \"setProp\", buildProp); })();  \/\/ creating a new empty object var myObj = {};  \/\/ adding a writable data descriptor - not configurable, not enumerable setProp(8, myObj, \"myNumber\", 25);  \/\/ adding a readonly data descriptor - not configurable, enumerable setProp(5, myObj, \"myString\", \"Hello world!\"); \/\/ etc. etc.\r          Cross-browser concerns Redefining the length property of an Array object It is possible to redefine the length property of arrays, but not all browsers permit this redefinition. \u00a0Firefox 4 will throw a TypeError on any attempt to redefine the length property of an array. \u00a0Versions of Chrome which implement Object.defineProperty\u00a0in some circumstances ignore a length value different from the array's current length property, and changing writability seems to silently not work in some circumstances. \u00a0Versions of Safari which implement Object.defineProperty\u00a0ignore a length value different from the array's current length property, and attempts to change writability execute without error but do not actually change the property's writability. \u00a0Only IE9 appears to fully and correctly implement redefinition of the length property of arrays. \u00a0For now, don't rely on redefining the length property of an array to either work, or to work in a particular manner. Internet Explorer 8 specific case IE8 implemented a Object.defineProperty() method that could only be used on DOM objects. A couple of things need to be noted:  Trying to use Object.defineProperty() on native objects throws an error. Property attributes must be set to some values. true, true, true for data descriptor and true for configurable, false for enumerable for accessor descriptor. Any attempt to provide other value will result in an error being thrown. Reconfiguring a property requires to delete the property first. If the property isn't deleted, it stays as it was before the reconfiguration attempt.  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 (8, but only on DOM objects and with some non standard behaviors. See above.) -- 5.1 (5, but not on DOM objects)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat tables.Redefining the length property of an Array object It is possible to redefine the length property of arrays, but not all browsers permit this redefinition. \u00a0Firefox 4 will throw a TypeError on any attempt to redefine the length property of an array. \u00a0Versions of Chrome which implement Object.defineProperty\u00a0in some circumstances ignore a length value different from the array's current length property, and changing writability seems to silently not work in some circumstances. \u00a0Versions of Safari which implement Object.defineProperty\u00a0ignore a length value different from the array's current length property, and attempts to change writability execute without error but do not actually change the property's writability. \u00a0Only IE9 appears to fully and correctly implement redefinition of the length property of arrays. \u00a0For now, don't rely on redefining the length property of an array to either work, or to work in a particular manner. Internet Explorer 8 specific case IE8 implemented a Object.defineProperty() method that could only be used on DOM objects. A couple of things need to be noted:  Trying to use Object.defineProperty() on native objects throws an error. Property attributes must be set to some values. true, true, true for data descriptor and true for configurable, false for enumerable for accessor descriptor. Any attempt to provide other value will result in an error being thrown. Reconfiguring a property requires to delete the property first. If the property isn't deleted, it stays as it was before the reconfiguration attempt.  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 (8, but only on DOM objects and with some non standard behaviors. See above.) -- 5.1 (5, but not on DOM objects)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat tables.See also  Object.create"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/create","title":"Object.create","description":"Creates a new object with the specified prototype object and properties.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.create(proto [, propertiesObject ]) Parameters  proto The object which should be the prototype of the newly-created object. propertiesObject If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names.  Description Throws a TypeError exception if the proto parameter isn't null or an object.  Examples \r           var o;  \/\/ create an object with null as prototype o = Object.create(null);   o = {}; \/\/ is equivalent to: o = Object.create(Object.prototype);   function Constructor(){} o = new Constructor(); \/\/ is equivalent to: o = Object.create(Constructor.prototype); \/\/ Of course, if there is actual initialization code in the Constructor function, the Object.create cannot reflect it   \/\/ create a new object whose prototype is a new, empty object \/\/ and a adding single property 'p', with value 42 o = Object.create({}, { p: { value: 42 } })  \/\/ by default properties ARE NOT writable, enumerable or configurable: o.p = 24 o.p \/\/42  o.q = 12 for (var prop in o) {    console.log(prop) } \/\/\"q\"  delete o.p \/\/false  \/\/to specify an ES3 property o2 = Object.create({}, { p: { value: 42, writable: true, enumerable: true, configurable: true } });\r          Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 4 (2.0) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Polyfill \r           if (!Object.create) {     Object.create = function (o) {         if (arguments.length > 1) {             throw new Error('Object.create implementation only accepts the first parameter.');         }         function F() {}         F.prototype = o;         return new F();     }; }\r          This polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account. Polyfill \r           if (!Object.create) {     Object.create = function (o) {         if (arguments.length > 1) {             throw new Error('Object.create implementation only accepts the first parameter.');         }         function F() {}         F.prototype = o;         return new F();     }; }\r          This polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account. See also  Object.defineProperty Object.defineProperties Object.prototype.isPrototypeOf John\u00a0Resig's post on getPrototypeOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/prototype","title":"Object.prototype","description":"Represents the Object prototype object. Description All objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden\u00a0(except an\u00a0Object\u00a0with a null prototype, i.e.\u00a0Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain. Properties  constructor Specifies the function that creates an object's prototype. __count__   Obsolete since JavaScript 1.8.5 Returns the number of enumerable properties directly on a user-defined object. __parent__   Obsolete since JavaScript 1.8.5 Points to an object's context. __proto__ Non-standard      Points to the object which was used as prototype when the object was instantiated.  Methods  __defineGetter__ Non-standard      Associates a function with a property that, when accessed, executes that function and returns its return value.   __defineSetter__ Non-standard      Associates a function with a property that, when set, executes that function which modifies the property.   eval   Obsolete since JavaScript 1.8.5 Evaluates a string of JavaScript code in the context of the specified object. hasOwnProperty Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. isPrototypeOf Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.   __lookupGetter__ Non-standard      Returns the function associated with the specified property by the __defineGetter__ method.   __lookupSetter__ Non-standard      Returns the function associated with the specified property by the __defineSetter__ method.   __noSuchMethod__ Non-standard      Allows a function to be defined that will be executed when an undefined object member is called as a method.   propertyIsEnumerable Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.   toSource Non-standard      Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.   toLocaleString Calls toString.   toString Returns a string representation of the object.   unwatch Non-standard      Removes a watchpoint from a property of the object.   valueOf Returns the primitive value of the specified object.   watch Non-standard      Adds a watchpoint to a property of the object."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperties","title":"Object.defineProperties","description":"Defines new or modifies existing properties directly on an object, returning the object.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.defineProperties(obj, props) Parameters  obj The object on which to define or modify properties. props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.  Description Object.defineProperties, in essence, defines all properties corresponding to the enumerable own properties of props on the object objrops object. Assuming a pristine execution environment with all names and properties referring to their initial values, Object.defineProperties is almost completely equivalent (note the comment in isCallable) to the following reimplementation in JavaScript: \r           function defineProperties(obj, properties) {   function convertToDescriptor(desc)   {     function hasProperty(obj, prop)     {       return Object.prototype.hasOwnProperty.call(obj, prop);     }      function isCallable(v)     {       \/\/ NB: modify as necessary if other values than functions are callable.       return typeof v === \"function\";     }      if (typeof desc !== \"object\" || desc === null)       throw new TypeError(\"bad desc\");      var d = {};     if (hasProperty(desc, \"enumerable\"))       d.enumerable = !!obj.enumerable;     if (hasProperty(desc, \"configurable\"))       d.configurable = !!obj.configurable;     if (hasProperty(desc, \"value\"))       d.value = obj.value;     if (hasProperty(desc, \"writable\"))       d.writable = !!desc.writable;     if (hasProperty(desc, \"get\"))     {       var g = desc.get;       if (!isCallable(g) && g !== \"undefined\")         throw new TypeError(\"bad get\");       d.get = g;     }     if (hasProperty(desc, \"set\"))     {       var s = desc.set;       if (!isCallable(s) && s !== \"undefined\")         throw new TypeError(\"bad set\");       d.set = s;     }      if ((\"get\" in d || \"set\" in d) && (\"value\" in d || \"writable\" in d))       throw new TypeError(\"identity-confused descriptor\");      return d;   }    if (typeof obj !== \"object\" || obj === null)     throw new TypeError(\"bad obj\");    properties = Object(properties);   var keys = Object.keys(properties);   var descs = [];   for (var i = 0; i < keys.length; i++)     descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);   for (var i = 0; i < descs.length; i++)     Object.defineProperty(obj, descs[i][0], descs[i][1]);    return obj; }\r          Browser compatibility Based on Kangax's compat tables.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty Object.keys Browser compatibility Based on Kangax's compat tables.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty Object.keys"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyDescriptor","title":"Object.getOwnPropertyDescriptor","description":"Syntax Object.getOwnPropertyDescriptor(obj, prop) Parameters  obj The object in which to look for the property. prop The name of the property whose description is to be retrieved  Description This method permits examination of the precise description of a property. A property in JavaScript consists of a string-valued name and a property descriptor. A property descriptor is a record with some of the following attributes:  value The value associated with the property (data descriptors only). writable true if and only if the value associated with the property may be changed (data descriptors only). get A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only). set A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only). configurable true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. enumerable true if and only if this property shows up during enumeration of the properties on the corresponding object.  Further information about property descriptor attributes can be found on the Object.defineProperty descriptionExamples \r           var o, d;  o = { get foo() { return 17; } }; d = Object.getOwnPropertyDescriptor(o, \"foo\"); \/\/ d is { configurable: true, enumerable: true, get: \/*the getter function*\/, set: undefined }  o = { bar: 42 }; d = Object.getOwnPropertyDescriptor(o, \"bar\"); \/\/ d is { configurable: true, enumerable: true, value: 42, writable: true }  o = {}; Object.defineProperty(o, \"baz\", { value: 8675309, writable: false, enumerable: false }); d = Object.getOwnPropertyDescriptor(o, \"baz\"); \/\/ d is { value: 8675309, writable: false, enumerable: false, configurable: false }\r          Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 8 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/keys","title":"Object.keys","description":"Returns an array of all own enumerable properties found upon a given object, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.keys(obj) Parameters  obj The object whose enumerable own properties are to be returned.  Description Object.keys returns an array whose elements are strings corresponding to the enumerable properties found directly upon object. The ordering of the properties is the same as that given by looping over the properties of the object manually. Examples \r           var arr = [\"a\", \"b\", \"c\"]; alert(Object.keys(arr)); \/\/ will alert \"0,1,2\"  \/\/ array like object var obj = { 0 : \"a\", 1 : \"b\", 2 : \"c\"}; alert(Object.keys(obj)); \/\/ will alert \"0,1,2\"  \/\/ getFoo is property which isn't enumerable var my_obj = Object.create({}, { getFoo : { value : function () { return this.foo } } }); my_obj.foo = 1;  alert(Object.keys(my_obj)); \/\/ will alert only foo\r          If you want all properties, even the not enumerable, see Object.getOwnPropertyNames.\u00a0 Compatiblity To add compatible Object.keys support in older environments that do not natively support it, copy the following snippet: \r           if(!Object.keys) Object.keys = function(o){  if (o !== Object(o))       throw new TypeError('Object.keys called on non-object');  var ret=[],p;  for(p in o) if(Object.prototype.hasOwnProperty.call(o,p)) ret.push(p);  return ret; }\r          Browser support Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  propertyIsEnumerable Object.create Object.getOwnPropertyNames Bug\u00a0307791 - Implement ES5's Object.keys(O)"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyNames","title":"Object.getOwnPropertyNames","description":"Returns an array of all properties (enumerable or not) found upon a given object.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.getOwnPropertyNames(obj) Parameters  obj The object whose enumerable and non-enumerable own properties are to be returned.  Description Object.getOwnPropertyNames returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly upon obj. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a \u00a0for...in loop\u00a0(or by\u00a0Object.keys) over the properties of the object. \u00a0The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined. Examples \r           var arr = [\"a\", \"b\", \"c\"]; print(Object.getOwnPropertyNames(arr).sort()); \/\/ prints \"0,1,2,length\"  \/\/ array-like object var obj = { 0: \"a\", 1: \"b\", 2: \"c\"}; print(Object.getOwnPropertyNames(obj).sort()); \/\/ prints \"0,1,2\"  \/\/ non-enumerable property var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } }); my_obj.foo = 1;  print(Object.getOwnPropertyNames(my_obj).sort()); \/\/ prints \"foo, getFoo\"\r          If you want only the enumerable properties, see Object.keys or use a for...in loop\u00a0(although note that this will return enumerable properties not found directly upon that object but also along the prototype chain for the object). Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  propertyIsEnumerable Object.create Object.keys Bug\u00a0518663 - ES5: Object.getOwnPropertyNames"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/GetPrototypeOf","title":"Object.GetPrototypeOf","description":"Returns the prototype of the specified object.    Method of Object     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.getPrototypeOf(object) Parameters  object The object whose prototype is to be returned.  Description Throws a TypeError exception if the object parameter isn't an Object. Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 5 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Even if Opera does not support Object.getPrototypeOf() yet, it does support the non-standard __proto__ property since Opera 10.50.See also  isPrototypeOf\u00a0 John\u00a0Resig's post on getPrototypeOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/preventExtensions","title":"Object.preventExtensions","description":"Prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.preventExtensions(obj) Parameters  obj The object which should be made non-extensible.  Description An object is extensible if new properties can be added to it. \u00a0preventExtensions\u00a0marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. \u00a0Note that the properties of a non-extensible object, in general, may still be deleted. Attempting to add new properties to a non-extensible object will fail, either silently or by throwing a TypeError (most commonly, but not exclusively, when in\u00a0strict mode). Object.preventExtensions only prevents addition of own properties. Properties can still be added to the object prototype. However, calling Object.preventExtensions on an object will also prevent extensions on its __proto__ (   Deprecated   ) property. If there is a way to turn an extensible object to a non-extensible one, there is no way to do the opposite in ECMAScript 5 Examples \r           \/\/ Object.preventExtensions returns the object being made non-extensible. var obj = {}; var obj2 = Object.preventExtensions(obj); assert(obj === obj2);  \/\/ Objects are extensible by default. var empty = {}; assert(Object.isExtensible(empty) === true);  \/\/ ...but that can be changed. Object.preventExtensions(empty); assert(Object.isExtensible(empty) === false);  \/\/ Object.defineProperty throws when adding a new property to a non-extensible object. var nonExtensible = { removable: true }; Object.preventExtensions(nonExtensible); Object.defineProperty(nonExtensible, \"new\", { value: 8675309 }); \/\/ throws a TypeError  \/\/ In strict mode, attempting to add new properties to a non-extensible object throws a TypeError. function fail() {   \"use strict\";   nonExtensible.newProperty = \"FAIL\"; \/\/ throws a TypeError } fail();  \/\/ EXTENSION (only works in engines supporting __proto__ (which is deprecated. Use Object.getPrototypeOf instead)): A non-extensible object's prototype is immutable. var fixed = Object.preventExtensions({}); fixed.__proto__ = { oh: \"hai\" }; \/\/ throws a TypeError\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.isExtensible Object.seal Object.isSealed Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isExtensible","title":"Object.isExtensible","description":"Determines if an object is extensible (whether it can have new properties added to it).    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isExtensible(obj) Parameters  obj The object which should be checked.  Description Objects are extensible by default: they can have new properties added to them, and (in engines that support __proto__   Deprecated   their __proto__ property) can be modified. An object can be marked as non-extensible using Object.preventExtensions, Object.seal, or Object.freeze. Examples \r           \/\/ New objects are extensible. var empty = {}; assert(Object.isExtensible(empty) === true);  \/\/ ...but that can be changed. Object.preventExtensions(empty); assert(Object.isExtensible(empty) === false);  \/\/ Sealed objects are by definition non-extensible. var sealed = Object.seal({}); assert(Object.isExtensible(sealed) === false);  \/\/ Frozen objects are also by definition non-extensible. var frozen = Object.freeze({}); assert(Object.isExtensible(frozen) === false);\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.preventExtensions Object.seal Object.isSealed Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/seal","title":"Object.seal","description":"Seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.seal(obj) Parameters  obj The object which should be sealed.  Description By default objects are extensible (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a TypeError (most commonly, although not exclusively, when in strict mode\u00a0code). The prototype chain remains untouched. However, the __proto__ (   Deprecated   ) property is sealed as well. Examples \r           var obj = {     prop: function () {},     foo: \"bar\"   };  \/\/ New properties may be added, existing properties may be changed or removed obj.foo = \"baz\"; obj.lumpy = \"woof\"; delete obj.prop;  var o = Object.seal(obj); assert(o === obj); assert(Object.isSealed(obj) === true);  \/\/ Changing property values on a sealed object still works. obj.foo = \"quux\";  \/\/ But you can't convert data properties to accessors, or vice versa. Object.defineProperty(obj, \"foo\", { get: function() { return \"g\"; } }); \/\/ throws a TypeError  \/\/ Now any changes, other than to property values, will fail. obj.quaxxor = \"the friendly duck\"; \/\/ silently doesn't add the property delete obj.foo; \/\/ silently doesn't delete the property  \/\/ ...and in strict mode such attempts will throw TypeErrors function fail() {   \"use strict\";   delete obj.foo; \/\/ throws a TypeError   obj.sparky = \"arf\"; \/\/ throws a TypeError } fail();  \/\/ Attempted additions through Object.defineProperty will also throw Object.defineProperty(obj, \"ohai\", { value: 17 }); \/\/ throws a TypeError Object.defineProperty(obj, \"foo\", { value: \"eit\" }); \/\/ throws a TypeError\r          Examples \r           var obj = {     prop: function () {},     foo: \"bar\"   };  \/\/ New properties may be added, existing properties may be changed or removed obj.foo = \"baz\"; obj.lumpy = \"woof\"; delete obj.prop;  var o = Object.seal(obj); assert(o === obj); assert(Object.isSealed(obj) === true);  \/\/ Changing property values on a sealed object still works. obj.foo = \"quux\";  \/\/ But you can't convert data properties to accessors, or vice versa. Object.defineProperty(obj, \"foo\", { get: function() { return \"g\"; } }); \/\/ throws a TypeError  \/\/ Now any changes, other than to property values, will fail. obj.quaxxor = \"the friendly duck\"; \/\/ silently doesn't add the property delete obj.foo; \/\/ silently doesn't delete the property  \/\/ ...and in strict mode such attempts will throw TypeErrors function fail() {   \"use strict\";   delete obj.foo; \/\/ throws a TypeError   obj.sparky = \"arf\"; \/\/ throws a TypeError } fail();  \/\/ Attempted additions through Object.defineProperty will also throw Object.defineProperty(obj, \"ohai\", { value: 17 }); \/\/ throws a TypeError Object.defineProperty(obj, \"foo\", { value: \"eit\" }); \/\/ throws a TypeError\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.isSealed Object.preventExtensions Object.isExtensible  Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/freeze","title":"Object.freeze","description":"Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed.\u00a0In essence the object is made effectively immutable. The method returns the object being frozen.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.freeze(obj) Parameters  obj The object which should be frozen.  Description Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode). Values cannot be changed for data properties. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value) Examples \r           var obj = {   prop: function (){},   foo: \"bar\" };  \/\/ New properties may be added, existing properties may be changed or removed obj.foo = \"baz\"; obj.lumpy = \"woof\"; delete obj.prop;  var o = Object.freeze(obj);  assert(Object.isFrozen(obj) === true);  \/\/ Now any changes will fail obj.foo = \"quux\"; \/\/ silently does nothing obj.quaxxor = \"the friendly duck\"; \/\/ silently doesn't add the property  \/\/ ...and in strict mode such attempts will throw TypeErrors function fail(){   \"use strict\";   obj.foo = \"sparky\"; \/\/ throws a TypeError   delete obj.quaxxor; \/\/ throws a TypeError   obj.sparky = \"arf\"; \/\/ throws a TypeError } fail();  \/\/ Attempted changes through Object.defineProperty will also throw Object.defineProperty(obj, \"ohai\", { value: 17 }); \/\/ throws a TypeError Object.defineProperty(obj, \"foo\", { value: \"eit\" }); \/\/ throws a TypeError\r          Examples \r           var obj = {   prop: function (){},   foo: \"bar\" };  \/\/ New properties may be added, existing properties may be changed or removed obj.foo = \"baz\"; obj.lumpy = \"woof\"; delete obj.prop;  var o = Object.freeze(obj);  assert(Object.isFrozen(obj) === true);  \/\/ Now any changes will fail obj.foo = \"quux\"; \/\/ silently does nothing obj.quaxxor = \"the friendly duck\"; \/\/ silently doesn't add the property  \/\/ ...and in strict mode such attempts will throw TypeErrors function fail(){   \"use strict\";   obj.foo = \"sparky\"; \/\/ throws a TypeError   delete obj.quaxxor; \/\/ throws a TypeError   obj.sparky = \"arf\"; \/\/ throws a TypeError } fail();  \/\/ Attempted changes through Object.defineProperty will also throw Object.defineProperty(obj, \"ohai\", { value: 17 }); \/\/ throws a TypeError Object.defineProperty(obj, \"foo\", { value: \"eit\" }); \/\/ throws a TypeError\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 12 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table. See also  Object.isFrozen Object.preventExtensions Object.isExtensible   Object.seal Object.isSealed"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isSealed","title":"Object.isSealed","description":"Determine if an object is sealed.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isSealed(obj) Parameters  obj The object which should be checked.  Description Returns true if the object is sealed, otherwise false. An object is sealed if it is non-extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable). Examples \r           \/\/ Objects aren't sealed by default. var empty = {}; assert(Object.isSealed(empty) === false);  \/\/ If you make an empty object non-extensible, it is vacuously sealed. Object.preventExtensions(empty); assert(Object.isSealed(empty) === true);  \/\/ The same is not true of a non-empty object, unless its properties are all non-configurable. var hasProp = { fee: \"fie foe fum\" }; Object.preventExtensions(hasProp); assert(Object.isSealed(hasProp) === false);  \/\/ But make them all non-configurable and the object becomes sealed. Object.defineProperty(hasProp, \"fee\", { configurable: false }); assert(Object.isSealed(hasProp) === true);  \/\/ The easiest way to seal an object, of course, is Object.seal. var sealed = {}; Object.seal(sealed); assert(Object.isSealed(sealed) === true);  \/\/ A sealed object is, by definition, non-extensible. assert(Object.isExtensible(sealed) === false);  \/\/ A sealed object might be frozen, but it doesn't have to be. assert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable  var s2 = Object.seal({ p: 3 }); assert(Object.isFrozen(s2) === false); \/\/ \"p\" is still writable  var s3 = Object.seal({ get p() { return 0; } }); assert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r          Examples \r           \/\/ Objects aren't sealed by default. var empty = {}; assert(Object.isSealed(empty) === false);  \/\/ If you make an empty object non-extensible, it is vacuously sealed. Object.preventExtensions(empty); assert(Object.isSealed(empty) === true);  \/\/ The same is not true of a non-empty object, unless its properties are all non-configurable. var hasProp = { fee: \"fie foe fum\" }; Object.preventExtensions(hasProp); assert(Object.isSealed(hasProp) === false);  \/\/ But make them all non-configurable and the object becomes sealed. Object.defineProperty(hasProp, \"fee\", { configurable: false }); assert(Object.isSealed(hasProp) === true);  \/\/ The easiest way to seal an object, of course, is Object.seal. var sealed = {}; Object.seal(sealed); assert(Object.isSealed(sealed) === true);  \/\/ A sealed object is, by definition, non-extensible. assert(Object.isExtensible(sealed) === false);  \/\/ A sealed object might be frozen, but it doesn't have to be. assert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable  var s2 = Object.seal({ p: 3 }); assert(Object.isFrozen(s2) === false); \/\/ \"p\" is still writable  var s3 = Object.seal({ get p() { return 0; } }); assert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.seal Object.preventExtensions Object.isExtensible  Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isFrozen","title":"Object.isFrozen","description":"Determine if an object is frozen.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isFrozen(obj) Parameters  obj The object which should be checked.  Description An object is frozen if and only if it is not extensible, all its properties are\u00a0non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable. Examples \r           \/\/ A new object is extensible, so it is not frozen. assert(Object.isFrozen({}) === false);  \/\/ An empty object which is not extensible is vacuously frozen. var vacuouslyFrozen = Object.preventExtensions({}); assert(Object.isFrozen(vacuouslyFrozen) === true);  \/\/ A new object with one property is also extensible, ergo not frozen. var oneProp = { p: 42 }; assert(Object.isFrozen(oneProp) === false);  \/\/ Preventing extensions to the object still doesn't make it frozen, \/\/ because the property is still configurable (and writable). Object.preventExtensions(oneProp); assert(Object.isFrozen(oneProp) === false);  \/\/ ...but then deleting that property makes the object vacuously frozen. delete oneProp.p; assert(Object.isFrozen(oneProp) === true);  \/\/ A non-extensible object with a non-writable but still configurable property is not frozen. var nonWritable = { e: \"plep\" }; Object.preventExtensions(nonWritable); Object.defineProperty(nonWritable, \"e\", { writable: false }); \/\/ make non-writable assert(Object.isFrozen(nonWritable) === false);  \/\/ Changing that property to non-configurable then makes the object frozen. Object.defineProperty(nonWritable, \"e\", { configurable: false }); \/\/ make non-configurable assert(Object.isFrozen(nonWritable) === true);  \/\/ A non-extensible object with a non-configurable but still writable property also isn't frozen. var nonConfigurable = { release: \"the kraken!\" }; Object.preventExtensions(nonConfigurable); Object.defineProperty(nonConfigurable, \"release\", { configurable: false }); assert(Object.isFrozen(nonConfigurable) === false);  \/\/ Changing that property to non-writable then makes the object frozen. Object.defineProperty(nonConfigurable, \"release\", { writable: false }); assert(Object.isFrozen(nonConfigurable) === true);  \/\/ A non-extensible object with a configurable accessor property isn't frozen. var accessor = { get food() { return \"yum\"; } }; Object.preventExtensions(accessor); assert(Object.isFrozen(accessor) === false);  \/\/ ...but make that property non-configurable and it becomes frozen. Object.defineProperty(accessor, \"food\", { configurable: false }); assert(Object.isFrozen(accessor) === true);  \/\/ But the easiest way for an object to be frozen is if Object.freeze has been called on it. var frozen = { 1: 81 }; assert(Object.isFrozen(frozen) === false); Object.freeze(frozen); assert(Object.isFrozen(frozen) === true);  \/\/ By definition, a frozen object is non-extensible. assert(Object.isExtensible(frozen) === false);  \/\/ Also by definition, a frozen object is sealed. assert(Object.isSealed(frozen) === true);\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table. See also  Object.freeze  Object.preventExtensions Object.isExtensible  Object.seal Object.isSealed Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table. See also  Object.freeze  Object.preventExtensions Object.isExtensible  Object.seal Object.isSealed See also  Object.freeze  Object.preventExtensions Object.isExtensible  Object.seal Object.isSealed"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/constructor","title":"Object.constructor","description":"Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, \"read-only\").    Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description All objects inherit a constructor property from their prototype:  o = new Object \/\/ or o = {} in JavaScript 1.2 o.constructor == Object a = new Array \/\/ or a = [] in JavaScript 1.2 a.constructor == Array n = new Number(3) n.constructor == Number  Even though you cannot construct most HTML objects, you can do comparisons. For example,  document.constructor == Document document.form3.constructor == Form  Examples Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));  Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/proto","title":"Object.proto","description":"Refers to the prototype of the object, which may be an object or null\u00a0(which usually means the object is Object.prototype, which has no prototype). \u00a0It is sometimes used to implement prototype-inheritance based property lookup. This property is deprecated and should not be used in new code: use Object.getPrototypeOf\u00a0instead. Syntax var proto = obj.__proto__; Note: this is two underscores, followed by the five characters \"proto\", followed by two more underscores. Description When an object is created, its __proto__ property is set to constructing function's prototype property. For example var fred = new Employee(); will cause fred.__proto__ = Employee.prototype;. This is used at runtime to look up properties which are not declared in the object directly. E.g. when fred.doSomething() is executed and fred does not contain a doSomething, fred.__proto__ is checked, which points to Employee.prototype, which contains a doSomething, i.e. fred.__proto__.doSomething() is invoked. Note that __proto__ is a property of the instances, whereas prototype is a property of their constructor functions. Example This example demonstrates that the __proto__ property can be changed to point to a different object after initial construction. This change will alter the lookup results for object properties. This example also illustrates that all objects have __proto__, including the objects bound to the prototype property of functions. The object  anOnion will have a __proto__ property equal to Plant.prototype; if we write anOnion.foo, then we will lookup foo in the anOnion object first, then in Plant.prototype (the value of anOnion.__proto__), then in Lifeform.prototype (the value of Plant.prototype set by the call to extend()), and finally in Lifeform.__proto__. \r           function extend(child, supertype) {    child.prototype.__proto__ = supertype.prototype; }  extend(Animal, Lifeform); extend(Plant, Lifeform);  var anOnion = new Plant();\r          However, this only applies to extensible objects:\u00a0a non-extensible object's\u00a0__proto__\u00a0property (more generally, the object's prototype) cannot be changed: \r           var obj = {}; Object.preventExtensions(obj);  obj.__proto__ = {}; \/\/ throws a TypeError"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineGetter","title":"Object.defineGetter","description":"Binds an object's property to a function to be called when that property is looked up.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__defineGetter__(sprop, fun) Parameters  sprop a string containing the name of the property to bind to the given function   fun a function to be bound to a lookup of the specified property  Description The __defineGetter__ allows a getter to be defined on a pre-existing object. See also  get __lookupGetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineSetter","title":"Object.defineSetter","description":"Binds an object's property to a function to be called when an attempt is made to set that property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__defineSetter__(sprop, fun) Parameters  sprop a string containing the name of the property to be bound to the given function   fun a function to be called when there is an attempt to set the specified property. This function takes the form function (val) { .\u00a0.\u00a0. }  val an alias for the variable that holds the value attempted to be assigned to prop    Description The __defineSetter__ method allows a setter to be defined on a pre-existing object. See also  set __lookupSetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/eval","title":"Object.eval","description":"Evaluates a string of JavaScript code in the context of an object.Syntax object.eval(string) Parameters  string\u00a0 Any string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.  Description The eval method can't no longer be used as a method of Object. Use the top-level eval function instead.See Also eval"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/hasOwnProperty","title":"Object.hasOwnProperty","description":"Returns a boolean indicating whether the object has the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.hasOwnProperty(prop) Parameters  prop The name of the property to test.  Description Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain. Examples Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          See also for...in in inheritance"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isPrototypeOf","title":"Object.isPrototypeOf","description":"Tests for an object in another object's prototype chain.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 5th Edition    Syntax prototype.isPrototypeOf(object) Parameters  prototype \u00a0 an object to be tested against each link in the prototype chain of the object\u00a0 argument  Note:\u00a0isPrototypeOf differs from instanceof operator. In the expression object instanceof AFunction, the object prototype chain is checked against AFunction.prototype, not against AFunction itself   object the object whose prototype chain will be searched  Description isPrototypeOf allows you to check whether or not an object exists within another object's prototype chain. For example, consider the following prototype chain: function Fee() {   \/\/ . . . }  function Fi() {   \/\/ . . . } Fi.prototype = new Fee();  function Fo() {   \/\/ . . . } Fo.prototype = new Fi();  function Fum() {   \/\/ . . . } Fum.prototype = new Fo();  Later on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this: var fum = new Fum(); . . .  if (Fi.prototype.isPrototypeOf(fum)) {   \/\/ do something safe }  This, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object. See also  instanceof getProtoypeOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupGetter","title":"Object.lookupGetter","description":"Return the function bound as a getter to the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None, but see getOwnPropertyDescriptor and getPrototypeOf.   Syntax obj.__lookupGetter__(sprop) Parameters  sprop a string containing the name of the property whose getter should be returned  Description If a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. __lookupGetter__ can be used to obtain a reference to the getter function. It is now possible to do this in a standardized way using getOwnPropertyDescriptor and getPrototypeOf.See also  get __defineGetter__ __defineSetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/noSuchMethod","title":"Object.noSuchMethod","description":"Executes a function when a non-existent method is called on an object.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__noSuchMethod__ = fun Parameters  fun a function that takes the form function (id, args) { .\u00a0.\u00a0. }  id the name of the non-existent method that was called args an array of the arguments passed to the method    Description By default, an attempt to call a method that doesn't exist on an object results in a TypeError being thrown. This behavior can be circumvented by defining a function at that object's __noSuchMethod__ member. The function takes two arguments, the first is the name of the method attempted and the second is an array of the arguments that were passed in the method call. The second argument is an actual array (that is, it inherits through the Array prototype chain) and not the array-like arguments object. If this method cannot be called, either as if undefined by default, if deleted, or if manually set to a non-function, the JavaScript engine will revert to throwing TypeErrors. Example __noSuchMethod__ can be used to simulate multiple inheritance. An example of code that implements a primitive form of multiple inheritance is shown below. \r           \/\/ Doesn't work with multiple inheritance objects as parents  function noMethod(name, args) {   var parents=this.__parents_;      \/\/ Go through all parents      for (var i=0;i<parents.length;i++) {     \/\/ If we find a function on the parent, we call it     if (typeof parents[i][name] ==\"function\") {       return parents[i][name].apply(this, args);     }   }      \/\/ If we get here, the method hasn't been found      throw new TypeError; }  \/\/ Used to add a parent for multiple inheritance  function addParent(obj, parent) {   \/\/ If the object isn't initialized, initialize it      if (!obj.__parents_) {     obj.__parents_=[];     obj.__noSuchMethod__=noMethod;   }      \/\/ Add the parent      obj.__parents_.push(parent); }\r          An example of using this idea is shown below. \r           \/\/ Example base class 1  function NamedThing(name){   this.name=name; }  NamedThing.prototype = {   getName: function() {return this.name;},   setName: function(newName) {this.name=newName;} }  \/\/Example base class 2  function AgedThing(age){   this.age=age; }  AgedThing.prototype = {   getAge: function(){return this.age;},   setAge: function(age){this.age=age;} }  \/\/ Child class. inherits from NamedThing and AgedThing as well as defining address  function Person(name, age, address){   addParent(this, NamedThing.prototype);   NamedThing.call(this, name);   addParent(this, AgedThing.prototype);   AgedThing.call(this, age);   this.address=address; }  Person.prototype = {   getAddr: function() {return this.address;},   setAddr: function(addr) {this.address=addr;} }  var bob=new Person(\"bob\", 25, \"New York\");  console.log(\"getAge is \"+((\"getAge\" in bob)?\"in\":\"not in\")+\" bob\"); console.log(\"bob's age is: \"+bob.getAge()); console.log(\"getName is \"+((\"getName\" in bob)?\"in\":\"not in\")+\" bob\"); console.log(\"bob's name is: \"+bob.getName()); console.log(\"getAddr is \"+((\"getAddr\" in bob)?\"in\":\"not in\")+\" bob\"); console.log(\"bob's address is: \"+bob.getAddr());"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/propertyIsEnumerable","title":"Object.propertyIsEnumerable","description":"Returns a Boolean indicating whether the specified property is enumerable.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.propertyIsEnumerable(prop)Parameters  prop\u00a0 The name of the property to test.  Description Every object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false. Note: Starting in JavaScript 1.8.1 (in Firefox 3.6), propertyIsEnumerable(\"prototype\") returns false instead of true; this makes the result compliant with ECMAScript 5. Examples Example: A basic use of propertyIsEnumerable The following example shows the use of propertyIsEnumerable on objects and arrays: \r           var o = {}; var a = []; o.prop = 'is enumerable'; a[0] = 'is enumerable';  o.propertyIsEnumerable('prop');   \/\/ returns true a.propertyIsEnumerable(0);        \/\/ returns true\r          Example: User-defined versus built-in objects The following example demonstrates the enumerability of user-defined versus built-in properties: \r           var a = ['is enumerable'];  a.propertyIsEnumerable(0);          \/\/ returns true a.propertyIsEnumerable('length');   \/\/ returns false  Math.propertyIsEnumerable('random');   \/\/ returns false this.propertyIsEnumerable('Math');     \/\/ returns false\r          Example: Direct versus inherited properties \r           var a = []; a.propertyIsEnumerable('constructor');         \/\/ returns false  function firstConstructor() {   this.property = 'is not enumerable'; } firstConstructor.prototype.firstMethod = function () {};  function secondConstructor() {   this.method = function method() { return 'is enumerable'; }; }  secondConstructor.prototype = new firstConstructor; secondConstructor.prototype.constructor = secondConstructor;  var o = new secondConstructor(); o.arbitraryProperty = 'is enumerable';  o.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true o.propertyIsEnumerable('method');              \/\/ returns true o.propertyIsEnumerable('property');            \/\/ returns false  o.property = 'is enumerable';  o.propertyIsEnumerable('property');            \/\/ returns true  \/\/ These return false as they are on the prototype which  \/\/ propertyIsEnumerable does not consider (even though the last two \/\/ are iteratable with for-in) o.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6) o.propertyIsEnumerable('constructor'); \/\/ returns false o.propertyIsEnumerable('firstMethod'); \/\/ returns false\r          Example: A basic use of propertyIsEnumerable The following example shows the use of propertyIsEnumerable on objects and arrays: \r           var o = {}; var a = []; o.prop = 'is enumerable'; a[0] = 'is enumerable';  o.propertyIsEnumerable('prop');   \/\/ returns true a.propertyIsEnumerable(0);        \/\/ returns true\r          Example: User-defined versus built-in objects The following example demonstrates the enumerability of user-defined versus built-in properties: \r           var a = ['is enumerable'];  a.propertyIsEnumerable(0);          \/\/ returns true a.propertyIsEnumerable('length');   \/\/ returns false  Math.propertyIsEnumerable('random');   \/\/ returns false this.propertyIsEnumerable('Math');     \/\/ returns false\r          Example: Direct versus inherited properties \r           var a = []; a.propertyIsEnumerable('constructor');         \/\/ returns false  function firstConstructor() {   this.property = 'is not enumerable'; } firstConstructor.prototype.firstMethod = function () {};  function secondConstructor() {   this.method = function method() { return 'is enumerable'; }; }  secondConstructor.prototype = new firstConstructor; secondConstructor.prototype.constructor = secondConstructor;  var o = new secondConstructor(); o.arbitraryProperty = 'is enumerable';  o.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true o.propertyIsEnumerable('method');              \/\/ returns true o.propertyIsEnumerable('property');            \/\/ returns false  o.property = 'is enumerable';  o.propertyIsEnumerable('property');            \/\/ returns true  \/\/ These return false as they are on the prototype which  \/\/ propertyIsEnumerable does not consider (even though the last two \/\/ are iteratable with for-in) o.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6) o.propertyIsEnumerable('constructor'); \/\/ returns false o.propertyIsEnumerable('firstMethod'); \/\/ returns false\r          See also for...in"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupSetter","title":"Object.lookupSetter","description":"Return the function bound as a setter to the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition None    Syntax obj.__lookupSetter__(sprop) Parameters  sprop a string containing the name of the property whose setter should be returned  Description If a setter has been defined for an object's property, it's not possible to reference the setter function through that property, because that property refers to the return value of that function. __lookupSetter__ can be used to obtain a reference to the setter function. See also  set __defineSetter__ JS Guide:Defining Getters and Setters  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/unwatch","title":"Object.unwatch","description":"Removes a watchpoint set with the watch() method.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax unwatch(prop)  Parameters  prop The name of a property of the object to stop watching.  Description The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. By default, this method is inherited by every object descended from Object. Note: The reason for unwatch() to take the property name prop as its only parameter is due to the \"single handler allowing\" behavior of the watch() method.Examples See watch()."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/constructor","title":"RegExp.constructor","description":"Summary  Returns a reference to the RegExp function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/prototype","title":"RegExp.prototype","description":"Represents the prototype object for the RegExp constructor. Description See RegExp for a description of RegExp instances. RegExp instances inherit from RegExp.prototype. Modifications to the prototype object are propagated to all RegExp instances. Properties See also Deprecated RegExp Properties Note that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.  constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky  New in Firefox 3  Non-standard      Whether or not the search is sticky.    Properties inherited from  Object:__parent__, __proto__   Methods   See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   See also  RegExp Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/watch","title":"Object.watch","description":"Watches for a property to be assigned a value and runs a function when that occurs.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax object.watch(prop, handler)  Parameters  prop The name of a property of the object on which you wish to monitor changes.   handler A function to call when the specified property's value changes.  Description Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details. Watches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval). If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect. To remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object. The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. In Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler. Note: Calling watch() on an object for a specific property overrides and previous handler attached for that property. Examples Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Compatibility  This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work  See also unwatch()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/global","title":"RegExp.global","description":"Summary  Whether or not the \"g\" flag is used with the regular expression.    Property of RegExp instances    Read-only     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: global is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  global is a property of an individual regular expression object. The value of global is true if the \"g\" flag was used; otherwise, false. The \"g\" flag indicates that the regular expression should be tested against all possible matches in a string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/ignoreCase","title":"RegExp.ignoreCase","description":"Summary  Whether or not the \"i\" flag is used with the regular expression.    Property of RegExp instances   Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: ignoreCase is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  ignoreCase is a property of an individual regular expression object. The value of ignoreCase is true if the \"i\" flag was used; otherwise, false. The \"i\" flag indicates that case should be ignored while attempting a match in a string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/multiline","title":"RegExp.multiline","description":"Summary  Reflects whether or not to search in strings across multiple lines.    Property of RegExp instances    Static     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: multiline is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  multiline is a property of an individual regular expression object.. The value of multiline is true if the \"m\" flag was used; otherwise, false. The \"m\" flag indicates that a multiline input string should be treated as multiple lines. For example, if \"m\" is used, \"^\" and \"$\" change from matching at only the start or end of the entire string to the start or end of any line within the string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/lastIndex","title":"RegExp.lastIndex","description":"Summary  A read\/write integer property that specifies the index at which to start the next match.    Property of RegExp   Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: lastIndex is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  lastIndex is a property of an individual regular expression object. This property is set only if the regular expression used the \"g\" flag to indicate a global search. The following rules apply:   If lastIndex is greater than the length of the string, regexp.test and regexp.exec fail, and lastIndex is set to 0.   If lastIndex is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at lastIndex.   If lastIndex is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and lastIndex is reset to 0.   Otherwise, lastIndex is set to the next position following the most recent match.  For example, consider the following sequence of statements:   re = \/(hi)?\/g\u00a0 Matches the empty string.   re(\"hi\")\u00a0 Returns [\"hi\", \"hi\"] with lastIndex equal to 2.   re(\"hi\")\u00a0 Returns [\"\"], an empty array whose zeroth element is the match string. In this case, the empty string because lastIndex was 2 (and still is 2) and \"hi\" has length 2."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/source","title":"RegExp.source","description":"Summary  A read-only property that contains the text of the pattern, excluding the forward slashes.    Property of RegExp instances    Static     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: source is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  source is a property of an individual regular expression object. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/test","title":"RegExp.test","description":"Executes the search for a match between a regular expression and a specified string. Returns true or false.    Method of RegExp     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax regexp.test([str])  Parameters  regexp The name of the regular expression. It can be a variable name or a literal.   str The string against which to match the regular expression.  Description When you want to know whether a pattern is found in a string use the test method (similar to the String.search method); for more information (but slower execution) use the exec method (similar to the String.match method). As with exec (or in combination with it), test called multiple times on the same global regular expression instance will advance past the previous match.   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , test() was implemented incorrectly; when it was called with no parameters, it would match against the value of the previous input (RegExp.input property) instead of against the string \"undefined\". This is fixed; now \/undefined\/.test() correctly results in true, instead of an error.  Examples Example: Using test The following example prints a message which depends on the success of the test: \r           function testinput(re, str){    if (re.test(str)) {       midstring = \" contains \";    } else {       midstring = \" does not contain \";    }    document.write (str + midstring + re.source); }\r          Example: Using test The following example prints a message which depends on the success of the test: \r           function testinput(re, str){    if (re.test(str)) {       midstring = \" contains \";    } else {       midstring = \" does not contain \";    }    document.write (str + midstring + re.source); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/exec","title":"RegExp.exec","description":"Executes a search for a match in a specified string. Returns a result array, or null.    Method of RegExp     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax result = regexp.exec(str) Parameters  regexp The name of the regular expression. It can be a variable name or a literal.   str The string against which to match the regular expression.  Description If the match succeeds, the exec method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.\u00a0 If the match fails, the exec method returns null. If you are executing a match simply to find true or false, use the test method or the String search method. Consider the following example: \r           \/\/ Match one d followed by one or more b's followed by one d \/\/ Remember matched b's and the following d \/\/ Ignore case var re = \/d(b+)(d)\/ig; var result = re.exec(\"cdbBdbsbz\");\r          The following table shows the results for this script:    Object Property\/Index Description Example   result \u00a0 The content of myArray. [\"dbBd\", \"bB\", \"d\"]   index The 0-based index of the match in the string. 1   input The original string. cdbBdbsbz   [0] The last matched characters dbBd   [1], ...[n] The parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited. [1] = bB [2] = d   re lastIndex The index at which to start the next match. 5   ignoreCase Indicates if the \"i\" flag was used to ignore case. true   global Indicates if the \"g\" flag was used for a global match. true   multiline Indicates if the \"m\" flag was used to search in strings across multiple line. false   source The text of the pattern. d(b+)(d)      Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , exec() was implemented incorrectly; when it was called with no parameters, it would match against the value of the previous input (RegExp.input property) instead of against the string \"undefined\". This is fixed; now \/undefined\/.exec() correctly results in ['undefined'], instead of an error.  If your regular expression uses the \"g\" flag, you can use the exec method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of str specified by the regular expression's lastIndex property (test will also advance the lastIndex property). For example, assume you have this script: \r           var myRe = \/ab*\/g; var str = \"abbcdefabh\"; var myArray; while ((myArray = myRe.exec(str)) != null) {   var msg = \"Found \" + myArray[0] + \".  \";   msg += \"Next match starts at \" + myRe.lastIndex;   print(msg); }\r          This script displays the following text:  Found abb. Next match starts at 3 Found ab. Next match starts at 9  You can also use exec() without creating a RegExp object: \r           var matches = \/(hello \\S+)\/.exec('This is a hello world!'); alert(matches[1]);\r          \u00a0This will display an alert containing 'hello world!';"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toSource","title":"RegExp.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of RegExp     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  regexp.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in RegExp object, toSource returns the following string indicating that the source code is not available:  function RegExp() {[native code]}   For instances of RegExp, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/replace","title":"String.replace","description":"Returns a new string with some or all matches of a pattern replaced by a replacement.\u00a0 The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax str.replace(regexp|substr, newSubStr|function[, Non-standard      flags]); Parameters  regexp A RegExp object. The match is replaced by the return value of parameter #2.   substr A String that is to be replaced by newSubStr.   newSubStr The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the \"Specifying a string as a parameter\" section below.   function A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). The arguments supplied to this function are described in the \"Specifying a function as a parameter\" section below.   flags Non-standard     A string specifying a combination of regular expression flags. The use of the flags parameter in the String.replace method is non-standard, use a RegExp object with the corresponding flags.  g global match i ignore case m match over multiple lines y Non-standard      sticky    Description This method does not change the String object it is called on. It simply returns a new string. To perform a global search and replace, either include the g switch in the regular expression or if the first parameter is a string, include g in the flags parameter. Specifying a string as a parameter The replacement string can include the following special replacement patterns:    Pattern Inserts   $$ Inserts a \"$\".   $& Inserts the matched substring.   $` Inserts the portion of the string that precedes the matched substring.   $' Inserts the portion of the string that follows the matched substring.   $n or $nn Where n or nn are decimal digits, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object.    Specifying a function as a parameter You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (Note: the above-mentioned special replacement patterns do not apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global. The arguments to the function are as follows:    Possible name Supplied value   str The matched substring. (Corresponds to $& above.)   p1, p2, ... The nth parenthesized submatch string, provided the first argument to replace was a RegExp object. (Correspond to $1, $2, etc. above.)   offset The offset of the matched substring within the total string being examined. (For example, if the total string was \"abcd\", and the matched substring was \"bc\", then this argument will be 1.)   s The total string being examined.    (The exact number of arguments will depend on whether the first argument was a RegExp object and, if so, how many parenthesized submatches it specifies.) The following example will set newString to \"XXzzzz - XX , zzzz\": \r           function replacer(str, p1, p2, offset, s) {   return str + \" - \" + p1 + \" , \" + p2; } var newString = \"XXzzzz\".replace(\/(X*)(z*)\/, replacer);\r          Specifying a string as a parameter The replacement string can include the following special replacement patterns:    Pattern Inserts   $$ Inserts a \"$\".   $& Inserts the matched substring.   $` Inserts the portion of the string that precedes the matched substring.   $' Inserts the portion of the string that follows the matched substring.   $n or $nn Where n or nn are decimal digits, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object.    Specifying a function as a parameter You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (Note: the above-mentioned special replacement patterns do not apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global. The arguments to the function are as follows:    Possible name Supplied value   str The matched substring. (Corresponds to $& above.)   p1, p2, ... The nth parenthesized submatch string, provided the first argument to replace was a RegExp object. (Correspond to $1, $2, etc. above.)   offset The offset of the matched substring within the total string being examined. (For example, if the total string was \"abcd\", and the matched substring was \"bc\", then this argument will be 1.)   s The total string being examined.    (The exact number of arguments will depend on whether the first argument was a RegExp object and, if so, how many parenthesized submatches it specifies.) The following example will set newString to \"XXzzzz - XX , zzzz\": \r           function replacer(str, p1, p2, offset, s) {   return str + \" - \" + p1 + \" , \" + p2; } var newString = \"XXzzzz\".replace(\/(X*)(z*)\/, replacer);\r          Examples Example: Using global and ignore with replace In the following example, the regular expression includes the global and ignore case flags which permits replace to replace each occurrence of 'apples' in the string with 'oranges'. \r           var re = \/apples\/gi; var str = \"Apples are round, and apples are juicy.\"; var newstr = str.replace(re, \"oranges\"); print(newstr);\r          In this version, a string is used as the first parameter and the global and ignore case flags are specified in the flags parameter. \r           var str = \"Apples are round, and apples are juicy.\"; var newstr = str.replace(\"apples\", \"oranges\", \"gi\"); print(newstr);\r          Both of these examples print \"oranges are round, and oranges are juicy.\" Example: Defining the regular expression in replace In the following example, the regular expression is defined in replace and includes the ignore case flag. \r           var str = \"Twas the night before Xmas...\"; var newstr = str.replace(\/xmas\/i, \"Christmas\"); print(newstr);\r          This prints \"Twas the night before Christmas...\" Example: Switching words in a string The following script switches the words in the string. For the replacement text, the script uses the $1 and $2 replacement patterns. \r           var re = \/(\\w+)\\s(\\w+)\/; var str = \"John Smith\"; var newstr = str.replace(re, \"$2, $1\"); print(newstr);\r          This prints \"Smith, John\". Example: Using an inline function that modifies the matched characters In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement. The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning. \r           function styleHyphenFormat(propertyName) {   function upperToHyphenLower(match)   {     return '-' + match.toLowerCase();   }   return propertyName.replace(\/[A-Z]\/, upperToHyphenLower); }\r          Given styleHyphenFormat('borderTop'), this returns 'border-top'. Because we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect. \r           var newString = propertyName.replace(\/[A-Z]\/, '-' + '$&'.toLowerCase());  \/\/ won't work\r          This is because '$&'.toLowerCase() would be evaluated first as a string literal (resulting in the same '$&') before using the characters as a pattern. Example: Replacing a Fahrenheit degree with its Celsius equivalent The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C. The regular expression test checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, p1. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the f2c function. f2c then returns the Celsius number. This function approximates Perl's s\/\/\/e flag. \r           function f2c(x) {   function convert(str, p1, offset, s)   {     return ((p1-32) * 5\/9) + \"C\";   }   var s = String(x);   var test = \/(\\d+(?:\\.\\d*)?)F\\b\/g;   return s.replace(test, convert); }\r          \u00a0 Example: Using global and ignore with replace In the following example, the regular expression includes the global and ignore case flags which permits replace to replace each occurrence of 'apples' in the string with 'oranges'. \r           var re = \/apples\/gi; var str = \"Apples are round, and apples are juicy.\"; var newstr = str.replace(re, \"oranges\"); print(newstr);\r          In this version, a string is used as the first parameter and the global and ignore case flags are specified in the flags parameter. \r           var str = \"Apples are round, and apples are juicy.\"; var newstr = str.replace(\"apples\", \"oranges\", \"gi\"); print(newstr);\r          Both of these examples print \"oranges are round, and oranges are juicy.\" Example: Defining the regular expression in replace In the following example, the regular expression is defined in replace and includes the ignore case flag. \r           var str = \"Twas the night before Xmas...\"; var newstr = str.replace(\/xmas\/i, \"Christmas\"); print(newstr);\r          This prints \"Twas the night before Christmas...\" Example: Switching words in a string The following script switches the words in the string. For the replacement text, the script uses the $1 and $2 replacement patterns. \r           var re = \/(\\w+)\\s(\\w+)\/; var str = \"John Smith\"; var newstr = str.replace(re, \"$2, $1\"); print(newstr);\r          This prints \"Smith, John\". Example: Using an inline function that modifies the matched characters In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement. The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning. \r           function styleHyphenFormat(propertyName) {   function upperToHyphenLower(match)   {     return '-' + match.toLowerCase();   }   return propertyName.replace(\/[A-Z]\/, upperToHyphenLower); }\r          Given styleHyphenFormat('borderTop'), this returns 'border-top'. Because we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect. \r           var newString = propertyName.replace(\/[A-Z]\/, '-' + '$&'.toLowerCase());  \/\/ won't work\r          This is because '$&'.toLowerCase() would be evaluated first as a string literal (resulting in the same '$&') before using the characters as a pattern. Example: Replacing a Fahrenheit degree with its Celsius equivalent The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C. The regular expression test checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, p1. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the f2c function. f2c then returns the Celsius number. This function approximates Perl's s\/\/\/e flag. \r           function f2c(x) {   function convert(str, p1, offset, s)   {     return ((p1-32) * 5\/9) + \"C\";   }   var s = String(x);   var test = \/(\\d+(?:\\.\\d*)?)F\\b\/g;   return s.replace(test, convert); }\r          \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toString","title":"RegExp.toString","description":"Summary  Returns a string representing the specified object.     Method of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 3rd Edition     Syntax  regexp.toString()   Parameters  None.   Description  The RegExp object overrides the toString method of the Object object; it does not inherit Object.toString. For RegExp objects, the toString method returns a string representation of the regular expression.   Examples   Example: Using toString  The following example displays the string value of a RegExp object:   myExp = new RegExp(\"a+b+c\"); alert(myExp.toString());       \/\/ displays \"\/a+b+c\/\"   Example: Using toString  The following example displays the string value of a RegExp object:   myExp = new RegExp(\"a+b+c\"); alert(myExp.toString());       \/\/ displays \"\/a+b+c\/\"   See Also  Object.prototype.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/length","title":"String.length","description":"The length of a string.    Property of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description This property returns the number of code units in the string.  UTF-16 , the string format used by\u00a0JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by length to not match the actual number of characters in the string. For an empty string, length is 0. Examples \r           var x = \"Netscape\"; var empty = \"\";  console.log(\"Netspace is \" + x.length + \" code units long\"); console.log(\"The empty string is has a length of \" + empty.length); \/* should be 0 *\/\r          See also  JavaScript String.length and Internationalizing Web Applications  See also  JavaScript String.length and Internationalizing Web Applications"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substring","title":"String.substring","description":"Returns a subset of a string between one index and another, or through the end of the string.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax string.substring(indexA[, indexB]) Parameters  indexA An integer between 0 and one less than the length of the string.   indexB (optional) An integer between 0 and the length of the string.  Description substring extracts characters from indexA up to but not including indexB. In particular:  If indexA equals indexB, substring returns an empty string. If indexB is omitted, substring extracts characters to the end of the string. If either argument is less than 0 or is NaN, it is treated as if it were 0. If either argument is greater than stringName.length, it is treated as if it were stringName.length.  If indexA is larger than indexB, then the effect of substring is as if the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1). Examples Example: Using substring The following example uses substring to display characters from the string \"Mozilla\": \/\/ assumes a print function is defined var anyString = \"Mozilla\";  \/\/ Displays \"Moz\" print(anyString.substring(0,3)); print(anyString.substring(3,0));  \/\/ Displays \"lla\" print(anyString.substring(4,7)); print(anyString.substring(7,4));  \/\/ Displays \"Mozill\" print(anyString.substring(0,6));  \/\/ Displays \"Mozilla\" print(anyString.substring(0,7)); print(anyString.substring(0,10));  Example: Replacing a substring within a string The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string \"Brave New World\" into \"Brave New Web\". function replaceString(oldS, newS, fullS) { \/\/ Replaces oldS with newS in the string fullS    for (var i = 0; i < fullS.length; i++) {       if (fullS.substring(i, i + oldS.length) == oldS) {          fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);       }    }    return fullS; }  replaceString(\"World\", \"Web\", \"Brave New World\"); Note that this can result in an infinite loop if oldS is itself a substring of newS -- for example, if you attempted to replace \"World\" with \"OtherWorld\" here. A better method for replacing strings is as follows: function replaceString(oldS, newS,fullS){ \u00a0 \u00a0 return fullS.split(oldS).join(newS); }   Example: Using substring The following example uses substring to display characters from the string \"Mozilla\": \/\/ assumes a print function is defined var anyString = \"Mozilla\";  \/\/ Displays \"Moz\" print(anyString.substring(0,3)); print(anyString.substring(3,0));  \/\/ Displays \"lla\" print(anyString.substring(4,7)); print(anyString.substring(7,4));  \/\/ Displays \"Mozill\" print(anyString.substring(0,6));  \/\/ Displays \"Mozilla\" print(anyString.substring(0,7)); print(anyString.substring(0,10));  Example: Replacing a substring within a string The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string \"Brave New World\" into \"Brave New Web\". function replaceString(oldS, newS, fullS) { \/\/ Replaces oldS with newS in the string fullS    for (var i = 0; i < fullS.length; i++) {       if (fullS.substring(i, i + oldS.length) == oldS) {          fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);       }    }    return fullS; }  replaceString(\"World\", \"Web\", \"Brave New World\"); Note that this can result in an infinite loop if oldS is itself a substring of newS -- for example, if you attempted to replace \"World\" with \"OtherWorld\" here. A better method for replacing strings is as follows: function replaceString(oldS, newS,fullS){ \u00a0 \u00a0 return fullS.split(oldS).join(newS); }   See also substr, slice"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substr","title":"String.substr","description":"Returns the characters in a string beginning at the specified location through the specified number of characters.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition None, although ECMAScript 3rd Edition has a non-normative section suggesting uniform semantics    Syntax string.substr(start[, length]) Parameters  start Location at which to begin extracting characters.   length The number of characters to extract.  Description start is a character index. The index of the first character is 0, and the index of the last character is 1 less than the length of the string. substr begins extracting characters at start and collects length characters (unless it reaches the end of the string first, in which case it will return fewer). If start is positive and is greater than or equal to the length of the string, substr returns an empty string. If start is negative, substr uses it as a character index from the end of the string. If start is negative and abs(start) is larger than the length of the string, substr uses 0 as the start index. Note: the described handling of negative values of the start argument is not supported by Microsoft JScript [1]. If length is 0 or negative, substr returns an empty string. If length is omitted, substr extracts characters to the end of the string. Compatibility Microsoft's JScript does not support negative values for the start index. If you wish to make use of this feature, you can use the following compatibilty code to work around this bug: \r           \/\/ only run when the substr function is broken if ('ab'.substr(-1) != 'b') {   \/**    *  Get the substring of a string    *  @param  {integer}  start   where to start the substring    *  @param  {integer}  length  how many characters to return    *  @return {string}    *\/   String.prototype.substr = function(substr) {     return function(start, length) {       \/\/ did we get a negative start, calculate how much it is from the beginning of the string       if (start < 0) start = this.length + start;              \/\/ call the original function       return substr.call(this, start, length);     }   }(String.prototype.substr); }\r          Examples Example: Using substr Consider the following script: \/\/ assumes a print function is defined var str = \"abcdefghij\"; print(\"(1,2): \"    + str.substr(1,2)); print(\"(-3,2): \"   + str.substr(-3,2)); print(\"(-3): \"     + str.substr(-3)); print(\"(1): \"      + str.substr(1)); print(\"(-20, 2): \" + str.substr(-20,2)); print(\"(20, 2): \"  + str.substr(20,2));  This script displays: (1,2): bc (-3,2): hi (-3): hij (1): bcdefghij (-20, 2): ab (20, 2):  Example: Using substr Consider the following script: \/\/ assumes a print function is defined var str = \"abcdefghij\"; print(\"(1,2): \"    + str.substr(1,2)); print(\"(-3,2): \"   + str.substr(-3,2)); print(\"(-3): \"     + str.substr(-3)); print(\"(1): \"      + str.substr(1)); print(\"(-20, 2): \" + str.substr(-20,2)); print(\"(20, 2): \"  + str.substr(20,2));  This script displays: (1,2): bc (-3,2): hi (-3): hij (1): bcdefghij (-20, 2): ab (20, 2):  See also slice,\u00a0substring \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charAt","title":"String.charAt","description":"Returns the specified character from a string.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax string.charAt(index) Parameters  index\u00a0 An integer between 0 and 1 less than the length of the string.  Description Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called stringName is stringName.length - 1. If the index you supply is out of range, JavaScript returns an empty string. Examples Example: Displaying characters at different locations in a string The following example displays characters at different locations in the string \"Brave new world\": \r           var anyString=\"Brave new world\";  document.writeln(\"The character at index 0 is '\" + anyString.charAt(0) + \"'\"); document.writeln(\"The character at index 1 is '\" + anyString.charAt(1) + \"'\"); document.writeln(\"The character at index 2 is '\" + anyString.charAt(2) + \"'\"); document.writeln(\"The character at index 3 is '\" + anyString.charAt(3) + \"'\"); document.writeln(\"The character at index 4 is '\" + anyString.charAt(4) + \"'\"); document.writeln(\"The character at index 999 is '\" + anyString.charAt(999) + \"'\");\r          These lines display the following:  The character at index 0 is 'B' The character at index 1 is 'r' The character at index 2 is 'a' The character at index 3 is 'v' The character at index 4 is 'e' The character at index 999 is ''  Example 2:\u00a0Getting whole characters The following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane. \r           var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly for (var i=0, chr; i < str.length; i++) {     if ((chr = getWholeChar(str, i)) === false) {continue;} \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning a variable to represent the individual character     alert(chr); }  function getWholeChar (str, i) {     var code = str.charCodeAt(i);            if (isNaN(code)) {         return ''; \/\/ Position not found     }     if (code < 0xD800 || code > 0xDFFF) {         return str.charAt(i);     }     if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)         if (str.length <= (i+1))  {             throw 'High surrogate without following low surrogate';         }         var next = str.charCodeAt(i+1);         if (0xDC00 > next || next > 0xDFFF) {             throw 'High surrogate without following low surrogate';         }         return str.charAt(i)+str.charAt(i+1);     }     \/\/ Low surrogate (0xDC00 <= code && code <= 0xDFFF)     if (i === 0) {         throw 'Low surrogate without preceding high surrogate';     }     var prev = str.charCodeAt(i-1);     if (0xD800 > prev || prev > 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)         throw 'Low surrogate without preceding high surrogate';     }     return false; \/\/ We can pass over low surrogates now as the second component in a pair which we have already processed }\r          \u00a0 In an exclusive JavaScript 1.7+\u00a0environment (such as Firefox) which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair). \r           var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly for (var i=0, chr; i < str.length; i++) {     [chr, i] = getWholeCharAndI(str, i); \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning an array with the individual character and 'i' value (only changed if a surrogate pair)     alert(chr); }  function getWholeCharAndI (str, i) {     var code = str.charCodeAt(i);     if (isNaN(code)) {         return ''; \/\/ Position not found     }     if (code < 0xD800 || code > 0xDFFF) {         return [str.charAt(i), i]; \/\/ Normal character, keeping 'i' the same     }     if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)         if (str.length <= (i+1))  {             throw 'High surrogate without following low surrogate';         }         var next = str.charCodeAt(i+1);         if (0xDC00 > next || next > 0xDFFF) {             throw 'High surrogate without following low surrogate';         }         return [str.charAt(i)+str.charAt(i+1), i+1];     }     \/\/ Low surrogate (0xDC00 <= code && code <= 0xDFFF)     if (i === 0) {         throw 'Low surrogate without preceding high surrogate';     }     var prev = str.charCodeAt(i-1);     if (0xD800 > prev || prev > 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)         throw 'Low surrogate without preceding high surrogate';     }     return [str.charAt(i+1), i+1]; \/\/ Return the next character instead (and increment) }\r          \u00a0 Example 3:\u00a0Fixing charAt to support non-Basic-Multilingual-Plane (BMP)\u00a0characters While example 2 may be more frequently useful for those wishing to support non-BMP characters (since the above does not require the caller to know where any non-BMP\u00a0character might appear), in the event that one does wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following: \r           function fixedCharAt (str, idx) {     var ret = '';     str += '';     var end = str.length;      var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;     while ((surrogatePairs.exec(str)) != null) {         var li = surrogatePairs.lastIndex;         if (li - 2 < idx) {             idx++;         }         else {             break;         }     }      if (idx >= end || idx < 0) {         return '';     }      ret += str.charAt(idx);      if (\/[\\uD800-\\uDBFF]\/.test(ret) && \/[\\uDC00-\\uDFFF]\/.test(str.charAt(idx+1))) {         ret += str.charAt(idx+1); \/\/ Go one further, since one of the \"characters\" is part of a surrogate pair     }     return ret; }\r          Example: Displaying characters at different locations in a string The following example displays characters at different locations in the string \"Brave new world\": \r           var anyString=\"Brave new world\";  document.writeln(\"The character at index 0 is '\" + anyString.charAt(0) + \"'\"); document.writeln(\"The character at index 1 is '\" + anyString.charAt(1) + \"'\"); document.writeln(\"The character at index 2 is '\" + anyString.charAt(2) + \"'\"); document.writeln(\"The character at index 3 is '\" + anyString.charAt(3) + \"'\"); document.writeln(\"The character at index 4 is '\" + anyString.charAt(4) + \"'\"); document.writeln(\"The character at index 999 is '\" + anyString.charAt(999) + \"'\");\r          These lines display the following:  The character at index 0 is 'B' The character at index 1 is 'r' The character at index 2 is 'a' The character at index 3 is 'v' The character at index 4 is 'e' The character at index 999 is ''  Example 2:\u00a0Getting whole characters The following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane. \r           var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly for (var i=0, chr; i < str.length; i++) {     if ((chr = getWholeChar(str, i)) === false) {continue;} \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning a variable to represent the individual character     alert(chr); }  function getWholeChar (str, i) {     var code = str.charCodeAt(i);            if (isNaN(code)) {         return ''; \/\/ Position not found     }     if (code < 0xD800 || code > 0xDFFF) {         return str.charAt(i);     }     if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)         if (str.length <= (i+1))  {             throw 'High surrogate without following low surrogate';         }         var next = str.charCodeAt(i+1);         if (0xDC00 > next || next > 0xDFFF) {             throw 'High surrogate without following low surrogate';         }         return str.charAt(i)+str.charAt(i+1);     }     \/\/ Low surrogate (0xDC00 <= code && code <= 0xDFFF)     if (i === 0) {         throw 'Low surrogate without preceding high surrogate';     }     var prev = str.charCodeAt(i-1);     if (0xD800 > prev || prev > 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)         throw 'Low surrogate without preceding high surrogate';     }     return false; \/\/ We can pass over low surrogates now as the second component in a pair which we have already processed }\r          \u00a0 In an exclusive JavaScript 1.7+\u00a0environment (such as Firefox) which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair). \r           var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly for (var i=0, chr; i < str.length; i++) {     [chr, i] = getWholeCharAndI(str, i); \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning an array with the individual character and 'i' value (only changed if a surrogate pair)     alert(chr); }  function getWholeCharAndI (str, i) {     var code = str.charCodeAt(i);     if (isNaN(code)) {         return ''; \/\/ Position not found     }     if (code < 0xD800 || code > 0xDFFF) {         return [str.charAt(i), i]; \/\/ Normal character, keeping 'i' the same     }     if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)         if (str.length <= (i+1))  {             throw 'High surrogate without following low surrogate';         }         var next = str.charCodeAt(i+1);         if (0xDC00 > next || next > 0xDFFF) {             throw 'High surrogate without following low surrogate';         }         return [str.charAt(i)+str.charAt(i+1), i+1];     }     \/\/ Low surrogate (0xDC00 <= code && code <= 0xDFFF)     if (i === 0) {         throw 'Low surrogate without preceding high surrogate';     }     var prev = str.charCodeAt(i-1);     if (0xD800 > prev || prev > 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)         throw 'Low surrogate without preceding high surrogate';     }     return [str.charAt(i+1), i+1]; \/\/ Return the next character instead (and increment) }\r          \u00a0 Example 3:\u00a0Fixing charAt to support non-Basic-Multilingual-Plane (BMP)\u00a0characters While example 2 may be more frequently useful for those wishing to support non-BMP characters (since the above does not require the caller to know where any non-BMP\u00a0character might appear), in the event that one does wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following: \r           function fixedCharAt (str, idx) {     var ret = '';     str += '';     var end = str.length;      var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;     while ((surrogatePairs.exec(str)) != null) {         var li = surrogatePairs.lastIndex;         if (li - 2 < idx) {             idx++;         }         else {             break;         }     }      if (idx >= end || idx < 0) {         return '';     }      ret += str.charAt(idx);      if (\/[\\uD800-\\uDBFF]\/.test(ret) && \/[\\uDC00-\\uDFFF]\/.test(str.charAt(idx+1))) {         ret += str.charAt(idx+1); \/\/ Go one further, since one of the \"characters\" is part of a surrogate pair     }     return ret; }\r          See Also indexOf, lastIndexOf, split, charCodeAt \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/valueOf","title":"String.valueOf","description":"Returns the primitive value of a String object.    Method of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax string.valueOf() Parameters None. Description The valueOf method of String returns the primitive value of a String object as a string data type. This value is equivalent to String.toString. This method is usually called internally by JavaScript and not explicitly in code. Examples Example: Using valueOf  x = new String(\"Hello world\"); alert(x.valueOf())          \/\/ Displays \"Hello world\"  Example: Using valueOf  x = new String(\"Hello world\"); alert(x.valueOf())          \/\/ Displays \"Hello world\"  See Also toString, Object.valueOf \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/prototype","title":"String.prototype","description":"Represents the String prototype object. Description All String instances inherit from String.prototype. Changes to the String prototype object are propagated to all String instances. Properties  constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.    Properties inherited from  Object:__parent__, __proto__   Methods  Methods unrelated to HTML    charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.   HTML wrapper methods     Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch   Methods unrelated to HTML    charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.   HTML wrapper methods     Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch   Examples Example: Extending string instances with a repeat method The following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered. \r           var s1 = new String(\"a\"); var s2 = new String(\"b\"); var s3 = new String(\"c\");  \/\/ Create a repeat-string-N-times method for all String objects function str_rep(n) {    var s = \"\", t = this.toString();    while (--n >= 0) {      s += t    }    return s; }  String.prototype.repeat = str_rep;  s1a=s1.repeat(3); \/\/ returns \"aaa\" s2a=s2.repeat(5); \/\/ returns \"bbbbb\" s3a=s3.repeat(2); \/\/ returns \"cc\"  \/\/ Create an alternate method and assign it to only one String variable function fake_rep(n) {    return \"repeat \" + this + \" \" + n + \" times.\"; }  s1.repeat = fake_rep s1b=s1.repeat(1); \/\/ returns \"repeat a 1 times.\" s2b=s2.repeat(4); \/\/ returns \"bbbb\" s3b=s3.repeat(6); \/\/ returns \"cccccc\"\r          The function in this example also works on String objects not created with the String constructor. The following code returns \"zzz\". \"z\".repeat(3);  Example: Extending string instances with a repeat method The following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered. \r           var s1 = new String(\"a\"); var s2 = new String(\"b\"); var s3 = new String(\"c\");  \/\/ Create a repeat-string-N-times method for all String objects function str_rep(n) {    var s = \"\", t = this.toString();    while (--n >= 0) {      s += t    }    return s; }  String.prototype.repeat = str_rep;  s1a=s1.repeat(3); \/\/ returns \"aaa\" s2a=s2.repeat(5); \/\/ returns \"bbbbb\" s3a=s3.repeat(2); \/\/ returns \"cc\"  \/\/ Create an alternate method and assign it to only one String variable function fake_rep(n) {    return \"repeat \" + this + \" \" + n + \" times.\"; }  s1.repeat = fake_rep s1b=s1.repeat(1); \/\/ returns \"repeat a 1 times.\" s2b=s2.repeat(4); \/\/ returns \"bbbb\" s3b=s3.repeat(6); \/\/ returns \"cccccc\"\r          The function in this example also works on String objects not created with the String constructor. The following code returns \"zzz\". \"z\".repeat(3);"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fromCharCode","title":"String.fromCharCode","description":"Returns a string created by using the specified sequence of Unicode values.    Static Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition   Syntax  String.fromCharCode(num1, ..., numN)  Parameters  num1, ..., numN A sequence of numbers that are Unicode values.  Description This method returns a string and not a String object. Because fromCharCode is a static method of String, you always use it as String.fromCharCode(), rather than as a method of a String object you created. Getting it to work with higher values Although most common Unicode values can be represented in a fixed width system\/with one number (as expected early on during JavaScript standardization) and fromCharCode() can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values, fromCharCode() alone is inadequate. Since the higher code point characters use two (lower value) \"surrogate\" numbers to form a single character, fromCharCode() can be used to return such a pair and thus adequately represent these higher valued characters. Be aware, therefore, that the following utility function to grab the accurate character even for higher value code points, may be returning a value which is rendered as a single character, but which has a string count of two (though usually the count will be one). \r           \/\/ String.fromCharCode() alone cannot get the character at such a high code point \/\/ The following, on the other hand, can return a 4-byte character as well as the  \/\/   usual 2-byte ones (i.e., it can return a single character which actually has  \/\/   a string length of 2 instead of 1!) alert(fixedFromCharCode(0x2F804)); \/\/ or 194564 in decimal   function fixedFromCharCode (codePt) {     if (codePt > 0xFFFF) {         codePt -= 0x10000;         return String.fromCharCode(0xD800 + (codePt >> 10), 0xDC00 + (codePt & 0x3FF));     }     else {         return String.fromCharCode(codePt);     } }\r         Examples Example: Using fromCharCode The following example returns the string \"ABC\". String.fromCharCode(65,66,67)  Example: Using fromCharCode The following example returns the string \"ABC\". String.fromCharCode(65,66,67)  See also String.prototype.charCodeAt"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/localeCompare","title":"String.localeCompare","description":"Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  localeCompare(compareString)  Parameters compareString - The string against which the referring string is comparing Description Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Returns -1 if the string occurs earlier in a sort than compareString, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level. Examples Example: Using localeCompare The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: \r           alert('a'.localeCompare('b')); \/\/ -1 alert('b'.localeCompare('a')); \/\/ 1 alert('b'.localeCompare('b')); \/\/ 0\r          Example: Using localeCompare The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: \r           alert('a'.localeCompare('b')); \/\/ -1 alert('b'.localeCompare('a')); \/\/ 1 alert('b'.localeCompare('b')); \/\/ 0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/constructor","title":"String.constructor","description":"Summary  Returns a reference to the String function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charCodeAt","title":"String.charCodeAt","description":"Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition   Syntax string.charCodeAt(index) Parameters  index\u00a0 An integer greater than 0 and less than the length of the string; if it is not a number, it defaults to 0.  Description Unicode code points range from 0 to 1,114,111. The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the Core JavaScript 1.5 Guide. Note that charCodeAt will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued)\u00a0\"surrogate\" pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only charCodeAt(i), but also charCodeAt(i+1) (as if examining\/reproducing a string with two letters). See example 2 and 3 below. charCodeAt returns NaN if the given index is not greater than 0 or is greater than the length of the string. Backward Compatibility JavaScript 1.2 The charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set. JavaScript 1.2 The charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set. Examples Example 1: Using charCodeAt The following example returns 65, the Unicode value for A.  \"ABC\".charCodeAt(0) \/\/ returns 65  Example 2: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown \u00a0 This version might be used in for loops and the like when it is unknown whether non-BMP\u00a0characters exist before the specified index position. \r           function fixedCharCodeAt (str, idx) {     \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); \/\/ 65536     \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); \/\/ 65536     idx = idx || 0;     var code = str.charCodeAt(idx);     var hi, low;     if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)         hi = code;         low = str.charCodeAt(idx+1);         if (isNaN(low)) {             throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';         }         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;     }     if (0xDC00 <= code && code <= 0xDFFF) { \/\/ Low surrogate         \/\/ We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration         return false;         \/*hi = str.charCodeAt(idx-1);         low = code;         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*\/     }     return code; }\r         Example 3: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known \u00a0 \r           function knownCharCodeAt (str, idx) {     str += '';     var code,         end = str.length;      var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;     while ((surrogatePairs.exec(str)) != null) {         var li = surrogatePairs.lastIndex;         if (li - 2 < idx) {             idx++;         }         else {             break;         }     }      if (idx >= end || idx < 0) {         return NaN;     }      code = str.charCodeAt(idx);      var hi, low;     if (0xD800 <= code && code <= 0xDBFF) {         hi = code;         low = str.charCodeAt(idx+1); \/\/ Go one further, since one of the \"characters\" is part of a surrogate pair         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;     }     return code; }\r          \u00a0 Example 1: Using charCodeAt The following example returns 65, the Unicode value for A.  \"ABC\".charCodeAt(0) \/\/ returns 65  Example 2: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown \u00a0 This version might be used in for loops and the like when it is unknown whether non-BMP\u00a0characters exist before the specified index position. \r           function fixedCharCodeAt (str, idx) {     \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); \/\/ 65536     \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); \/\/ 65536     idx = idx || 0;     var code = str.charCodeAt(idx);     var hi, low;     if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)         hi = code;         low = str.charCodeAt(idx+1);         if (isNaN(low)) {             throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';         }         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;     }     if (0xDC00 <= code && code <= 0xDFFF) { \/\/ Low surrogate         \/\/ We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration         return false;         \/*hi = str.charCodeAt(idx-1);         low = code;         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*\/     }     return code; }\r         Example 3: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known \u00a0 \r           function knownCharCodeAt (str, idx) {     str += '';     var code,         end = str.length;      var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;     while ((surrogatePairs.exec(str)) != null) {         var li = surrogatePairs.lastIndex;         if (li - 2 < idx) {             idx++;         }         else {             break;         }     }      if (idx >= end || idx < 0) {         return NaN;     }      code = str.charCodeAt(idx);      var hi, low;     if (0xD800 <= code && code <= 0xDBFF) {         hi = code;         low = str.charCodeAt(idx+1); \/\/ Go one further, since one of the \"characters\" is part of a surrogate pair         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;     }     return code; }\r          \u00a0 See Also fromCharCode, charAt \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/concat","title":"String.concat","description":"Combines the text of two or more strings and returns a new string.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.concat(string2, string3[, ..., stringN])Parameters  string2...stringN\u00a0 Strings to concatenate to this string.  Description concat combines the text from one or more strings and returns a new string. Changes to the text in one string do not affect the other string. Examples Example: Using concat The following example combines strings into a new string. \r           var hello = \"Hello, \"; console.log(hello.concat(\"Kevin\", \" have a nice day.\")); \/* Hello, Kevin have a nice day. *\/\r          Example: Using concat The following example combines strings into a new string. \r           var hello = \"Hello, \"; console.log(hello.concat(\"Kevin\", \" have a nice day.\")); \/* Hello, Kevin have a nice day. *\/"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/indexOf","title":"String.indexOf","description":"Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex, returns -1 if the value is not found.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax string.indexOf(searchValue[, fromIndex]) Parameters  searchValue A string representing the value to search for.   fromIndex The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.  Description Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called stringName is stringName.length - 1. \r           \"Blue Whale\".indexOf(\"Blue\")    \/\/ returns 0 \"Blue Whale\".indexOf(\"Blute\")   \/\/ returns -1 \"Blue Whale\".indexOf(\"Whale\",0) \/\/ returns 5 \"Blue Whale\".indexOf(\"Whale\",5) \/\/ returns 5 \"Blue Whale\".indexOf(\"\",9)      \/\/ returns 9 \"Blue Whale\".indexOf(\"\",10)     \/\/ returns 10 \"Blue Whale\".indexOf(\"\",11)     \/\/ returns 10\r          The indexOf method is case sensitive. For example, the following expression returns -1: \r           \"Blue Whale\".indexOf(\"blue\") \/\/ returns -1\r          Note that '0' doesn't evaluate to true and '-1' doesn't evaluate to false. Therefore, when checking if a specific string exists within another string the correct way to check would be: \r           \"Blue Whale\".indexOf(\"Blue\") != -1 \/\/ true \"Blue Whale\".indexOf(\"Bloe\") != -1 \/\/ false\r          Examples Example: Using indexOf and lastIndexOf The following example uses indexOf and lastIndexOf to locate values in the string \"Brave new world\". \r           var anyString=\"Brave new world\"   document.write(\"<P>The index of the first w from the beginning is \" +    anyString.indexOf(\"w\"))          \/\/ Displays 8  document.write(\"<P>The index of the first w from the end is \" +    anyString.lastIndexOf(\"w\"))      \/\/ Displays 10  document.write(\"<P>The index of 'new' from the beginning is \" +    anyString.indexOf(\"new\"))        \/\/ Displays 6  document.write(\"<P>The index of 'new' from the end is \" +    anyString.lastIndexOf(\"new\"))    \/\/ Displays 6\r          Example: indexOf and case-sensitivity The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first writeln method displays 19. But because the indexOf method is case sensitive, the string \"cheddar\" is not found in myCapString, so the second writeln method displays -1. \r           myString = \"brie, pepper jack, cheddar\" myCapString = \"Brie, Pepper Jack, Cheddar\" document.writeln('myString.indexOf(\"cheddar\") is ' +    myString.indexOf(\"cheddar\")) document.writeln('<P>myCapString.indexOf(\"cheddar\") is ' +    myCapString.indexOf(\"cheddar\"))\r          Example: Using indexOf to count occurrences of a letter in a string The following example sets count to the number of occurrences of the letter x in the string str: \r           count = 0; pos = str.indexOf(\"x\"); while ( pos != -1 ) {    count++;    pos = str.indexOf(\"x\",pos+1); }\r          Example: Using indexOf and lastIndexOf The following example uses indexOf and lastIndexOf to locate values in the string \"Brave new world\". \r           var anyString=\"Brave new world\"   document.write(\"<P>The index of the first w from the beginning is \" +    anyString.indexOf(\"w\"))          \/\/ Displays 8  document.write(\"<P>The index of the first w from the end is \" +    anyString.lastIndexOf(\"w\"))      \/\/ Displays 10  document.write(\"<P>The index of 'new' from the beginning is \" +    anyString.indexOf(\"new\"))        \/\/ Displays 6  document.write(\"<P>The index of 'new' from the end is \" +    anyString.lastIndexOf(\"new\"))    \/\/ Displays 6\r          Example: indexOf and case-sensitivity The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first writeln method displays 19. But because the indexOf method is case sensitive, the string \"cheddar\" is not found in myCapString, so the second writeln method displays -1. \r           myString = \"brie, pepper jack, cheddar\" myCapString = \"Brie, Pepper Jack, Cheddar\" document.writeln('myString.indexOf(\"cheddar\") is ' +    myString.indexOf(\"cheddar\")) document.writeln('<P>myCapString.indexOf(\"cheddar\") is ' +    myCapString.indexOf(\"cheddar\"))\r          Example: Using indexOf to count occurrences of a letter in a string The following example sets count to the number of occurrences of the letter x in the string str: \r           count = 0; pos = str.indexOf(\"x\"); while ( pos != -1 ) {    count++;    pos = str.indexOf(\"x\",pos+1); }\r          See Also charAt, lastIndexOf, split, Array.indexOf \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/lastIndexOf","title":"String.lastIndexOf","description":"Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax string.lastIndexOf(searchValue[, fromIndex]) Parameters  searchValue A string representing the value to search for.   fromIndex The location within the calling string to start the search from, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string.  Description Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is stringName.length - 1. \r           \"canal\".lastIndexOf(\"a\")   \/\/ returns 3 \"canal\".lastIndexOf(\"a\",2) \/\/ returns 1 \"canal\".lastIndexOf(\"a\",0) \/\/ returns -1 \"canal\".lastIndexOf(\"x\")   \/\/ returns -1\r          The lastIndexOf method is case sensitive. For example, the following expression returns -1: \"Blue Whale, Killer Whale\".lastIndexOf(\"blue\") \/\/ returns -1  Examples Example: Using indexOf and lastIndexOf The following example uses indexOf and lastIndexOf to locate values in the string \"Brave new world\". \r           var anyString = \"Brave new world\"  \/\/ Displays 8 document.write(\"<P>The index of the first w from the beginning is \" +    anyString.indexOf(\"w\")) \/\/ Displays 10 document.write(\"<P>The index of the first w from the end is \" +    anyString.lastIndexOf(\"w\")) \/\/ Displays 6 document.write(\"<P>The index of 'new' from the beginning is \" +    anyString.indexOf(\"new\")) \/\/ Displays 6 document.write(\"<P>The index of 'new' from the end is \" +    anyString.lastIndexOf(\"new\"))\r          Example: Using indexOf and lastIndexOf The following example uses indexOf and lastIndexOf to locate values in the string \"Brave new world\". \r           var anyString = \"Brave new world\"  \/\/ Displays 8 document.write(\"<P>The index of the first w from the beginning is \" +    anyString.indexOf(\"w\")) \/\/ Displays 10 document.write(\"<P>The index of the first w from the end is \" +    anyString.lastIndexOf(\"w\")) \/\/ Displays 6 document.write(\"<P>The index of 'new' from the beginning is \" +    anyString.indexOf(\"new\")) \/\/ Displays 6 document.write(\"<P>The index of 'new' from the end is \" +    anyString.lastIndexOf(\"new\"))\r          See Also charAt, indexOf, split \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/match","title":"String.match","description":"Used to retrieve the matches when matching a\u00a0string\u00a0against a\u00a0regular expression.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.match(regexp) Parameters Description If the regular expression does not include the g flag, returns the same result as regexp.exec(string). If the regular expression includes the g flag, the method returns an Array containing all matches. If there were no matches, the method returns null. The returned Array has an extra input property, which contains the regexp that generated it as a result. In addition, it has an index property, which represents the zero-based index of the match in the string.  regexp A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).    Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , match() was implemented incorrectly; when it was called with no parameters or with undefined, it would match against undefined, instead of always returning an empty string. This is fixed.  Notes  If you need to know if a string matches a regular expression regexp, use regexp.test(string). If you only want the first match found, you might want to use regexp.exec(string) instead. See \u00a715.5.4.10 of the ECMA-262 specification.  Notes  If you need to know if a string matches a regular expression regexp, use regexp.test(string). If you only want the first match found, you might want to use regexp.exec(string) instead. See \u00a715.5.4.10 of the ECMA-262 specification.  Examples Example: Using match In the following example, match is used to find \"Chapter\" followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the i flag so that case will be ignored.  <script type=\"text\/javascript\"> str = \"For more information, see Chapter 3.4.5.1\"; re = \/(chapter \\d+(\\.\\d)*)\/i; found = str.match(re); alert(found); <\/script>  This returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1 \"Chapter 3.4.5.1\" is the first match and the first value remembered from (Chapter \\d+(\\.\\d)*). \".1\" is the second value remembered from (\\.\\d). Example: Using global and ignore case flags with match The following example demonstrates the use of the global and ignore case flags with match. All letters A through E and a through e are returned, each its own element in the array  var str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"; var regexp = \/[A-E]\/gi; var matches_array = str.match(regexp); alert(matches_array);  matches_array now equals ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e'] Example: Using match In the following example, match is used to find \"Chapter\" followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the i flag so that case will be ignored.  <script type=\"text\/javascript\"> str = \"For more information, see Chapter 3.4.5.1\"; re = \/(chapter \\d+(\\.\\d)*)\/i; found = str.match(re); alert(found); <\/script>  This returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1 \"Chapter 3.4.5.1\" is the first match and the first value remembered from (Chapter \\d+(\\.\\d)*). \".1\" is the second value remembered from (\\.\\d). Example: Using global and ignore case flags with match The following example demonstrates the use of the global and ignore case flags with match. All letters A through E and a through e are returned, each its own element in the array  var str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"; var regexp = \/[A-E]\/gi; var matches_array = str.match(regexp); alert(matches_array);  matches_array now equals ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/quote","title":"String.quote","description":"Syntax str.quote() Examples    str str.quote() eval(str.quote())     Hello world! \"Hello world!\" Hello world!   Hello \u00a0 \u00a0 \u00a0 \u00a0 world! \"Hello\\n\\tworld!\" Hello \u00a0 \u00a0 \u00a0 \u00a0 world!   \" \\ \u2014 ' \\\" \\\\ \\u2014 ' \" \\ \u2014 '"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/search","title":"String.search","description":"Executes the search for a match between a regular expression and this String object.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.search(regexp) Parameters  regexp A  regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).  Description If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1. When you want to know whether a pattern is found in a string use search (similar to the regular expression test method); for more information (but slower execution) use match (similar to the regular expression exec method).   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , search() was implemented incorrectly; when it was called with no parameters or with undefined, it would match against the string \"undefined\", instead of matching against the empty string. This is fixed; now \"a\".search() and \"a\".search(undefined) correctly return 0.  Examples Example: Using search The following example prints a message which depends on the success of the test. \r           function testinput(re, str){    if (str.search(re) != -1){       midstring = \" contains \";    }    else{       midstring = \" does not contain \";    }    document.write (str + midstring + re); }\r          Example: Using search The following example prints a message which depends on the success of the test. \r           function testinput(re, str){    if (str.search(re) != -1){       midstring = \" contains \";    }    else{       midstring = \" does not contain \";    }    document.write (str + midstring + re); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/slice","title":"String.slice","description":"Extracts a section of a string and returns a new string.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.slice(beginslice[, endSlice])Parameters  beginSlice\u00a0 The zero-based index at which to begin extraction.   endSlice\u00a0 The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string.  Description slice extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string. slice extracts up to but not including endSlice. string.slice(1,4) extracts the second character through the fourth character (characters indexed 1, 2, and 3). As a negative index, endSlice indicates an offset from the end of the string. string.slice(2,-1) extracts the third character through the second to last character in the string. Examples Example: Using slice to create a new string The following example uses slice to create a new string. \r           \/\/ assumes a print function is defined var str1 = \"The morning is upon us.\"; var str2 = str1.slice(4, -2); print(str2);\r          This writes:  morning is upon u  \u00a0 Example: Using slice to create a new string The following example uses slice to create a new string. \r           \/\/ assumes a print function is defined var str1 = \"The morning is upon us.\"; var str2 = str1.slice(4, -2); print(str2);\r          This writes:  morning is upon u  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/split","title":"String.split","description":"Splits a String object into an array of strings by separating the string into substrings.    Method of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.split([separator][, limit]) Parameters  separator Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.   limit Integer specifying a limit on the number of splits to be found. \u00a0The\u00a0split method still splits on every match of\u00a0separator, but it truncates the returned array to at most\u00a0limit elements.  Description The split method returns the new array. When found, separator is removed from the string and the substrings are returned in an array. If separator is omitted, the array contains one element consisting of the entire string. If separator is a regular expression that contains capturing parentheses, then each time separator is matched the results (including any undefined results) of the capturing parentheses are spliced into the output array. However, not all browsers support this capability. Note:\u00a0When the string is empty, split returns an array containing one empty string, rather than an empty array.  Examples Example: Using split The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements. \r           function splitString(stringToSplit,separator) {   var arrayOfStrings = stringToSplit.split(separator);   print('The original string is: \"' + stringToSplit + '\"');   print('The separator is: \"' + separator + '\"');   print(\"The array has \" + arrayOfStrings.length + \" elements: \");    for (var i=0; i < arrayOfStrings.length; i++)     print(arrayOfStrings[i] + \" \/ \"); }  var tempestString = \"Oh brave new world that has such people in it.\"; var monthString = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";  var space = \" \"; var comma = \",\";  splitString(tempestString, space); splitString(tempestString); splitString(monthString, comma);\r          This example produces the following output: The original string is: \"Oh brave new world that has such people in it.\" The separator is: \" \" The array has 10 elements: Oh \/ brave \/ new \/ world \/ that \/ has \/ such \/ people \/ in \/ it. \/  The original string is: \"Oh brave new world that has such people in it.\" The separator is: \"undefined\" The array has 1 elements: Oh brave new world that has such people in it. \/  The original string is: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\" The separator is: \",\" The array has 12 elements: Jan \/ Feb \/ Mar \/ Apr \/ May \/ Jun \/ Jul \/ Aug \/ Sep \/ Oct \/ Nov \/ Dec \/  Example: Removing spaces from a string In the following example, split looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. nameList is the array returned as a result of split. \r           var names = \"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \"; print(names); var re = \/\\s*;\\s*\/; var nameList = names.split(re); print(nameList);\r          This prints two lines; the first line prints the original string, and the second line prints the resulting array. Harry Trump\u00a0;Fred Barney; Helen Rigby\u00a0; Bill Abel\u00a0;Chris Hand Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand  Example: Returning a limited number of splits In the following example, split looks for 0 or more spaces in a string and returns the first 3 splits that it finds. \r           var myString = \"Hello World. How are you doing?\"; var splits = myString.split(\" \", 3); print(splits);\r          This script displays the following: Hello,World.,How  Example: Capturing parentheses If separator contains capturing parentheses, matched results are returned in the array. \r           var myString = \"Hello 1 word. Sentence number 2.\"; var splits = myString.split(\/(\\d)\/); print(splits);\r          This script displays the following: Hello ,1, word. Sentence number ,2, .  Example: Using split The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements. \r           function splitString(stringToSplit,separator) {   var arrayOfStrings = stringToSplit.split(separator);   print('The original string is: \"' + stringToSplit + '\"');   print('The separator is: \"' + separator + '\"');   print(\"The array has \" + arrayOfStrings.length + \" elements: \");    for (var i=0; i < arrayOfStrings.length; i++)     print(arrayOfStrings[i] + \" \/ \"); }  var tempestString = \"Oh brave new world that has such people in it.\"; var monthString = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";  var space = \" \"; var comma = \",\";  splitString(tempestString, space); splitString(tempestString); splitString(monthString, comma);\r          This example produces the following output: The original string is: \"Oh brave new world that has such people in it.\" The separator is: \" \" The array has 10 elements: Oh \/ brave \/ new \/ world \/ that \/ has \/ such \/ people \/ in \/ it. \/  The original string is: \"Oh brave new world that has such people in it.\" The separator is: \"undefined\" The array has 1 elements: Oh brave new world that has such people in it. \/  The original string is: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\" The separator is: \",\" The array has 12 elements: Jan \/ Feb \/ Mar \/ Apr \/ May \/ Jun \/ Jul \/ Aug \/ Sep \/ Oct \/ Nov \/ Dec \/  Example: Removing spaces from a string In the following example, split looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. nameList is the array returned as a result of split. \r           var names = \"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \"; print(names); var re = \/\\s*;\\s*\/; var nameList = names.split(re); print(nameList);\r          This prints two lines; the first line prints the original string, and the second line prints the resulting array. Harry Trump\u00a0;Fred Barney; Helen Rigby\u00a0; Bill Abel\u00a0;Chris Hand Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand  Example: Returning a limited number of splits In the following example, split looks for 0 or more spaces in a string and returns the first 3 splits that it finds. \r           var myString = \"Hello World. How are you doing?\"; var splits = myString.split(\" \", 3); print(splits);\r          This script displays the following: Hello,World.,How  Example: Capturing parentheses If separator contains capturing parentheses, matched results are returned in the array. \r           var myString = \"Hello 1 word. Sentence number 2.\"; var splits = myString.split(\/(\\d)\/); print(splits);\r          This script displays the following: Hello ,1, word. Sentence number ,2, .  See Also charAt, indexOf, lastIndexOf, Array:join \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleLowerCase","title":"String.toLocaleLowerCase","description":"Returns the calling string value converted to lower case, according to any locale-specific case mappings.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleLowerCase()  Parameters None. Description The toLocaleLowerCase method returns the value of the string converted to lower case according to any locale-specific case mappings. toLocaleLowerCase does not affect the value of the string itself. In most cases, this will produce the same result as toLowerCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result. Examples Example: Using toLocaleLowerCase The following example displays the string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLocaleLowerCase());\r         Example: Using toLocaleLowerCase The following example displays the string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLocaleLowerCase());\r         See also toLowerCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLowerCase","title":"String.toLowerCase","description":"Returns the calling string value converted to lowercase.    Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax string.toLowerCase() Parameters None. Description The toLowerCase method returns the value of the string converted to lowercase. toLowerCase does not affect the value of the string itself. Examples Example: Using toLowerCase The following example displays the lowercase string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLowerCase());\r          Example: Using toLowerCase The following example displays the lowercase string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLowerCase());\r          See Also toLocaleLowerCase toUpperCase \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toUpperCase","title":"String.toUpperCase","description":"Syntax string.toUpperCase() Parameters None. Description The toUpperCase method returns the value of the string converted to uppercase. toUpperCase does not affect the value of the string itself. Examples Example: Using toUpperCase The following example displays the string \"ALPHABET\":  var lowerText=\"alphabet\"; document.write(lowerText.toUpperCase()); Example: Using toUpperCase The following example displays the string \"ALPHABET\":  var lowerText=\"alphabet\"; document.write(lowerText.toUpperCase()); See Also toLocaleUpperCase toLowerCase \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleUpperCase","title":"String.toLocaleUpperCase","description":"Returns the calling string value converted to upper case, according to any locale-specific case mappings.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleUpperCase()  Parameters None. Description The toLocaleUpperCase method returns the value of the string converted to upper case according to any locale-specific case mappings. toLocaleUpperCase does not affect the value of the string itself. In most cases, this will produce the same result as toUpperCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result. Examples Example: Using toLocaleUpperCase The following example displays the string \"ALPHABET\": \r           var lowerText=\"alphabet\"; document.write(lowerText.toLocaleUpperCase());\r          Example: Using toLocaleUpperCase The following example displays the string \"ALPHABET\": \r           var lowerText=\"alphabet\"; document.write(lowerText.toLocaleUpperCase());\r          See also toUpperCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toSource","title":"String.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of String     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  string.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in String object, toSource returns the following string indicating that the source code is not available:  function String() {[native code]}   For instances of String or string literals, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toString","title":"String.toString","description":"Returns a string representing the specified object.    Method of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax string.toString() Parameters None. Description The String object overrides the toString method of the Object object; it does not inherit Object.toString. For String objects, the toString method returns a string representation of the object. Examples Example: Using toString The following example displays the string value of a String object:  x = new String(\"Hello world\"); alert(x.toString())      \/\/ Displays \"Hello world\"  Example: Using toString The following example displays the string value of a String object:  x = new String(\"Hello world\"); alert(x.toString())      \/\/ Displays \"Hello world\"  See also Object.toString \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/Trim","title":"String.Trim","description":"Removes whitespace from both ends of the string.    Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition    Syntax string.trim() Parameters None. Description The trim method returns the string stripped of whitespace from both ends. trim does not affect the value of the string itself. Examples Example: Using trim The following example displays the lowercase string \"foo\": \r           var orig = \"   foo  \"; alert(orig.trim());\r          Example: Using trim The following example displays the lowercase string \"foo\": \r           var orig = \"   foo  \"; alert(orig.trim());\r          See Also  trimLeft() trimRight()  Compatibility Running the following code before any other code will create String.trim if it's not natively available. \r           if(!String.prototype.trim) {   String.prototype.trim = function () {     return this.replace(\/^\\s+|\\s+$\/g,'');   }; }\r          Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 10.5 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimLeft","title":"String.TrimLeft","description":"Removes whitespace from the left end of the string.    Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition None    Syntax string.trimLeft() Parameters None. Description The trimLeft method returns the string stripped of whitespace from its left end. trimLeft does not affect the value of the string itself. Examples Example: Using trimLeft The following example displays the lowercase string \"foo\u00a0 \":  var orig=\"   foo  \" document.write(orig.trimLeft())  Example: Using trimLeft The following example displays the lowercase string \"foo\u00a0 \":  var orig=\"   foo  \" document.write(orig.trimLeft())  See Also  trim()\u00a0 trimRight()\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimRight","title":"String.TrimRight","description":"Removes whitespace from the right end of the string.    Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition None    Syntax string.trimRight() Parameters None. Description The trimRight method returns the string stripped of whitespace from its right end. trimRight does not affect the value of the string itself. Examples Example: Using trimRight The following example displays the lowercase string \"\u00a0\u00a0 foo\":  var orig=\"   foo  \" document.write(orig.trimRight())  Example: Using trimRight The following example displays the lowercase string \"\u00a0\u00a0 foo\":  var orig=\"   foo  \" document.write(orig.trimRight())  See Also  trim()\u00a0 trimRight()\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/anchor","title":"String.anchor","description":"Summary  Creates an HTML anchor that is used as a hypertext target.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   anchor(nameAttribute)    Parameters   nameAttribute\u00a0 A string.   Description  Use the anchor method with the document.write or document.writeln methods to programmatically create and display an anchor in a document. Create the anchor with the anchor method, and then call write or writeln to display the anchor in a document. In server-side JavaScript, use the write function to display the anchor. In the syntax, the text string represents the literal text that you want the user to see. The nameAttribute string represents the NAME attribute of the A tag. Anchors created with the anchor method become elements in the document.anchors array.   Examples   Example: Using anchor  The following example code within an HTML script element:   var myString = \"Table of Contents\"; document.writeln(myString.anchor(\"contents_anchor\"));  will output the following HTML:   <A NAME=\"contents_anchor\">Table of Contents<\/A>   Example: Using anchor  The following example code within an HTML script element:   var myString = \"Table of Contents\"; document.writeln(myString.anchor(\"contents_anchor\"));  will output the following HTML:   <A NAME=\"contents_anchor\">Table of Contents<\/A>   See Also  link"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/big","title":"String.big","description":"Summary  Causes a string to be displayed in a big font as if it were in a BIG tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   big()    Parameters  None.   Description  Use the big method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using big  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   Example: Using big  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   See Also  fontsize, small"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/blink","title":"String.blink","description":"Summary  Causes a string to blink as if it were in a BLINK tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   blink()    Parameters  None.   Description  Use the blink method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  bold, italics, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fixed","title":"String.fixed","description":"Summary  Causes a string to be displayed in fixed-pitch font as if it were in a TT tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   fixed()    Parameters  None.   Description  Use the fixed method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using fixed to change the formatting of a string  The following example uses the fixed method to change the formatting of a string:   var worldString=\"Hello, world\" document.write(worldString.fixed())  This example produces the same output as the following HTML:   <TT>Hello, world<\/TT>     Example: Using fixed to change the formatting of a string  The following example uses the fixed method to change the formatting of a string:   var worldString=\"Hello, world\" document.write(worldString.fixed())  This example produces the same output as the following HTML:   <TT>Hello, world<\/TT>"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/bold","title":"String.bold","description":"Summary  Causes a string to be displayed as bold as if it were in a B tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   bold()    Parameters  None.   Description  Use the bold method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, italics, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/italics","title":"String.italics","description":"Summary  Causes a string to be italic, as if it were in an I tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   italics()    Parameters  None.   Description  Use the italics method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, bold, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontcolor","title":"String.fontcolor","description":"Summary  Causes a string to be displayed in the specified color as if it were in a <FONT COLOR=\"color\"> tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   fontcolor(color)    Parameters   color\u00a0 A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the Core JavaScript 1.5 Guide.   Description  Use the fontcolor method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string. If you express color as a hexadecimal RGB triplet, you must use the format rrggbb. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is \"FA8072\". The fontcolor method overrides a value set in the fgColor property.   Examples   Example: Using fontcolor  The following example uses the fontcolor method to change the color of a string:   var worldString=\"Hello, world\"  document.write(worldString.fontcolor(\"maroon\") +    \" is maroon in this line\") document.write(\"<P>\" + worldString.fontcolor(\"salmon\") +    \" is salmon in this line\") document.write(\"<P>\" + worldString.fontcolor(\"red\") +    \" is red in this line\")  document.write(\"<P>\" + worldString.fontcolor(\"8000\") +    \" is maroon in hexadecimal in this line\") document.write(\"<P>\" + worldString.fontcolor(\"FA8072\") +    \" is salmon in hexadecimal in this line\") document.write(\"<P>\" + worldString.fontcolor(\"FF00\") +    \" is red in hexadecimal in this line\")  The previous example produces the same output as the following HTML:   <FONT COLOR=\"maroon\">Hello, world<\/FONT> is maroon in this line <P><FONT COLOR=\"salmon\">Hello, world<\/FONT> is salmon in this line <P><FONT COLOR=\"red\">Hello, world<\/FONT> is red in this line  <P><FONT COLOR=\"8000\">Hello, world<\/FONT> is maroon in hexadecimal in this line <P><FONT COLOR=\"FA8072\">Hello, world<\/FONT> is salmon in hexadecimal in this line <P><FONT COLOR=\"FF00\">Hello, world<\/FONT> is red in hexadecimal in this line   Example: Using fontcolor  The following example uses the fontcolor method to change the color of a string:   var worldString=\"Hello, world\"  document.write(worldString.fontcolor(\"maroon\") +    \" is maroon in this line\") document.write(\"<P>\" + worldString.fontcolor(\"salmon\") +    \" is salmon in this line\") document.write(\"<P>\" + worldString.fontcolor(\"red\") +    \" is red in this line\")  document.write(\"<P>\" + worldString.fontcolor(\"8000\") +    \" is maroon in hexadecimal in this line\") document.write(\"<P>\" + worldString.fontcolor(\"FA8072\") +    \" is salmon in hexadecimal in this line\") document.write(\"<P>\" + worldString.fontcolor(\"FF00\") +    \" is red in hexadecimal in this line\")  The previous example produces the same output as the following HTML:   <FONT COLOR=\"maroon\">Hello, world<\/FONT> is maroon in this line <P><FONT COLOR=\"salmon\">Hello, world<\/FONT> is salmon in this line <P><FONT COLOR=\"red\">Hello, world<\/FONT> is red in this line  <P><FONT COLOR=\"8000\">Hello, world<\/FONT> is maroon in hexadecimal in this line <P><FONT COLOR=\"FA8072\">Hello, world<\/FONT> is salmon in hexadecimal in this line <P><FONT COLOR=\"FF00\">Hello, world<\/FONT> is red in hexadecimal in this line"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontsize","title":"String.fontsize","description":"Summary  Causes a string to be displayed in the specified font size as if it were in a <FONT SIZE=\"size\"> tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   fontsize(size)    Parameters   size\u00a0 An integer between 1 and 7, a string representing a signed integer between 1 and 7.   Description  Use the fontsize method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string. When you specify size as an integer, you set the size of stringName to one of the 7 defined sizes. When you specify size as a string such as \"-2\", you adjust the font size of stringName relative to the size set in the BASEFONT tag.   Examples   Example: Using string methods to change the size of a string  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONT SIZE=\"7\">Hello, world<\/FONT>   Example: Using string methods to change the size of a string  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONT SIZE=\"7\">Hello, world<\/FONT>   See Also  big, small"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/small","title":"String.small","description":"Summary  Causes a string to be displayed in a small font, as if it were in a SMALL tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   small()    Parameters  None.   Description  Use the small method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the size of a string   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   Example: Using string methods to change the size of a string   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   See Also  big, fontsize"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sub","title":"String.sub","description":"Summary  Causes a string to be displayed as a subscript, as if it were in a SUB tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   sub()    Parameters  None.   Description  Use the sub method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.   Examples   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   See Also  sup"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/link","title":"String.link","description":"Summary  Creates an HTML hypertext link that requests another URL.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   link(hrefAttribute)    Parameters   hrefAttribute\u00a0 Any string that specifies the HREF of the A tag; it should be a valid URL (relative or absolute).   Description  Use the link method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via document.write  or element.innerHTML . Links created with the link method become elements in the links array of the document object. See document.links .   Examples   Example: Using link  The following example displays the word \"Netscape\" as a hypertext link that returns the user to the Netscape home page:   var hotText=\"Netscape\" var URL=\"http:\/\/home.netscape.com\"  document.write(\"Click to return to \" + hotText.link(URL))  This example produces the same output as the following HTML:   Click to return to <A HREF=\"http:\/\/home.netscape.com\">Netscape<\/A>     Example: Using link  The following example displays the word \"Netscape\" as a hypertext link that returns the user to the Netscape home page:   var hotText=\"Netscape\" var URL=\"http:\/\/home.netscape.com\"  document.write(\"Click to return to \" + hotText.link(URL))  This example produces the same output as the following HTML:   Click to return to <A HREF=\"http:\/\/home.netscape.com\">Netscape<\/A>"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/strike","title":"String.strike","description":"Summary  Causes a string to be displayed as struck-out text, as if it were in a STRIKE tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   strike()    Parameters  None.   Description  Use the strike method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, bold, italics"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sup","title":"String.sup","description":"Summary  Causes a string to be displayed as a superscript, as if it were in a SUP tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   sup()    Parameters  None.   Description  Use the sup method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.   Examples   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   See Also  sub"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBufferView","title":"ArrayBufferView","description":"\u00a0Attributes    Attribute Type Description   buffer ArrayBuffer The buffer this view references. Read only.   byteLength  unsigned long  The length, in bytes, of the view. Read only.   byteOffset  unsigned long  The offset, in bytes, to the first byte of the view within the ArrayBuffer.    Typed array subclasses The following subclasses provide buffer views allowing access to the data in specific data types:    Type Size Description Equivalent C type   Int8Array 1 8-bit twos complement signed integer signed char   Uint8Array  1 8-bit unsigned integer unsigned char    Int16Array  2 16-bit twos complement signed integer short    Uint16Array  2 16-bit unsigned integer unsigned short    Int32Array  4 32-bit twos complement signed integer int    Uint32Array  4 32-bit unsigned integer unsigned int    Float32Array  4 32-bit IEEE\u00a0floating point number float    Float64Array  8 64-bit IEEE floating point number double    See also  DataView Typed Array Specification JavaScript typed arrays"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/prototype","title":"Error.prototype","description":"Represents the prototype for the Error constructor. Description \u00a0 All Error instances and instances of non-generic errors inherit from Error.prototype. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor. \u00a0 Properties Standard properties  constructor Specifies the function that created an instance's prototype. message Error message. name Error name.  Vendor-specific extensions   Non-standard Microsoft  description Error description. Similar to message. number Error number.  Mozilla  fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.  Standard properties  constructor Specifies the function that created an instance's prototype. message Error message. name Error name.  Vendor-specific extensions   Non-standard Microsoft  description Error description. Similar to message. number Error number.  Mozilla  fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.  Microsoft  description Error description. Similar to message. number Error number.  Mozilla  fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.  Methods  toSource Non-standard      Returns a string containing the source of the specified Error object; you can use this value to create a new object. Overrides the Object.toSource method. toString Returns a string representing the specified object. Overrides the Object.toString method.     Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error Object.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/message","title":"Error.message","description":"A human-readable description of the error.    Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition    Description This property contains a brief description of the error if one is available or has been set. SpiderMonkey makes extensive use of the message property for exceptions. The message property combined with the name property is used by the Error.prototype.toString method to create a string representation of the Error. By default, the message property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the Error constructor. Examples Example: Throwing a custom error  var e = new Error(\"Could not parse input\"); \/\/ e.message is \"Could not parse input\" throw e;  Example: Throwing a custom error  var e = new Error(\"Could not parse input\"); \/\/ e.message is \"Could not parse input\" throw e;  See also  name toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/name","title":"Error.name","description":"A name for the type of error.    Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition   Description By default, Error instances are given the name \"Error\". The name property, in addition to the message property, is used by the Error.prototype.toString method to create a string representation of the error. Examples Example: Throwing a custom error  var e = new Error(\"Malformed input\"); \/\/ e.name is \"Error\" e.name = \"ParseError\";                \/\/ e.toString() would return throw e;                              \/\/ \"ParseError: Malformed input\"  Example: Throwing a custom error  var e = new Error(\"Malformed input\"); \/\/ e.name is \"Error\" e.name = \"ParseError\";                \/\/ e.toString() would return throw e;                              \/\/ \"ParseError: Malformed input\"  See also  message toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/Stack","title":"Error.Stack","description":"Description This non-standard property of Error objects offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call. Each step will be separated by a newline, with the first part of the line being the function name (if not a call from the global scope), followed by the argument values converted to string in parentheses, then by an at (@) sign, the file location (except when the function is the error constructor as the error is being thrown), a colon, and, if there is a file location, the line number. (Note the Error object also possesses the fileName and lineNumber properties for retrieving these from the error thrown (but only the error, and not its trace).) While an object (or array, etc.) will appear in the converted form \"[object Object]\", and as such cannot be evaluated back into the actual objects, scalar values can be retrieved (though it may be easier to use arguments.callee.caller.arguments, as could the function name be retrieved by arguments.callee.caller.name). \"undefined\" is listed as \"(void 0)\". Note that if string arguments are passed in with values such as \"@\", \"(\", \")\" (or if in file names), you cannot easily rely on these for breaking the line into its component parts. Example The following HTML markup demonstrates the use of stack property. \r           <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=windows-1251\"> <meta http-equiv=\"Content-Script-Type\" content=\"text\/javascript\"> <title>Stack Trace Example<\/title> <body>     <script type=\"text\/javascript\">         function trace() {             try {                 throw new Error(\"myError\");             }             catch(e) {                 alert(e.stack);             }         }         function b() {             trace();         }         function a() {             b(3, 4, \"\\n\\n\", undefined, {});         }         a(\"first call, firstarg\");     <\/script>\r          Assuming the above markup is saved as C:\\example.html on a Windows file system and is open in a browser it produces an alert message box with the following text:  Error(\"myError\")@:0 trace()@file:\/\/\/C:\/example.html:9 b(3,4,\"\\n\\n\",(void 0),[object Object])@file:\/\/\/C:\/example.html:16 a(\"first call, firstarg\")@file:\/\/\/C:\/example.html:19 @file:\/\/\/C:\/example.html:21  See also Components.stack"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toSource","title":"Error.toSource","description":"Returns code that could eval to the same error.    Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition none    Syntax  error.toSource()   Parameters  None.   Description  Calling the toString method of an Error instance (including NativeErrors) will return a string containing the source code of the error. This string can be evaluated to create an (approximately) equal object. Naturally, the string containing the source follows the structure of the Error constructor. For example:  (new name(message, fileName, lineNumber))  where these attributes correspond to the respective properties of the error instance.  Be aware that the properties used by the toSource method in the creation of this string are mutable and may not accurately reflect the function used to create an error instance or the filename or line number where the actual error occurred.  See also   fileName  lineNumber  message  name"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError\/prototype","title":"EvalError.prototype","description":"Represents the prototype the EvalError constructor. Description All EvalError instances inherit from EvalError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Note:\u00a0Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the EvalError prototype object does not contain any methods of its own, EvalError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toString","title":"Error.toString","description":"Returns a string representing the specified Error object.    Method of Error     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition   Syntax error.toString() Parameters None. Description The Error object overrides the Object.prototype.toString method inherited by all objects. According to ECMA-262, implementations are free to decide the behavior of this method. SpiderMonkey joins string representations of the name and message properties with a colon and a space separating the two. If the string representation of either of these two properties is an empty string, this method simply returns the string representation of the property that has a non-zero length. If both properties' string representations are empty strings, this method returns an empty string. Note that when creating a string representation of the name and message properties, this method does not invoke those properties' toString methods. If the value in either of these properties is not already a string, this method will behave as if that property contained an empty string. Example  var e = new Error(\"fatal error\"); e.toString(); \/\/ returns \"Error: fatal error\"  e.name = undefined; e.toString(); \/\/ returns \"fatal error\"  e.message = undefined; e.toString(); \/\/ returns \"\"  e.name = \"Error\"; e.toString(); \/\/ returns \"Error\"  See also toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError\/prototype","title":"RangeError.prototype","description":"Represents the prototype the RangeError constructor. Description All RangeError instances inherit from RangeError.prototype. You can use the prototype to add properties or methods to all instances.Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/prototype","title":"ReferenceError.prototype","description":"Represents the prototype for the ReferenceError constructor. Description All ReferenceError instances inherit from ReferenceError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/name","title":"ReferenceError.name","description":"A name for the type of error.  Description By default, ReferenceError instances are given the name \"ReferenceError\". See also  message toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError\/prototype","title":"SyntaxError.prototype","description":"Represents the prototype for the SyntaxError constructor. Description All\u00a0SyntaxError\u00a0instances inherit from\u00a0SyntaxError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype. name Error name.  Note: Although ECMA-262\u00a0 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the SyntaxError prototype object does not contain any methods of its own, SyntaxError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype  See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError\/prototype","title":"TypeError.prototype","description":"Represents the prototype for the TypeError constructor. Description All TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError\/prototype","title":"URIError.prototype","description":"Represents the prototype for the URIError constructor. Description All URIError instances inherit from URIError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262\u00a0specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the URIError prototype object does not contain any methods of its own, URIError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Constructor","title":"Object.Constructor","description":"Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, \"read-only\").    Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description All objects inherit a constructor property from their prototype:  o = new Object \/\/ or o = {} in JavaScript 1.2 o.constructor == Object a = new Array \/\/ or a = [] in JavaScript 1.2 a.constructor == Array n = new Number(3) n.constructor == Number  Even though you cannot construct most HTML objects, you can do comparisons. For example,  document.constructor == Document document.form3.constructor == Form  Examples Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));  Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/parse","title":"JSON.parse","description":"Parse a string as JSON, optionally transforming the value produced by parsing.    Method of JSON     Implemented in JavaScript 1.7   ECMAScript Edition ECMAScript 5th Edition    Syntax JSON.parse(text[, reviver]) Parameters  text\u00a0 The string to parse as JSON. \u00a0See the JSON object for a description of JSON syntax.   reviver\u00a0 If a function, prescribes how the value originally produced by parsing is transformed, before being returned.  Description JSON.parse parses a string as JSON and returns the parsed value. \r           JSON.parse('{}'); \/\/ {} JSON.parse('true'); \/\/ true JSON.parse('\"foo\"'); \/\/ \"foo\" JSON.parse('[1, 5, \"false\"]'); \/\/ [1, 5, \"false\"] JSON.parse('null'); \/\/ null\r          If a reviver is specified, the value computed by parsing is transformed before being returned. Specifically, the computed value, and all its properties (beginning with the most nested properties and proceeding to the original value itself), are individually run through the reviver, which is called with the object containing the property being processed as this and with the property name as a string and the property value as arguments. If the reviver function returns undefined\u00a0(or returns no value, e.g. if execution falls off the end of the function), the property is deleted from the object. Otherwise the property is redefined to be the return value. The reviver is ultimately called with the empty string and the topmost value to permit transformation of the topmost value. \u00a0Be certain to handle this case properly, usually by returning the provided value, or\u00a0JSON.parse\u00a0will return undefined. \r           var transformed =   JSON.parse('{\"p\": 5}', function(k, v) { if (k === \"\") return v; return v * 2; }); \/\/ transformed is { p: 10 }\r          If the string to parse is not valid JSON, a SyntaxError exception is thrown."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/stringify","title":"JSON.stringify","description":"Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.    Method of JSON     Implemented in JavaScript 1.7   ECMAScript Edition ECMAScript 5th Edition    Syntax JSON.stringify(value[, replacer [, space]]) Parameters  value The value to convert to a JSON string. replacer If a function, transforms values and properties encountered while stringifying; if an array, specifies the set of properties included in objects in the final string. A detailed description of the replacer function is provided in Using native JSON#The_replacer_parameter. space Causes the resulting string to be pretty-printed.  Description JSON.stringify converts an object to JSON notation representing it. \r           assert(JSON.stringify({}) === '{}'); assert(JSON.stringify(true) === 'true'); assert(JSON.stringify(\"foo\") === '\"foo\"'); assert(JSON.stringify([1, \"false\", false]) === '[1,\"false\",false]'); assert(JSON.stringify({ x: 5 }) === '{\"x\":5}'); JSON.stringify({x: 5, y: 6}); \/\/ '{\"x\":5,\"y\":6}' or '{\"y\":6,\"x\":5}'\r          Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification. Boolean, Number, and String objects are converted to the corresponding primitive values during stringification, in accord with the traditional conversion semantics. If undefined, a function, or an XML value is encountered during conversion it is either omitted (when it is found in an object) or censored to null (when it is found in an array). space argument The space argument may be used to control spacing in the final string. If it is a number, successive levels in the stringification will each be indented by this many space characters (up to 10). If it is a string, successive levels will indented by this string (or the first ten characters of it). \r           JSON.stringify({ a: 2 }, null, \" \");   \/\/ '{\\n \"a\": 2\\n}'\r          Using a tab character mimics standard pretty-print appearance: \r           JSON.stringify({ uno: 1, dos : 2 }, null, '\\t') \/\/ returns the string: \/\/ '{            \\ \/\/     \"uno\": 1, \\ \/\/     \"dos\": 2  \\ \/\/ }'\r          \u00a0 toJSON behavior If an object being stringified has a property named toJSON whose value is a function, then the toJSON method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON method when called will be serialized. For example: \r           var x = {   foo: 'foo',   toJSON: function () {     return 'bar';   } }; var json = JSON.stringify({x: x});\r          json will be the string '{\"x\":\"bar\"}'.space argument The space argument may be used to control spacing in the final string. If it is a number, successive levels in the stringification will each be indented by this many space characters (up to 10). If it is a string, successive levels will indented by this string (or the first ten characters of it). \r           JSON.stringify({ a: 2 }, null, \" \");   \/\/ '{\\n \"a\": 2\\n}'\r          Using a tab character mimics standard pretty-print appearance: \r           JSON.stringify({ uno: 1, dos : 2 }, null, '\\t') \/\/ returns the string: \/\/ '{            \\ \/\/     \"uno\": 1, \\ \/\/     \"dos\": 2  \\ \/\/ }'\r          \u00a0 toJSON behavior If an object being stringified has a property named toJSON whose value is a function, then the toJSON method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON method when called will be serialized. For example: \r           var x = {   foo: 'foo',   toJSON: function () {     return 'bar';   } }; var json = JSON.stringify({x: x});\r          json will be the string '{\"x\":\"bar\"}'."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN2","title":"Math.LN2","description":"Summary  The natural logarithm of 2, approximately 0.693.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LN2 is a static property of Math, you always use it as Math.LN2, rather than as a property of a Math object you created.   Examples   Example: Using Math.LN2  The following function returns the natural log of 2:   function getNatLog2() {    return Math.LN2 }   Example: Using Math.LN2  The following function returns the natural log of 2:   function getNatLog2() {    return Math.LN2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/E","title":"Math.E","description":"The base of natural logarithms, e, approximately 2.718.    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description Because E is a static property of Math, you always use it as Math.E, rather than as a property of a Math object you created. Examples Example: Using Math.E The following function returns e:  function getNapier() {    return Math.E }  Example: Using Math.E The following function returns e:  function getNapier() {    return Math.E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN10","title":"Math.LN10","description":"Summary  The natural logarithm of 10, approximately 2.302.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LN10 is a static property of Math, you always use it as Math.LN10, rather than as a property of a Math object you created.   Examples   Example: Using Math.LN10  The following function returns the natural log of 10:   function getNatLog10() {    return Math.LN10 }   Example: Using Math.LN10  The following function returns the natural log of 10:   function getNatLog10() {    return Math.LN10 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG2E","title":"Math.LOG2E","description":"The base 2 logarithm of E (approximately 1.442).    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description  Because LOG2E is a static property of Math, you always use it as Math.LOG2E, rather than as a property of a Math object you created.   Examples   Example: Using Math.LOG2E  The following function returns the base 2 logarithm of E:   function getLog2e() {    return Math.LOG2E }     Example: Using Math.LOG2E  The following function returns the base 2 logarithm of E:   function getLog2e() {    return Math.LOG2E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG10E","title":"Math.LOG10E","description":"Summary  The base 10 logarithm of E (approximately 0.434).     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LOG10E is a static property of Math, you always use it as Math.LOG10E, rather than as a property of a Math object you created.   Examples   Example: Using Math.LOG10E  The following function returns the base 10 logarithm of E:   function getLog10e() {    return Math.LOG10E }    Example: Using Math.LOG10E  The following function returns the base 10 logarithm of E:   function getLog10e() {    return Math.LOG10E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/PI","title":"Math.PI","description":"Summary  The ratio of the circumference of a circle to its diameter, approximately 3.14159.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because PI is a static property of Math, you always use it as Math.PI, rather than as a property of a Math object you created.   Examples   Example: Using PI  The following function returns the value of pi:   function getPi() {    return Math.PI }   Example: Using PI  The following function returns the value of pi:   function getPi() {    return Math.PI }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT1_2","title":"Math.SQRT1_2","description":"The square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description Because SQRT1_2 is a static property of Math, you always use it as Math.SQRT1_2, rather than as a property of a Math object you created. Examples Example: Using SQRT1_2 The following function returns 1 over the square root of 2:  function getRoot1_2() {    return Math.SQRT1_2 }  Example: Using SQRT1_2 The following function returns 1 over the square root of 2:  function getRoot1_2() {    return Math.SQRT1_2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT2","title":"Math.SQRT2","description":"Summary  The square root of 2, approximately 1.414.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because SQRT2 is a static property of Math, you always use it as Math.SQRT2, rather than as a property of a Math object you created.   Examples   Example: Using Math.SQRT2  The following function returns the square root of 2:   function getRoot2() {    return Math.SQRT2 }   Example: Using Math.SQRT2  The following function returns the square root of 2:   function getRoot2() {    return Math.SQRT2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/abs","title":"Math.abs","description":"Summary  Returns the absolute value of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax  var abs = Math.abs(x);   Parameters   x\u00a0 A number.   Description  abs is a static method of Math, so you always use it as Math.abs(), rather than as a method of a Math object you created.   Examples   Example: Math.abs behavior  Passing a non-numeric string or undefined\/empty variable returns NaN. Passing null returns 0.  Math.abs('-1');     \/\/ 1 Math.abs(-2);       \/\/ 2 Math.abs(null);     \/\/ 0 Math.abs(\"string\"); \/\/ NaN Math.abs();         \/\/ NaN   Example: Math.abs behavior  Passing a non-numeric string or undefined\/empty variable returns NaN. Passing null returns 0.  Math.abs('-1');     \/\/ 1 Math.abs(-2);       \/\/ 2 Math.abs(null);     \/\/ 0 Math.abs(\"string\"); \/\/ NaN Math.abs();         \/\/ NaN"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/acos","title":"Math.acos","description":"Summary  Returns the arccosine (in radians) of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.acos(x)    Parameters   x\u00a0 A number.   Description  The acos method returns a numeric value between 0 and pi radians for x between -1 and 1. If the value of number is outside this range, it returns NaN. acos is a static method of Math, so you always use it as Math.acos(), rather than as a method of a Math object you created.   Examples   Example: Using Math.acos  The following function returns the arccosine of the variable x:   function getAcos(x) {    return Math.acos(x) }  If you pass -1 to getAcos, it returns 3.141592653589793; if you pass 2, it returns NaN because 2 is out of range.   Example: Using Math.acos  The following function returns the arccosine of the variable x:   function getAcos(x) {    return Math.acos(x) }  If you pass -1 to getAcos, it returns 3.141592653589793; if you pass 2, it returns NaN because 2 is out of range.   See Also  asin, atan, atan2, cos, sin, tan"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/asin","title":"Math.asin","description":"Summary  Returns the arcsine (in radians) of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.asin(x)    Parameters   x\u00a0 A number.   Description  The asin method returns a numeric value between -pi\/2 and pi\/2 radians for x between -1 and 1. If the value of number is outside this range, it returns NaN. asin is a static method of Math, so you always use it as Math.asin(), rather than as a method of a Math object you created.   Examples   Example: Using Math.asin  The following function returns the arcsine of the variable x:   function getAsin(x) {    return Math.asin(x) }  If you pass getAsin the value 1, it returns 1.570796326794897 (pi\/2); if you pass it the value 2, it returns NaN because 2 is out of range.   Example: Using Math.asin  The following function returns the arcsine of the variable x:   function getAsin(x) {    return Math.asin(x) }  If you pass getAsin the value 1, it returns 1.570796326794897 (pi\/2); if you pass it the value 2, it returns NaN because 2 is out of range.   See Also  acos, atan, atan2, cos, sin, tan"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan","title":"Math.atan","description":"Summary  Returns the arctangent (in radians) of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.atan(x)    Parameters   x\u00a0 A number.   Description  The atan method returns a numeric value between -pi\/2 and pi\/2 radians. atan is a static method of Math, so you always use it as Math.atan(), rather than as a method of a Math object you created.   Examples   Example: Using Math.atan  The following function returns the arctangent of the variable x:   function getAtan(x) {    return Math.atan(x) }  If you pass getAtan the value 1, it returns 0.7853981633974483; if you pass it the value .5, it returns 0.4636476090008061.   Example: Using Math.atan  The following function returns the arctangent of the variable x:   function getAtan(x) {    return Math.atan(x) }  If you pass getAtan the value 1, it returns 0.7853981633974483; if you pass it the value .5, it returns 0.4636476090008061.   See Also  acos, asin, atan2, cos, sin, tan"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan2","title":"Math.atan2","description":"Summary  Returns the arctangent of the quotient of its arguments.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.atan2(y, x)    Parameters   y, x\u00a0 Numbers.   Description  The atan2 method returns a numeric value between -pi and pi representing the angle theta of an (x,y) point. This is the counterclockwise angle, measured in radians, between the positive X axis, and the point (x,y). Note that the arguments to this function pass the y-coordinate first and the x-coordinate second. atan2 is passed separate x and y arguments, and atan is passed the ratio of those two arguments. Because atan2 is a static method of Math, you always use it as Math.atan2(), rather than as a method of a Math object you created.   Examples   Example: Using Math.atan2  The following function returns the angle of the polar coordinate:   function getAtan2(y,x) {    return Math.atan2(y,x) }  If you pass getAtan2 the values (90,15), it returns 1.4056476493802699; if you pass it the values (15,90), it returns 0.16514867741462683. Math.atan2( \u00b10, -0 ) returns \u00b1PI. Math.atan2( \u00b10, +0 ) returns \u00b10. Math.atan2( \u00b10, -x ) returns \u00b1PI for x < 0. Math.atan2( \u00b10, x ) returns \u00b10 for x > 0. Math.atan2( y, \u00b10 ) returns -PI\/2 for y > 0. Math.atan2( \u00b1y, -Infinity ) returns \u00b1PI for finite y > 0. Math.atan2( \u00b1y, +Infinity ) returns \u00b10 for finite y > 0. Math.atan2( \u00b1Infinity, +x ) returns \u00b1PI\/2 for finite x. Math.atan2( \u00b1Infinity, -Infinity ) returns \u00b13*PI\/4. Math.atan2( \u00b1Infinity, +Infinity ) returns \u00b1PI\/4.   Example: Using Math.atan2  The following function returns the angle of the polar coordinate:   function getAtan2(y,x) {    return Math.atan2(y,x) }  If you pass getAtan2 the values (90,15), it returns 1.4056476493802699; if you pass it the values (15,90), it returns 0.16514867741462683. Math.atan2( \u00b10, -0 ) returns \u00b1PI. Math.atan2( \u00b10, +0 ) returns \u00b10. Math.atan2( \u00b10, -x ) returns \u00b1PI for x < 0. Math.atan2( \u00b10, x ) returns \u00b10 for x > 0. Math.atan2( y, \u00b10 ) returns -PI\/2 for y > 0. Math.atan2( \u00b1y, -Infinity ) returns \u00b1PI for finite y > 0. Math.atan2( \u00b1y, +Infinity ) returns \u00b10 for finite y > 0. Math.atan2( \u00b1Infinity, +x ) returns \u00b1PI\/2 for finite x. Math.atan2( \u00b1Infinity, -Infinity ) returns \u00b13*PI\/4. Math.atan2( \u00b1Infinity, +Infinity ) returns \u00b1PI\/4.   See Also  acos, asin, atan, cos, sin, tan"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/ceil","title":"Math.ceil","description":"Summary  Returns the smallest integer greater than or equal to a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.ceil(x)    Parameters   x\u00a0 A number.   Description  Because ceil is a static method of Math, you always use it as Math.ceil(), rather than as a method of a Math object you created.   Examples   Example: Using Math.ceil  The following function returns the ceil value of the variable x:   function getCeil(x) {    return Math.ceil(x) }  If you pass 45.95 to getCeil, it returns 46; if you pass -45.95, it returns -45.   Example: Using Math.ceil  The following function returns the ceil value of the variable x:   function getCeil(x) {    return Math.ceil(x) }  If you pass 45.95 to getCeil, it returns 46; if you pass -45.95, it returns -45.  See Also floor, round"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/cos","title":"Math.cos","description":"Summary  Returns the cosine of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.cos(x)    Parameters   x\u00a0 A number.   Description  The cos method returns a numeric value between -1 and 1, which represents the cosine of the angle. Because cos is a static method of Math, you always use it as Math.cos(), rather than as a method of a Math object you created.   Examples   Example: Using Math.cos  The following function returns the cosine of the variable x:   function getCos(x) {    return Math.cos(x) }  If x equals 2*Math.PI, getCos returns 1; if x equals Math.PI, the getCos method returns -1.   Example: Using Math.cos  The following function returns the cosine of the variable x:   function getCos(x) {    return Math.cos(x) }  If x equals 2*Math.PI, getCos returns 1; if x equals Math.PI, the getCos method returns -1.   See Also  acos, asin, atan, atan2, sin, tan"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/floor","title":"Math.floor","description":"Summary  Returns the largest integer less than or equal to a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.floor(x)    Parameters   x\u00a0 A number.   Description  Because floor is a static method of Math, you always use it as Math.floor(), rather than as a method of a Math object you created.   Examples   Example: Using Math.floor  The following function returns the floor value of the variable x:   function getFloor(x) {    return Math.floor(x) }  If you pass 45.95 to getFloor, it returns 45; if you pass -45.95, it returns -46.   Example: Using Math.floor  The following function returns the floor value of the variable x:   function getFloor(x) {    return Math.floor(x) }  If you pass 45.95 to getFloor, it returns 45; if you pass -45.95, it returns -46.  See Also ceil,\u00a0round"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/log","title":"Math.log","description":"Summary  Returns the natural logarithm (base E) of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.log(x)    Parameters   x\u00a0 A number.   Description  If the value of number is negative, the return value is always NaN. Because log is a static method of Math, you always use it as Math.log(), rather than as a method of a Math object you created.   Examples   Example: Using Math.log  The following function returns the natural log of the variable x:   function getLog(x) {    return Math.log(x) }  If you pass getLog the value 10, it returns 2.302585092994046; if you pass it the value 0, it returns -Infinity; if you pass it the value -1, it returns NaN because -1 is out of range.   Example: Using Math.log  The following function returns the natural log of the variable x:   function getLog(x) {    return Math.log(x) }  If you pass getLog the value 10, it returns 2.302585092994046; if you pass it the value 0, it returns -Infinity; if you pass it the value -1, it returns NaN because -1 is out of range.   See Also  exp, pow"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/exp","title":"Math.exp","description":"Summary  Returns Ex, where x is the argument, and E is Euler's constant, the base of the natural logarithms.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.exp(x)    Parameters   x\u00a0 A number.   Description  Because exp is a static method of Math, you always use it as Math.exp(), rather than as a method of a Math object you created.   Examples   Example: Using Math.exp  The following function returns the exponential value of the variable x:   function getExp(x) {    return Math.exp(x) }  If you pass getExp the value 1, it returns 2.718281828459045.   Example: Using Math.exp  The following function returns the exponential value of the variable x:   function getExp(x) {    return Math.exp(x) }  If you pass getExp the value 1, it returns 2.718281828459045.   See Also  E, log, pow"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/max","title":"Math.max","description":"Returns the largest of zero or more numbers.    Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  Math.max([value1[,value2[, ...]]])  Parameters  value1, value2, ...\u00a0 Numbers.  Description Because max is a static method of Math, you always use it as Math.max(), rather than as a method of a Math object you created. If no arguments are given, the results is -Infinity If at least one of arguments cannot be converted to a number, the result is NaN. Examples Example: Using Math.max Math.max(10, 20) returns 20. Math.max(-10, -20) returns -10. Math.max(-10, 20) returns 20.  function getMaxOfArray(numArray) {   return Math.max.apply(null, numArray); }  This function uses apply to find the maximum element in a numeric array. getMaxOfArray([1,2,3]) is equivalent to Math.max(1, 2, 3), but you can use getMaxOfArray on programmatically constructed arrays of any size. Example: Using Math.max Math.max(10, 20) returns 20. Math.max(-10, -20) returns -10. Math.max(-10, 20) returns 20.  function getMaxOfArray(numArray) {   return Math.max.apply(null, numArray); }  This function uses apply to find the maximum element in a numeric array. getMaxOfArray([1,2,3]) is equivalent to Math.max(1, 2, 3), but you can use getMaxOfArray on programmatically constructed arrays of any size. See also Math.min"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/pow","title":"Math.pow","description":"Summary  Returns base to the exponent power, that is, baseexponent.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.pow(base,exponent)    Parameters   base\u00a0 The base number.   exponents\u00a0 The exponent to which to raise base.   Description  Because pow is a static method of Math, you always use it as Math.pow(), rather than as a method of a Math object you created.   Examples   Example: Using Math.pow   function raisePower(x,y) {    return Math.pow(x,y) }  If x is 7 and y is 2, raisePower returns 49 (7 to the power of 2).   Example: Using Math.pow   function raisePower(x,y) {    return Math.pow(x,y) }  If x is 7 and y is 2, raisePower returns 49 (7 to the power of 2).   See Also  exp, log"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/min","title":"Math.min","description":"Returns the smallest of zero or more numbers.    Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax Math.min([value1[,value2[, ...]]])  Parameters  value1, value2, ... Numbers.  Description Because min is a static method of Math, you always use it as Math.min(), rather than as a method of a Math object you created. If no arguments are given, the result is Infinity. If at least one of arguments cannot be converted to a number, the result is NaN. Examples Example: Using Math.min This finds the min of x and y and assigns it to z: var x = 10, y = -20; var z = Math.min(x, y);  Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. Example: Using Math.min This finds the min of x and y and assigns it to z: var x = 10, y = -20; var z = Math.min(x, y);  Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. See Also Math.max"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/random","title":"Math.random","description":"Returns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range. The random number generator is seeded from the current time, as in Java.    Method of Math     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax Math.random() Parameters None. Examples Example: Using Math.random Note that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, these ranges, excluding the one for Math.random() itself, aren't exact, and depending on the bounds it's possible in extremely rare cases (on the order of 1 in 262) to calculate the usually-excluded upper bound. \r           \/\/ Returns a random number between 0 (inclusive) and 1 (exclusive) function getRandom() {   return Math.random(); }\r          \r           \/\/ Returns a random number between min and max function getRandomArbitary(min, max) {   return Math.random() * (max - min) + min; }\r          \r           \/\/ Returns a random integer between min and max \/\/ Using Math.round() will give you a non-uniform distribution! function getRandomInt(min, max) {   return Math.floor(Math.random() * (max - min + 1)) + min; }\r          \u00a0 Example: Using Math.random Note that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, these ranges, excluding the one for Math.random() itself, aren't exact, and depending on the bounds it's possible in extremely rare cases (on the order of 1 in 262) to calculate the usually-excluded upper bound. \r           \/\/ Returns a random number between 0 (inclusive) and 1 (exclusive) function getRandom() {   return Math.random(); }\r          \r           \/\/ Returns a random number between min and max function getRandomArbitary(min, max) {   return Math.random() * (max - min) + min; }\r          \r           \/\/ Returns a random integer between min and max \/\/ Using Math.round() will give you a non-uniform distribution! function getRandomInt(min, max) {   return Math.floor(Math.random() * (max - min + 1)) + min; }\r          \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sin","title":"Math.sin","description":"Summary  Returns the sine of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.sin(x)    Parameters   x\u00a0 A number.   Description  The sin method returns a numeric value between -1 and 1, which represents the sine of the argument. Because sin is a static method of Math, you always use it as Math.sin(), rather than as a method of a Math object you created.   Examples   Example: Using Math.sin  The following function returns the sine of the variable x:   function getSine(x) {    return Math.sin(x) }  If you pass getSine the value Math.PI\/2, it returns 1.   Example: Using Math.sin  The following function returns the sine of the variable x:   function getSine(x) {    return Math.sin(x) }  If you pass getSine the value Math.PI\/2, it returns 1.   See Also  acos, asin, atan, atan2, cos, tan"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/round","title":"Math.round","description":"Returns the value of a number rounded to the nearest integer.    Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  Math.round(x)  Parameters  x\u00a0 A number.  Description If the fractional portion of number is .5 or greater, the argument is rounded to the next higher integer. If the fractional portion of number is less than .5, the argument is rounded to the next lower integer. Because round is a static method of Math, you always use it as Math.round(), rather than as a method of a Math object you created. Examples Example: Using Math.round  \/\/Returns the value 20 x=Math.round(20.49)  \/\/Returns the value 21 x=Math.round(20.5)  \/\/Returns the value -20 x=Math.round(-20.5)  \/\/Returns the value -21 x=Math.round(-20.51)  Example: Using Math.round  \/\/Returns the value 20 x=Math.round(20.49)  \/\/Returns the value 21 x=Math.round(20.5)  \/\/Returns the value -20 x=Math.round(-20.5)  \/\/Returns the value -21 x=Math.round(-20.51)  See Also ceil, floor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sqrt","title":"Math.sqrt","description":"Summary  Returns the square root of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.sqrt(x)    Parameters   x\u00a0 A number.   Description  If the value of number is negative, sqrt returns NaN. Because sqrt is a static method of Math, you always use it as Math.sqrt(), rather than as a method of a Math object you created.   Examples   Example: Using Math.sqrt  The following function returns the square root of the variable x:   function getRoot(x) {    return Math.sqrt(x) }  If you pass getRoot the value 9, it returns 3; if you pass it the value 2, it returns 1.414213562373095.   Example: Using Math.sqrt  The following function returns the square root of the variable x:   function getRoot(x) {    return Math.sqrt(x) }  If you pass getRoot the value 9, it returns 3; if you pass it the value 2, it returns 1.414213562373095."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/tan","title":"Math.tan","description":"Summary  Returns the tangent of a number.     Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   Math.tan(x)    Parameters   x\u00a0 A number representing an angle in radians.   Description  The tan method returns a numeric value that represents the tangent of the angle. Because tan is a static method of Math, you always use it as Math.tan(), rather than as a method of a Math object you created.   Examples   Example: Using Math.tan  The following function returns the tangent of the variable x:   function getTan(x) {    return Math.tan(x) }  Because the Math.tan() function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.   function getTanDeg(deg) {    var rad = deg * Math.PI\/180;    return Math.tan(rad) }   Example: Using Math.tan  The following function returns the tangent of the variable x:   function getTan(x) {    return Math.tan(x) }  Because the Math.tan() function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.   function getTanDeg(deg) {    var rad = deg * Math.PI\/180;    return Math.tan(rad) }   See Also  acos, asin, atan, atan2, cos, sin"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getPrototypeOf","title":"Object.getPrototypeOf","description":"Returns the prototype of the specified object.    Method of Object     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.getPrototypeOf(object) Parameters  object The object whose prototype is to be returned.  Description Throws a TypeError exception if the object parameter isn't an Object. Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 5 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Even if Opera does not support Object.getPrototypeOf() yet, it does support the non-standard __proto__ property since Opera 10.50.See also  isPrototypeOf\u00a0 John\u00a0Resig's post on getPrototypeOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Proxy","title":"Proxy","description":"Introduction Proxies are objects for which the programmer has to define the semantics in JavaScript. The default object semantics are implemented in the JavaScript engine, often written in lower-level languages like C++. Proxies let the programmer define most of the behavior of an object in JavaScript. They are said to provide a meta-programming API. Terminology  catch-all mechanism (or \"intercession API\") The technical term for this feature. handler The object that intercepts properties. proxy The object whose properties are being intercepted. proxy factory The object or method that creates intercessive proxies. traps The methods that provide property access. This is analogous to the concept of traps in operating systems.  Proxies can be either be trapping or fixed. Proxy API Catch-alls can be defined only on distinct proxy objects, controlled by a handler object. There are two kinds of proxies: object proxies \r           var proxy = Proxy.create(handler, proto);\r          and function proxies : \r           var proxy = Proxy.createFunction(handler, callTrap, constructTrap);\r          Where:  proto is an optional object representing the proxy\u2019s prototype (defaults to null if none is provided). callTrap is a variable-argument\u00a0function(args) { return any; } that reifies \u201cproxy(args)\u201d. Note: The this-binding of the callTrap function is the this-binding of the call-site. constructTrap is an optional variable-argument\u00a0function(args) { return any-object; } that reifies \u201cnew proxy(args)\u201d. The this-binding of the constructTrap is either undefined (in strict mode) or the global object (in non-strict mode). If no constructTrap is provided, performing\u00a0new proxy(...args) calls the proxy\u2019s callTrap with this bound to a new object delegating to the proxy's prototype. handler is an object that implements the handler API.  Handler API There are two kinds of traps: fundamental and derived traps. If one of the fundamental traps isn't implemented and the proxy is used in a way that expects the fundamental trap to be defined, then an error is thrown. If a derived trap is implemented, then that trap's code is called whenever the corresponding behavior happens on the proxy. If the derived trap is undefined, a default implementation using the fundamental traps is used. In other words: fundamental traps are required, derived traps are optional. Fundamental traps    Emulated JavaScript code Handler method Description   Object.getOwnPropertyDescriptor(proxy, name) getOwnPropertyDescriptor: function(name) -> PropertyDescriptor | undefined Should return a valid property descriptor object, or undefined to indicate that no property with name exists in the emulated object.   Object.getPropertyDescriptor(proxy, name) getPropertyDescriptor: function(name) -> PropertyDescriptor | undefined This function doesn't exist in ECMAScript 5. Like getOwnPropertyDescriptor, but should also search the prototype chain.   Object.getOwnPropertyNames(proxy) getOwnPropertyNames: function() -> Strings Array Return an array of all own (non-inherited) property names of the emulated object.   Object.getPropertyNames(proxy) getPropertyNames: function() -> Strings Array This function doesn't exist in ECMAScript 5. Like getOwnPropertyNames, but should also return non-overridden inherited properties.   Object.defineProperty(proxy,name,pd) defineProperty: function(name, propertyDescriptor) -> any Define a new property whose attributes are determined by the given propertyDescriptor. The return value of this method is ignored.   delete proxy.name delete: function(name) -> boolean Delete the named property from the proxy. The boolean return value of this method should indicate whether or not the name property was successfully deleted.    Object.freeze(proxy) Object.seal(proxy) Object.preventExtensions(proxy)  fix: function() -> PropertyDescriptor map (indexed on property names) | undefined  Should return an object that maps property names to property descriptors. After a call to fix(), the proxy becomes a regular (non-proxy) object with the properties listed in the return value. The handler is no longer used. Moreover, the respective method (freeze(), seal(), or preventExtension()) is immediately called on the fixed object. Note: the fixed object has the same object identity as the proxy object. If fix() returns undefined, the call throws a TypeError exception.     Derived traps Default implementation refers to the code that is called for that trap when the trap isn't explicitly defined. In these functions, this refers to the handler object.    Emulated JavaScript code Handler method Default implementation Description   name in proxy has: function(name) -> boolean  \r           function(name) {    return !!this.getPropertyDescriptor(name); }\r           \u00a0   Object.prototype.hasOwnProperty.call(proxy, name) hasOwn: function(name) -> boolean  \r           function(name) {    return !!this.getOwnPropertyDescriptor(name);  }\r           \u00a0    proxy.name (in the context of \"getting the value\") receiver.name (if receiver inherits from a proxy and does not override name)  get: function(receiver, name) -> any  \r           function(receiver, name) {   var desc = this.getPropertyDescriptor(name);   if (desc === undefined) {     return undefined;   }   if ('value' in desc) {     return desc.value;   } else {     if (desc.get === undefined) {       return undefined;     }     return desc.get.call(receiver);   } }\r           \u00a0receiver is either the proxy or an object that inherits from the proxy.    proxy.name = val (in the context of \"setting the value\") receiver.name = val\u00a0(if receiver inherits from a proxy and does not override\u00a0name)  set: function(receiver, name, val) -> boolean  \r           function(receiver, name, val) {   var desc = this.getOwnPropertyDescriptor(name);   if (desc) {     if ('writable' in desc) {       if (desc.writable) {         desc.value = val;         this.defineProperty(name, desc);         return true;       } else {         return false;       }     } else { \/\/ accessor       if (desc.set) {         desc.set.call(receiver, val);         return true;       } else {         return false;       }     }   }   desc = this.getPropertyDescriptor(name);   if (desc) {     if ('writable' in desc) {       if (desc.writable) {         \/\/ fall through       } else {         return false;       }     } else { \/\/ accessor       if (desc.set) {         desc.set.call(receiver, val);         return true;       } else {         return false;       }     }   }   this.defineProperty(name, {     value: val,      writable: true,      enumerable: true,      configurable: true});   return true; }\r           \u00a0receiver\u00a0is either the proxy or an object that inherits from the proxy.   for(prop in proxy){...} enumerate: function() -> String Array  \r           function() {   return this.getPropertyNames().filter(     function (name) {       return this.getPropertyDescriptor(name).enumerable     }   ); }\r           From the proxy user point of view, properties appear in the for..in loop in the same order as they are in the returned array.   Object.keys(proxy) keys: function() -> String Array  \r           function() {   return this.getOwnPropertyNames().filter(     function (name) {       return this.getOwnPropertyDescriptor(name).enumerable     }   ); }\r           \u00a0    Fundamental traps    Emulated JavaScript code Handler method Description   Object.getOwnPropertyDescriptor(proxy, name) getOwnPropertyDescriptor: function(name) -> PropertyDescriptor | undefined Should return a valid property descriptor object, or undefined to indicate that no property with name exists in the emulated object.   Object.getPropertyDescriptor(proxy, name) getPropertyDescriptor: function(name) -> PropertyDescriptor | undefined This function doesn't exist in ECMAScript 5. Like getOwnPropertyDescriptor, but should also search the prototype chain.   Object.getOwnPropertyNames(proxy) getOwnPropertyNames: function() -> Strings Array Return an array of all own (non-inherited) property names of the emulated object.   Object.getPropertyNames(proxy) getPropertyNames: function() -> Strings Array This function doesn't exist in ECMAScript 5. Like getOwnPropertyNames, but should also return non-overridden inherited properties.   Object.defineProperty(proxy,name,pd) defineProperty: function(name, propertyDescriptor) -> any Define a new property whose attributes are determined by the given propertyDescriptor. The return value of this method is ignored.   delete proxy.name delete: function(name) -> boolean Delete the named property from the proxy. The boolean return value of this method should indicate whether or not the name property was successfully deleted.    Object.freeze(proxy) Object.seal(proxy) Object.preventExtensions(proxy)  fix: function() -> PropertyDescriptor map (indexed on property names) | undefined  Should return an object that maps property names to property descriptors. After a call to fix(), the proxy becomes a regular (non-proxy) object with the properties listed in the return value. The handler is no longer used. Moreover, the respective method (freeze(), seal(), or preventExtension()) is immediately called on the fixed object. Note: the fixed object has the same object identity as the proxy object. If fix() returns undefined, the call throws a TypeError exception.     Derived traps Default implementation refers to the code that is called for that trap when the trap isn't explicitly defined. In these functions, this refers to the handler object.    Emulated JavaScript code Handler method Default implementation Description   name in proxy has: function(name) -> boolean  \r           function(name) {    return !!this.getPropertyDescriptor(name); }\r           \u00a0   Object.prototype.hasOwnProperty.call(proxy, name) hasOwn: function(name) -> boolean  \r           function(name) {    return !!this.getOwnPropertyDescriptor(name);  }\r           \u00a0    proxy.name (in the context of \"getting the value\") receiver.name (if receiver inherits from a proxy and does not override name)  get: function(receiver, name) -> any  \r           function(receiver, name) {   var desc = this.getPropertyDescriptor(name);   if (desc === undefined) {     return undefined;   }   if ('value' in desc) {     return desc.value;   } else {     if (desc.get === undefined) {       return undefined;     }     return desc.get.call(receiver);   } }\r           \u00a0receiver is either the proxy or an object that inherits from the proxy.    proxy.name = val (in the context of \"setting the value\") receiver.name = val\u00a0(if receiver inherits from a proxy and does not override\u00a0name)  set: function(receiver, name, val) -> boolean  \r           function(receiver, name, val) {   var desc = this.getOwnPropertyDescriptor(name);   if (desc) {     if ('writable' in desc) {       if (desc.writable) {         desc.value = val;         this.defineProperty(name, desc);         return true;       } else {         return false;       }     } else { \/\/ accessor       if (desc.set) {         desc.set.call(receiver, val);         return true;       } else {         return false;       }     }   }   desc = this.getPropertyDescriptor(name);   if (desc) {     if ('writable' in desc) {       if (desc.writable) {         \/\/ fall through       } else {         return false;       }     } else { \/\/ accessor       if (desc.set) {         desc.set.call(receiver, val);         return true;       } else {         return false;       }     }   }   this.defineProperty(name, {     value: val,      writable: true,      enumerable: true,      configurable: true});   return true; }\r           \u00a0receiver\u00a0is either the proxy or an object that inherits from the proxy.   for(prop in proxy){...} enumerate: function() -> String Array  \r           function() {   return this.getPropertyNames().filter(     function (name) {       return this.getPropertyDescriptor(name).enumerable     }   ); }\r           From the proxy user point of view, properties appear in the for..in loop in the same order as they are in the returned array.   Object.keys(proxy) keys: function() -> String Array  \r           function() {   return this.getOwnPropertyNames().filter(     function (name) {       return this.getOwnPropertyDescriptor(name).enumerable     }   ); }\r           \u00a0    Invariants Even though proxies provide a lot of power to users, some operations that are not trapped in order to keep the language consistency:  The triple equal (===) operator isn't trapped. p1 === p2 if and only if p1 and p2 refer to the same proxy. Fixing a proxy does not alter its object identity (the object \u201cgenerated\u201d by the handler during fixing does not have its own object identity, it retains the object identity of the proxy, upholding the illusion that the proxy \u201cbecomes\u201d the object). Object.getPrototypeOf(proxy) returns the prototype proxy has been initialized with for an object proxy and Function.prototype for a function proxy. typeof  typeof anObjectProxy === \u201cobject\u201d typeof aFunctionProxy === \u201cfunction\u201d   instanceof  anObjectProxy instanceof C if and only if the prototype anObjectProxy has been initialized with equals or inherits from C.prototype aFunctionProxy instanceof Function === true    Common mistakes and misunderstanding When starting using proxies, there are often a few beginners mistakes and misunderstandings:  Not implementing all traps. Proxies are, by default, \"semanticless\" objects. If a trap isn't implemented, then if it's a derived trap, the default implementation is used. However if a fundamental trap is unimplemented, then a call to this trap will throw a TypeError. To make sure no error is thrown when your object is used, you have to implement at least all fundamental traps. Unwanted recursion. Be careful of how you use the receiver argument in 'get' and 'set' traps. \r           var p = Proxy.create({get: function(receiver, name) {   print(receiver); \/\/ looks for receiver's toString method. receiver turns out to be the proxy, so calling print results in calling the get trap.   return \"something\"; } });  var q = p.azerty; \/\/ infinite loop\r           The receiver argument in 'get' and 'set' traps may not be the proxy itself: \r           var proxy;  var handler = {     has: function (name) {         return name == 'foo';     },     get: function (rcvr, name) {         if (name != 'foo')             return undefined;         print(proxy !== rcvr);         return \"bye\";     }, };  proxy = Proxy.create(handler);  var c = Object.create(proxy);  print(c.foo); \/\/ prints: 'true' (from \"proxy !== rcvr\") and 'bye' (from \"c.foo\"). \/\/ In this example, the get trap rcvr argument is the c object while proxy is its prototype\r            Examples Very simple example A trap is called almost each time something happens to your proxy (that is used like an object). Here is an example: \r           var incompleteHandler = {get:function(myProxy, name){                                alert('Property ' + name + ' accessed.');                                 return 1;                              }                         }; var p = Proxy.create(incompleteHandler); var q = p.blabla; \/\/ alerts 'Property blabla accessed' and 1 is assigned to q p.azerty = \"Trying to set a property\"; \/\/ throws an error since neither the set trap or the fundamental trap used in the set trap are implemented\r          No-op forwarding proxy In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it. \r           function handlerMaker(obj) {   return {     \/\/ Fundamental traps     getOwnPropertyDescriptor: function(name) {       var desc = Object.getOwnPropertyDescriptor(obj, name);       \/\/ a trapping proxy's properties must always be configurable       if (desc !== undefined) { desc.configurable = true; }       return desc;     },     getPropertyDescriptor:  function(name) {       var desc = Object.getPropertyDescriptor(obj, name); \/\/ not in ES5       \/\/ a trapping proxy's properties must always be configurable       if (desc !== undefined) { desc.configurable = true; }       return desc;     },     getOwnPropertyNames: function() {       return Object.getOwnPropertyNames(obj);     },     getPropertyNames: function() {       return Object.getPropertyNames(obj);                \/\/ not in ES5     },     defineProperty: function(name, desc) {       Object.defineProperty(obj, name, desc);     },     delete:       function(name) { return delete obj[name]; },        fix:          function() {       if (Object.isFrozen(obj)) {         return Object.getOwnPropertyNames(obj).map(function(name) {           return Object.getOwnPropertyDescriptor(obj, name);         });       }       \/\/ As long as obj is not frozen, the proxy won't allow itself to be fixed       return undefined; \/\/ will cause a TypeError to be thrown     },         \/\/ derived traps     has:          function(name) { return name in obj; },     hasOwn:       function(name) { return Object.prototype.hasOwnProperty.call(obj, name); },     get:          function(receiver, name) { return obj[name]; },     set:          function(receiver, name, val) { obj[name] = val; return true; }, \/\/ bad behavior when set fails in non-strict mode     enumerate:    function() {       var result = [];       for (name in obj) { result.push(name); };       return result;     },     keys: function() { return Object.keys(obj) }   }; }  \/\/ ...  var o = Object.create({}); var proxy = Proxy.create(handlerMaker(o));  proxy.blabla = 12; \/\/ Thanks to the forwarding, o now has a 'blabla' property which value is 12 o.blabla++; \/\/ just incrementing o.blabla  alert(proxy.blabla); \/\/ alerts 13: the getting operation is forwarded to o which returns 13.\r          Very simple example A trap is called almost each time something happens to your proxy (that is used like an object). Here is an example: \r           var incompleteHandler = {get:function(myProxy, name){                                alert('Property ' + name + ' accessed.');                                 return 1;                              }                         }; var p = Proxy.create(incompleteHandler); var q = p.blabla; \/\/ alerts 'Property blabla accessed' and 1 is assigned to q p.azerty = \"Trying to set a property\"; \/\/ throws an error since neither the set trap or the fundamental trap used in the set trap are implemented\r          No-op forwarding proxy In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it. \r           function handlerMaker(obj) {   return {     \/\/ Fundamental traps     getOwnPropertyDescriptor: function(name) {       var desc = Object.getOwnPropertyDescriptor(obj, name);       \/\/ a trapping proxy's properties must always be configurable       if (desc !== undefined) { desc.configurable = true; }       return desc;     },     getPropertyDescriptor:  function(name) {       var desc = Object.getPropertyDescriptor(obj, name); \/\/ not in ES5       \/\/ a trapping proxy's properties must always be configurable       if (desc !== undefined) { desc.configurable = true; }       return desc;     },     getOwnPropertyNames: function() {       return Object.getOwnPropertyNames(obj);     },     getPropertyNames: function() {       return Object.getPropertyNames(obj);                \/\/ not in ES5     },     defineProperty: function(name, desc) {       Object.defineProperty(obj, name, desc);     },     delete:       function(name) { return delete obj[name]; },        fix:          function() {       if (Object.isFrozen(obj)) {         return Object.getOwnPropertyNames(obj).map(function(name) {           return Object.getOwnPropertyDescriptor(obj, name);         });       }       \/\/ As long as obj is not frozen, the proxy won't allow itself to be fixed       return undefined; \/\/ will cause a TypeError to be thrown     },         \/\/ derived traps     has:          function(name) { return name in obj; },     hasOwn:       function(name) { return Object.prototype.hasOwnProperty.call(obj, name); },     get:          function(receiver, name) { return obj[name]; },     set:          function(receiver, name, val) { obj[name] = val; return true; }, \/\/ bad behavior when set fails in non-strict mode     enumerate:    function() {       var result = [];       for (name in obj) { result.push(name); };       return result;     },     keys: function() { return Object.keys(obj) }   }; }  \/\/ ...  var o = Object.create({}); var proxy = Proxy.create(handlerMaker(o));  proxy.blabla = 12; \/\/ Thanks to the forwarding, o now has a 'blabla' property which value is 12 o.blabla++; \/\/ just incrementing o.blabla  alert(proxy.blabla); \/\/ alerts 13: the getting operation is forwarded to o which returns 13.\r          See also  \"Proxies are awesome\" Brendan Eich presentation at JSConf (slides) ECMAScript Harmony Proxy proposal page and ECMAScript Harmony proxy semantics page Tutorial on proxies  Licensing note Some content (text, examples) in this page has been copied or adapted from the ECMAScript wiki which content is licensed CC 2.0 BY-NC-SA"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/DataView","title":"DataView","description":"Constructors    DataView DataView(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long byteLength);   Method overview Read    byte getInt8(unsigned long byteOffset);   unsigned byte getUint8(unsigned long byteOffset);   short getInt16(unsigned long byteOffset, optional boolean littleEndian);   unsigned short getUint16(unsigned long byteOffset, optional boolean littleEndian);   long getInt32(unsigned long byteOffset, optional boolean littleEndian);   unsigned long getUint32(unsigned long byteOffset, optional boolean littleEndian);   float getFloat32(unsigned long byteOffset, optional boolean littleEndian);   double getFloat64(unsigned long byteOffset, optional boolean littleEndian);    Write    void setInt8(unsigned long byteOffset, byte value);   void setUint8(unsigned long byteOffset, unsigned byte value);   void setInt16(unsigned long byteOffset, short value, optional boolean littleEndian);   void setUint16(unsigned long byteOffset, unsigned short value, optional boolean littleEndian);   void setInt32(unsigned long byteOffset, long value, optional boolean littleEndian);   void setUint32(unsigned long byteOffset, unsigned long value, optional boolean littleEndian);   void setFloat32(unsigned long byteOffset, float value, optional boolean littleEndian);   void setFloat64(unsigned long byteOffset, double value, optional boolean littleEndian);    Read    byte getInt8(unsigned long byteOffset);   unsigned byte getUint8(unsigned long byteOffset);   short getInt16(unsigned long byteOffset, optional boolean littleEndian);   unsigned short getUint16(unsigned long byteOffset, optional boolean littleEndian);   long getInt32(unsigned long byteOffset, optional boolean littleEndian);   unsigned long getUint32(unsigned long byteOffset, optional boolean littleEndian);   float getFloat32(unsigned long byteOffset, optional boolean littleEndian);   double getFloat64(unsigned long byteOffset, optional boolean littleEndian);    Write    void setInt8(unsigned long byteOffset, byte value);   void setUint8(unsigned long byteOffset, unsigned byte value);   void setInt16(unsigned long byteOffset, short value, optional boolean littleEndian);   void setUint16(unsigned long byteOffset, unsigned short value, optional boolean littleEndian);   void setInt32(unsigned long byteOffset, long value, optional boolean littleEndian);   void setUint32(unsigned long byteOffset, unsigned long value, optional boolean littleEndian);   void setFloat32(unsigned long byteOffset, float value, optional boolean littleEndian);   void setFloat64(unsigned long byteOffset, double value, optional boolean littleEndian);    Constructor Returns a new DataView object using the passed ArrayBuffer for its storage.  DataView DataView( \u00a0 ArrayBuffer buffer, \u00a0 optional unsigned long byteOffset, \u00a0 optional unsigned long byteLength );  Parameters  buffer An existing ArrayBuffer to use as the storage for the new DataView object. byteOffset  Optional  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte. byteLength  Optional  The number of elements in the byte array. If unspecified, length of the view will match the buffer's length.  Return value A new DataView object representing the specified data buffer. Exceptions thrown  INDEX_SIZE_ERR The byteOffset and byteLength result in the specified view extending past the end of the buffer.  Parameters  buffer An existing ArrayBuffer to use as the storage for the new DataView object. byteOffset  Optional  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte. byteLength  Optional  The number of elements in the byte array. If unspecified, length of the view will match the buffer's length.  Return value A new DataView object representing the specified data buffer. Exceptions thrown  INDEX_SIZE_ERR The byteOffset and byteLength result in the specified view extending past the end of the buffer.  Methods getInt8() Gets a signed 8-bit integer at the specified byte offset from the start of the view.  byte getInt8(   unsigned long byteOffset );  Parameters  offset The offset, in byte, from the start of the view where to read the data.  Exceptions thrown  INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view  getUint8() Gets an unsigned 8-bit integer at the specified byte offset from the start of the view.  byte getUint8(   unsigned long byteOffset );  Parameters  offset The offset, in byte, from the start of the view where to read the data.   INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view  getInt8() Gets a signed 8-bit integer at the specified byte offset from the start of the view.  byte getInt8(   unsigned long byteOffset );  Parameters  offset The offset, in byte, from the start of the view where to read the data.  Exceptions thrown  INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view  Parameters  offset The offset, in byte, from the start of the view where to read the data.  Exceptions thrown  INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view  getUint8() Gets an unsigned 8-bit integer at the specified byte offset from the start of the view.  byte getUint8(   unsigned long byteOffset );  Parameters  offset The offset, in byte, from the start of the view where to read the data.   INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view  Parameters  offset The offset, in byte, from the start of the view where to read the data.   INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view  See also  DataView Specification Typed Array Specification JavaScript typed arrays jDataView: a Javascript library that provides the DataView API to all browsers."}]
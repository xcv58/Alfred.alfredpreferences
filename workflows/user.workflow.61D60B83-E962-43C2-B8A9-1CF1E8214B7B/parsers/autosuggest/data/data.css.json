[{"url":"https:\/\/developer.mozilla.org\/en\/CSS","title":"CSS","description":"Documentation about CSS  CSS Reference Describes every properties, types, values, dimensions, selectors, pseudo-classes, pseudo-elements and @-rules of CSS (and CSS extensions specific to Mozilla). CSS Key Concepts Introduces fundamentals like specificity and inheritance, the box model and margin collapsing, stacking and block-formatting contexts, or the initial, computed, used and actual values. Using CSS transforms Presents the 2D operations that can be applied to each element in order to rotate, skew, translate it. Using CSS\u00a0transitions Explains how to change the aspect of an element using a smooth animation between the initial and final state. Using CSS animations Describes how to define animations of an element but also how to detect in Javascript if the browser supports it. Using CSS gradients Explains how to define gradients, images composed of smooth variations of colors. Using CSS multi-column layouts Presents how to make multi-column page settings using the CSS Level 3 multi-column layout. Using CSS media queries Presents how to select style sheets based on details of the rendering device, like its viewport size, its resolution or if it has a touchscreen. Using CSS counters Explains how to use automatic counters and numbering, essentially used as list counters. Fonts and Typography Informs about managing your fonts using @font-face  and the WOFF font format. Consistent List Indentation Trying to change the indentation of lists with CSS is trickier than it looks, but only because CSS-conformant browsers took different paths to default indentation. Find out how to get them all in line. Using dynamic styling information How to obtain information on and manipulate styling via the DOM  View All...Getting help from the community You need help on a CSS-related problem and can't find the solution in the documentation?  Consult the dedicated Mozilla forum:   as a mailing list as a newsgroup as a Google Group as a Web feed   Ask your question on the Mozilla IRC channel: #css Ask your question on the CSS-Discuss site and list  Don't forget about the netiquette... Tools easing CSS development  The W3C CSS Validation Service checks if a given CSS is valid. It is an invaluable debugging tool.   Firefox' Firebug extension, a popular extension of that navigator that allows to edit live CSS on watched sites. Very practical to test some changes, though this extension does much more. Firefox' Web Developer extension also allows to watch and edit live CSS on watched sites. Simpler than Firebug, though less powerful. Firefox' EditCSS extension allows editing CSS in the sidebar.  View All... Related Topics  Mozilla Learn CSS resources.   Open Web languages on which CSS is often applied: HTML, SVG, XHTML, XML. Mozilla technologies which make extensive use of CSS: XUL, Firefox and Thunderbird extensions and themes."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation","title":"animation","description":"The animation property is a shorthand property for animation-name , animation-duration , animation-timing-function , animation-delay , animation-iteration-count  and animation-direction . A list of CSS properties that can be animated is available; it's worth noting that these are the same properties supported by CSS transitions.  Initial value : 0 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax animation:  [ <animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> ||               <animation-iteration-count> || <animation-direction>]              [, [<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> ||               <animation-iteration-count> || <animation-direction>] ]*    Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10 -ms -- 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? 5.0 (5.0)  -moz ? -- iOS 2.0 -webkit     Specifications   CSS Animations Module Level 3: animationWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes   See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_Reference\/Mozilla_Extensions","title":"Mozilla CSS Extensions","description":"Properties A  -moz-appearance   B  -moz-background-clip  -moz-background-inline-policy  -moz-background-origin  -moz-background-size   Requires Gecko 1.9.2  -moz-binding  -moz-border-bottom-colors  -moz-border-left-colors  -moz-border-right-colors  -moz-border-top-colors  -moz-border-end  -moz-border-end-color  -moz-border-end-style  -moz-border-end-width  -moz-border-image   Requires Gecko 1.9.1  -moz-border-start  -moz-border-start-color  -moz-border-start-style  -moz-border-start-width  -moz-box-align  -moz-box-direction  -moz-box-flex  -moz-box-flexgroup  -moz-box-ordinal-group  -moz-box-orient  -moz-box-pack  -moz-box-sizing   C D E  -moz-column-count  -moz-column-gap  -moz-column-width  -moz-column-rule   Requires Gecko 1.9.1  -moz-column-rule-width   Requires Gecko 1.9.1  -moz-column-rule-style   Requires Gecko 1.9.1  -moz-column-rule-color  Requires Gecko 1.9.1   F G  -moz-filter  -moz-float-edge  -moz-font-feature-settings   Requires Gecko 2.0  -moz-font-language-override   Requires Gecko 2.0  -moz-force-broken-image-icon   I J K L  -moz-image-region   M N  -moz-margin-end  -moz-margin-start  -moz-mask   O  -moz-opacity    Obsolete -moz-orient  -moz-outline    Obsolete -moz-outline-color    Obsolete -moz-outline-offset    Obsolete -moz-outline-radius  -moz-outline-radius-bottomleft  -moz-outline-radius-bottomright  -moz-outline-radius-topleft  -moz-outline-radius-topright  -moz-outline-style    Obsolete -moz-outline-width    Obsolete  P Q R  -moz-padding-end  -moz-padding-start   S  -moz-stack-sizing   Requires Gecko 1.9.1   T  -moz-tab-size   Requires Gecko 2.0  -moz-text-blink   Requires Gecko 6.0  -moz-text-decoration-color   Requires Gecko 6.0  -moz-text-decoration-line   Requires Gecko 6.0  -moz-text-decoration-style   Requires Gecko 6.0  -moz-transform   Requires Gecko 1.9.1  -moz-transform-origin   Requires Gecko 1.9.1  -moz-transition   Requires Gecko 2.0  -moz-transition-delay   Requires Gecko 2.0  -moz-transition-duration   Requires Gecko 2.0  -moz-transition-property   Requires Gecko 2.0  -moz-transition-timing-function   Requires Gecko 2.0   U V  -moz-user-focus  -moz-user-input  -moz-user-modify  -moz-user-select   W X Y Z  -moz-window-shadow   Requires Gecko 1.9.1    Values For all properties  -moz-initial   -moz-appearance   button button-arrow-down button-arrow-next button-arrow-previous button-arrow-up button-bevel checkbox checkbox-container checkbox-label checkmenuitem dialog groupbox listbox menuarrow menucheckbox menuimage menuitem menuitemtext menulist menulist-button menulist-text menulist-textfield menupopup menuradio menuseparator -moz-mac-unified-toolbar  New in Firefox 3.5  -moz-win-borderless-glass -moz-win-browsertabbar-toolbox  New in Firefox 3  -moz-win-communications-toolbox  New in Firefox 3  -moz-win-glass -moz-win-media-toolbox  New in Firefox 3  -moz-window-button-box -moz-window-button-box-maximized -moz-window-button-close -moz-window-button-maximize -moz-window-button-minimize -moz-window-button-restore -moz-window-titlebar -moz-window-titlebar-maximized progressbar progresschunk radio radio-container radio-label radiomenuitem resizer resizerpanel scale-horizontal scalethumb-horizontal scalethumb-vertical scale-vertical scrollbarbutton-down scrollbarbutton-left scrollbarbutton-right scrollbarbutton-up scrollbar-small scrollbarthumb-horizontal scrollbarthumb-vertical scrollbartrack-horizontal scrollbartrack-vertical separator spinner spinner-downbutton spinner-textfield spinner-upbutton statusbar statusbarpanel tab tabpanels tab-scroll-arrow-back tab-scroll-arrow-forward textfield textfield-multiline toolbar toolbarbutton-dropdown toolbox tooltip treeheadercell treeheadersortarrow treeitem treetwisty treetwistyopen treeview window  background-image   Gradients  Requires Gecko 1.9.2   -moz-linear-gradient  -moz-radial-gradient    Elements  Requires Gecko 2.0   -moz-element    Sub-images  -moz-image-rect   Requires Gecko 2.0     border-color   -moz-use-text-color   Deprecated   Use currentColor   border-style \u00a0 and\u00a0 outline-style   -moz-bg-inset | -moz-bg-outset | -moz-bg-solid    Obsolete\u00a0 dropped in Gecko 1.9 (Firefox 3.0)  <color> \u00a0 keywords  -moz-activehyperlinktext -moz-hyperlinktext -moz-visitedhyperlinktext -moz-buttondefault -moz-buttonhoverface -moz-buttonhovertext -moz-default-background-color  Requires Gecko 5.0  -moz-default-color  Requires Gecko 5.0  -moz-cellhighlight -moz-cellhighlighttext -moz-field -moz-fieldtext -moz-dialog -moz-dialogtext -moz-dragtargetzone -moz-mac-accentdarkestshadow -moz-mac-accentdarkshadow -moz-mac-accentface -moz-mac-accentlightesthighlight -moz-mac-accentlightshadow -moz-mac-accentregularhighlight -moz-mac-accentregularshadow -moz-mac-chrome-active  Requires Gecko 1.9.1  -moz-mac-chrome-inactive  Requires Gecko 1.9.1  -moz-mac-focusring -moz-mac-menuselect -moz-mac-menushadow -moz-mac-menutextselect -moz-menuhover -moz-menuhovertext -moz-win-communicationstext  New in Firefox 3  -moz-win-mediatext  Requires Gecko 1.9  -moz-nativehyperlinktext  Requires Gecko 1.9.1   cursor   -moz-alias    Obsolete use alias  -moz-cell    Obsolete use cell  -moz-context-menu    Obsolete use context-menu  -moz-copy    Obsolete use copy  -moz-grab  -moz-grabbing  -moz-spinning    Obsolete use progress  -moz-zoom-in  -moz-zoom-out   display   -moz-box -moz-inline-block   Obsolete -moz-inline-box -moz-inline-grid -moz-inline-stack -moz-inline-table   Obsolete -moz-grid -moz-grid-group -moz-grid-line -moz-groupbox -moz-deck -moz-popup -moz-stack -moz-marker  empty-cells   -moz-show-background (default value in quirks mode)  font   -moz-button -moz-info -moz-desktop -moz-dialog (also a color) -moz-document -moz-workspace -moz-window -moz-list -moz-pull-down-menu -moz-field (also a color)  font-family   -moz-fixed  image-rendering   -moz-crisp-edges   Requires Gecko 1.9.2    <length>   -moz-calc   Requires Gecko 2.0   list-style-type   -moz-arabic-indic -moz-bengali -moz-cjk-earthly-branch -moz-cjk-heavenly-stem -moz-devanagari -moz-ethiopic-halehame -moz-ethiopic-halehame-am -moz-ethiopic-halehame-ti-er -moz-ethiopic-halehame-ti-et -moz-ethiopic-numeric -moz-gujarati -moz-gurmukhi -moz-hangul -moz-hangul-consonant -moz-japanese-formal -moz-japanese-informal -moz-kannada -moz-khmer -moz-lao -moz-malayalam -moz-myanmar -moz-oriya -moz-persian -moz-simp-chinese-formal -moz-simp-chinese-informal -moz-tamil -moz-telugu -moz-thai -moz-trad-chinese-formal -moz-trad-chinese-informal -moz-urdu  overflow   -moz-scrollbars-none    Obsolete -moz-scrollbars-horizontal    Deprecated   -moz-scrollbars-vertical    Deprecated   -moz-hidden-unscrollable   text-align   -moz-center  -moz-left  -moz-right   text-decoration   -moz-anchor-decoration  -moz-user-select   -moz-all -moz-none  width ,\u00a0 min-width \u00a0 and\u00a0 max-width   -moz-min-content  New in Firefox 3  -moz-fit-content  New in Firefox 3  -moz-max-content  New in Firefox 3  -moz-available  New in Firefox 3   For all properties  -moz-initial   -moz-appearance   button button-arrow-down button-arrow-next button-arrow-previous button-arrow-up button-bevel checkbox checkbox-container checkbox-label checkmenuitem dialog groupbox listbox menuarrow menucheckbox menuimage menuitem menuitemtext menulist menulist-button menulist-text menulist-textfield menupopup menuradio menuseparator -moz-mac-unified-toolbar  New in Firefox 3.5  -moz-win-borderless-glass -moz-win-browsertabbar-toolbox  New in Firefox 3  -moz-win-communications-toolbox  New in Firefox 3  -moz-win-glass -moz-win-media-toolbox  New in Firefox 3  -moz-window-button-box -moz-window-button-box-maximized -moz-window-button-close -moz-window-button-maximize -moz-window-button-minimize -moz-window-button-restore -moz-window-titlebar -moz-window-titlebar-maximized progressbar progresschunk radio radio-container radio-label radiomenuitem resizer resizerpanel scale-horizontal scalethumb-horizontal scalethumb-vertical scale-vertical scrollbarbutton-down scrollbarbutton-left scrollbarbutton-right scrollbarbutton-up scrollbar-small scrollbarthumb-horizontal scrollbarthumb-vertical scrollbartrack-horizontal scrollbartrack-vertical separator spinner spinner-downbutton spinner-textfield spinner-upbutton statusbar statusbarpanel tab tabpanels tab-scroll-arrow-back tab-scroll-arrow-forward textfield textfield-multiline toolbar toolbarbutton-dropdown toolbox tooltip treeheadercell treeheadersortarrow treeitem treetwisty treetwistyopen treeview window  background-image   Gradients  Requires Gecko 1.9.2   -moz-linear-gradient  -moz-radial-gradient    Elements  Requires Gecko 2.0   -moz-element    Sub-images  -moz-image-rect   Requires Gecko 2.0     border-color   -moz-use-text-color   Deprecated   Use currentColor   border-style \u00a0 and\u00a0 outline-style   -moz-bg-inset | -moz-bg-outset | -moz-bg-solid    Obsolete\u00a0 dropped in Gecko 1.9 (Firefox 3.0)  <color> \u00a0 keywords  -moz-activehyperlinktext -moz-hyperlinktext -moz-visitedhyperlinktext -moz-buttondefault -moz-buttonhoverface -moz-buttonhovertext -moz-default-background-color  Requires Gecko 5.0  -moz-default-color  Requires Gecko 5.0  -moz-cellhighlight -moz-cellhighlighttext -moz-field -moz-fieldtext -moz-dialog -moz-dialogtext -moz-dragtargetzone -moz-mac-accentdarkestshadow -moz-mac-accentdarkshadow -moz-mac-accentface -moz-mac-accentlightesthighlight -moz-mac-accentlightshadow -moz-mac-accentregularhighlight -moz-mac-accentregularshadow -moz-mac-chrome-active  Requires Gecko 1.9.1  -moz-mac-chrome-inactive  Requires Gecko 1.9.1  -moz-mac-focusring -moz-mac-menuselect -moz-mac-menushadow -moz-mac-menutextselect -moz-menuhover -moz-menuhovertext -moz-win-communicationstext  New in Firefox 3  -moz-win-mediatext  Requires Gecko 1.9  -moz-nativehyperlinktext  Requires Gecko 1.9.1   cursor   -moz-alias    Obsolete use alias  -moz-cell    Obsolete use cell  -moz-context-menu    Obsolete use context-menu  -moz-copy    Obsolete use copy  -moz-grab  -moz-grabbing  -moz-spinning    Obsolete use progress  -moz-zoom-in  -moz-zoom-out   display   -moz-box -moz-inline-block   Obsolete -moz-inline-box -moz-inline-grid -moz-inline-stack -moz-inline-table   Obsolete -moz-grid -moz-grid-group -moz-grid-line -moz-groupbox -moz-deck -moz-popup -moz-stack -moz-marker  empty-cells   -moz-show-background (default value in quirks mode)  font   -moz-button -moz-info -moz-desktop -moz-dialog (also a color) -moz-document -moz-workspace -moz-window -moz-list -moz-pull-down-menu -moz-field (also a color)  font-family   -moz-fixed  image-rendering   -moz-crisp-edges   Requires Gecko 1.9.2    <length>   -moz-calc   Requires Gecko 2.0   list-style-type   -moz-arabic-indic -moz-bengali -moz-cjk-earthly-branch -moz-cjk-heavenly-stem -moz-devanagari -moz-ethiopic-halehame -moz-ethiopic-halehame-am -moz-ethiopic-halehame-ti-er -moz-ethiopic-halehame-ti-et -moz-ethiopic-numeric -moz-gujarati -moz-gurmukhi -moz-hangul -moz-hangul-consonant -moz-japanese-formal -moz-japanese-informal -moz-kannada -moz-khmer -moz-lao -moz-malayalam -moz-myanmar -moz-oriya -moz-persian -moz-simp-chinese-formal -moz-simp-chinese-informal -moz-tamil -moz-telugu -moz-thai -moz-trad-chinese-formal -moz-trad-chinese-informal -moz-urdu  overflow   -moz-scrollbars-none    Obsolete -moz-scrollbars-horizontal    Deprecated   -moz-scrollbars-vertical    Deprecated   -moz-hidden-unscrollable   text-align   -moz-center  -moz-left  -moz-right   text-decoration   -moz-anchor-decoration  -moz-user-select   -moz-all -moz-none  width ,\u00a0 min-width \u00a0 and\u00a0 max-width   -moz-min-content  New in Firefox 3  -moz-fit-content  New in Firefox 3  -moz-max-content  New in Firefox 3  -moz-available  New in Firefox 3   Pseudo-elements and pseudo-classes  ::-moz-anonymous-block   ::-moz-anonymous-positioned-block  :-moz-any   Requires Gecko 2.0  :-moz-any-link  (matches\u00a0:link and\u00a0:visited) :-moz-bound-element  :-moz-broken   Requires Gecko 1.9  ::-moz-canvas   ::-moz-cell-content   :-moz-drag-over  :-moz-first-node  ::-moz-focus-inner  ::-moz-focus-outer  :-moz-focusring   Requires Gecko 2.0  :-moz-full-screen   Requires Gecko 9.0  :-moz-full-screen-ancestor   Requires Gecko 10.0  :-moz-handler-blocked   Requires Gecko 1.9.1  :-moz-handler-crashed   Requires Gecko 2.0  :-moz-handler-disabled   Requires Gecko 1.9.1  ::-moz-inline-table   :-moz-last-node  :-moz-list-bullet  :-moz-list-number  :-moz-loading   Requires Gecko 1.9  :-moz-locale-dir(ltr)   Requires Gecko 1.9.2  :-moz-locale-dir(rtl)   Requires Gecko 1.9.2  :-moz-lwtheme   Requires Gecko 1.9.2  :-moz-lwtheme-brighttext   Requires Gecko 1.9.2  :-moz-lwtheme-darktext   Requires Gecko 1.9.2  :-moz-math-stretchy  :-moz-math-anonymous  :-moz-only-whitespace  ::-moz-page   ::-moz-page-sequence   ::-moz-pagebreak   ::-moz-pagecontent   :-moz-placeholder   Requires Gecko 1.9  ::-moz-selection  ::-moz-scrolled-canvas   ::-moz-scrolled-content   ::-moz-scrolled-page-sequence   :-moz-suppressed   Requires Gecko 1.9  :-moz-submit-invalid   Requires Gecko 2.0  ::-moz-svg-foreign-content   :-moz-system-metric(images-in-menus)   Requires Gecko 1.9  :-moz-system-metric(mac-graphite-theme)   Requires Gecko 1.9.1  :-moz-system-metric(scrollbar-end-backward)   Requires Gecko 1.9  :-moz-system-metric(scrollbar-end-forward)   Requires Gecko 1.9  :-moz-system-metric(scrollbar-start-backward)   Requires Gecko 1.9  :-moz-system-metric(scrollbar-start-forward)   New in Firefox 3  :-moz-system-metric(scrollbar-thumb-proportional)   Requires Gecko 1.9  :-moz-system-metric(touch-enabled)   Requires Gecko 1.9.2  :-moz-system-metric(windows-default-theme)   New in Firefox 3  ::-moz-table   ::-moz-table-cell   ::-moz-table-column   ::-moz-table-column-group   ::-moz-table-outer   ::-moz-table-row   ::-moz-table-row-group   :-moz-tree-checkbox  :-moz-tree-cell  :-moz-tree-cell-text  :-moz-tree-cell-text(hover)   Requires Gecko 1.9  :-moz-tree-column  :-moz-tree-drop-feedback  :-moz-tree-image  :-moz-tree-indentation  :-moz-tree-line  :-moz-tree-progressmeter  :-moz-tree-row  :-moz-tree-row(hover)   Requires Gecko 1.9  :-moz-tree-separator  :-moz-tree-twisty  :-moz-ui-invalid  Requires Gecko 2.0  :-moz-ui-valid  Requires Gecko 2.0  :-moz-user-disabled   Requires Gecko 1.9  ::-moz-viewport   ::-moz-viewport-scroll   :-moz-window-inactive   Requires Gecko 2.0  ::-moz-xul-anonymous-block   At-rules  @-moz-document   Media Queries  -moz-images-in-menus   Requires Gecko 1.9.2  -moz-mac-graphite-theme   Requires Gecko 1.9.2  -moz-maemo-classic   Requires Gecko 1.9.2  -moz-device-pixel-ratio   Requires Gecko 2.0  -moz-scrollbar-end-backward   Requires Gecko 1.9.2  -moz-scrollbar-end-forward   Requires Gecko 1.9.2  -moz-scrollbar-start-backward   Requires Gecko 1.9.2  -moz-scrollbar-start-forward   Requires Gecko 1.9.2  -moz-scrollbar-thumb-proportional   Requires Gecko 1.9.2  -moz-touch-enabled   Requires Gecko 1.9.2  -moz-windows-classic   Requires Gecko 1.9.2  -moz-windows-compositor   Requires Gecko 1.9.2  -moz-windows-default-theme   Requires Gecko 1.9.2  -moz-windows-theme   Requires Gecko 2.0   Others  -moz-math-columnline  -moz-math-firstcolumn  -moz-math-firstrow  -moz-math-font-size  -moz-math-font-style  -moz-math-lastcolumn  -moz-math-lastrow  -moz-math-rowline  -moz-alt-content    bug 11011"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-delay","title":"animation-delay","description":"The animation-delay property specifies when the animation should start. This lets the animation sequence begin some time after it's applied to an element. A value of 0 (the default) indicates that the animation should begin as soon as it's applied. Otherwise, the value specifies an offset from the moment the animation is applied to the element; animation will begin that amount of time after being applied. Specifying a negative value for the animation delay causes the animation to begin executing immediately. However, it will appear to have begun executing partway through its cycle. For example, if you specify -1s as the animation delay time, the animation will begin immediately but will start 1 second into the animation sequence. If you specify a negative value for the animation delay, but the starting value is implicit, the starting value is taken from the moment the animation is applied to the element. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : 0 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-delay: <time> [, <time>]*  Values  <time> The time offset from the time at which the animation is applied to the element at which the animation should begin. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed. Values  <time> The time offset from the time at which the animation is applied to the element at which the animation should begin. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed. Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-delayWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-direction","title":"animation-direction","description":"The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : normal Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-direction: normal | alternate [, normal | alternate]*  Values  normal The animation should play forward each cycle. In other words, each time the animation cycles, the animation will reset to the beginning state and start over again. This is the default animation direction setting. alternate The animation should reverse direction each cycle. When playing in reverse, the animation steps are performed backward. In addition, timing functions are also reversed; for example, an ease-in animation is replaced with an ease-out animation when played in reverse.  Values  normal The animation should play forward each cycle. In other words, each time the animation cycles, the animation will reset to the beginning state and start over again. This is the default animation direction setting. alternate The animation should reverse direction each cycle. When playing in reverse, the animation steps are performed backward. In addition, timing functions are also reversed; for example, an ease-in animation is replaced with an ease-out animation when played in reverse.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-directionWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-duration","title":"animation-duration","description":"The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle. A value of 0 (the default) indicates that no animation should occur. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : 0 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-duration: <time> [, <time>]*  Values  <time> The duration that an animation should take to complete one cycle. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed.  Note: Negative values are treated as 0. Values  <time> The duration that an animation should take to complete one cycle. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed.  Note: Negative values are treated as 0. Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 3.0 -webkit 5.0 (5.0)  -moz 10  -ms [1] -- 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 2.0 -webkit 5.0 (5.0)  -moz -- -- 4.2 -webkit     Specifications   CSS Animations Module Level 3: animation-durationWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-fill-mode","title":"animation-fill-mode","description":"The animation-fill-mode property specifies how a CSS animation should apply styles to its target before and after it is executing.  Initial value : none Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-fill-mode: none | forwards | backwards | both [, none | forwards | backwards | both]*  Values  none The animation will not apply any styles to the target before or after it is executing. forwards The target will retain the computed values set by the last keyframe encountered during execution. This is usually the '100%' or 'to' keyframe, unless animation-direction  is 'alternate' and animation-iteration-count  is set to an even number, in which case it is the '0%' or 'to' keyframe. backwards The animation will apply the values defined in the '0%' or 'from' keyframe as soon as it is applied to the target, and retain this during the animation-delay  period. both The animation will follow the rules for both forwards and backwards, thus extending the animation properties in both directions.  Values  none The animation will not apply any styles to the target before or after it is executing. forwards The target will retain the computed values set by the last keyframe encountered during execution. This is usually the '100%' or 'to' keyframe, unless animation-direction  is 'alternate' and animation-iteration-count  is set to an even number, in which case it is the '0%' or 'to' keyframe. backwards The animation will apply the values defined in the '0%' or 'from' keyframe as soon as it is applied to the target, and retain this during the animation-delay  period. both The animation will follow the rules for both forwards and backwards, thus extending the animation properties in both directions.  Examples \r           h1 {   animation-fill-mode: forwards; }\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-fill-modeED  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-name","title":"animation-name","description":"The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes  at-rule that defines the property values for the animation sequence. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : none Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-name: none | <name> [, none | <name>]*  Values  <name> A string identifying the animation.  Values  <name> A string identifying the animation.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-nameWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-iteration-count","title":"animation-iteration-count","description":"The animation-iteration-count CSS property defines the number of times an animation cycle should be played before stopping. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : 1 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-iteration-count: infinite | <number> [, infinite | <number>]*  Values  infinite The animation will repeat forever. <number> The number of times the animation should repeat; this is 1 by default. Negative values are treated like 0. You may specify non-integer values to play part of an animation cycle (for example 0.5 will play half of the animation cycle).  Values  infinite The animation will repeat forever. <number> The number of times the animation should repeat; this is 1 by default. Negative values are treated like 0. You may specify non-integer values to play part of an animation cycle (for example 0.5 will play half of the animation cycle).  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-iteration-countWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-play-state","title":"animation-play-state","description":"The animation-play-state CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation. Note: At this time, this property is being considered for removal from the specification, since its functionality can be simulated by other means. Resuming a paused animation will start the animation from where it left off at the time it was paused, rather than starting over from the beginning of the animation sequence.  Initial value : running Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-play-state: running | paused [, running | paused]*  Values  running The animation is currently playing. paused The animation is currently paused.  Values  running The animation is currently playing. paused The animation is currently paused.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz ? ? (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-play-stateWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-timing-function","title":"animation-timing-function","description":"The animation-timing-function property specifies how a CSS animation should progress over the duration of each cycle. The possible values are one or several <timing-function>  . For keyframed animations, the timing function applies between keyframes rather than over the entire animation. In other words, the timing function is applied at the start of the keyframe and at the end of the keyframe. An animation timing function defined within a keyframe block applies to that keyframe; otherwise. If no timing function is specified for the keyframe, the timing function specified for the overall animation is used. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : ease Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified Syntax animation-timing-function: <timing-function> [, <timing-function>]*  where:  Each <timing-function>   represents the timing function to link to the corresponding property to animate, as defined in animation-property . Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-timing-functionWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/backface-visibility","title":"backface-visibility","description":"The backface-visibility CSS property determines whether or not the back face of the element is visible when facing the user. The back face of an element always is a transparent background, letting, when visible, a mirror image of the front face be displayed. There are cases when we do not want the front face of an element to be visible through the back face, like when doing a flipping card effect (setting two elements side-to-side).  Initial value  : visible Applies to : block and inline elements Inherited : no Media: visual   Computed value : same as specified value.  Syntax backface-visibility: visibility  where :  visibility Is a keyword indicating if the backface must be visible or not. It can have the following values:  visible meaning that the back face is visible, allowing the front face to be displayed mirrored; hidden meaning that the back face is not visible, hiding the front face.    Examples    backface-visibility: visible; backface-visibility: hidden;      1 2 3 4 5 6       1 2 3 4 5 6   Though not opaque, the front sides don't let the back faces of the hidden sides to be displayed.     Specifications    Specification Status Comment     CSS 3D Transforms Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 12 -webkit 10.0 (10)  -moz 10 -ms -- (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 3.0 -webkit 10.0 (10)  -moz ? -- (Supported) -webkit     See also  CSS Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background","title":"background","description":"The background CSS property is a shorthand property for setting the individual background property values in a single place in the style sheet. background can be used to set the values for one or more of: background-color , background-image , background-position , background-repeat , -moz-background-size , and background-attachment . The background shorthand property assigns explicit given values and sets missing properties to their initial values.  Initial value :\u00a0 transparent || none || repeat || scroll || 0% 0% Applies to: all elements Inherited : no Percentages: allowed on background-position  Media: visual   Computed value : see individual properties  Syntax  background:  [<bg-layer>, ]* <final-bg-layer>  Where:  <bg-layer> [ <background-image> || <background-repeat> || <background-attachment> || <background-position> ] |\u00a0 inherit  <final-bg-layer> [ <background-color> || <background-image> || <background-repeat> || <background-attachment> || <background-position> ] |\u00a0 inherit   Note: The background-color can only be defined on the last background, as there is only one background color for the whole element.   Gecko 1.9.2 note(Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)   Support for multiple backgrounds was added in Gecko 1.9.2; prior to this, only a single background could be specified.    Gecko 2.0 note(Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)   Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  introduced support for using SVG images as CSS\u00a0backgrounds. Values One or more of the following, in any order:  <background-color> See background-color  <background-image> See background-image  <background-repeat> See background-repeat  <background-attachment> See background-attachment  <background-position> See background-position   Examples  View Live Examples  body { background: red; }  .topbanner { background: url(\"topbanner.png\") #00D repeat-y fixed; }  Notes The background property first sets the individual background properties to their initial values, then assigns the explicit values specified in the declaration. You do not have to define a value for each of the individual properties, only those you want to change from their initial defaults. Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 4.0 3.5 1.0   Multiple backgrounds 3.6 (1.9.2)  1.0 9.0 10.5 1.3         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  2.1 ? 10.0 3.2   Multiple backgrounds 1.0 (1.9.2)  2.1 ? 10.0 3.2     Specifications  CSS Backgrounds and Borders Module Level 3 CSS 2.1 Colors and backgrounds #background  See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  -moz-background-size , -moz-background-inline-policy  Using gradients Multiple backgrounds  \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-attachment","title":"background-attachment","description":"If a background-image  is specified, background-attachment determines whether that image's position is fixed within the viewport, or scrolls along with its containing block.  Initial value : scroll Applies to: all elements Inherited : no Media: visual   Computed value : as specified  Syntax  background-attachment:  <attachment>[, <attachment>]*  Where:  <attachment> scroll | fixed | local    Gecko 1.9.2 noteGecko 1.9.2 introduced support for multiple background images; prior to 1.9.2, only one  value is supported. Values  scroll If scroll is specified, the background image will scroll within the viewport along with the block the image is contained within. fixed If fixed is specified, the background image will not scroll with its containing element, instead remaining stationary within the viewport. local  Unimplemented  in Gecko (Firefox)  Examples  View Live Examples  body { \tbackground-image: url(\"images\/cartooncat.png\"); \tbackground-attachment: fixed; }  Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <attachment> for each background, separated by commas:  body { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-attachment: scroll, fixed; }   Each image is matched with the corresponding attachment type, from first specified to last. Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <attachment> for each background, separated by commas:  body { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-attachment: scroll, fixed; }   Each image is matched with the corresponding attachment type, from first specified to last. Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  4.0 3.5 1.0   Multiple backgrounds 1.0 3.6 (1.9.2)  9.0 10.5 1.3   local 4.0 -- [1] 9.0 10.5 5.0         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 2.1 1.0 (1.9.2)  ? 10.0 3.2   Multiple backgrounds 2.1 1.0 (1.9.2)  ? 10.0 3.2   local ? -- [2] ? ? ?     Specifications  CSS 2.1 Colors and Backgrounds #background-attachment CSS 3 Backgrounds and Borders #background-attachment\u00a0  See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  Multiple backgrounds Quirksmode background compatibility"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-clip","title":"background-clip | -moz-background-clip","description":"The background-clip CSS property specifies whether an element's background, either the color or image, extends underneath its border. -moz-background-clip is supported up to Gecko version 1.9.2 (Firefox 3.6). To support both, older and newer versions of Gecko (Firefox), you have to add both properties in the stylesheet (see examples). If there is no background-image, this property has only visual effect when the border has transparent regions (because of border-style ) or partially opaque regions; otherwise the border covers up the difference.  Initial value : border-box Applies to: all elements Inherited : no Media: visual   Computed value : as specified  Syntax  background-clip:  [ border-box | padding-box | content-box][, [ border-box | padding-box | content-box]]*  -moz-background-clip:  [border | padding][, [border | padding]]* \u00a0 \/* Gecko 1.2-1.9.2 (Firefox 1.0-3.6) *\/  Values  border-box  Requires Gecko 2.0  border (Firefox 1.0-3.6) The background extends to the outside edge of the border (but underneath the border in z-ordering). Default value, but see Browser compatibility section below for special case Internet Explorer 7. padding-box  Requires Gecko 2.0  padding (Firefox 1.0-3.6) No background is drawn below the border (background extends to the outside edge of the padding). content-box  Requires Gecko 2.0  The background is painted within (clipped to) the content box.  Examples   pre {    border: 5px navy;    border-style: dotted double;    background: #F8D575;    \/* The yellow background will not go behind the border *\/       -moz-background-clip: padding;\u00a0\u00a0\u00a0\u00a0\u00a0 \/* Firefox 1.0-3.6 *\/ \u00a0\u00a0 -webkit-background-clip: padding-box;\u00a0 \/* Safari, Chrome *\/ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 background-clip: padding-box;\u00a0 \/* Firefox 4.0+, Opera 10.5, Chrome *\/ \u00a0}  Browser compatibility    Browser Lowest version Support of   Chrome 1.0 -webkit-background-clip: padding | border | content -webkit-background-clip: padding-box | border-box | content-box   1.0  background-clip: padding-box | border-box background-clip: padding-box | border-box | content-box    Firefox (Gecko) 1.0-3.6 (1.2-1.9.2) -moz-background-clip: padding | border   4.0 (2.0) background-clip: padding-box | border-box | content-box    Internet Explorer 9.0 [*] background-clip: padding-box | border-box | content-box   Opera 10.5 background-clip: padding-box | border-box   Safari (WebKit) 3.0 (522) -webkit-background-clip: padding | border | content -webkit-background-clip: padding-box | border-box | content-box     [*]\u00a0 IE 7 (not other versions of IE) behaves like background-clip:padding if overflow: hidden | auto | scroll.  Konqueror 3.5.4 supports -khtml-background-clip.  Specifications  CSS 3 Backgrounds and Borders #background-clip Latest Editor's Draft (includes content-box)  See also  -moz-background-size  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  clip"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-color","title":"background-color","description":"background-color sets the background color of an element, either through a color value or the keyword transparent.  Initial value : transparent Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : as specified  Syntax  background-color: color | transparent | inherit  Values  color\u00a0 The color can be specified as a hexadecimal RGB value, a regular RGB value, or by using one of the pre-defined color keywords. transparent\u00a0 The default value for background-color is transparent meaning the element has no color of its own, instead showing the color of the element behind it.  Examples  View Live Examples  .exampleOne { \tbackground-color: teal; \tcolor: white; }  .exampleTwo { \tbackground-color: rgb(153,102,153); \tcolor: rgb(255,255,204); }  .exampleThree { \tbackground-color: #666699; \tcolor: #FFFFFF; }   Notes Color reference: See color values. Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari (WebKit)   Basic support 1.0 (1.7 or earlier)  1.0 4.0 3.5 1.0 (85)         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  (Supported) (Supported) (Supported) (Supported)     Specifications  CSS 2.1 Colors and Backgrounds CSS 3 Backgrounds & Borders  See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  Multiple backgrounds"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-image","title":"background-image","description":"The background-image CSS property sets the background image for an element. It is often more convenient to use the shorthand background .  Initial value : none Applies to: all elements Inherited : no Media: visual   Computed value : absolute URI or none  Syntax  background-image:  <bg-image>[, <bg-image>]*  Where:  <bg-image> <image>   | none    Gecko 1.9.2 noteSupport for multiple, comma-separated, background images was added in Gecko 1.9.2.   Gecko 2.0 note(Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)   Starting in Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1) , you can use SVG images as CSS\u00a0backgrounds. Values  <uri> The location of the image resource to be used as a background image. none Used to specify that an element is to have no background image.  Examples  View Live Examples  body { background-image: url(\"images\/darkpattern.png\"); }  div { background-image:\u00a0url(\"images\/foo.png\"), url(\"images\/bar.png\"); }  p { background-image: none; }  Notes Developers should ensure that they specify a background-color  to be used if an image is not available. Background images are rendered on top of the background color. Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 4.0 3.5 1.0   Multiple backgrounds 3.6 (1.9.2)  1.0 9.0 yes 1.3   Gradients 3.6 (1.9.2)  -moz 1.0 -webkit -- -- 4.0 -webkit   SVG background 4.0 (2.0)  8.0 9.0 9.5 5.0         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support yes yes yes yes   Multiple backgrounds yes yes yes yes   Gradients yes  -webkit ? ? yes -webkit   SVG background yes, but see below yes yes --     Notes  Support of SVG in CSS background is incomplete in the current version of iOS Safari (4.2-4.3). The same for Safari prior 5.0.  Notes  Support of SVG in CSS background is incomplete in the current version of iOS Safari (4.2-4.3). The same for Safari prior 5.0.  Specifications  CSS 2.1 Colors and backgrounds #background-image CSS 3 Backgrounds and borders #background-image  See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  -moz-linear-gradient , -moz-radial-gradient  -moz-image-rect  Multiple backgrounds When can I use SVG in CSS backgrounds?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-origin","title":"background-origin","description":"The background-origin CSS property determines the background positioning area (the origin of a background-image). background-origin does not apply when background-attachment  is fixed. This property is reset to its initial value by the background  shorthand property.  Initial value : padding  Applies to: all elements Inherited : no Media: visual   Computed value : as specified   Syntax  \/* since Gecko 2.0 (Firefox 4.0) *\/ background-origin: [padding-box | border-box | content-box][, [border-box | padding-box | content-box]]*  \/* older versions (multiple backgrounds since Gecko 1.9.2 \/ Firefox 3.6) *\/ -moz-background-origin: [padding | border | content][, [border | padding | content]]*  Values   padding-box  New in Firefox 4  padding (Firefox 1.0-3.6) Default value. The background position is relative to the padding. (For single boxes \"0 0\" is the upper left corner of the padding edge, \"100% 100%\" is the lower right corner.) border-box  New in Firefox 4  border (Firefox 1.0-3.6) The background position is relative to the border, so the image can go behind the border. content-box  New in Firefox 4  content (Firefox 1.0-3.6) The background position is relative to the content.  Examples   .example {    border: 10px double;    padding: 10px;    background: url('image.jpg');    background-position: center left;    \/* The background will be inside the padding *\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   \u00a0 -moz-background-origin: content;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \/* Firefox 1.0-3.6 *\/ \u00a0\u00a0 -webkit-background-origin: content-box;\u00a0\u00a0 \/* Safari, Chrome *\/ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 background-origin: content-box;\u00a0\u00a0 \/* Firefox 4.0+ *\/ }   div { \u00a0 background-image:\u00a0url('mainback.png'), url('logo.jpg'); \u00a0 background-position: 0px 0px, top right; \u00a0 -moz-background-origin: padding, content; \u00a0 -webkit-background-origin: padding-box, content;           background-origin: padding-box, content-box; } Browser compatibility    Browser Lowest version Support of   Chrome 1.0 -webkit-background-origin: padding | border | content  -webkit-background-origin: padding-box | border-box | content-box   1.0 background-origin: padding | border | content  background-origin: padding-box | border-box | content-box   Firefox (Gecko) 1.0-3.6 (1.2-1.9.2) -moz-background-origin: padding | border | content   4.0 (2.0) background-origin: padding-box | border-box | content-box   Internet Explorer 9.0 [*] background-origin: padding-box | border-box | content-box   Opera 10.5 background-origin: padding-box | border-box | content-box   Safari (WebKit) 3.0 (522) -webkit-background-origin: padding | border | content    4.0 -webkit-background-origin: padding-box | border-box | content-box   5.0 background-origin: padding-box | border-box | content-box     [*] IE up to version 7 behaves as if it were background-origin: border-box; [**] IE 8 behaves as if it were background-origin: padding-box;   Konqueror 3.5.4 supports -khtml-background-origin. Specifications  CSS 3 Background and borders #background-origin Specifies the values border-box | padding-box | content-box.  See also  -moz-background-size  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-position","title":"background-position","description":"The background-position CSS property sets the initial position of any background image that has been set. It is often more convenient to use the shorthand background .  Initial value : 0% 0% Applies to: all elements Inherited : no Percentages: refer to the size of the box itself Media: visual   Computed value : for <length> the absolute value, otherwise a percentage  Syntax background-position:  <bg-position>[, <bg-position>]* background-position:  [ <percentage> |  <length> | left | center | right  ]                        [ <percentage> | <length> | top  | center | bottom ]?  background-position:  [ top | center | bottom ]  background-position:  inherit   Where:  <bg-position> is one of: [ <percentage> |  <length> | left | center | right\u00a0 ] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [ <percentage> | <length> | top\u00a0 | center | bottom ]? [ top | center | bottom ] inherit   Values Accepts one or two values, up to four values in supporting browsers. Negative <percentage>  and  <length>  values are allowed.  If only one value is specified, the second value is assumed to be center. The first value represents the horizontal position and the second represents the vertical position (if at least one value is not a keyword).  The specifications allow for 4 values enabling offsetting a background image from any corner, not just the top left. If four values are specified, they must include two sides and two offsets. This is not yet fully supported in all browsers.  <percentage> With a value pair of 0% 0%, (is equal to 0 0) the upper left corner of the image is aligned with the upper left corner of the box's padding edge. A value pair of 100% 100% places the lower right corner of the image in the lower right corner of padding area. With a value pair of 14% 84%, the point 14% across and 84% down the image is to be placed at the point 14% across and 84% down the padding area. <length> With a value pair of 2cm 1cm, the upper left corner of the image is placed 2cm to the right and 1cm below the upper left corner of the padding area. top Equivalent to 0% for the vertical position. right Equivalent to 100% for the horizontal position. bottom Equivalent to 100% for the vertical position. left Equivalent to 0% for the horizontal position. center Equivalent to 50% for the horizontal position if it is not otherwise given, or 50% for the vertical position if it is.  Examples  View the live example  .exampleone { \tbackground-image: url(\"logo.png\"); \tbackground-position: top; }  .exampletwo { \tbackground-image: url(\"logo.png\"); \tbackground-position: 25% 75%; }  .examplethree { \tbackground: url(\"logo.png\") 2cm bottom; }  .examplefour { \tbackground-image: url(\"logo.png\"); \tbackground-position: center 10%; }  .examplefive { \tbackground: url(\"logo.png\") 3em 50%; }  .examplesix { \tbackground-image: url(\"logo.png\"); \tbackground-position: right 20px bottom 20px;  \u00a0 Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <bg-position> for each background, separated by commas: .examplesix { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-position: 0px 0px, center; }   Each image is matched with the corresponding position style, from first specified to last. Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <bg-position> for each background, separated by commas: .examplesix { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-position: 0px 0px, center; }   Each image is matched with the corresponding position style, from first specified to last. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  4.0 3.5 1.0 (85)   Multiple backgrounds 1.0 3.6 (1.9.2)  9.0 10.5 1.3 (312)   Four values -- -- 9.0 10.5 --         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Supported) 1.0 (1)  (Supported) (Supported) (Supported)   Multiple backgrounds ? 1.0 (1.9.2)  ? ? ?   Four values -- -- ? ? --     Specifications  CSS 2.1 Colors and backgrounds #background-position CSS Backgrounds and Borders Module Level 3  See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  Multiple backgrounds"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-repeat","title":"background-repeat","description":"background-repeat specifies whether the image is repeated (tiled), and how.  Initial value : repeat Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : as specified  Syntax background-repeat: <repeat-style>[, <repeat-style>]*  Where:  <repeat-style> repeat | repeat-x | repeat-y | no-repeat | inherit | round | space\u00a0    Gecko 1.9.2 noteGecko 1.9.2 added support for multiple background repeat values. Values  repeat The image is repeated both horizontally and vertically. repeat-x The image is repeated horizontally only. repeat-y The image is repeated vertically only. no-repeat The image is not repeated; only one copy of the image is drawn. space The image is repeated as many times as can fully fit, separated by white space if repeating does not create an exact fit. round \u00a0The image is repeated as often as will fit. If it doesn't fit a whole number of times, the background images are rescaled so they do.   If a <repeat-style> value specifies two keywords, the first is for the horizontal direction and the second is for the vertical direction. Examples  View the live example  .exampleone { \tbackground-image: url(\"logo.png\"); \tbackground-repeat: repeat-x; }  .exampletwo { \tbackground-image: url(\"logo.png\"); \tbackground-repeat: no-repeat; }  Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <repeat-style> for each background, separated by commas: .examplethree { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-repeat:\u00a0repeat-x, repeat-y; }   Each image is matched with the corresponding repeat style, from first specified to last. Specifications  CSS 1 CSS 2.1 CSS 3  Browser compatibility    Browser Lowest Version Space | Round Multiple Backgrounds Different Values for X & Y   Chrome 1.0 -- 1.0 \u221a   Firefox (Gecko) 1.0 (1.0) -- 3.6 (1.9.2) --   Internet Explorer 4.0 9.0 9.0 9.0   Opera 3.5 10.5 10.5 \u221a   Safari (Webkit) 1.0 (85) -- 1.3 (312) \u221a    Round \/ Space values are supported in IE9+ and Opera 11+ See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  Multiple backgrounds   Examples  View the live example  .exampleone { \tbackground-image: url(\"logo.png\"); \tbackground-repeat: repeat-x; }  .exampletwo { \tbackground-image: url(\"logo.png\"); \tbackground-repeat: no-repeat; }  Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <repeat-style> for each background, separated by commas: .examplethree { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-repeat:\u00a0repeat-x, repeat-y; }   Each image is matched with the corresponding repeat style, from first specified to last. Multiple background image support Gecko 1.9.2 supports multiple background images. You can specify a different <repeat-style> for each background, separated by commas: .examplethree { \u00a0 background-image: url(\"img1.png\"), url(\"img2.png\"); \u00a0 background-repeat:\u00a0repeat-x, repeat-y; }   Each image is matched with the corresponding repeat style, from first specified to last. Specifications  CSS 1 CSS 2.1 CSS 3  Browser compatibility    Browser Lowest Version Space | Round Multiple Backgrounds Different Values for X & Y   Chrome 1.0 -- 1.0 \u221a   Firefox (Gecko) 1.0 (1.0) -- 3.6 (1.9.2) --   Internet Explorer 4.0 9.0 9.0 9.0   Opera 3.5 10.5 10.5 \u221a   Safari (Webkit) 1.0 (85) -- 1.3 (312) \u221a    Round \/ Space values are supported in IE9+ and Opera 11+ See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  Multiple backgrounds"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border","title":"border","description":"The border property is a shorthand property for setting the individual border property values in a single place in the style sheet. border can be used to set the values for one or more of: border-width , border-style , border-color .  Initial value : see individual properties for details Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : see individual properties  Syntax  border:  [ <border-width> || <border-style> || <border-color> ] | inherit  Values  border-width Optional, default value medium is used if absent. See border-width . border-style\u00a0 Required, default value none is used if absent. See border-style . border-color\u00a0 Optional, default value if absent: The value of the element's color  property (foreground color). See border-color .  Examples  View Live Examples  element { border: dashed }          \/* dashed border of medium thickness, the same color as the text *\/ element { border: dotted 1.5em }    \/* dotted, 1.5em thick border, the same color as the text *\/ element { border: solid red }       \/* solid, red border of medium thickness *\/ element { border: solid blue 10px } \/* solid, blue border of 10px thickness *\/  Notes While the border-width , border-style , and border-color  properties accept up to four values, this property only accepts one value for each property. Specifications  CSS 1 CSS 2.1 Box #border-shorthand CSS 3 Backgrounds and Borders #border-shorthand  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 4.0 3.5 1.0 (85) [1]         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  ? ? ? 1.0 [2]     See also  border , border-width , border-style , border-color , margin , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-size","title":"background-size","description":"The background-size CSS property specifies the size of the background images.  Initial value : auto Applies to: all elements Inherited : no Percentages: see below Media: visual   Computed value : for <length> the absolute value, otherwise a percentage  Syntax background-size:  <bg-size>[, <bg-size>]*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \/* Gecko 2.0 (Firefox 4.0) and later *\/  Where <bg-size> is one of:  [ <percentage> |  <length> | auto ] [ <percentage> |  <length> | auto ] ? contain  cover  Multiple values apply to individual background layers, from front to back, in the same manner as for all other background properties. Values  <percentage> Scales the background image in the desired dimension to the specified percentage of the background positioning area, which is determined by the value of background-origin . The background positioning area is, by default, the area containing the content of the box and its padding; the area may also be changed to just the content or to the area containing borders, padding, and content. If the background's attachment  is fixed, the background positioning area is instead the entire area of the browser window, not including the area covered by scrollbars if they are present. <length> Scales the background image to the specified length in the desired dimension. auto Scales the background image in the relevant direction such that its intrinsic proportion is maintained.  The first value determines how the image is scaled horizontally, the second how it is scaled vertically. If only one value is specified, the second value is implicitly auto.\u00a0 Negative sizes are not allowed.  contain Specifies that the background image should be scaled to be as large as possible while ensuring both its dimensions are less than or equal to the corresponding dimensions of the background positioning area. cover Specifies that the background image should be scaled to be as small as possible while ensuring both its dimensions are greater than or equal to the corresponding dimensions of the background positioning area.  Interpretation of possible values depends on the image's intrinsic dimensions (width and height) and intrinsic proportion (ratio of width and height).\u00a0 A bitmap image always has intrinsic dimensions and an intrinsic proportion.\u00a0 A vector image may have both intrinsic dimensions (and thus must have an intrinsic proportion).\u00a0 It also may have one or no intrinsic dimension, and in either case it might or might not have an intrinsic proportion.\u00a0 Gradients are treated as images with no intrinsic dimensions or intrinsic proportion.   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   This behavior changed in Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) . Before this, gradients were treated as images with no intrinsic dimensions, with an intrinsic proportion identical to that of the background positioning area.  Background images generated from elements using -moz-element  (which actually match an element) are currently treated as images with the dimensions of the element, or of the background positioning area if the element is SVG, with the corresponding intrinsic proportion. Note: This is not the currently-specified behavior, which is that the intrinsic dimensions and proportion should be those of the element in all cases. The rendered size of the background image is then computed as follows:  If both components of background-size are specified and are not auto: The background image renders at the specified size. If the background-size is contain or cover: The image is rendered, preserving its intrinsic proportion, at the largest size contained within, or covering, the background positioning area.\u00a0 If the image has no intrinsic proportion, then it is rendered at the size of the background positioning area. If the background-size is auto or auto auto: If the image has both intrinsic dimensions, it is rendered at that size.\u00a0 If it has no intrinsic dimensions and no intrinsic proportion, it is rendered at the size of the background positioning area.\u00a0 If it has no dimensions but has a proportion, it's rendered as if contain had been specified instead.\u00a0 If the image has one intrinsic dimension and a proportion, it's rendered at the size determined by that one dimension and the proportion.\u00a0 If the image has one intrinsic dimension but no proportion, it's rendered using the intrinsic dimension and the corresponding dimension of the background positioning area. If the background-size has one auto component and one non-auto component: If the image has an intrinsic proportion, then render it using the specified dimension, and compute the other dimension from the specified dimension and the intrinsic proportion.\u00a0 If the image has no intrinsic proportion, use the specified dimension for that dimension.\u00a0 For the other dimension, use the image's corresponding intrinsic dimension if there is one.\u00a0 If there is no such intrinsic dimension, use the corresponding dimension of the background positioning area.  Note that background sizing for vector images that lack intrinsic dimensions or proportion is not yet fully implemented in all browsers.\u00a0 Be careful about relying on the behavior described above, and test in multiple browsers (specifically including versions of Firefox 7 or earlier and Firefox 8 or greater) to be sure different renderings are acceptable. Examples This demonstration of background-size: cover and this demonstration of background-size: contain are meant to be opened in new windows so that you can see how contain and cover behave when the background positioning area's dimensions vary. This series of demos of how background-size works and interacts with other background-* properties should pretty much cover the remaining ground in how to use background-size alone and in conjunction with other properties. Notes While this property is new in Gecko 1.9.2 (Firefox 3.6), it is possible to stretch a image fully over the background in Firefox 3.5 by using -moz-border-image . \r           .foo {         background-image: url(bg-image.png);         -moz-background-size: 100% 100%;           \/* Gecko 1.9.2 (Firefox 3.6) *\/          -o-background-size: 100% 100%;           \/* Opera 9.5 *\/     -webkit-background-size: 100% 100%;           \/* Safari 3.0 *\/             background-size: 100% 100%;           \/* Gecko 2.0 (Firefox 4.0) and other CSS3-compliant browsers *\/          -moz-border-image: url(bg-image.png) 0;    \/* Gecko 1.9.1 (Firefox 3.5) *\/ }\r          If you are specifying a gradient as background and have specified a background-size to go with it, it's best not to specify a size that uses a single auto component, or is specified using only a width value (for example, background-size: 50%).\u00a0 Rendering of gradients in such cases changed in Firefox 8, and at present it is generally inconsistent across browsers, which do not all implement rendering in full accordance with the CSS3 background-size specification and with the CSS3 Image Values gradient specification. \r           .bar {        width: 50px; height: 100px;        background-image: gradient(...);         \/* NOT RECOMMENDED *\/        background-size: 25px;        background-size: 50%;        background-size: auto 50px;        background-size: auto 50%;         \/* OKAY *\/        background-size: 25px 50px;        background-size: 50% 50%; }\r          Note that it's particularly not recommended to use a pixel dimension and an auto dimension with a gradient, because it's impossible to replicate rendering in versions of Firefox prior to 8, and in browsers not implementing Firefox 8's rendering, without knowing the exact size of the element whose background is being specified. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 -webkit 3.6 (1.9.2)  -moz 9.0 9.5 -o with some bugs (see below) 3.0 (522) -webkit but from an older CSS3 draft (see below)   3.0 4.0 (2.0)  10.0   Support for contain | cover 3.0 3.6 (1.9.2)  9.0 10.0 4.1 (532)   Support for SVG backgrounds ? 8.0 (8.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) Windows Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   Support for SVG backgrounds ? 8.0 (8.0)  ? ? ?      As of July 2009, Opera 9.5's computation of the background positioning area is incorrect for fixed backgrounds.\u00a0 Opera 9.5 also interprets the two-value form as a horizontal scaling factor and, from appearances, a vertical clipping dimension. WebKit-based browsers as of July 2009 implement an older draft of CSS3 background-size in which an omitted second value is treated as duplicating the first value; this draft does not include the contain or cover keywords. Konqueror 3.5.4 supports -khtml-background-size. -moz-background-size is no longer supported in Gecko 2.0; you must use background-size instead. See Scaling of SVG backgrounds for details on how SVG images are scaled when used for background-size. Specifications  CSS 3 Backgrounds and borders #background-size  See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  -moz-background-origin , -moz-background-clip  Multiple backgrounds"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom","title":"border-bottom","description":"The border-bottom property is a shorthand property that sets the values of border-bottom-color , border-bottom-style , and border-bottom-width . These properties describe the bottom border of elements.  Initial value : see individual properties for details Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : see individual properties  Syntax  border-bottom: [ <border-width> || <border-style> || <border-color> ] | inherit  Values  <border-width>\u00a0 See border-bottom-width . <border-style>\u00a0 See border-bottom-style . <border-color>\u00a0 See border-bottom-color .  Examples  View Live Examples  element {      border-bottom: 1px solid #000; }  Notes The three values of the shorthand property can be specified in any order, and one or two of them may be omitted. As with all shorthand properties, border-bottom always sets the values of all of the properties that it can set, even if they are not specified. It sets those that are not specified to their default values. This means that:    border-bottom-style: dotted;   border-bottom: thick green; is actually the same as    border-bottom-style: dotted;   border-bottom: none thick green; and the value of border-bottom-style  given before border-bottom is ignored. Since the default value of border-bottom-style  is none, not specifying the <border-style> part of the value means that the property specifies no border. Specifications  CSS 1 CSS 2.1 CSS 3  Browser compatibility    Browser Lowest Version   Chrome 1.0   Firefox 1   Internet Explorer 4   Netscape 4   Opera 3.5    See also border , border-bottom , border-bottom-width , border-bottom-style , border-bottom-color ,"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-color","title":"border-bottom-color","description":"The border-bottom-color CSS property sets the color of the bottom border of an element. See border-top-color  for more and detailed information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-right-radius","title":"border-bottom-right-radius","description":"The CSS property border-bottom-right-radius sets the rounding of the bottom-right corner of the border. Previous to Gecko 2.0 (Firefox 4.0) this was named  -moz-border-radius-bottomright.  See the border-top-left-radius  and border-radius  properties for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-left-radius","title":"border-bottom-left-radius","description":"The CSS property border-bottom-left-radius sets the rounding of the bottom-left corner of the border. Previous to Gecko 2.0 (Firefox 4.0) this was named  -moz-border-radius-bottomleft.  See the border-top-left-radius and border-radius properties for more information. \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-style","title":"border-bottom-style","description":"border-bottom-style sets the line style of the bottom border of a box.  Initial value : none  Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : as specified  Syntax  border-bottom-style: <border-style> | inherit  <border-style> Values  none\u00a0 No border. hidden\u00a0 Same as 'none', except in terms of border conflict resolution for table elements. dotted\u00a0 Series of dots. dashed\u00a0 Series of short dashes or line segments. solid\u00a0 Single, straight, solid line. double\u00a0 Two straight lines that add up to the pixel amount defined as border-width. groove\u00a0 Carved effect. ridge\u00a0 Opposite of 'groove'. The border appears 3D (coming out). inset\u00a0 Makes the box appear embedded. outset\u00a0 Opposite of 'inset'. Makes the box appear 3D (embossed).  Related properties  border-left-style  border-right-style  border-top-style  border-style   Examples  View Live Examples  element {         border-bottom-size: 1px;         border-bottom-style: dotted;         border-bottom-color: #000; }  Notes Unless a border-style value is set, your border will not appear because the default value is set to 'none.' Specifications  CSS 2.1 CSS 3  Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 5.5 9.2 1.0         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See Also border-bottom-style , border-bottom , border-bottom-color , border-bottom-width ,"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-collapse","title":"border-collapse","description":"The border-collapse CSS property selects a table's border model. This has a big influence on the look and style of the table cells. The separated model is the traditional HTML table border model. Adjacent cells each have their own distinct borders. The distance between them given by the border-spacing  property. In the collapsed border model, adjacent table cells share borders.  Initial value : separate Applies to: table and inline-table elements Inherited : Yes Media: visual   Computed value : as specified  Syntax  border-collapse:  collapse | separate | inherit Values  separate Default, use the \"separated borders\" rendering model collapse Use the \"collapsed borders\" rendering model  Examples  View Live Examples  th, td { border: solid 1px red; } table { border-collapse: collapse; }   <table border=6>   Browser Layout Engine   Internet Explorer Trident   Firefox Gecko   Opera Presto   Safari WebKit     <table border=6 style= \"border-collapse:collapse\">   Browser Layout Engine   Internet Explorer Trident   Firefox Gecko   Opera Presto   Safari WebKit    Notes In the \"collapsed border\" rendering model, the border-style  value of inset behaves like groove, and outset behaves like ridge. Specifications  CSS 2.1 Table #borders  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 5.0 4.0 1.2 (125)         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  ? ? ? ?    See also   caption-side , table-layout , border-collapse , border-spacing , empty-cells"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-width","title":"border-bottom-width","description":"border-bottom-width sets the width of the bottom border of a box.  Initial value : medium  Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : absolute length; '0' if the border style is 'none' or 'hidden'  Syntax  border-bottom-width: <border-width> | inherit  <border-width> Values  thin A thin border. medium A medium border. thick A thick border. <length> The border's thickness has an explicit value. Explicit border widths cannot be negative.  Note: An em value is also supported. Related properties  border-left-width  border-right-width  border-top-width  border-width   \u00a0 Examples  View Live Examples  element {      border-bottom-width: thin;     border-bottom-style: solid;     border-bottom-color: #000; }  Specifications  CSS 1 CSS 2.1 CSS 3  Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See Also border , border-bottom , border-bottom-style , border-bottom-color ,"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-color","title":"border-color","description":"The border-color CSS property is a shorthand property for setting the color of the four sides of an element's border: border-top-color , border-right-color , border-bottom-color , border-left-color   Initial value : the element's color  property Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : the computed value of color by default, or as specified.  Syntax  border-color:  [ <color> || transparent ]{1,4} | inherit Values Accepts one, two, tree or four values.  <color> See <color>  value for possible keywords and units. transparent The border is not drawn but it still takes up space on the page.  If one color value is given, it applies to all four borders. Two values apply first to the top and bottom border and second to the left and right border. Three values apply first to the top, second to the left and right and third to the bottom border. Four values apply to top, right, bottom and left border in that order. Examples  View Live Examples  pre {    border-style: ridge dashed solid;   border-color: orange blue; } Notes In order to see the border you must at least set the border-style  to something visible. Specifications  CSS 2.1 #border-color  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 4.0 3.5 1.0 (85)         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  ? ? ? ?     Mozilla Extensions The following Mozilla extensions set the border sides to multiple colors for Gecko based browsers like Firefox. -moz-border-top-colors , -moz-border-right-colors , -moz-border-bottom-colors , -moz-border-left-colors  See also border , border-top-color , border-right-color , border-bottom-color , border-left-color , border-width , border-style"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-image","title":"border-image","description":"The border-image CSS property allows drawing an image on the borders of elements. This makes drawing complex looking widgets much simpler than it has been and removes the need for nine boxes in some cases. Warning: The official CSS\u00a03 specification for the border-image property changed significantly between the time this feature was frozen for Gecko 1.9.1 and its release. As such, both the syntax and semantics of this feature will probably change in future releases of Gecko. In particular, the optional border-width override has been removed from the specification and will almost certainly be removed in a future version of Gecko. The border-image is used instead of the border styles given by the border-style  properties.\u00a0 If the value is none or if the image cannot be displayed, the border styles will be used. An additional background image for the element is drawn on top of the background-image .  Initial value : none  Applies to: all elements, except table elements when border-collapse  is collapse Inherited : no Media: visual   Computed value : any URI made absolute, any <length> made absolute, other parts as specified  Syntax none |    [ <image> [ <number> | <percentage> ]{1,4} [\/ <border-width>{1,4}]? ] && [ stretch | repeat | round ]{0,2}  Values  none No image displayed, other border styles are used. <image> (required) The image value is a <uri> , e.g. url(http:\/\/example.org\/image.png) <number> | <percentage> (required) One, two, three or four values represent inward offsets from the top, right, bottom, and left edges of the image (respectively), dividing it into nine regions: four corners, four edges and a middle.  One value belongs to all four sides of the image. Two values belong 1. to top and bottom and 2. to right and left side. Three values belong 1. to top, 2. to the right and left side and 3. to bottom. Four values belong to the top, right, bottom and left edge of the image in that order.  In Gecko 1.9.1 (Firefox 3.5) the middle part of the image is drawn like a background-image of the element. This may change in future versions.  Percentages are relative to the width\/height of the image. Numbers represent pixels in the image (if the image is a raster image) or vector coordinates (if the image is an SVG image). <border-width> (optional) If the slash \/ is present in the property value, the one, two, three or four values after it are used for the width of the border instead of the border-width  properties. The order of the values is the same as for border-width . stretch | round | repeat (optional) One or two keywords, that specify how the images for the sides and the middle part are scaled and tiled. stretch\u00a0 (default value) will cause images to be scaled to fit their box. round \u00a0\u00a0 will tile the images, but also scale them so that a whole number fit in the box. repeat \u00a0 simply tiles the images inside the box. The first keyword describes how to draw the top, middle, and bottom images, while the second describes the left and right borders. If the second is absent, it is assumed to be the same as the first. If both are absent, the default value stretch is used.  Examples [needs some instructive live examples] #header  { -moz-border-image: url(border.png) 27 27 27 27 round round; }   .button  { -moz-border-image: url(button.png) 0 5 0 5; }  .example { -moz-border-image: url(example.jpg) 3 4 6 8 \/ 10px 12px 14px 22px; }  \/* Edge case, acts like a full scaled background-image in Firefox 3.5 *\/   div     { -moz-border-image: url(bgimage.png) 0; }   Browser compatibility Note:\u00a0 Features beyond basic support are not yet documented in above sections. Please read the spec if you are interested.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 (1.9.1)  -moz 7.0 -webkit -- 10.5 \/ 11.0 -o 3.0 -webkit   optional <border-image-slice> --  Unimplemented (see  bug 497995 )  ? -- ? ?   fill keyword -- ? -- ? ?         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support 3.2 -webkit -- 11.0 -o 2.1 -webkit   optional <border-image-slice> ? -- ? ?   fill keyword ? -- ? ?     Notes  Unusually, for Opera, the prefixed property was added after the non-prefixed.  Notes  Unusually, for Opera, the prefixed property was added after the non-prefixed.  Specifications  CSS 3 Backgrounds and borders #border-image"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left","title":"border-left","description":"The border-left is a shorthand property for setting the width, style and color of left border of a box. This property can be used to set the values for one or more of: border-left-width , border-left-style , border-left-color . Omitted values are set to their initial values.  Initial value : see individual properties for details Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : see individual properties  Syntax  border-left: [border-width || border-style || border-color | inherit]\u00a0;  Values  border-width See border-width . border-style\u00a0 See border-style . border-color\u00a0 See border-color .  Examples  element {      border-left: 1px solid #000; }  Notes If the rule does not specify a border color, the border will have the color specified by the color  property. Specifications  CSS 1 CSS 2.1 CSS 3  Browser compatibility    Browser Lowest Version   Chrome 1.0   Firefox 1   Internet Explorer 4   Netscape 4   Opera 3.5    See also  border , border-width , border-style , border-color , margin , padding  border-right , border-right-color , border-right-style , border-right-width"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left-color","title":"border-left-color","description":"The border-left-color CSS property sets the color of the left border of an element. See border-top-color  for more and detailed information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left-style","title":"border-left-style","description":"border-left-style sets the line style of the left border of a box. See the border-bottom-style  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left-width","title":"border-left-width","description":"border-left-width sets the width of the left border of a box. See the border-bottom-width property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-radius","title":"border-radius","description":"The border-radius CSS property can be used to give borders rounded corners. The radius applies also to the background even if the element has no border. border-radius is a shortcut to set the four properties border-top-left-radius , border-top-right-radius , border-bottom-right-radius  and border-bottom-left-radius .  Initial value : 0 Applies to: all elements, except the table element when border-collapse is collapse Inherited : no Percentages: yes Media: visual   Computed value   Syntax  border-radius:   <border-radius>{1,4} [ \/ <border-radius>{1,4}]? Values Accepts one, two, three or four <border-radius>  values, optional followed by a slash \/ and a second set of values. <border-radius> represents one of:  <length> See  <length>  for possible units. <percentage> Percentages for the horizontal radius are relative to the width of the border box, whereas percentages for the vertical radius are relative to the height of the border box.  If one value is set, this radius applies to all 4 corners. If two values are set, the first applies to top-left and bottom-right corner, the second applies to top-right and bottom-left corner. Four values apply to the top-left, top-right, bottom-right, bottom-left corner in that order. Three values: The second value applies to top-right and also bottom-left. If the slash followed by a second set of radii is specified, the values before the slash are used to specify the horizontal radius, while the values after the slash specify the vertical radius.\u00a0 If the slash is omitted, then the same values are used to set both horizontal and vertical radii. For example: \r           border-radius: 1em\/5em;  \/* is equivalent to *\/  border-top-left-radius:     1em 5em; border-top-right-radius:    1em 5em; border-bottom-right-radius: 1em 5em; border-bottom-left-radius:  1em 5em;\r          \r           border-radius: 4px 3px 6px \/ 2px 4px;  \/* is equivalent to: *\/  border-top-left-radius:     4px 2px; border-top-right-radius:    3px 4px; border-bottom-right-radius: 6px 2px; border-bottom-left-radius:  3px 4px;\r          Values Accepts one, two, three or four <border-radius>  values, optional followed by a slash \/ and a second set of values. <border-radius> represents one of:  <length> See  <length>  for possible units. <percentage> Percentages for the horizontal radius are relative to the width of the border box, whereas percentages for the vertical radius are relative to the height of the border box.  If one value is set, this radius applies to all 4 corners. If two values are set, the first applies to top-left and bottom-right corner, the second applies to top-right and bottom-left corner. Four values apply to the top-left, top-right, bottom-right, bottom-left corner in that order. Three values: The second value applies to top-right and also bottom-left. If the slash followed by a second set of radii is specified, the values before the slash are used to specify the horizontal radius, while the values after the slash specify the vertical radius.\u00a0 If the slash is omitted, then the same values are used to set both horizontal and vertical radii. For example: \r           border-radius: 1em\/5em;  \/* is equivalent to *\/  border-top-left-radius:     1em 5em; border-top-right-radius:    1em 5em; border-bottom-right-radius: 1em 5em; border-bottom-left-radius:  1em 5em;\r          \r           border-radius: 4px 3px 6px \/ 2px 4px;  \/* is equivalent to: *\/  border-top-left-radius:     4px 2px; border-top-right-radius:    3px 4px; border-bottom-right-radius: 6px 2px; border-bottom-left-radius:  3px 4px;\r          Examples   border: solid 10px;    \/* the border will curve into a 'D' *\/  border-radius: 0 50px 50px 0;    border: groove 1em red;  border-radius: 2em;     background: gold;   border: ridge gold;   border-radius: 13em\/3em;      background: gold;    border-radius: 40px 10px;    background: black; color: gray; border-radius: 50%;  Notes  Dotted and dashed rounded border corners are rendered as solid in Gecko; see   bug 382721 . border-radius does not apply to table elements when border-collapse  is collapse. Old WebKit handles multiple values different, see below.  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4.0 (2.0)  1.0 (1.7 or earlier)  -moz 4.0 0.2 -webkit 9.0 10.5 5.0 3.0 -webkit   Elliptical borders 3.5 (1.9.1)  yes yes yes yes, but see below   4 values for 4 corners yes 4.0 yes yes 5.0   Percentages yes was Non-standard      (see below)  yes yes 11.5 5.1         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support 3.2 -webkit -- -- 2.1 -webkit   Elliptical borders ? -- -- ?   4 values for 4 corners ? -- -- ?   Percentages ? -- -- ?     <percentage> values  are not supported in older Chrome and Safari versions (it was fixed in Sepember 2010) are buggy in Opera prior to 11.50 are implemented in a non-standard way prior to Gecko 2.0 (Firefox 4). Both horizontal and vertical radii were relative to the width of the border box.  Notes Older Safari and Chrome versions (prior to WebKit 532.5)  support only one value for all 4 corners. For different radii the long form properties must be used don't support the slash \/ notation. If two values are specified, an elliptical border is drawn on all 4 corners \r           \/* this is equivalent: *\/  -webkit-border-radius: 40px 10px;         border-radius: 40px\/10px;\r            In Gecko 2.0 -moz-border-radius is renamed to border-radius. -moz-border-radius is supported as an alias for a transitional period (at least until the next version of Gecko). In order to conform to the CSS3 standard, Gecko 2.0  changes the handling of <percentage>  values to match the specification. You can specify an ellipse as border on an arbitrary sized element just with border-radius: 50%; makes rounded corners clip content and images (if overflow : visible is not set)  In Opera (prior to Opera 12), applying border-radius to replaced elements will not have rounded corners.<percentage> values  are not supported in older Chrome and Safari versions (it was fixed in Sepember 2010) are buggy in Opera prior to 11.50 are implemented in a non-standard way prior to Gecko 2.0 (Firefox 4). Both horizontal and vertical radii were relative to the width of the border box.  Notes Older Safari and Chrome versions (prior to WebKit 532.5)  support only one value for all 4 corners. For different radii the long form properties must be used don't support the slash \/ notation. If two values are specified, an elliptical border is drawn on all 4 corners \r           \/* this is equivalent: *\/  -webkit-border-radius: 40px 10px;         border-radius: 40px\/10px;\r            In Gecko 2.0 -moz-border-radius is renamed to border-radius. -moz-border-radius is supported as an alias for a transitional period (at least until the next version of Gecko). In order to conform to the CSS3 standard, Gecko 2.0  changes the handling of <percentage>  values to match the specification. You can specify an ellipse as border on an arbitrary sized element just with border-radius: 50%; makes rounded corners clip content and images (if overflow : visible is not set)  In Opera (prior to Opera 12), applying border-radius to replaced elements will not have rounded corners.Specifications   CSS3 Backgrounds and Borders Module: border-radiusCR See also border-top-left-radius , border-top-right-radius , border-bottom-right-radius , border-bottom-left-radius"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-right","title":"border-right","description":"The border-right is a shorthand property for setting the width, style and color of right border of a box. This property can be used to set the values for one or more of: border-right-width , border-right-style , border-right-color . Omitted values are set to their initial values.  Initial value : see individual properties for details Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : see individual properties  Syntax  border-right: [border-width || border-style || border-color | inherit]\u00a0;  Values  border-width See border-width . border-style\u00a0 See border-style . border-color\u00a0 See border-color .  Examples  element {      border-right: 1px solid #000; }  Notes If the rule does not specify a border color, the border will have the color specified by the color  property. Specifications  CSS 1 CSS 2.1 CSS 3  Browser compatibility See also  border , border-width , border-style , border-color , margin , padding   border-right , border-right-color , border-right-style , border-right-width  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-right-color","title":"border-right-color","description":"border-right-color sets the color of the right border of an element. See the border-top-color  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-right-style","title":"border-right-style","description":"border-right-style sets the line style of the right border of a box. See the border-bottom-style  property for more information. \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-left-radius","title":"border-top-left-radius","description":"The border-top-left-radius CSS property sets the rounding of the top-left corner of the element. Previous to Gecko 2.0 (Firefox 4.0) it was named -moz-border-radius-topleft. This is supported as an alias for a short transitional period. See border-radius  for more information.  Initial value : 0  Applies to: all elements Inherited : no Percentages: yes Media: visual   Computed value : two absolute  <length> s  Syntax  -moz-border-radius-topleft:\u00a0 <border-radius> <border-radius>? border-top-left-radius: \u00a0 \u00a0\u00a0 <border-radius> <border-radius>?   Values Accepts one <border-radius> value.  New in Firefox 3.5  An optional second value for elliptical corners. The two values define the radii of a quarter ellipse that defines the shape of the corner. The first value is the horizontal radius. The optional second value is the vertical radius, if omitted it's equal to the first.  <border-radius> represents one of:  <length> See  <length>  for possible units. <percentage> Since Gecko 2.0 (Firefox 4.0): Percentages for the horizontal radius refer to the width of the box, whereas percentages for the vertical radius refer to the height of the box. In previous Gecko\/Firefox versions Non-standard     : Relative to the width of the box (the percentage is relative to the width even when specifying the radius for a height).  Examples  div { -moz-border-radius-topleft:  20px;  \/* Firefox up to version 3.6 *\/    -webkit-border-top-left-radius: 20px;  \/* Safari, Chrome (before WebKit version 533) *\/            border-top-left-radius: 20px;  \/* Firefox 4; browsers with CSS3 support *\/ }   \/* elliptical corners supported since Firefox 3.5 (Gecko 1.9.1) *\/    div { -moz-border-radius-topleft:   20px;       \/* round corner, fallback for Firefox 1-3.0 *\/       -moz-border-radius-topleft:   20px 10px;  \/* elliptical border, Firefox 3.5-3.6 *\/     -webkit-border-top-left-radius: 20px 10px;  \/* Safari, Chrome (before WebKit version 532.5) *\/             border-top-left-radius: 20px 10px;  \/* Firefox 4; browsers with CSS3 support *\/ } Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support  0.2  -webkit-border-top-left-radius -webkit-border-top-right-radius -webkit-border-bottom-right-radius -webkit-border-bottom-left-radius  1.0 (1.0)  -moz-border-radius-topleft -moz-border-radius-topright -moz-border-radius-bottomright -moz-border-radius-bottomleft  9.0 \u00a0  border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius 10.5 border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius 3.0 (522) -webkit-border-top-left-radius -webkit-border-top-right-radius -webkit-border-bottom-right-radius -webkit-border-bottom-left-radius    4.0 \u00a0  border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius 4.0 (2.0) border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius 5.0 (532.5) border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius   Percentages 4.0 1.0 (1.0) Non-standard      9.0 10.5 5.0 (532.5)   4.0 (2.0)   Elliptical corners 0.2 3.5 (1.9.1) 9.0 10.5 3.0 (522 )         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications CSS 3 Backgrounds and Borders #border-radius See also border-radius"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-width","title":"border-top-width","description":"border-top-width sets the width of the top border of a box. See the border-bottom-width property for more information. \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-right-radius","title":"border-top-right-radius","description":"The CSS property border-top-right-radius sets the rounding of the top-right corner of the border. Previous to Gecko 2.0 (Firefox 4.0) this was named  -moz-border-radius-topright.  See the border-top-left-radius and border-radius properties for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-style","title":"border-top-style","description":"border-top-style sets the line style of the top border of a box. See the border-bottom-style  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-width","title":"border-width","description":"The border-width CSS property sets the width of the border of a box. Using the shortcut property border  is often more convenient.  Initial value : medium  Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value : absolute length; 0 if the border-style is none or hidden  Syntax   border-width:  <border-width> {1,4}  Values Accepts one, two, three or four <border-width> values. These whitespace separated values set the width of the top, right, bottom, and left border of a box. If one value is set, this width applies to all 4 sides. If two values are set, the first applies to top and bottom, the second applies to the right and left side. Three values apply to the top, right and bottom side. The left side takes the second value. Four values apply to the top, right, bottom, left side in that order.  <border-width> is one value or keyword of:\u00a0\u00a0  <length>  | thin | medium | thick  thin Depends on the UA. Typically 1px in desktop browsers like Firefox and IE 8. 2px in IE 4-7. medium Depends on the UA. Typically 3px in desktop browsers like Firefox and IE 8. 4px in IE 4-7. thick Depends on the UA. Typically 5px in desktop browsers like Firefox and IE 8. 6px in IE 4-7. <length> The border's thickness has an explicit value. Cannot be negative. See  <length>  for possible units.  Related properties  border-bottom-width  border-left-width  border-right-width  border-top-width \u00a0  Examples  border: ridge #ccc; border-width: 6px;  \/* same as \"border: ridge #ccc 6px\";  6px wide border on all 4 sides *\/  border: solid red; border-width: 2px 10px;  \/* 2px wide top and bottom border, 10px right and left border *\/   border: dotted orange; border-width: 0.3em 0;   \/* 0.3em wide top and bottom border, no border right and left *\/   border: solid lightgreen; border-width: medium 0 1px thick;  \/* three different width, no right border *\/  Specifications  CSS 2.1 Box #border-width CSS 3 Background #border-width  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 4.0 3.5 1.0 (85)         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  ? ? ? ?     See Also border , border-style , border-color"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/bottom","title":"bottom","description":"The bottom property specifies part of the position of positioned elements. For absolutely positioned elements (those with position: absolute or position: fixed), it specifies the distance between the bottom margin edge of the element and the bottom edge of its containing block. For relatively positioned elements (those with position: relative), it specifies the amount the element is moved above its normal position. However, the top  property overrides the bottom property, so if top is not auto, the computed value of bottom is the negative of the computed value of top.  Initial value : auto  Applies to: positioned elements Inherited : no Percentages: refer to height of containing block Media: visual   Computed value : absolute length, percentage, or auto  Syntax     bottom: <length> | <percentage> | auto | inherit  Values  <length>\u00a0 A length, used as described in the summary. Can be negative, zero, or positive. <percentage>\u00a0 A percentage of the containing block's height, used as described in the summary. auto\u00a0 For absolutely positioned elements, position the element based on the top  property and treat height: auto as a height based on the content. For relatively positioned elements, offset the element from its original position based on the top  property, or if top is also auto, do not offset it at all. inherit\u00a0 Inherits the computed value from its parent element (which may not be its containing block). This computed value is then handled like it was a <length>, a <percentage>, or auto  Examples  element {      position: absolute;     bottom: 20px;      height: 200px;     border: 1px solid #000; }  The following sample page contrasts position:absolute and position:fixed. When the regular text becomes taller than the viewable portion of the page (the browser window's viewport), blocks positioned with position:absolute will scroll with the page, while blocks positioned with position:fixed will not. Note that IE6 does not support position:fixed.  <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\"     \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html> <head> <meta http-equiv=\"content-type\" content=\"text\/html; charset=iso-8859-1\"> <title>Position at bottom, absolute or fixed<\/title> <style type=\"text\/css\"> p {font-size:30px; line-height:3em;} div.pos {width:49%; text-align:center; border:2px solid #00f;} div#abs {position:absolute; bottom:0; left:0;} div#fix {position:fixed; bottom:0; right:0;} <\/style> <\/head> <body>   <p>This<br>is<br>some<br>tall,<br>tall,     <br>tall,<br>tall,<br>tall<br>content.<\/p>   <div id=\"fix\" class=\"pos\"><p>Fixed<\/p><\/div>   <div id=\"abs\" class=\"pos\"><p>Absolute<\/p><\/div> <\/body> <\/html> Notes For absolutely positioned elements whose containing block is based on a block-level element, this property is an offset from the padding edge of that element. For absolutely positioned elements, the bottom property has no visible effect when all of top , height , and margin-top  are not auto (which is the default value for top and height). Specifications  CSS 2.1 CSS 3  Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.7 or earlier)  5 6 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? 1.0 (1.9.2)  ? ? ?      See also position , top , right , left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/box-shadow","title":"box-shadow","description":"The box-shadow CSS property accepts one or more shadow effects as a comma-separated list. It allows casting a drop shadow from the frame of almost any element. If a border-radius  is specified on the element with a box shadow, the box shadow takes on the same rounded corners. The z-ordering of multiple box shadows is the same as multiple text shadows (the first specified shadow is on top).  Initial value : none  Applies to: all elements Inherited : no Media: visual   Computed value : as specified (any  <length>  made absolute; any <color>  computed) Syntax  box-shadow:  none | <shadow> [,<shadow>]*    where <shadow> is defined as:  inset? && [ <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? ] Values  inset (optional) If not specified (default), the shadow is assumed to be a drop shadow (as if the box were raised above the content). The presence of the inset keyword changes the shadow to one inside the frame (as if the content was depressed inside the box). Inset shadows are drawn above background, but below border and content. <offset-x> <offset-y> (required) This are two  <length>  values to set the shadow offset. <offset-x> specifies the horizontal distance. Negative values place the shadow to the left of the element. <offset-y> specifies the vertical distance. Negative values place the shadow above the element. See  <length>  for possible units. If both values are 0, the shadow is placed behind the element (and may generate a blur effect if <blur-radius> and\/or <spread-radius> is set). <blur-radius> (optional) This is a third  <length>  value. The larger this value, the bigger the blur, so the shadow becomes bigger and lighter. Negative values are not allowed. If not specified, it will be 0 (the shadow's edge is sharp). <spread-radius> (optional) This is a fourth  <length>  value. Positive values will cause the shadow to expand and grow bigger, negative values will cause the shadow to shrink. If not specified, it will be 0 (the shadow will be the same size as the element). <color> (optional) See <color>  values for possible keywords and notations. If not specified, the color depends on the browser. In Gecko (Firefox), Presto (Opera) and Trident (Internet Explorer), the value of the color  property is used. On the other hand, WebKit's shadow is transparent and therefore useless if <color> is omitted.  Live examples  box-shadow test box-shadow tutorial and examples      -moz-box-shadow: 60px -16px teal; -webkit-box-shadow: 60px -16px teal;         box-shadow: 60px -16px teal;      -moz-box-shadow: 10px 5px 5px black; -webkit-box-shadow: 10px 5px 5px black;         box-shadow: 10px 5px 5px black;      -moz-box-shadow: 3px 3px red, -1em 0 0.4em olive; -webkit-box-shadow: 3px 3px red, -1em 0 0.4em olive;         box-shadow: 3px 3px red, -1em 0 0.4em olive;      -moz-box-shadow: inset 5em 1em gold; -webkit-box-shadow: inset 5em 1em gold;         box-shadow: inset 5em 1em gold;       -moz-box-shadow: 0 0 1em gold; -webkit-box-shadow: 0 0 1em gold;         box-shadow: 0 0 1em gold;       -moz-box-shadow: inset 0 0 1em gold; -webkit-box-shadow: inset 0 0 1em gold;         box-shadow: inset 0 0 1em gold;  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 10.0 1.0 -webkit 4.0 (2.0)  3.5 (1.9.1)  -moz 9.0 10.5 5.1 (WebKit 534) 3.0 (WebKit 522) -webkit   Multiple shadows 10.0 1.0 -webkit 4.0 (2.0)  3.5 (1.9.1)  -moz 9.0 10.5 5.1 (WebKit 534) 3.0 (WebKit 522) -webkit   inset keyword 10.0 4.0 -webkit 4.0 (2.0)  3.5 (1.9.1)  -moz 9.0 10.5 5.1 (WebKit 534) 5.0 (WebKit 533) -webkit   Spread radius 10.0 4.0 -webkit 4.0 (2.0)  3.5 (1.9.1)  -moz 9.0 10.5 5.1 (WebKit 534) 5.0 (WebKit 533) -webkit         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support ? ? ? ?   Multiple shadows ? ? ? ?   inset keyword ? ? ? ?   Spread radius ? ? ? ?     Notes  Since version 5.5, Internet Explorer supports Microsoft's DropShadow and Shadow Filter. You can use this proprietary extension to cast a drop shadow (though the syntax and the effect are different from CSS3). Shadows affect layout in older Gecko, Presto, and WebKit; e.g. if you cast an outer shadow to a box with a width of 100%, you'll see a scrollbar.  Notes  Since version 5.5, Internet Explorer supports Microsoft's DropShadow and Shadow Filter. You can use this proprietary extension to cast a drop shadow (though the syntax and the effect are different from CSS3). Shadows affect layout in older Gecko, Presto, and WebKit; e.g. if you cast an outer shadow to a box with a width of 100%, you'll see a scrollbar.  Specifications   CSS3 Backgrounds and Borders Module: box-shadowCR  \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/box-sizing","title":"box-sizing","description":"The box-sizing CSS property is used to alter the default CSS box model used to calculate widths and heights of elements. It is possible to use this property to emulate the behavior of browsers that do not correctly support the CSS box model specification. Mozilla browsers like Firefox support -moz-box-sizing.  Initial value : content-box  Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax box-sizing:       content-box | border-box -moz-box-sizing:  content-box | border-box | padding-box  Values  content-box This is the default style as specified by the CSS standard. The width and height properties are measured including only the content, but not the border, margin, or padding. padding-box The width and height properties include the padding size, and do not include the border or margin. Non-standard      padding-box isn't part of CSS3-UI and only supported by Firefox (Gecko). border-box The width and height properties include the padding and border, but not the margin. This is the box model used by Internet Explorer when the document is not in standards-compliant mode.  Examples \/* support Firefox, Safari\/WebKit, Opera and IE8 *\/  .example {    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;     box-sizing:        border-box; } Notes See   bug 243412  and its dependents:  -moz-box-sizing doesn't apply to table cells min-height\/max-height does not work for -moz-box-sizing: border-box  Specifications  CSS3 Basic User Interface #box-sizing  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   prefixed support 1.0 -webkit-box-sizing 1.0\u00a0(1.0) -moz-box-sizing \u00a0 \u00a0 3.0\u00a0(522) -webkit-box-sizing   standard support 10 box-sizing --\u00a0  bug 243412  8.0 box-sizing 7.0 box-sizing 5.1\u00a0(534.12)  box-sizing         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support (Supported) (Supported) Mango 7.5 (Supported) (Supported)     See also CSS box model"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/caption-side","title":"caption-side","description":"The caption-side property positions the content of table-caption at the specified side.  Initial value : top Applies to: 'table-caption' elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  caption-side: top | bottom | left | right | inherit  Values  top caption box will be above the table. bottom caption box will be below the table. left caption box will be on the left side of the table. This Value is dropped from CSS 2.1 but supported in Gecko (Firefox). right caption box will be on the right side of the table. This Value is dropped from CSS 2.1 but supported in Gecko (Firefox).  Examples  View Live Examples  .contentbox table-caption {   caption-side: bottom; }  Specifications  CSS 2 Table\u00a0 (out of date) CSS 2.1 Table #caption-side  Browser Compatibility     Desktop Mobile       Feature Chrome Firefox Internet Explorer Opera Safari   Basic support 1.0 1.0 8.0 4.0 1.0         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   caption-side , table-layout , border-collapse , border-spacing , empty-cells"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/clear","title":"clear","description":"The clear property specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them.  Initial value : none  Applies to: block-level elements (including floats) Inherited : No Media: visual   Computed value : as specified  Syntax  clear: none | left | right | both | inherit  Values  none Element is not moved down to clear past floating elements. left Element is moved down to clear past left floats. right Element is moved down to clear past right floats. both Element is moved down to clear past both left and right floats.  Examples  View Live Examples  h1 { clear: none } h2 { clear: right } If you want an element to contain all floating elements inside it, you can either float the container as well, or use clear  #container:after { content: \".\"; line-height: 0; height: 0; display:\u00a0block; visibility: hidden; clear: both; }  Notes The clear property applies to both floating and non-floating elements. When it applies to non-floating blocks, it moves the border edge of the element down until it is below the margin edge of all relevant floats. This movement (when it happens) causes margin collapsing not to occur. When it applies to floating elements, it moves the margin edge of the element below the margin edge of all relevant floats. This affects the position of later floats, since later floats cannot be positioned higher than earlier ones. The floats that are relevant to be cleared are the earlier floats within the same block formatting context. Specifications  CSS 1 Box properties #clear CSS 2.1 Visual formatting model #clear  Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  float  Box model"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/clip","title":"clip","description":"The clip CSS property defines what portion of an element is visible. The clip property applies only to elements with position:absolute .  Initial value : auto Applies to: absolutely positioned elements Inherited : no Percentages: n\/a Media: visual   Computed value : A rectangle consisting of four computed lengths; otherwise, as specified  Syntax  clip:  <shape> | auto | inherit   Values  <shape> A rectangular shape of the form  rect(<top>, <right>, <bottom>, <left>)   \/* standard syntax *\/  or  rect(<top> <right> <bottom> <left>)      \/* backwards compatible syntax *\/ where <top> and <bottom> specify offsets from the top border edge of the box, and <right>, and <left> specify offsets from the left border edge of the box.   <top>, <right>, <bottom>, and <left> may either have a  <length>  value or auto. auto The element does not clip (default value)  Examples  p     { border:dotted;  position:relative; }  #img2 { position:absolute;  left:263px;          clip: rect(40px, 200px, 150px, 30px);          \/* standard syntax, unsupported by Internet Explorer 4-7 *\/       }  #img3 { position:absolute;  left:526px;          clip: rect(40px  200px  150px  30px);         \/* non-standard syntax, but supported by all major browsers including Firefox and IE *\/       }     Specifications  CSS 2.1 Visual effects #clipping  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 7.0 1.0 (85)   8.0 Correct comma syntax supported in this version.         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Related CSS properties: text-overflow , white-space , overflow-x , overflow-y , overflow , display , position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/clip-path","title":"clip-path","description":"\u00a0  Initial value : See The initial clipping path: 'overflow' and 'clip' properties Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value :  Syntax  clip-path: <uri> | none | inherit  Values \u00a0uri : <uri> | none | inherit \u00a0 Examples  .target { clip-path: url(#c1); }  .anothertarget { clip-path: url(resources.svg#c1); }  Specifications  Clipping, Masking and Compositing CSS 3 SVG SVG  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  clip-rule , mask , filter  Applying SVG effects to HTML content SVG"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/color","title":"color","description":"The color CSS property sets the foreground color of an element's text content.  Initial value : depends on user agent Applies to: all elements Inherited : yes Percentages: N\/A Media: visual   Computed value : as specified  Syntax  color:  <color> | inherit Values  <color> The color property accepts various keywords and numeric notations. See <color>  values for much details.  Examples The following are all ways to make the element's text red: \r           element { color: red } element { color: #f00 } element { color: #ff0000 } element { color: rgb(255,0,0) } element { color: rgb(100%, 0%, 0%) } element { color: hsl(0, 100%, 50%) }  \/* 50% translucent, support since Firefox 3 *\/ element { color: rgba(255, 0, 0, 0.5) }  element { color: hsla(0, 100%, 50%, 0.5) }\r          Specifications  CSS 2.1 CSS 3 Color #color Working draft  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 3.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     For the browser compatibility table for the various values, see <color> . See also  <color>  values Color Chart by VisiBone  \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/columns","title":"columns","description":"The columns CSS property is a shorthand property allowing to set both the column-width  and the column-count  properties at the same time.  Initial value : auto  for both properties Applies to: non-replaced block-level elements (except table elements), table cells, and inline-blocks elements Inherited : no Percentages: n\/a Media: visual   Computed value : specified value for the column-count part, the length for the column-width part Syntax columns: <column-count> || <column-width>  where :  <column-width> Is a  <length>  value giving a hint of the optimal width of the column. The actual column width may be wider (to fill the available space), or narrower (only if the available space is smaller than the specified column width). The length must be strictly positive or the declaration is invalid. <column-count> Is a strictly positive <integer>   describing the ideal number of columns into which the content of the element will be flowed. If the column-width  is also set to a non-auto value, it merely indicates the maximum allowed number of columns.  Examples .content-box {   border: 10px solid #000000;   columns:3; }  Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 9 (9) -moz 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-count","title":"column-count","description":"The column-count CSS property describes the number of columns of the element.  Initial value : auto  Applies to: non-replaced block-level elements (except table elements), table cells, and inline-blocks elements Inherited : no Percentages: n\/a Media: visual   Computed value : specified value  Syntax column-count: integer     or column-count: auto  where :  auto Is a keyword indicating that the number of columns should be determined by other CSS properties, like column-width . integer Is a strictly positive <integer>   describing the ideal number of columns into which the content of the element will be flowed. If the column-width  is also set to a non-auto value, it merely indicates the maximum allowed number of columns.  Examples .content-box {   border: 10px solid #000000;   column-count:3; }  Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 1.5 (1.8) -moz 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-gap","title":"column-gap","description":"The column-gap CSS property sets the size of the gap between columns for elements which are specified to display as a multi-column element.  Initial value : normal  Applies to: all multi-column elements Inherited : no Percentages: n\/a Media: visual   Computed value : absolute length or 'normal'  Syntax column-gap: length     or column-gap: normal  where :  normal Is a keyword indicating to use the browser-defined default spacing between columns. The specification, and most modern browsers follow it, recommends this keyword to be equal to a length of 1em. length Is a  <length>  value defining the size of the gap between columns. It must not be negative, but may be equal to 0.  Examples .content-box {   border: 10px solid #000000;   column-count: 3;   column-gap: 20px; }  Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 1.5 (1.8) -moz [*] 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     [*] Before Firefox 3 (Gecko 1.9), the default value associated to the normal keyword was 0 and not 1em. See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule","title":"column-rule","description":"In multi-column layouts, the column-rule CSS property specifies a straight line, or \"rule\", to be drawn between each column. It is a convenient shorthand to avoid setting each of the individual column-rule-* properties separately : column-rule-width , column-rule-style  and column-rule-color .  Initial value : medium none  currentColor Applies to: all multi-column elements Inherited : no Media: visual   Syntax column-rule:  <border-width> || <border-style> || <color>  Values Accepts one, two or three values in any order:  <border-width> Optional, is one value or keyword of:\u00a0  <length>  | thin | medium | thick  Default value medium is used if absent. See border-width  for details. <border-style> Required, default value none is used if absent. See border-style  for possible values and details. <color> Optional, see <color>  value. Default value if absent: currentColor , the value of the element's color  property (foreground color).  Examples p.foo { column-rule: dotted; }          \/* same as \"medium dotted currentColor\" *\/ p.bar { column-rule: solid blue; }      \/* same as \"medium solid blue\" *\/ p.baz { column-rule: solid 8px; }       \/* same as \"8px solid currentColor\" *\/ p.abc { column-rule: thick inset blue; }  Live Example  padding:0.3em; background:gold; border:groove 2px gold; column-rule: inset 2px gold; column-width:17em; Live Example  padding:0.3em; background:gold; border:groove 2px gold; column-rule: inset 2px gold; column-width:17em; Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 3.5 (1.9.1) -moz 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?    \u00a0 See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule-color","title":"column-rule-color","description":"The column-rule-color CSS property lets you set the color of the rule drawn between columns in multi-column layouts.  Initial value : currentColor  Applies to: all elements Inherited : no Media: visual   Computed value : computed like the one of the color  property  Syntax column-rule-color:  <color>  Values  <color>\u00a0 See <color>  values.  Example #header {column-rule-color:  blue;}  Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 3.5 (1.9.1) -moz 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?    \u00a0  See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule-style","title":"column-rule-style","description":"The column-rule-style CSS property lets you set the style of the rule drawn between columns in multi-column layouts.  Initial value : none  Applies to: all multi-column elements Inherited : no Media: visual   Computed value : as specified  Syntax column-rule-style:  <border-style>  Values  <border-style>\u00a0 See border-style   Example #header {-moz-column-rule-style: inset;}  Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 3.5 (1.9.1) -moz 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?    \u00a0  See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule-width","title":"column-rule-width","description":"The column-rule-width CSS property lets you set the width of the rule drawn between columns in multi-column layouts.  Initial value : none  Applies to: all multi-column elements Inherited : no Media: visual   Computed value : absolute length; 0 if the column rule style is none or hidden  Syntax column-rule-width:  <border-width>  Values  <border-width>\u00a0 See border-width .  Example #header {column-rule-width: thick;}  Specifications    Specification Status Comment     CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 3.5 (1.9.1) -moz 10 11.1 3.0 (522) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?    \u00a0  See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-width","title":"column-width","description":"The column-width CSS property suggests an optimal column width. This is not a absolute value but a mere hint. Browser will adjust the width of the column around that suggested value, allowing to achieve scalable designs that fit different screen size. Especially in presence of the column-count  CSS property which has precedence, to set an exact column width, all length values must be specified. In horizontal text these are width , column-width , column-gap , and column-rule-width .  Initial value : auto  Applies to: non-replaced block-level elements (except table elements), table cells, and inline-blocks elements Inherited : no Percentages: n\/a Media: visual   Computed value : the absolute length Syntax column-width: length        or column-width: auto   where :  length Is a  <length>  value giving a hint of the optimal width of the column. The actual column width may be wider (to fill the available space), or narrower (only if the available space is smaller than the specified column width). The length must be strictly positive or the declaration is invalid. auto Is a keyword indicating that the width of the column should be determined by other CSS properties, like column-count .  Examples .content-box {   border: 10px solid #000000;   column-width: 300px; }  Specifications    Specification Status Comment     CSS Writing Modes Module Level 3 Working Draft  Adds intrinsic sizes via the keywords min-content, max-content, fill-available and fit-content.   CSS Multi-column Layout Module Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 1.5 (1.8) -moz 10 11.1 3.0 (522) -webkit   Intrinsic sizes -- -- -- -- --         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   Intrinsic sizes -- -- -- -- --     See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/content","title":"content","description":"The content CSS property is used with the :before  and :after  pseudo-elements to generate content in an element.  Initial value : normal  Applies to: pseudo-elements :before and :after Inherited : no Media: all Computed value :  on :before and :after, normal computes to none  on elements, always computes to normal for URI values, the absolute URI for attr() values, the resulting string for other keywords, as specified.    Syntax  content: normal | none |         [ <string> | <uri> | <counter> | attr() |           open-quote | close-quote | no-open-quote | no-close-quote ]+ | inherit Values  none The pseudo-element is not generated. normal Computes to none for the :before and :after pseudo-elements. <string> Text content. <uri> url() The value is a URI that designates an external resource (such as an image). If the resource or image can't be displayed, it is either ignored or some placeholder shows up. <counter> [fixme] Counters may be specified with two different functions: 'counter()' or 'counters()'. The former has two forms: 'counter(name)' or 'counter(name, style)'. The generated text is the value of the innermost counter of the given name in scope at this pseudo-element; it is formatted in the indicated style ('decimal' by default). The latter function also has two forms: 'counters(name, string)' or 'counters(name, string, style)'. The generated text is the value of all counters with the given name in scope at this pseudo-element, from outermost to innermost separated by the specified string. The counters are rendered in the indicated style ('decimal' by default). See the section on automatic counters and numbering for more information. The name must not be 'none', 'inherit' or 'initial'. Such a name causes the declaration to be ignored. attr(X) Returns the value of the element's attribute X as a string. If there is no attribute X, an empty string is returned. The case-sensitivity of attribute names depends on the document language. open-quote | close-quote These values are replaced by the appropriate string from the quotes  property. no-open-quote | no-close-quote Introduces no content, but increments (decrements) the level of nesting for quotes.  Examples   q:lang(en) { quotes: '\"' '\"' \"'\" \"'\" }  q:before   { content: open-quote }  q:after    { content: close-quote }   h1:before  { content: \"Chapter: \"; }             \/* content accepts multiple values *\/   a:before   { content: url(http:\/\/www.mozilla.org\/favicon.ico) \" MOZILLA: \";                font:    x-small Arial,freeSans,sans-serif;               color:   gray;             }   View on jsFiddle  Specifications  CSS 2.1 Generated content  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 8.0 4.0 1.0 (85)   url() support 1.0 1.0 (1.0) 8.0 7.0 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also :after , :before , quotes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/counter-increment","title":"counter-increment","description":"counter-increment is used to increase the value of CSS Counters by a given value.  Initial value : Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value :  Syntax  counter-increment: [<identifier> <integer>?]+ | inherit | none  Values  identifier The name of the counter to increment. integer The value to add to the counter. Defaults to 1 if not given.  You may specify as many counters to increment as you want, each separated by a space. Related properties  counter-reset resets specified CSS Counters to a given amount.  Examples  h1 {   counter-increment: chapter section 2 page;   \/* Increases the value of the chapter and page counters by 1      and the section counter by 2. *\/ }  Notes Specifications  CSS 2.1  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 (?) 8.0 9.2 3.0 (?)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also CSS Counters, counter-reset"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/counter-reset","title":"counter-reset","description":"counter-reset is used to reset CSS Counters to a given value.  Initial value : Applies to: all elements Inherited : no Percentages: N\/A Media: visual   Computed value :  Syntax  counter-reset: [<identifier> <integer>?]+ | inherit | none  Values  identifier The name of the counter to reset. integer The value to reset the counter to on each occurrence of the element. Defaults to 0 if not given.  You may specify as many counters to reset as you want, each separated by a space. Related properties  counter-increment increases the value of specified CSS Counters by a given amount.  Examples  h1 {   counter-reset: chapter section 1 page;   \/* Sets the chapter and page counters to 0      and the section counter to 1. *\/ }  Notes Specifications  CSS 2.1  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 (?) 8.0 9.2 3.1 (?)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also CSS Counters, counter-increment"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/cursor","title":"CSS cursor","description":"The cursor CSS property specifies the mouse cursor displayed when the mouse pointer is over an element.  Initial value : auto  Applies to: all elements Inherited : Yes Media: visual  , interactive   Computed value : as specified (if a keyword)  Syntax  CSS 2.1  cursor: [ [ <uri>  ,]*    [ auto | crosshair | default | help | move | pointer  | progress | text | wait | e-resize |      ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize ] ] ] | inherit   CSS 3  cursor: [ [ <uri>  [<x> <y>]?,]*    [ auto | default | none | context-menu | help | pointer | progress | wait | cell |      crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed |      e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize |     sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize |     col-resize | row-resize | all-scroll ] ] | inherit  Values  <uri> Optional. A url(\u2026) or a comma separated list url(\u2026), url(\u2026), \u2026 , pointing to an image file. More than one <uri>  may be provided as fallback, in case some cursor image types are not supported. A non-URL fallback (one ore more of the other values) must be at the end of the fallback list. See Using URL values for the cursor property for more details. <x> <y> Optional x- and y-coordinates (not supported by Internet Explorer). Two unit-less numbers.  Supported CSS standard values    Category CSS value move mouse over for testing \u00a0 Description   General auto \u00a0 The browser determines the cursor to display based on the current context. E.g. equivalent to text when hovering text.   default  Default cursor, typically an arrow.   none \u00a0 No cursor is rendered  New in Firefox 3    Links & status context-menu  A context menu is available under the cursor. In Gecko\/Firefox not implemented on Windows,   bug 258960  WONTFIX.   help  Indicating help is available.   pointer  E.g. used when hovering over links, typically a hand.   progress  The program is busy in the background but the user can still interact with the interface (unlike for wait).   wait  The program is busy (sometimes an hourglass or a watch).   Selection cell  Indicating that cells can be selected.   crosshair  Cross cursor, often used to indicate selection in a bitmap.   text  Indicating text can be selected, typically an I-beam.   vertical-text  Indicating that vertical text can be selected, typically a sideways I-beam.   Drag and drop alias  Indicating an alias or shortcut is to be created.   copy  Indicating that something can be copied.   move  The hovered object may be moved.   no-drop Cursor showing that a drop is not allowed at the current location.   bug 275173  on Windows, \"no-drop is the same as not-allowed\".   not-allowed  Cursor showing that something cannot be done.   Resize & scrolling all-scroll  Cursor showing that something can be scrolled in any direction (panned).   bug 275174  on Windows, \"all-scroll is the same as move\".   col-resize  The item\/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating.   row-resize  The item\/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.   n-resize  Some edge is to be moved. For example, the se-resize cursor is used when the movement starts from the south-east corner of the box.   e-resize    s-resize    w-resize    ne-resize    nw-resize    se-resize    sw-resize    ew-resize \u00a0 Indicates a bidirectional resize cursor.   ns-resize \u00a0   nesw-resize \u00a0   nwse-resize \u00a0    Mozilla extensions    CSS value Description dropped deprecated since   -moz-cell   Obsolete, use cell. Gecko 1.9.2 (Firefox 3.6) Gecko 1.8 (Firefox 1.5)   -moz-alias   Obsolete, use alias. Gecko 2 (Firefox 4)   -moz-context-menu   Obsolete, use context-menu.   -moz-copy   Obsolete, use copy.   -moz-spinning   Obsolete, use progress. Gecko 1.7.1 (Firefox 1.0)       -moz-grab \u00a0 An element can be grabbed.  This cursors are not recommended for use on public web pages. Use of custom image cursors may provide better cross browser compatibility.    -moz-grabbing \u00a0 An element is currently being grabbed.   -moz-zoom-in \u00a0 An element is actually being resized, enlarged or is actually being magnified.   bug 204841    -moz-zoom-out \u00a0 An element is actually being resized, reduced or is actually being zoomed out.   bug 204841     Supported CSS standard values    Category CSS value move mouse over for testing \u00a0 Description   General auto \u00a0 The browser determines the cursor to display based on the current context. E.g. equivalent to text when hovering text.   default  Default cursor, typically an arrow.   none \u00a0 No cursor is rendered  New in Firefox 3    Links & status context-menu  A context menu is available under the cursor. In Gecko\/Firefox not implemented on Windows,   bug 258960  WONTFIX.   help  Indicating help is available.   pointer  E.g. used when hovering over links, typically a hand.   progress  The program is busy in the background but the user can still interact with the interface (unlike for wait).   wait  The program is busy (sometimes an hourglass or a watch).   Selection cell  Indicating that cells can be selected.   crosshair  Cross cursor, often used to indicate selection in a bitmap.   text  Indicating text can be selected, typically an I-beam.   vertical-text  Indicating that vertical text can be selected, typically a sideways I-beam.   Drag and drop alias  Indicating an alias or shortcut is to be created.   copy  Indicating that something can be copied.   move  The hovered object may be moved.   no-drop Cursor showing that a drop is not allowed at the current location.   bug 275173  on Windows, \"no-drop is the same as not-allowed\".   not-allowed  Cursor showing that something cannot be done.   Resize & scrolling all-scroll  Cursor showing that something can be scrolled in any direction (panned).   bug 275174  on Windows, \"all-scroll is the same as move\".   col-resize  The item\/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating.   row-resize  The item\/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.   n-resize  Some edge is to be moved. For example, the se-resize cursor is used when the movement starts from the south-east corner of the box.   e-resize    s-resize    w-resize    ne-resize    nw-resize    se-resize    sw-resize    ew-resize \u00a0 Indicates a bidirectional resize cursor.   ns-resize \u00a0   nesw-resize \u00a0   nwse-resize \u00a0    Mozilla extensions    CSS value Description dropped deprecated since   -moz-cell   Obsolete, use cell. Gecko 1.9.2 (Firefox 3.6) Gecko 1.8 (Firefox 1.5)   -moz-alias   Obsolete, use alias. Gecko 2 (Firefox 4)   -moz-context-menu   Obsolete, use context-menu.   -moz-copy   Obsolete, use copy.   -moz-spinning   Obsolete, use progress. Gecko 1.7.1 (Firefox 1.0)       -moz-grab \u00a0 An element can be grabbed.  This cursors are not recommended for use on public web pages. Use of custom image cursors may provide better cross browser compatibility.    -moz-grabbing \u00a0 An element is currently being grabbed.   -moz-zoom-in \u00a0 An element is actually being resized, enlarged or is actually being magnified.   bug 204841    -moz-zoom-out \u00a0 An element is actually being resized, reduced or is actually being zoomed out.   bug 204841     Notes   Gecko 2.0 note(Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)   Support for loading a cursor from a URI was added for Mac OS\u00a0X in Gecko 2.0; prior to that it was not supported on OS\u00a0X.  Examples   View Live Examples CSS 2.1 and CSS 3 cursor propery test   .foo { cursor: crosshair; }  .bar { cursor: move;  cursor: cell; }  \/* use move if cell isn't supported *\/   .baz { url(hyper.cur), auto }  \/* standard cursor value as fallback must be provided *\/  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   auto | crosshair | default | move | text | wait | help | n-resize | e-resize | s-resize |w-resize | ne-resize | nw-resize | se-resize | sw-resize \u00a01.0 \u00a01.0 (1.0) \u00a04.0 \u00a07.0 1.2 (125)   \u00a0hand Non-standard     (use pointer) \u00a0--   \u00a0--   \u00a04.0 \u00a07.0 --\u00a0   \u00a0pointer \u00a01.0 \u00a01.0 (1.0) \u00a06.0 \u00a07.0 \u00a01.2 (125)   \u00a0progress \u00a01.0 \u00a01.0 (1.7.1) \u00a06.0 \u00a07.2 \u00a03.0 (522)   url() See Using URL values  \u00a01.0 \u00a01.5 (1.8) \u00a06.0 \u00a0--   \u00a03.0 (522-523)   not-allowed | no-drop | vertical-text | all-scroll | col-resize | row-resize \u00a01.0 \u00a01.5 (1.8) --   \u00a0--   \u00a03.0 (522)   none \u00a05.0 \u00a03.0 (1.9) --   \u00a0--   \u00a05.0 (533)   inherit 1.0 1.0 8.0 9.0 1.2         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 User Interface #cursor CSS 3 User Interface #cursor Cursor Property (MSDN)  See also  Using URL values for the cursor property pointer-events  Webkit's cursor demos\u00a0(including the extended ones: zoom, zoom-out, grab, grabbing)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/direction","title":"direction","description":"The direction property should be set to match the direction of the text: rtl for Hebrew or Arabic text and ltr for other scripts. This should normally be done as part of the document (e.g., using the dir attribute in HTML) rather than through direct use of CSS. The property sets the base text direction of block-level elements and the direction of embeddings created by the unicode-bidi  property. It also sets the default alignment of text and block-level elements and the direction that cells flow within a table row.  Initial value : ltr  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  direction: [ ltr | rtl | inherit ]\u00a0;  Values  ltr\u00a0 The default value of direction. Text and other elements go from left to right rtl\u00a0 Text and other elements go from right to left  For the direction property to have any effect on inline-level elements, the unicode-bidi  property's value must be 'embed' or 'override'. Examples  blockquote {   direction\u00a0: rtl\u00a0; }  Notes Unlike the dir attribute in HTML, the direction property is not inherited from table columns into table cells, since CSS inheritance follows the document tree, and table cells are inside of the rows but not inside of the columns. Specification  CSS 2.1 CSS 3 Text Module  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 (1.7 or earlier)  5.5 9.2 1.3         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1.0)  6 8 3.1     See also unicode-bidi"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/display","title":"display","description":"The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser\/user default stylesheet. The default value in XML is inline. In addition to the many different display box types, the value none allows the display of an element to be turned off; all child elements also have their display turned off. The document is rendered as though the element did not exist in the document tree.  Initial value : inline Applies to: all elements Inherited : no Media: visual   Computed value : as specified, except for root element, floated elements, and absolutely positioned elements  Syntax display:  <display-value> | inherit  Values <display-value> can be any of the following values:  none Turns off the display of an element (it has no effect on layout); all child elements also have their display turned off. The document is rendered as though the element did not exist. To render an element box's dimensions, yet have its contents be invisible, see the visibility  property. inline The element generates one or more inline element boxes. block The element generates a block element box. inline-block  Requires Gecko 1.9  Introduced in CSS 2.1. The element generates a block element box that will be flowed with surrounding content as if it were a single inline box (behaving much like a replaced element would). list-item The element generates a block box for the content and a separate list-item inline box. compact Unsupported, dropped from the CSS 2.1 standard. run-in Dropped from the final CSS 2.1 standard (but may be in CSS\u00a03), but supported by other browsers.  Unimplemented (see  bug 2056 )  in Gecko\/Firefox  If the run-in box contains a block box, same as block. If a block box follows the run-in box, the run-in box becomes the first inline box of the block box. If a inline box follows, the run-in box becomes a block box.   table Behaves like the <table> HTML element. inline-table  New in Firefox 3  The inline-table value does not have a direct mapping in HTML. table-caption Behaves like the <caption> HTML element. table-column | table-column-group These elements behave like the corresponding <col> and <colgroup> HTML elements. table-header-group | table-row-group | table-footer-group These elements behave like the corresponding <thead> | <tbody> | <tfoot> HTML elements. table-row Behaves like the <tr> HTML element. table-cell Behaves like the <td> HTML element.  Mozilla Extensions These display values are not intended for use in web content. [fixme: needs update]  -moz-inline-block   Obsolete Never supported reliably. -moz-inline-table   Obsolete Never supported. -moz-box Child elements are laid out horizontally or vertically (based on the value of the -moz-box-orient  property). -moz-inline-box  -moz-groupbox  -moz-grid  -moz-inline-grid Child elements are laid out as a XUL grid . -moz-grid-group Child elements are laid out as a group of grid columns or rows. This is the layout used by the rows and columns elements. You can use the orientation (-moz-box-orient) to set which direction. Rows would normally have vertical orientation and columns would have a horizontal orientation. -moz-grid-line Child elements are laid out as a single column or row of a grid. You can use the orientation (-moz-box-orient) to set which direction. -moz-stack Child elements are laid out one on top of each other like the XUL stack  element. -moz-inline-stack Child elements, including inline-block, block, and -moz-inline-stack are laid out atop one another. -moz-deck Child elements are laid out one on top of each other like the XUL deck  element. Unlike a stack, only the top element is displayed. -moz-popup  -moz-marker   Mozilla Extensions These display values are not intended for use in web content. [fixme: needs update]  -moz-inline-block   Obsolete Never supported reliably. -moz-inline-table   Obsolete Never supported. -moz-box Child elements are laid out horizontally or vertically (based on the value of the -moz-box-orient  property). -moz-inline-box  -moz-groupbox  -moz-grid  -moz-inline-grid Child elements are laid out as a XUL grid . -moz-grid-group Child elements are laid out as a group of grid columns or rows. This is the layout used by the rows and columns elements. You can use the orientation (-moz-box-orient) to set which direction. Rows would normally have vertical orientation and columns would have a horizontal orientation. -moz-grid-line Child elements are laid out as a single column or row of a grid. You can use the orientation (-moz-box-orient) to set which direction. -moz-stack Child elements are laid out one on top of each other like the XUL stack  element. -moz-inline-stack Child elements, including inline-block, block, and -moz-inline-stack are laid out atop one another. -moz-deck Child elements are laid out one on top of each other like the XUL deck  element. Unlike a stack, only the top element is displayed. -moz-popup  -moz-marker   Examples  View Live Examples p.secret  { display: none } <p style=\"display:none\"> invisible text <\/p>  Notes \"Block\" versus \"in-line\" elements  Block-level elements create vertically distinct blocks of content - generally using a line-break before and after the content. Only this value for the display is allowed to generate a positioned element. Block behavior is exhibited by such HTML elements as <p>, <div>, <blockquote> or <h1>. display property values creating a block element type: block, list-item, table, compact and run-in.   In-line elements do not create distinct blocks of content; element content is rendered using a line box (content is distributed line by line within a containing physical or virtual block element.) In-line behavior is exhibited by such HTML elements as physical and virtual character formatting, non-floated images and unmarked content. display property values creating an in-line element type: inline, inline-block, inline-table and run-in. An inline element's height is fixed to height of line which contains this element, so its height cannot be changed by CSS properties such as \"padding\" or \"margin\" except \u00a0\"line-height\".   Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  XBL bindings and display:none  Starting in Gecko 2.0, XBL\u00a0bindings are no longer attached to elements when in subtrees of the DOM styled with display:\u00a0none when they're first accessed from JavaScript, unless the elements in question are XUL.\"Block\" versus \"in-line\" elements  Block-level elements create vertically distinct blocks of content - generally using a line-break before and after the content. Only this value for the display is allowed to generate a positioned element. Block behavior is exhibited by such HTML elements as <p>, <div>, <blockquote> or <h1>. display property values creating a block element type: block, list-item, table, compact and run-in.   In-line elements do not create distinct blocks of content; element content is rendered using a line box (content is distributed line by line within a containing physical or virtual block element.) In-line behavior is exhibited by such HTML elements as physical and virtual character formatting, non-floated images and unmarked content. display property values creating an in-line element type: inline, inline-block, inline-table and run-in. An inline element's height is fixed to height of line which contains this element, so its height cannot be changed by CSS properties such as \"padding\" or \"margin\" except \u00a0\"line-height\".   Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  XBL bindings and display:none  Starting in Gecko 2.0, XBL\u00a0bindings are no longer attached to elements when in subtrees of the DOM styled with display:\u00a0none when they're first accessed from JavaScript, unless the elements in question are XUL.Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   none | inline | block 1.0 1.0 (1.0) 4.0 7.0 1.0 (85)   inline-block 1.0 3.0 (1.9) 5.5 (-7.0) natural inline elements only 7.0 1.0 (85)   list-item 1.0 1.0 (1.0) 6.0 7.0 1.0 (85)   run-in Non-standard      1.0 Not before inline-elements --\u00a0 8.0 7.0 1.0 (85) Not before inline-elements   4.0 5.0 (532.5)   inline-table 1.0 3.0 (1.9) 8.0 7.0 1.0 (85)   CSS 2.1 values 1.0 1.0 (1.0) except run-in, inline block, and inline-table 8.0 7.0 1.0 (85)   3.0 (1.9)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Visual formatting #display  See also visibility , float , position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/empty-cells","title":"empty-cells","description":"empty-cells CSS property specifies how user agent should render borders and backgrounds around cells that have no visible content.  Initial value : show Applies to: 'table-cell' elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  empty-cells: show | hide | inherit  Values  inherit  show borders and backgrounds should be drawn like a normal cells hide no borders or backgrounds should be drawn  Examples  View Live Examples  .contentbox td {   empty-cells: show; }  Specification  CSS 2.1 Tables #empty-cells  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  8.0 4.0 1.2         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1 1.0 (1.0)  8 6 3.1     See also   caption-side , table-layout , border-collapse , border-spacing , empty-cells"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/float","title":"float","description":"The float CSS property specifies that an element should be taken from the normal flow and placed along the left or right side of its container, where text and inline elements will wrap around it.  Initial value : none  Applies to: all elements Inherited : no Media: visual   Computed value : as specified  A floating element is one where the Computed value  of float is not none. Note: If you're referring to this property from JavaScript as a member of the element.style object, you must spell it at cssFloat. Also note that Internet Explorer versions 8 and older spelled this styleFloat. This is an exception to the rule that the name of the DOM member is the camel-case name of the dash-separated CSS name.Syntax  float:  left | right | none | inherit  Values  left The element floats on the left side of its containing block. right The element floats on the right side of its containing block. none The element does not float.  Examples  View Live Examples \r           <style type=\"text\/css\">   div { border: solid red;  max-width: 70ex; }   h4  { float: left;  margin: 0; } <\/style>   <div>   <h4>HELLO!<\/h4>   This is some text. This is some text. This is some text.   This is some text. This is some text. This is some text.   This is some text. This is some text. This is some text.   This is some text. This is some text. This is some text. <\/div>\r           HELLO! This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. \u00a0 HELLO! This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text.How floats are positioned As mentioned above, when an element is floated it is taken out of the normal flow of the document.\u00a0 It is shifted to the left or right until it touches the edge of it's containing box or another floated element. In the image below, there are three red squares.\u00a0 Two are floated left and one is floated right.\u00a0 Note that the second \"left\" red square is placed to the right of the first.\u00a0 Additional squares\u00a0 would continue to stack to the right until they filled the containing box, after which they would wrap to the next line.  Clearing floats In the example above, the floated elements are shorter vertically than the block of text they're floated within. However, if the text was not long enough to wrap below the bottom of all the floats, we might see unanticipated effects. If the paragraph above, for instance, only read \"Lorem ipsum dolor sit amet,\" and was followed by another heading of the same style as the \"Floats Example\" heading, the second heading would appear between the red boxes. Most likely, we want the next heading to be aligned all the way to the left. To accomplish that, we'd need to clear the floats. The simplest way to clear the floats in this example is to add the clear  property to the new heading we want to be sure is aligned left:  h2.secondHeading { clear: both; }  However, this method only works if there are no other elements within the same block formatting context that we do want the heading to continue to appear next to horizontally. If our H2 has siblings which are a sidebars floated to the left and right, using clear will force it to appear below both sidebars, which is probably not what we want. If clearing floats on an element below them is not an option, another approach is to limit the block formatting context of the floats' container. Referring to the example above again, it appears that all three red boxes are within a P element. We can set the overflow  property on that P to hidden or auto to cause it to expand to contain them, but not allow them to drop out the bottom of it:  p.withRedBoxes { overflow: hidden; height: auto; }  Note: Setting overflow to scroll will also contain any floated child elements, but will show scrollbars no matter the height of the content. Here we're setting height to auto even though that's the default to indicate that the container should grow to accommodate its content.Clearing floats In the example above, the floated elements are shorter vertically than the block of text they're floated within. However, if the text was not long enough to wrap below the bottom of all the floats, we might see unanticipated effects. If the paragraph above, for instance, only read \"Lorem ipsum dolor sit amet,\" and was followed by another heading of the same style as the \"Floats Example\" heading, the second heading would appear between the red boxes. Most likely, we want the next heading to be aligned all the way to the left. To accomplish that, we'd need to clear the floats. The simplest way to clear the floats in this example is to add the clear  property to the new heading we want to be sure is aligned left:  h2.secondHeading { clear: both; }  However, this method only works if there are no other elements within the same block formatting context that we do want the heading to continue to appear next to horizontally. If our H2 has siblings which are a sidebars floated to the left and right, using clear will force it to appear below both sidebars, which is probably not what we want. If clearing floats on an element below them is not an option, another approach is to limit the block formatting context of the floats' container. Referring to the example above again, it appears that all three red boxes are within a P element. We can set the overflow  property on that P to hidden or auto to cause it to expand to contain them, but not allow them to drop out the bottom of it:  p.withRedBoxes { overflow: hidden; height: auto; }  Note: Setting overflow to scroll will also contain any floated child elements, but will show scrollbars no matter the height of the content. Here we're setting height to auto even though that's the default to indicate that the container should grow to accommodate its content.Specifications  CSS 2.1 Visual formatting #float  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  clear , display , position  Block formatting context"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font","title":"font","description":"The font CSS property has two different use cases:  font is a shorthand property for setting font-style , font-variant , font-weight , font-size , line-height  and font-family  in a single CSS declaration. The font property stets the element's font to a system font.   Initial value : see individual properties Applies to: all elements Inherited : yes Percentages: see individual properties Media: visual   Computed value : see individual properties  Syntax  font:   [ font-style || font-variant || font-weight ]? font-size [ \/ line-height ]? font-family   font:   caption | icon | menu | message-box | small-caption | status-bar | inherit |         -moz-window | -moz-document | -moz-workspace | -moz-desktop | -moz-info |         -moz-dialog | -moz-button | -moz-pull-down-menu | -moz-list | -moz-field  Values Using the font shorthand property sets the longhand properties as specified, and sets all other font-related properties to their initial values. See font-style , font-variant , font-weight , font-size , line-height , and font-family  for legal values of each property. System Fonts System fonts can also be specified using the font property, instead of specifying individual longhand properties:  caption The font used for captioned controls (e.g., buttons, drop-downs, etc.). icon The font used to label icons. menu The font used in menus (e.g., dropdown menus and menu lists). message-box The font used in dialog boxes. small-caption The font used for labeling small controls. status-bar The font used in window status bars.  Mozilla Extensions  -moz-window The default system font used in windows. -moz-document  -moz-workspace  -moz-desktop  -moz-info  -moz-dialog  -moz-button  -moz-pull-down-menu  -moz-list  -moz-field   System Fonts System fonts can also be specified using the font property, instead of specifying individual longhand properties:  caption The font used for captioned controls (e.g., buttons, drop-downs, etc.). icon The font used to label icons. menu The font used in menus (e.g., dropdown menus and menu lists). message-box The font used in dialog boxes. small-caption The font used for labeling small controls. status-bar The font used in window status bars.  Mozilla Extensions  -moz-window The default system font used in windows. -moz-document  -moz-workspace  -moz-desktop  -moz-info  -moz-dialog  -moz-button  -moz-pull-down-menu  -moz-list  -moz-field   Examples  View Live Examples  \/* Set the font size to 12px and the line height to 14px. Set the font family to sans-serif *\/ p { font: 12px\/14px sans-serif }   \/* Set the font size to 80% of the parent element or default value (if no parent element present)  and set the font family to sans-serif *\/  p { font: 80% sans-serif }   \/* Set the font weight to bold, the font-style to italic, the font size to large,  and the font family to serif. *\/ p { font: bold italic large serif }   \/* Use the same font as the status bar of the window *\/ p { font: status-bar } Notes The font-size  and font-family  parts of the shorthand are mandatory. Omitting them is a syntax error, and causes the entire declaration to be ignored. Properties for which no values are given are set to their initial value, which is normal for all properties that can be omitted (font-style , font-variant , font-weight , and line-height ). The font-size-adjust  property is also set to its initial value (none) when the font  shorthand property is specified. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Shorthand 1.0 1.0 (1.0) 3.0-4.0 3.5 1.0 (85)   System fonts 1.0 1.0 (1.0) 4.0-5.5 6.0 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Fonts #font CSS 3 User interface #system-fonts Candidate recommendation, not yet implemented  See also  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-family","title":"font-family","description":"The font-family CSS property allows for a prioritized list of font family names and\/or generic family names to be specified for the selected element. Unlike most other CSS properties, values are separated by a comma to indicate that they are alternatives. It is often convenient to use the shorthand property font  to set font-size and other font related properties at one go.  Initial value : depends on user agent Applies to: all elements Inherited : yes Media: visual   Computed value : as specified  Syntax  font-family:  <family-or-generic-name> [, <family-or-generic-name>]* | inherit   Values <family-or-generic-name> is either a family-name or a generic-family.  family-name The name of a font family. For example, \"Times\" and \"Helvetica\" are font families. Font family names containing whitespace should be quoted. generic-family Generic font families are a fallback mechanism, a means of preserving some of the style sheet author's intent in case when none of the specified fonts are available. Generic family names are keywords and must not be quoted. A generic font family should be the a last alternative in the list of font family names.  serif Glyphs have finishing strokes, flared or tapering ends, or have actual serifed endings. E.g.\u00a0 Palatino, \"Palatino Linotype\", Palladio, \"URW Palladio\", serif sans-serif Glyphs have stroke endings that are plain. E.g. 'Trebuchet MS', 'Liberation Sans', 'Nimbus Sans L', sans-serif cursive Glyphs in cursive fonts generally have either joining strokes or other cursive characteristics beyond those of italic typefaces. The glyphs are partially or completely connected, and the result looks more like handwritten pen or brush writing than printed letterwork. fantasy Fantasy fonts are primarily decorative fonts that contain playful representations of characters. monospace All glyphs have the same fixed width. E.g. \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace    Examples  View Live Examples  body     { font-family: \"Gill Sans Extrabold\", Helvetica, sans-serif }  .receipt { font-family: Courier, \"Lucida Console\", monospace }  Notes You should always specify a generic family name as the last value in the font-family property. The font-family property specifies a list of fonts, from highest priority to lowest. Font selection does not simply stop at the first font named in the list that is on the user's system. Rather, font selection is done one character at a time, so that if an available font does not have a glyph that can display a character needed, the later available fonts are tried. However, this doesn't work in Internet Explorer. When a font is only available in some styles, variants, or sizes, those properties may also influence which font family is chosen. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 3.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Fonts #font-family CSS 3 Fonts #font-family Working draft  See also  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-size","title":"font-size","description":"The font-size property specifies the size of the font. The font size may, in turn, change the size of other items, since it is used to compute the value of em and ex length units.  Initial value : medium  Applies to: all elements Inherited : Yes Percentages: relative to parent element's font size Media: visual   Computed value : absolute length  Syntax  font-size: xx-small | x-small | small | medium | large | x-large | xx-large font-size: smaller | larger font-size: <length> | <percentage> | inherit   Values  xx-small, x-small, small, medium, large, x-large, xx-large\u00a0 A set of absolute size keywords based on the user's default font size (which is medium). Similar to presentational HTML's <font size=\"1\"> through <font size=\"7\"> where the user's default font size is <font size=\"3\">. larger, smaller\u00a0 Larger or smaller than the parent element's font size, by roughly the ratio used to separate the absolute size keywords above. length  A positive length. When the units are specified in em or ex,\u00a0 the size is defined relative to the size of the font on the parent element of the element in question. For example, 0.5em is half the font size of the parent of the current element. percentage A positive percentage of the parent element's font size.  It is best to avoid using values that are not relative to the user's default font size, such as lengths with units other than em or ex. However, if such values must be used, px are preferred over other units because their meaning does not vary depending on what the operating system thinks (generally incorrectly) the resolution of the monitor is. Possible approaches There are several ways to specify the font size, with keywords or numerical values for pixels or ems. Choose the appropriate method based on the needs for the particular web page. Keywords Keywords are a good way to set the size of fonts on the web. By setting a keyword font size on the body element, you can set relative font-sizing everywhere else on the page, giving you the ability to easily scale the font up or down on the entire page accordingly. Pixels Setting the font size in pixel values (px) is a good choice when you need pixel accuracy. A px value is static. This is an OS-independent and cross-browser way of literally telling the browsers to render the letters at exactly the number of pixels in height that you specified. The results may vary slightly across browsers, as they may use different algorithms to achieve a similar effect. Font sizing settings can also be used in combination. For example, if a parent element is set to 16px and its child element is set to larger, the child element displays larger than the parent element in the page. Note:\u00a0Defining font sizes in pixel is not accessible, because the user cannot change the font size from the browser. (For example, users with limited vision may wish to set the font size much larger than the size chosen by a web designer.) Therefore, avoid using pixels for font sizes if you wish to create an inclusive design. Ems Another way of setting the font size is with em values. The size of an em value is dynamic. When defining the font-size property, an em is equal to the size of the font that applies to the parent of the element in question. If you haven't set the font size anywhere on the page, then it is the browser default, which is probably 16px. So, by default 1em = 16px, and 2em = 32px. If you set a font-size of 20px on the body element, then 1em = 20px and 2em = 40px. Note that the value 2 is essentially a multiplier of the current em size. In order to calculate the em equivalent for any pixel value required, you can use this formula:  em = desired element pixel value \/ parent element font-size in pixels For example, suppose the font-size of the body of the page is set to 1em, with the browser standard of 1em = 16px; if the font-size you want is 12px, then you should specify 0.75em (because 12\/16 = 0.75). Similarly, if you want a font size of 10px, then specify 0.625em (10\/16 = 0.625); for 22px, specify 1.375em (22\/16). A popular technique to use throughout the document is to set the the font-size of the body to 62.5% (that is 62.5% of the default of 16px), which equates to 10px, or 0.625em. Now you can set the font-size for any elements using em units, with an easy-to-remember conversion, by dividing the px value by 10. This way 6px = 0.6em, 8px = 0.8em, 12px = 1.2em, 14px = 1.4em, 16px = 1.6em. For example:  body {   font-size: 62.5%; \/* font-size 1em = 10px *\/ } p {   font-size: 1.6em; \/* 1.6em = 16px *\/ } \u00a0The em is a very useful unit in CSS, since it can adapt automatically to the font that the reader chooses to use. Keywords Keywords are a good way to set the size of fonts on the web. By setting a keyword font size on the body element, you can set relative font-sizing everywhere else on the page, giving you the ability to easily scale the font up or down on the entire page accordingly. Pixels Setting the font size in pixel values (px) is a good choice when you need pixel accuracy. A px value is static. This is an OS-independent and cross-browser way of literally telling the browsers to render the letters at exactly the number of pixels in height that you specified. The results may vary slightly across browsers, as they may use different algorithms to achieve a similar effect. Font sizing settings can also be used in combination. For example, if a parent element is set to 16px and its child element is set to larger, the child element displays larger than the parent element in the page. Note:\u00a0Defining font sizes in pixel is not accessible, because the user cannot change the font size from the browser. (For example, users with limited vision may wish to set the font size much larger than the size chosen by a web designer.) Therefore, avoid using pixels for font sizes if you wish to create an inclusive design. Ems Another way of setting the font size is with em values. The size of an em value is dynamic. When defining the font-size property, an em is equal to the size of the font that applies to the parent of the element in question. If you haven't set the font size anywhere on the page, then it is the browser default, which is probably 16px. So, by default 1em = 16px, and 2em = 32px. If you set a font-size of 20px on the body element, then 1em = 20px and 2em = 40px. Note that the value 2 is essentially a multiplier of the current em size. In order to calculate the em equivalent for any pixel value required, you can use this formula:  em = desired element pixel value \/ parent element font-size in pixels For example, suppose the font-size of the body of the page is set to 1em, with the browser standard of 1em = 16px; if the font-size you want is 12px, then you should specify 0.75em (because 12\/16 = 0.75). Similarly, if you want a font size of 10px, then specify 0.625em (10\/16 = 0.625); for 22px, specify 1.375em (22\/16). A popular technique to use throughout the document is to set the the font-size of the body to 62.5% (that is 62.5% of the default of 16px), which equates to 10px, or 0.625em. Now you can set the font-size for any elements using em units, with an easy-to-remember conversion, by dividing the px value by 10. This way 6px = 0.6em, 8px = 0.8em, 12px = 1.2em, 14px = 1.4em, 16px = 1.6em. For example:  body {   font-size: 62.5%; \/* font-size 1em = 10px *\/ } p {   font-size: 1.6em; \/* 1.6em = 16px *\/ } \u00a0The em is a very useful unit in CSS, since it can adapt automatically to the font that the reader chooses to use. Examples  View Live Examples \r           \/* Set paragraph text to be very large. *\/ p { font-size: xx-large }  \/* Set h1 (level 1 heading) text to be 2.5 times the size  * of the text around it. *\/ h1 { font-size: 250% }  \/* Sets text enclosed within span tag to be 16px *\/ span { font-size: 16px; }\r          Notes em and ex units on the font-size  property are relative to the parent element's font size (unlike all other properties, where they're relative to the font size on the element). This means em units and percentages do the same thing for font-size . Specifications  CSS 2.1 CSS3 Fonts  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 5.5 9.2 1.3         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-size-adjust","title":"font-size-adjust","description":"The font-size-adjust CSS property specifies that font size should be chosen based on the height of lowercase letters rather than the height of capital letters. This is useful since the legibility of fonts, especially at small sizes, is determined more by the size of lowercase letters than by the size of capital letters. This can cause problems when the first-choice font-family  is unavailable and its replacement has a significantly different aspect ratio (the ratio of the size of lowercase letters to the size of the font). To do this in a way that is compatible with browsers that do not support font-size-adjust, it is specified as a number that the font-size  property is multiplied by. This means the value specified for the property should generally be the aspect ratio of the first choice font. For example, a style sheet that specifies  font-size: 16px;  font-size-adjust: 0.5; is really specifying that the lowercase letters of the font should be 8px high (0.5 \u00d7 16px).  Initial value : none  Applies to: all elements Inherited : yes Percentages: N\/A Media: visual   Computed value : as specified  Syntax  font-size-adjust:  <number> | none | inherit  Values  none Choose the size of the font based only on the font-size  property. <number>  Choose the size of the font so that its lowercase letters (as determined by the x-height metric of the font) are the specified number times the font-size . The number specified should generally be the aspect ratio (ratio of x-height to font size) of the first choice font-family . This will mean that the first choice font, when available, will appear the same size in browsers, whether or not they support font-size-adjust.   Examples  View Live Examples \r           p {    font: 12px Verdana, \"DejaVu Sans\", sans-serif;    font-size-adjust: 0.58; }\r         Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support --\u00a0 1.0 (1.0) Windows only --\u00a0 --\u00a0 --\u00a0   3.0 (1.9)  All platforms         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? 1.0 (1.9.2)  ? ? ?     Specifications This property was specified in CSS 2, but removed from CSS 2.1. It may come back in CSS 3.  CSS 2 Fonts #font-size-adjust May 1998, obsolete CSS 3 Fonts #font-size-adjust Working draft  See also  David Baron about font-size-adjust  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-stretch","title":"font-stretch","description":"The font-stretch CSS property selects a normal, condensed, or extended face from a font family.  Initial value : normal  Applies to: all elements Inherited : Yes Percentages: N\/A Media: visual   Computed value : specified value  Syntax  font-stretch:  inherit |                 ultra-condensed | extra-condensed | condensed | semi-condensed |                normal | semi-expanded | expanded | extra-expanded | ultra-expanded |                wider | narrower Values  normal Specifies a normal font face. semi-condensed, condensed, extra-condensed, ultra-condensed Specifies a font face condensed than normal, with ultra-condensed as the most condensed. semi-expanded, expanded, extra-expanded, ultra-expanded Specifies a font face expanded than normal, with ultra-expanded as the most expanded. wider, narrower  Deprecated since CSS 3  Relative values. The wider and narrower keywords indicate values relative to the values of the parent element. \u00a0  Examples  h1 { font-stretch: extra-expanded } p  { font-stretch: condensed }  Specifications  font-stretch was defined in CSS 2, but dropped in CSS 2.1 due lack of implementation experience. It's newly drafted in CSS 3. The\u00a0relative values\u00a0wider\u00a0and\u00a0narrower\u00a0have been dropped from the\u00a0font-stretch\u00a0property in the\u00a0CSS Fonts Module Level 3 Working Draft (24 March 2011).  CSS 2 1998-05-12 Fonts #font-styling Obsolete CSS 3 Fonts #font-stretch Editor's draft, handle with care!\u00a0  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support -- 9.0 (9.0)  [1] [*] 9.0 [*] -- --         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support -- 9.0 (9.0)  [2] [*] ? -- --     [*] Implements the CSS Fonts Module Level 3 specification. Hence do not support the deprecated wider and narrower keywords.See also  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-style","title":"font-style","description":"The font-style CSS property allows italic or oblique faces to be selected within a font-family .    Initial value : normal  Applies to: all elements Inherited : yes Media: visual   Computed value : specified value  Syntax  font-style:  normal | italic | oblique | inherit   Values Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face. Oblique faces can be simulated by artificially sloping the glyphs of the regular face.  normal selects a font that is classified as normal within a font-family  italic selects a font that is labeled italic, if that is not available, one labeled oblique  oblique selects a font that is labeled oblique   Example  This paragraph is italic. This paragraph is oblique. The above example shows the two font-style values. The CSS looks like this: \r           p.italic { font-style:italic }  p.oblique { font-style: oblique }\r          And the HTML\u00a0looks like this: \r           <p class=\"italic\">This paragraph is italic.<\/p> <p class=\"oblique\">This paragraph is oblique.<\/p>\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  1.0 1.0 3.5 1.0         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support 1.0 (1.9.2)  ? ? ? ?     Specifications  CSS 2.1 Fonts #font-style CSS 3 Fonts #font-style Working draft  See also  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-variant","title":"font-variant","description":"The font-variant CSS property selects a normal, or small-caps face from a font family. Setting font-variant is also possible by using the font  shorthand.  Initial value : normal  Applies to: all elements Inherited : Yes Percentages: N\/A Media: visual   Computed value : specified value  Syntax  font-variant:  normal | small-caps | inherit  Values  normal Specifies a normal font face. small-caps Specifies a font that is labeled as a small-caps font. If a small-caps font is not available, Mozilla (Firefox) and other browsers will simulate a small-caps font, i.e. by taking a normal font and replacing the lowercase letters by scaled uppercase characters.  Examples  p { font-variant: small-caps } Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Fonts #font-variant  See also  text-transform   font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-weight","title":"font-weight","description":"The font-weight  property specifies the weight or boldness of the font. However, some fonts are not available in all weights; some are available only on normal and bold.  Initial value : normal  Applies to: all elements Inherited : yes Percentages: N\/A Media: visual   Computed value : One of the numeric values (100, etc.), or one of the numeric values plus one of the relative values (bolder or lighter)  Syntax font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit  Values  normal\u00a0 Normal font weight. Same as 400. bold\u00a0 Bold font weight. Same as 700. lighter\u00a0 One font weight lighter than the parent element (among the available weights of the font). bolder\u00a0 One font weight darker than the parent element (among the available weights of the font). 100, 200, 300, 400, 500, 600, 700, 800, 900\u00a0 Numeric font weights for fonts that provide more than just normal and bold. If the exact weight given is unavailable, then 600-900 use the closest available darker weight (or, if there is none, the closest available lighter weight), and 100-500 use the closest available lighter weight (or, if there is none, the closest available darker weight). This means that for fonts that provide only normal and bold, 100-500 are normal, and 600-900 are bold.  Examples  View Live Examples  \/* Set paragraph text to be bold. *\/ p {font-weight: bold}  \/* Set h1 (level 1 heading) text to one step darker than    normal but less than a standard bold. *\/ h1 {font-weight: 500}  \/* Sets text enclosed within span tag to be one step lighter    than the parent. *\/ span {font-weight: lighter}  Notes Specifications  CSS 1 CSS 2.1 CSS 3  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 (1.7 or earlier)  3.0 3.5 1.3         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1)  6.0 6.0 3.1     See also  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face   \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/height","title":"height","description":"The height CSS property specifies the height of the content area of an element. The content area is inside the padding, border, and margin of the element.  Initial value : auto  Applies to: block level and replaced elements Inherited : no Percentages: refer to the height of the containing block, see below Media: visual   Computed value : the percentage or auto or the absolute length Syntax  height:  <length> | <percentage> | auto | inherit  Values  <length> See  <length>  for possible units. <percentage> The <percentage>  is calculated with respect to the height of the containing block. If the height of the containing block is not specified explicitly, the value computes to auto. A percentage height on the root element (e.g. <html>) is relative to the viewport. auto The browser will calculate and select a width for the specified element.  Examples  View the live example   table { height: 100%; }  img { height: 200px; }  form { height: auto; }  \/* make sure percentage height of body's children works as expected *\/ html, body { margin: 0; height: 100%; }  Notes The min-height  and max-height  properties override height . Specifications  CSS 2.1 #height  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also box model, width , box-sizing , min-height , max-height"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/hyphens","title":"hyphens","description":"The hyphens property tells the browser how to go about splitting words to improve the layout of text when line-wrapping. Note: The rules defining how hyphenation is performed are not explicitly defined by the specification, so the exact hyphenation may vary from browser to browser.  Initial value : manual Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax hyphens:  none |\u00a0manual | auto  Values  none Words are not broken at line breaks, even if characters inside the words suggest line break points. Lines will only wrap at whitespace. manual Words are broken for line-wrapping only where characters inside the word suggest line break opportunities. See Suggesting line break opportunities for details. auto The browser is free to automatically break words at appropriate hyphenation points, following whatever rules it chooses to use. Suggested line break opportunities, as covered in Suggesting line break opportunities, should be preferred over automatically selecting break points whenever possible.  Note: The auto setting's behavior depends on the language being properly tagged so that the appropriate hyphenation rules can be selected. You must specify a language using the lang HTML\u00a0attribute in order to guarantee that automatic hyphenation is applied in the language of your choice.   Suggesting line break opportunities There are two Unicode character that can be used to manually specify potential line break points within text:  U+2010 (HYPHEN) The \"hard\"\u00a0hyphen character indicates a visible line break opportunity. Even if the line is not actually broken at that point, the hyphen is still rendered. U+00AD (SHY) An invisible, \"soft\" hyphen. This character is not rendered visibly; instead, it suggests a place where the browser might choose to break the word if necessary. In HTML, you can use &shy; to insert a soft hyphen.  Example This CSS snippet creates three classes, one for each possible configuration of the hyphens property. \r           p.none {   -moz-hyphens: none;   hyphens: none; } p.manual {   -moz-hyphens: manual;   hyphens: manual; } p.auto {   -moz-hyphens: auto;   hyphens: auto; }\r          Take a look at the live example to see these configurations in action; resize the window while looking at them to see how hyphenation is handled in your browser.  View the live example  Specifications  CSS 3 Text:\u00a0hyphens CSS 3 Generated content: hyphens  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ?  6.0 (6.0)  -moz Automatic hyphenation only works for languages whose hyphenation dictionaries are integrated in Gecko. See this note for a complete list of such languages.    10.0  -ms Automatic hyphenation only works for languages whose hyphenation dictionaries are integrated in Internet Explorer. See this note for a complete list of such languages.  ?  5.1 -webkit            Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ?  6.0 (6.0)  -moz Automatic hyphenation only works for languages whose hyphenation dictionaries are integrated in Gecko. See this note for a complete list of such languages.  ? ? ?     Languages support notes Various browsers supplies hyphenation dictionaries for the following languages:    Language Firefox IE   Afrikaans (af) 8.0 \u00a0   Bulgarian (bg) 8.0 \u00a0   Catalan (ca) 8.0 10.0   Czech \u00a0 10.0   Swiss German, Traditional\u00a0Orthography (de-CH) 8.0 \u00a0   Danish (da) 8.0 10.0   Dutch (nl) 8.0 10.0   English (en) ?? 10.0   English, United States (en-US) 6.0 10.0   Esperanto (eo) 8.0 \u00a0   Estonian (et) 8.0 \u00a0   Finnish (fi) 8.0 \u00a0   French (fr) 8.0 10.0   Galician (gl) 9.0 \u00a0   German, Traditional\u00a0Orthography (de-1901) 8.0 ??   German, Reformed Orthography (de-1996) 8.0 10.0   Hungarian (hu) 9.0 \u00a0   Icelandic (is) 8.0 \u00a0   Interlingua (ia) 8.0 \u00a0   Italian (it) 9.0 10.0   Kurmanji (kmr) 8.0 \u00a0   Latin (la) 8.0 \u00a0   Lithuanian (lt) 8.0 \u00a0   Mongolian (mn) 8.0 \u00a0   Norwegian Bokm\u00e5l (nb) 8.0 10.0   Norwegian Nynorsk (nn) 8.0 10.0   Polish \u00a0 10.0   Portuguese (pt) 8.0 10.0   Brazilian Portuguese \u00a0 10.0   Russian (ru) 8.0 10.0   Serbo-Croatian (sh) 8.0 \u00a0   Slovenian (sl) 8.0 \u00a0   Spanish (es) 8.0 10.0   Swedish (sv) 8.0 10.0   Turkish (tr) 9.0 10.0   Ukrainian (uk) 9.0 \u00a0   Upper Sorbian (hsb) 8.0 \u00a0   Welsh (cy) 8.0 \u00a0    Languages support notes Various browsers supplies hyphenation dictionaries for the following languages:    Language Firefox IE   Afrikaans (af) 8.0 \u00a0   Bulgarian (bg) 8.0 \u00a0   Catalan (ca) 8.0 10.0   Czech \u00a0 10.0   Swiss German, Traditional\u00a0Orthography (de-CH) 8.0 \u00a0   Danish (da) 8.0 10.0   Dutch (nl) 8.0 10.0   English (en) ?? 10.0   English, United States (en-US) 6.0 10.0   Esperanto (eo) 8.0 \u00a0   Estonian (et) 8.0 \u00a0   Finnish (fi) 8.0 \u00a0   French (fr) 8.0 10.0   Galician (gl) 9.0 \u00a0   German, Traditional\u00a0Orthography (de-1901) 8.0 ??   German, Reformed Orthography (de-1996) 8.0 10.0   Hungarian (hu) 9.0 \u00a0   Icelandic (is) 8.0 \u00a0   Interlingua (ia) 8.0 \u00a0   Italian (it) 9.0 10.0   Kurmanji (kmr) 8.0 \u00a0   Latin (la) 8.0 \u00a0   Lithuanian (lt) 8.0 \u00a0   Mongolian (mn) 8.0 \u00a0   Norwegian Bokm\u00e5l (nb) 8.0 10.0   Norwegian Nynorsk (nn) 8.0 10.0   Polish \u00a0 10.0   Portuguese (pt) 8.0 10.0   Brazilian Portuguese \u00a0 10.0   Russian (ru) 8.0 10.0   Serbo-Croatian (sh) 8.0 \u00a0   Slovenian (sl) 8.0 \u00a0   Spanish (es) 8.0 10.0   Swedish (sv) 8.0 10.0   Turkish (tr) 9.0 10.0   Ukrainian (uk) 9.0 \u00a0   Upper Sorbian (hsb) 8.0 \u00a0   Welsh (cy) 8.0 \u00a0    See also content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/image-rendering","title":"image-rendering","description":"The image-rendering property provides a hint to the user agent about how to handle its image rendering. image-rendering applies to scaled images (and other elements, see below). For example, if the natural size of the image is 100\u00d7100px but the page author specifies the dimensions to 200\u00d7200px (or 50\u00d750px), then the image will be upscaled (or downscaled) to the new dimensions using the specified algorithm. Scaling may also apply due to user interaction (zooming).  Initial value : auto  Applies to:  images background-images of any element HTML5\u00a0 <video>  Element HTML5 <canvas>  Element   Inherited : yes Media: visual   Computed value : as specified  Syntax     image-rendering:  auto | inherit | optimizeSpeed | optimizeQuality | -moz-crisp-edges | -o-crisp-edges  Values  auto Default value, depends on the user agent. Since version 1.9 (Firefox 3.0), Gecko uses bilinear resampling (high quality). optimizeQuality Indicates that the user agent shall emphasize quality over rendering speed. Gecko uses bilinear resampling (high quality). optimizeSpeed The user agent should use a resampling algorithm which achieves the goal of fast rendering. Currently Gecko (Firefox) uses nearest neighbor resampling (low quality). -moz-crisp-edges | -o-crisp-edges Mozilla extension. Gecko (Firefox) always uses nearest neighbor resampling (low quality). Use this value to avoid upscaled images with sharp edges getting blurry.   bug 423756 . -webkit-optimize-contrast WebKit extension (  WebKit bug 56627). WebKit uses a pixelation-generating resampling. The algorithm for now seems to be nearest-neighbor, but this can be WebKit-port specific, and there are other algorithms that can be used as well. Use this value to avoid upscaled images with sharp edges getting blurry.    Currently auto and optimizeQuality are equal by default, both result in bilinear resampling. Currently optimizeSpeed and -moz-crisp-edges are equal, both result in nearest neighbor resampling.  Warning: Unlike the gecko rendering engine, optimizeSpeed\u00a0and -webkit-optimize-contrast do not mean the same thing  in WebKit.    Examples     img  {         image-rendering: optimizeQuality;  \/* Firefox 3.6+; default behavior is identical, no need to specify *\/        -ms-interpolation-mode: bicubic;   \/* Internet Explorer 7.0; default in IE8+ *\/      }     \/* applies to GIF and PNG images; avoids blurry edges *\/  img[src$=\".gif\"], img[src$=\".png\"] {                    \u00a0image-rendering: -moz-crisp-edges;         \/* Firefox *\/                    -ms-interpolation-mode: nearest-neighbor;  \/* IE *\/                  }     html  { image-rendering: -moz-crisp-edges; }        \/* all images, videos, background-images *\/ img   { -ms-interpolation-mode: nearest-neighbor; } \/* all images, IE *\/      div {          background: url(chessboard.gif) no-repeat 50% 50%;         image-rendering: -moz-crisp-edges; }     video { image-rendering: optimizeSpeed; } Live Examples image-rendering:optimizeQuality; -ms-interpolation-mode:bicubic; 78% 100% 138% downsized upsized image-rendering:-moz-crisp-edges; image-rendering: -o-crisp-edges; image-rendering:-webkit-optimize-contrast; -ms-interpolation-mode:nearest-neighbor; 78% 100% 138% downsized upsized Live Examples image-rendering:optimizeQuality; -ms-interpolation-mode:bicubic; 78% 100% 138% downsized upsized image-rendering:-moz-crisp-edges; image-rendering: -o-crisp-edges; image-rendering:-webkit-optimize-contrast; -ms-interpolation-mode:nearest-neighbor; 78% 100% 138% downsized upsized Notes    bug 486918  (Awful image quality in downscaling)  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support  -- Note: Should get the landed -webkit-optimize-contrast WebKit patch soon.   3.6 (1.9.2) image-rendering 7.0 -ms-interpolation-mode: bicubic | nearest-neighbor  applies only to images (JPG, GIF, PNG, ...) in IE7 only for images without transparency does not inherit default value IE7: nearest-neighbor (low quality) default value IE8+: bicubic\u00a0\u00a0\u00a0 (high quality)    11.60 image-rendering: auto | -o-crisp-edges | optimizeSpeed | optimizeQuality   6533.21.1, r86920 image-rendering: auto | optimizeSpeed | optimizeQuality | -webkit-optimize-contrast  -webkit-optimize-contrast is similar to -moz-crisp-edges, in that it selects the pixelation algorithm over the blurry algorithm for scaling. Pixelated scaling algorithm for now seems to be nearest-neighbor. -webkit-optimize-contrast implemented in the WebKit nightlies as of May 20th, 2011.           Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also\u00a0 Microsoft MSDN -ms-interpolation-mode property Canvas can provide a fallback solution for crisp-edge\/optimize-contrast through manual imageData manipulation. Specifications image-rendering is an SVG property, it is not defined in any CSS standard. Gecko (Firefox)and Presto (Opera) apply it also to HTML and XML content. SVG 1.1 Painting #image-rendering"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/ime-mode","title":"ime-mode","description":"The ime-mode CSS property controls the state of the input method editor for text fields.  Initial value : auto  Applies to: text fields Inherited : no Media: visual   Computed value : ?  Syntax  ime-mode:  auto | normal | active | inactive | disabled Values  auto No change is made to the current input method editor state. This is the default. normal The IME state should be normal; this value can be used in a user style sheet to override the page setting. This value is not supported by Internet Explorer. active The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it. Not supported on Linux. inactive The input method editor is initially inactive, but the user may activate it if they wish. Not supported on Linux. disabled The input method editor is disabled and may not be activated by the user.  Values  auto No change is made to the current input method editor state. This is the default. normal The IME state should be normal; this value can be used in a user style sheet to override the page setting. This value is not supported by Internet Explorer. active The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it. Not supported on Linux. inactive The input method editor is initially inactive, but the user may activate it if they wish. Not supported on Linux. disabled The input method editor is disabled and may not be activated by the user.  Examples  <input type=\"text\" name=\"name\" value=\"initial value\" style=\"ime-mode: disabled\"> This example disables input method support for a field; this might be necessary for fields that enter data into a database that doesn't support extended character sets, for example. Notes Unlike in Internet Explorer, the Firefox implementation of ime-mode allows this property to apply to password editing fields. However, this does not make for an ideal user experience, and password fields should disable the IME. Users may correct the inappropriate behavior of sites that don't follow this recommendation by placing the following CSS into their user CSS file:  input[type=password] {     ime-mode: auto !important; } Note:\u00a0In general, it's not appropriate for a public web site to manipulate the IME mode setting. This property should be used for web applications and the like.  The Macintosh version of Gecko 1.9 (Firefox 3) can't recover the previous state of the IME when a field for which it is disabled loses focus, so Mac users may get grumpy when you use the disabled value. Note:\u00a0Don't rely on disabling IME to prevent extended characters from passing through your form. Even with IME disabled, users can still paste extended characters into your form's fields.  Specifications   CSS Basic User Interface Module Level 3: ime-modeED  -ms-ime-mode Attribute | imeMode Property  It was introduced by Microsoft with IE5 as a proprietary extension.Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support -- 3.0 (1.9) 5.0 -- --         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     IE8 introduced -ms-ime-mode as a synonym for ime-mode. Don't use the -ms- prefix."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/left","title":"left","description":"The left property specifies part of the position of positioned elements. For absolutely positioned elements (those with position : absolute or position: fixed), it specifies the distance between the left margin edge of the element and the left edge of its containing block.  Initial value : auto  Applies to: positioned elements Inherited : no Percentages: refer to width of containing block Media: visual   Computed value : absolute length, percentage, or auto  Syntax  left: <length> | <percentage> | auto | inherit\u00a0;  Values   <length> \u00a0 A length, can be negative, zero, or positive. <percentage> \u00a0 A percentage of the containing block's width.  Examples  View the live example  \u00a0  #example_3 { \u00a0\u00a0width: 600px; \u00a0\u00a0height: 400px; \u00a0\u00a0background-color: #FFC7E4; \u00a0\u00a0position: relative; \u00a0\u00a0top: 20px; \u00a0\u00a0left: 20px; }  #example_4 { \u00a0\u00a0width:200px; \u00a0\u00a0height:200px; \u00a0\u00a0background-color: #FFD7C2; \u00a0\u00a0position:absolute; \u00a0\u00a0bottom:10px; \u00a0\u00a0right: 20px; } Notes Specifications  CSS 2.1 CSS 3  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  5.5 5 1.0         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also position , top , right , bottom  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/letter-spacing","title":"letter-spacing","description":"The letter-spacing CSS property specifies spacing behavior between text characters.  Initial value : normal  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : normal or absolute length  Syntax  letter-spacing:  normal | <length>  Values  normal The spacing is the normal spacing for the current font. This value allows the user agent to alter the space between characters in order to justify text. That's the difference to the length value 0. <length> Indicates inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. User agents may not further increase or decrease the inter-character space in order to justify text. See  <length>  values for possible units.  Examples Having a css style of: \r           p { letter-spacing: 0.4em }\r          and a webpage with the code: \r           <p> letter spacing <\/p>\r          will produce the following: letter spacing   Here are some more letter spacing examples: letter-spacing: 0.1em letter-spacing: 0.5em letter-spacing: 0.8em letter-spacing: 1em letter-spacing: -0.05em letter-spacing: 6px  \u00a0 Specifications  CSS 2.1 Text #letter-spacing SVG 1.1 Text #letter-spacing  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   HTML support 1.0 1.0 (1.7 or earlier)  4.0 3.5 1.0 (85)   SVG support (Supported) -- (  bug 371787 ) ? (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   HTML support ? ? ? ? ?   SVG support ? ? ? ? ?     See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/line-height","title":"line-height","description":"On inline elements, the line-height CSS property specifies the height that is used in the calculation of the line box height. On block level elements, line-height specifies the minimal height of line boxes within the element.  Initial value : normal  Applies to: all elements Inherited : yes Percentages: refer to the font size of the element itself Media: visual   Computed value : for <length> and <percentage> the absolute value; otherwise as specified  Syntax  line-height:  normal | <number>  |  <length>  | <percentage>   Values  normal Depends on the user agent. Desktop browsers (including Firefox) use a default value of roughly 1.2, depending on the element's font-family. <number> The used value is this unitless <number>  multiplied by the element's font size. The computed value is the same as the specified <number>. In most cases this is is the preferred way to set line-height with no unexpected results in case of inheritance. <length> The specified  <length>  is used in the calculation of the line box height. See  <length>  values for possible units. <percentage> Relative to the font size of the element itself. The computed value is this percentage multiplied by the element's computed font size.  Percentage and em values may have unexpected results, see \"Notes\" section.  Examples  \/* All rules below have the same resultant line height *\/  div { line-height: 1.2;   font-size: 10pt }   \/* number *\/  div { line-height: 1.2em; font-size: 10pt }   \/* length *\/  div { line-height: 120%;  font-size: 10pt }   \/* percentage *\/ div { line-height: 12pt;  font-size: 10pt }   \/* length *\/ div { font: 10pt\/1.2  Georgia,\"Bitstream Charter\",serif } Notes  It is often more convenient to set line-height by using the font  shortcut as stated in the \"Examples\" section above. Prefer a unitless number:  <style>       .green { font-size: 15px;  line-height: 1.1;  border: solid limegreen; }       .red   { font-size: 15px;  line-height: 1.1em;  border: solid red; }       h1     { font-size: 30px; }       div    { width: 19em;  display: inline-block; } <\/style>  <div class=green>  <h1>Avoid unexpected results by using unitless line-height<\/h1>   length and percentage line-heights have poor inheritance behavior ... <\/div>  <div class=red>  <h1>Avoid unexpected results by using unitless line-height<\/h1>   length and percentage line-heights have poor inheritance behavior ... <\/div>  <!-- The first <h1> line-height is calculated from its own font-size   (30px \u00d7 1.1) = 33px  -->  <!-- The second <h1> line-height results from the red div's font-size  (15px \u00d7 1.1) = 16.5px,  probably not what you want -->   Avoid unexpected results, use unitless line-height! em values and <percentage> line-heights have poor inheritance behavior, and should almost never be used in practice. Stick to unitless line-heights (such as \"1.1\").  Avoid unexpected results, use unitless line-height! em values and <percentage> line-heights have poor inheritance behavior, and should almost never be used in practice. Stick to unitless line-heights (such as \"1.1\").   Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Visual formatting #line-height  See also font , font-size  Avoid unexpected results, use unitless line-height! em values and <percentage> line-heights have poor inheritance behavior, and should almost never be used in practice. Stick to unitless line-heights (such as \"1.1\").Avoid unexpected results, use unitless line-height! em values and <percentage> line-heights have poor inheritance behavior, and should almost never be used in practice. Stick to unitless line-heights (such as \"1.1\").Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Visual formatting #line-height  See also font , font-size"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style","title":"list-style","description":"The list-style CSS property is a shorthand property for setting list-style-type , list-style-image  and list-style-position .  Initial value : see individual properties for details Applies to: elements with display: list-item Inherited : no Percentages: N\/A Media: visual   Computed value : see individual properties  Syntax  list-style:  list-style-type || list-style-position || list-style-image  Values  Accepts one, two or three keywords in any order. list-style-type See list-style-type  list-style-image See list-style-image  list-style-position See list-style-position   Examples  View the live example   ul { list-style: circle; }   #foo { list-style: square inside; } Specifications  CSS 2.1 #list-style CSS 3 Lists #list-style Working draft  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See Also list-style-type , list-style-image , list-style-position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style-image","title":"list-style-image","description":"The list-style-image CSS property sets the image that will be used as the list item marker. It is often more convenient to use the shortcut list-style .  Initial value : none  Applies to: elements with display:list-item  Inherited : yes Media: visual   Computed value : absolute URI or none  Syntax  list-style-image:  <uri>  | none | inherit  Values  <uri> Location of image to use as the marker. none Default value  Examples  View the live example   ul { list-style-image: url(\"images\/arrow.gif\") }  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 #list-style-image  See also list-style , list-style-type , list-style-position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style-position","title":"list-style-position","description":"The list-style-position CSS property specifies the position of the marker box in the principal block box. It is often more convenient to use the shortcut list-style .  Initial value : outside Applies to: elements with display:list-item Inherited : yes Percentages: N\/A Media: visual   Computed value : as specified  Syntax  list-style-position:  inside | outside | inherit  Values  outside The marker box is outside the principal block box. inside The marker box is the first inline box in the principal block box, after which the element's content flows.  Examples  View the live example     <ul>     <li>Lorem ipsum <br> dolor sit amet <br> consectetuer<\/li>     <li>sed diam nonummy <br> nibh euismod tincidunt <br> ut laoreet<\/li>   <\/ul>   ul {list-style:square; background:gold} Lorem ipsum dolor sit amet consectetuer sed diam nonummy  nibh euismod tincidunt  ut laoreet   ul {list-style:square inside; background:gold} Lorem ipsum dolor sit amet consectetuer sed diam nonummy  nibh euismod tincidunt  ut laoreet  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 10. (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 #list-style-position CSS 3 Lists #list-style-position Working draft  See also list-style , list-style-type , list-style-image"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style-type","title":"list-style-type","description":"The list-style-type CSS property specifies appearance of a list item element. As it is the only one who defaults to display:list-item, this is usually a <li>  element, but can be any element with this display  value.  Initial value  : disc Applies to : elements with display:list-item Inherited  : yes Media : visual   Computed value  : as specified  The color of the marker will be the same as the computed color of the element it applies to.Syntax list-style-type:  <list-style-type> | none | inherit  Values  none No item marker is shown.  <list-style-type> is one of the following:  disc   A filled circle (default value)   circle   A hollow circle   square   A filled square   decimal   Decimal numbers Beginning with 1.   decimal-leading-zero   Decimal numbers Padded by initial zeros (e.g., 01, 02, 03, ... 98, 99)   lower-roman   Lowercase roman numerals (i, ii, iii, iv, v, etc.)   upper-roman   Uppercase roman numerals (I, II, III, IV, V, etc.)   lower-greek   Lowercase classical Greek alpha, beta, gamma, ... (\u03b1, \u03b2, \u03b3, ...)   lower-alpha | lower-latin   Lowercase ASCII letters (a, b, c, ... z) lower-latin is unsupported in IE7 See Browser compatibility section   upper-alpha | upper-latin   Uppercase ASCII letters (A, B, C, ... Z) upper-latin is unsupported in IE7   armenian   Traditional Armenian numbering (ayb\/ayp, ben\/pen, gim\/keem, ...)   georgian   Traditional Georgian numbering (an, ban, gan, ... he, tan, in ...)    CSS2 values, dropped in CSS 2.1, but supported in Gecko\/Firefox and other browsers  hebrew   Traditional Hebrew numbering   cjk-ideographic   Plain ideographic numbers (Chinese-Japanese-Korean)   hiragana   a, i, u, e, o, ka, ki, ... (Japanese)   katakana   A, I, U, E, O, KA, KI, ... (Japanese)   hiragana-iroha   i, ro, ha, ni, ho, he, to, ...   katakana-iroha   I, RO, HA, NI, HO, HE, TO, ...    Mozilla extensions Extended set of values provided by Mozilla (Firefox) to support list types in other languages.  -moz-arabic-indic   Example   -moz-bengali   Example   -moz-cjk-earthly-branch   Example   -moz-cjk-heavenly-stem   Example   -moz-devanagari   Example   -moz-ethiopic-halehame   Example   -moz-ethiopic-halehame-am   Example   -moz-ethiopic-halehame-ti-er   Example   -moz-ethiopic-halehame-ti-et   Example   -moz-ethiopic-numeric   Example   -moz-gujarati   Example   -moz-gurmukhi   Example   -moz-hangul   Example   -moz-hangul-consonant   Example   -moz-japanese-formal   Example   -moz-japanese-informal   Example   -moz-kannada   Example   -moz-khmer   Example   -moz-lao   Example   -moz-malayalam   Example   -moz-myanmar   Example   -moz-oriya   Example   -moz-persian   Example   -moz-simp-chinese-formal   Example   -moz-simp-chinese-informal   Example   -moz-tamil   Example   -moz-telugu   Example   -moz-thai   Example   -moz-trad-chinese-formal   Example   -moz-trad-chinese-informal   Example   -moz-urdu   Example    CSS2 values, dropped in CSS 2.1, but supported in Gecko\/Firefox and other browsers  hebrew   Traditional Hebrew numbering   cjk-ideographic   Plain ideographic numbers (Chinese-Japanese-Korean)   hiragana   a, i, u, e, o, ka, ki, ... (Japanese)   katakana   A, I, U, E, O, KA, KI, ... (Japanese)   hiragana-iroha   i, ro, ha, ni, ho, he, to, ...   katakana-iroha   I, RO, HA, NI, HO, HE, TO, ...    Mozilla extensions Extended set of values provided by Mozilla (Firefox) to support list types in other languages.  -moz-arabic-indic   Example   -moz-bengali   Example   -moz-cjk-earthly-branch   Example   -moz-cjk-heavenly-stem   Example   -moz-devanagari   Example   -moz-ethiopic-halehame   Example   -moz-ethiopic-halehame-am   Example   -moz-ethiopic-halehame-ti-er   Example   -moz-ethiopic-halehame-ti-et   Example   -moz-ethiopic-numeric   Example   -moz-gujarati   Example   -moz-gurmukhi   Example   -moz-hangul   Example   -moz-hangul-consonant   Example   -moz-japanese-formal   Example   -moz-japanese-informal   Example   -moz-kannada   Example   -moz-khmer   Example   -moz-lao   Example   -moz-malayalam   Example   -moz-myanmar   Example   -moz-oriya   Example   -moz-persian   Example   -moz-simp-chinese-formal   Example   -moz-simp-chinese-informal   Example   -moz-tamil   Example   -moz-telugu   Example   -moz-thai   Example   -moz-trad-chinese-formal   Example   -moz-trad-chinese-informal   Example   -moz-urdu   Example    Examples  View the live example   ol { list-style-type: upper-alpha; }  \/* or use the shortcut \"list-style\": *\/ ol { list-style: upper-alpha; } Notes  Some list-style-types require a suitable font installed to display as expected. The CSS specification does not define how alphabetic systems wrap at the end of the alphabet. For instance, after 26 list items, upper-alpha rendering is undefined. Firefox and other browsers will continue as AA, AB, AC,... For long lists, it is recommended that authors specify true numbers. The list styles hebrew, cjk-ideographs, hiragana, katakana, hiragana-iroha and katakana-iroha are specified in CSS2 and removed from CSS 2.1 due to lack of implementation experience. They are expected to return in the CSS3 Lists module.  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support including : none, disc, circle, square, decimal, lower-alpha, upper-alpha, lower-roman, upper-roman  \u00a01.0 1.0 (1.0) 4.0 3.5 1.0 (85)   lower-latin, upper-latin, lower-greek, armenian, georgian \u00a01.0 1.0 (1.0) 8.0 6.0 1.0 (85)   decimal-leading-zero \u00a01.0 1.0 (1.0) 8.0 8.0 1.0 (85)   hebrew, cjk-ideographic, hiragana, hiragana-iroha, katakana, katakana-iroha  \u00a01.0 1.0 (1.0) -- 7.0 (displays decimal numbers) 1.0-1.2 (85-125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     For compatibility with Internet Explorer 7 (and lower) avoid lower-latin and upper-latin. Instead, use lower-alpha and upper-alpha.Specifications  CSS 2 #lists Recommendation from May 1998, superseded by CSS 2.1 CSS 2.1 #list-style-type CSS 3 Lists #list-style-type Early working draft  See also list-style , list-style-image , list-style-position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin","title":"margin","description":"The margin CSS property sets the margin for all four sides. It is a shorthand to avoid setting each side separately with the other margin properties: margin-top , margin-right , margin-bottom  and margin-left . Negative value are also allowed.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer always to the width of the containing block Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  margin:   <length> {1,4} | <percentage> {1,4} | inherit | auto  Values Accepts one, two, three or four values of the following:  <length> Specifies a fixed width. Negative Values are allowed. See for  <length>  possible units. <percentage> A <percentage>  relative to the width of the containing block. Negative values are allowed. auto auto is replaced by some suitable value, e.g. it can be used for centering of blocks. div { width:50%;\u00a0 margin:0 auto; } centers the div container horizontally.   One single value applies to all four sides. Two values apply first to top and bottom, the second one to left and right. Three values apply first to top, second to left and right and third to bottom. Four values apply to top, right, bottom and left in that order (clockwise).  Examples  margin: 5%;                \/* all sides 5% margin *\/  margin: 10px;              \/* all sides 10px margin *\/  margin: 1.6em 20px;        \/* top and bottom 1.6em, left and right 20px margin *\/  margin: 10px 3% 1em;       \/* top 10px, left and right 3%, bottom 1em margin *\/  margin: 10px 3px 30px 5px; \/* top 10px, right 3px, bottom 30px, left 5px margin *\/  margin: 1em auto;          \/* 1em margin on top and bottom, box is horizontally centered *\/  margin: auto;              \/* box is horizontally centered, 0 margin on top and bottom *\/   margin:     auto; background: gold; width:      66%;  margin:     -1em 0 100px -40px; background: plum; width:      20em Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 3.0 3.5 1.0 (85)   auto value \u00a01.0 1.0 (1.0) 6.0 (strict mode) 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Visual formatting #margin  See also    margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding  Margin collapsing"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-bottom","title":"margin-bottom","description":"The margin-bottom property of an element sets the margin space required on the bottom of an element. A negative value is also allowed.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  margin-bottom:  <length>  | <percentage>  | inherit  | auto ;  Values  <length> Specifies a fixed width. See  <length>  for possible values. <percentage> \u00a0A <percentage>  always relative to the width of the containing block. auto See margin .  Examples  .content { margin-bottom: 5%; } .sidebox { margin-bottom: 10px; } .logo    { margin-bottom: -5px; } #header  { margin-bottom:\u00a01em; }   View on jsFiddle  Specifications  CSS 1 CSS 2.1 box Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 3.0 3.5 1.0 (85)   auto value \u00a01.0 1.0 (1.0) 6.0 (strict mode) 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-left","title":"margin-left","description":"The margin-left property of an element sets the margin space required on the left side of an element. A negative value is also allowed.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  margin-left:  <length>  | <percentage>  | inherit  | auto ;  Values  <length> Specifies a fixed width. See  <length>  for possible values. <percentage> A <percentage>  always relative to the width of the containing block. auto See margin .  Examples  .content { margin-left: 5%; } .sidebox { margin-left: 10px; } .logo    { margin-left: -5px; }  Specifications  CSS 1 CSS 2.1 box Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 3.0 3.5 1.0 (85)   auto value \u00a01.0 1.0 (1.0) 6.0 (strict mode) 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-right","title":"margin-right","description":"The margin-right property of an element sets the margin space required on the right side of an element. A negative value is also allowed.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  margin-right:  <length> | <percentage>  | inherit  | auto ;  Values  <length> Specifies a fixed width. See  <length>  for possible values. <percentage> \u00a0A <percentage>  always relative to the width of the containing block. auto See margin .  Examples  .content { margin-right: 5%; } .sidebox { margin-right: 10px; } .logo    { margin-right: -5px; }  Specifications  CSS 1 CSS 2.1 box CSS 3 box  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 3.0 3.5 1.0 (85)   auto value \u00a01.0 1.0 (1.0) 6.0 (strict mode) 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-top","title":"margin-top","description":"The margin-top CSS property of an element sets the margin space required on the top of an element. A negative value is also allowed.  Initial value : 0 Applies to: inline and block elements, table, inline-table and table-caption Elements Inherited : no Percentages: refer always to width of the containing block Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  margin-top:  <length> | <percentage> | inherit | auto   Values  <length> Specifies a fixed width. See  <length>  for possible values. <percentage> \u00a0A <percentage>  always relative to the width of the containing block. auto See margin .  Examples  .content { margin-top: 5%; } .sidebox { margin-top: 10px; } .logo    { margin-top: -5px; } #footer  { margin-top:\u00a01em; }   Specifications  CSS 2.1 box #margin  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 3.0 3.5 1.0 (85)   auto value \u00a01.0 1.0 (1.0) 6.0 (strict mode) 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/marks","title":"marks","description":"This property adds crop and\/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets. Crop marks and cross marks are printed outside the page box. To have room to show crop and cross marks, the final pages will have to be somewhat bigger than the page box.  Initial value : none Applies to: page context Inherited : no Percentages: n\/a Media: visual  , paged Computed value : specified value  Syntax  marks: [ crop || cross ] | none  Values \u00a0 Examples  @page { marks: crop cross; }  Specifications  CSS Generated Content for Paged Media Module  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  bleed"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/marker-offset","title":"marker-offset","description":"\u00a0  Initial value : Applies to: Inherited : Percentages: n\/a Media: visual   Computed value :  Syntax  marker-offset: <value>  Values \u00a0 Examples  li:before { display: marker; marker-offset: 4px }   Specifications  CSS 3 SVG  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  display"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/mask","title":"mask","description":"\u00a0  Initial value : none Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : Animatable: yes  Syntax   mask: <uri> | none | inherit  Values If the value is a URI value, the element pointed to by the URI is used as an SVG mask. Examples   .target { mask: url(#c1); }  .anothertarget { mask: url(resources.svg#c1); }  Specifications  Clipping, Masking and Compositing CSS 3 SVG SVG  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Applies only to SVG elements 3.5 (1.9.1)  ? Applies only to SVG elements Applies only to SVG elements         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? 1.0 (1.9.1)  ? ? ?     See also  clip-path , filter  Applying SVG effects to HTML content SVG"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/max-height","title":"max-height","description":"The max-height CSS property is used to set the maximum height of a given element. It prevents the used value of the height  property from becoming larger than the value specified for max-height.  Initial value : none  Applies to: block level and replaced elements Inherited : no Percentages:yes, see below Media: visual   Computed value : the percentage as specified or the absolute length or none  Syntax  max-height:  <length> | <percentage> | none | inherit  Values  <length> A fixed maximum height. See  <length>  for possible units. <percentage> The <percentage>  is calculated with respect to the height of the containing block. If the height of the containing block is not specified explicitly, the percentage value is treated as none. none No limit on the height of the box.  Examples  View Live Examples (not available, please check later)   table { max-height: 75%; }  form { max-height: none; }  Notes max-height  overrides height, but min-height  overrides max-height . Specifications  CSS 2.1 #min-max-heights  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 7.0 4.0 2.0.2 (416)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also box model, max-width , box-sizing , height , min-height"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/max-width","title":"max-width","description":"The max-width CSS property is used to set the maximum width of a given element. It prevents the used value of the width  property from becoming larger than the value specified for max-width.  Initial value : none  Applies to: block level and replaced elements, for <table> see Browser compatibility below Inherited : no Percentages: refer to the width of the containing block Media: visual   Computed value : the percentage as specified or the absolute length or none  Syntax  max-width:  <length> | <percentage> | none | -moz-max-content | -moz-min-content | -moz-fit-content | -moz-available  Values  none The width has no maximum value. length See  <length>  for possible units. percentage Specified as a <percentage>  of containing block's width.  Mozilla Extensions  -moz-max-content  New in Firefox 3  The intrinsic preferred width. -moz-min-content  New in Firefox 3  The intrinsic minimum width. -moz-available  New in Firefox 3  The containing block width minus horizontal margin, border and padding. -moz-fit-content  New in Firefox 3  The same as -moz-max-content.  Mozilla Extensions  -moz-max-content  New in Firefox 3  The intrinsic preferred width. -moz-min-content  New in Firefox 3  The intrinsic minimum width. -moz-available  New in Firefox 3  The containing block width minus horizontal margin, border and padding. -moz-fit-content  New in Firefox 3  The same as -moz-max-content.  Examples  body  { max-width: 40em; }  table { max-width: 75%; }  form  { max-width: none; }   p { background: gold }  The Mozilla community produces a lot of great software.  p { background: lightgreen;     max-width:  intrinsic;         \/* Safari\/WebKit *\/     max-width:  -moz-max-content;  \/* Firefox\/Gecko *\/   }  The Mozilla community produces a lot of great software.  p { background: lightblue;  max-width: -moz-min-content; }  The Mozilla community produces a lot of great software. Notes max-width  overrides width, but min-width  overrides max-width . Specifications  CSS 2.1 #min-max-widths  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.0 (1.0) 7.0 4.0 2.0.2 (416),  buggy before   applies to <table> \u00a0no yes no yes no   intrinsic width \u00a01.0 3.0 (1.9) -- -- 2.0 (412) ?   \u00a0intrinsic -moz-max-content intrinsic   intrinsic minimum width \u00a0-- 3.0 (1.9) -- -- --   -moz-min-content         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  width , min-width , max-height  box model, box-sizing"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/min-height","title":"min-height","description":"The min-height CSS property is used to set the minimum height of a given element. It prevents the used value of the height  property from becoming smaller than the value specified for min-height.  Initial value : 0 Applies to: block level and replaced elements Inherited : no Percentages: yes, see below Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  min-height:  <length> | <percentage> | inherit   Values  <length> A fixed minimum height. See  <length>  for possible units. <percentage> The <percentage>  is calculated with respect to the height of the containing block. If the height of the containing block is not specified explicitly, the percentage value is treated as 0.  Examples  View Live Examples (not available, please check later)   table { min-height: 75%; }  form { min-height: 0; }  Notes min-height  overrides both max-height  and height . Specifications  CSS 2.1 #min-max-heights\u00a0  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 7.0 4.0 2.02 (416)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also box model, min-width , box-sizing , height , max-height"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/min-width","title":"min-width","description":"The min-width CSS property is used to set the minimum width of a given element. It prevents the used value of the width  property from becoming smaller than the value specified for min-width.  Initial value : 0 Applies to: block level and replaced elements, for <table> see Browser compatibility below Inherited : no Percentages: refer to the width of the containing block Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  min-width:  <length> | <percentage> | -moz-max-content | -moz-min-content | -moz-fit-content | -moz-available Values  length See  <length>  for possible units. percentage Specified as a <percentage>  of containing block's width.  Mozilla Extensions  -moz-max-content  New in Firefox 3  The intrinsic preferred width. -moz-min-content  New in Firefox 3  The intrinsic minimum width. -moz-available  New in Firefox 3  The containing block width minus horizontal margin, border and padding. -moz-fit-content  New in Firefox 3  The same as -moz-min-content.  Mozilla Extensions  -moz-max-content  New in Firefox 3  The intrinsic preferred width. -moz-min-content  New in Firefox 3  The intrinsic minimum width. -moz-available  New in Firefox 3  The containing block width minus horizontal margin, border and padding. -moz-fit-content  New in Firefox 3  The same as -moz-min-content.  Examples  table { min-width: 75%; }  form { min-width: 0; }  Notes min-width overrides both max-width  and width . Specifications  CSS 2.1 #min-max-widths  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 7.0 4.0 2.0.2 (416), buggy before   applies to <table> no yes no yes no         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  width , max-width , min-height  box model, box-sizing"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/opacity","title":"opacity","description":"The opacity CSS property specifies the transparency of an element, that is, the degree to which the background behind the element is overlaid. Using this property with a value different than 1 places the element in a new stacking context.  Initial value : 1.0 (opaque) Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : the specified number (clipped to the range [0.0, 1.0]) Syntax  opacity:  <number> | inherit Values A <number>  in the range 0.0 to 1.0. Any value smaller or larger is clamped to this range.  0 The element is fully transparent (that is, invisible). number between 0 and 1 The element is translucent (that is, background can be seen). 1 The element is fully opaque (solid).  Examples  hbox.example {   opacity: 0.5; \/* see the background through the hbox *\/ } Cross Browser compatible Live Example  pre {                               \/* make the box translucent (20% opaque) *\/    border: solid red;    opacity: 0.2;    filter: alpha(opacity=20);       \/* IE8 and lower *\/    zoom: 1;       \/* set \"zoom\", \"width\" or \"height\" to trigger \"hasLayout\" in IE 7 and lower *\/  }  pre {                               \/* make the box translucent (50% opaque) *\/    border: solid red;    opacity: 0.5;    filter: alpha(opacity=50);       \/* IE8 and lower *\/    zoom: 1;       \/* set \"zoom\", \"width\" or \"height\" to trigger \"hasLayout\" in IE 7 and lower *\/  }  pre {                               \/* make the box translucent (80% opaque) *\/    border: solid red;    opacity: 0.8;    filter: alpha(opacity=80);       \/* IE8 and lower *\/    zoom: 1;       \/* set \"zoom\", \"width\" or \"height\" to trigger \"hasLayout\" in IE 7 and lower *\/  }Different opacity with :hover \r           <html> <head> <style> img.opacity {    opacity: 1;    filter: alpha(opacity=50);    zoom: 1;  }     img.opacity:hover {    opacity: 0.5;    filter: alpha(opacity=100);    zoom: 1;  } <\/style> <\/head>  <body> <img src=\"\/\/developer.mozilla.org\/media\/img\/mdn-logo.png\" alt=\"MDN logo\" width=\"128\" height=\"146\" class=\"opacity\" \/> <\/body> <\/html>\r          Cross Browser compatible Live Example  pre {                               \/* make the box translucent (20% opaque) *\/    border: solid red;    opacity: 0.2;    filter: alpha(opacity=20);       \/* IE8 and lower *\/    zoom: 1;       \/* set \"zoom\", \"width\" or \"height\" to trigger \"hasLayout\" in IE 7 and lower *\/  }  pre {                               \/* make the box translucent (50% opaque) *\/    border: solid red;    opacity: 0.5;    filter: alpha(opacity=50);       \/* IE8 and lower *\/    zoom: 1;       \/* set \"zoom\", \"width\" or \"height\" to trigger \"hasLayout\" in IE 7 and lower *\/  }  pre {                               \/* make the box translucent (80% opaque) *\/    border: solid red;    opacity: 0.8;    filter: alpha(opacity=80);       \/* IE8 and lower *\/    zoom: 1;       \/* set \"zoom\", \"width\" or \"height\" to trigger \"hasLayout\" in IE 7 and lower *\/  }Different opacity with :hover \r           <html> <head> <style> img.opacity {    opacity: 1;    filter: alpha(opacity=50);    zoom: 1;  }     img.opacity:hover {    opacity: 0.5;    filter: alpha(opacity=100);    zoom: 1;  } <\/style> <\/head>  <body> <img src=\"\/\/developer.mozilla.org\/media\/img\/mdn-logo.png\" alt=\"MDN logo\" width=\"128\" height=\"146\" class=\"opacity\" \/> <\/body> <\/html>\r          Notes  History:\u00a0 Prior to Mozilla 1.7 (Firefox 0.9) the -moz-opacity property was implemented in a non-standard (inherited) way. With Firefox 0.9 the behavior changed and the property was renamed to opacity.\u00a0 Since then -moz-opacity was supported just as an alias for opacity.  Gecko 1.9.1 (Firefox 3.5) and later do not support -moz-opacity. \u00a0By now, you should be using simply opacity.   Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.7)  9.0 9.0 1.2 (125)   8.0 filter: alpha(opacity=xx) filter: \"alpha(opacity=xx)\"  (both are synonymous)   4.0 filter: alpha(opacity=xx)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1.7)  9.0 9.0 3.2   8.0 filter: alpha(opacity=xx) filter: \"alpha(opacity=xx)\"  (both are synonymous)   4.0 filter: alpha(opacity=xx)      Prior to version 9, Internet Explorer does not support opacity, rather it supports filter instead. IE supports also the extended form progid:DXImageTransform.Microsoft.Alpha(Opacity=xx). This is needless, so don't use it. IE8 introduced -ms-filter, which is synonymous with filter. Don't use the prefix. Similar to -moz-opacity, -khtml-opacity has been dead since early 2004 (release of Safari 1.2). Konqueror never had support for -khtml-opacity and had been supporting opacity since version 4.0. Don't use -khtml-opacity nor -moz-opacity anymore. Specifications   CSS 3 Color: opacityREC See also MSDN Microsoft's filter:alpha(opacity=xx) \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/orphans","title":"orphans","description":"The orphans property refers to the minimum number of lines in a block container that must be left at the bottom of the page.\u00a0 This property is normally used to control how page breaks occur. Syntax  orphans: <integer> | inherit  Values Only positive values are allowed. Examples \u00a0 Browser Compatibility    Browser Lowest version   Internet Explorer IE 8   Firefox (Gecko) --   Opera 9.2    Safari | Chrome | WebKit   --     See Also  CSS 2.1 Specification Tip:\u00a0Correcting Orphans with Overflow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline","title":"outline","description":"The outline CSS property is a shorthand property for setting one or more of the individual outline properties outline-style , outline-width  and outline-color  in a single rule. In most cases the use of this shortcut is preferable and more convenient. Outlines differ from borders in the following ways:  Outlines do not take up space, they are drawn above the content. Outlines may be non-rectangular. They are rectangular in Gecko\/Firefox. But e.g. Opera draws a non-rectangular shape around a construct like this: TEXTTEXTTEXT   Initial value : see individual properties for details Applies to: all elements Inherited : no Percentages: N\/A Media: visual  , interactive   Computed value: see individual properties  In browsers previous to Gecko 1.8 (Firefox 1.5) a similar effect can be achieved using Mozilla CSS Extension -moz-outline . Syntax  outline:  [ <outline-width> || <outline-style> || <outline-color> ] | inherit  Values One, two or three values, given in arbitrary order:  outline-width Optional, default value medium is used if absent. See outline-width . outline-style Required, default value none is used if absent. See outline-style . outline-color Optional, default value if absent: invert. Since Gecko 1.9 (Firefox 3), the value of the element's color  property (foreground color) is used. See outline-color .  Examples   outline: solid; | outline: dashed red; | outline: dotted 1px; | outline: ridge thick violet; | outline: custom 5px;  \r           \/* two identical declarations *\/  :link:hover { outline: 1px solid #000 } :link:hover { outline: solid black 1px }\r          Specifications  CSS 2.1 User Interface #outline CSS 3 Basic User Interface Module #outline  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.5 (1.8) 8.0 7.0 1.2 (125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1.8)  8.0 6.0 3.1     See also   outline , outline-width , outline-style , outline-color , outline-offset , -moz-outline-radius , -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright , -moz-outline-radius-bottomleft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-style","title":"outline-style","description":"The outline-style CSS property is used to set the style of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out. It is often more convenient to use the shortcut property outline  instead of outline-style, outline-width and outline-color.  Initial value : none  Applies to: all elements Inherited : no Media: visual   Computed value : specified value  In browsers prior to Gecko 1.8 (Firefox 1.5) this effect can be achieved using Mozilla CSS Extension -moz-outline-style . Syntax  outline-style:  auto | <border-style> | inherit  Values <border-style> can be any of the following:  none No outline (outline-width  is 0). dotted The outline is a series of dots. dashed The outline is a series of short line segments. solid The outline is a single line. double The outline is two single lines. The outline-width  is the sum of the two lines and the space between them. groove The outline looks as though it were carved into the canvas. ridge The opposite of groove: the outline looks as though it were coming out of the canvas. inset The outline makes the box look as though it were embeded in the canvas. outset The opposite of inset: the outline makes the box look as though it were coming out of the canvas.  Examples  .example {  \/* make the outline a 3D groove style *\/               outline-style: groove;        \/* same result as \"outline: groove\" *\/  }  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.5 (1.8) 8.0 7.0 1.2 (125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications See outline  property See also   outline , outline-width , outline-style , outline-color , outline-offset , -moz-outline-radius , -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright , -moz-outline-radius-bottomleft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-color","title":"outline-color","description":"The outline-color CSS property sets the color of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out.  Initial value : invert  Used value in Gecko (Firefox): The value of the color property Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : 'invert' or the computed color value  Syntax   outline-color:  <color> | invert | inherit Values  <color> See <color>  for the various color keywords and notations. invert To ensure the outline is visible, performs a color inversion of the background. This makes the focus border more salient, regardless of the color in the background. Currently only supported in Opera and IE8.   Examples The css code here: \r           .example {            \/* make the outline red *\/            outline-color: #FF0000;  }\r          produces the following outline color for a 2px outline: outline-color is blue. \u00a0 Specifications  See outline  property.  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.5 (1.8) In versions previous to 1.5: -moz-outline-color \u00a08.0 \u00a07.0 \u00a01.2 (125)   invert value -- Support had been dropped since 3.0 (1.9)   bug 359497 : WONTFIX Workaround: Use the value of the element's color property.\u00a0 \u00a08.0 \u00a07.0 \u00a0--         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     \u00a0 See also \u00a0   outline , outline-width , outline-style , outline-color , outline-offset , -moz-outline-radius , -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright , -moz-outline-radius-bottomleft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-width","title":"outline-width","description":"The outline-width CSS property is used to set the width of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out:  Initial value : medium  Applies to: all elements Inherited : no Media: visual   Computed value :  In browsers previous to Gecko 1.8 (Firefox 1.5) essentially the same effect can be achieved using Mozilla CSS Extension -moz-outline-width . Syntax  outline-width: thin | medium | thick |  <length>  | inherit   Values  thin Depends on the UA. Typically 1px in desktop browsers like Firefox. medium Depends on the UA. Typically 3px in desktop browsers like Firefox. thick Depends on the UA. Typically 5px in desktop browsers like Firefox. <length> See  <length>  values.  Examples   thin   medium   thick   2px   1ex            5em   Specifications  See outline  property  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support \u00a01.0 1.5 (1.8) 8.0 7.0 1.2 (125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   outline , outline-width , outline-style , outline-color , outline-offset , -moz-outline-radius , -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright , -moz-outline-radius-bottomleft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-offset","title":"outline-offset","description":"The outline-offset CSS property is used to set space between an outline  and the edge or border of an element. An outline is a line that is drawn around elements, outside the border edge.  Initial value : 0 Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : <length> value in absolute units  The space will be transparent (the parent will determine the background). Syntax  outline-offset:  <length> | inherit Values  <length> The width of the space. See  <length>  for possible units. Negative values place the outline inside the element.  Examples \r           .example {   outline: dashed thin;   \/* Move the outline 3px away from the border *\/   outline-offset: 3px; }\r          The code above produces this effect: outline: offset 5px; Another example: outline: multiple offsets; Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.5\u00a0(1.8) -- 9.5 1.2\u00a0(125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   outline , outline-width , outline-style , outline-color , outline-offset , -moz-outline-radius , -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright , -moz-outline-radius-bottomleft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/overflow","title":"overflow","description":"The overflow CSS property specifies whether to clip content, render scroll bars or display overflow content of a block-level element.  Initial value : visible  Applies to: block and inline-block elements, table cells Inherited : no Media: visual   Computed value : as specified  Syntax  overflow:  visible | hidden | scroll | auto | inherit  Values  visible Default value. Content is not clipped, it may be rendered outside the content box. hidden The content is clipped and no scrollbars are provided. scroll The content is clipped and desktop browsers use scrollbars, whether or not any content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. Printers may print overflowing content. auto Depends on the user agent. Desktop browsers like Firefox provide scrollbars if content overflows.  Mozilla Extensions  -moz-scrollbars-none   Obsolete Use overflow:hidden instead. -moz-scrollbars-horizontal   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-scrollbars-vertical   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-hidden-unscrollable Is intended mainly for internal use and by themes. Disables scrolling of XML root elements and <html>, <body> by arrow keys and mouse wheel. Mozilla Extensions  -moz-scrollbars-none   Obsolete Use overflow:hidden instead. -moz-scrollbars-horizontal   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-scrollbars-vertical   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-hidden-unscrollable Is intended mainly for internal use and by themes. Disables scrolling of XML root elements and <html>, <body> by arrow keys and mouse wheel. Examples  p {        width: 12em;      border: dotted;      overflow: auto;   \/* append scrollbars if necessary *\/  } overflow: hidden Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. overflow: scroll Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. overflow: auto Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. overflow: auto short text visible (default) Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. Notes Through Gecko 1.9.2 (Firefox 3.6), the overflow property is incorrectly applied to table-group elements (<thead> , <tbody> , <tfoot>). This behavior is corrected in later versions.Browser compatibility    Browser Lowest version   Internet Explorer 4.0 [*]    Firefox (Gecko) 1.0 (1.0)   Opera 4.0-7.0   Safari (WebKit) 1.0 (85)    [*] IE 4-6 enlarges an element with overflow:visible (default value) to fit the content in it. height\/width behaves like min-height\/min-width. Specifications  CSS 2.1 Visual effects #overflow  See also  Related CSS properties: text-overflow , white-space , overflow-x , overflow-y , clip , display"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/overflow-x","title":"overflow-x","description":"overflow-x specifies whether to clip content, render a scroll bar or display overflow content of a block-level element, when it overflows at the left and right edges.  Initial value : visible  Applies to: (non-replaced) block and inline-block elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified, except \u2018visible\u2019 Syntax  overflow-x:  visible | hidden | scroll | auto  Values  visible Content is not clipped, it may be rendered outside the content box. hidden The content is clipped and no scrollbars are provided. scroll The content is clipped and desktop browsers use scrollbars, whether or not any content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. Printers may print overflowing content. auto Depends on the user agent. Desktop browsers like Firefox provide scrollbars if content overflows.  Examples  View Live Examples (not available, please check later)   [fixme]  Notes \u00a0 Specifications  CSS3 Box Model #overflow  Browser compatibility    Browser Lowest Version   Internet Explorer 5.0 (*)    Firefox 1.5   Opera 9.5   Safari 3.0    (*) IE8 introduced -ms-overflow-x as a\u00a0 synonym for overflow-x. Don't use the -ms- prefix. See also  Related CSS properties: text-overflow , white-space , overflow , overflow-y , clip , display   \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding","title":"padding","description":"The padding CSS property sets the required padding space on all sides of an element. The padding area is the space between the content of the element and its border. Negative values are not allowed. The padding property is a shortcut to avoid setting each side separately (padding-top, padding-right, padding-bottom, padding-left).  Initial value : 0 Applies to: all elements (except  table-*-group, table-row and table-column) Inherited : no Percentages: relative to the width of the containing block Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  padding:   [  <length> | <percentage> ] {1,4}  Values Specifies one, two, three or four of the following values:  <length> Specifies a positive fixed width. See  <length>  for details. <percentage> With respect to the width of the containing block.   One single value applies to all 4 sides Two values apply to 1. top and bottom and 2. to the left and right side Three values apply to 1. top, 2. right and left and 3. to the bottom side Four values apply to 1. top, 2. right, 3. bottom and 4. to the left side  Examples   padding: 5%;               \/* on all sides 5% padding *\/    padding: 10px;              \/* on all sides 10px padding *\/    padding: 10px 20px;         \/*  top and bottom 10px padding  *\/                              \/*  left and right 20px padding  *\/    padding: 10px 3% 20px;      \/*  top 10px padding          *\/                              \/*  left and right 3% padding *\/                              \/*  bottom 20px padding       *\/    padding: 1em 3px 30px 5px;  \/*  top    1em  padding  *\/                              \/*  right  3px  padding  *\/                              \/*  bottom 30px padding  *\/                              \/*  left   5px  padding  *\/  border:outset; padding:5% 1em; Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Box #padding  See also    padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin  CSS Box Model"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-bottom","title":"padding-bottom","description":"The padding-bottom property of an element sets the padding space required on the bottom of an element. The padding area is the space between the content of the element and it's border. A negative value is not allowed.  Initial value : 0 Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length Syntax  padding-bottom:  <length>  | <percentage>  | inherit ;  Values  <length> Specifies a positive fixed width. See  <length>  for details. <percentage> A percentage with respect to the width of the containing block.  Examples  .content { padding-bottom: 5%; } .sidebox { padding-bottom: 10px; }   Specifications  CSS 1 CSS 2.1 box CSS 3 box  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-left","title":"padding-left","description":"The padding-left property of an element sets the padding space required on the left side of an element. The padding area is the space between the content of the element and it's border. A negative value is not allowed.  Initial value : 0 Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length Syntax  padding-left:  <length>  | <percentage>  | inherit ;  Values  <length> Specifies a positive fixed width. See  <length>  for details. <percentage> A percentage with respect to the width of the containing block.  Examples  .content { padding-left: 5%; } .sidebox { padding-left: 10px; }   Specifications  CSS 1 CSS 2.1 box CSS 3 box  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-right","title":"padding-right","description":"The padding-right property of an element sets the padding space required on the right side of an element. The padding area is the space between the content of the element and its border. Negative values are not allowed.  Initial value : 0 Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length Syntax  padding-right:  <length>  | <percentage>  | inherit ;  Values  <length> Specifies a positive fixed width. See  <length>  for details. <percentage> A percentage with respect to the width of the containing block.  Examples  .content { padding-right: 5%; } .sidebox { padding-right: 10px; }   Specifications  CSS 1 CSS 2.1 box CSS 3 box  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/page-break-after","title":"page-break-after","description":"The page-break-after CSS property adjusts page breaks after the current element.  Initial value : auto  Applies to: block elements Inherited : no Media: visual  , paged Computed value : as specified  Syntax  page-break-after: auto | always | avoid | left | right | inherit  Values  auto Initial value. Automatic page breaks (neither forced nor forbidden). always Always force page breaks after the element. avoid  Unimplemented  Avoid page breaks after the element. left  Unimplemented  Force page breaks after the element so that the next page is formatted as a left page. right  Unimplemented  Force page breaks after the element so that the next page is formatted as a right page.  Examples  \/* display headlines on a new page *\/ h1,h2, h3 { page-break-after:always; }   Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) [*] 4.0 7.0 1.2 (125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    [*] Gecko only supports page-break-after:always. See   bug 132035   Specification  CSS 3 Paged Media #page-break-after CSS 2.1 Paged Media #page-break-after  See also  page-break-before, page-break-inside orphans, widows"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-top","title":"padding-top","description":"The padding-top property of an element sets the padding space required on the top of an element. The padding area is the space between the content of the element and it's border. A negative values is not allowed.  Initial value : 0 Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length Syntax  padding-bottom:  <length>  | <percentage>  | inherit ;  Values  <length> Specifies a positive fixed width. See  <length>  for details. <percentage> A percentage with respect to the width of the containing block.  Examples  .content { padding-top: 5%; } .sidebox { padding-top: 10px; }   Specifications  CSS 1 CSS 2.1 box CSS 3 box  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also   padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/page-break-before","title":"page-break-before","description":"The page-break-before CSS property adjusts page breaks before the current element.  Initial value : auto  Applies to: block elements Inherited : no Media: visual  , paged Computed value : as specified  Syntax  page-break-before: auto | always | avoid | left | right | inherit  Values  auto Initial value. Automatic page breaks (neither forced nor forbidden). always Always force page breaks before the element. avoid  Unimplemented  Avoid page breaks before the element. left  Unimplemented  Force page breaks before the element so that the next page is formatted as a left page. right  Unimplemented  Force page breaks before the element so that the next page is formatted as a right page.  Examples  \/* avoid page break before the div *\/ div.note { page-break-before: avoid;  }   Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) [*] 4.0 7.0 1.2 (125)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     [*] Gecko only supports page-break-before:always. See   bug 132035  Specification  CSS 3 Paged Media #page-break-after CSS 2.1 Paged Media #page-break-after  See also  page-break-after, page-break-inside orphans, widows"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/page-break-inside","title":"page-break-inside","description":"The page-break-inside CSS property adjusts page breaks inside the current element.  Initial value : auto  Applies to: block elements Inherited : no Media: visual  , paged Computed value : as specified  Syntax  page-break-inside: auto | avoid | inherit  Values  auto Initial value. Automatic page breaks (neither forced nor forbidden). avoid Avoid page breaks before the element.  Examples  \/* avoid page break inside the paragraph *\/ p { page-break-inside: avoid;  }   Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 -- 8.0 7.0 1.3 (312)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specification  CSS 3 Paged Media #page-break-inside CSS 2.1 Paged Media #page-break-inside  See also  page-break-after, page-break-before orphans, widows"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/perspective","title":"perspective","description":"The perspective CSS property determines the distance between the z=0 plane and the user in order to give to the 3D-positioned element some perspective. Each 3D element that is placed between the z=0 and the user is enlarged, each 3D-element with z<0 is shrinked. How much deformation is defined by the value of this property. Part of the 3D-elements that are behind the user, i.e. that their z-axis coordinate is greater than the value of the perspective CSS property are not drawn. The vanishing point is by default placed at the center of the element, but its position can be changed using the perspective-origin  property. Using this property with a value different than 0 and none creates a new stacking context.  Initial value  : none Applies to : block and inline elements Inherited : no Media: visual   Computed value : same as specified value.  Syntax perspective: none     or perspective: depth  where :  none Is a keyword indicating that no perspective transform has to be applied. depth Is a  <length>  giving the distance from the user to the z=0 plane. It used to apply a perspective transform to the element and its content. If it 0 or a negative value, no perspective transform is applied.  Examples     perspective:150px; perspective:300px; perspective:600px;      \u00a0 \u00a0 1 2 3 4 5 6       \u00a0 \u00a0 1 2 3 4 5 6       \u00a0 \u00a0 1 2 3 4 5 6        Specifications    Specification Status Comment     CSS 3D Transforms Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 12 -webkit 10.0 (10)  -moz 10 -ms -- (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 3.0 -webkit 10.0 (10)  -moz ? -- (Supported) -webkit     See also  CSS Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/perspective-origin","title":"perspective-origin","description":"The perspective-origin CSS property determines the position the viewer is looking at. It is used as the vanishing point by the perspective  property.  Initial value  : 50% 50% Applies to : block and inline elements Inherited : no Percentages : refer to the size of the element's box Media: visual   Computed value : same as specified value.  Syntax perspective-origin: x-position                           or perspective-origin: x-position y-position  When both x-position and y-position are keywords, the following is also valid: perspective-origin: y-position x-position  where : \u00a0  x-position Indicates the position of the abscissa of the vanishing point. It can have one of the following values:  <percentage>  indicating the position relative to the width of the element. The value may be negative.  <length>  indicating the position using a length value. The value may be negative. left, a keyword being a shortcut for the 0 length value. center, a keyword being a shortcut for the 50% percentage value. right, a keyword being a shortcut for the 100% percentage value.   y-position Indicates the position of the ordinate of the vanishing point. It can have one of the following values:  <percentage>  indicating the position relative to the height of the element. The value may be negative.  <length>  indicating the position using a length value. The value may be negative. top, a keyword being a shortcut for the 0 length value. center, a keyword being a shortcut for the 50% percentage value. bottom, a keyword being a shortcut for the 100% percentage value.   Examples     perspective-origin:top left; perspective-origin:top; perspective-origin:top right;      1 2 3 4 5 6       1 2 3 4 5 6       1 2 3 4 5 6      perspective-origin:left; perspective-origin:50% 50%; perspective-origin:right;      1 2 3 4 5 6       1 2 3 4 5 6       1 2 3 4 5 6      perspective-origin:bottom left; perspective-origin:bottom; perspective-origin:bottom right;      1 2 3 4 5 6       1 2 3 4 5 6       1 2 3 4 5 6        Specifications    Specification Status Comment     CSS 3D Transforms Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 12 -webkit 10.0 (10)  -moz 10 -ms -- (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 3.0 -webkit 10.0 (10)  -moz ? -- (Supported) -webkit     See also  CSS Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/pointer-events","title":"pointer-events","description":"The CSS property pointer-events allows authors to control under what circumstances (if any) a particular graphic element can become the target of mouse events. When this property is unspecified, the same characteristics of the visiblePainted value apply to SVG content. In addition to indicating that the element is not the target of mouse events, the value\u00a0none\u00a0instructs the mouse event to go \"through\" the element and target whatever is \"underneath\" that element instead.  Initial value : auto Applies to: all elements Inherited : yes Media: visual   Computed value : the specified value, or else the inherited value  Syntax pointer-events:  auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit  Values  auto The element behaves as it would if the pointer-events property was not specified. In SVG\u00a0content, this value and the value visiblePainted have the same effect. none The element is never the target of mouse events; however, mouse events may target its descendant elements if those descendants have pointer-events set to some other value. In these circumstances, mouse events will trigger event listeners on this parent element as appropriate on their way to\/from the descendant during the event capture\/bubble phases. visiblePainted SVG only. The element can only be the target of a mouse event when the visibility property is set to visible and when the mouse cursor is over the interior (i.e., 'fill') of the element and the fill property is set to a value other than none, or when the mouse cursor is over the perimeter (i.e., 'stroke') of the element and the stroke property is set to a value other than none. visibleFill SVG only. The element can only be the target of a mouse event when the visibility property is set to visible and when the mouse cursor is over the interior (i.e., fill) of the element. The value of the fill property does not effect event processing. visibleStroke SVG only. The element can only be the target of a mouse event when the visibility property is set to visible and when the mouse cursor is over the perimeter (i.e., stroke) of the element. The value of the stroke property does not effect event processing. visible SVG only. The element can be the target of a mouse event when the visibility property is set to visible and the mouse cursor is over either the interior (i.e., fill) or the perimeter (i.e., stroke) of the element. The values of the fill and stroke do not effect event processing. painted SVG only. The element can only be the target of a mouse event when the mouse cursor is over the interior (i.e., 'fill') of the element and the fill property is set to a value other than none, or when the mouse cursor is over the perimeter (i.e., 'stroke') of the element and the stroke property is set to a value other than none. The value of the visibility property does not effect event processing. fill SVG only. The element can only be the target of a mouse event when the pointer is over the interior (i.e., fill) of the element. The values of the fill and visibility properties do not effect event processing. stroke SVG only. The element can only be the target of a mouse event when the pointer is over the perimeter (i.e., stroke) of the element. The values of the stroke and visibility properties do not effect event processing. all SVG only. The element can only be the target of a mouse event when the pointer is over the interior (i.e., fill) or the perimeter (i.e., stroke) of the element. The values of the fill, stroke and visibility properties do not effect event processing.  Examples  View Live Examples (not available, please check later)  Notes Note that preventing an element from being the target of mouse events by using pointer-events does not necessarily mean that mouse event listeners on that element cannot or will not be triggered. If one of the element's children has pointer-events explicitly set to allow that child to be the target of mouse events, then any events targeting that child will pass through the parent as the event travels along the parent chain, and trigger event listeners on the parent as appropriate. Of course any mouse activity at a point on the screen that is covered by the parent but not by the child will not be caught by either the child or the parent (it will go \"through\" the parent and target whatever is underneath). We would like to provide finer grained control (than just auto and none) in HTML for which parts of an element will cause it to \"catch\" mouse events, and when. To help us in deciding how pointer-events should be further extended for HTML, if you have any particular things that you would like to be able to do with this property, then please add them to the Use Cases section of this wiki page (don't worry about keeping it tidy). Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   SVG support 1.0 1.5 (1.8)  9.0 9.0 (2.0) 3.0 (522)   HTML\/XML content 2.0 3.6 (1.9.2)  -- -- 4.0 (530)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  SVG 1.1 Interactivity #PointerEvents CSS 3 Basic User Interface #pointer-events \u00a0Editor's draft (work in progress)  See also  The SVG attribute  pointer-events WebKit Specs PointerEventsProperty extended for use in (X)HTML content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/position","title":"position","description":"The position CSS property chooses alternative rules for positioning elements, designed to be useful for scripted animation effects.  Initial value : static Applies to: all elements Inherited : no Media: visual   Computed value : as specified  A positioned element is an element whose computed position property is relative, absolute, or fixed. An absolutely positioned element is an element whose computed position property is absolute or fixed. The top , right , bottom , and left  properties specify the position of positioned elements. Syntax  position:  static | relative | absolute | fixed | inherit  Values  static Normal behavior.\u00a0 The top, right, bottom, and left properties do not apply. relative Lay out all elements as though the element were not positioned, and then adjust the element's position, without changing layout (and thus leaving a gap for the element where it would have been had it not been positioned).\u00a0 The effect of position:relative on table-*-group, table-row, table-column, table-cell, and table-caption elements is undefined. absolute Do not leave space for the element.\u00a0 Instead, position it at a specified position relative to its closest positioned ancestor or to the containing block. Absolutely positioned boxes can have margins, they do not collapse with any other margins. fixed Do not leave space for the element.\u00a0 Instead, position it at a specified position relative to the screen's\u00a0viewport and doesn't move when scrolled. When printing, position it at that fixed position on every page.  Examples Relative positioning To position an element relatively 20px from the top and left of its normal position, the following CSS is used.  #two { position: relative; top: 20px; left: 20px; }  \u00a0Note how the other elements are displayed as if \"Two\" were in it's normal position and taking up space.  Absolute positioning Elements that are positioned relatively are still considered to be in the normal flow of elements in the document.\u00a0 In contrast, an element that is positioned absolutely is taken out of the flow and thus takes up no space when placing other elements.\u00a0 The absolutely positioned element is positioned relative to nearest positioned ancestor.\u00a0 If a positioned ancestor doesn't exist, the initial container is used. In the example below, the blue ancestor div is positioned relative (so it becomes the nearest positioned ancestor) and box Two is positioned absolutely:  #ancestor { position: relative; background: #ddf; width: 500px; } #two { position: absolute; top: 20px; left: 20px; }   If #ancestor had not been positioned relative, box Two would have appeared relative to the upper left corner of the page. Fixed positioning Fixed positioning is similar to absolute positioning, with the exception that the element's containing block is the viewport.\u00a0 This is often used to create a floating element that stays in the same position even after scrolling the page.\u00a0 In the example below the \"One\" box is fixed 80px from the top of the page and 20px from the left:  #one { position: fixed; top: 80px; left: 20px }  When viewing the top of the page, the position box appears in the upper left, and after scrolling, it remains in the same place relative to the viewport:   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 Relative positioning To position an element relatively 20px from the top and left of its normal position, the following CSS is used.  #two { position: relative; top: 20px; left: 20px; }  \u00a0Note how the other elements are displayed as if \"Two\" were in it's normal position and taking up space.  Absolute positioning Elements that are positioned relatively are still considered to be in the normal flow of elements in the document.\u00a0 In contrast, an element that is positioned absolutely is taken out of the flow and thus takes up no space when placing other elements.\u00a0 The absolutely positioned element is positioned relative to nearest positioned ancestor.\u00a0 If a positioned ancestor doesn't exist, the initial container is used. In the example below, the blue ancestor div is positioned relative (so it becomes the nearest positioned ancestor) and box Two is positioned absolutely:  #ancestor { position: relative; background: #ddf; width: 500px; } #two { position: absolute; top: 20px; left: 20px; }   If #ancestor had not been positioned relative, box Two would have appeared relative to the upper left corner of the page. Fixed positioning Fixed positioning is similar to absolute positioning, with the exception that the element's containing block is the viewport.\u00a0 This is often used to create a floating element that stays in the same position even after scrolling the page.\u00a0 In the example below the \"One\" box is fixed 80px from the top of the page and 20px from the left:  #one { position: fixed; top: 80px; left: 20px }  When viewing the top of the page, the position box appears in the upper left, and after scrolling, it remains in the same place relative to the viewport:   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 Notes For relatively positioned elements, the top  or bottom  property specifies the vertical offset from the normal position and the left  or right  property specifies the horizontal offset. For absolutely positioned elements, the top , right , bottom , and left  properties specify offsets from the edge of the element's containing block (what the element is positioned relative to). The margin of the element is then positioned inside these offsets. Most of the time, absolutely positioned elements have auto values of height  and width  computed to fit the contents of the element. However, non-replaced absolutely positioned elements can be made to fill the available space by specifying (as other than auto) both top  and bottom  and leaving height  unspecified (that is, auto). Likewise for left , right , and width . Except for the case just described of absolutely positioned elements filling the available space:  If both top  and bottom  are specified (technically, not auto), top  wins. If both left  and right  are specified, left  wins when direction  is ltr (English, horizontal Japanese, etc.) and right  wins when direction  is rtl (Arabic, Hebrew, etc.).  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 4.0 4.0 1.0 (85)   fixed value 1.0 1.0 (1.0) 7.0 4.0 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Visual formatting #position  See also display , float , top , right , bottom , left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/quotes","title":"quotes","description":"The quotes property indicates how user agents should render quotation marks.  Initial value : user agent specific Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  quotes:  [<string> <string>]+ | none | inherit  Values  none The open-quote and close-quote values of the content property produce no quotation marks. [<string> <string>]+ One or more pairs of <string>   values for open-quote and close-quote. The first pair represents the outer level of quotation, the second pair is for the first nested level, next pair for third level and so on.  Examples  q { quotes: '\"' '\"' \"'\" \"'\" } q:before { content: open-quote } q:after  { content: close-quote }  Notes  Firefox 3.5 note   Starting in Firefox 3.5, the initial value of the quotes property can be read using -moz-initial This wasn't possible in earlier versions of Firefox. Specifications  CSS 2.1 Generated content #quotes  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 11 1.5 8.0 4.0 ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/resize","title":"resize","description":"The resize CSS property lets you control the resizability of an element.  Initial value : none Applies to: block-level and replaced elements, table cells, and inline blocks Inherited : no Media: visual   Computed value : as specified  Syntax  resize: none | both | horizontal | vertical | inherit  Syntax  resize: none | both | horizontal | vertical | inherit  Values  none The element offers no user-controllable method for resizing the element. both The element displays a mechanism for allowing the user to resize the element, which may be resized both horizontally and vertically. horizontal The element displays a mechanism for allowing the user to resize the element, which may only be resized horizontally. vertical The element displays a mechanism for allowing the user to resize the element, which may only be resized vertically.  Note: resize does not apply to blocks for which the overflow \u00a0property is set to visible.  Examples Disabling resizability of textareas By default, <textarea> \u00a0elements are resizable in Gecko\u00a02.0 (Firefox 4). You may override this behavior with the CSS\u00a0shown below: \r           textarea.example {   resize: none; \/* disables resizability *\/ }\r          Using resize with arbitrary elements You can use the resize property to make any element resizable. In the example below, a resizable <div>  box contains a resizable paragraph (<p> \u00a0element: \r           <div style=\"resize:both; overflow:scroll; width:300px; height:300px; border:1px solid black\">   <p style=\"resize:both; overflow:scroll; width:200px; height:200px; border:1px solid black\">     This paragraph is resizable, because the CSS resize property is set to 'both' on this     element.   <\/p> <\/div>\r           \u00a0  View the live example  Examples Disabling resizability of textareas By default, <textarea> \u00a0elements are resizable in Gecko\u00a02.0 (Firefox 4). You may override this behavior with the CSS\u00a0shown below: \r           textarea.example {   resize: none; \/* disables resizability *\/ }\r          Using resize with arbitrary elements You can use the resize property to make any element resizable. In the example below, a resizable <div>  box contains a resizable paragraph (<p> \u00a0element: \r           <div style=\"resize:both; overflow:scroll; width:300px; height:300px; border:1px solid black\">   <p style=\"resize:both; overflow:scroll; width:200px; height:200px; border:1px solid black\">     This paragraph is resizable, because the CSS resize property is set to 'both' on this     element.   <\/p> <\/div>\r           \u00a0  View the live example  Disabling resizability of textareas By default, <textarea> \u00a0elements are resizable in Gecko\u00a02.0 (Firefox 4). You may override this behavior with the CSS\u00a0shown below: \r           textarea.example {   resize: none; \/* disables resizability *\/ }\r          Using resize with arbitrary elements You can use the resize property to make any element resizable. In the example below, a resizable <div>  box contains a resizable paragraph (<p> \u00a0element: \r           <div style=\"resize:both; overflow:scroll; width:300px; height:300px; border:1px solid black\">   <p style=\"resize:both; overflow:scroll; width:200px; height:200px; border:1px solid black\">     This paragraph is resizable, because the CSS resize property is set to 'both' on this     element.   <\/p> <\/div>\r           \u00a0  View the live example  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 4.0 (2.0) -- -- 3.0 (522)   Applies to \u00a0<textarea> block-level and replaced elements, table cells, and inline blocks (unless overflow  is visible) \u00a0 \u00a0 <textarea>         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specification   CSS3-UI: resizeCR  See also  <textarea>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/right","title":"right","description":"The right property specifies part of the position of positioned elements. For absolutely positioned elements (those with position : absolute or position: fixed), it specifies the distance between the right margin edge of the element and the right edge of its containing block.  Initial value : auto  Applies to: positioned elements Inherited : no Percentages: refer to width of containing block Media: visual   Computed value : absolute length, percentage, or auto  Syntax  right: <length> | <percentage> | auto | inherit\u00a0;  Values   <length> \u00a0 A length, can be negative, zero, or positive. <percentage> \u00a0 A percentage of the containing block's width.  Examples  View the live example   #example_3 { \u00a0\u00a0width: 600px; \u00a0\u00a0height: 400px; \u00a0\u00a0background-color: #FFC7E4; \u00a0\u00a0position: relative; \u00a0\u00a0top: 20px; \u00a0\u00a0left: 20px; }  #example_4 { \u00a0\u00a0width:200px; \u00a0\u00a0height:200px; \u00a0\u00a0background-color: #FFD7C2; \u00a0\u00a0position:absolute; \u00a0\u00a0bottom:10px; \u00a0\u00a0right: 20px; }Notes Specifications  CSS 2.1 Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  5.5 5 1.0         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    See also position , top , bottom , left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/table-layout","title":"table-layout","description":"table-layout property defines the algorithm to be used to layout the table cells, rows, and columns.  Initial value : auto  Applies to: 'table' and 'inline-table' elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax table-layout: inherit | auto | fixed   Values  inherit  auto  An automatic table layout algorithm is commonly used by most browsers for table layout. The width of the table and its cells depends on the content thereof.  fixed Table and column widths are set by the widths of table and col elements or by the width of the first row of cells. Cells in subsequent rows do not affect column widths.  Under the \"fixed\" layout method, the entire table can be rendered once the first table row has been downloaded and analyzed. This can speed up rendering time over the \"automatic\" layout method, but subsequent cell content may not fit in the column widths provided. Any cell that has content that overflows uses the overflow  property to determine whether to clip the overflow content. Examples  View Live Examples .contentbox {   table-layout: fixed; }  Specifications  CSS 2.1 #table-layout  Browser compatibility    Browser Lowest Version   Internet Explorer 5.0   Firefox 1.0   Opera 7.0   Safari 1.0    See also   caption-side , table-layout , border-collapse , border-spacing , empty-cells"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/tab-size","title":"tab-size","description":"The tab-size CSS property is used to customize the width of a tab (U+0009) character.  Initial value : 8 Applies to: all elements Inherited : yes Media: visual   Computed value : as specified  Syntax tab-size: <integer> | inherit  Values  <integer>   The number of spaces in a tab. Must be positive. inherit Inherits from the parent element.  Examples pre { \u00a0\u00a0tab-size: 99; \/* Don't use tabs! *\/ }  Values  <integer>   The number of spaces in a tab. Must be positive. inherit Inherits from the parent element.  Examples pre { \u00a0\u00a0tab-size: 99; \/* Don't use tabs! *\/ }  Specifications  CSS Text Level 3 \u2015 The \"tab-size\" property W3C Editor's Draft  Browser compatibility    Browser Lowest Version Support of   Internet Explorer --- ---   Firefox 4.0 (Gecko 2.0) -moz-tab-size   Opera 10.60 -o-tab-size   Safari (WebKit) --- ---    See also  CSS Reference Controlling size of a tab character (U+0009), an email by Anne van Kesteren (Opera) to the CSSWG."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-align","title":"text-align","description":"The text-align CSS property describes how inline content like text is aligned in its parent block element. text-align does not control the alignment of block elements itself, only their inline content.  Initial value : a nameless value that acts as left if 'direction' is 'ltr', right if 'direction' is 'rtl' Applies to: block level elements, table cells and inline-blocks Inherited : yes Media: visual   Computed value : as specified  Syntax   text-align:  left | center | right | justify | start | end | -moz-left | -moz-center | -moz-right | inherit   Values  left The inline contents are aligned to the left edge of the line box. right The inline contents are aligned to the right edge of the line box. center The inline contents are centered within the line box. justify The text is justified. Text should line up their left and right edges to the left and right content edges of the paragraph. start The same as left if direction is left-to-right and right if direction is right-to-left. end  Requires Gecko 1.9.2  The same as right if direction is left-to-right and left if direction is right-to-left.  Mozilla Extensions  -moz-center Centers inline and also block content. -moz-left Aligns inline and also block content. -moz-right Aligns inline and also block content.  Mozilla Extensions  -moz-center Centers inline and also block content. -moz-left Aligns inline and also block content. -moz-right Aligns inline and also block content.  Examples  View Live Examples Live Examples div { text-align: center; border:solid; } p { background:gold; width:22em; } some more inline content... div { text-align: center; border:solid; } p { background:gold; width:22em; margin: 1em auto; } some more inline content... div { text-align:-moz-center; text-align:-webkit-center; border:solid; } p { background:gold; width:22em; } some more inline content... Live Examples div { text-align: center; border:solid; } p { background:gold; width:22em; } some more inline content... div { text-align: center; border:solid; } p { background:gold; width:22em; margin: 1em auto; } some more inline content... div { text-align:-moz-center; text-align:-webkit-center; border:solid; } p { background:gold; width:22em; } some more inline content... Notes The standard-compatible way to center a block itself without centering its inline content is setting the left and right margin to auto, e.g.: margin:auto;\u00a0 or\u00a0 margin:0 auto;\u00a0 or\u00a0 margin-left:auto; margin-right:auto; Browser compatibility    Browser Basic support Block alignment values start value end value   Internet Explorer 3.0 --- --- ---   Firefox (Gecko) 1.0 (1.0) 1.0 (1.0) -moz-left | -moz-center | -moz-right 1.0 (1.0) 3.6 (1.9.2)   Opera 3.5 --- --- ---   Safari (WebKit) 1.0 (85) 1.0 (85) -khtml-left | -khtml-center | -khtml-right 3.1 (525) 3.1 (525)   1.3 (312) -khtml-left | -khtml-center | -khtml-right | -webkit-left | -webkit-center | -webkit-right    Specifications  CSS 2.1 Text #text-align  CSS 3 Text #text-align Working draft  See also margin:auto , margin-left:auto , vertical-align"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration","title":"text-decoration","description":"The text-decoration CSS property is used to set the text formattings underline, overline, line-through and blink.  Initial value : none  Applies to: all elements Inherited : no Media: visual   Computed value : as specified  Syntax  text-decoration:   none | [underline || overline || line-through || blink] | inherit Values Accepts one or more whitespace separated values:  none Produces no text decoration. underline Each line of text is underlined. overline Each line of text has a line above it. line-through Each line of text has a line through the middle. blink Text blinks. Browsers may ignore this value, as Internet Explorer and Safari does. Supported by Firefox (Gecko) and Opera. Note that not blinking the text is one technique to satisfy checkpoint 3.3 of WAI-UAAG. -moz-anchor-decoration Mozilla CSS Extension, not suitable for web content.  Examples  View Live Examples   p { text-decoration: line-through; }   p { text-decoration: underline overline; }  \/* multiple values are allowed *\/  Notes Text decorations draw across descendant elements. This means that it is not possible to disable on a descendant a text decoration that is specified on one of its ancestors. For example, in the markup: \u00a0<p>This text has <em>some emphasized words<\/em> in it.<\/p> the style rule: \u00a0p { text-decoration: underline } would cause the entire paragraph to be underlined. However, the style rule: \u00a0em { text-decoration: none } would not cause any change; the entire paragraph would still be underlined. (However, the rule em { text-decoration: overline }  would cause a second decoration to appear on \"some emphasized words\".)   Gecko 6.0 note(Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3)   Starting with Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) , the text-decoration property resets -moz-text-blink , -moz-text-decoration-color , -moz-text-decoration-line  and -moz-text-decoration-style , if specified.  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  1.0 3.0 3.5 1.0   blink value 1.0 (1.7 or earlier)  -- -- 4.0 --         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   blink value ? ? ? ? ?     Specifications  CSS 2.1 Text CSS 3 Text #text-decoration (Editor's Draft)  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration-color","title":"text-decoration-color","description":"The text-decoration-color CSS property sets the color used when drawing underlines, overlines, or strike-throughs specified by text-decoration-line . This is the preferred way to color these text decorations, rather than using combinations of other HTML\u00a0elements.  Initial value : currentColor Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : the computed color  Syntax  text-decoration-color: <color> | inherit  Values  <color> The color property accepts various keywords and numeric notations. See <color>  values for more details.  Examples \r           .example {      text-decoration: underline;     text-decoration-color: red; }\r          The example above has the same effect as the following code, which also adds a hover style. \r           <!DOCTYPE html> <html> <head> <style> .example {   font-size: 24px;   text-decoration: underline;   color: red; } .example:hover {   color: blue;   text-decoration: line-through; } <\/style> <\/head> <body> <span class=\"example\">   <span style=\"color:black\">black text with red underline and blue hover<\/span> <\/span> <\/body> <\/html>\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 6.0 (6.0)   (prefixed with -moz-) ? ? ?         Feature Android Firefox mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? 6.0 (6.0)  (prefixed with -moz-) ? ? ?     Specifications  CSS 3 Text #text-decoration-color (Editor's Draft)  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration-line","title":"text-decoration-line","description":"The text-decoration-line CSS property sets what kind of line decorations are added to an element.  Initial value : none Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  text-decoration-line: none | underline || overline || line-through  Values Accepts one or more whitespace separated values:  none Produces no text decoration. underline Each line of text is underlined. overline Each line of text has a line above it. line-through Each line of text has a line through the middle. -moz-anchor-decoration Mozilla CSS Extension, not suitable for web content.  Notes In contrast to text-decoration , the -moz-text-decoration-line property does not accept the blink value. You might use -moz-text-blink  instead. Examples  .example {      text-decoration-line: underline;     text-decoration-style: wavy;     text-decoration-color: red; }  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 6.0 (6.0)   (prefixed with -moz-) ? ? ? ?         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 3 Text #text-decoration-line (Editor's Draft)  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration-style","title":"text-decoration-style","description":"The text-decoration-style CSS property defines the style of the lines specified by text-decoration-line . The style applies to all lines, there is no way to define different style for each of the line defined by text-decoration-line. If the specified decoration has a specific semantic meaning, like a line-through line meaning that some text has been deleted, authors are encouraged to denote this meaning using an HTML tag, like <del>  or <s> . As browsers can disabled styling in some cases, the semantic meaning won't disappear in such a situation.  Initial value : solid Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : the value as specified via the syntax Syntax text-decoration-style: \tinherit     or text-decoration-style:  style  where :  inherit Is a keyword indicating to reuse the value calculated on the parent element. style Is one of the following keywords :    Keyword Description Live example Comment     solid Draws a single line Lorem ipsum \u00a0   double Draws a double line Lorem ipsum \u00a0   dotted Draws a dotted line Lorem ipsum \u00a0   dashed Draws a dashed line Lorem ipsum \u00a0   wavy Draws a wavy line Lorem ipsum \u00a0   -moz-noneNon-standard       Do not draw a line Lorem ipsum Do not use : use text-decoration-line : none instead      Examples  .example {      text-decoration-line: underline;     text-decoration-style: wavy;     text-decoration-color: red; }  This is how it looks. Specifications    Specification Status Comment     CSS Text Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 6.0 (6.0)   -moz -- -- -- --         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support  6.0 (6.0)   -moz  -- -- -- --     See also  CSS Reference index    text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-overflow","title":"text-overflow","description":"The text-overflow CSS property determines how overflowed content that is not displayed is signaled to the users. It can be clipped, display an ellipsis ('\u2026', U+2026 Horizontal Ellipsis) or a Web author-defined string.  This CSS property doesn't force an overflow to occur, to do so and make text-overflow to be applied, the author must apply some additional properties on the element, like setting overflow  to hidden.  Initial value : clip Applies to : all block elements Inherited : no Media : visual   Computed value : the specified one. Syntax text-overflow: inherit                                 or text-overflow: end-overflow-type                       or text-overflow: left-overflow-type right-overflow-type  where :  inherit Is a keyword indicating to use the value of this CSS property that the parent element of the element uses. end-overflow-type Is an <overflow-type> CSS value describing the overflow to perform at the end of the line. The end of the line is its right end if the text is written with left-to-right directionality, it is its left end if the text is written with right-to-left directionality. left-overflow-type Is an <overflow-type> CSS value describing the overflow to perform at the left end of the line. The directionality of the text has no influence on which end of the line is affected. right-overflow-type Is an <overflow-type> CSS value describing the overflow to perform at the right end of the line. The directionality of the text has no influence on which end of the line is affected.  <overflow-type> The <overflow-type> CSS type describes how text overflow, when not visible, must be handled. The following values are valid:  clip This keyword value indicates to truncate the text at the limit of the content area. This is the default value. ellipsis This keyword value indicates to display ellipses ('\u2026', U+2026 Horizontal Ellipsis) to represent clipped text. The ellipsis is displayed inside the content area, shortening more the size of the displayed text. If there is not enough place to display ellipsis, they are clipped. string The <string>   to be used to represent clipped text. The string is displayed inside the content area, shortening more the size of the displayed text. If there is not enough place to display string, they are clipped. <overflow-type> The <overflow-type> CSS type describes how text overflow, when not visible, must be handled. The following values are valid:  clip This keyword value indicates to truncate the text at the limit of the content area. This is the default value. ellipsis This keyword value indicates to display ellipses ('\u2026', U+2026 Horizontal Ellipsis) to represent clipped text. The ellipsis is displayed inside the content area, shortening more the size of the displayed text. If there is not enough place to display ellipsis, they are clipped. string The <string>   to be used to represent clipped text. The string is displayed inside the content area, shortening more the size of the displayed text. If there is not enough place to display string, they are clipped. Examples \r           p {   white-space: nowrap;   width: 100%;                      overflow: hidden;              \/* \"overflow\" value must be different from \"visible\" *\/     text-overflow:    ellipsis; }\r             CSS value direction: ltr direction: rtl   Expected Result Live result Expected Result Live result     visible overflow 1234567890  1234567890  0987654321  1234567890    text-overflow: clip 123456  1234567890  654321  1234567890    text-overflow: ellipsis 1234\u2026  1234567890  \u20264321  1234567890    text-overflow: '.' 12345.  1234567890  .54321  1234567890    text-overflow: clip clip 123456  1234567890  654321  1234567890    text-overflow: clip ellipsis 12345\u2026  1234567890  6543\u2026  1234567890    text-overflow: clip '.' 12345.  1234567890  6543.  1234567890    text-overflow: ellipsis clip \u20263456  1234567890  \u202654321  1234567890    text-overflow: ellipsis ellipsis \u2026345\u2026  1234567890  \u2026543\u2026  1234567890    text-overflow: ellipsis '.' \u2026345.  1234567890  \u2026543.  1234567890    text-overflow: ',' clip ,3456  1234567890  ,54321  1234567890    text-overflow: ',' ellipsis ,345\u2026  1234567890  ,543\u2026  1234567890    text-overflow: ',' '.' ,345.  1234567890  ,543.  1234567890     Specifications    Specification Status Comment     CSS Basic User Interface Level 3 Working Draft  \u00a0    A previous version of this interface reached the Candidate Recommendation status. As some not-listed-at-risk features needed to be removed, the spec was demoted to the Working Draft level, explaining why browsers implemented this property unprefixed, though not at the CR state.Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 (312.3) 7.0 (7.0)  6.0 [*] 11 [**] 1.3 (312.3)   Two-value syntax -- 9.0 (9.0)  -- -- --   String value -- 9.0 (9.0)  -- -- --         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support (Supported) 7.0 (7.0)  ? (Supported) (Supported)   Two-value syntax -- 9.0 (9.0)  -- -- --   String value -- 9.0 (9.0)  -- -- --     [*] IE8 introduced the prefixed version, -ms-text-overflow, synonymous with text-overflow. [**] Opera supported the prefixed version, -o-text-overflow, from version 9.0 on.See also  CSS Reference index Related CSS properties: overflow , white-space   \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-indent","title":"text-indent","description":"The text-indent CSS property specifies how much horizontal space should be left before beginning of the first line of the text content of an element. Horizontal spacing is with respect to the left (or right, for right-to-left layout) edge of the containing block element's box.  Initial value : 0 Applies to: block and inline-block elements, table cells Inherited : yes Percentages: refer to width of containing block Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  text-indent:  <length> | <percentage>  Values  <length> Indentation is specified as fixed  <length> . Negative Values are allowed. See  <length>  values for possible units. <percentage> Indentation is a <percentage>  of the containing block width.  Examples  p { text-indent: 2em }   Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Browser compatibility    Browser Lowest version   Internet Explorer 3.0   Firefox (Gecko) 1.0 (1.0)   Opera 3.5   Safari (WebKit) 1.0 (85)    Specifications  CSS 2.1 Text #text-indent  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-rendering","title":"text-rendering","description":"Provides information to the rendering engine about what to optimize for when rendering text. The browser makes trade-offs among speed, legibility, and geometric precision. The text-rendering property is an SVG property that is not defined in any CSS standard. However, Gecko and WebKit browsers let you apply this property to HTML and XML content on Windows and Linux.\u00a0 Note: This property has no effect on Mac OS\u00a0X. One very visible effect is: optimizeLegibility enables ligatures (ff, fi, fl etc.) in text smaller than 20px for some fonts (for example, Microsoft's Calibri, Candara, Constantia and Corbel or the DejaVu font family).  Initial value : auto Applies to: all elements Inherited : yes Media: visual   Computed value : ?  Syntax  text-rendering:  auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit Values  auto The browser makes educated guesses about when to optimize for speed, legibility, and geometric precision while drawing text. For differences in how this value is interpreted by the browser, see the compatibility table. optimizeSpeed The browser emphasizes rendering speed over legibility and geometric precision when drawing text. It disables kerning and ligatures. optimizeLegibility The browser emphasizes legibility over rendering speed and geometric precision. This enables kerning and optional ligatures. geometricPrecision  The browser emphasizes geometric precision over rendering speed and legibility. Certain aspects of fonts\u2014such as kerning\u2014don't scale linearly, so geometricPrecision can make text using those fonts look good. In SVG, when text is scaled up or down, browsers calculate the final size of the text (which is the specified font size and the applied scale) and request a font of that computed size from the platform's font system. But if you request a font size of, say, 9 with a scale of 140%, the resulting font size of 12.6 doesn't explicitly exist in the font system, so the browser rounds the font size to 12 instead. This results in stair-step scaling of text. But the geometricPrecision property\u2014when fully supported by the rendering engine\u2014lets you scale your text fluidly. For large scale factors, you might see less-than-beautiful text rendering, but the size is what you would expect\u2014neither rounded up nor down to the nearest font size supported by Windows or Linux. WebKit precisely applies the specified value, but Gecko treats the value the same as optimizeLegibility.   Examples  \/* make sure all fonts in the HTML document display in all its glory,    but avoid inadequate ligatures in class foo elements *\/  body  { text-rendering: optimizeLegibility; } .foo  { text-rendering: optimizeSpeed; } Live Example    CSS code Kerning Ligatures   font: 19.9px 'DejaVu Serif',Constantia; LYoWAT ff fi fl ffl   font: 20px 'DejaVu Serif',Constantia; LYoWAT ff fi fl ffl   font: 3em 'DejaVu Serif',Constantia; text-rendering: optimizeSpeed; LYoWAT ff fi fl ffl   font: 3em 'Dejavu Serif',Constantia; text-rendering: optimizeLegibility; LYoWAT ff fi fl ffl    Live Example    CSS code Kerning Ligatures   font: 19.9px 'DejaVu Serif',Constantia; LYoWAT ff fi fl ffl   font: 20px 'DejaVu Serif',Constantia; LYoWAT ff fi fl ffl   font: 3em 'DejaVu Serif',Constantia; text-rendering: optimizeSpeed; LYoWAT ff fi fl ffl   font: 3em 'Dejavu Serif',Constantia; text-rendering: optimizeLegibility; LYoWAT ff fi fl ffl    Gecko Notes The 20px threshold value of the auto keyword can be changed by changing the browser.display.auto_quality_min_font_size preference. The optimizeSpeed option has no effect on Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1) , because the standard code for text rendering is already very fast and there is not a faster code path at this time. See   bug 595688  for details. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support for Windows and Linux  4.0\u00a0 \u00a0  3.0\u00a0(1.9) -- -- 5.0 (532.5)   Basic support for other operating systems -- -- -- -- --   auto  Chrome treats this as\u00a0optimizeSpeed.\u00a0 Work is continuing on  WebKit bug 41363  If the font size is 20 px or higher, Gecko browsers use optimizeLegibility; for smaller text, they use optimizeSpeed. -- -- Safari treats this as\u00a0optimizeSpeed. Work is continuing on  WebKit bug 41363    geometricPrecision  13 supports true geometric precision, without rounding up or down to the nearest supported font size in the operating system. Introduced in WebKit 535.1 \u00a0   WebKit bug 60317  Gecko treats the value the same as\u00a0optimizeLegibility. \u00a0-- \u00a0-- \u00a0         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications This is an SVG property, it is not defined in any CSS standard. Gecko (Firefox) and WebKit apply text-rendering also to HTML and XML content.  SVG 1.1 Painting #text-rendering  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-shadow","title":"text-shadow","description":"Syntax text-shadow: none | [<shadow>,]* <shadow>    where <shadow> is:  [ <color>? <offset-x> <offset-y> <blur-radius>? | <offset-x> <offset-y> <blur-radius>? <color>? ]  Values  <color> Optional. Can be specified either before or after the offset values. If the color is not specified, a UA-chosen color will be used. Note:\u00a0If you want to ensure consistency across browsers, explicitly specify a color.  <offset-x> <offset-y> Required. These <length> values specify the shadow's offset from the text. <offset-x> specifies the horizontal distance; a negative value places the shadow to the left of the text. <offset-y> specifies the vertical distance; a negative value places the shadow above the text. If both values are 0, then the shadow is placed behind the text (and may generate a blur effect when <blur-radius> is set). To find out what units you can use, see  <length> . <blur-radius> Optional. This is a  <length>  value. If not specified, it defaults to 0. The higher this value, the bigger the blur; the shadow becomes wider and lighter.  Examples text-shadow: orange 0 -2px;  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. text-shadow: 1px 1px 2px black, 0 0 1em blue, 0 0 0.2em blue; color: white; font: 1.5em Georgia, \"Bitstream Charter\", \"URW Bookman L\", \"Century Schoolbook L\", serif;  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. text-shadow: rgba(0,0,0,0.1) -1px 0, rgba(0,0,0,0.1) 0 -1px,              rgba(255,255,255,0.1) 1px 0, rgba(255,255,255,0.1) 0 1px,              rgba(0,0,0,0.1) -1px -1px, rgba(255,255,255,0.1) 1px 1px;  color: gold; background: gold;  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0.158.0 3.5 (1.9.1)  10 [1] 9.5 1.1 (100)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?      Gecko (Firefox) theoretically supports infinite text-shadows (don't try it). Gecko 2\u00a0and later cap the blur radius at 300 for performance reasons. If the reference to undefined name 'Xref_color' Exception of type 'MindTouch.Deki.Script.Runtime.DekiScriptUndefinedNameException' was thrown. (click for details)Callstack:     at en\/CSS\/text-shadow  MindTouch.Deki.Script.Runtime.DekiScriptUndefinedNameException: reference to undefined name 'Xref_color' Exception of type 'MindTouch.Deki.Script.Runtime.DekiScriptUndefinedNameException' was thrown.   at MindTouch.Deki.Script.Compiler.DekiScriptExpressionEvaluation.Visit (MindTouch.Deki.Script.Expr.DekiScriptVar expr, DekiScriptExpressionEvaluationState state) [0x00000] in <filename unknown>:0    at MindTouch.Deki.Script.Expr.DekiScriptVar.VisitWith[DekiScriptExpressionEvaluationState,Range] (IDekiScriptExpressionVisitor`2 visitor, DekiScriptExpressionEvaluationState state) [0x00000] in <filename unknown>:0    at MindTouch.Deki.Script.Compiler.DekiScriptExpressionEvaluation.Visit (MindTouch.Deki.Script.Expr.DekiScriptCall expr, DekiScriptExpressionEvaluationState state) [0x00000] in <filename unknown>:0    at MindTouch.Deki.Script.Expr.DekiScriptCall.VisitWith[DekiScriptExpressionEvaluationState,Range] (IDekiScriptExpressionVisitor`2 visitor, DekiScriptExpressionEvaluationState state) [0x00000] in <filename unknown>:0    at MindTouch.Deki.Script.Compiler.DekiScriptExpressionEvaluation.Visit (MindTouch.Deki.Script.Expr.DekiScriptReturnScope expr, DekiScriptExpressionEvaluationState state) [0x00000] in <filename unknown>:0  value is unspecified, then Gecko uses the value of the element's color  property. Opera supports a maximum of 6-9 text-shadows for performance reasons. The blur radius is limited to 100px. Opera 9.5-10.1 adheres to the old, reverse painting order (CSS2, the first specified shadow is on the bottom). Internet Explorer 5.5 supports Microsoft's Shadow and DropShadow Filter. Safari: Any shadows that do not explicitly specify a color are transparent. Safari 1.1-3.2 only supports one text-shadow (displays the first shadow of a comma-separated list and ignores the rest). Safari 4.0 (WebKit 528) and later support multiple text-shadows. Konqueror supports text-shadow starting with version 3.4.  Specifications text-shadow was improperly defined in CSS2 and dropped in CSS2.1. The CSS3 Text spec improved the syntax.  CSS 3 Text #text-shadow Working draft, some changes are proposed.  See also  box-shadow   \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-transform","title":"text-transform","description":"The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.  Initial value : none  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax text-transform:  capitalize | uppercase | lowercase | none | inherit   Values  capitalize First letter of each word is converted to uppercase. Other letters are unchanged; that is, they retain their original case as written in the element's text. uppercase All letters are converted to uppercase. lowercase All letters are converted to lowercase. none Case of all letters is unchanged.  Examples p { text-transform: none; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. p { text-transform: capitalize; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. p { text-transform: uppercase; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. p { text-transform: lowercase; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Text #text-transform  See also  font-variant    text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/top","title":"top","description":"The top property specifies part of the position of positioned elements. For absolutely positioned elements (those with position : absolute or position : fixed), it specifies the distance between the top margin edge of the element and the top edge of its containing block. For relatively positioned elements (those with position : relative), it specifies the amount the element is moved below its normal position.  Initial value : auto  Applies to: positioned elements Inherited : no Percentages: refer to height of containing block Media: visual   Computed value : absolute length, percentage, or auto  Syntax     top: <length> | <percentage> | auto | inherit  Examples   \/* The body could be set using px unit also for the div to operate *\/  body{    width: 100%;    height: 100%;  }  \/* The div can now operate the settings with\u00a0% unit (body w and h are set) *\/  div{    position:absolute;    left:15%;    top:30%;    bottom:30%;    width:70%;    height:40%;    text-align:left;    border: 3px rgb(0,0,0) solid;  }    <?xml version=\"1.0\" encoding=\"utf-8\"?>  <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN\"            \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd\">  <html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"en\" xml:lang=\"en\">    <head>      <meta http-equiv=\"Content-Type\" content=\"application\/xhtml+xml\" \/>      <title>Mozzila.org height top left width percentage CSS<\/title>      <style type=\"text\/css\">        \/* The body could be set using px unit also for the div to operate *\/        body{          width: 100%;          height: 100%;        }        \/* The div can now operate the settings with\u00a0% unit (body w and h are set) *\/        div{          position:absolute;          left:15%;          top:30%;          bottom:30%;          width:70%;          height:40%;          text-align:left;          border: 3px rgb(0,0,0) solid;        }      <\/style>    <\/head>    <body>       <center>         <div>              ...Some content...         <\/div>       <\/center>     <\/body>  <\/html>  Notes top is the more relevant property than bottom because the browser window default is to valign to the top. With some position property settings the top property is irrelevant. Top and bottom settings can be used by DHTML for more than simply the div element. Specifications  CSS 2.1 Browser compatibility    Browser Lowest Version   Internet Explorer ?   Firefox 1   Netscape ?   Opera ?   Safari ?    See also position , right , bottom , left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transform","title":"transform","description":"The transform CSS property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled, and skewed as this text.  Initial value : none Applies to: all block level and inline level elements Inherited : no Media: visual   Computed value :  Syntax  transform:  <transform-function> [<transform-function>]* | none Vendor prefixes: See the compatibility table below for detail on the vendor prefixes you'll need to use for this feature. Values  transform-function One or more of the CSS transform functions to be applied, see below. none Specifies that no transform should be applied.  Examples See Using CSS transforms. Live Example  pre {      width: 33em;      border: solid red;      -moz-transform: translate(100px) rotate(20deg);     -moz-transform-origin: 60% 100%;      -webkit-transform: translate(100px) rotate(20deg);     -webkit-transform-origin: 60% 100%;      -o-transform:translate(100px) rotate(20deg);      -o-transform-origin:60% 100%;      -ms-transform: translate(100px) rotate(20deg);     -ms-transform-origin: 60% 100%;      transform: translate(100px) rotate(20deg);     transform-origin: 60% 100%; }  Live Example  pre {      width: 33em;      border: solid red;      -moz-transform: translate(100px) rotate(20deg);     -moz-transform-origin: 60% 100%;      -webkit-transform: translate(100px) rotate(20deg);     -webkit-transform-origin: 60% 100%;      -o-transform:translate(100px) rotate(20deg);      -o-transform-origin:60% 100%;      -ms-transform: translate(100px) rotate(20deg);     -ms-transform-origin: 60% 100%;      transform: translate(100px) rotate(20deg);     transform-origin: 60% 100%; }  CSS transform functions The transform CSS property allows the coordinate system used by an element to be manipulated using transform functions. These functions are described below. matrix  transform:  matrix(a, c, b, d, tx, ty)  \/* Where a, b, c, d build the transformation matrix     \u250c     \u2510     \u2502 a b \u2502    \u2502 c d \u2502    \u2514     \u2518    and tx, ty are the translate values.  *\/  Specifies a 2D transformation matrix comprised of the specified six values. This is the equivalent to applying the transformation matrix [a b c d tx ty]. Note: Gecko (Firefox) accepts a  <length>  value for tx and ty. Webkit (Safari, Chrome) and Opera currently support a unitless <number>  for tx and ty. Live Examples   background: gold;  width: 30em;      -moz-transform: matrix(1, -0.2, 0, 1, 0, 0);  -webkit-transform: matrix(1, -0.2, 0, 1, 0, 0);       -o-transform: matrix(1, -0.2, 0, 1, 0, 0);      -ms-transform: matrix(1, -0.2, 0, 1, 0, 0);          transform: matrix(1, -0.2, 0, 1, 0, 0);    background: wheat;  max-width: intrinsic;      -moz-transform: matrix(1, 0, 0.6, 1, 15em, 0);  -webkit-transform: matrix(1, 0, 0.6, 1,  250, 0);       -o-transform: matrix(1, 0, 0.6, 1,  250, 0);      -ms-transform: matrix(1, 0, 0.6, 1,  250, 0);          transform: matrix(1, 0, 0.6, 1,  250, 0);  See also  Examples of linear transformation matrices Wikipedia Coordinate transformation matrices mathamazement.com Microsoft's matrix filter MSDN  rotate  transform:  rotate(angle);       \/* an <angle>, e.g.  rotate(30deg) *\/ Rotates the element clockwise around its origin (as specified by the transform-origin  property) by the specified angle. The operation corresponds to the matrix [cos(angle) sin(angle) -sin(angle) cos(angle) 0 0]. scale  transform:  scale(sx[, sy]);     \/* one or two unitless <number>s, e.g.  scale(2.1,4) *\/ Specifies a 2D scaling operation described by [sx, sy]. If sy isn't specified, it is assumed to be equal to sx. scaleX  transform:  scaleX(sx);          \/* a unitless <number>, e.g.  scaleX(2.7) *\/ Specifies a scale operation using the vector [sx, 1]. scaleY  transform:  scaleY(sy)           \/* a unitless <number>, e.g.  scaleY(0.3) *\/ Specifies a scale operation using the vector [1, sy]. skew  transform:  skew(ax[, ay])       \/* one or two <angle>s, e.g.  skew(30deg,-10deg) *\/ Skews the element around the X and Y axes by the specified angles. If ay isn't provided, no skew is performed on the Y axis. skewX  transform:  skewX(angle)         \/* an <angle>, e.g.  skewX(-30deg) *\/ Skews the element around the X axis by the given angle. skewY  transform:  skewY(angle)         \/* an <angle>, e.g.  skewY(4deg) *\/ Skews the element around the Y axis by the given angle. translate  transform:  translate(tx[, ty])  \/* one or two <length> values *\/ Specifies a 2D translation by the vector [tx, ty]. If ty isn't specified, its value is assumed to be zero. translateX  transform:  translateX(tx)       \/* see <length> for possible values *\/ Translates the element by the given amount along the X axis. translateY  transform:  translateY(ty)       \/* see <length> for possible values *\/ Translates the element by the given amount along the Y axis. matrix  transform:  matrix(a, c, b, d, tx, ty)  \/* Where a, b, c, d build the transformation matrix     \u250c     \u2510     \u2502 a b \u2502    \u2502 c d \u2502    \u2514     \u2518    and tx, ty are the translate values.  *\/  Specifies a 2D transformation matrix comprised of the specified six values. This is the equivalent to applying the transformation matrix [a b c d tx ty]. Note: Gecko (Firefox) accepts a  <length>  value for tx and ty. Webkit (Safari, Chrome) and Opera currently support a unitless <number>  for tx and ty. Live Examples   background: gold;  width: 30em;      -moz-transform: matrix(1, -0.2, 0, 1, 0, 0);  -webkit-transform: matrix(1, -0.2, 0, 1, 0, 0);       -o-transform: matrix(1, -0.2, 0, 1, 0, 0);      -ms-transform: matrix(1, -0.2, 0, 1, 0, 0);          transform: matrix(1, -0.2, 0, 1, 0, 0);    background: wheat;  max-width: intrinsic;      -moz-transform: matrix(1, 0, 0.6, 1, 15em, 0);  -webkit-transform: matrix(1, 0, 0.6, 1,  250, 0);       -o-transform: matrix(1, 0, 0.6, 1,  250, 0);      -ms-transform: matrix(1, 0, 0.6, 1,  250, 0);          transform: matrix(1, 0, 0.6, 1,  250, 0);  See also  Examples of linear transformation matrices Wikipedia Coordinate transformation matrices mathamazement.com Microsoft's matrix filter MSDN  Live Examples   background: gold;  width: 30em;      -moz-transform: matrix(1, -0.2, 0, 1, 0, 0);  -webkit-transform: matrix(1, -0.2, 0, 1, 0, 0);       -o-transform: matrix(1, -0.2, 0, 1, 0, 0);      -ms-transform: matrix(1, -0.2, 0, 1, 0, 0);          transform: matrix(1, -0.2, 0, 1, 0, 0);    background: wheat;  max-width: intrinsic;      -moz-transform: matrix(1, 0, 0.6, 1, 15em, 0);  -webkit-transform: matrix(1, 0, 0.6, 1,  250, 0);       -o-transform: matrix(1, 0, 0.6, 1,  250, 0);      -ms-transform: matrix(1, 0, 0.6, 1,  250, 0);          transform: matrix(1, 0, 0.6, 1,  250, 0);  See also  Examples of linear transformation matrices Wikipedia Coordinate transformation matrices mathamazement.com Microsoft's matrix filter MSDN  rotate  transform:  rotate(angle);       \/* an <angle>, e.g.  rotate(30deg) *\/ Rotates the element clockwise around its origin (as specified by the transform-origin  property) by the specified angle. The operation corresponds to the matrix [cos(angle) sin(angle) -sin(angle) cos(angle) 0 0]. scale  transform:  scale(sx[, sy]);     \/* one or two unitless <number>s, e.g.  scale(2.1,4) *\/ Specifies a 2D scaling operation described by [sx, sy]. If sy isn't specified, it is assumed to be equal to sx. scaleX  transform:  scaleX(sx);          \/* a unitless <number>, e.g.  scaleX(2.7) *\/ Specifies a scale operation using the vector [sx, 1]. scaleY  transform:  scaleY(sy)           \/* a unitless <number>, e.g.  scaleY(0.3) *\/ Specifies a scale operation using the vector [1, sy]. skew  transform:  skew(ax[, ay])       \/* one or two <angle>s, e.g.  skew(30deg,-10deg) *\/ Skews the element around the X and Y axes by the specified angles. If ay isn't provided, no skew is performed on the Y axis. skewX  transform:  skewX(angle)         \/* an <angle>, e.g.  skewX(-30deg) *\/ Skews the element around the X axis by the given angle. skewY  transform:  skewY(angle)         \/* an <angle>, e.g.  skewY(4deg) *\/ Skews the element around the Y axis by the given angle. translate  transform:  translate(tx[, ty])  \/* one or two <length> values *\/ Specifies a 2D translation by the vector [tx, ty]. If ty isn't specified, its value is assumed to be zero. translateX  transform:  translateX(tx)       \/* see <length> for possible values *\/ Translates the element by the given amount along the X axis. translateY  transform:  translateY(ty)       \/* see <length> for possible values *\/ Translates the element by the given amount along the Y axis. Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 (1.9.1)  -moz yes  -webkit 9.0 -ms 10.5 -o 3.1 -webkit   3D Support 10.0 -moz 12.0 -webkit 10.0 -ms no 4.0 -webkit         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support ? ? ? ?     Notes Internet Explorer 5.5 or later supports a proprietary Matrix Filter which can be used to achieve the similar effect. Notes Internet Explorer 5.5 or later supports a proprietary Matrix Filter which can be used to achieve the similar effect. Specifications   CSS 2D Transforms Module Level 3: transformWD  See also  transform-origin  Using CSS transforms More info on CSS3 Rotation \/ Matrix Filter issues in the comments on Paul Irish's blog. A cross-browser 2D transform plugin for jQuery"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transform-origin","title":"transform-origin","description":"The transform-origin CSS property lets you modify the origin for transformations of an element. For example, the transform-origin of the rotate() function is the centre of rotation. (This property is applied by first translating the element by the negated value of the property, then applying the element's transform, then translating by the property value.)  Initial value : 50% 50% Applies to: all block level and inline level elements Inherited : no Percentages: refer to the size of the box itself Media: visual   Computed value : for <length> the absolute value, otherwise a percentage  Syntax  transform-origin:  [ <percentage> | <length> | left | center | right ]                    [ <percentage> | <length> | top | center | bottom ] ?   transform-origin:  [ left | center | right ] || [ top | center | bottom ]  Values Accepts one or two values.  One single value sets the horizontal position, the vertical position is set to 50%. Two values apply first to the horizontal and second to the vertical position.  Combinations are allowed of keyword,  <length> , or <percentage>  values, but if keywords are mixed with other values, left and right may only be used as the first value, and top and bottom may only be used as the second value. Negative positions are allowed.  <percentage> With a value pair of 0% 0%, (or just 0 0) the transform-origin is the upper left corner of the box. A value pair of 100% 100% places the transform-origin to the lower right corner. With a value pair of 14% 84%, the point 14% across and 84% down the box is the transform-origin. <length> With a value pair of e.g. 2cm 1cm, the transform-origin is placed 2cm to the right and 1cm below the upper left corner of the element. top left | left top Same as 0 0 top | top center | center top Same as 50% 0 right top | top right Same as 100% 0 left | left center | center left Same as 0 50% center | center center Same as 50% 50% (default value) right | right center | center right Same as 100% 50% bottom left | left bottom Same as 0 100% bottom | bottom center | center bottom Same as 50% 100% bottom right | right bottom Same as 100% 100%  Values Accepts one or two values.  One single value sets the horizontal position, the vertical position is set to 50%. Two values apply first to the horizontal and second to the vertical position.  Combinations are allowed of keyword,  <length> , or <percentage>  values, but if keywords are mixed with other values, left and right may only be used as the first value, and top and bottom may only be used as the second value. Negative positions are allowed.  <percentage> With a value pair of 0% 0%, (or just 0 0) the transform-origin is the upper left corner of the box. A value pair of 100% 100% places the transform-origin to the lower right corner. With a value pair of 14% 84%, the point 14% across and 84% down the box is the transform-origin. <length> With a value pair of e.g. 2cm 1cm, the transform-origin is placed 2cm to the right and 1cm below the upper left corner of the element. top left | left top Same as 0 0 top | top center | center top Same as 50% 0 right top | top right Same as 100% 0 left | left center | center left Same as 0 50% center | center center Same as 50% 50% (default value) right | right center | center right Same as 100% 50% bottom left | left bottom Same as 0 100% bottom | bottom center | center bottom Same as 50% 100% bottom right | right bottom Same as 100% 100%  Examples See Using CSS transforms for examples. Live Examples    transform: none;  \u00a0    transform: rotate(30deg);  \u00a0    transform: rotate(30deg); transform-origin: 0 0;  \u00a0    transform: rotate(30deg); transform-origin: 100% 100%;  \u00a0    transform: rotate(30deg); transform-origin: -10em -30em;  \u00a0    transform: scale(1.9);  \u00a0    transform: scale(1.9); transform-origin: 0 0;  \u00a0    transform: scale(1.9); transform-origin: 100% -30%;  \u00a0    transform: skew(50deg);  \u00a0    transform: skew(50deg); transform-origin: 0 0;  \u00a0    transform: skew(50deg); transform-origin: 100% 100%;  \u00a0     Live Examples    transform: none;  \u00a0    transform: rotate(30deg);  \u00a0    transform: rotate(30deg); transform-origin: 0 0;  \u00a0    transform: rotate(30deg); transform-origin: 100% 100%;  \u00a0    transform: rotate(30deg); transform-origin: -10em -30em;  \u00a0    transform: scale(1.9);  \u00a0    transform: scale(1.9); transform-origin: 0 0;  \u00a0    transform: scale(1.9); transform-origin: 100% -30%;  \u00a0    transform: skew(50deg);  \u00a0    transform: skew(50deg); transform-origin: 0 0;  \u00a0    transform: skew(50deg); transform-origin: 100% 100%;  \u00a0     Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 (1.9.1)  -moz yes  -webkit 9.0 -ms 10.5 -o 3.1 -webkit         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support ? ? ? ?     Notes Internet Explorer 5.5 or later supports a proprietary Matrix Filter which can be used to achieve the similar effect. Notes Internet Explorer 5.5 or later supports a proprietary Matrix Filter which can be used to achieve the similar effect. Specifications   CSS 2D Transforms Module Level 3: transform-originWD  See also  transform  Using CSS transforms"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transform-style","title":"transform-style","description":"The transform-style CSS property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element. If flattened, the children will not exist on their own in the 3D-space. As this property is not inherited, it must be set for all non-leaf descendants of the element.  Initial value  : flat Applies to : block and inline elements Inherited : no Media: visual   Computed value : same as specified value. Syntax transform-style: preserve-3d              or transform-style: flat  where : \u00a0  preserve-3d Indicates that the children of the element should be positioned in the 3D-space. flat Indicates that the children of the element are lying in the plane of the element itself.  Examples Specifications    Specification Status Comment     CSS 3D Transforms Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 12 -webkit 10.0 (10)  -moz 10 -ms -- (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 3.0 -webkit 10.0 (10)  -moz ? -- (Supported) -webkit     See also  CSS Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition","title":"transition","description":"The -moz-transition CSS property is a shorthand property for -moz-transition-property , -moz-transition-duration , -moz-transition-timing-function , and -moz-transition-delay . Note: This implementation of the CSS transition-duration property is based on a draft specification; the syntax is subject to change.  Initial value : -moz-transition is a shorthand property, so it does not technically have an initial value, but the properties for which it is shorthand have the following initial values:  -moz-transition-property: all; -moz-transition-duration: 0s; -moz-transition-timing-function: ease; -moz-transition-delay: 0s;   Applies to: all elements, :before  and :after  pseudo elements Inherited :no Media: interactive   Computed value : as specified  Syntax  -moz-transition:  [ <transition-property> || <transition-duration> || <transition-timing-function> || <transition-delay> ]  See When property value lists are of different lengths for details on how things are handled when lists of property values aren't the same length. In short, extra transition descriptions beyond the number of properties actually being animated are ignored. Examples There are several more examples of CSS transitions included in the main CSS\u00a0transitions article. Specifications  CSS Transitions Module Level 3 (Working Draft)  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 (-webkit-) 4.0 (2.0)  (-moz-) - 10.5 3.0 (-webkit-)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  CSS transitions -moz-transition-property  -moz-transition-duration  -moz-transition-timing-function  -moz-transition-delay"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-delay","title":"transition-delay","description":"The -moz-transition-delay CSS property specifies the amount of time to wait between a change being requested to a property that is to be transitioned and the start of the transition effect. A value of 0s (or 0ms) indicates that the property will begin to animate its transition immediately when the value changes; positive values will delay the start of the transition effect for the corresponding number of seconds. Negative values cause the transition to begin immediately, but to cause the transition to seem to begin partway through the animation effect. You may specify multiple delays; each delay will be applied to the corresponding property as specified by the -moz-transition-property  property. Note: This implementation of the CSS transition-delay property is based on a draft specification; the syntax is subject to change.  Initial value : 0s Applies to: all elements, :before  and :after  pseudo elements Inherited :no Media: interactive   Computed value : as specified  Syntax  -moz-transition-delay: <time>[, <time>]*  Values  time The time (in seconds or milliseconds) to wait between a property's value changing and the start of the animation effect. A time in seconds is represented by a number followed by \"s\", while a time in milliseconds is a number followed by \"ms\".  Examples There are several examples of CSS transitions included in the main CSS\u00a0transitions article. Specifications  CSS Transitions Module Level 3 (Working Draft)  Browser compatibility    Browser Lowest Version   Internet Explorer ---   Firefox (Gecko) 4.0 (2.0)   Opera ---   Safari (WebKit) nightly, don't know version     See also  CSS transitions -moz-transition  -moz-transition-property  -moz-transition-duration  -moz-transition-timing-function"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-duration","title":"transition-duration","description":"The -moz-transition-duration CSS property specifies the number of seconds or milliseconds a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur. You may specify multiple durations; each duration will be applied to the corresponding property as specified by the -moz-transition-property  property. Note: This implementation of the CSS transition-duration property is based on a draft specification; the syntax is subject to change.  Initial value : 0s Applies to: all elements, :before  and :after  pseudo elements Inherited :no Media: interactive   Computed value : as specified  Syntax  -moz-transition-duration: <time>[, <time>]*  Values  time The time (in seconds or milliseconds) the transition from the old value of a property to the new value should take. A time in seconds is represented by a number followed by \"s\", while a time in milliseconds is a number followed by \"ms\".  Examples There are several examples of CSS transitions included in the main CSS\u00a0transitions article. Specifications  CSS Transitions Module Level 3 (Working Draft)  Browser compatibility    Browser Lowest Version   Internet Explorer ---   Firefox (Gecko) 4.0? (2.0)   Opera ---   Safari (WebKit) nightly, don't know version    See also  CSS transitions -moz-transition  -moz-transition-property  -moz-transition-timing-function  -moz-transition-delay"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-property","title":"transition-property","description":"The -moz-transition-property CSS property is used to specify the names of CSS properties to which a transition effect should be applied. Note: The set of properties that can be animated is subject to change; as such, you should avoid including any properties in the list that don't currently animate, because someday they might, causing unexpected results. If you specify a shorthand property (for example, background , all of its longhand sub-properties that can be animated will be. Note: This implementation of the CSS transition-property property is based on a draft specification; the syntax is subject to change.  Initial value : all  Applies to: all elements, :before  and :after  pseudo elements Inherited :no Media: visual   Computed value : as specified  Syntax  -moz-transition-property: none |\u00a0all |\u00a0[<property-name>][, <property-name>]*  Values  none No properties will transition. all All properties that can have an animated transition will do so. property-name A property to which a transition effect should be applied when its value changes.  Examples There are several examples of CSS transitions included in the main CSS\u00a0transitions article. Specifications  CSS Transitions Module Level 3 (Working Draft)  Browser compatibility    Browser Lowest Version   Internet Explorer ---   Firefox (Gecko) 4.0 (2.0)   Opera ---   Safari (WebKit) nightly, don't know version    See also  CSS transitions -moz-transition  -moz-transition-duration  -moz-transition-timing-function  -moz-transition-delay"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-timing-function","title":"transition-timing-function","description":"The transition-timing-function CSS property is used to describe how the intermediate values of the CSS\u00a0properties being affected by a transition effect are calculated. This in essence lets you establish an acceleration curve, so that the speed of the transition can vary over its duration. This acceleration curve is defined using one <timing-function>   for each property to be transitioned.\u00a0 Note: This implementation of the CSS transition-timing-function is based on a draft specification and is therefore experimental : the syntax is subject to change.  Initial value : ease Applies to: all elements, :before  and :after  pseudo elements Inherited :no Media: interactive   Computed value : as specified Syntax  -moz-transition-timing-function: <timing-function> [, <timing-function>]*  where:  Each <timing-function>   represents the timing function to link to the corresponding property to transition, as defined in transition-property . Examples There are several examples of CSS transitions included in the main CSS\u00a0transitions article. Specifications  CSS Transitions Module Level 3 (Working Draft)  Browser compatibility    Browser Lowest Version   Internet Explorer ---   Firefox (Gecko) 4.0 (2.0)  -moz   Opera ---   Safari (WebKit) 3.1  -webkit    See also  CSS transitions transition  transition-property  transition-duration  transition-delay"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/unicode-bidi","title":"unicode-bidi","description":"Syntax unicode-bidi: [ normal | embed | [ isolate || bidi-override ] | plaintext | inherit ] ;  Values  normal\u00a0 The element does not offer a additional level of embedding with respect to the bidirectional algorithm. For inline elements implicit reordering works across element boundaries. embed If the element is inline, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the direction  property. bidi-override\u00a0 For inline elements this creates an override. For block container elements this creates an override for inline-level descendants not within another block container element. This means that inside the element, reordering is strictly in sequence according to the direction  property; the implicit part of the bidirectional algorithm is ignored. isolate This keyword indicates that the element's container directionality should be calculated without considering the content of this element. The element is therefore isolated from its siblings. When applying its bidirectional-resolution algorithm, its container element treats it as one or several U+FFFC Object Replacement Character, i.e. like an image. This keyword can be combined with bidi-override. plaintext This keyword makes the elements directionality calculated without considering its parent bidirectional state or the value of the direction  property. The directionality is calculated using the P2 and P3 rules of the Unicode Bidirectional Algorithm. This value allows to display data which has already formatted using a tool following the Unicode Bidirectional Algorithm. Examples  .bible-quote { \u00a0\u00a0direction: rtl;   unicode-bidi: embed; }   Specification    Specification Status Comment     CSS Writing Modes Level 3 Working Draft  Added plaintext and isolate keywords   CSS 2 Level 1 Recommendation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 (1.7 or earlier)  5.5 9.2 1.3   isolate 16 10.0 (10)  [1] -- -- --   plaintext -- 10.0 (10)  [2] -- -- --         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1.0)  6 8 3.1   isolate -- 10.0 (10)  [3] -- -- --   plaintext -- 10.0 (10)  [4] -- -- --     See also direction"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/white-space","title":"white-space","description":"The white-space CSS property is used to to describe how whitespace inside the element is handled.  Initial value : normal  Applies to: all elements Inherited : yes Media: visual   Computed value : as specified  Syntax  white-space:  normal | pre | nowrap | pre-wrap | pre-line | inherit  Values  normal Sequences of whitespace are collapsed. Newline characters in the source are handled as other whitespace. Breaks lines as necessary to fill line boxes. pre Sequences of whitespace are preserved, lines are only broken at newline characters in the source. nowrap Collapses whitespace as for normal, but suppresses line breaks (text wrapping) within text. pre-wrap  New in Firefox 3  Sequences of whitespace are preserved. Lines are only broken at newline characters in the source and as necessary to fill line boxes.  For backward compatibility with Firefox 2, you may wish to also include -moz-pre-wrap, which does the same thing in older versions of Firefox but is ignored in Firefox 3.5 and later. pre-line  New in Firefox 3.5  Sequences of whitespace are collapsed. Lines are broken at newlines in the source and as necessary to fill line boxes.  The following table summarizes the behavior of various white-space values:    \u00a0 New lines Spaces and tabs Text wrapping     normal Collapse Collapse Wrap   pre Preserve Preserve No wrap   nowrap Collapse Collapse No wrap   pre-wrap Preserve Preserve Wrap   pre-line Preserve Collapse Wrap    Examples  code { white-space: pre; } Notes white-space:pre-line is not implemented in Firefox prior to version 3.5 (Gecko 1.9.1). Browser compatibility    Browser Lowest version Support of   Internet Explorer 5.5 normal | nowrap   5.5 [*]   6.0 normal | pre | nowrap   8.0 normal | pre | nowrap | pre-wrap | pre-line   Firefox (Gecko) 1.0 (1.0) normal | pre | nowrap | -moz-pre-wrap   3.0 (1.9) normal | pre | nowrap | pre-wrap | -moz-pre-wrap   3.5 (1.9.1) normal | pre | nowrap | pre-wrap | pre-line   Opera 4.0 normal | pre | nowrap   8.0 normal | pre | nowrap | pre-wrap   9.5 normal | pre | nowrap | pre-wrap | pre-line   Safari (WebKit) 1.0 (85) normal | pre | nowrap   3.0 (522) normal | pre | nowrap | pre-wrap | pre-line    [*] Internet Explorer 5.5+ supports word-wrap : break-word; The following code allows line breaking inside pre elements:  pre {       word-wrap: break-word;      \/* IE 5.5-7 *\/       white-space: -moz-pre-wrap; \/* Firefox 1.0-2.0 *\/       white-space: pre-wrap;      \/* current browsers *\/ } Specifications  CSS 2.1 Text #white-space  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/vertical-align","title":"vertical-align","description":"The vertical-align property specifies the vertical alignment of an inline or table-cell element.  Initial value : baseline  Applies to: inline elements and table cells Inherited : No Media: visual   Computed value :  Syntax vertical-align: baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length> | inherit  Values (for inline elements) Most of the values vertically align the element relative to its parent element:  baseline\u00a0 Align the baseline of the element with the baseline of its parent. sub\u00a0 Align the baseline of the element with the subscript-baseline of its parent. super\u00a0 Align the baseline of the element with the superscript-baseline of its parent. text-top\u00a0 Align the top of the element with the top of the parent element's font. text-bottom\u00a0 Align the bottom of the element with the bottom of the parent element's font. middle\u00a0 Align the middle of the element with the middle of lowercase letters in the parent. <length>\u00a0 Align the baseline of the element at the given length above the baseline of its parent. <percentage>\u00a0 like <length> values, with the percentage being a percent of the line-height  property  For elements that do not have a baseline, the bottom margin edge is used instead. However, two values vertically align the element relative to the entire line rather than relative to its parent:  top\u00a0 Align the top of the element and its descendants with the top of the entire line. bottom\u00a0 Align the bottom of the element and its descendants with the bottom of the entire line.  Negative values are allowed. Values (for table cells)  baseline (and sub, super, text-top, text-bottom, <length>, and <percentage>)\u00a0 Align the baseline of the cell with the baseline of all other cells in the row that are baseline-aligned. top Align the top padding edge of the cell with the top of the row. middle Center the padding box of the cell within the row. bottom Align the bottom padding edge of the cell with the bottom of the row.  Negative values are allowed. Examples  img { \tvertical-align: bottom; }  Notes Specifications  CSS 1 CSS 2.1  Browser compatibility    Browser lowest version   Internet Explorer 4.0   Firefox (Gecko) 1.0 (1.0)   Opera 4.0   Safari (WebKit) 1.0 (85)    See also line-height , text-align , margin  (auto)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/widows","title":"widows","description":"Browser Compatibility    Browser Lowest version   Internet Explorer IE 8   Firefox (Gecko) --   Opera 9.2    Safari | Chrome | WebKit   --     \u00a0 See Also  orphans  Paged Media"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/visibility","title":"visibility","description":"The visibility CSS property is used for two things:  The hidden value hides an element but leaves space where it would have been. The collapse value hides rows or columns of a table. It also collapses XUL\u00a0elements.   Initial value : visible  Applies to: All elements Inherited : Yes Media: visual   Computed value : As specified  Syntax  visibility:  visible | hidden | collapse | inherit   Values  visible Default value, the box is visible. hidden The box is invisible (fully transparent, nothing is drawn), but still affects layout.\u00a0 Descendants of the element will be visible if they have visibility:visible (this doesn't work in IE up to version 7). collapse For table rows, columns, column groups, and row groups the row(s) or column(s) are hidden and the space they would have occupied is (as if display : none were applied to the column\/row of the table). However, the size of other rows and columns is still calculated as though the cells in the collapsed row(s) or column(s) are present. This was designed for fast removal of a row\/column from a table without having to recalculate widths and heights for every portion of the table. For XUL\u00a0elements, the computed size of the element is always zero, regardless of other styles that would normally affect the size, although margins still take effect. For other elements, collapse is treated the same as hidden.  Examples  p        { visibility: hidden; }    \/* paragraphs won't be visible *\/ p.showme { visibility: visible; }   \/* except of these with class showme *\/ tr.col   { visibility: collapse; }  \/* table rows with class col will collapse *\/  Notes The support for visibility:collapse is missing or partially incorrect in some modern browsers. In many cases it may not be correctly treated like visibility:hidden on elements other than table rows and columns. visibility:collapse may change the layout of a table if the table has nested tables within the cells that are collapsed, unless visibility:visible is specified explicitly on nested tables. Browser compatibility    Browser Lowest version   Internet Explorer 4.0   Firefox (Gecko) 1.0 (1.0)   Opera 4.0   Safari (WebKit) 1.0 (85)    Specifications  CSS 2.1 Visual effects #visibility  See also display"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/width","title":"width","description":"The width CSS property specifies the width of the content area of an element. The content area is inside the padding, border, and margin of the element.  Initial value : auto  Applies to: block level and replaced elements Inherited : no Percentages: refer to the width of the containing block Media: visual    Computed value :\u00a0 the percentage or auto as specified or the absolute length  Syntax  width:  <length> | <percentage> | auto | inherit | -moz-max-content | -moz-min-content | -moz-fit-content | -moz-available Values  <length> See  <length>  for possible units. <percentage> Specified as a <percentage>  of containing block's width. auto The browser will calculate and select a width for the specified element. Mozilla Extensions -moz-max-content  New in Firefox 3  The intrinsic preferred width. -moz-min-content  New in Firefox 3  The intrinsic minimum width. -moz-available  New in Firefox 3  The containing block width minus horizontal margin, border and padding. -moz-fit-content  New in Firefox 3  The larger of:  the intrinsic minimum width the smaller of the intrinsic preferred width and the available width    Mozilla Extensions -moz-max-content  New in Firefox 3  The intrinsic preferred width. -moz-min-content  New in Firefox 3  The intrinsic minimum width. -moz-available  New in Firefox 3  The containing block width minus horizontal margin, border and padding. -moz-fit-content  New in Firefox 3  The larger of:  the intrinsic minimum width the smaller of the intrinsic preferred width and the available width   Examples  View Live Examples  table { width: 100%; }  img   { width: 200px; }  form  { width: auto; }  p     { width: 40em; }    p { background: gold }  The Mozilla community produces a lot of great software.  p { background: lightgreen;     width: intrinsic;         \/* Safari\/WebKit *\/     width: -moz-max-content;  \/* Firefox\/Gecko *\/   }  The Mozilla community produces a lot of great software.  p { background: lightblue;  max-width: -moz-min-content; }  The Mozilla community produces a lot of great software. Notes The min-width  and max-width  properties override width . Specifications  CSS 2.1 #width  Browser compatibility    Browser Lowest Version intrinsic width intrinsic minimum width   Internet Explorer 4.0 --- --- --- ---   Firefox (Gecko) 1.0 (1.0) 3.0 (1.9) -moz-max-content -moz-fit-content 3.0 (1.9) -moz-min-content   Opera 3.5 --- --- --- ---   Safari (WebKit) 1.0 (85) 2.0 (412) ? intrinsic --- ---    See also box model, height , box-sizing , min-width , max-width"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/word-spacing","title":"word-spacing","description":"The word-spacing CSS property specifies spacing behavior between words.  Initial value : normal  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : for normal the value 0; otherwise the absolute length  Syntax word-spacing:  normal | <length>  Values normal\u00a0 The normal inter-word space, as defined by the current font and\/or the UA. <length>\u00a0   See  <length>  value for possible units. Examples p { word-spacing: 1em; }  Specifications  CSS 2.1 Text #word-spacing Browser compatibility    Browser Lowest Version   Internet Explorer 6.0   Firefox (Gecko) 1.0 (1.0)   Opera 3.5   Safari (WebKit) 1.0 (85)    See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/word-wrap","title":"word-wrap","description":"The word-wrap CSS property is used to to specify whether or not the browser is allowed to break lines within words in order to prevent overflow when an otherwise unbreakable string is too long to fit.  Initial value : normal  Applies to: all elements Inherited : yes Media: visual   Computed value : as specified  Syntax  word-wrap:  normal | break-word  Values  normal Lines may only break at normal word break points. break-word Unbreakable words may be broken at arbitrary points if there are no otherwise acceptable break points in the line.  Examples  p { width:13em; background:gold; }  FStrPrivFin\u00c4ndG (Gesetz zur \u00c4nderung des Fernstra\u00dfenbauprivatfinanzierungsgesetzes und stra\u00dfenverkehrsrechtlicher Vorschriften)  p { width:13em; background:gold; word-wrap:break-word; }  FStrPrivFin\u00c4ndG (Gesetz zur \u00c4nderung des Fernstra\u00dfenbauprivatfinanzierungsgesetzes und stra\u00dfenverkehrsrechtlicher Vorschriften) Specifications  CSS 3 Text Working draft MSDN Microsoft library word-wrap  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   word-wrap 3.5 (1.9.1)  1.0 5.5 10.5 1.0         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   word-wrap 1.0 (1.9.1)  1.0 ? ? 1.0      word-wrap:break-word can be used to work around lack of pre{white-space:pre-wrap} support in IE 5.5-7. See white-space  for an example. IE8 introduced -ms-word-wrap as a synonym for word-wrap. Don't use the -ms- prefix. See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/z-index","title":"z-index","description":"The z-index CSS property specifies the z-order of an element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one. For a positioned box, the z-index property specifies:  The stack level of the box in the current stacking context. Whether the box establishes a local stacking context.   Initial value : auto  Applies to: positioned elements  Inherited : no Media: visual   Computed value : as specified  Syntax  z-index:  auto | <integer> | inherit Values  auto The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is the same as its parent's box. <integer> This integer is the stack level of the generated box in the current stacking context. The box also establishes a local stacking context in which its stack level is 0. This means that the z-indexes of descendants are not compared to the z-indexes of elements outside this element.   Examples position:relative; z-index:1; position:absolute; z-index:3; left:20em; top:-25px; opacity:0.9 position:absolute; z-index:2; left:60px; top:3em; Notes Negative z-index values are supported correctly starting in Gecko 1.9 \/ Firefox 3. Previous versions implemented the CSS 2 behavior, not the CSS 2.1 behavior that is compatible with other browsers. Specifications  CSS 2.1 Visual formatting #z-index  Browser compatibility    Browser Lowest Version   Internet Explorer 4.0   Firefox (Gecko) 1.0 (1.0)   Opera 4.0   Safari (WebKit) 1.0 (85)    See also  CSS position  property Understanding CSS z-indexes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/angle","title":"angle","description":"Examples      A right angle: 90deg = 100grad = 0.25turn \u2248 1.0708rad     A flat angle: 180deg = 200grad = 0.5turn \u2248 2.1416rad     A right angle (towards the left): -90deg = -100grad = -0.25turn \u2248 -1.0708rad    A null angle: 0deg = 0grad = 0turn = 0rad    Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2 (528.17) 3.6 (1.9.2) 9.0 no 4.0 (528.17)   turn unit no no 9.0 no no         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? yes ? no ?   turn unit no no ? no no      See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>   \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/auto","title":"auto","description":"Signifies a value that is to be automatically computed by a useragent.\u00a0 The specific effects of auto depend on the property to which it is applied as its value. Used in  overflow  cursor  width  marker-offset  margin  margin-* (left|bottom|top|right|start|end) bottom  left  table-layout  z-index  -moz-column-width"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/counter","title":"counter","description":"Specifications http:\/\/www.w3.org\/TR\/CSS21\/syndata.html#counter"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/color_value","title":"color value","description":"The <color> CSS data type denotes a color in the sRGB color space. A color can be described using a keyword, using the RGB cubic-coordinate system (via the #-hexadecimal or the rgb() and rgba() functional notations) or using the HSL cylindrical-coordinate system (via the hsl() and hsla() functional notations). Associated with the color in the sRGB space, a <color> value also consists of an alpha-channel coordinate, transparency value, indicating how the color should composite with its background color. Though CSS color values are precisely defined, they may appear differently on an output device. Most of them are not calibrated, and some browsers do not support output devices' color profile. Without these, color rendering may vary a lot. Note:\u00a0 The WCAG 2.0 recommendation from the W3C strongly advises web authors not to use color as the only mean to convey a specific information, action or result. Some users have problem to distinguish colors and the conveyed information may not be grasped. Of course, this doesn't prevent the usage of color, only its usage as the only mean to describe some information. Interpolation Values of the <color> CSS data type can be interpolated in order to perform animations or for creating <gradient> values. In that case they are interpolated on each of their red, green, blue components, each handled as a real, floating-point, numbers. [1] Note that interpolation of colors happens in the alpha-premultiplied sRGBA color space to prevent unexpected grey colors to appear. In animations, the speed of the interpolation is determined by the timing function associated with the animation.Values There are several ways to describe a <color> value. Color Keywords Color keywords are case-insensitive identifiers which represent a specific color, e.g. red, blue, brown, lightseagreen. The name describes the color, though it is mostly artificial. The list of accepted values varied a lot through the different specification:  CSS Level 1 only accepted 16 basic colors, named the VGA colors as they were taken from the set of displayable colors on VGA graphic cards. CSS Level 2 added the orange keyword. From the beginning, browsers accepted other colors, mostly the X11 named colors list as some early browsers where X11 applications, though with a few differences. SVG 1.0 was the first standard to formally defined these keywords; CSS Colors Level 3 also formally defined these keywords. They are often referred as the extended color keywords, the X11 colors, the SVG colors.  There are a few caveats to consider when using keywords:  Except the 16 basic colors which are common with HTML, the others cannot be used in HTML. HTML will convert these unknown values with a specific algorithm which will lead to completely different colors. These keywords should only be used in SVG & CSS. Unknown keywords make the CSS property invalid. Invalid properties being ignored, the color will have no effect. This is a different behavior than the one of HTML. No keyword-defined colors in CSS have any transparency, they are plain, solid colors. Several keywords denote the same colors:  darkgray \/ darkgrey darkslategray \/ darkslategrey dimgray \/ dimgrey lightgray \/ lightgrey lightslategray \/ lightslategrey gray \/ grey slategray \/ slategray   Though the names of the keywords have been taken by the usual X11 color names, the color may diverge from the corresponding system color on X11 system as these are tailored for the specific hardware by the manufacturer [2].     Specifications Color Keyword RGB cubic coordinates Live Example     CSS3 CSS2 CSS1 \u00a0 black =rgb(\u00a0 0,\u00a0\u00a0 0,\u00a0\u00a0 0) \u00a0   \u00a0 silver =rgb(192, 192, 192) \u00a0   \u00a0 gray[*] =rgb(128, 128, 128) \u00a0   \u00a0 white =rgb(255, 255, 255) \u00a0   \u00a0 maroon =rgb(128,\u00a0\u00a0 0,\u00a0\u00a0 0) \u00a0   \u00a0 red =rgb(255,\u00a0\u00a0 0,\u00a0\u00a0 0) \u00a0   \u00a0 purple =rgb(128,\u00a0\u00a0 0, 128) \u00a0   \u00a0 fuchsia =rgb(255,\u00a0\u00a0 0, 255) \u00a0   \u00a0 green =rgb(\u00a0 0, 128,\u00a0\u00a0 0) \u00a0   \u00a0 lime =rgb(\u00a0 0, 255,\u00a0\u00a0 0) \u00a0   \u00a0 olive =rgb(128, 128,\u00a0\u00a0 0) \u00a0   \u00a0 yellow =rgb(255, 255,\u00a0\u00a0 0) \u00a0   \u00a0 navy =rgb(\u00a0 0,\u00a0\u00a0 0, 128) \u00a0   \u00a0 blue =rgb(\u00a0 0,\u00a0\u00a0 0, 255) \u00a0   \u00a0 teal =rgb(\u00a0 0, 128, 128) \u00a0   \u00a0 aqua =rgb(\u00a0 0, 255, 255) \u00a0   \u00a0 \u00a0 orange =rgb(255, 165,\u00a0\u00a0 0) \u00a0   \u00a0 \u00a0 \u00a0 aliceblue =rgb(240, 248, 245) \u00a0   \u00a0 antiquewhite =rgb(250, 235, 215) \u00a0   \u00a0 aquamarine =rgb(127, 255, 212) \u00a0   \u00a0 azure =rgb(240, 255, 255) \u00a0   \u00a0 beige =rgb(245, 245, 220) \u00a0   \u00a0 bisque =rgb(255, 228, 196) \u00a0   \u00a0 blanchedalmond =rgb(255, 235, 205) \u00a0   \u00a0 blueviolet =rgb(138,\u00a0 43, 226) \u00a0   \u00a0 brown =rgb(165,\u00a0 42,\u00a0 42) \u00a0   \u00a0 burlywood =rgb(222, 184,\u00a0 35) \u00a0   \u00a0 cadetblue =rgb( 95, 158, 160) \u00a0   \u00a0 chartreuse =rgb(127, 255,\u00a0\u00a0 0) \u00a0   \u00a0 chocolate =rgb(210, 105,\u00a0 30) \u00a0   \u00a0 coral =rgb(255, 127,\u00a0 80) \u00a0   \u00a0 cornflowerblue =rgb(100, 149, 237) \u00a0   \u00a0 cornsilk =rgb(255, 248, 220) \u00a0   \u00a0 crimson =rgb(220,\u00a0 20,\u00a0 60) \u00a0   \u00a0 darkblue =rgb(\u00a0 0, \u00a0 0, 139) \u00a0   \u00a0 darkcyan =rgb(\u00a0 0, 139, 139) \u00a0   \u00a0 darkgoldenrod =rgb(184, 134,\u00a0 11) \u00a0   \u00a0 darkgray[*] =rgb(169, 169, 169) \u00a0   \u00a0 darkgreen =rgb(\u00a0 0, 100, \u00a0 0) \u00a0   \u00a0 darkgrey[*] =rgb(169, 169, 169) \u00a0   \u00a0 darkkhaki =rgb(189, 183, 107) \u00a0   \u00a0 darkmagenta =rgb(139, \u00a0 0, 139) \u00a0   \u00a0 darkolivegreen =rgb( 85, 107,\u00a0 47) \u00a0   \u00a0 darkorange =rgb(255, 140, \u00a0 0) \u00a0   \u00a0 darkorchid =rgb(153,\u00a0 50, 204) \u00a0   \u00a0 darkred =rgb(139, \u00a0 0, \u00a0 0) \u00a0   \u00a0 darksalmon =rgb(233, 150, 122) \u00a0   \u00a0 darkseagreen =rgb(143, 188, 143) \u00a0   \u00a0 darkslateblue =rgb( 72,\u00a0 61, 139) \u00a0   \u00a0 darkslategray[*] =rgb( 47,\u00a0 79,\u00a0 79) \u00a0   \u00a0 darkslategrey[*] =rgb( 47,\u00a0 79,\u00a0 79) \u00a0   \u00a0 darkturquoise =rgb(\u00a0 0, 206, 209) \u00a0   \u00a0 darkviolet =rgb(148, \u00a0 0, 211) \u00a0   \u00a0 deeppink =rgb(255,\u00a0 20, 147) \u00a0   \u00a0 deepskyblue =rgb(\u00a0 0, 191, 255) \u00a0   \u00a0 dimgray[*] =rgb(105, 105, 105) \u00a0   \u00a0 dimgrey[*] =rgb(105, 105, 105) \u00a0   \u00a0 dodgerblue =rgb( 30, 144, 255) \u00a0   \u00a0 firebrick =rgb(178,\u00a0 34,\u00a0 34) \u00a0   \u00a0 floralwhite =rgb(255, 250, 240) \u00a0   \u00a0 forestgreen =rgb( 34, 139,\u00a0 34) \u00a0   \u00a0 gainsboro =rgb(220, 220, 220) \u00a0   \u00a0 ghostwhite =rgb(248, 248, 255) \u00a0   \u00a0 gold =rgb(255, 215,\u00a0\u00a0 0) \u00a0   \u00a0 goldenrod =rgb(218, 165,\u00a0 32) \u00a0   \u00a0 greenyellow =rgb(173, 255,\u00a0 47) \u00a0   \u00a0 grey =rgb(128, 128, 128) \u00a0   \u00a0 honeydew =rgb(240, 255, 240) \u00a0   \u00a0 hotpink =rgb(255, 105, 180) \u00a0   \u00a0 indianred =rgb(205,\u00a0 92,\u00a0 92) \u00a0   \u00a0 indigo =rgb( 75,\u00a0 0, 130) \u00a0   \u00a0 ivory =rgb(255, 255, 240) \u00a0   \u00a0 khaki =rgb(240, 230, 140) \u00a0   \u00a0 lavender =rgb(230, 230, 250) \u00a0   \u00a0 lavenderblush =rgb(255, 240, 245) \u00a0   \u00a0 lawngreen =rgb(124, 252, 0) \u00a0   \u00a0 lemonchiffon =rgb(255, 250, 205) \u00a0   \u00a0 lightblue =rgb(173, 216, 230) \u00a0   \u00a0 lightcoral =rgb(240, 128, 128) \u00a0   \u00a0 lightcyan =rgb(224, 255, 255) \u00a0   \u00a0 lightgoldenrodyellow =rgb(250, 250, 210) \u00a0   \u00a0 lightgray[*] =rgb(211, 211, 211) \u00a0   \u00a0 lightgreen =rgb(144, 238, 144) \u00a0   \u00a0 lightgrey[*] =rgb(211, 211, 211) \u00a0   \u00a0 lightpink =rgb(255, 182, 193) \u00a0   \u00a0 lightsalmon =rgb(255, 160, 122) \u00a0   \u00a0 lightseagreen =rgb( 32, 178, 170) \u00a0   \u00a0 lightskyblue =rgb(135, 206, 250) \u00a0   \u00a0 lightslategray[*] =rgb(119, 136, 153) \u00a0   \u00a0 lightslategrey[*] =rgb(119, 136, 153) \u00a0   \u00a0 lightsteelblue =rgb(176, 196, 222) \u00a0   \u00a0 lightyellow =rgb(255, 255, 224) \u00a0   \u00a0 limegreen =rgb( 50, 205,\u00a0 50) \u00a0   \u00a0 linen =rgb(250, 240, 230) \u00a0   \u00a0 mediumaquamarine =rgb(102, 205, 170) \u00a0   \u00a0 mediumblue =rgb(\u00a0 0,\u00a0\u00a0 0, 205) \u00a0   \u00a0 mediumorchid =rgb(186,\u00a0 85, 211) \u00a0   \u00a0 mediumpurple =rgb(147, 112, 219) \u00a0   \u00a0 mediumseagreen =rgb( 60, 179, 113) \u00a0   \u00a0 mediumslateblue =rgb(123, 104, 238) \u00a0   \u00a0 mediumspringgreen =rgb(\u00a0 0, 250, 154) \u00a0   \u00a0 mediumturquoise =rgb( 72, 209, 204) \u00a0   \u00a0 mediumvioletred =rgb(199,\u00a0 21, 133) \u00a0   \u00a0 midnightblue =rgb( 25,\u00a0 25, 112) \u00a0   \u00a0 mintcream =rgb(245, 255, 250) \u00a0   \u00a0 mistyrose =rgb(255, 228, 225) \u00a0   \u00a0 moccasin =rgb(255, 228, 181) \u00a0   \u00a0 navajowhite =rgb(255, 222, 173) \u00a0   \u00a0 oldlace =rgb(253, 245, 230) \u00a0   \u00a0 olivedrab =rgb(107, 142,\u00a0 35) \u00a0    transparent Keyword The transparent keyword represents a fully transparent color, i.e. the color seen will be the background color. Technically, it is a black with alpha channel at its maximum and is a shortcut for rgba(0,0,0,0). Historical Note The transparent keyword wasn't a true color in CSS Level 2 (Revision 1). It was a specific keyword that could be used in place of a regular <color> value on two CSS properties: background  and border . It was essentially added to allow to override an inherited solid colors.  With the support of opacity through alpha channels, transparent was redefined as a true color in CSS Level 3 allowing its use in any place where a <color> value is required, like the color  property.[**]currentColor Keyword The currentColor keyword represents the calculated value of the element's color  property. It allows to make the color properties inherited by properties or child's element properties that do not inherit it by default. It can also be used on properties that inherit the calculated value of the element's color  property and will be equivalent to the inherit keyword on these elements, if any. Live Example The color of the line (a color-filled div) adapts to the color of its color  property, inherited from its parent  <div style=\"color:darkred\">  The color of this text is the same as the one of the line:   <div style=\"background:currentcolor; height:1px\"><\/div>  Some more text. <\/div>   The color of this text is the same as the one of the line: . Some more text.    <div style=\"color:blue\">  The color of this text is the same as the one of the line:   <div style=\"background:currentcolor; height:1px\"><\/div>  Some more text. <\/div>   The color of this text is the same as the one of the line: . Some more text.  RGB (red-green-blue)  Hexadecimal notation #RRGGBB and #RGB   \"#\", followed by six hexadecimal characters (0-9, A-F). \"#\", followed by three hexadecimal characters (0-9, A-F).  The three-digit RGB notation (#RGB) and the six-digit form (#RRGGBB) are equal. For example, #f03 and #ff0033 represent the same color. Functional Notation rgb(R,G,B) \"rgb\", followed by three <integer>   or three <percentage>  values. The integer number 255 corresponds to 100%, and to F or FF in the hexadecimal notation.   \/* These examples all specify the same RGB color: *\/    #f03  #F03  #ff0033  #FF0033  rgb(255,0,51)  rgb(255, 0, 51)  rgb(255, 0, 51.2) \/* ERROR! Don't use fractions, use integers *\/   rgb(100%,0%,20%)  rgb(100%, 0%, 20%)  rgb(100%, 0, 20%) \/* ERROR! Don't mix up integer and percentage notation *\/  HSL (hue-saturation-lightness) hsl(H,S,L) The advantage of HSL over RGB is that it is far more intuitive: you can guess at the colors you want, and then tweak. It is also easier to create sets of matching colors (by keeping the hue the same and varying the lightness\/darkness, and saturation). Hue is represented as an angle of the color circle (i.e. the rainbow represented in a circle). This angle is given as a unitless <number> . By definition red=0=360, and the other colors are spread around the circle, so green=120, blue=240, etc. As an angle, it implicitly wraps around such that -120=240 and 480=120. Saturation and lightness are represented as percentages. 100% is full saturation, and 0% is a shade of grey. 100% lightness is white, 0% lightness is black, and 50% lightness is \"normal\".  hsl(0,  100%,50%)    \/* red *\/    hsl(30, 100%,50%)   \u00a0              hsl(60, 100%,50%)   \u00a0             hsl(90, 100%,50%)   \u00a0             hsl(120,100%,50%)    \/* green *\/  hsl(150,100%,50%)   \u00a0             hsl(180,100%,50%)   \u00a0             hsl(210,100%,50%)   \u00a0             hsl(240,100%,50%)    \/* blue *\/   hsl(270,100%,50%)   \u00a0             hsl(300,100%,50%)   \u00a0             hsl(330,100%,50%)   \u00a0             hsl(360,100%,50%)    \/* red *\/     hsl(120,100%,25%)    \/* dark green *\/   hsl(120,100%,50%)    \/* green *\/        hsl(120,100%,75%)    \/* light green *\/   hsl(120,100%,50%)    \/* green *\/   hsl(120, 67%,50%)   \u00a0              hsl(120, 33%,50%)   \u00a0              hsl(120,  0%,50%)   \u00a0               hsl(120, 60%,70%)    \/* pastel green *\/   RGBa (red-green-blue-alpha) rgba(R,G,B,a)  Extends the RGB color model to include \"alpha\" to allow specification of the opacity of a color. a means opacity: 0=transparent; 1=opaque;  rgba(255,0,0,0.1)    \/* 10% opaque red *\/   rgba(255,0,0,0.4)    \/* 40% opaque red *\/   rgba(255,0,0,0.7)    \/* 70% opaque red *\/   rgba(255,0,0,  1)    \/* full opaque red *\/   HSLa (hue-saturation-lightness-alpha) hsla(H,S,L,a)  Extends the HSL color model to include \"alpha\" to allow specification of the opacity of a color. a means opacity: 0=transparent; 1=opaque;  hsla(240,100%,50%,0.05)   \/* 5% opaque blue *\/    hsla(240,100%,50%, 0.4)   \/* 40% opaque blue *\/   hsla(240,100%,50%, 0.7)   \/* 70% opaque blue *\/   hsla(240,100%,50%,   1)   \/* full opaque blue *\/   System Colors Not all system colors are supported on all systems.   Deprecated   for use on public web pages.  ActiveBorder Active window border. ActiveCaption Active window caption.\u00a0 Should be used with CaptionText foreground color. AppWorkspace Background color of multiple document interface. Background Desktop background. ButtonFace Face background color for 3-D elements that appear 3-D due to one layer of surrounding border.\u00a0 Should be used with ButtonText foreground color. ButtonHighlight The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border. ButtonShadow The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border. ButtonText Text on push buttons.\u00a0 Should be used with ButtonFace or ThreeDFace background color. CaptionText Text in caption, size box, and scrollbar arrow box.\u00a0 Should be used with ActiveCaption background color. GrayText Grayed (disabled) text. Highlight Item(s) selected in a control.\u00a0 Should be used with HighlightText foreground color. HighlightText Text of item(s) selected in a control.\u00a0 Should be used with Highlight background color. InactiveBorder Inactive window border. InactiveCaption Inactive window caption.\u00a0 Should be used with InactiveCaptionText foreground color. InactiveCaptionText Color of text in an inactive caption.\u00a0 Should be used with InactiveCaption background color. InfoBackground Background color for tooltip controls.\u00a0 Should be used with InfoText foreground color. InfoText Text color for tooltip controls.\u00a0 Should be used with InfoBackground background color. Menu Menu background.\u00a0 Should be used with MenuText or -moz-MenuBarText foreground color. MenuText Text in menus.\u00a0 Should be used with Menu background color. Scrollbar Scroll bar gray area. ThreeDDarkShadow The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. ThreeDFace The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\u00a0 Should be used with ButtonText foreground color. ThreeDHighlight The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. ThreeDLightShadow The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. ThreeDShadow The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. Window Window background.\u00a0 Should be used with WindowText foreground color. WindowFrame Window frame. WindowText Text in windows.\u00a0 Should be used with Window background color.  Mozilla System Color Extensions  -moz-ButtonDefault The border color that goes around buttons that represent the default action for a dialog box. -moz-ButtonHoverFace The background color of a button that the mouse pointer is over (which would be ThreeDFace or ButtonFace when the mouse pointer is not over it).\u00a0 Should be used with the -moz-ButtonHoverText foreground color. -moz-ButtonHoverText The text color of a button that the mouse pointer is over (which would be ButtonText when the mouse pointer is not over it).\u00a0 Should be used with the -moz-ButtonHoverFace background color. -moz-CellHighlight Background color for selected item in a tree widget.\u00a0 Should be used with -moz-CellHighlightText foreground color.\u00a0 See also -moz-html-CellHighlight. -moz-CellHighlightText Text color for a selected item in a tree.\u00a0 Should be used with -moz-CellHighlight background color.\u00a0 See also -moz-html-CellHighlightText. -moz-Combobox  Requires Gecko 1.9.2  Background color for comboboxes.\u00a0 Should be used with -moz-ComboboxText foreground color.\u00a0 In versions prior to 1.9.2, use -moz-Field instead. -moz-ComboboxText  Requires Gecko 1.9.2  Background Text color for comboboxes.\u00a0 Should be used with -moz-ComboboxText foreground color.\u00a0 In versions prior to 1.9.2, use -moz-FieldText instead. -moz-Dialog Background color for dialog boxes.\u00a0 Should be used with -moz-DialogText foreground color. -moz-DialogText Text color for dialog boxes.\u00a0 Should be used with -moz-Dialog background color. -moz-dragtargetzone -moz-EvenTreeRow  Requires Gecko 1.9  Background color for even-numbered rows in a tree.\u00a0 Should be used with -moz-FieldText foreground color.\u00a0 In Gecko versions prior to 1.9, use -moz-Field.\u00a0 See also -moz-OddTreeRow. -moz-Field textfield background color.\u00a0 Should be used with -moz-FieldText foreground color. -moz-FieldText textfield foreground color.\u00a0 Should be used with -moz-Field, -moz-EvenTreeRow, or -moz-OddTreeRow background colors. -moz-html-CellHighlight  Requires Gecko 1.9  Background color for highlighted item in HTML\u00a0select.\u00a0 Should be used with -moz-html-CellHighlightText foreground color.\u00a0 Prior to Gecko 1.9, use -moz-CellHighlight. -moz-html-CellHighlightText  Requires Gecko 1.9  Background color for highlighted item in HTML\u00a0select.\u00a0 Should be used with -moz-html-CellHighlight background color.\u00a0 Prior to Gecko 1.9, use -moz-CellHighlightText. -moz-mac-accentdarkestshadow -moz-mac-accentdarkshadow -moz-mac-accentface -moz-mac-accentlightesthighlight -moz-mac-accentlightshadow -moz-mac-accentregularhighlight -moz-mac-accentregularshadow -moz-mac-chrome-active  Requires Gecko 1.9.1  -moz-mac-chrome-inactive  Requires Gecko 1.9.1  -moz-mac-focusring -moz-mac-menuselect -moz-mac-menushadow -moz-mac-menutextselect -moz-MenuHover Background color for hovered menu item.\u00a0 Often similar to Highlight.\u00a0 Should be used with -moz-MenuHoverText or -moz-MenuBarHoverText foreground color. -moz-MenuHoverText Foreground color for hovered menu item.\u00a0 Often similar to HighlightText.\u00a0 Should be used with -moz-MenuHover background color. -moz-MenuBarText  Requires Gecko 1.9.2  Foreground color for text in menu bars.\u00a0 Often similar to MenuText.\u00a0 Should be used on top of Menu background. -moz-MenuBarHoverText Foreground color for hovered text in menu bars.\u00a0 Often similar to -moz-MenuHoverText.\u00a0 Should be used on top of -moz-MenuHover background. -moz-nativehyperlinktext  Requires Gecko 1.9.1  default platform hyperlink color -moz-OddTreeRow  Requires Gecko 1.9  Background color for odd-numbered rows in a tree.\u00a0 Should be used with -moz-FieldText foreground color.\u00a0 In Gecko versions prior to 1.9, use -moz-Field.\u00a0 See also -moz-EvenTreeRow. -moz-win-communicationstext  Requires Gecko 1.9  Should be used for text in objects with appearance:-moz-win-communications-toolbox. -moz-win-mediatext  Requires Gecko 1.9  Should be used for text in objects with appearance:-moz-win-media-toolbox.  Mozilla Color Preference Extensions  -moz-activehyperlinktext User's preference for text color of active links.\u00a0 Should be used against default document background.  -moz-default-background-color  Requires Gecko 5.0  User's preference for document background-color.  -moz-default-color  Requires Gecko 5.0  User's preference for text color. -moz-hyperlinktext User's preference for text color of unvisited links.\u00a0 Should be used against default document background. -moz-visitedhyperlinktext User's preference for text color of visited links.\u00a0 Should be used against default document background. Color Keywords Color keywords are case-insensitive identifiers which represent a specific color, e.g. red, blue, brown, lightseagreen. The name describes the color, though it is mostly artificial. The list of accepted values varied a lot through the different specification:  CSS Level 1 only accepted 16 basic colors, named the VGA colors as they were taken from the set of displayable colors on VGA graphic cards. CSS Level 2 added the orange keyword. From the beginning, browsers accepted other colors, mostly the X11 named colors list as some early browsers where X11 applications, though with a few differences. SVG 1.0 was the first standard to formally defined these keywords; CSS Colors Level 3 also formally defined these keywords. They are often referred as the extended color keywords, the X11 colors, the SVG colors.  There are a few caveats to consider when using keywords:  Except the 16 basic colors which are common with HTML, the others cannot be used in HTML. HTML will convert these unknown values with a specific algorithm which will lead to completely different colors. These keywords should only be used in SVG & CSS. Unknown keywords make the CSS property invalid. Invalid properties being ignored, the color will have no effect. This is a different behavior than the one of HTML. No keyword-defined colors in CSS have any transparency, they are plain, solid colors. Several keywords denote the same colors:  darkgray \/ darkgrey darkslategray \/ darkslategrey dimgray \/ dimgrey lightgray \/ lightgrey lightslategray \/ lightslategrey gray \/ grey slategray \/ slategray   Though the names of the keywords have been taken by the usual X11 color names, the color may diverge from the corresponding system color on X11 system as these are tailored for the specific hardware by the manufacturer [2].     Specifications Color Keyword RGB cubic coordinates Live Example     CSS3 CSS2 CSS1 \u00a0 black =rgb(\u00a0 0,\u00a0\u00a0 0,\u00a0\u00a0 0) \u00a0   \u00a0 silver =rgb(192, 192, 192) \u00a0   \u00a0 gray[*] =rgb(128, 128, 128) \u00a0   \u00a0 white =rgb(255, 255, 255) \u00a0   \u00a0 maroon =rgb(128,\u00a0\u00a0 0,\u00a0\u00a0 0) \u00a0   \u00a0 red =rgb(255,\u00a0\u00a0 0,\u00a0\u00a0 0) \u00a0   \u00a0 purple =rgb(128,\u00a0\u00a0 0, 128) \u00a0   \u00a0 fuchsia =rgb(255,\u00a0\u00a0 0, 255) \u00a0   \u00a0 green =rgb(\u00a0 0, 128,\u00a0\u00a0 0) \u00a0   \u00a0 lime =rgb(\u00a0 0, 255,\u00a0\u00a0 0) \u00a0   \u00a0 olive =rgb(128, 128,\u00a0\u00a0 0) \u00a0   \u00a0 yellow =rgb(255, 255,\u00a0\u00a0 0) \u00a0   \u00a0 navy =rgb(\u00a0 0,\u00a0\u00a0 0, 128) \u00a0   \u00a0 blue =rgb(\u00a0 0,\u00a0\u00a0 0, 255) \u00a0   \u00a0 teal =rgb(\u00a0 0, 128, 128) \u00a0   \u00a0 aqua =rgb(\u00a0 0, 255, 255) \u00a0   \u00a0 \u00a0 orange =rgb(255, 165,\u00a0\u00a0 0) \u00a0   \u00a0 \u00a0 \u00a0 aliceblue =rgb(240, 248, 245) \u00a0   \u00a0 antiquewhite =rgb(250, 235, 215) \u00a0   \u00a0 aquamarine =rgb(127, 255, 212) \u00a0   \u00a0 azure =rgb(240, 255, 255) \u00a0   \u00a0 beige =rgb(245, 245, 220) \u00a0   \u00a0 bisque =rgb(255, 228, 196) \u00a0   \u00a0 blanchedalmond =rgb(255, 235, 205) \u00a0   \u00a0 blueviolet =rgb(138,\u00a0 43, 226) \u00a0   \u00a0 brown =rgb(165,\u00a0 42,\u00a0 42) \u00a0   \u00a0 burlywood =rgb(222, 184,\u00a0 35) \u00a0   \u00a0 cadetblue =rgb( 95, 158, 160) \u00a0   \u00a0 chartreuse =rgb(127, 255,\u00a0\u00a0 0) \u00a0   \u00a0 chocolate =rgb(210, 105,\u00a0 30) \u00a0   \u00a0 coral =rgb(255, 127,\u00a0 80) \u00a0   \u00a0 cornflowerblue =rgb(100, 149, 237) \u00a0   \u00a0 cornsilk =rgb(255, 248, 220) \u00a0   \u00a0 crimson =rgb(220,\u00a0 20,\u00a0 60) \u00a0   \u00a0 darkblue =rgb(\u00a0 0, \u00a0 0, 139) \u00a0   \u00a0 darkcyan =rgb(\u00a0 0, 139, 139) \u00a0   \u00a0 darkgoldenrod =rgb(184, 134,\u00a0 11) \u00a0   \u00a0 darkgray[*] =rgb(169, 169, 169) \u00a0   \u00a0 darkgreen =rgb(\u00a0 0, 100, \u00a0 0) \u00a0   \u00a0 darkgrey[*] =rgb(169, 169, 169) \u00a0   \u00a0 darkkhaki =rgb(189, 183, 107) \u00a0   \u00a0 darkmagenta =rgb(139, \u00a0 0, 139) \u00a0   \u00a0 darkolivegreen =rgb( 85, 107,\u00a0 47) \u00a0   \u00a0 darkorange =rgb(255, 140, \u00a0 0) \u00a0   \u00a0 darkorchid =rgb(153,\u00a0 50, 204) \u00a0   \u00a0 darkred =rgb(139, \u00a0 0, \u00a0 0) \u00a0   \u00a0 darksalmon =rgb(233, 150, 122) \u00a0   \u00a0 darkseagreen =rgb(143, 188, 143) \u00a0   \u00a0 darkslateblue =rgb( 72,\u00a0 61, 139) \u00a0   \u00a0 darkslategray[*] =rgb( 47,\u00a0 79,\u00a0 79) \u00a0   \u00a0 darkslategrey[*] =rgb( 47,\u00a0 79,\u00a0 79) \u00a0   \u00a0 darkturquoise =rgb(\u00a0 0, 206, 209) \u00a0   \u00a0 darkviolet =rgb(148, \u00a0 0, 211) \u00a0   \u00a0 deeppink =rgb(255,\u00a0 20, 147) \u00a0   \u00a0 deepskyblue =rgb(\u00a0 0, 191, 255) \u00a0   \u00a0 dimgray[*] =rgb(105, 105, 105) \u00a0   \u00a0 dimgrey[*] =rgb(105, 105, 105) \u00a0   \u00a0 dodgerblue =rgb( 30, 144, 255) \u00a0   \u00a0 firebrick =rgb(178,\u00a0 34,\u00a0 34) \u00a0   \u00a0 floralwhite =rgb(255, 250, 240) \u00a0   \u00a0 forestgreen =rgb( 34, 139,\u00a0 34) \u00a0   \u00a0 gainsboro =rgb(220, 220, 220) \u00a0   \u00a0 ghostwhite =rgb(248, 248, 255) \u00a0   \u00a0 gold =rgb(255, 215,\u00a0\u00a0 0) \u00a0   \u00a0 goldenrod =rgb(218, 165,\u00a0 32) \u00a0   \u00a0 greenyellow =rgb(173, 255,\u00a0 47) \u00a0   \u00a0 grey =rgb(128, 128, 128) \u00a0   \u00a0 honeydew =rgb(240, 255, 240) \u00a0   \u00a0 hotpink =rgb(255, 105, 180) \u00a0   \u00a0 indianred =rgb(205,\u00a0 92,\u00a0 92) \u00a0   \u00a0 indigo =rgb( 75,\u00a0 0, 130) \u00a0   \u00a0 ivory =rgb(255, 255, 240) \u00a0   \u00a0 khaki =rgb(240, 230, 140) \u00a0   \u00a0 lavender =rgb(230, 230, 250) \u00a0   \u00a0 lavenderblush =rgb(255, 240, 245) \u00a0   \u00a0 lawngreen =rgb(124, 252, 0) \u00a0   \u00a0 lemonchiffon =rgb(255, 250, 205) \u00a0   \u00a0 lightblue =rgb(173, 216, 230) \u00a0   \u00a0 lightcoral =rgb(240, 128, 128) \u00a0   \u00a0 lightcyan =rgb(224, 255, 255) \u00a0   \u00a0 lightgoldenrodyellow =rgb(250, 250, 210) \u00a0   \u00a0 lightgray[*] =rgb(211, 211, 211) \u00a0   \u00a0 lightgreen =rgb(144, 238, 144) \u00a0   \u00a0 lightgrey[*] =rgb(211, 211, 211) \u00a0   \u00a0 lightpink =rgb(255, 182, 193) \u00a0   \u00a0 lightsalmon =rgb(255, 160, 122) \u00a0   \u00a0 lightseagreen =rgb( 32, 178, 170) \u00a0   \u00a0 lightskyblue =rgb(135, 206, 250) \u00a0   \u00a0 lightslategray[*] =rgb(119, 136, 153) \u00a0   \u00a0 lightslategrey[*] =rgb(119, 136, 153) \u00a0   \u00a0 lightsteelblue =rgb(176, 196, 222) \u00a0   \u00a0 lightyellow =rgb(255, 255, 224) \u00a0   \u00a0 limegreen =rgb( 50, 205,\u00a0 50) \u00a0   \u00a0 linen =rgb(250, 240, 230) \u00a0   \u00a0 mediumaquamarine =rgb(102, 205, 170) \u00a0   \u00a0 mediumblue =rgb(\u00a0 0,\u00a0\u00a0 0, 205) \u00a0   \u00a0 mediumorchid =rgb(186,\u00a0 85, 211) \u00a0   \u00a0 mediumpurple =rgb(147, 112, 219) \u00a0   \u00a0 mediumseagreen =rgb( 60, 179, 113) \u00a0   \u00a0 mediumslateblue =rgb(123, 104, 238) \u00a0   \u00a0 mediumspringgreen =rgb(\u00a0 0, 250, 154) \u00a0   \u00a0 mediumturquoise =rgb( 72, 209, 204) \u00a0   \u00a0 mediumvioletred =rgb(199,\u00a0 21, 133) \u00a0   \u00a0 midnightblue =rgb( 25,\u00a0 25, 112) \u00a0   \u00a0 mintcream =rgb(245, 255, 250) \u00a0   \u00a0 mistyrose =rgb(255, 228, 225) \u00a0   \u00a0 moccasin =rgb(255, 228, 181) \u00a0   \u00a0 navajowhite =rgb(255, 222, 173) \u00a0   \u00a0 oldlace =rgb(253, 245, 230) \u00a0   \u00a0 olivedrab =rgb(107, 142,\u00a0 35) \u00a0    transparent Keyword The transparent keyword represents a fully transparent color, i.e. the color seen will be the background color. Technically, it is a black with alpha channel at its maximum and is a shortcut for rgba(0,0,0,0). Historical Note The transparent keyword wasn't a true color in CSS Level 2 (Revision 1). It was a specific keyword that could be used in place of a regular <color> value on two CSS properties: background  and border . It was essentially added to allow to override an inherited solid colors.  With the support of opacity through alpha channels, transparent was redefined as a true color in CSS Level 3 allowing its use in any place where a <color> value is required, like the color  property.[**]currentColor Keyword The currentColor keyword represents the calculated value of the element's color  property. It allows to make the color properties inherited by properties or child's element properties that do not inherit it by default. It can also be used on properties that inherit the calculated value of the element's color  property and will be equivalent to the inherit keyword on these elements, if any. Live Example The color of the line (a color-filled div) adapts to the color of its color  property, inherited from its parent  <div style=\"color:darkred\">  The color of this text is the same as the one of the line:   <div style=\"background:currentcolor; height:1px\"><\/div>  Some more text. <\/div>   The color of this text is the same as the one of the line: . Some more text.    <div style=\"color:blue\">  The color of this text is the same as the one of the line:   <div style=\"background:currentcolor; height:1px\"><\/div>  Some more text. <\/div>   The color of this text is the same as the one of the line: . Some more text.  Live Example The color of the line (a color-filled div) adapts to the color of its color  property, inherited from its parent  <div style=\"color:darkred\">  The color of this text is the same as the one of the line:   <div style=\"background:currentcolor; height:1px\"><\/div>  Some more text. <\/div>   The color of this text is the same as the one of the line: . Some more text.    <div style=\"color:blue\">  The color of this text is the same as the one of the line:   <div style=\"background:currentcolor; height:1px\"><\/div>  Some more text. <\/div>   The color of this text is the same as the one of the line: . Some more text.  RGB (red-green-blue)  Hexadecimal notation #RRGGBB and #RGB   \"#\", followed by six hexadecimal characters (0-9, A-F). \"#\", followed by three hexadecimal characters (0-9, A-F).  The three-digit RGB notation (#RGB) and the six-digit form (#RRGGBB) are equal. For example, #f03 and #ff0033 represent the same color. Functional Notation rgb(R,G,B) \"rgb\", followed by three <integer>   or three <percentage>  values. The integer number 255 corresponds to 100%, and to F or FF in the hexadecimal notation.   \/* These examples all specify the same RGB color: *\/    #f03  #F03  #ff0033  #FF0033  rgb(255,0,51)  rgb(255, 0, 51)  rgb(255, 0, 51.2) \/* ERROR! Don't use fractions, use integers *\/   rgb(100%,0%,20%)  rgb(100%, 0%, 20%)  rgb(100%, 0, 20%) \/* ERROR! Don't mix up integer and percentage notation *\/  HSL (hue-saturation-lightness) hsl(H,S,L) The advantage of HSL over RGB is that it is far more intuitive: you can guess at the colors you want, and then tweak. It is also easier to create sets of matching colors (by keeping the hue the same and varying the lightness\/darkness, and saturation). Hue is represented as an angle of the color circle (i.e. the rainbow represented in a circle). This angle is given as a unitless <number> . By definition red=0=360, and the other colors are spread around the circle, so green=120, blue=240, etc. As an angle, it implicitly wraps around such that -120=240 and 480=120. Saturation and lightness are represented as percentages. 100% is full saturation, and 0% is a shade of grey. 100% lightness is white, 0% lightness is black, and 50% lightness is \"normal\".  hsl(0,  100%,50%)    \/* red *\/    hsl(30, 100%,50%)   \u00a0              hsl(60, 100%,50%)   \u00a0             hsl(90, 100%,50%)   \u00a0             hsl(120,100%,50%)    \/* green *\/  hsl(150,100%,50%)   \u00a0             hsl(180,100%,50%)   \u00a0             hsl(210,100%,50%)   \u00a0             hsl(240,100%,50%)    \/* blue *\/   hsl(270,100%,50%)   \u00a0             hsl(300,100%,50%)   \u00a0             hsl(330,100%,50%)   \u00a0             hsl(360,100%,50%)    \/* red *\/     hsl(120,100%,25%)    \/* dark green *\/   hsl(120,100%,50%)    \/* green *\/        hsl(120,100%,75%)    \/* light green *\/   hsl(120,100%,50%)    \/* green *\/   hsl(120, 67%,50%)   \u00a0              hsl(120, 33%,50%)   \u00a0              hsl(120,  0%,50%)   \u00a0               hsl(120, 60%,70%)    \/* pastel green *\/   RGBa (red-green-blue-alpha) rgba(R,G,B,a)  Extends the RGB color model to include \"alpha\" to allow specification of the opacity of a color. a means opacity: 0=transparent; 1=opaque;  rgba(255,0,0,0.1)    \/* 10% opaque red *\/   rgba(255,0,0,0.4)    \/* 40% opaque red *\/   rgba(255,0,0,0.7)    \/* 70% opaque red *\/   rgba(255,0,0,  1)    \/* full opaque red *\/   HSLa (hue-saturation-lightness-alpha) hsla(H,S,L,a)  Extends the HSL color model to include \"alpha\" to allow specification of the opacity of a color. a means opacity: 0=transparent; 1=opaque;  hsla(240,100%,50%,0.05)   \/* 5% opaque blue *\/    hsla(240,100%,50%, 0.4)   \/* 40% opaque blue *\/   hsla(240,100%,50%, 0.7)   \/* 70% opaque blue *\/   hsla(240,100%,50%,   1)   \/* full opaque blue *\/   System Colors Not all system colors are supported on all systems.   Deprecated   for use on public web pages.  ActiveBorder Active window border. ActiveCaption Active window caption.\u00a0 Should be used with CaptionText foreground color. AppWorkspace Background color of multiple document interface. Background Desktop background. ButtonFace Face background color for 3-D elements that appear 3-D due to one layer of surrounding border.\u00a0 Should be used with ButtonText foreground color. ButtonHighlight The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border. ButtonShadow The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border. ButtonText Text on push buttons.\u00a0 Should be used with ButtonFace or ThreeDFace background color. CaptionText Text in caption, size box, and scrollbar arrow box.\u00a0 Should be used with ActiveCaption background color. GrayText Grayed (disabled) text. Highlight Item(s) selected in a control.\u00a0 Should be used with HighlightText foreground color. HighlightText Text of item(s) selected in a control.\u00a0 Should be used with Highlight background color. InactiveBorder Inactive window border. InactiveCaption Inactive window caption.\u00a0 Should be used with InactiveCaptionText foreground color. InactiveCaptionText Color of text in an inactive caption.\u00a0 Should be used with InactiveCaption background color. InfoBackground Background color for tooltip controls.\u00a0 Should be used with InfoText foreground color. InfoText Text color for tooltip controls.\u00a0 Should be used with InfoBackground background color. Menu Menu background.\u00a0 Should be used with MenuText or -moz-MenuBarText foreground color. MenuText Text in menus.\u00a0 Should be used with Menu background color. Scrollbar Scroll bar gray area. ThreeDDarkShadow The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. ThreeDFace The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\u00a0 Should be used with ButtonText foreground color. ThreeDHighlight The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. ThreeDLightShadow The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. ThreeDShadow The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border. Window Window background.\u00a0 Should be used with WindowText foreground color. WindowFrame Window frame. WindowText Text in windows.\u00a0 Should be used with Window background color.  Mozilla System Color Extensions  -moz-ButtonDefault The border color that goes around buttons that represent the default action for a dialog box. -moz-ButtonHoverFace The background color of a button that the mouse pointer is over (which would be ThreeDFace or ButtonFace when the mouse pointer is not over it).\u00a0 Should be used with the -moz-ButtonHoverText foreground color. -moz-ButtonHoverText The text color of a button that the mouse pointer is over (which would be ButtonText when the mouse pointer is not over it).\u00a0 Should be used with the -moz-ButtonHoverFace background color. -moz-CellHighlight Background color for selected item in a tree widget.\u00a0 Should be used with -moz-CellHighlightText foreground color.\u00a0 See also -moz-html-CellHighlight. -moz-CellHighlightText Text color for a selected item in a tree.\u00a0 Should be used with -moz-CellHighlight background color.\u00a0 See also -moz-html-CellHighlightText. -moz-Combobox  Requires Gecko 1.9.2  Background color for comboboxes.\u00a0 Should be used with -moz-ComboboxText foreground color.\u00a0 In versions prior to 1.9.2, use -moz-Field instead. -moz-ComboboxText  Requires Gecko 1.9.2  Background Text color for comboboxes.\u00a0 Should be used with -moz-ComboboxText foreground color.\u00a0 In versions prior to 1.9.2, use -moz-FieldText instead. -moz-Dialog Background color for dialog boxes.\u00a0 Should be used with -moz-DialogText foreground color. -moz-DialogText Text color for dialog boxes.\u00a0 Should be used with -moz-Dialog background color. -moz-dragtargetzone -moz-EvenTreeRow  Requires Gecko 1.9  Background color for even-numbered rows in a tree.\u00a0 Should be used with -moz-FieldText foreground color.\u00a0 In Gecko versions prior to 1.9, use -moz-Field.\u00a0 See also -moz-OddTreeRow. -moz-Field textfield background color.\u00a0 Should be used with -moz-FieldText foreground color. -moz-FieldText textfield foreground color.\u00a0 Should be used with -moz-Field, -moz-EvenTreeRow, or -moz-OddTreeRow background colors. -moz-html-CellHighlight  Requires Gecko 1.9  Background color for highlighted item in HTML\u00a0select.\u00a0 Should be used with -moz-html-CellHighlightText foreground color.\u00a0 Prior to Gecko 1.9, use -moz-CellHighlight. -moz-html-CellHighlightText  Requires Gecko 1.9  Background color for highlighted item in HTML\u00a0select.\u00a0 Should be used with -moz-html-CellHighlight background color.\u00a0 Prior to Gecko 1.9, use -moz-CellHighlightText. -moz-mac-accentdarkestshadow -moz-mac-accentdarkshadow -moz-mac-accentface -moz-mac-accentlightesthighlight -moz-mac-accentlightshadow -moz-mac-accentregularhighlight -moz-mac-accentregularshadow -moz-mac-chrome-active  Requires Gecko 1.9.1  -moz-mac-chrome-inactive  Requires Gecko 1.9.1  -moz-mac-focusring -moz-mac-menuselect -moz-mac-menushadow -moz-mac-menutextselect -moz-MenuHover Background color for hovered menu item.\u00a0 Often similar to Highlight.\u00a0 Should be used with -moz-MenuHoverText or -moz-MenuBarHoverText foreground color. -moz-MenuHoverText Foreground color for hovered menu item.\u00a0 Often similar to HighlightText.\u00a0 Should be used with -moz-MenuHover background color. -moz-MenuBarText  Requires Gecko 1.9.2  Foreground color for text in menu bars.\u00a0 Often similar to MenuText.\u00a0 Should be used on top of Menu background. -moz-MenuBarHoverText Foreground color for hovered text in menu bars.\u00a0 Often similar to -moz-MenuHoverText.\u00a0 Should be used on top of -moz-MenuHover background. -moz-nativehyperlinktext  Requires Gecko 1.9.1  default platform hyperlink color -moz-OddTreeRow  Requires Gecko 1.9  Background color for odd-numbered rows in a tree.\u00a0 Should be used with -moz-FieldText foreground color.\u00a0 In Gecko versions prior to 1.9, use -moz-Field.\u00a0 See also -moz-EvenTreeRow. -moz-win-communicationstext  Requires Gecko 1.9  Should be used for text in objects with appearance:-moz-win-communications-toolbox. -moz-win-mediatext  Requires Gecko 1.9  Should be used for text in objects with appearance:-moz-win-media-toolbox.  Mozilla Color Preference Extensions  -moz-activehyperlinktext User's preference for text color of active links.\u00a0 Should be used against default document background.  -moz-default-background-color  Requires Gecko 5.0  User's preference for document background-color.  -moz-default-color  Requires Gecko 5.0  User's preference for text color. -moz-hyperlinktext User's preference for text color of unvisited links.\u00a0 Should be used against default document background. -moz-visitedhyperlinktext User's preference for text color of visited links.\u00a0 Should be used against default document background. Specifications    Specification Status Comment     CSS Colors Level 3 Recommendation  Deprecated system-colors; added SVG colors; added rgba(), hsl(), hsla() functional notation.   CSS Level 2 (Revision 1) Recommendation  Added the orange color and the system-colors[3].   CSS Level 1 Recommendation  \u00a0    Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   keywords colors 1.0 1.0 (1.0) 3.0 [*] 3.5 1.0 (85)   #RRGGBB | #RGB 1.0 1.0 (1.0) 3.0 3.5 1.0 (85)   rgb (R,G,B) 1.0 1.0 (1.0) 4.0 3.5 1.0 (85)   hsl (H,S,L) 1.0 1.0 (1.5) 9.0 [4] 9.5 3.1 (525)   rgba (R,G,B,a) 1.0 3.0 (1.9) 9.0 # 10.0 3.1 (525)   hsla (H,S,L,a) 1.0 3.0 (1.9) 9.0 # 10.0 3.1 (525)   currentColor 1.0 1.5 (1.8) 9.0 [5] 9.5 4.0 (528)   transparent 1.0 3.0 (1.9) 9.0 [6][**] 10.0 3.1 (525)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     [*] The 'e'-grey colors (with an e) (grey, darkgrey, darkslategrey, dimgrey, lightgrey, lightslategrey) are only supported since IE 8.0. IE 3 to IE 6 only support the 'a' variants: gray, darkgray, darkslategray, dimgray, lightgray, lightslategray. [**]\u00a0 IE 7-8 supports transparent only for background  and border . color:transparent is drawn black in IE.See also  The opacity  property, allowing to define the transparency of color at the element level. The color , background-color , border-color , outline-color , text-shadow , box-shadow  properties. CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/frequency","title":"frequency","description":"The <frequency> CSS data types denotes a frequency dimension, like the pitch of a speaking voice. They consists of a\u00a0<number>  immediately followed by the unit. Like for any CSS dimension, there is no space between the unit literal and the number. The following units may be used :  Hz which represents a frequency in Hertz. E.g. 0Hz, 1500Hz, 10000Hz. kHz which represents a time in kilohertz. E.g. 0kHz, 1.5kHz, 10kHz.  As all units represents the same time for the value 0, the unit may be omitted in that case: 0 represents 0Hz, 0kHz. Though the units are case-insensitive in CSS, it is good practice to use a capital H for Hz and kHz, as in the SI, Hertz being a family noun. Examples These are valid time values: 12Hz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Positive integer -456kHz\u00a0\u00a0\u00a0\u00a0 Negative integer 4.3Hz       Non-integer 14KhZ\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The unit is case-insensitive, though non-SI capitalization is not recommended. 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero (without the unit) +0s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero, with a leading + and the unit -0ms        Zero, with a leading - and the unt(Though strange, this is an allowed value)  These are invalid time values: 12.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 This is a <number>, not an <frequency>, it must have a unit 7 Hz        No space is allowed between the <number> and the unit  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0    This data type was initially introduced in CSS Level 2 for the now obsoleted aural media group, where it was used to define the pitch of the voice. This has been deprecated since then, but the <frequency> data type has been reintroduced in CSS3, though no CSS property is using it at the moment.Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support no no no [1] no [*] no         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support no no no no no     [*] Some versions of Opera may have (partial) support for the obsolete aural media group, and through the pitch property support for the <frequency> data type.See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/gradient","title":"gradient","description":"Specification    Specification Status Comment     CSS Image Value and Replaced Content Module Level 3 Working Draft  \u00a0    Browser compatibility Each different gradient type has a different compatibility matrix. Please consult each individual article. See also  CSS Reference Using CSS gradients, <gradient>  , linear-gradient(), radial-gradient(), repeating-linear-gradient(), repeating-radial-gradient(); CSS Data Types: <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri> ."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/identifier","title":"identifier","description":"The <identifier> CSS data value denotes an arbitrary user-defined string used as an identifier. Its syntax is similar to the CSS identifier one, except that it is case-sensitive: an <identifier> is a sequence of characters where characters can be :  any alphanumeric character (A to Z, or a to z), any decimal digit (0 to 9), a dash ('-') an underscore ('_'), a escaped character (with a backslash, '\\'), or a Unicode character (in the format of a backslash followed by one to six hexadecimal digits, its Unicode code point).  The first character must not be a decimal digit nor a dash ('-') followed by a decimal digit or another dash. An <identifier> must not be placed between single or double quotes as it would be identical to a <string>  . Note that id1, Id1, iD1 and ID1 are all different identifiers as they are case-sensitive. In the opposite, as they are several way to escape a character, toto\\? and toto\\3F are the same identifiers. These are valid identifiers: nono79\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A mix of alphanumeric characters and numbers ground-level\u00a0\u00a0\u00a0\u00a0\u00a0 A mix of alphanumeric characters and a dash -test\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A dash followed by an alphabetic character _internal\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 An underscore followed by alphanumeric characters \\22 toto\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A Unicode character followed by a sequence of alphanumeric character bili\\.bob\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The period is correctly escaped  These are invalid identifiers: 34rem\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It must not start with a decimal digit. -12rad\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It must not start with a dash followed by a decimal digit. bili.bob          Only alphanumeric characters, _ and - need not being escaped. --toto\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It must not start with two dashes. 'bilibob'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It isn't an <identifier>, it is a <string>. \"bilibob\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It isn't an <identifier>, it is a <string>.  The <identifier> data type is mainly used in conjunction with CSS Counters, the counter  functional notation and the two related CSS properties, counter-reset  and counter-increment . Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 2.0 1.0 (?) 8.0 [1] 9.2 3.1 (?)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/image","title":"image","description":"Syntax An <image> CSS data type represents may be one of the following:  An image denoted by a CSS <uri>  data type and the url() function; A CSS <gradient>  ; A part of the page, defined by the element()  function.  Examples These are valid image values: url(test.jpg)\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The url() function, as long as test.jpg is an image linear-gradient(to bottom, blue, red)\u00a0 A <gradient> element(colonne3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A part of the page, used with the element() function, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if colonne3 is an existing CSS id on the page.  These are invalid image values: cervin.jpg\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 An image file must be defined using the url() function. url(report.pdf)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  The file pointed by the url() function must be an image. element(fakeid)                        If fakeid is not an existing CSS id on the page  Specifications    Specification Status Comment     CSS Image Value and Replaced Content Module Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   <uri> (Supported) (Supported) (Supported) (Supported) (Supported)   <gradient> (Supported) limited to background-image  & background  -moz (Supported) -webkit IE 10 -ms (Supported) -o (Supported) -webkit   element() 4.0 (2.0) [2] limited to background-image  & background  -moz ? ? ? ?         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   <uri> (Supported) (Supported) (Supported) (Supported) (Supported)   <gradient> (Supported) limited to background-image  & background  -moz ? ? ? ?   element() 4.0 (2.0) [3] limited to background-image  & background  -moz ? ? ? ?     See also  CSS Reference Using CSS gradients, <gradient>  , linear-gradient(), radial-gradient(), repeating-linear-gradient(), repeating-radial-gradient(); element(); CSS Data Types: <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri> ."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/initial","title":"initial | -moz-initial","description":"The -moz-initial CSS keyword is a Mozilla implementation of CSS3 initial. Applies the initial value of a property to an element. -moz-initial (initial) is allowed on every CSS property. It causes the element for which it is specified to use the initial value of the property. Examples   \/* give headers a green border *\/  h2 { border: medium solid green }   \/* but make those in the sidebar use the value of the \"color\" property *\/  #sidebar h2 { border-color: -moz-initial; border-color: initial; }    <p style=\"color:red\">      this text is red         <em style=\"color:-moz-initial; color:initial\">            this text is in the initial color (e.g. black)        <\/em>     this is red again  <\/p>  Browser compatibility    Browser Lowest version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0-3.0 (1.0-1.9) [*] -moz-initial   Opera --- ---   Safari (WebKit) 1.2 (125) initial    [*] Increasing support in each version, almost complete in Firefox 3.0  Support for quotes  since Firefox 3.5 (Gecko 1.9.1) Support for -moz-border-*-colors  since Firefox 3.6 (Gecko 1.9.2)  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  Defines the keyword   CSS Cascade And Inheritance Level 3 Working Draft  Defines what an initial value is    See also Initial value, inherit"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/inherit","title":"inherit","description":"The inherit  value is allowed on every CSS property. It causes the element for which it is specified to take the Computed value  of the property from its parent element. For inherited properties For inherited properties, this reinforces the default behavior, and is only needed to override another rule. For example:  \/* make second-level headers green *\/  h2 { color: green; }   \/* ...but leave those in the sidebar alone so they use their parent's color *\/  #sidebar h2 { color: inherit; }  Note that in this example the h2 elements inside the sidebar might be different colors. For example, if one of them were the child of a div matched by the rule  div#current { color: blue; }  it would be blue. For non-inherited properties For non-inherited properties, this specifies a behavior that typically makes relatively little sense. For inherited properties For inherited properties, this reinforces the default behavior, and is only needed to override another rule. For example:  \/* make second-level headers green *\/  h2 { color: green; }   \/* ...but leave those in the sidebar alone so they use their parent's color *\/  #sidebar h2 { color: inherit; }  Note that in this example the h2 elements inside the sidebar might be different colors. For example, if one of them were the child of a div matched by the rule  div#current { color: blue; }  it would be blue. For non-inherited properties For non-inherited properties, this specifies a behavior that typically makes relatively little sense. Notes Inheritance is always from the parent element in the document tree, even when the parent element is not the containing block. Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  \u00a0    Browser Compatibility    Browser Lowest Version   Internet Explorer 8.0   Firefox (Gecko) 1.0 (1.0)   Opera 4.0-7.0   Safari (WebKit) 1.0 (85)    See Also Inheritance, initial"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/integer","title":"integer","description":"The <integer> CSS data type denotes an integer number, positive or negative. There isn't any associated unit with the value. An integer consists of one or several decimal digit, 0 to 9, eventually preceded by one single + or - sign. Integers are used in numerous CSS properties, e. g. z-index , line-height , counter-increment , -moz-column-count . Also any <integer> CSS value is also a <number>  CSS value, though the converse is not true. Interpolation Values of the <integer> CSS data type can be interpolated in order to allow animations. In that case they are interpolated via integer discrete steps. The calculationis done as if they were real, floating-point, numbers and the discrete value is obtained using the floor function. [1] The speed of the interpolation is determined by the timing function associated with the animation.Examples These are valid integer values: 12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Positive integer (without a leading + sign) +123\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Positive integer (with a leading + sign) -456\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Negative integer 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero +0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero, with a leading + -0          Zero, with a leading - (Though strange, this is an allowed value)  These are invalid integer values: 12.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 This is a <number>, not an <integer>, though it represents an integer 12.         The dot should not be part of an <integer> +---12\u00a0\u00a0\u00a0\u00a0\u00a0 Only one leading +\/- is allowed ten\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Letters are not allowed _5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Special characters are not allowed \\35         Escaped Unicode characters are not allowed, even if they are an integer (here: 5) \\4E94\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Non-arabic numerals are not allowed, even escaped (here: the Japanese 5, \u56db)  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  Explicitly defined   CSS Level 1 Recommendation  Implicitly defined    Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   basic 1.0 1.0 (1.0) 3.0 yes 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes yes yes yes     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/length","title":"length","description":"The <length> CSS data type denotes distance measurements. It is a <number>  immediately followed by a length unit (px, em, pc, in, mm, ...). Like for any CSS dimension, there is no space between the unit literal and the number. Many CSS properties take <length> values, such as width , margin ,\u00a0 padding , font-size , border-width , text-shadow , ... For some properties, using negative lengths is a syntax error, but for some properties, negative lengths are allowed. Note also that some CSS properties accepted <length> values also accepts <percentage>  values; though also CSS dimensions, these are not <length> values. Interpolation Values of the <length> CSS data type can be interpolated in order to allow animations. In that case they are interpolated as real, floating-point, numbers. [1] The interpolation happens on the calculated value. The speed of the interpolation is determined by the timing function associated with the animation. Units Relative length units Font-relative length  em This unit represents the calculated font-size  of the element. If used on the font-size  property itself, it represents the inherited font-size of the element. This unit is often used to create scalable layouts, which keep the vertical rhythm of the page, even when the user changes the size of the fonts. The CSS properties line-height , font-size , margin-bottom  and margin-top  often has a value expressend in em.  ex This unit represents the x-height of the element's font . On fonts with the 'x' letter, this is generally the height of lowercase letters in the font; 1ex \u2248 0.5em in many fonts. ch Experimental   This unit represents the width, or more precisely the advance measure, of the glyph '0' (zero, the Unicode character U+0030) in the element's font . rem Experimental   This unit represents the font-size  of the root element (e.g. the font-size of the <html>  element). When used on the font-size  on this root element, it represents its initial value. This unit is practical in creating perfectly scalable layout. If not supported by the targeted browsers, such layout can be achieved using the em unit, though this is slightly more complex.   Viewport-relative length Experimental    vh 1\/100th of the height of the viewport. vw 1\/100th of the width of the viewport. vm 1\/100th of the minimum value between the height and the width of the viewport.  Absolute length units Absolute length units represents a physical measurement and when the physical properties of the output medium are known, such as for print layout. This is done by anchored one of the unit to a physical unit and to defined the other relatively to it. The anchor is done differently for low-resolution devices, like screens, and high-resolution devices, like printers. For low-dpi devices, the unit px represents the physical reference pixel and the others are defined relative to it. Thus, 1in is defined as 96px which equals 72pt. The consequence of this definition is that on such devices, length described in inches (in), centimeters (cm), millimeters (mm) doesn't necessary match the length of the physical unit with the same name. For high-dpi devices, inches (in), centimeters (cm), millimeters (mm) are defined as their physical counterparts. Therefore the px unit is defined relative to them (1\/96 of 1 inch).  px Relative to the viewing device. For screen display, typically one device pixel (dot) of the display. For printers and very high resolution screens one CSS pixel implies multiple device pixels, so that the number of pixel per inch stays around 96.  mm One millimeter. cm One centimeter (10 millimeters). in One inch (2.54 centimeters). pt One point (which is 1\/72 of an inch). pc One pica (which is 12 points). mozmm  Requires Gecko 2.0  Non-standard      An experimental unit which attempts to render at exactly one millimeter regardless of the size or resolution of the display. This is rarely actually what you want, but may be useful in particular for mobile devices.   Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  CSS units and dots-per-inch  Prior to Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1) , Gecko attempted (often incorrectly) to actually compute the real size to render for these, even though most other rendering engines assumed 96 DPI. Now Gecko is consistent with the other browsers. Starting in\u00a0Gecko 2.0, changes to how CSS units translate to dots-per-inch (DPI) have been made to become consistent with the behavior of other popular browsers including Safari, Internet Explorer, and Google Chrome. Some specific examples:  1in is now always 96px 3pt is now always 4px 25.4mm is now always 96px  In addition, Gecko has improved ability to correctly scale absolute lengths to the actual resolution of the rendering medium, whether that's the screen or paper. Relative length units Font-relative length  em This unit represents the calculated font-size  of the element. If used on the font-size  property itself, it represents the inherited font-size of the element. This unit is often used to create scalable layouts, which keep the vertical rhythm of the page, even when the user changes the size of the fonts. The CSS properties line-height , font-size , margin-bottom  and margin-top  often has a value expressend in em.  ex This unit represents the x-height of the element's font . On fonts with the 'x' letter, this is generally the height of lowercase letters in the font; 1ex \u2248 0.5em in many fonts. ch Experimental   This unit represents the width, or more precisely the advance measure, of the glyph '0' (zero, the Unicode character U+0030) in the element's font . rem Experimental   This unit represents the font-size  of the root element (e.g. the font-size of the <html>  element). When used on the font-size  on this root element, it represents its initial value. This unit is practical in creating perfectly scalable layout. If not supported by the targeted browsers, such layout can be achieved using the em unit, though this is slightly more complex.   Viewport-relative length Experimental    vh 1\/100th of the height of the viewport. vw 1\/100th of the width of the viewport. vm 1\/100th of the minimum value between the height and the width of the viewport.  Font-relative length  em This unit represents the calculated font-size  of the element. If used on the font-size  property itself, it represents the inherited font-size of the element. This unit is often used to create scalable layouts, which keep the vertical rhythm of the page, even when the user changes the size of the fonts. The CSS properties line-height , font-size , margin-bottom  and margin-top  often has a value expressend in em.  ex This unit represents the x-height of the element's font . On fonts with the 'x' letter, this is generally the height of lowercase letters in the font; 1ex \u2248 0.5em in many fonts. ch Experimental   This unit represents the width, or more precisely the advance measure, of the glyph '0' (zero, the Unicode character U+0030) in the element's font . rem Experimental   This unit represents the font-size  of the root element (e.g. the font-size of the <html>  element). When used on the font-size  on this root element, it represents its initial value. This unit is practical in creating perfectly scalable layout. If not supported by the targeted browsers, such layout can be achieved using the em unit, though this is slightly more complex.   Viewport-relative length Experimental    vh 1\/100th of the height of the viewport. vw 1\/100th of the width of the viewport. vm 1\/100th of the minimum value between the height and the width of the viewport.  Absolute length units Absolute length units represents a physical measurement and when the physical properties of the output medium are known, such as for print layout. This is done by anchored one of the unit to a physical unit and to defined the other relatively to it. The anchor is done differently for low-resolution devices, like screens, and high-resolution devices, like printers. For low-dpi devices, the unit px represents the physical reference pixel and the others are defined relative to it. Thus, 1in is defined as 96px which equals 72pt. The consequence of this definition is that on such devices, length described in inches (in), centimeters (cm), millimeters (mm) doesn't necessary match the length of the physical unit with the same name. For high-dpi devices, inches (in), centimeters (cm), millimeters (mm) are defined as their physical counterparts. Therefore the px unit is defined relative to them (1\/96 of 1 inch).  px Relative to the viewing device. For screen display, typically one device pixel (dot) of the display. For printers and very high resolution screens one CSS pixel implies multiple device pixels, so that the number of pixel per inch stays around 96.  mm One millimeter. cm One centimeter (10 millimeters). in One inch (2.54 centimeters). pt One point (which is 1\/72 of an inch). pc One pica (which is 12 points). mozmm  Requires Gecko 2.0  Non-standard      An experimental unit which attempts to render at exactly one millimeter regardless of the size or resolution of the display. This is rarely actually what you want, but may be useful in particular for mobile devices.   Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  CSS units and dots-per-inch  Prior to Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1) , Gecko attempted (often incorrectly) to actually compute the real size to render for these, even though most other rendering engines assumed 96 DPI. Now Gecko is consistent with the other browsers. Starting in\u00a0Gecko 2.0, changes to how CSS units translate to dots-per-inch (DPI) have been made to become consistent with the behavior of other popular browsers including Safari, Internet Explorer, and Google Chrome. Some specific examples:  1in is now always 96px 3pt is now always 4px 25.4mm is now always 96px  In addition, Gecko has improved ability to correctly scale absolute lengths to the actual resolution of the rendering medium, whether that's the screen or paper. Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  Added ch, rem, vw, vh, vm   CSS Level 2 (Revision 1) Recommendation  pt, pc, px are explicitly defined (were implicitly defined in CSS1)   CSS Level 1 Recommendation  \u00a0    Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1 1.0 (1.0) 3.0 [2] 3.5 1.0 (85)   ch no 1.0 (width of 'M') [*] 3.5 (correct) 9 [3] no no   rem 1 (528) [4] 3.6 (1.9.2) 9 [5] no 5.0 (533.17.8)   vh, vw, vm no [6] no [7] 9 [8] no no [9]         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes yes yes yes   ch no yes ? no no   rem 2.1 yes ? no 4.0   vh, vw, vm no no ? no no     [*] Also, didn't work for border-width  and outline-width  CSS properties. See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/none","title":"none","description":"none is a common value for most CSS properties. It is often the default value, but can always be considered as a sort of \"standard\" value. It is comparable to the value normal  , used in a similar manner for other properties. Used in  float  The element doesn't float. text-decoration  Doesn't decorate the element. max-height  \/ max-width  Doesn't bound the height \/ width with a particular value.   background-image  border-style  clear  content  counter-increment  counter-reset  display  list-style-type  quotes  text-transform"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/normal","title":"normal","description":"normal is a common value for some CSS properties. It is often the default value, but can always be considered as a sort of \"standard\" value. It is comparable to the value none , used in a similar manner for other properties. Used in   font-weight  Gives the font standard weight (400). That is, the text is not noticeably bold or light. font-style  Does not apply any italic or oblique to the font. word-spacing  Uses the standard spacing between words, specified by the font.  Also used in:  font-variant  letter-spacing  white-space  speak  unicode-bidi  line-height  content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/number","title":"number","description":"Interpolation Values of the <number> CSS data type can be interpolated in order to allow animations. In that case they are interpolated as real, floating-point, numbers. [1] The speed of the interpolation is determined by the timing function associated with the animation.Examples These are valid number values: 12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A raw <integer> is also a <number> 4.01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A positive non-integer <number> -456.8\u00a0\u00a0\u00a0\u00a0\u00a0 Negative non-integer <number> 0.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero +0.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero, with a leading + -0.0        Zero, with a leading - (Though strange, this is an allowed value)  These are invalid number values: 12.         The dot should be followed by a number +---12.2\u00a0\u00a0\u00a0 Only one leading +\/- is allowed 12.1.1      Only one dot is allowed 10e3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The e notation is not allowed  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  Explicitly defined   CSS Level 1 Recommendation  Implicitly defined    Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   basic 1.0 1.0 (1.0) <=5.0 yes 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes yes yes yes     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/percentage","title":"percentage","description":"The <percentage> CSS data types represent a percentage value. Many CSS properties can take percentage values, often to define sizes in terms of parent objects. Percentages are formed by a <number>  immediately followed by the percentage sign . Like for all unit in CSS, there is no space between the '%' and the number. Many length properties use percentages, such as width , margin  and padding . Percentages can also be seen in font-size , where the size of the text is directly related to the size of its parent. Note: only calculated values are inherited. So, even if a percentage value is used on the parent property, a real value, like a width in pixel for a  <length>  value, will be accessible on the inherited property, not the percentage value. Interpolation Values of the <percentage> CSS data type can be interpolated in order to allow animations. In that case they are interpolated as real, floating-point, numbers. [1] The speed of the interpolation is determined by the timing function associated with the animation.Examples \r           <div style=\"background-color:#0000FF;\">   <div style=\"width:50%;margin-left:20%;background-color:#00FF00;\">Width: 50%, Left margin: 20%<\/div>   <div style=\"width:30%;margin-left:60%;background-color:#FF0000;\">Width: 30%, Left margin: 60%<\/div> <\/div>\r          The above HTML will output:  Width: 50%, Left margin: 20% Width: 30%, Left margin: 60%  \u00a0 \r           <div style=\"font-size:18px;\">   Full size text (18px)   <span style=\"font-size:50%;\">50%<\/span>   <span style=\"font-size:200%;\">200%<\/span> <\/div>\r          The above HTML will output: Full size text (18px) 50% 200% Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  No change from CSS Level 1   CSS Level 1 Recommendation  \u00a0    Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   basic 1.0 1.0 (1.0) <=5.0 yes 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes yes yes yes     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/ratio","title":"ratio","description":"The <ratio> CSS data type, used for describing aspect ratios in media queries, denotes the proportion between two unitless values. It is a strictly positive <integer>   followed by a slash ('\/', Unicode U+002F SOLIDUS) and a second strictly positive <integer>  . There may be spaces before and after the solidus.Examples    \u00a0 Ratio Usage      4\/3 Traditional TV format in the 20th century.    16\/9 Modern, 'widescreen', TV format.    185\/100 = 91\/50 (non-integer dividends and divisors are not allowed)  The most common movie format since the 1960s.     239\/100 (non-integer dividends and divisors are not allowed)  The 'widescreen', anamorphic, movie format.    Specifications    Specification Status Comment      CSS Media Queries Level 3  Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support <4 3.5 (1.9.1) 9 [1] 9.5 1.0 (?) [2]         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes ? yes yes     See also  CSS Media Queries CSS Reference Index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/resolution","title":"resolution","description":"The <resolution> CSS data types, used in media queries, denotes the density of pixels of an output device, its resolution. It is a  <number> immediately followed by a unit of resolution (dpi, dpcm, ...). Like for any CSS dimension, there is no space between the unit literal and the number. Units  dpi This unit represents the number of dots per inch. A screen typically contains 72 or 96 dpi; a printed document usually reach much greater dpi. As 1 inch is 2.54 cm, 1dpi \u2248 2.54dpcm. dpcm This unit represents the number of dots per centimeter. As 1 inch is 2.54 cm, 1dpcm \u2248 0.39dpi.  Examples Here are some correct uses of <resolution> values: 96dpi\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Correct use: a <number> (here an <integer>) followed by the unit. @media print and (min-resolution: 300dpi) { ... }\u00a0 Correct use in the context of a media query.  Here are some incorrect uses: 72 dpi\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Incorrect: no spaces allowed between the <number> and the unit. ten dpi\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Incorrect: only digits must be used  Specifications    Specification Status Comment     CSS Media Queries Level 3 Candidate Recommandation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support <4 3.5 (1.9.1) [*] 9 [1] 9.5 1.0 (?) [2]         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes ? yes yes     [*] Before Firefox 8 (Gecko 8.0), it erroneously accepted only CSS Dimension with <integer>   followed by the unit. From that version, it supports any valid CSS dimensions (<number>  immediately followed by the unit).See also  CSS Media Queries CSS Reference Index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/shape","title":"shape","description":"The <shape> CSS data type denotes the specific form of a region. This region is used to define on which part of an element some properties like clip  do apply. In the current specification, a <shape>, though designed to denote any kind of form, can only represents a rectangular region, defined using the rect() functional notation.The rect() function The rect() functional notation produces a region in the form of a rectangle. Syntax rect(top, right, bottom, left)  where:  top Is a  <length>  representing the offset for the top of the rectangle relative to the top border of the element's box.   right Is a  <length>  representing the offset for the right of the rectangle relative to the left border of the element's box.   bottom Is a  <length>  representing the offset for the bottom of the rectangle relative to the top border of the element's box.   left Is a  <length>  representing the offset for the left of the rectangle relative to the left border of the element's box. Interpolation Values of the <shape> CSS data type which are rectangles can be interpolated in order to allow animations. In that case they are interpolated over their top, right, bottom and left component, each treated as a real, floating-point, number. [1] The speed of the interpolation is determined by the timing function associated with the animation. Examples   img.clip04 {     clip: rect(10px, 20px, 20px, 10px);  }  Syntax rect(top, right, bottom, left)  where:  top Is a  <length>  representing the offset for the top of the rectangle relative to the top border of the element's box.   right Is a  <length>  representing the offset for the right of the rectangle relative to the left border of the element's box.   bottom Is a  <length>  representing the offset for the bottom of the rectangle relative to the top border of the element's box.   left Is a  <length>  representing the offset for the left of the rectangle relative to the left border of the element's box. Interpolation Values of the <shape> CSS data type which are rectangles can be interpolated in order to allow animations. In that case they are interpolated over their top, right, bottom and left component, each treated as a real, floating-point, number. [1] The speed of the interpolation is determined by the timing function associated with the animation. Examples   img.clip04 {     clip: rect(10px, 20px, 20px, 10px);  }  Specifications    Specification Status Comment     CSS Level 2 (Revision 1) Recommendation  Defined with the clip  property    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  5.5[*] 9.5 1.3         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     [*] From IE 5.5 to IE 7 included, the IE supported syntax of the rect() didn't allow the comma as the parameter separator, but a space. From IE 8, the standard syntax (only commas) is supported.See also  Related CSS properties: clip  The -moz-image-rect() function with similar coordinate than rect(). CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/string","title":"string","description":"Examples  \/* Simple quote escaping *\/ \"Awesome string with double quotes\" \"Awesome string with \\\" escaped double quotes\" 'Awesome string with single quotes' \"Awesome string with \\' escaped single quotes\"  \/* New line in a string *\/ \"Awesome string with \\Aline break\"  \/* String spanning over two lines (these two strings are exactly the same) *\/ \"A really long \\ awesome string\" \"A really long awesome string\"  Note: Double quoted strings can also be escaped using \\22 and single quoted strings can be escaped using \\27. Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  Explicitly defined; allows 6-digit Unicode escaped characters   CSS Level 1 Recommendation  Implicitly defined; allows 4-digit Unicode escaped characters    Browser Compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   basic 1.0 1.0 (1.0) <=5.0 yes 1.0 (85)   \\xx 1.0 1.0 (1.0) 6.0 [1] yes 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support yes yes yes yes yes   \\xx yes yes yes yes yes     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/time","title":"time","description":"The <time> CSS data type denotes time dimensions expressed in seconds or milliseconds. They consists of a <number>  immediately followed by the unit. Like for any CSS dimension, there is no space between the unit literal and the number. The following units may be used :  s which represents a time in seconds. E.g. 0s, 1.5s, -60s. ms which represents a time in milliseconds. E.g. 0ms, 1500ms, -60000ms.  Conversion between s and ms follows the logical 1s = 1000ms. As all units represents the same time for the value 0, the unit may be omitted in that case: 0 represents 0s, 0ms. Examples These are valid time values: 12s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Positive integer -456ms\u00a0\u00a0\u00a0\u00a0\u00a0 Negative integer 4.3ms       Non-integer 14mS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The unit is case-insensitive, though capital letters are not recommended for s and ms. 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero (without the unit) +0s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Zero, with a leading + and the unit -0ms        Zero, with a leading - and the unt(Though strange, this is an allowed value)  These are invalid time values: 12.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 This is a <number>, not an <time>, it must have a unit 7 ms        No space is allowed between the <number> and the unit  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome (Webkit) Firefox (Gecko) Internet Explorer Opera (Presto) Safari (Webkit)   Basic support <=11 (?) 4.0 (2.0) 9.0 [1] 10.5 (2.3) [2] <=3.2 (?)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? no ?     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/timing-function","title":"timing-function","description":"The <timing-function> CSS data type denotes a mathematical function that describes how fast one-dimensional values change during transitions or animations. This in essence lets you establish an acceleration curve, so that the speed of the animation can vary over its duration. It is a function linking the time with a ratio of the output value (expressed as a <number> , with 0.0 representing the initial state, 1.0 the final state. The output ratio can be greater than 1.0 (or smaller than 0.0). This causes the animation to go farther than the final state, then come back, in a kind of bouncing effect. Nevertheless, if the output value goes outside of its possible range, such as a component of a color going greater than 255 or smaller than 0, the value is clipped to its closest allowed value (in the case of a color-component 255 and 0 respectively. Some cubic-bezier() curves exhibit this property.Values  CSS supports two kinds of timing functions: the subset of the cubic B\u00e9zier curves that are functions and staircase functions. The most useful of these functions are given a keyword that allows to easily describe them. The cubic-bezier() class of timing-functions        The cubic-bezier() functional notation defines a cubic B\u00e9zier curve. As these curves are continuous, they are often used to smooth down the start and end of the animation and are therefore sometimes called easing functions. A cubic B\u00e9zier curve is defined by four points P0, P1, P2, and P3. P0 and P3 are the start and the end of the curve and, in CSS these points are fixed as the coordinates are ratios (the abscissa the ratio of time, the ordinate the ratio of the output range). P0 is (0,\u00a00) and represents the initial time and the initial state, P3 is (1,\u00a01) and represents the final time and the final state. Not all cubic B\u00e9zier curves are suitable as timing functions as not all are mathematical functions, i.e. curves that for a given abscissa have zero or one value. With P0 and P3 fixed as defined by CSS, a cubic B\u00e9zier curve is a function, and is therefore valid, if and only if the abscissas of P1 and P2 are both in the [0,\u00a01] range. Cubic B\u00e9zier curves with the P1 or P2 ordinate outside the [0,\u00a01] range may generate bouncing effects. When you specify an invalid cubic-bezier curve, CSS ignores the whole property.      Syntax cubic-bezier(x1, y1, x2, y2)  where :  x1, y1, x2, y2 Are <number>  values representing the abscissas and ordinates of the P1 and P2 points defining the cubic B\u00e9zier curve. x1 and x2 must be in the range [0,\u00a01] or the value is invalid.  Examples These cubic B\u00e9zier curves are valid for use in CSS : cubic-bezier(0.1, 0.7, 1.0, 0.1)\u00a0\u00a0 The canonical B\u00e9zier curve with four <number> in the [0,1] range. cubic-bezier(0, 0, 1, 1)           Using <integer> is valid as any <integer> is also a <number>. cubic-bezier(-0.2, 0.6, -0.1, 0) \u00a0\u00a0Negative values for abscissas are valid, leading to bouncing effects. cubic-bezier(1.1, 0, 4, 0)       \u00a0\u00a0Values > 1.0 for abscissas are also valid.  These cubic B\u00e9zier curves definitions are invalid : cubic-bezier(0.1, red, 1.0, green) Though the animated output type may be a color, B\u00e9zier curves work w\/ numerical ratios. cubic-bezier(0.1, 4,   0.6, 2.45)  Ordinates must be in the [0, 1] range or the curve is not a function of time. cubic-bezier(0.3, 2.1)             The two points must be defined, there is no default value. cubic-bezier(0.3, -1.9, 2.1, -0.2) Ordinates must be in the [0, 1] range or the curve is not a function of time.  The steps() class of timing-functions       The steps() functional notation defines a step function dividing the domain of output values in equidistant steps. This subclass of step functions are sometimes also called staircase functions.   steps(2, start) steps(4, end)    \u00a0 Syntax steps(number_of_steps, direction)  where :  number_of_steps Is a strictly positive <integer>   representing the amount of equidistant treads composing the stepping function. direction Is a keyword indicating if it the function is left- or right-continuous:  start denotes a left-continuous function, so that the first step happens when the animation begins; end denotes a right-continuous function, so that the last step happens when the animation ends.    Examples These timing functions are valid : steps(5, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  There is 5 treads, the last one happens right before the end of the animation. steps(2, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A two-step staircase, the first one happening at the start of the animation.  These timing function are invalid : steps(2.0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The amount of steps must be non-negative. steps(0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 There must be at least one step. steps(2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The second parameter is not optional. steps(start, 3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Though of different types, the order of parameter is important. step(1, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Even if there is one step, the function name is steps, with the plural 's' steps(3 end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The two parameters must be separated with a comma; one or several spaces is not enough.  Keywords for common timing-functions linear      This keyword represents the timing function cubic-bezier(0.0, 0.0, 1.0, 1.0). Using this timing function, the animation goes from its initial state to its final one regularly, with a constant speed.     ease     This keyword represents the timing function cubic-bezier(0.25, 0.1, 0.25, 1.0). This function is similar to ease-in-out, though it accelerates more sharply at the beginning and the acceleration and already starts to slow down near the medium of it.    ease-in      This keyword represents the timing function cubic-bezier(0.42, 0.0, 1.0, 1.0). The animation begins slowly, then progressively accelerates until the final state is reached and the animation stops abruptly.     ease-in-out      This keyword represents the timing function cubic-bezier(0.42, 0.0, 0.58, 1.0). With this timing function, the animation starts slowly, accelerates than slows down when approaching to its final state. At the begin, it behaves similarly to the ease-in function, at the end, it is similar to the ease-out function.     ease-out      This keyword represents the timing function cubic-bezier(0.0, 0.0, 0.58, 1.0). The animation starts quickly then slow progressively down when approaching to its final state.     step-start     This keyword represents the timing function steps(1, start). Using this timing function, the animation jumps immediately to the end state and stay in that position until the end of the animation. \u00a0    step-end      This keyword represents the timing function steps(1, end). Using this timing function, the animation stays in its initial state until the end, where it directly jumps to its final position.     The cubic-bezier() class of timing-functions        The cubic-bezier() functional notation defines a cubic B\u00e9zier curve. As these curves are continuous, they are often used to smooth down the start and end of the animation and are therefore sometimes called easing functions. A cubic B\u00e9zier curve is defined by four points P0, P1, P2, and P3. P0 and P3 are the start and the end of the curve and, in CSS these points are fixed as the coordinates are ratios (the abscissa the ratio of time, the ordinate the ratio of the output range). P0 is (0,\u00a00) and represents the initial time and the initial state, P3 is (1,\u00a01) and represents the final time and the final state. Not all cubic B\u00e9zier curves are suitable as timing functions as not all are mathematical functions, i.e. curves that for a given abscissa have zero or one value. With P0 and P3 fixed as defined by CSS, a cubic B\u00e9zier curve is a function, and is therefore valid, if and only if the abscissas of P1 and P2 are both in the [0,\u00a01] range. Cubic B\u00e9zier curves with the P1 or P2 ordinate outside the [0,\u00a01] range may generate bouncing effects. When you specify an invalid cubic-bezier curve, CSS ignores the whole property.     Syntax cubic-bezier(x1, y1, x2, y2)  where :  x1, y1, x2, y2 Are <number>  values representing the abscissas and ordinates of the P1 and P2 points defining the cubic B\u00e9zier curve. x1 and x2 must be in the range [0,\u00a01] or the value is invalid.  Examples These cubic B\u00e9zier curves are valid for use in CSS : cubic-bezier(0.1, 0.7, 1.0, 0.1)\u00a0\u00a0 The canonical B\u00e9zier curve with four <number> in the [0,1] range. cubic-bezier(0, 0, 1, 1)           Using <integer> is valid as any <integer> is also a <number>. cubic-bezier(-0.2, 0.6, -0.1, 0) \u00a0\u00a0Negative values for abscissas are valid, leading to bouncing effects. cubic-bezier(1.1, 0, 4, 0)       \u00a0\u00a0Values > 1.0 for abscissas are also valid.  These cubic B\u00e9zier curves definitions are invalid : cubic-bezier(0.1, red, 1.0, green) Though the animated output type may be a color, B\u00e9zier curves work w\/ numerical ratios. cubic-bezier(0.1, 4,   0.6, 2.45)  Ordinates must be in the [0, 1] range or the curve is not a function of time. cubic-bezier(0.3, 2.1)             The two points must be defined, there is no default value. cubic-bezier(0.3, -1.9, 2.1, -0.2) Ordinates must be in the [0, 1] range or the curve is not a function of time.  The steps() class of timing-functions       The steps() functional notation defines a step function dividing the domain of output values in equidistant steps. This subclass of step functions are sometimes also called staircase functions.   steps(2, start) steps(4, end)    \u00a0 Syntax steps(number_of_steps, direction)  where :  number_of_steps Is a strictly positive <integer>   representing the amount of equidistant treads composing the stepping function. direction Is a keyword indicating if it the function is left- or right-continuous:  start denotes a left-continuous function, so that the first step happens when the animation begins; end denotes a right-continuous function, so that the last step happens when the animation ends.    Examples These timing functions are valid : steps(5, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  There is 5 treads, the last one happens right before the end of the animation. steps(2, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A two-step staircase, the first one happening at the start of the animation.  These timing function are invalid : steps(2.0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The amount of steps must be non-negative. steps(0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 There must be at least one step. steps(2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The second parameter is not optional. steps(start, 3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Though of different types, the order of parameter is important. step(1, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Even if there is one step, the function name is steps, with the plural 's' steps(3 end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The two parameters must be separated with a comma; one or several spaces is not enough.  Keywords for common timing-functions linear      This keyword represents the timing function cubic-bezier(0.0, 0.0, 1.0, 1.0). Using this timing function, the animation goes from its initial state to its final one regularly, with a constant speed.     ease     This keyword represents the timing function cubic-bezier(0.25, 0.1, 0.25, 1.0). This function is similar to ease-in-out, though it accelerates more sharply at the beginning and the acceleration and already starts to slow down near the medium of it.    ease-in      This keyword represents the timing function cubic-bezier(0.42, 0.0, 1.0, 1.0). The animation begins slowly, then progressively accelerates until the final state is reached and the animation stops abruptly.     ease-in-out      This keyword represents the timing function cubic-bezier(0.42, 0.0, 0.58, 1.0). With this timing function, the animation starts slowly, accelerates than slows down when approaching to its final state. At the begin, it behaves similarly to the ease-in function, at the end, it is similar to the ease-out function.     ease-out      This keyword represents the timing function cubic-bezier(0.0, 0.0, 0.58, 1.0). The animation starts quickly then slow progressively down when approaching to its final state.     step-start     This keyword represents the timing function steps(1, start). Using this timing function, the animation jumps immediately to the end state and stay in that position until the end of the animation. \u00a0    step-end      This keyword represents the timing function steps(1, end). Using this timing function, the animation stays in its initial state until the end, where it directly jumps to its final position.     The steps() class of timing-functions       The steps() functional notation defines a step function dividing the domain of output values in equidistant steps. This subclass of step functions are sometimes also called staircase functions.   steps(2, start) steps(4, end)    \u00a0 Syntax steps(number_of_steps, direction)  where :  number_of_steps Is a strictly positive <integer>   representing the amount of equidistant treads composing the stepping function. direction Is a keyword indicating if it the function is left- or right-continuous:  start denotes a left-continuous function, so that the first step happens when the animation begins; end denotes a right-continuous function, so that the last step happens when the animation ends.    Examples These timing functions are valid : steps(5, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  There is 5 treads, the last one happens right before the end of the animation. steps(2, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A two-step staircase, the first one happening at the start of the animation.  These timing function are invalid : steps(2.0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The amount of steps must be non-negative. steps(0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 There must be at least one step. steps(2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The second parameter is not optional. steps(start, 3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Though of different types, the order of parameter is important. step(1, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Even if there is one step, the function name is steps, with the plural 's' steps(3 end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The two parameters must be separated with a comma; one or several spaces is not enough.  Syntax steps(number_of_steps, direction)  where :  number_of_steps Is a strictly positive <integer>   representing the amount of equidistant treads composing the stepping function. direction Is a keyword indicating if it the function is left- or right-continuous:  start denotes a left-continuous function, so that the first step happens when the animation begins; end denotes a right-continuous function, so that the last step happens when the animation ends.    Examples These timing functions are valid : steps(5, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  There is 5 treads, the last one happens right before the end of the animation. steps(2, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A two-step staircase, the first one happening at the start of the animation.  These timing function are invalid : steps(2.0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The amount of steps must be non-negative. steps(0, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 There must be at least one step. steps(2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The second parameter is not optional. steps(start, 3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Though of different types, the order of parameter is important. step(1, end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Even if there is one step, the function name is steps, with the plural 's' steps(3 end)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The two parameters must be separated with a comma; one or several spaces is not enough.  Keywords for common timing-functions linear      This keyword represents the timing function cubic-bezier(0.0, 0.0, 1.0, 1.0). Using this timing function, the animation goes from its initial state to its final one regularly, with a constant speed.     ease     This keyword represents the timing function cubic-bezier(0.25, 0.1, 0.25, 1.0). This function is similar to ease-in-out, though it accelerates more sharply at the beginning and the acceleration and already starts to slow down near the medium of it.    ease-in      This keyword represents the timing function cubic-bezier(0.42, 0.0, 1.0, 1.0). The animation begins slowly, then progressively accelerates until the final state is reached and the animation stops abruptly.     ease-in-out      This keyword represents the timing function cubic-bezier(0.42, 0.0, 0.58, 1.0). With this timing function, the animation starts slowly, accelerates than slows down when approaching to its final state. At the begin, it behaves similarly to the ease-in function, at the end, it is similar to the ease-out function.     ease-out      This keyword represents the timing function cubic-bezier(0.0, 0.0, 0.58, 1.0). The animation starts quickly then slow progressively down when approaching to its final state.     step-start     This keyword represents the timing function steps(1, start). Using this timing function, the animation jumps immediately to the end state and stay in that position until the end of the animation. \u00a0    step-end      This keyword represents the timing function steps(1, end). Using this timing function, the animation stays in its initial state until the end, where it directly jumps to its final position.     linear      This keyword represents the timing function cubic-bezier(0.0, 0.0, 1.0, 1.0). Using this timing function, the animation goes from its initial state to its final one regularly, with a constant speed.     ease     This keyword represents the timing function cubic-bezier(0.25, 0.1, 0.25, 1.0). This function is similar to ease-in-out, though it accelerates more sharply at the beginning and the acceleration and already starts to slow down near the medium of it.    ease-in      This keyword represents the timing function cubic-bezier(0.42, 0.0, 1.0, 1.0). The animation begins slowly, then progressively accelerates until the final state is reached and the animation stops abruptly.     ease-in-out      This keyword represents the timing function cubic-bezier(0.42, 0.0, 0.58, 1.0). With this timing function, the animation starts slowly, accelerates than slows down when approaching to its final state. At the begin, it behaves similarly to the ease-in function, at the end, it is similar to the ease-out function.     ease-out      This keyword represents the timing function cubic-bezier(0.0, 0.0, 0.58, 1.0). The animation starts quickly then slow progressively down when approaching to its final state.     step-start     This keyword represents the timing function steps(1, start). Using this timing function, the animation jumps immediately to the end state and stay in that position until the end of the animation. \u00a0    step-end      This keyword represents the timing function steps(1, end). Using this timing function, the animation stays in its initial state until the end, where it directly jumps to its final position.     Specifications    Specification Status Comment     CSS Transitions Level 3 Working Draft  Defined anonymously   CSS Animations Level 3 Working Draft  Defined anonymously, says to see definition in the CSS Transitions Module    Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4.0 (2.0) (Supported) -- 10.5 [1] 3.1   cubic-bezier() w\/ ordinate \u2209\u00a0[0,1] 4.0 (2.0) -- -- -- Nightly [2]   steps() 4.0 (2.0) -- -- -- --         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 4.0 (2.0) (Supported) -- 10 [3] 2.0 [4]   cubic-bezier() w\/ ordinate \u2209\u00a0[0,1] 4.0 (2.0) -- -- -- --   steps() 4.0 (2.0) -- -- -- 5.0 [5]     See also  The transition-timing-function  and animation-timing-function  needing a <timing-function> value. CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Universal_selectors","title":"Universal selectors","description":"An Asterisk (*) is the universal selector for CSS. It matches a single element of any type. Omitting the Asterisk with simple selectors has the same effect. For instance, *.warning and .warning are considered equal. In CSS 3 Asterisk (*) may be used in combination with namespace  ns|* - matches all elements in namespace ns *|* - matches all elements |* - matches all elements without any declared namespace  Examples \r           *[lang=en]{color:green;} *.warning {color:red;} *#maincontent {border: 1px solid blue;\r          ...where... \r           <p class=\"warning\">   <span lang=\"en-us\">A green span<\/span> in a red paragraph. <\/p> <p id=\"maincontent\" lang=\"en-gb\">   <span class=\"warning\">A red span<\/span> in a green paragraph. <\/p>\r          ...should look like A green span in a red paragraph. A red span in a green paragraph (with a border.) Notes Authors are discouraged from using the universal selector as it is the most expensive CSS selector in terms of Webpage Performance. Specifications  CSS 2 CSS 3  \u00a0\u00a0\u00a0 Browser compatibility    Browser Lowest Version   Internet Explorer ?   Firefox 1   Netscape ?   Opera ?   Safari ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Type_selectors","title":"Type selectors","description":"CSS type selectors match elements by node name. Used alone, therefore, a type selector for a particular node name selects all elements of that type \u2014 that is, with that node name \u2014 in the document. Syntax  nodeName { style properties }  Examples \r           span {   background-color: DodgerBlue; }\r          ...where... \r           <span>Here's a span with some text.<\/span>   <p>Here's a p with some text.<\/p>\r          ... should look like ... Here's a span with some text. Here's a p with some text. Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/uri","title":"uri","description":"The <url> CSS data type denotes a pointer to a resource. It has no proper syntax and can only be expressed through the url() functional notation. URI or URL?  There is a difference between a URI and a URL. A URL describes the location of the resource, the URI describes an id of the resource . A URI may be a location, a URL, or a name, a URN, of a resource.  In CSS Level 1, the url() functional notation was introduced to describe... URL, i.e. locations (a <url> CSS data type, though it wasn't explicitly defined that way).  In CSS Level 2, the same functional notation was extended to describe any URI, being a URL or URN. This led to the confusing fact that url() was used to create a <uri> CSS data type. Not only was this confusing, but URN are almost never used in the CSS usual case.  To fix this, CSS Level 3 came back to the initial definition, this time explicitly defined. The functional notation url() denotes a <url> CSS data type and no more the more generic <uri> CSS data type.  Remark that these semantic details doesn't change much for a web author, or the implementation details of the data type. Many CSS properties take a URL as value, such as background-image , cursor , @font-face , list-style  etc.\u00a0\u00a0The url() functional notation The URI may be quoted by simple quotes or double quotes.\u00a0 Relative URIs are allowed and are relative to the URL of stylesheet (and not to the URL of the web page).Syntax   <a_css_property>:  url(\"http:\/\/mysite.example.com\/mycursor.png\")   <a_css_property>:  url(http:\/\/mysite.example.com\/mycursor.png)  Examples  .topbanner { background: url(\"topbanner.png\") #00D no-repeat fixed; }   ul { list-style: square url(http:\/\/www.example.com\/redball.png) }  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  No significant change from CSS Level 2 (Revision 1)   CSS Level 2 (Revision 1) Recommendation  No significant change fromm CSS Level 1   CSS Level 1 Recommendation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 1.0 (1.0) 3.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 1.0 1.0 (3.5) yes yes 1.0     See also  CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Attribute_selectors","title":"Attribute selectors","description":"Attribute selectors select an element using the presence of a given attribute or attribute value.  [attr] Represents an element with an attribute name of attr. [attr=value] Represents an element with an attribute name of attr and whose value is exactly \"value\". [attr~=value] Represents an element with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly \"value\". [attr|=value] Represents an element with an attribute name of attr whose value is a hyphen-separated list of words, one of which is exactly \"value\". It can be used for language subcode matches. [attr^=value] Represents an element with an attribute name of attr and whose value is the prefixed by \"value\". [attr$=value] Represents an element with an attribute name of attr and whose value is the suffixed by \"value\". [attr*=value] Represents an element with an attribute name of attr and whose value contains at least one occurrence of string \"value\" as substring.  Examples \r           <style type=\"text\/css\">     \/* All spans with a \"lang\" attribute are bold *\/     span[lang] {font-weight:bold;}       \/* All spans in Portuguese are green *\/     span[lang=\"pt\"] {color:green;}      \/* All spans in US English are blue  *\/     span[lang~=\"en-us\"] {color: blue;}      \/* Any span in Chinese is red, matches simplified (zh-CN) or traditional (zh-TW) *\/     span[lang|=\"zh\"] {color: red;}      \/* All internal links have a gold background *\/     a[href^=\"#\"] {background-color:gold}      \/* All links to urls ending in \".cn\" are red *\/     a[href$=\".cn\"] {color: red;}      \/* All links to with \"example\" in the url have a grey background *\/     a[href*=\"example\"] {background-color: #CCCCCC;} <\/style>\r          ...where... \r           <div class=\"hello-example\">     <a href=\"http:\/\/example.com\">English:<\/a>     <span lang=\"en-us en-gb en-au en-nz\">Hello World!<\/span> <\/div> <div class=\"hello-example\">     <a href=\"#portuguese\">Portuguese:<\/a>     <span lang=\"pt\">Ol\u00e1 Mundo!<\/span> <\/div> <div class=\"hello-example\">     <a href=\"http:\/\/example.cn\">Chinese (Simplified):<\/a>     <span lang=\"zh-CN\">\u4e16\u754c\u60a8\u597d\uff01<\/span> <\/div> <div class=\"hello-example\">     <a href=\"http:\/\/example.cn\">Chinese (Traditional):<\/a>     <span lang=\"zh-TW\">\u4e16\u754c\u60a8\u597d\uff01<\/span> <\/div>\r          ...should look like... English: Hello World! Portuguese: Ol\u00e1 Mundo! Chinese (Simplified): \u4e16\u754c\u60a8\u597d\uff01 Chinese (Traditional): \u4e16\u754c\u60a8\u597d\uff01 Specifications  CSS 2 CSS 3  \u00a0 Browser compatibility    Browser Lowest Version   Internet Explorer ?   Firefox 1   Netscape ?   Opera ?   Safari ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Adjacent_sibling_selectors","title":"Adjacent sibling selectors","description":"The + combinator matches the second element only if it is immediately following the first element. Syntax element + element { style properties }  Examples \r           li + li {   color: red; }\r          ...where... \r           <ul>     <li>One<\/li>     <li>Two<\/li>     <li>Three<\/li>   <\/ul>\r          ... should look like ...  One Two Three  Another use case might be styling of \"caption span\"s of the following <img>  elements: \r           img + span.caption {   font-style: italic; }\r          will match the following <span>  elements: \r           <img src=\"photo1.jpg\"><span class=\"caption\">The first photo<\/span> <img src=\"photo2.jpg\"><span class=\"caption\">The second photo<\/span>\r          See also  General sibling selectors   Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Child_selectors","title":"Child selectors","description":"The > combinator separates two selectors and matches only those elements matched by the second selector that are direct children of elements matched by the first. By contrast, when two selectors are combined with the descendant selector, the combined selector expression matches those elements matched by the second selector for which there exists an ancestor element matched by the first selector, regardless of the number of \"hops\"\u00a0up the DOM. Syntax  selector1 > selector2 { style properties }  Examples \r           span { background-color: white; } div > span {   background-color: DodgerBlue; }\r          when applied to markup as follows: \r           <div>   <span>Span 1. In the div.     <span>Span 2. In the span that's in the div.<\/span>   <\/span> <\/div> <span>Span 3. Not in a div at all<\/span>\r          should result in: Span 1. In the div. Span 2. In the span that's in the div. Span 3. Not in a div at all. Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Descendant_selectors","title":"Descendant selectors","description":"The \u2423 combinator (that's meant to represent a space, or more properly one or more whitespace characters) combines two selectors such that the combined selector matches only those elements matching the second selector for which there is an ancestor element matching the first selector. Descendant selectors are similar to child selectors, but they do not require that the relationship between matched elements be strictly parent-child. Syntax  selector1 selector2 { style properties }  Examples \r           span { background-color: white; } div span { background-color: DodgerBlue; }\r          ...where... \r           <div>   <span>Span 1.     <span>Span 2.<\/span>   <\/span> <\/div> <span>Span 3.<\/span>\r          ... should look like ... Span 1. Span 2. Span 3. Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Pseudo-elements","title":"Pseudo-elements","description":"Just like pseudo-classes , pseudo-elements are added to selectors but instead of describing a special state they allow you to style certain parts of a document. For example the ::first-line  pseudo-element will only target the first line of a element specified by the selector.Syntax  selector:pseudo-element { \u00a0 property: value; }  Examples  :after  :before  ::first-letter  ::first-line  ::selection  Notes Sometimes you will see double colons (::) instead of just one (:). This is part of CSS3 and an attempt to distinguish between pseudo-classes and pseudo-elements. Most browsers support both values. Note: ::selection always start with double colons (::).    Browser Lowest Version Support of   Internet Explorer 8.0 :pseudo-element   Firefox (Gecko) 1.0 (1.0) :pseudo-element   1.0 (1.5) :pseudo-element ::pseudo-element    Opera 4.0 :pseudo-element   7.0 :pseudo-element :: pseudo-element    Safari (WebKit) 1.0 (85) :pseudo-element :: pseudo-element"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aafter","title":":after | ::after","description":":after creates a pseudo-element that is the last child of the element matched. Typically used to add cosmetic content to an element, by using the content  CSS property. This element is inline by default.  Firefox 3.5 noteFirefox prior to version 3.5 only implemented the CSS 2.0 version of :after. Not allowed were position, float, list-style-* and some display properties. Firefox 3.5 removed those restrictions. Note this is independent from the colon notation issue mentioned below.   Syntax  element:after  { style properties }  \/* CSS2 syntax *\/  element::after { style properties }  \/* CSS3 syntax *\/ The ::after notation was introduced in CSS 3 in order to establish a discrimination between pseudo-classes and pseudo-elements. Browsers also accept the notation :after introduced in CSS 2. Note:\u00a0 Microsoft Internet Explorer 8 supports the :after notation only. Examples  .boringtext:after {    content:    \" Thank you for reading all this!\";     font-size:  small;     color:      red;    background: gray;  } Specifications  CSS 2.1 Generated Content CSS 2.1 Selectors CSS 3 Selectors Working draft  Browser compatibility    Browser Lowest Version Support of   Internet Explorer 8.0 :after   Firefox (Gecko) 1.0 (1.0) :after   1.0 (1.5) :after | ::after   Opera 4.0 :after   7.0 :after | ::after   Safari (WebKit) 1.0 (85) :after | ::after    See Also :before , content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Abefore","title":":before  | ::before","description":":before creates a pseudo-element that is the first child of the element matched. Often used to add cosmetic content to an element, by using the content  property. This element is inline by default.  Firefox 3.5 noteFirefox prior to version 3.5 only implemented the CSS 2.0 version of :before. Not allowed were position, float, list-style-* and some display properties. Firefox 3.5 removed those restrictions. (Note this is independent from the :: notation issue mentioned below.)   Syntax  element:before  { style properties }  \/* CSS2 syntax *\/  element::before { style properties }  \/* CSS3 syntax *\/  The ::before notation was introduced in CSS 3 in order to establish a discrimination between pseudo-classes and pseudo-elements. Browsers also accept the notation :before introduced in CSS 2. Note:\u00a0 Microsoft Internet Explorer 8 only supports the :before notation. Examples  q:before { content: \"\u00bb\" } q:after { content: '\u00ab' }  <q>Some quotes<\/q>, he said, <q>are better than none<\/q>.  Result:\u00a0 \u00a0 \u00bbSome quotes\u00ab, he said, \u00bbare better than none\u00ab. Notes Although the positioning fixes in Firefox 3.5 do not allow content to be generated as a separate previous sibling (as per the CSS spec stating \"The :before and :after pseudo-elements elements interact with other boxes... as if they were real elements inserted just inside their associated element.\"), they can be used to provide a slight improvement on tableless layouts (e.g., to achieve centering)\u00a0in that, as long as the content to be centered is wrapped in a further child, a column before and after the content can be introduced without adding a previous or following sibling (i.e., it is perhaps more semantically correct to add an additional span as below, than it would to add an empty <div\/> before and after). (And always remember to add a width to a float, since, otherwise, it will not float!) \r           <style type=\"text\/css\">  #floatme {float:left; width:50%;}  .example:before {   content: \"Floated Before\"; \/* To get an empty column, just indicate a hex code for a non-breaking space: \\a0 as the content (use \\0000a0 when following such a space with other characters) *\/   float: left;   width:25% } .example:after {   content: \"Floated After\";   float: right;   width:25% }  \/* For styling *\/ .example:before, .example:after, .first {   background: yellow;   color: red; }   <\/style> <div class=\"example\"> <span id=\"floatme\">\"Floated Before\" should be generated on the left of the  viewport and not allow overflow in this line to flow under it. Likewise  should \"Floated After\" appear on the right of the viewport and not allow this  line to flow under it.<\/span> <\/div>\r          Specifications  CSS 2.1 Generated Content CSS 2.1 Selectors CSS 3 Selectors   Browser compatibility    Browser Lowest Version Support of   Internet Explorer 8.0 :before   Firefox (Gecko) 1.0 (1.0) :before   1.0 (1.5) :before | ::before   Safari (WebKit) 1.0 (85) :before | ::before   Opera 4.0 :before   7.0 :before | ::before    See Also :after , content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3Afirst-letter","title":"::first-letter | :first-letter","description":"The :first-letter CSS pseudo-element selects the first letter of the first line of a block, if it is not preceded by any other content (such as images or inline tables) on its line. Examples \/* make the first letter of every paragraph red and big *\/  p:first-letter  { color: red;  font-size: 130%; } Specifications  CSS 2.1 Selectors #first-letter CSS 3 Selectors #first-letter Working draft  Browser compatibility CSS 3 introduced the ::first-letter notation in order to establish a discrimination between pseudo-classes and pseudo-elements. Don't use the double colon notation yet for compatibility with Internet Explorer.    Browser Lowest Version Support of   Internet Explorer 5.5 :first-letter   Firefox (Gecko) 1.0 (1.0) :first-letter   1.0 (1.5) :first-letter | ::first-letter   Opera 3.5 :first-letter   7.0 :first-letter | ::first-letter   Safari (WebKit) 1.0 :first-letter | ::first-letter    \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3Afirst-line","title":"::first-line | :first-line","description":"The :first-line CSS pseudo-element applies styles to the first line of a element. However, the selector :first-line does not match any real HTML element. Examples  \/* change the letters of the first line of every paragraph to uppercase *\/  p:first-line { text-transform: uppercase }  Browser compatibility    Browser Lowest version Support of   Internet Explorer 5.5 :first-line   Firefox (Gecko) 1.0 (1.0) :first-line   1.0 (1.5) :first-line | ::first-line   Opera 3.5 :first-line   7.0 :first-line | ::first-line   Safari (WebKit) 1.0 (85) :first-line | ::first-line    For compatibility with IE 5.5-8 avoid CSS3 notation ::first-line (use CSS2 notation :first-line). Specifications  CSS 2.1 Selectors #first-line CSS 3 Selectors #first-line Working draft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3Aselection","title":"::-moz-selection | ::selection","description":"The ::-moz-selection (::selection) pseudo-element applies to the portion of a document that has been highlighted (e.g. selected with the mouse) by the user. Examples \/* draw any selected text yellow on red background *\/ ::-moz-selection { color: gold;  background: red; } ::selection      { color: gold;  background: red; }  \/* draw selected text in a paragraph white on black *\/ p::-moz-selection { color: white;  background: black; } p::selection      { color: white;  background: black; } Notes Gecko\/Firefox supports ::-moz-selection, use also ::selection other browsers. The following properties apply to ::-moz-selection : color, background and background-color (background-image is ignored). Specifications ::selection was drafted for CSS3 Selectors but removed from the current CSS3 draft. Anyhow, it's implemented in browsers and support will continue.  CSS 3 Selectors (Draft 2005-12-15) Obsolete CSS 3 Selectors #selection Working draft  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1 1.0 9 9.5 1.1   Element ::selection ::moz-selection\u00a0 -moz ::selection ::selection ::selection         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1 1.0 9 9.5 1.1   Element ::selection ::moz-selection\u00a0 -moz ::selection ::selection ::selection         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3A-moz-progress-bar","title":"::-moz-progress-bar","description":"The ::-moz-progress-bar pseudo-element applies to the area of an HTML\u00a0<progress> \u00a0element that represents the amount of progress that has happened so far. This lets you, for example, change the color of progress bars. You have pretty broad capabilities to style the bar. This can be especially useful with indeterminate bars (via the :indeterminate  pseudo-class), where you may wish to substantially change the default appearance; you can change the width and positioning of the bar, for example. (By which we probably mean the whole element's dimensions and position, not just the painted part of the element, as featured in the screen shot below.) Examples This example styles the progress meter portion of the progress bar with ID\u00a0redbar with the color red. \r           #redbar::-moz-progress-bar {   background-color: red; }\r          A bar using this style might look something like this:  See also  <progress>  See also  <progress>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Pseudo-classes","title":"Pseudo-classes","description":"Pseudo-classes are added to selectors to specify a special state of the selector, for example :hover  which will apply a style when the user hovers over the element specified by the selector. Syntax  selector:pseudo-class { \u00a0 property: value; }   Examples  :link  :visited  :active  :hover  :focus"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Avisited","title":":visited","description":"The :visited pseudo-class lets you select only links that have been visited.   Gecko 2.0 note(Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)   Starting in Firefox 4, major limitations to the styles you can apply using this selector have been introduced. For more information on the limitations and the motivation for them, see Privacy and the :visited selector . The same limitations have been adopted by other browsers, including Safari 5\/4.1 and Chrome 6. Examples  a:visited { color: #4b2f89; } a:visited { background-color:\u00a0white }  Specifications  CSS 2.1 Selectors #link CSS 3 Selectors #links  Browser compatibility    Browser Lowest Version   Internet Explorer 3.5   Firefox 1.0   Opera 3.5   Safari 1.0    See also  Privacy and the :visited selector  :link"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aactive","title":":active","description":"Specifications  CSS 2.1 Selectors #dynamic-pseudo-classes CSS 3 Selectors #useraction-pseudos  Browser compatibility    Browser Lowest Version   Internet Explorer 4.0\u00a0 (only for <a>)   Firefox 1.0   Opera 5.0\u00a0 (only for <a>) 7.0   Safari 1.0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alink","title":":link","description":"The :link pseudo-class lets you select only links that have not yet been visited. Examples a:link {color:slaygrate;} .external:link {background-color:lightblue;} Specifications  CSS 2.1 Selectors #link CSS 3 Selectors #links  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1 1.0 (1.7 or earlier)  3.0 3.5 1.0         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 1.5 1.0 (1.9.2)  ? ? 3.2"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Ahover","title":":hover","description":"The :hover CSS pseudo-class matches when the user designates an element with a pointing device, but does not necessarily activate it. Visual user agents, like Firefox, Internet Explorer, Safari, Opera or Chrome, apply the associated style when the cursor (mouse pointer) hovers over an element. Usage Note: on touch screens :hover is problematic or impossible. The :hover pseudo-class never matches, or matches for a short moment after touching an element. As touchscreen devices are very common, it is important for web developer not to have content accessible only when hovering over it, as this content would be hidden for users of such devices.Examples :link:hover { outline: dotted red; }  .foo:hover { background: gold; } Specifications  CSS 2.1 Selectors #dynamic-pseudo-classes  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   for <a> elements 0.2 1.0 (1.7 or earlier)  4.0 4.0 2.0.4 (419) various bugs before   for all elements 0.2 1.0 (1.7 or earlier)  7.0 7.0 2.0.4 (419) various bugs before         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afocus","title":":focus","description":"Specifications  CSS 2.1 Selectors #dynamic-pseudo-classes CSS 3 Selectors #useraction-pseudos  Browser compatibility    Browser Lowest Version   Internet Explorer 8.0   Firefox 1.0   Opera 7.0   Safari (1.0 ?)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alang","title":":lang","description":"The :lang(language-code pseudo-class matches elements based on the langauge the element is determined to be in. In HTML, the language is determined by a combination of the lang attribute, the <meta>  element, and possibly by information from the protocol (such as HTTP headers). For other document types there may be other document methods for determining the language. Acceptable language-code strings are specified in in HTML 4.0 specification.Syntax  element:lang(language-code) { style properties }  Examples In this example, the lang selector is used to match on the parent of a quote element using child selectors. Its not meant to demonstrate the only way to do this, or even the correct way (which would depend on the type of document). Note, Unicode values are used to specify special quote characters. \r           :lang(en) > Q { quotes: '\\201C' '\\201D' '\\2018' '\\2019'; } :lang(fr) > Q { quotes: '\u00ab ' ' \u00bb'; } :lang(de) > Q { quotes: '\u00bb' '\u00ab' '\\2039' '\\203A'; }\r          ...where... \r           <div lang=\"fr\"><q>This French quote has a <q>nested<\/q> quote.<\/q><\/div>   <div lang=\"de\"><q>This German quote has a <q>nested<\/q> quote.<\/q><\/div>   <div lang=\"en\"><q>This English quote has a <q>nested<\/q> quote.<\/q><\/div>\r          ... should look like ...  \u00abThis French quote has a \u00abnested\u00bb quote.\u00bb \u00bbThis German quote has a \u2039nested\u203a quote.\u00ab \u201cThis English quote has a \u2018nested\u2019 quote.\u201d Browser compatibility    Browser lowest version   Internet Explorer 8.0   Firefox (Gecko) 1.0 (1.2)   Opera 8.0   Safari (WebKit) 3.1 (525)    Related Pages  Language Property  External References  W3C CSS2: lang W3C HTML4: Language codes W3C DOM Level 2 HTML: lang"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anot","title":":not()","description":"The negation pseudo-class, :not(X), is a functional notation taking a simple selector X as an argument. It matches an element that is not represented by the argument. X must not contain another negation selector, or any pseudo-elements. The specificity of the :not pseudo-class is the specificity of its argument. The :not pseudo-class does not add to the selector specificity, unlike other pseudo-classes. Notes:  Useless selectors can be written using this pseudo-class. E.g. :not(*) matching any element which is not any element will never be applied. It is possible to rewrite other rules. E.g. foo:not(bar)will match the same element than the simple foo. Nevertheless the specificity of the first one is higher.  Syntax  :not(selector) { style properties } Examples Usage Example  p:not(.classy) { color: red; } :not(p) { color: green; } ...where...  <p>Some text.<\/p> <p class=\"classy\">Some other text.<\/p> <span>One more text<span>  ...should look like... Some text. Some other text. One more text Usage Example  p:not(.classy) { color: red; } :not(p) { color: green; } ...where...  <p>Some text.<\/p> <p class=\"classy\">Some other text.<\/p> <span>One more text<span>  ...should look like... Some text. Some other text. One more text Specifications  CSS 3 Selectors #negation    Browser compatibility    Browser Lowest Version   Internet Explorer 9.0   Firefox (Gecko) 1.0 (1.0)   Opera 9.5   Safari (WebKit) 1.0 (85)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afirst","title":":first","description":"The :first page pseudo-class describes the styling of the first page when printing a document. Note: you can not change all CSS properties. You can only change the margins, orphans, widows, and page breaks of the document. All other CSS properties will be ignored.Examples  @page :first { \u00a0 margin:2in 3in; }   Note: you may only use the absolute length units when defining the margin. Please see the page about length for more information. Specifications CSS 2.1 Paged media #page-selectors Browser compatibility    Browser Lowest Version   Internet Explorer   8.0   Firefox (Gecko) ---   Opera   9.2   Safari (WebKit) ---   See also  @page  :left  :right"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aleft","title":":left","description":"The :left page pseudo-class matches any left page when printing a page. It allows to describe the styling of left-side pages. Whether the page is left or right is decided by the major writing direction of the document. For example, if the first page has a major writing direction of left-to-right then it will be a :right page and if it has a major writing direction of right-to-left then it will be a :left page. Note: You can't change all CSS properties. You can only change the the margin, padding, border, and background properties of the page box. All other CSS properties will be ignored, and only the page box, not the document content on the page, will be affected. Examples  @page :left { \u00a0 margin:2in 3in; }   Specifications CSS 2.1 Paged media #page-selectors Browser compatibility     Desktop Mobile       Feature Gecko Webkit Internet Explorer Opera   Basic support -- ? 8 9.2     See also  @page  :first  :right"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aright","title":":right","description":"The :right page pseudo-class matches any right page when printing a page. It allows to describe the styling of right-side page. Whether the page is left or right is decided by the major writing direction of the document. For example, if the first page has a major writing direction of left-to-right then it will be a :right page and if it has a major writing direction of right-to-left then it will be a :left page. Note: You can't change all CSS properties. You can only change the the margin, padding, border, and background properties of the page box. All other CSS properties will be ignored, and only the page box, not the document content on the page, will be affected.Examples \r           @page :right {   margin: 2in 3in; }\r          Specifications CSS 2.1 Paged media #page-selectors Browser compatibility    Browser Lowest Version   Internet Explorer   8.0   Firefox (Gecko) ---   Opera   9.2   Safari (WebKit) ---   See also  @page  :first  :left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aroot","title":":root","description":"The :root pseudo-class matches the root element of a tree representing the document. In HTML, :root represents the <html>  element and is identical to the selector html, except that its specifity is higher.Specifications  CSS 3 Selectors #root-pseudo  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1 1.0 (1.7)  9 9.5 1.0         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-child","title":":nth-child","description":"The :nth-child pseudo-class matches an element that has an+b-1 siblings before it in the document tree, for a given positive or zero value for n, and has a parent element. This can more clearly be described this way: the matching element is the bth child of an element after all its children have been split into groups of a elements each. The values a and b must both be integers, and the index of an element's first child is 1. Among other things, this allows selectors to match every other row in a table.Syntax  element:nth-child(an + b) { style properties }  Examples Example selectors  tr:nth-child(2n+1) Represents the odd rows of an HTML table. tr:nth-child(odd) Represents the odd rows of an HTML table. tr:nth-child(2n) Represents the even rows of an HTML table. tr:nth-child(even) Represents the even rows of an HTML table. span:nth-child(0n+1) Represents a span element which is the first child of its parent; this is the same as the :first-child  selector. span:nth-child(1) Equivalent to the above.   span:nth-child(-n+3) Three first span elements.  Usage example \r           span:nth-child(2n+1) {     background-color: lime; }\r          ...where... \r           <div>     <span>This span is limed!<\/span>     <span>This span is not. :(<\/span>     <span>But this one is!<\/span>     <span>Sadly, this one is not...<\/span>   <\/div>\r          ... should look like ...      This span is limed!    This span is not.\u00a0:(    But this one is!    Sadly, this one is not...   Example selectors  tr:nth-child(2n+1) Represents the odd rows of an HTML table. tr:nth-child(odd) Represents the odd rows of an HTML table. tr:nth-child(2n) Represents the even rows of an HTML table. tr:nth-child(even) Represents the even rows of an HTML table. span:nth-child(0n+1) Represents a span element which is the first child of its parent; this is the same as the :first-child  selector. span:nth-child(1) Equivalent to the above.   span:nth-child(-n+3) Three first span elements.  Usage example \r           span:nth-child(2n+1) {     background-color: lime; }\r          ...where... \r           <div>     <span>This span is limed!<\/span>     <span>This span is not. :(<\/span>     <span>But this one is!<\/span>     <span>Sadly, this one is not...<\/span>   <\/div>\r          ... should look like ...      This span is limed!    This span is not.\u00a0:(    But this one is!    Sadly, this one is not...   Specifications  CSS3\u00a0  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 4.0 3.5 (1.9.1)  9 10.10 4         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Notes  Opera can't handle dynamic insertion of elements."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-last-child","title":":nth-last-child","description":"The :nth-last-child pseudo-class matches an element that has an+b-1 siblings after it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child  for a more thorough description of the syntax of its argument.Syntax element:nth-last-child(an + b) { style properties }  Examples Example selectors tr:nth-last-child(-n+4) Matches the last four rows of an HTML table. span:nth-last-child(even) Matches the even elements in their parent element, starting at the last element and working backward.  Example selectors tr:nth-last-child(-n+4) Matches the last four rows of an HTML table. span:nth-last-child(even) Matches the even elements in their parent element, starting at the last element and working backward.  See also  :nth-child  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-of-type","title":":nth-of-type","description":"The :nth-of-type pseudo-class matches an element that has an+b-1 siblings with the same element name before it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child  for a more thorough description of the syntax of its argument.Syntax element:nth-of-type(an + b) { style properties }  Examples Example This example causes the positions of floated images to alternate between right and left. \r           img:nth-of-type(2n+1) { float: right; } img:nth-of-type(2n) { float: left; }\r          Example This example causes the positions of floated images to alternate between right and left. \r           img:nth-of-type(2n+1) { float: right; } img:nth-of-type(2n) { float: left; }\r          See also  :nth-child  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-last-of-type","title":":nth-last-of-type","description":"The :nth-last-of-type pseudo-class matches an element that has an+b-1 siblings with the same element name after it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child  for a more thorough description of the syntax of its argument.Syntax element:nth-last-of-type(an + b) { style properties }  See also  :last-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afirst-child","title":":first-child","description":"The :first-child pseudo-class represents any element that is the first child element of its parent.Syntax  element:first-child { style properties }  Examples \r           span:first-child {     background-color: lime; }\r          ...where... \r           <div>     <span>This span is limed!<\/span>     <span>This span is not. :(<\/span>   <\/div>\r          ... should look like ...  This span is limed! This span is not.\u00a0:( Specifications  Selectors Level 3  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 4.0 3.0 (1.9)  7 9.5 4         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1.9.1)  7 10.0 3.1    Notes  In Internet Explorer 8, if a element is inserted dynamically by clicking on a link the first-child style isn't applied until the link loses focus."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alast-child","title":":last-child","description":"The :last-child pseudo-class represents any element that is the last child element of its parent.Syntax element:last-child { style properties }  \u00a0\u00a0 Examples \r           span:last-child {     background-color: lime; }\r          ...where... \r           <div>     <span>This span is not limed.<\/span>     <span>This span is! :)<\/span>   <\/div>\r          ... should look like ...  This span is not limed. This span is!\u00a0:) Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afirst-of-type","title":":first-of-type","description":"The :first-of-type pseudo-class represents the first sibling of the given type in the list of children of its parent element.Syntax element:first-of-type { style properties }  Example To match the first data cell in a table row, you can use this: \r           tr > td:first-of-type\r          See also  :nth-of-type  :last-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aonly-child","title":":only-child","description":"The :only-child pseudo-class represents any element which is the only child of its parent.Syntax  parent child:only-child { \u00a0\u00a0\u00a0 property:value; }   Examples \r           div span:only-child {     color:red; }\r          \r           <div>     <span>Some red text<\/span> <\/div>  <div>     <span>Some regular text<\/span>     <span>Some regular text<\/span> <\/div>\r          Result Some red textSome regular text Some regular text Result Some red textSome regular text Some regular text Specifications    CSS3  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 2 1.5 (1.8)  9 9.5 3.1         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 2.1 1.0 (1.8)  9 10.0 3.1"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alast-of-type","title":":last-of-type","description":"The :last-of-type pseudo-class represents the last sibling of the given type in the list of children of its parent element.Syntax element:last-of-type { style properties }  Example To match the last data cell in a table row, you can use this: \r           tr > td:last-of-type\r          See also  :nth-last-of-type  :first-of-type  :nth-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aonly-of-type","title":":only-of-type","description":"The :only-of-type pseudo-class represents any element that have no siblings of the given type. Syntax element:only-of-type { style properties }  See also  :nth-of-type  :first-of-type  :last-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aempty","title":":empty","description":"The :empty pseudo-class represents any element that has no children at all. Only element nodes and text (including whitespace) are considered. Comments or processing instructions do not affect whether an element is considered empty or not.Syntax  span:empty { style properties }  Examples \r           span:empty::before  { background-color: lime; }\r          ...where... \r           <span><\/span>\r          Specifications  CSS3 Selectors #empty-pseudo\u00a0  Browser compatibility    Browser Lowest Version   Internet Explorer ---   Firefox (Gecko) 1.5 (1.8)   Opera 9.5   Safari (WebKit) 3.1 (525), very buggy before"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Atarget","title":":target","description":"The :target pseudo-class represents the unique element, if any, with an id matching the fragment identifier of the URI of the document.. URIs with fragment identifiers link to a certain element within the document, known as the target element. For instance, here is a URI pointing to an anchor named section2: \u00a0 http:\/\/example.com\/folder\/document.html#section2 The anchor can be any element with an id attribute, e.g. <h1 id=\"section2\"> in our example. The target element h1 can be represented by the :target pseudo-class.Examples  :target { outline: solid red }  \/* draw a red, solid line around the target element *\/   \/* example code for userContent.css or any web pages;    a red\/yellow arrow indicates the target element *\/    :target {      -moz-box-shadow:  0.2em 0.2em 0.3em #888;  -webkit-box-shadow:  0.2em 0.2em 0.3em #888; }  :target:before { \u00a0 font:           70% Arial,\"Nimbus Sans L\",sans-serif !important; \u00a0 content:        \"\\25ba\";  \/* \u25ba *\/ \u00a0 color:          red;  \u00a0background:     gold; \u00a0 border:         solid thin;  \u00a0padding-left:   1px;  \u00a0display:        inline-block;  \u00a0margin-right:   0.13em;  \u00a0vertical-align: 20%; }  Note The id attribute was new in HTML 4 (December 1997).\u00a0 In old-style HTML <a name=\"foo\"> is a target element.\u00a0 The :target pseudo-class applies to those targets as well. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ?  (1.3)  9 9.5 1.3         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?      Specifications  CSS 3 Selectors #:target Proposed Recommendation  See also Using the :target selectorBrowser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ?  (1.3)  9 9.5 1.3         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?      Specifications  CSS 3 Selectors #:target Proposed Recommendation  See also Using the :target selectorSpecifications  CSS 3 Selectors #:target Proposed Recommendation  See also Using the :target selector"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Achecked","title":":checked","description":"The :checked pseudo-class selector represents any radio (<input type=\"radio\">) or checkbox (<option>  in a <select> ) element that is checked or toggled to an on state. The user can change this state by clicking on the element, or selecting a different value, in which case the :checked pseudo-class no longer applies to this element, but will to the relevant one.Syntax\u00a0  element:checked { style properties } Examples Example selectors  input[type=\"radio\"]:checked  Represents all radio buttons on the page that are checked input[type=\"checkbox\"]:checked Represents all checkboxes on the page that are checked  Example selectors  input[type=\"radio\"]:checked  Represents all radio buttons on the page that are checked input[type=\"checkbox\"]:checked Represents all checkboxes on the page that are checked  Specifications  CSS3 Selectors :checked Proposed Recommendation WHATWG web-forms  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 1.0 (1.7 or earlier)  9 9.0 ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 1.0 (1.7 or earlier)  9 9.0 ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Adefault","title":":default","description":"The :default pseudo-class represents any user interface element that is the default among a group of similar elements. For example, the default button in a set of buttons could be selected using this pseudo-class. User interface elements that permit multiple selections may have multiple defaults set in order to initially appear with multiple items selected. In that case all defaults can be represented using the :default pseudo-class.Syntax :default { style properties }  Examples \r           :default {     background-color: lime; }\r          ...where... \r           <form method=\"get\">   <p><input type=\"submit\" id=\"submit1\"><\/p>   <p><input type=\"submit\" id=\"submit2\"><\/p>   <p><input type=\"reset\"><\/p>  <\/form>\r          This example causes the background color to be lime for the default submit button in the form. Specification  CSS3 Basic User Interface Module:\u00a0:default Web Forms 2.0: Relation to CSS selectors"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aenabled","title":":enabled","description":"Specifications  CSS3 Selectors enabled disabled WHATWG web-forms  Browser compatibility    Browser Lowest Version   Internet Explorer ?   Firefox ?   Opera ?   Safari ?    \u00a0 \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aindeterminate","title":":indeterminate","description":"The :indeterminate CSS pseudo-class represents any <input type=\"checkbox\"> element whose indeterminate DOM property is set to true by JavaScript. In addition, in some browsers, it can be used to match to <progress> \u00a0elements in an indeterminate state.Examples W3C CSS3 Selectors test#177  <style>        input, span { background: red }        :indeterminate, :indeterminate + span { background: limegreen } <\/style>  <p><input type=checkbox> <span>Everything in this paragraph should have a green background.<\/span><\/p>  <script> document.getElementsByTagName(\"input\")[0].indeterminate = true; <\/script>  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Checkboxes (Supported) 3.6 (1.9.2)  9.0 10.60 (2.6) 3.0   <progress>  ? 6.0 (6.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Checkboxes ? 1.0 (1.9.2)  ? ? ?   <progress>  ? 6.0 (6.0)  ? ? ?     Specifications  CSS 3 Selectors #indeterminate Working draft HTML 5 Interactive elements #selector-indeterminate HTML 5 Forms #checkbox-state  See also  Web Tech Blog - A new checkbox type"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Adisabled","title":":disabled","description":"The :disabled pseudo-class represents any disabled element. An element is disabled if it can't be activated (e.g. selected, clicked on or accept text input) or accept focus. The element also has an enabled state, in which it can be activated or accept focus.Examples Example selectors  input:disabled Selects all disabled inputs select.country:disabled Targets a select element with class country that is disabled  Usage example The following CSS: .input[type=\"text\"]:disabled {background:#ccc}  applied to this HTML5 fragment:  <form action=\"#\"> \u00a0\u00a0<fieldset> \u00a0\u00a0\u00a0\u00a0<legend>Shipping address<\/legend> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_firstName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_lastName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_address1\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_address2\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_zipCode\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_town\" disabled> \u00a0\u00a0<\/fieldset> \u00a0\u00a0<fieldset> \u00a0\u00a0\u00a0\u00a0<legend>Billing address<\/legend> \u00a0\u00a0\u00a0\u00a0<label> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input type=\"checkbox\" name=\"billing_is_shipping\" value=\"true\" checked>  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Billing address is the same as shipping address \u00a0\u00a0\u00a0\u00a0<\/label> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_firstName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_lastName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_address1\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_address2\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_zipCode\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_town\" disabled> \u00a0\u00a0<\/fieldset> <\/form> Will result in all text elements in the billing fieldset having a light grey background. Example selectors  input:disabled Selects all disabled inputs select.country:disabled Targets a select element with class country that is disabled  Usage example The following CSS: .input[type=\"text\"]:disabled {background:#ccc}  applied to this HTML5 fragment:  <form action=\"#\"> \u00a0\u00a0<fieldset> \u00a0\u00a0\u00a0\u00a0<legend>Shipping address<\/legend> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_firstName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_lastName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_address1\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_address2\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_zipCode\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"shipping_town\" disabled> \u00a0\u00a0<\/fieldset> \u00a0\u00a0<fieldset> \u00a0\u00a0\u00a0\u00a0<legend>Billing address<\/legend> \u00a0\u00a0\u00a0\u00a0<label> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input type=\"checkbox\" name=\"billing_is_shipping\" value=\"true\" checked>  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Billing address is the same as shipping address \u00a0\u00a0\u00a0\u00a0<\/label> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_firstName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_lastName\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_address1\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_address2\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_zipCode\" disabled> \u00a0\u00a0\u00a0\u00a0<input type=\"text\" name=\"billing_town\" disabled> \u00a0\u00a0<\/fieldset> <\/form> Will result in all text elements in the billing fieldset having a light grey background. Specifications  CSS3 Selectors :enabled :disabled Proposed Recommendation WHATWG web-forms  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 1.0 (1.7 or earlier)  9 9.0 ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 1.0 (1.7 or earlier)  9 9.0 ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aoptional","title":":optional","description":"The :optional CSS pseudo-class represents any <input> \u00a0element that does not have the   required  attribute set on it. This allows forms to easily indicate optional fields, and to style them accordingly. To provide an appearance for required form fields, the :required  pseudo-class may be used.Browser compatibility     Desktop Mobile       Feature Firefox Chrome Internet Explorer Safari Opera   Basic support 4 8 -- 5 9.5    Specifications  CSS 3 Basic User Interface Module  See also  :required  :invalid  :valid"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Ainvalid","title":":invalid","description":"The :invalid pseudo-class represents any <input> \u00a0element whose content fails to validate according to the input's type setting. This allows you to easily have invalid fields adopt an appearance that helps the user identify and correct errors. By default, Gecko does not apply a style to the :invalid pseudo-class. However it does apply a style (a red \"glow\" using the box-shadow  property) to the :-moz-ui-invalid  pseudo-class, which applies in a subset of cases for :invalid. You can disable the glow using the following CSS, or completely override it to alter the appearance of invalid fields. \r           :invalid {   box-shadow: none; }  :-moz-submit-invalid {   box-shadow: none; }  :-moz-ui-invalid {   box-shadow:none; }\r          Notes Radio buttons If any of the radio buttons in a group (that is, with the same value for their name attribute) is required, the :invalid pseudo-class is applied to all of them if none of the buttons in the group are selected. Radio buttons If any of the radio buttons in a group (that is, with the same value for their name attribute) is required, the :invalid pseudo-class is applied to all of them if none of the buttons in the group are selected. Examples This example presents a simple form that colors elements green when they validate and red when they don't. \r           <style type=\"text\/css\">   :invalid {     background-color: #ffdddd;   }      :valid {     background-color: #ddffdd;   }      :required {     border-color: #800000;     border-width: 3px;   } <\/style>  <form>   <label>Enter a URL:<\/label>   <input type=\"url\" \/>   <br \/>   <br \/>   <label>Enter an email address:<\/label>   <input type=\"email\" required\/> <\/form>\r          View this sample live. Browser compatibility    Browser Lowest version   Internet Explorer ---   Firefox (Gecko) 4.0 (2.0)   Opera 9.5    Safari | Chrome | WebKit   5 | 8 | 534.10     Specifications  CSS 3 Basic User Interface Module  See also  :valid  :-moz-submit-invalid  :required  :optional"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Arequired","title":":required","description":"The :required CSS pseudo-class represents any <input> \u00a0element that has the   required  attribute set on it. This allows forms to easily indicate which fields must have valid data before the form can be submitted. The :optional  pseudo-class may be used to provide an appearance for optional form fields. Examples See :invalid  for an example. Browser compatibility    Browser Lowest version   Internet Explorer ---   Firefox (Gecko) 4.0 (2.0)   Opera 9.5    Safari | Chrome | WebKit   5 | 8 | 534.10     Specifications  CSS 3 Basic User Interface Module  See also  :optional  :invalid  :valid"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Avalid","title":":valid","description":"The :valid CSS pseudo-class represents any <input> \u00a0element whose content validates correctly according to the input's type setting. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.Examples See :invalid  for an example. Browser compatibility    Browser Lowest version   Internet Explorer ---   Firefox (Gecko) 4.0 (2.0)   Opera 9.5    Safari | Chrome | WebKit   5 | 8 | 534.10     Specifications  CSS 3 Basic User Interface Module  See also  :invalid  :required  :optional"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@charset","title":"@charset","description":"The @charset CSS at-rule specifies the character encoding used in the style sheet. It must be the first element in the style sheet and not be preceded by any character. If several @charset at-rules are defined, only the first one is used, and it cannot be used inside a style attribute on an HTML element or inside the <style>  element where the character set of the HTML page is relevant. This at-rule is useful when using non-ASCII characters in some CSS properties, like content . As there are several ways to define the character encoding of a style sheet, the browser will try the following methods in the following order (and stop as soon as one yields a result) :  The value given by the charset attribute of the Content-Type: HTTP header or the equivalent in the protocol used to serve the style sheet. The value of the Unicode byte-order character placed at the beginning of the file. The @charset CSS at-rule. Use the character encoding defined by the referring document: the charset attribute of the <link>  element. This method is obsoleted in HTML5 and must not be used. Assume that the document is UTF-8.  Syntax @charset charset;  where :  charset Is a <string>   denoting the character encoding to be used. It must be the name of a web-safe character encoding defined in the IANA-registry. If several names are associated with an encoding, only the one marked with\u00a0preferred must be used.  Examples @charset \"UTF-8\";\u00a0\u00a0\u00a0\u00a0\u00a0  \/\/ Set the encoding of the style sheet to Unicode UTF-8 @charset 'iso-8859-15'; \/\/ Set the encoding of the style sheet to Latin-9 (Western European languages, with euro sign)  @charset \"UTF-8\";      \/\/ Invalid, there is a character before the at-rule @charset UTF-8;         \/\/ Invalid, without ' or \", the charset is not a CSS <string>  Specifications    Specification Status Comment     CSS\u00a0Level\u00a02 (Revision\u00a01) Recommendation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 2.0 1.5 (1.8) [*] 5.5 [**] [1] 9 4         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 2.1 1.0 (1.8)  5.5 [**] [2] 10.0 4     [*] Firefox 1.0 supported only an invalid syntax where the character encoding is not set between single or double quotes. [**] From IE 5.5 to IE 7 included, IE also supported the invalid syntax where the character encoding is not set between single or double quotes. See also  CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@import","title":"@import","description":"The @import CSS at-rule allows to import style rules from other style sheets. These rules must precede all other types of rules, except @charset  rules. So that user agents can avoid retrieving resources for unsupported media types, authors may specify media-dependent @import rules. These conditional imports specify comma-separated media queries after the URI. In the absence of any media query, the import is unconditional. Specifying all for the medium has the same effect.Syntax @import url;                      or @import url list-of-media-queries;  where :  url Is a <string>   or a <uri>  representing the location of the resource to import. The url may be an absolute or relative url. list-of-media-queries Is a comma-separated list of media queries conditioning the application of the css rules defined in the linked url. If the browser doesn't support any of these media types, it won't even load the linked resource. Examples  @import url(\"fineprint.css\") print; @import url(\"bluish.css\") projection, tv; @import 'custom.css'; @import \"common.css\" screen, projection; @import url('landscape.css') screen and (orientation:landscape);  Specifications    Specification Status Comment     Media Queries Candidate Recommandation  Extended the syntax to support any media query and not only simple media types.   CSS\u00a0Level\u00a02 (Revision\u00a01) Recommendation  Added support for <string>   to denote the url of a stylesheet, and requirement to insert the @import rule at the beginning of the CSS document.   CSS\u00a0Level\u00a01 Recommendation  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) (Supported) 5.5 [1] (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Supported) (Supported) 5.5 [2] (Supported) (Supported)     See also  CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@font-face","title":"@font-face","description":"@font-face allows authors to specify online fonts to display text on their web pages. By allowing authors to provide their own fonts, @font-face eliminates the need to depend on the limited number of fonts users have installed on their computers. Syntax  @font-face {   font-family: <a-remote-font-name>;   src: <source> [,<source>]*; \u00a0 [font-weight:\u00a0<weight>]; \u00a0 [font-style:\u00a0<style>]; }  Values  <a-remote-font-name>\u00a0 Specifies a font name that will be used as font face value for font properties. <source>\u00a0 URL for the remote font file location, or the name of a font on the user's computer in the form local(\"Font Name\"). <weight>\u00a0 A font weight value. <style>\u00a0 A font style value.  You can specify a font on the user's local computer by name using the local()\u00a0syntax. If that font isn't found, other sources will be tried until one is found. Examples This example simply specifies a downloadable font to use, applying it to the entire body of the document. View live sample  <html> <head>   <title>Web Font Sample<\/title>   <style type=\"text\/css\" media=\"screen, print\">     @font-face {       font-family: \"Bitstream Vera Serif Bold\";       src: url(\"http:\/\/developer.mozilla.org\/@api\/deki\/files\/2934\/=VeraSeBd.ttf\");     }          body { font-family: \"Bitstream Vera Serif Bold\", serif }   <\/style> <\/head> <body>   This is Bitstream Vera Serif Bold. <\/body> <\/html>  In this example, the user's local copy of \"Helvetica Neue Bold\"\u00a0is used; if the user doesn't have that font installed (two different names are tried), then the downloadable font named \"MgOpenModernaBold.ttf\" is used instead: \r           @font-face {   font-family: MyHelvetica;   src: local(\"Helvetica Neue Bold\"),   local(\"HelveticaNeue-Bold\"),   url(MgOpenModernaBold.ttf);   font-weight: bold; }\r          Notes  In Gecko, web fonts are subject to the same domain restriction (font files must be on the same domain as the page using them), unless HTTP\u00a0access controls are used to relax this restriction.  Note: Because there are no defined MIME types for TrueType, OpenType, and WOFF fonts, the MIME type of the file specified is not considered.  When Gecko displays a page that uses web fonts, it initially displays text using the best CSS\u00a0fallback font available on the user's computer while it waits for the web font to finish downloading.\u00a0 As each web font finishes downloading, Gecko updates the text that uses that font.\u00a0 This allows the user to read the text on the page more quickly.  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 (1.9.1)  4.0 4.0 10.0 3.1   WOFF 3.5 (1.9.1)  6.0 9.0 11.10 5.1   SVG Font --  Unimplemented (see  bug 119490 )  yes -- yes yes         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mini Opera Mobile Safari Mobile   Basic support (Supported) 1.0 (1.9.1)  ? -- 10.0 (Supported)   WOFF -- 5.0 (5.0)  ? -- 11.0 --   SVG fonts -- --  Unimplemented (see  bug 119490 )  ? -- 10.0 (Supported)     Notes  Support of the Embedded OpenType font format is not included in the compatibility table because it is a proprietary feature. Prior to IE 9.0, IE supported only this format. TrueType and OpenType are not included because they are superseded by WOFF. Notes  Support of the Embedded OpenType font format is not included in the compatibility table because it is a proprietary feature. Prior to IE 9.0, IE supported only this format. TrueType and OpenType are not included because they are superseded by WOFF. Specifications  CSS 2 Fonts 1998-05-12 Obsolete CSS Fonts Module Level 3 2011 Working draft WOFF File Format 1.0 2011 Candidate Recommendation  See also  CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page.  font , font-family , font-size , font-size-adjust , font-stretch , font-style , font-variant , font-weight , @font-face   FontSquirrel @font-face generator About WOFF Beautiful fonts with @font-face Open\u00a0Font Library MSDN Microsoft library @font-face When can I use WOFF?When can I use SVG Fonts?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@keyframes","title":"@keyframes","description":"@keyframes lets authors control the intermediate steps in a CSS animation sequence by establishing keyframes (or waypoints) along the animation sequence that must be reached by certain points during the animation. This gives you more specific control over the intermediate steps of the animation sequence than you get when letting the browser handle everything automatically. To use keyframes, you create a @keyframes rule with a name that is then used by the animation-name  property to match an animation to its keyframe list. Each @keyframes rule contains a style list of keyframe selectors, each of which is comprised of a percentage along the animation at which the keyframe occurs as well as a block containing the style information for that keyframe. You can list the keyframes in any order; they will be handled in the order in which their specified percentages indicate they should occur. Valid keyframe lists In order for a keyframe list to be valid, it must include rules for at least the times 0% (or from) and 100% (or to) (that is, the starting and ending states of the animation). If both of these time offsets aren't specified, the keyframe declaration is invalid and can't be used for animation. If you include properties that can't be animated in your keyframe rules, they get ignored, but the supported properties will still be animated. Duplicate resolution If multiple keyframe sets exist for a given name, the last one encountered is used. @keyframes rules don't cascade, so animations never drive keyframes from more than one rule set. If a given animation time offset is duplicated, the last keyframe in the @keyframes rule for that percentage is used for that frame. There's no cascading within a @keyframes rule if multiple keyframes specify the same percentage values. When properties are left out of some keyframes Any properties that you don't specify in every keyframe are interpolated (with the exception of those that can't be interpolated, which are instead dropped from the animation entirely). For example: \r           @keyframes identifier {   0% { top: 0; left: 0; }   30% { top: 50px; }   68%, 72% { left: 50px; }   100% { top: 100px; left: 100%; } }\r          Here, the top  property animates using the 0%, 30%, and 100% keyframes, and left  animates using the 0%, 70%, and 100% keyframes. Only properties that are specified in both the 0% and 100% keyframes will be animated; any property not included in both of those keyframes will retain their starting value for the duration of the animation sequence. Valid keyframe lists In order for a keyframe list to be valid, it must include rules for at least the times 0% (or from) and 100% (or to) (that is, the starting and ending states of the animation). If both of these time offsets aren't specified, the keyframe declaration is invalid and can't be used for animation. If you include properties that can't be animated in your keyframe rules, they get ignored, but the supported properties will still be animated. Duplicate resolution If multiple keyframe sets exist for a given name, the last one encountered is used. @keyframes rules don't cascade, so animations never drive keyframes from more than one rule set. If a given animation time offset is duplicated, the last keyframe in the @keyframes rule for that percentage is used for that frame. There's no cascading within a @keyframes rule if multiple keyframes specify the same percentage values. When properties are left out of some keyframes Any properties that you don't specify in every keyframe are interpolated (with the exception of those that can't be interpolated, which are instead dropped from the animation entirely). For example: \r           @keyframes identifier {   0% { top: 0; left: 0; }   30% { top: 50px; }   68%, 72% { left: 50px; }   100% { top: 100px; left: 100%; } }\r          Here, the top  property animates using the 0%, 30%, and 100% keyframes, and left  animates using the 0%, 70%, and 100% keyframes. Only properties that are specified in both the 0% and 100% keyframes will be animated; any property not included in both of those keyframes will retain their starting value for the duration of the animation sequence. Syntax @keyframes <identifier> {   [ [ from | to | <percentage> ] [, from | to | <percentage> ]* block ]* }  Values  <identifier> A name identifying the keyframe list. This must match the identifier production in CSS syntax. from A starting offset of 0%. to An ending offset of 100%. <percentage>  A percentage of the time through the animation sequence at which the specified keyframe should occur.  Values  <identifier> A name identifying the keyframe list. This must match the identifier production in CSS syntax. from A starting offset of 0%. to An ending offset of 100%. <percentage>  A percentage of the time through the animation sequence at which the specified keyframe should occur.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: KeyframesWD  See also  CSS animations CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page. AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@media","title":"@media","description":"@media specifies the target media types (separated by commas) of a set of rules (delimited by curly braces). Syntax  @media <media types> {   \/* media-specific rules *\/ }  Media types Note: Firefox currently only implements the print and screen media types.\u00a0 The FullerScreen extension enables support for the projection media type.  all Suitable for all devices. braille Intended for braille tactile feedback devices. embossed Intended for paged braille printers. handheld Intended for handheld devices (typically small screen, limited bandwidth). print Intended for paged material and for documents viewed on screen in print preview mode. Please consult the section on paged media, and the media section of the Getting Started tutorial for information about formatting issues that are specific to paged media. projection Intended for projected presentations, for example projectors. Please consult the section on paged media for information about formatting issues that are specific to paged media. screen Intended primarily for color computer screens. speech Intended for speech synthesizers. Note: CSS2 had a similar media type called 'aural' for this purpose. See the appendix on aural style sheets for details. tty Intended for media using a fixed-pitch character grid (such as teletypes, terminals, or portable devices with limited display capabilities). Authors should not use pixel units with the \"tty\" media type. tv Intended for television-type devices (low resolution, color, limited-scrollability screens, sound available).  Media groups Media types are also part of different Media Groups. The following table indicates which types are in which group.    \u00a0 Groups   Type continuous paged visual audio speech tactile grid bitmap interactive static   braille X \u00a0 \u00a0 \u00a0 \u00a0 X X \u00a0 X X   embossed \u00a0 X \u00a0 \u00a0 \u00a0 X X \u00a0 \u00a0 X   handheld X X X X X \u00a0 X X X X   print \u00a0 X X \u00a0 \u00a0 \u00a0 \u00a0 X \u00a0 X   projection \u00a0 X X \u00a0 \u00a0 \u00a0 \u00a0 X X \u00a0   screen X \u00a0 X X \u00a0 \u00a0 \u00a0 X X X   speech X \u00a0 \u00a0 \u00a0 X \u00a0 \u00a0 \u00a0 X X   tty X \u00a0 X \u00a0 \u00a0 \u00a0 X \u00a0 X X   tv X X X X \u00a0 \u00a0 \u00a0 X X X    Examples @media print {   body { font-size: 10pt } } @media screen {   body { font-size: 13px } } @media screen, print {   body { line-height: 1.2 } }  Notes A multimodal media type is still only one media type. The 'tv' media type, for example, is a multimodal media type that renders both visually and aurally to a single canvas. Specifications  CSS 2.1  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7)  9.0 9.2 1.3         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 1.0 1.0 (1.7)  9.0 9.0 3.1     See also  Media queries CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Comments","title":"Comments","description":"Comments are used to add explanatory notes or prevent the browser from interpreting parts of the stylesheet. Syntax  \/* Comment *\/ Examples \r           \/* A single line comment *\/  \/* A comment which stretches over several lines *\/\r          Notes The \/* *\/ comment syntax is used for both single and multi line comments. There is no other way to specify comments in external stylesheets. However, when using the <style> element, you may use <!-- --> to hide CSS from older browsers, although this is not recommended. As in most programming languages that use the \/* *\/ comment syntax, comments cannot be nested. In other words, the first instance of *\/ that follows an instance of \/* closes the comment. Specifications  CSS 2.1 Syntax and basic data types #comments"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@page","title":"@page","description":"The @page rule is used to modify some CSS properties when printing a document. Note: you can not change all CSS properties. You can only change the margins, orphans, widows, and page breaks of the document. All other CSS properties will be ignored. Syntax  @page :pseudo-class { \u00a0 margin:2in; }  Examples Please refer to the various pseudo-classes of @page for examples.  :first  :left  :right   Specifications  CSS 2.1 Paged media #page-selectors  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 2.0 -- 8.0 6.0 5.0         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Media_queries","title":"CSS media queries","description":"Syntax Media queries consist of a media type and one or more expressions, involving media features, which resolve to either true or false.\u00a0 The result of the query is true if the media type specified in the media query matches the type of device the document is being displayed on and all expressions in the media query are true. When a media query is true, the corresponding style sheet is applied following the normal cascading rules. When neither not nor only are used within a media query, the media type is optional and will be interpreted as all. Logical operators You can compose complex media queries using logical operators, including not, and, and only. In addition, you can combine multiple media queries in a comma-separated list; if any of the media queries in the list is true, the associated style sheet is applied.\u00a0 This is the equivalent of a logical \"or\" operation. The not keyword negates the result of the query; \"all and (not color)\" is true for monochrome devices regardless of media type, for example. The only keyword hides style sheets from older browsers that don't support media queries:  <link rel=\"stylesheet\"\u00a0media=\"only screen and (color)\" href=\"example.css\" \/>  Operator precedence The not operator has a very low precedence.\u00a0 For example, the not is evaluated last in the following query:  @media not all and (-moz-windows-compositor) {\u00a0... }  This means that the query is evaluated like this:  @media not (all and (-moz-windows-compositor)) { ... }  ... rather than like this:  @media (not all) and (-moz-windows-compositor) { ... }  \u00a0 As another example, look at the following media query:  @media not screen and (color), print and (color)  It is evaluated like this:  @media (not (screen and (color))), print and (color)  Pseudo-BNF (for those of you that like that kind of thing)  media_query_list: <media_query> [, <media_query> ]* media_query: [[only | not]? <media_type> [ and <expression> ]*]   | <expression> [ and <expression> ]* expression: ( <media_feature> [: <value>]? ) media_type: all | aural | braille | handheld | print |   projection | screen | tty | tv | embossed media_feature: width | min-width | max-width   | height | min-height | max-height   | device-width | min-device-width | max-device-width   | device-height | min-device-height | max-device-height   | aspect-ratio | min-aspect-ratio | max-aspect-ratio   | device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio   | color | min-color | max-color   | color-index | min-color-index | max-color-index   | monochrome | min-monochrome | max-monochrome   | resolution | min-resolution | max-resolution   | scan | grid Media queries are case insensitive.\u00a0 Media queries involving unknown media types are always false. Note: Parentheses are required around expressions; failing to use them is an error. Logical operators You can compose complex media queries using logical operators, including not, and, and only. In addition, you can combine multiple media queries in a comma-separated list; if any of the media queries in the list is true, the associated style sheet is applied.\u00a0 This is the equivalent of a logical \"or\" operation. The not keyword negates the result of the query; \"all and (not color)\" is true for monochrome devices regardless of media type, for example. The only keyword hides style sheets from older browsers that don't support media queries:  <link rel=\"stylesheet\"\u00a0media=\"only screen and (color)\" href=\"example.css\" \/>  Operator precedence The not operator has a very low precedence.\u00a0 For example, the not is evaluated last in the following query:  @media not all and (-moz-windows-compositor) {\u00a0... }  This means that the query is evaluated like this:  @media not (all and (-moz-windows-compositor)) { ... }  ... rather than like this:  @media (not all) and (-moz-windows-compositor) { ... }  \u00a0 As another example, look at the following media query:  @media not screen and (color), print and (color)  It is evaluated like this:  @media (not (screen and (color))), print and (color)  Pseudo-BNF (for those of you that like that kind of thing)  media_query_list: <media_query> [, <media_query> ]* media_query: [[only | not]? <media_type> [ and <expression> ]*]   | <expression> [ and <expression> ]* expression: ( <media_feature> [: <value>]? ) media_type: all | aural | braille | handheld | print |   projection | screen | tty | tv | embossed media_feature: width | min-width | max-width   | height | min-height | max-height   | device-width | min-device-width | max-device-width   | device-height | min-device-height | max-device-height   | aspect-ratio | min-aspect-ratio | max-aspect-ratio   | device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio   | color | min-color | max-color   | color-index | min-color-index | max-color-index   | monochrome | min-monochrome | max-monochrome   | resolution | min-resolution | max-resolution   | scan | grid Media queries are case insensitive.\u00a0 Media queries involving unknown media types are always false. Note: Parentheses are required around expressions; failing to use them is an error. Media features Most media features can be prefixed with \"min-\"\u00a0or \"max-\" to express \"greater or equal to\"\u00a0or \"less than or equal to\" constraints.\u00a0 This avoids using the \"<\" and \">\"\u00a0symbols, which would conflict with\u00a0HTML\u00a0and XML.\u00a0 If you use a media feature without specifying a value, the expression resolves to true if the feature's value is non-zero. Note: If a media feature doesn't apply to the device on which the browser is running, expressions involving that media feature are always false.\u00a0 For example, querying the aspect ratio of an aural device always results in false. color Value: <color>  Media: visual   Accepts min\/max prefixes: yes Indicates the number of bits per color component of the output device.\u00a0 If the device is not a color device, this value is zero. Note: If the color components have different numbers of bits per color component, the smallest number is used.\u00a0 For example, if a display uses 5 bits for blue and red and 6 bits for green, then the device is considered to use 5 bits per color component.\u00a0 If the device uses indexed colors, the minimum number of bits per color component in the color table is used. Examples To apply a style sheet to all color devices:  @media all and (color) { ... }  To apply a style sheet to devices with at least 4 bits per color component:  @media all and (min-color: 4) { ... }  color-index Value: <integer>   Media: visual   Accepts min\/max prefixes: yes Indicates the number of entries in the color look-up table for the output device. Examples To indicate that a style sheet should apply to all devices using indexed color, you can do:  @media all and (color-index) { ... }  To apply a style sheet to indexed color devices with at least 256 colors:  <link rel=\"stylesheet\" media=\"all and (min-color-index:\u00a0256)\" href=\"http:\/\/foo.bar.com\/stylesheet.css\" \/>  aspect-ratio Value: <ratio>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the aspect ratio of the targeted display area of the output device.\u00a0 This value consists of two positive integers separated by a slash (\"\/\")\u00a0character.\u00a0 This represents the ratio of horizontal pixels (first term) to vertical pixels (second term). Example The following selects a special style sheet to use for when the display area is at least as wide as it is high.  @media screen and (min-aspect-ratio: 1\/1) { ... } This selects the style when the aspect ratio is either 1:1 or greater.device-aspect-ratio Value: <ratio>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the aspect ratio of the output device.\u00a0 This value consists of two positive integers separated by a slash (\"\/\")\u00a0character.\u00a0 This represents the ratio of horizontal pixels (first term) to vertical pixels (second term). Example The following selects a special style sheet to use for widescreen displays.  @media screen and (device-aspect-ratio: 16\/9), screen and (device-aspect-ratio: 16\/10) { ... } This selects the style when the aspect ratio is either 16:9 or 16:10.device-height Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the height of the output device (meaning the entire screen or page, rather than just the rendering area, such as the document window). Example To apply a style sheet to a document when displayed on a screen that is less than 800 pixels wide, you can use this:  <link rel=\"stylesheet\"\u00a0media=\"screen and (max-device-width: 799px)\" \/>  device-width Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the width of the output device (meaning the entire screen or page, rather than just the rendering area, such as the document window). grid Value: <integer>   Media: all Accepts min\/max prefixes: no Determines whether the output device is a grid device or a bitmap device.\u00a0 If the device is grid-based (such as a TTY terminal or a phone display with only one font), the value is 1.\u00a0 Otherwise it is zero. Example To apply a style to handheld devices with a 15-character or narrower display:  @media handheld and (grid) and (max-width: 15em) { ... }  Note: The \"em\"\u00a0unit has a special meaning for grid devices; since the exact width of an \"em\"\u00a0can't be determined, 1em is assumed to be the width of one grid cell horizontally, and the height of one cell vertically.height Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes The height media feature describes the height of the output device's rendering surface (such as the height of the viewport or of the page box on a printer). Note: As the user resizes the window, Firefox switches style sheets as appropriate based on media queries using the width and height media features. monochrome Value: <integer>   Media: visual   Accepts min\/max prefixes: yes Indicates the number of bits per pixel on a monochrome (greyscale)\u00a0device.\u00a0 If the device isn't monochrome, the device's value is 0. Examples To apply a style sheet to all monochrome devices:  @media all and (monochrome) { ... }  To apply a style sheet to monochrome devices with at least 8 bits per pixel:  @media all and (min-monochrome: 8) { ... }  orientation Value: landscape | portrait Media: visual   Accepts min\/max prefixes: no Indicates whether the device is in landscape (the display is wider than it is tall)\u00a0or portrait (the display is taller than it is wide)\u00a0mode. Example To apply a style sheet only in portrait orientation:  @media all and (orientation:\u00a0portrait) { ... } resolution Value: <resolution>   Media: bitmap   Accepts min\/max prefixes: yes Indicates the resolution (pixel density) of the output device.\u00a0 The resolution may be specified in either dots per inch (dpi) or dots per centimeter (dpcm). Example To apply a style sheet to devices with at least 300 dots per inch of resolution:  @media print and (min-resolution: 300dpi) { ... }  scan Value: progressive |\u00a0interlace Media: tv   Accepts min\/max prefixes: no Describes the scanning process of television output devices. Example To apply a style sheet only to progressive scanning televisions:  @media tv and (scan: progressive) { ... }  width Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes The width media feature describes the width of the rendering surface of the output device (such as the width of the document window, or the width of the page box on a printer). Note: As the user resizes the window, Firefox switches style sheets as appropriate based on media queries using the width and height media features. Examples If you want to specify a style sheet for handheld devices, or screen devices with a width greater than 20em, you can use this query:  @media handheld and (min-width: 20em), screen and (min-width: 20em) { ... }  This media query specifies a style sheet that applies to printed media wider than 8.5 inches:  <link rel=\"stylesheet\" media=\"print and (min-width:\u00a08.5in)\"     href=\"http:\/\/foo.com\/mystyle.css\" \/>  This query specifies a style sheet that is usable when the viewport is between 500 and 800 pixels wide:  @media screen and (min-width: 500px) and (max-width: 800px) { ... }  color Value: <color>  Media: visual   Accepts min\/max prefixes: yes Indicates the number of bits per color component of the output device.\u00a0 If the device is not a color device, this value is zero. Note: If the color components have different numbers of bits per color component, the smallest number is used.\u00a0 For example, if a display uses 5 bits for blue and red and 6 bits for green, then the device is considered to use 5 bits per color component.\u00a0 If the device uses indexed colors, the minimum number of bits per color component in the color table is used. Examples To apply a style sheet to all color devices:  @media all and (color) { ... }  To apply a style sheet to devices with at least 4 bits per color component:  @media all and (min-color: 4) { ... }  Examples To apply a style sheet to all color devices:  @media all and (color) { ... }  To apply a style sheet to devices with at least 4 bits per color component:  @media all and (min-color: 4) { ... }  color-index Value: <integer>   Media: visual   Accepts min\/max prefixes: yes Indicates the number of entries in the color look-up table for the output device. Examples To indicate that a style sheet should apply to all devices using indexed color, you can do:  @media all and (color-index) { ... }  To apply a style sheet to indexed color devices with at least 256 colors:  <link rel=\"stylesheet\" media=\"all and (min-color-index:\u00a0256)\" href=\"http:\/\/foo.bar.com\/stylesheet.css\" \/>  Examples To indicate that a style sheet should apply to all devices using indexed color, you can do:  @media all and (color-index) { ... }  To apply a style sheet to indexed color devices with at least 256 colors:  <link rel=\"stylesheet\" media=\"all and (min-color-index:\u00a0256)\" href=\"http:\/\/foo.bar.com\/stylesheet.css\" \/>  aspect-ratio Value: <ratio>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the aspect ratio of the targeted display area of the output device.\u00a0 This value consists of two positive integers separated by a slash (\"\/\")\u00a0character.\u00a0 This represents the ratio of horizontal pixels (first term) to vertical pixels (second term). Example The following selects a special style sheet to use for when the display area is at least as wide as it is high.  @media screen and (min-aspect-ratio: 1\/1) { ... } This selects the style when the aspect ratio is either 1:1 or greater.Example The following selects a special style sheet to use for when the display area is at least as wide as it is high.  @media screen and (min-aspect-ratio: 1\/1) { ... } This selects the style when the aspect ratio is either 1:1 or greater.device-aspect-ratio Value: <ratio>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the aspect ratio of the output device.\u00a0 This value consists of two positive integers separated by a slash (\"\/\")\u00a0character.\u00a0 This represents the ratio of horizontal pixels (first term) to vertical pixels (second term). Example The following selects a special style sheet to use for widescreen displays.  @media screen and (device-aspect-ratio: 16\/9), screen and (device-aspect-ratio: 16\/10) { ... } This selects the style when the aspect ratio is either 16:9 or 16:10.Example The following selects a special style sheet to use for widescreen displays.  @media screen and (device-aspect-ratio: 16\/9), screen and (device-aspect-ratio: 16\/10) { ... } This selects the style when the aspect ratio is either 16:9 or 16:10.device-height Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the height of the output device (meaning the entire screen or page, rather than just the rendering area, such as the document window). Example To apply a style sheet to a document when displayed on a screen that is less than 800 pixels wide, you can use this:  <link rel=\"stylesheet\"\u00a0media=\"screen and (max-device-width: 799px)\" \/>  Example To apply a style sheet to a document when displayed on a screen that is less than 800 pixels wide, you can use this:  <link rel=\"stylesheet\"\u00a0media=\"screen and (max-device-width: 799px)\" \/>  device-width Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes Describes the width of the output device (meaning the entire screen or page, rather than just the rendering area, such as the document window). grid Value: <integer>   Media: all Accepts min\/max prefixes: no Determines whether the output device is a grid device or a bitmap device.\u00a0 If the device is grid-based (such as a TTY terminal or a phone display with only one font), the value is 1.\u00a0 Otherwise it is zero. Example To apply a style to handheld devices with a 15-character or narrower display:  @media handheld and (grid) and (max-width: 15em) { ... }  Note: The \"em\"\u00a0unit has a special meaning for grid devices; since the exact width of an \"em\"\u00a0can't be determined, 1em is assumed to be the width of one grid cell horizontally, and the height of one cell vertically.Example To apply a style to handheld devices with a 15-character or narrower display:  @media handheld and (grid) and (max-width: 15em) { ... }  Note: The \"em\"\u00a0unit has a special meaning for grid devices; since the exact width of an \"em\"\u00a0can't be determined, 1em is assumed to be the width of one grid cell horizontally, and the height of one cell vertically.height Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes The height media feature describes the height of the output device's rendering surface (such as the height of the viewport or of the page box on a printer). Note: As the user resizes the window, Firefox switches style sheets as appropriate based on media queries using the width and height media features. monochrome Value: <integer>   Media: visual   Accepts min\/max prefixes: yes Indicates the number of bits per pixel on a monochrome (greyscale)\u00a0device.\u00a0 If the device isn't monochrome, the device's value is 0. Examples To apply a style sheet to all monochrome devices:  @media all and (monochrome) { ... }  To apply a style sheet to monochrome devices with at least 8 bits per pixel:  @media all and (min-monochrome: 8) { ... }  Examples To apply a style sheet to all monochrome devices:  @media all and (monochrome) { ... }  To apply a style sheet to monochrome devices with at least 8 bits per pixel:  @media all and (min-monochrome: 8) { ... }  orientation Value: landscape | portrait Media: visual   Accepts min\/max prefixes: no Indicates whether the device is in landscape (the display is wider than it is tall)\u00a0or portrait (the display is taller than it is wide)\u00a0mode. Example To apply a style sheet only in portrait orientation:  @media all and (orientation:\u00a0portrait) { ... } Example To apply a style sheet only in portrait orientation:  @media all and (orientation:\u00a0portrait) { ... } resolution Value: <resolution>   Media: bitmap   Accepts min\/max prefixes: yes Indicates the resolution (pixel density) of the output device.\u00a0 The resolution may be specified in either dots per inch (dpi) or dots per centimeter (dpcm). Example To apply a style sheet to devices with at least 300 dots per inch of resolution:  @media print and (min-resolution: 300dpi) { ... }  Example To apply a style sheet to devices with at least 300 dots per inch of resolution:  @media print and (min-resolution: 300dpi) { ... }  scan Value: progressive |\u00a0interlace Media: tv   Accepts min\/max prefixes: no Describes the scanning process of television output devices. Example To apply a style sheet only to progressive scanning televisions:  @media tv and (scan: progressive) { ... }  Example To apply a style sheet only to progressive scanning televisions:  @media tv and (scan: progressive) { ... }  width Value:  <length>  Media: visual  , tactile   Accepts min\/max prefixes: yes The width media feature describes the width of the rendering surface of the output device (such as the width of the document window, or the width of the page box on a printer). Note: As the user resizes the window, Firefox switches style sheets as appropriate based on media queries using the width and height media features. Examples If you want to specify a style sheet for handheld devices, or screen devices with a width greater than 20em, you can use this query:  @media handheld and (min-width: 20em), screen and (min-width: 20em) { ... }  This media query specifies a style sheet that applies to printed media wider than 8.5 inches:  <link rel=\"stylesheet\" media=\"print and (min-width:\u00a08.5in)\"     href=\"http:\/\/foo.com\/mystyle.css\" \/>  This query specifies a style sheet that is usable when the viewport is between 500 and 800 pixels wide:  @media screen and (min-width: 500px) and (max-width: 800px) { ... }  Examples If you want to specify a style sheet for handheld devices, or screen devices with a width greater than 20em, you can use this query:  @media handheld and (min-width: 20em), screen and (min-width: 20em) { ... }  This media query specifies a style sheet that applies to printed media wider than 8.5 inches:  <link rel=\"stylesheet\" media=\"print and (min-width:\u00a08.5in)\"     href=\"http:\/\/foo.com\/mystyle.css\" \/>  This query specifies a style sheet that is usable when the viewport is between 500 and 800 pixels wide:  @media screen and (min-width: 500px) and (max-width: 800px) { ... }  Mozilla-specific media features Mozilla offers several Gecko-specific media features. Some of these may be proposed as official media features.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-images-in-menus  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device allows images to appear in menus, this is 1; otherwise, the value is 0. This corresponds to the :-moz-system-metric(images-in-menus)  CSS\u00a0pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-mac-graphite-theme  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user has configured their device to use the \"Graphite\" appearance on Mac OS\u00a0X, this is 1. If the user is using the standard blue appearance, or is not on Mac OS\u00a0X, this is 0. This corresponds to the :-moz-system-metric(mac-graphite-theme)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-maemo-classic  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is using Maemo with the original theme, this is 1; if it's using the newer Fremantle theme, this is 0. This corresponds to the :-moz-system-metric(maemo-classic)  CSS pseudo-class.  Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  -moz-device-pixel-ratio  Value: <number>  Media: visual   Accepts min\/max prefixes: yes Gives the number of device pixels per CSS pixel. Note: This media feature is also implemented by Webkit as -webkit-device-pixel-ratio. The min and max prefixes as implemented by Gecko are named min--moz-device-pixel-ratio and max--moz-device-pixel-ratio; but the same prefixes as implemented by Webkit are named -webkit-min-device-pixel-ratio and -webkit-max-device-pixel-ratio.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-scrollbar-end-backward  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device's user interface displays a backward arrow button at the end of scrollbars, this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(scrollbar-end-backward)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-scrollbar-end-forward  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device's user interface displays a forward arrow button at the end of scrollbars, this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(scrollbar-end-forward)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-scrollbar-start-backward  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device's user interface displays a backward arrow button at the beginning of scrollbars, this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(scrollbar-start-backward)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-scrollbar-start-forward  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device's user interface displays a forward arrow button at the beginning of scrollbars, this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(scrollbar-start-forward)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-scrollbar-thumb-proportional  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device's user interface displays the thumb of scrollbars proportionally (that is, sized based on the percentage of the document that is visible), this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(scrollbar-thumb-proportional)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-touch-enabled  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the device supports touch events (for a touch screen), this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(touch-enabled)  CSS pseudo-class. Example You might use this to render your buttons slightly larger, for example, if the user is on a touch-screen device, to make them more finger-friendly.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-windows-classic  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is using Windows unthemed (in classic mode instead of using uxtheme), this is 1; otherwise it's 0. This corresponds to the :-moz-system-metric(windows-classic)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-windows-compositor  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is using Windows with the DWM\u00a0compositor, this is 1; otherwise it's 0. This corresponds to the :-moz-system-metric(windows-compositor)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-windows-default-theme  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is currently using one of the default Windows themes (Luna, Royale, Zune, or Aero (including Vista Basic, Vista Advanced, and Aero Glass), this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(windows-default-theme)  CSS pseudo-class.  Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  -moz-windows-theme  Value: aero | luna-blue | luna-olive | luna-silver | royale | generic | zune Media: visual   Accepts min\/max prefixes: no Indicates which Windows theme is currently being used. Only available on\u00a0Windows. Possible values are:  aero  luna-blue  luna-olive  luna-silver  royale  generic  zune  This is provided for application skins and other chrome code to be able to adapt to work well with the current Windows theme.Example You might use this to render your buttons slightly larger, for example, if the user is on a touch-screen device, to make them more finger-friendly.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-windows-classic  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is using Windows unthemed (in classic mode instead of using uxtheme), this is 1; otherwise it's 0. This corresponds to the :-moz-system-metric(windows-classic)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-windows-compositor  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is using Windows with the DWM\u00a0compositor, this is 1; otherwise it's 0. This corresponds to the :-moz-system-metric(windows-compositor)  CSS pseudo-class.  Requires Gecko 1.9.2 (Firefox 3.6 \/ Thunderbird 3.1 \/ Fennec 1.0)  -moz-windows-default-theme  Value: <integer>   Media: visual   Accepts min\/max prefixes: no If the user is currently using one of the default Windows themes (Luna, Royale, Zune, or Aero (including Vista Basic, Vista Advanced, and Aero Glass), this is 1. Otherwise it's 0. This corresponds to the :-moz-system-metric(windows-default-theme)  CSS pseudo-class.  Requires Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)  -moz-windows-theme  Value: aero | luna-blue | luna-olive | luna-silver | royale | generic | zune Media: visual   Accepts min\/max prefixes: no Indicates which Windows theme is currently being used. Only available on\u00a0Windows. Possible values are:  aero  luna-blue  luna-olive  luna-silver  royale  generic  zune  This is provided for application skins and other chrome code to be able to adapt to work well with the current Windows theme.Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 3.5 (1.9.1)  ? ? ?   grid ? -- (grid media type is not supported) ? ? ?   resolution ? 3.5 (1.9.1)  supports <integer>   values; 8.0 (8.0)  supports <number>  values, as per the spec. ? ? ?   scan ? --\u00a0(tv media type is not supported) ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  CSS 3 media query specification Media types Using media queries from code"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS_Counters","title":"CSS Counters","description":"Using counters To use a CSS counter, it must first be reset to a value, 0 by default. To add the value of a counter to an element, use the counter() function. The following example adds to the beginning of each h1 element \"Section <the value of the counter>:\". \r           body {   counter-reset: section;           \/* Set the section counter to 0 *\/ } h1:before {   counter-increment: section;      \/* Increment the section counter *\/   content: \"Section \" counter(section) \": \"; \/* Display the counter *\/ }\r          Nesting counters A CSS counter can be especially useful to make outlined lists because a new instance of a CSS counter is automatically created in child elements. Using the counters() function, a string can be inserted between different levels of nested counters: \r           ol {   counter-reset: section;                \/* Creates a new instance of the                                             section counter with each ol                                             element *\/   list-style-type: none; } li:before {   counter-increment: section;            \/* Increments only this instance                                             of the section counter *\/   content: counters(section, \".\") \" \";   \/* Adds the value of all instances                                             of the section counter separated                                             by a \".\". *\/ }\r          With the following HTML: \r           <ol>   <li>item<\/li>          <!-- 1     -->   <li>item               <!-- 2     -->     <ol>       <li>item<\/li>      <!-- 2.1   -->       <li>item<\/li>      <!-- 2.2   -->       <li>item           <!-- 2.3   -->         <ol>           <li>item<\/li>  <!-- 2.3.1 -->           <li>item<\/li>  <!-- 2.3.2 -->         <\/ol>         <ol>           <li>item<\/li>  <!-- 2.3.1 -->           <li>item<\/li>  <!-- 2.3.2 -->           <li>item<\/li>  <!-- 2.3.3 -->         <\/ol>       <\/li>       <li>item<\/li>      <!-- 2.4   -->     <\/ol>   <\/li>   <li>item<\/li>          <!-- 3     -->   <li>item<\/li>          <!-- 4     --> <\/ol> <ol>   <li>item<\/li>          <!-- 1     -->   <li>item<\/li>          <!-- 2     --> <\/ol>\r          Specifications  CSS 2.1  See also  counter-reset counter-increment  There is an additional example available at http:\/\/www.mezzoblue.com\/archives\/20...\/counter_intu\/. This blog entry was posted on November 01, 2006, but appears to be accurate."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_CSS_gradients","title":"Using CSS gradients","description":"Linear gradients To create a linear gradient, you set a starting point and a direction (specified as an angle) along which the gradient effect is applied. You also define color stops. Color stops are the colors you want Gecko to render smooth transitions among, and you must specify at least two of them, but can specify more to create more complex gradient effects. Simple linear gradients Here's a linear gradient that starts at the center (horizontally) and top (vertically), and starts blue, transitioning to white.    Screen Shot Live Demonstration      t      \u00a0 \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(top, blue, white);   \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom, blue, white);\r          Changing the same gradient to run from left to right:    Screen Shot Live Demonstration      t      \u00a0 \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left, blue, white);   \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to right, blue, white);\r          You can make the gradient run diagonally by specifying both the horizontal and vertical starting positions. For example:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left top, blue, white);   \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom right, blue, white);\r          Using angles If you don't specify an angle, one is determined automatically based on the start position. If you'd like more control over the direction of the gradient, you can set the angle specifically. For example, here are two gradients that have the same starting point of \"left center\", but the second one also has an angle of 20 degrees.  The one on the right uses CSS\u00a0like this: \r           \/* Must be prefixed *\/ background: linear-gradient(left 20deg, black, white);\r          The angle is specified as an angle between a horizontal line and the gradient line, going counter-clockwise. In other words, 0deg generates a left to right horizontal gradient, while 90deg creates a vertical gradient from the bottom to the top:  \r           \/* Must be prefixed *\/ background: linear-gradient(<angle>, red, white);\r          Color stops Color stops are points along the gradient line that will have a specific color at that location. The location can be specified as either a percentage of the length of the line, or as an absolute length. You may specify as many color stops as you like in order to achieve the desired effect. If you specify the location as a percentage, 0% represents the starting point, while 100% represents the ending point; however, you can use values outside that range if necessary to get the effect you want. Example:\u00a0Three color stops This example specifies three color stops:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(top, blue, white 80%, orange);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom, blue, white 80%, orange);\r          Note that the first and last color stops don't specify a location; because of that, values of 0% and 100% are assigned automatically. The middle color stop specifies a location of 80%, putting it most of the way toward the bottom. Example:\u00a0Evenly spaced color stops Here's an example using a wide variety of colors, all evenly spaced:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left, red, orange, yellow, green, blue);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to right, red, orange, yellow, green, blue);\r          Notice that the color stops are automatically spaced evenly when no locations are specified. Transparency and gradients Gradients support transparency. You can use this, for example, when stacking multiple backgrounds, to create fading effects on background images. For example:  \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/  background: linear-gradient(left, rgba(255,255,255,0), rgba(255,255,255,1)), url(http:\/\/foo.com\/image.jpg);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/   background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1)), url(http:\/\/foo.com\/image.jpg);\r          The backgrounds are stacked with the first specified background on top, and each successive background farther away. By stacking backgrounds this way, you can create very creative effects as seen above. Simple linear gradients Here's a linear gradient that starts at the center (horizontally) and top (vertically), and starts blue, transitioning to white.    Screen Shot Live Demonstration      t      \u00a0 \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(top, blue, white);   \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom, blue, white);\r          Changing the same gradient to run from left to right:    Screen Shot Live Demonstration      t      \u00a0 \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left, blue, white);   \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to right, blue, white);\r          You can make the gradient run diagonally by specifying both the horizontal and vertical starting positions. For example:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left top, blue, white);   \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom right, blue, white);\r          Using angles If you don't specify an angle, one is determined automatically based on the start position. If you'd like more control over the direction of the gradient, you can set the angle specifically. For example, here are two gradients that have the same starting point of \"left center\", but the second one also has an angle of 20 degrees.  The one on the right uses CSS\u00a0like this: \r           \/* Must be prefixed *\/ background: linear-gradient(left 20deg, black, white);\r          The angle is specified as an angle between a horizontal line and the gradient line, going counter-clockwise. In other words, 0deg generates a left to right horizontal gradient, while 90deg creates a vertical gradient from the bottom to the top:  \r           \/* Must be prefixed *\/ background: linear-gradient(<angle>, red, white);\r          Color stops Color stops are points along the gradient line that will have a specific color at that location. The location can be specified as either a percentage of the length of the line, or as an absolute length. You may specify as many color stops as you like in order to achieve the desired effect. If you specify the location as a percentage, 0% represents the starting point, while 100% represents the ending point; however, you can use values outside that range if necessary to get the effect you want. Example:\u00a0Three color stops This example specifies three color stops:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(top, blue, white 80%, orange);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom, blue, white 80%, orange);\r          Note that the first and last color stops don't specify a location; because of that, values of 0% and 100% are assigned automatically. The middle color stop specifies a location of 80%, putting it most of the way toward the bottom. Example:\u00a0Evenly spaced color stops Here's an example using a wide variety of colors, all evenly spaced:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left, red, orange, yellow, green, blue);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to right, red, orange, yellow, green, blue);\r          Notice that the color stops are automatically spaced evenly when no locations are specified. Example:\u00a0Three color stops This example specifies three color stops:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(top, blue, white 80%, orange);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to bottom, blue, white 80%, orange);\r          Note that the first and last color stops don't specify a location; because of that, values of 0% and 100% are assigned automatically. The middle color stop specifies a location of 80%, putting it most of the way toward the bottom. Example:\u00a0Evenly spaced color stops Here's an example using a wide variety of colors, all evenly spaced:    Screen Shot Live Demonstration      t      \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/ background: linear-gradient(left, red, orange, yellow, green, blue);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/ background: linear-gradient(to right, red, orange, yellow, green, blue);\r          Notice that the color stops are automatically spaced evenly when no locations are specified. Transparency and gradients Gradients support transparency. You can use this, for example, when stacking multiple backgrounds, to create fading effects on background images. For example:  \r           \/* The old syntax, deprecated, but still needed with the -o, -ms and -webkit prefixes*\/  background: linear-gradient(left, rgba(255,255,255,0), rgba(255,255,255,1)), url(http:\/\/foo.com\/image.jpg);  \/* The new syntax needed for Firefox 10 onwards, with the -moz prefix *\/   background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1)), url(http:\/\/foo.com\/image.jpg);\r          The backgrounds are stacked with the first specified background on top, and each successive background farther away. By stacking backgrounds this way, you can create very creative effects as seen above. Radial gradients Radial gradients are specified using the -moz-radial-gradient  property. The syntax is similar to that for linear gradients, except you can specify the gradient's shape (whether it should be a circle or ellipse) as well as its size. Color stops You specify color stops the same way as for linear gradients. The gradient line extends out from the starting position in all directions. Example:\u00a0Evenly spaced color stops By default, as with linear gradients, the color stops are evenly spaced:    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(red, yellow, rgb(30, 144, 255));\r          Example:\u00a0Explicitly spaced color stops Here we specify specific locations for the color stops:    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(red 5%, yellow 25%, #1E90FF 50%);\r          Size This is one of the areas in which radial gradients differ from linear gradients. You can provide a size value that specifies the point that defines the size of the circle or ellipse. See this description of the size constants for specifics. Example:\u00a0closest-side for ellipses This ellipse uses the closest-side size value, which means the size is set by the distance from the starting point (the center)\u00a0to the closest side of the enclosing box.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(ellipse closest-side, red, yellow 10%, #1E90FF 50%, white);\r          Example:\u00a0farthest-corner for ellipses This example is similar to the previous one, except that its size is specified as farthest-corner, which sets the size of the gradient by the distance from the starting point to the farthest corner of the enclosing box from the starting point.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(ellipse farthest-corner, red, yellow 10%, #1E90FF 50%, white);\r          Example:\u00a0closest-side for circles This example uses closest-side, which determines the circle's size as the distance between the start point (the center)\u00a0and the closest side.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(circle closest-side, red, yellow 10%, #1E90FF 50%, white);\r          Here, the circle's radius is half the height of the box, since the top and bottom edges are equidistant from the start point and are closer than the left and right edges. Color stops You specify color stops the same way as for linear gradients. The gradient line extends out from the starting position in all directions. Example:\u00a0Evenly spaced color stops By default, as with linear gradients, the color stops are evenly spaced:    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(red, yellow, rgb(30, 144, 255));\r          Example:\u00a0Explicitly spaced color stops Here we specify specific locations for the color stops:    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(red 5%, yellow 25%, #1E90FF 50%);\r          Example:\u00a0Evenly spaced color stops By default, as with linear gradients, the color stops are evenly spaced:    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(red, yellow, rgb(30, 144, 255));\r          Example:\u00a0Explicitly spaced color stops Here we specify specific locations for the color stops:    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(red 5%, yellow 25%, #1E90FF 50%);\r          Size This is one of the areas in which radial gradients differ from linear gradients. You can provide a size value that specifies the point that defines the size of the circle or ellipse. See this description of the size constants for specifics. Example:\u00a0closest-side for ellipses This ellipse uses the closest-side size value, which means the size is set by the distance from the starting point (the center)\u00a0to the closest side of the enclosing box.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(ellipse closest-side, red, yellow 10%, #1E90FF 50%, white);\r          Example:\u00a0farthest-corner for ellipses This example is similar to the previous one, except that its size is specified as farthest-corner, which sets the size of the gradient by the distance from the starting point to the farthest corner of the enclosing box from the starting point.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(ellipse farthest-corner, red, yellow 10%, #1E90FF 50%, white);\r          Example:\u00a0closest-side for circles This example uses closest-side, which determines the circle's size as the distance between the start point (the center)\u00a0and the closest side.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(circle closest-side, red, yellow 10%, #1E90FF 50%, white);\r          Here, the circle's radius is half the height of the box, since the top and bottom edges are equidistant from the start point and are closer than the left and right edges. Example:\u00a0closest-side for ellipses This ellipse uses the closest-side size value, which means the size is set by the distance from the starting point (the center)\u00a0to the closest side of the enclosing box.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(ellipse closest-side, red, yellow 10%, #1E90FF 50%, white);\r          Example:\u00a0farthest-corner for ellipses This example is similar to the previous one, except that its size is specified as farthest-corner, which sets the size of the gradient by the distance from the starting point to the farthest corner of the enclosing box from the starting point.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(ellipse farthest-corner, red, yellow 10%, #1E90FF 50%, white);\r          Example:\u00a0closest-side for circles This example uses closest-side, which determines the circle's size as the distance between the start point (the center)\u00a0and the closest side.    Screen Shot Live Demonstration          \r           background: -moz-radial-gradient(circle closest-side, red, yellow 10%, #1E90FF 50%, white);\r          Here, the circle's radius is half the height of the box, since the top and bottom edges are equidistant from the start point and are closer than the left and right edges. Repeating gradients The linear-gradient \u00a0and radial-gradient  properties don't support automatically repeating the color stops. However, the repeating-linear-gradient  and repeating-radial-gradient \u00a0properties are available to offer this functionality. Example:\u00a0Repeating linear gradient This example uses repeating-linear-gradient  to create a gradient:    Screen Shot Live Demonstration    \u00a0    \r           background: repeating-linear-gradient(top left -45deg, red, red 5px, white 5px, white 10px);\r          Example:\u00a0Repeating radial gradient This example uses -moz-repeating-radial-gradient \u00a0to create a gradient:    Screen Shot Live Demonstration    \u00a0    \r           background: -moz-repeating-radial-gradient(black, black 5px, white 5px, white 10px);\r          Example:\u00a0Repeating linear gradient This example uses repeating-linear-gradient  to create a gradient:    Screen Shot Live Demonstration    \u00a0    \r           background: repeating-linear-gradient(top left -45deg, red, red 5px, white 5px, white 10px);\r          Example:\u00a0Repeating radial gradient This example uses -moz-repeating-radial-gradient \u00a0to create a gradient:    Screen Shot Live Demonstration    \u00a0    \r           background: -moz-repeating-radial-gradient(black, black 5px, white 5px, white 10px);\r          See also  Gradient-related reference articles: <image>  , <gradient>  , linear-gradient , radial-gradient , repeating-linear-gradient , repeating-radial-gradient .  \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Specificity","title":"Specificity","description":"See also  CSS selectors spec: http:\/\/www.w3.org\/TR\/css3-selectors\/#specificity CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/initial_value","title":"initial value","description":"The initial value given in the summary of the definition of each CSS property has different meaning for inherited and non-inherited properties. For inherited properties, the initial value is used, for the root element only, when no value is specified for the element. For non-inherited properties the initial value is used, for any element, when no value is specified for the element. An initial keyword is being added in CSS3 to allow authors to explicitly specify this initial value. See Also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values.  initial"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/inheritance","title":"inheritance","description":"The summary of every CSS property definition says whether that property is inherited by default (\"Inherited: Yes\") or not inherited by default (\"Inherited: no\"). This controls what happens when no value is specified for a property on an element. Inherited properties When no value for an inherited property has been specified on an element, the element gets the computed value of that property on its parent element. Only the root element of the document gets the initial value given in the property's summary. A typical example of an inherited property is the color  property. Given the style rules: \r           p { color: green }\r          and the markup: \r           <p>This paragraph has <em>emphasized text<\/em> in it.<\/p>\r          the words \"emphasized text\" will appear green, since the em element has inherited the value of the color  property from the p element. It does not get the initial value of the property (which is the color that is used for the root element when the page specifies no color). Non-inherited properties When no value for an non-inherited property (sometimes called a reset property in Mozilla code) has been specified on an element, the element gets the initial value of that property (as specified in the property's summary). A typical example of a non-inherited property is the border  property. Given the style rules: \r           p { border: medium solid }\r          and the markup \r           <p>This paragraph has <em>emphasized text<\/em> in it.<\/p>\r          the words \"emphasized text\" will not have a border (since the initial value of border-style  is none). Notes The inherit  keyword allows authors to explicitly specify inheritance. It works on both inherited and non-inherited properties. See Also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values. inherit   \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/specified_value","title":"specified value","description":"The specified value of a CSS property is set in one out of three ways.  If the document's stylesheet has specified a value for the property then it will be used. For example; if the color  property is set to green then the text color of the corresponding element will be green. If the document's stylesheet has not specified a value then it will be inherited form the parent element (if possible). For example; if we have a paragraph (<p> ) inside a <div>  and the <div>  has a CSS font property value of \"Arial\" and the <p>  doesn't have a font property defined then it will inherit the Arial font. If none of the above are available, the initial value for the element as specified by the CSS specification is applied.  Specifications  CSS 2.1 Assigning property values #specified-value"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/used_value","title":"used value","description":"Details There are three steps to calculating any CSS property's final value. First, the specified value\u00a0is the result of cascading (choosing the most specific stylesheet rule that changes the property), inheritance\u00a0(using the same computed value as a parent if the property is inheritable), or using the default. Then, the computed value\u00a0is calculated according to the specification (for example, a span with position: absolute will have its computed\u00a0display changed to block). Finally, layout is calculated (dimensions that are\u00a0auto\u00a0or percentages relative to a parent are replaced with pixel values), and the result is the used value. These steps are calculated internally; a script can read only the final used values with\u00a0window.getComputedStyle. Example No explicit width. Specified width: auto (default). Computed width: auto. Used width: 998px (for example). Explicit width: 50%.\u00a0Specified width: 50%. Computed width: 50%. Used width: 447px (for example). Explicit width: inherit.\u00a0Specified width: 50%. Computed width: 50%. Used width: 221px (for example).   Difference from computed values CSS 2.0 defined only\u00a0computed value as the last step in a property's calculation. Then, CSS 2.1 introduced the\u00a0distinct definition of used value\u00a0so that an element could explicitly inherit a width\/height of a parent whose computed value\u00a0is a percentage.\u00a0For CSS properties that don't depend on layout (e.g. display, font-size, line-height), the computed values and used values are the same. These are the properties that do depend on layout so have a different computed value and used value: (taken from\u00a0CSS 2.1 Changes: Specified, computed, and actual values):  background-position bottom, left, right, top height, width margin-bottom, margin-left, margin-right, margin-top, min-height, min-width padding-bottom, padding-left, padding-right, padding-top text-indent  Specification CSS Level 2: Used Values See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values. window.getComputedStyle"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/computed_value","title":"Computed value","description":"The computed value of a CSS property is computed from the specified value by:  handling the special values inherit  and initial , and doing the computation needed to reach the value described in the \"Computed value\" line in the property's summary.  The computation needed to reach the \"Computed value\" for the property typically involves converting relative values (such as those in em units or percentages) to absolute values. For example, if an element has specified values font-size:16px and padding-top:2em, then the computed value of padding-top is 32px (double the font size). However, for some properties (those where percentages are relative to something that may require layout to determine, such as width, margin-right, text-indent, and top), percentage specified values turn into percentage computed values. Additionally, unitless numbers specified on the line-height property become the computed value, as specified. These relative values that remain in the computed value become absolute when the used value is determined. The main use of the computed value (other than as a step between the specified value and used value) is inheritance, including the inherit  keyword. Notes The getComputedStyle DOM API returns the used value, not the computed value. Specifications  CSS 21 Assigning property values #computed-value   See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/actual_value","title":"actual value","description":"The actual value of a CSS property is the used value after all approximations have been applied. For example; a user agent may only be able to render borders with a integer pixel value and may be forced to approximate the computed width of the border. Specifications  CSS 2.1 Assigning property values #actual-value  See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/box_model","title":"Box model","description":"In a document, each element is represented as a rectangular box. Determining the size, properties \u2014 like its color, background, borders aspect \u2014 and the position of these boxes is the goal of the rendering engine. In CSS each of these rectangular boxes is described using the standard box model. This model describes the content of the space taken by an element. Each box has four edges, the margin edge, border edge, padding edge, and content edge.  The content area is the area containing the real content of the element. It is located inside the content edge, and its dimensions are the content width, or content-box width, and the content height, or content-box height. If the CSS box-sizing  property is not set to another value than its default, the CSS properties width , min-width , max-width , height , min-height  and max-height  controls the content size. The padding area extends the content area with the empty area between the content and the eventual borders surrounding it. It often has a background, a color or an image (in that order, an opaque image hiding the background color), and is located inside the padding edge. Its dimensions are the padding-box width and the padding-box height. The space between the padding and the content edge can be controlled using the padding-top , padding-right , padding-bottom , padding-left  and the shorthand padding  CSS properties. The border area extends the padding area with the area containing the borders. It is the area inside the border edge, and its dimensions are the border-box width and the border-box height. This area depends of the size of the border that is defined by the border-width  property or the shorthand border . The margin area extends the boarder area with an empty area used to separate the element from its neighbors. It is the area inside the margin edge, and its dimensions are the margin-box width and the margin-box height. The size of the margin area is controlled using the margin-top , margin-right , margin-bottom , margin-left  and the shorthand margin  CSS properties. When margin collapsing happens, the margin area is not clearly defined since margins are shared between boxes. Finally, note that, for non-replaced inline elements, the amount of space taken up (the contribution to the height of the line) is determined by the line-height  property, even though the border and padding appear visually around the content. Specification    Specification Status Comment     CSS Level 2 (revision 1) Recommendation  Though more precisely worded, there is no practical change   CSS Level 1 Recommendation  \u00a0    See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values. Related CSS properties: box-sizing , height , max-height , min-height , width , max-height , min-height , padding , padding-top , padding-right , padding-bottom , padding-left , border , border-top , border-right , border-bottom , border-left , border-width , border-top-width , border-right-width , border-bottom-width , border-left-width , margin , margin-top , margin-right , margin-bottom , margin-left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started","title":"Getting Started","description":"Introduction This tutorial introduces you to Cascading Style Sheets (CSS). It guides you through the basic features of CSS with practical examples that you can try for yourself on your own computer. It is in two parts.  Part I illustrates the standard features of CSS that work in Mozilla browsers and also in most other modern browsers.   Part II contains some examples of special features that work in Mozilla but do not necessarily work in other environments.  The tutorial is based on the CSS 2.1 Specification. Who should use this tutorial? This tutorial is mostly for beginners in CSS, but you can also use it if you have some experience in CSS. If you are a beginner in CSS, use Part I of this tutorial to understand CSS and learn how to use it. Then use Part II to understand the scope of CSS in Mozilla. If you know some CSS, you can skip the parts of the tutorial that you already know, and only use the parts that interest you. If you are experienced in CSS but not in Mozilla, you can skip to Part II. What do you need before you start? To get the most from this tutorial, you need an editor for text files and, especially for Part II, a Mozilla browser (Firefox, Camino or SeaMonkey). You must also know how to use them in basic ways. If you do not want to edit files, then you can just read the tutorial and look at the pictures, but that is a less effective way for you to learn. A few parts of the tutorial require other Mozilla software. Those parts are optional. If you do not want to download other Mozilla software, then you can skip them. The other Mozilla software referenced by this tutorial includes:  DOM\u00a0Inspector  Note:\u00a0 CSS provides ways to work with color, so parts of this tutorial depend on color. You can only use these parts of the tutorial easily if you have a color display and normal color vision. How to use this tutorial To use this tutorial, read the pages carefully and in sequence. If you miss a page, then you might find it difficult to understand later pages. On each page, use the Information section to understand how CSS works. Use the Action section to try using CSS on your own computer. To test your understanding, take the challenge at the end of each page. Solutions the challenges are linked under the challenges, so you don't need to look at them if you don't want to. To understand CSS in more depth, read the information that you find in boxes captioned More details. Use the links there to find reference information about CSS. Who should use this tutorial? This tutorial is mostly for beginners in CSS, but you can also use it if you have some experience in CSS. If you are a beginner in CSS, use Part I of this tutorial to understand CSS and learn how to use it. Then use Part II to understand the scope of CSS in Mozilla. If you know some CSS, you can skip the parts of the tutorial that you already know, and only use the parts that interest you. If you are experienced in CSS but not in Mozilla, you can skip to Part II. What do you need before you start? To get the most from this tutorial, you need an editor for text files and, especially for Part II, a Mozilla browser (Firefox, Camino or SeaMonkey). You must also know how to use them in basic ways. If you do not want to edit files, then you can just read the tutorial and look at the pictures, but that is a less effective way for you to learn. A few parts of the tutorial require other Mozilla software. Those parts are optional. If you do not want to download other Mozilla software, then you can skip them. The other Mozilla software referenced by this tutorial includes:  DOM\u00a0Inspector  Note:\u00a0 CSS provides ways to work with color, so parts of this tutorial depend on color. You can only use these parts of the tutorial easily if you have a color display and normal color vision. How to use this tutorial To use this tutorial, read the pages carefully and in sequence. If you miss a page, then you might find it difficult to understand later pages. On each page, use the Information section to understand how CSS works. Use the Action section to try using CSS on your own computer. To test your understanding, take the challenge at the end of each page. Solutions the challenges are linked under the challenges, so you don't need to look at them if you don't want to. To understand CSS in more depth, read the information that you find in boxes captioned More details. Use the links there to find reference information about CSS. Tutorial Part I A basic step-by-step guide to CSS.  What is CSS Why use CSS How CSS works Cascading and inheritance Selectors Readable CSS Text styles Color Content Lists Boxes Layout Tables Media  Tutorial Part II Examples that show the scope of CSS used with other web and Mozilla technologies.  JavaScript SVG graphics XML data XBL bindings XUL user interfaces      CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin_collapsing","title":"Margin collapsing","description":"Top and bottom margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the margins combined into it, a behavior known as margin collapsing. Margin collapsing occurs in three basic cases:  Adjacent siblings The margins of adjacent siblings are collapsed (except when the later sibling needs to be cleared past floats). For example:   <p>The bottom margin of this paragraph is collapsed...<\/p>  <p>...with the top margin of this paragraph.<p>   Parent and first\/last child If there is no border, padding, inline content, or clearance to separate the margin-top of a block with the margin-top of its first child block, or no border, padding, inline content, height, min-height, or max-height to separate the margin-bottom of a block with the margin-bottom of its last child, then those margins collapse. The collapsed margin ends up outside the parent. Empty blocks If there is no border, padding, inline content, height, or min-height to separate a block's margin-top from its margin-bottom, then its top and bottom margins collapse.  More complex margin collapsing (of more than two margins) occurs when these cases are combined. These rules apply even to margins that are zero, so the margin of a first\/last child ends up outside its parent (according to the rules above) whether or not the parent's margin is zero. When negative margins are involved, the size of the collapsed margin is the sum of the largest positive margin and the smallest (most negative) negative margin. Margins of floating and absolutely positioned elements never collapse. Specifications  CSS 2.1 Box #Collapsing_margins  See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values.   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding   See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values.   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/block_formatting_context","title":"block formatting context","description":"Summary  A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other. A block formatting context is created by one of the following:   the root element or something that contains it  floats (elements where float is not none)  absolutely positioned elements (elements where position is absolute or fixed)  inline-blocks (elements with display: inline-block)  table cells (elements with display: table-cell, which is the default for HTML table cells)  table captions (elements with display: table-caption, which is the default for HTML table captions)  elements where overflow has a value other than visible  A block formatting context contains everything inside of the element creating it that is not also inside a descendant element that creates a new block formatting context. Block formatting contexts are important for the positioning (see float) and clearing (see clear) of floats. The rules for positioning and clearing of floats apply only to things within the same block formatting context. Floats do not affect the layout of things in other block formatting contexts, and clear only clears past floats in the same block formatting context.   Specifications   CSS 2.1   See Also  float, clear"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_transitions","title":"CSS transitions","description":"List of animatable CSS properties CSS\u00a0transitions and CSS animations can be used to animate the CSS properties listed here: CSS animatable properties. This list also includes the SVG properties that can be animated. Note: The set of properties that can be animated is subject to change; as such, you should avoid including any properties in the list that don't currently animate, because someday they might, causing unexpected results. CSS\u00a0transition properties CSS\u00a0transitions are controlled using the transition  shorthand property. This is the preferred way to set up your transitions, because it makes it easier to avoid getting your parameter list lengths out of sync, which can result in a frustratingly large amount of time spent debugging of your CSS. If you wish, you can control the individual components of the transition using the following sub-properties:  transition-property  Specifies the name or names of the CSS\u00a0properties to which transitions should be applied. Only properties listed here are animated during transitions; changes to all other properties occur instantaneously as usual. transition-duration  Specifies the duration over which transitions should occur. You can specify a single duration that applies to all properties during the transition, or multiple values to allow each property to transition over a different period of time. transition-timing-function  Specifies a cubic bezier curve used to define how intermediate values for properties are computed. transition-delay  Defines how long to wait between the time a property is changed and the transition actually begins.  Using transition timing functions Timing functions determine how intermediate values of the transition are calculated. The timing function can be specified by providing the graph of the corresponding function, as defined by four points defining a cubic bezier:  This CSS transition function manipulator is a convenient tool to visually generate CSS transition timing functions. Instead of specifying a bezier directly, there are pre-defined timing values:  ease, equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0) linear, equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0) ease-in, equivalent to cubic-bezier(0.42, 0, 1.0, 1.0) ease-out, equivalent to cubic-bezier(0, 0, 0.58, 1.0) ease-in-out, equivalent to cubic-bezier(0.42, 0, 0.58, 1.0)  A transition timing effect sampler This simple example provides demonstrations of several of the transition effects without a lot of extra fluff. Before we look at code snippets, you might want to take a look at the live demo (assuming your browser supports transitions). You can also take a look directly at the CSS it uses. First, the HTML to create the items we'll be testing our transitions on: \r           <ul>   <li id=\"long1\">Long, gradual transition...<\/li>   <li id=\"fast1\">Very fast transition...<\/li>   <li id=\"delay1\">Long transition with a 2-second delay...<\/li>   <li id=\"easeout\">Using ease-out timing...<\/li>   <li id=\"linear\">Using linear timing...<\/li>   <li id=\"cubic1\">Using cubic-bezier(0.2, 0.4, 0.7, 0.8)...<\/li> <\/ul>\r          Each item has its own ID; the CSS takes care of the rest. Let's take a look at a couple of examples. Using a delay This example performs a four-second font size transition with a two-second delay between the time the user mouses over the element and the beginning of the animation effect: \r           #delay1 {   position: relative;   transition-property: font-size;   transition-duration: 4s;   transition-delay: 2s;   font-size: 14px; }  #delay1:hover {   transition-property: font-size;   transition-duration: 4s;   transition-delay: 2s;   font-size: 36px; }\r          Using a linear transition timing function By default, the timing function used to compute the intermediate steps during the animation sequence provides a gentle acceleration and deceleration curve for the animation effect. If you'd rather have the effect maintain a constant speed for the duration of the animation, you can specify that you'd like to use the linear transition timing function, as shown below. \r           transition-timing-function: linear;\r          There are several other standard timing functions available; see transition-timing-function \u00a0for details. Specifying a cubic bezier timing function You can take even more control over the timing of the animation sequence by specifying your own cubic bezier curve describing the animation speed. For example: \r           transition-timing-function: cubic-bezier(0.2, 0.4, 0.7, 0.8);\r          This establishes a timing function with a bezier curve defined by the points (0.0, 0.0), (0.2, 0.4), (0.7, 0.8), and (1.0, 1.0). A transition timing effect sampler This simple example provides demonstrations of several of the transition effects without a lot of extra fluff. Before we look at code snippets, you might want to take a look at the live demo (assuming your browser supports transitions). You can also take a look directly at the CSS it uses. First, the HTML to create the items we'll be testing our transitions on: \r           <ul>   <li id=\"long1\">Long, gradual transition...<\/li>   <li id=\"fast1\">Very fast transition...<\/li>   <li id=\"delay1\">Long transition with a 2-second delay...<\/li>   <li id=\"easeout\">Using ease-out timing...<\/li>   <li id=\"linear\">Using linear timing...<\/li>   <li id=\"cubic1\">Using cubic-bezier(0.2, 0.4, 0.7, 0.8)...<\/li> <\/ul>\r          Each item has its own ID; the CSS takes care of the rest. Let's take a look at a couple of examples. Using a delay This example performs a four-second font size transition with a two-second delay between the time the user mouses over the element and the beginning of the animation effect: \r           #delay1 {   position: relative;   transition-property: font-size;   transition-duration: 4s;   transition-delay: 2s;   font-size: 14px; }  #delay1:hover {   transition-property: font-size;   transition-duration: 4s;   transition-delay: 2s;   font-size: 36px; }\r          Using a linear transition timing function By default, the timing function used to compute the intermediate steps during the animation sequence provides a gentle acceleration and deceleration curve for the animation effect. If you'd rather have the effect maintain a constant speed for the duration of the animation, you can specify that you'd like to use the linear transition timing function, as shown below. \r           transition-timing-function: linear;\r          There are several other standard timing functions available; see transition-timing-function \u00a0for details. Specifying a cubic bezier timing function You can take even more control over the timing of the animation sequence by specifying your own cubic bezier curve describing the animation speed. For example: \r           transition-timing-function: cubic-bezier(0.2, 0.4, 0.7, 0.8);\r          This establishes a timing function with a bezier curve defined by the points (0.0, 0.0), (0.2, 0.4), (0.7, 0.8), and (1.0, 1.0). Using a delay This example performs a four-second font size transition with a two-second delay between the time the user mouses over the element and the beginning of the animation effect: \r           #delay1 {   position: relative;   transition-property: font-size;   transition-duration: 4s;   transition-delay: 2s;   font-size: 14px; }  #delay1:hover {   transition-property: font-size;   transition-duration: 4s;   transition-delay: 2s;   font-size: 36px; }\r          Using a linear transition timing function By default, the timing function used to compute the intermediate steps during the animation sequence provides a gentle acceleration and deceleration curve for the animation effect. If you'd rather have the effect maintain a constant speed for the duration of the animation, you can specify that you'd like to use the linear transition timing function, as shown below. \r           transition-timing-function: linear;\r          There are several other standard timing functions available; see transition-timing-function \u00a0for details. Specifying a cubic bezier timing function You can take even more control over the timing of the animation sequence by specifying your own cubic bezier curve describing the animation speed. For example: \r           transition-timing-function: cubic-bezier(0.2, 0.4, 0.7, 0.8);\r          This establishes a timing function with a bezier curve defined by the points (0.0, 0.0), (0.2, 0.4), (0.7, 0.8), and (1.0, 1.0). Detecting the completion of a transition There is a single event that is fired when transitions complete. In Firefox, the event is transitionend, in Opera, oTransitionEnd, and in WebKit it is webkitTransitionEnd. See the compatibility table at the bottom for more.\u00a0The transitionend\u00a0event offers two properties:  propertyName A string indicating the name of the CSS property whose transition completed. elapsedTime A float indicating the number of seconds the transition had been running at the time the event fired. This value isn't affected by the value of transition-delay .  As usual, you can use the element.addEventListener()  method to monitor for this event: \r           el.addEventListener(\"transitionend\", updateTransition, true);\r          Note: The \"transitionend\" event doesn't fire if the transition is aborted because the animating property's value is changed before the transition is completed. When property value lists are of different lengths If any property's list of values is shorter than the others, its values are repeated to make them match. For example: \r           div {   transition-property: opacity, left, top, height;   transition-duration: 3s, 5s; }\r          This is treated as if it were: \r           div {   transition-property: opacity, left, top, height;   transition-duration: 3s, 5s, 3s, 5s; }\r          Similarly, if any property's value list is longer than that for transition-property , it's truncated, so if you have the following CSS: \r           div {   transition-property: opacity, left;   transition-duration: 3s, 5s, 2s, 1s; }\r          This gets interpreted as: \r           div {   transition-property: opacity, left;   transition-duration: 3s, 5s; }\r          Using transitions when highlighting menus A common use of CSS is to highlight items in a menu as the user hovers the mouse cursor over them. It's easy to use transitions to make the effect even more attractive. Before we look at code snippets, you might want to take a look at the live demo (assuming your browser supports transitions). You can also take a look directly at the CSS it uses. First we set up the menu using HTML: \r           <div class=\"sidebar\">   <p><a class=\"menuButton\" href=\"home\">Home<\/a><\/p>   <p><a class=\"menuButton\" href=\"about\">About<\/a><\/p>   <p><a class=\"menuButton\" href=\"contact\">Contact Us<\/a><\/p>   <p><a class=\"menuButton\" href=\"links\">Links<\/a><\/p> <\/div>\r          Then we build the CSS to implement the look and feel of our menu. The relevant portions are shown here: \r           .menuButton {   position: relative;   transition-property: background-color, color;   transition-duration: 1s;   transition-timing-function: ease-out;   -webkit-transition-property: background-color, color;   -webkit-transition-duration: 1s;   -o-transition-property: background-color, color;   -o-transition-duration: 1s;   text-align: left;   background-color: grey;   left: 5px;   top: 5px;   height: 26px;   color: white;   border-color: black;   font-family: sans-serif;   font-size: 20px;   text-decoration: none;   -moz-box-shadow: 2px 2px 1px black;   padding: 2px 4px;   border: solid 1px black; }  .menuButton:hover {   position: relative;   transition-property: background-color, color;   transition-duration: 1s;   transition-timing-function: ease-out;   -webkit-transition-property: background-color, color;   -webkit-transition-duration: 1s;   -o-transition-property: background-color, color;   -o-transition-duration: 1s;   background-color:white;   color:black;   -moz-box-shadow: 2px 2px 1px black; }\r          This CSS\u00a0establishes the look of the menu, with the background and text colors both changing when the element is in its :hover  state. Instead of describing the effect at length, you can take a look at the live sample if your browser has transitions support. Using transitions to make JavaScript functionality smooth Transitions are a great tool to make things look much smoother without having to do anything to your JavaScript functionality. Take the following example. <p>Click anywhere to move the ball<\/p> <div id=\"foo\"><\/div>  Using JavaScript you can make the effect of moving the ball to a certain position happen: var f = document.getElementById('foo'); document.addEventListener('click', function(ev){ \u00a0 \u00a0\u00a0f.style.left = (ev.clientX-25)+'px'; \u00a0 \u00a0\u00a0f.style.top = (ev.clientY-25)+'px'; },false);\u00a0 \u00a0   With CSS you can make it smooth without any extra effort. Simply add a transition to the element and any change will happen smoothly: p{   padding-left:60px; } #foo{   border-radius:50px;   width:50px;   height:50px;   background:#c00;   position:absolute;   top:0;   left:0;   -moz-transition: all 1s;    -webkit-transition: all 1s;\u00a0\u00a0   -ms-transition: all 1s;\u00a0\u00a0   -o-transition: all 1s;\u00a0\u00a0   transition: all 1s;\u00a0\u00a0 }  You can play with this here: http:\/\/jsfiddle.net\/RwtHn\/5\/ Using transition events to animate an object In this example, a small box with text inside it moves back and forth across the screen, its background and text colors fading between two values as the animation takes place. If your browser supported HTML5 video and Theora, you would see this demo in action here. Before we look at code snippets, you might want to take a look at the live demo (assuming your browser supports transitions). You can also take a look directly at the CSS it uses. The HTML The HTML for this example is very simple: \r           <!DOCTYPE html> <html>   <head>     <title>CSS Transition Demo<\/title>     <link rel=\"stylesheet\" href=\"transitions.css\" type=\"text\/css\">     <script src=\"transitions.js\" type=\"text\/javascript\"><\/script>   <\/head>   <body onload=\"runDemo()\">     <div class=\"slideRight\">This is a box!<\/div>   <\/body> <\/html>\r          The only thing of note here is that we set the class for our box to \"slideRight\" initially, and when the document is done loading, the runDemo()\u00a0function in the JavaScript code is executed. The CSS In order to create our animation effect, we use two CSS classes, \"slideRight\" and \"slideLeft\". If you want to see the complete CSS\u00a0code, you may look at the transitions.css file in its entirety. Only the relevant bits are shown below: \r           .slideRight {   position: absolute;   -moz-transition-property: background-color, color, left;   -moz-transition-duration: 5s;   -webkit-transition-property: background-color, color, left;   -webkit-transition-duration: 5s;   -o-transition-property: background-color, color, left;   -o-transition-duration: 5s;   background-color: red;   left: 0%;   color: black; }\r          Note that we specify the position property explicitly here. This is necessary because only elements whose position property is expressly defined can have their position animated. The transition-property  property is used to list the CSS\u00a0properties we wish to have animated. In this case, the properties to animate are background-color , color , and left . The transition-duration  property indicates that we wish the animation to take 5 seconds from start to finish. The WebKit and Opera equivalents are included in order to let the example work in the corresponding software. The \"slideRight\" class is used to specify the start point for the animation of moving the element from the left edge toward the right edge of the browser window. As such, it defines the position and color of the element when it's at the beginning of the animation sequence; in particular, the value for its left  property is 0%, indicating it will begin at the left edge of the window. Shown below, the \"slideLeft\" class defines the end point for the animation; that is, the point at which the left-to-right animation will conclude and we will switch to a right-to-left animation. \r           .slideLeft {   position: absolute;   -moz-transition-property: background-color, color, left;   -moz-transition-duration: 5s;   -webkit-transition-property: background-color, color, left;   -webkit-transition-duration: 5s;   -o-transition-property: background-color, color, left;   -o-transition-duration: 5s;   text-align: center;   background-color: blue;   left: 90%;   color: white;   width: 100px;   height: 100px; }\r          The color values have been changed here, in order to cause the background and text colors to change over the duration of the animation sequence. Additionally, the left \u00a0property is 90% here. The JavaScript code Now that we've established the endpoints for the animation sequence, we need to actually initiate the animation. We can do this easily using JavaScript. Note: Once CSS\u00a0animations support is available, JavaScript code won't be necessary to achieve this effect. First, the runDemo()\u00a0function, which is called when the document loads to initialize the animation sequence: \r           function runDemo() {   var el = updateTransition();      \/\/ Set up an event handler to reverse the direction   \/\/ when the transition finishes.      el.addEventListener(\"transitionend\", updateTransition, true); }\r          This is simple enough; it calls the updateTransition()\u00a0function we'll define momentarily, whose job is to set the class for the element we're animating based on which direction we want it to travel in. Then it sets up an event listener to watch for the \"transitionend\" event that's sent when a transition completes; this lets us know when it's time to change the element's class to reverse the direction of the animation. The updateTransition()\u00a0function looks like this: \r           function updateTransition() {   var el = document.querySelector(\"div.slideLeft\");      if (el) {     el.className = \"slideRight\";   } else {     el = document.querySelector(\"div.slideRight\");     el.className = \"slideLeft\";   }      return el; }\r          This locates the element we're animating by looking it up by its class name (we could use an ID here, of course, but humor me). First we look for the class name \"slideLeft\". If this is found, we change the element's class to \"slideRight\". This will initiate the right-to-left translation, since it's time to slide to the left if the element is already at the right edge, which it will be when the \"transitionend\" event arrives and the element's class is \"slideLeft\". If no element is found matching the class \"slideLeft\", we find the element matching \"slideRight\" and change its class to \"slideLeft\", thereby starting the animation in the opposite direction. The HTML The HTML for this example is very simple: \r           <!DOCTYPE html> <html>   <head>     <title>CSS Transition Demo<\/title>     <link rel=\"stylesheet\" href=\"transitions.css\" type=\"text\/css\">     <script src=\"transitions.js\" type=\"text\/javascript\"><\/script>   <\/head>   <body onload=\"runDemo()\">     <div class=\"slideRight\">This is a box!<\/div>   <\/body> <\/html>\r          The only thing of note here is that we set the class for our box to \"slideRight\" initially, and when the document is done loading, the runDemo()\u00a0function in the JavaScript code is executed. The CSS In order to create our animation effect, we use two CSS classes, \"slideRight\" and \"slideLeft\". If you want to see the complete CSS\u00a0code, you may look at the transitions.css file in its entirety. Only the relevant bits are shown below: \r           .slideRight {   position: absolute;   -moz-transition-property: background-color, color, left;   -moz-transition-duration: 5s;   -webkit-transition-property: background-color, color, left;   -webkit-transition-duration: 5s;   -o-transition-property: background-color, color, left;   -o-transition-duration: 5s;   background-color: red;   left: 0%;   color: black; }\r          Note that we specify the position property explicitly here. This is necessary because only elements whose position property is expressly defined can have their position animated. The transition-property  property is used to list the CSS\u00a0properties we wish to have animated. In this case, the properties to animate are background-color , color , and left . The transition-duration  property indicates that we wish the animation to take 5 seconds from start to finish. The WebKit and Opera equivalents are included in order to let the example work in the corresponding software. The \"slideRight\" class is used to specify the start point for the animation of moving the element from the left edge toward the right edge of the browser window. As such, it defines the position and color of the element when it's at the beginning of the animation sequence; in particular, the value for its left  property is 0%, indicating it will begin at the left edge of the window. Shown below, the \"slideLeft\" class defines the end point for the animation; that is, the point at which the left-to-right animation will conclude and we will switch to a right-to-left animation. \r           .slideLeft {   position: absolute;   -moz-transition-property: background-color, color, left;   -moz-transition-duration: 5s;   -webkit-transition-property: background-color, color, left;   -webkit-transition-duration: 5s;   -o-transition-property: background-color, color, left;   -o-transition-duration: 5s;   text-align: center;   background-color: blue;   left: 90%;   color: white;   width: 100px;   height: 100px; }\r          The color values have been changed here, in order to cause the background and text colors to change over the duration of the animation sequence. Additionally, the left \u00a0property is 90% here. The JavaScript code Now that we've established the endpoints for the animation sequence, we need to actually initiate the animation. We can do this easily using JavaScript. Note: Once CSS\u00a0animations support is available, JavaScript code won't be necessary to achieve this effect. First, the runDemo()\u00a0function, which is called when the document loads to initialize the animation sequence: \r           function runDemo() {   var el = updateTransition();      \/\/ Set up an event handler to reverse the direction   \/\/ when the transition finishes.      el.addEventListener(\"transitionend\", updateTransition, true); }\r          This is simple enough; it calls the updateTransition()\u00a0function we'll define momentarily, whose job is to set the class for the element we're animating based on which direction we want it to travel in. Then it sets up an event listener to watch for the \"transitionend\" event that's sent when a transition completes; this lets us know when it's time to change the element's class to reverse the direction of the animation. The updateTransition()\u00a0function looks like this: \r           function updateTransition() {   var el = document.querySelector(\"div.slideLeft\");      if (el) {     el.className = \"slideRight\";   } else {     el = document.querySelector(\"div.slideRight\");     el.className = \"slideLeft\";   }      return el; }\r          This locates the element we're animating by looking it up by its class name (we could use an ID here, of course, but humor me). First we look for the class name \"slideLeft\". If this is found, we change the element's class to \"slideRight\". This will initiate the right-to-left translation, since it's time to slide to the left if the element is already at the right edge, which it will be when the \"transitionend\" event arrives and the element's class is \"slideLeft\". If no element is found matching the class \"slideLeft\", we find the element matching \"slideRight\" and change its class to \"slideLeft\", thereby starting the animation in the opposite direction. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 4.0 (2)  10 10.5 3.2   Property -webkit-transition -moz-transition -ms-transition -o-transition -webkit-transition   Transition ended event webkitTransitionEnd transitionend MSTransitionEnd oTransitionEnd webkitTransitionEnd         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support (Supported) 4.0 (2)  ? ? (Supported)     See also  CSS Transitions CSS Transitions Module Level 3 CSS animatable properties -moz-transition  -moz-transition-property  -moz-transition-duration  -moz-transition-timing-function  -moz-transition-delay   \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_animations","title":"CSS animations","description":"Configuring the animation To create a\u00a0CSS\u00a0animation sequence, you style the element you want to animate with the animation \u00a0property or its sub-properties. This lets you configure the timing and duration of the animation, as well as other details of how the animation sequence should progress. This does not configure the actual appearance of the animation, which is done using the @keyframes \u00a0at-rule as described in Defining the animation sequence using keyframes\u00a0below. The sub-properties of the animation \u00a0property are:  animation-delay  Configures the delay between the time the element is loaded and the beginning of the animation sequence. animation-direction  Configures whether or not the animation should alternate direction on each run through the sequence or reset to the start point and repeat itself. animation-duration  Configures the length of time that an animation should take to complete one cycle. animation-iteration-count  Configures the number of times the animation should repeat; you can specify infinite to repeat the animation indefinitely. animation-name  Specifies the name of the @keyframes \u00a0at-rule describing the animation's keyframes. animation-play-state  Lets you pause and resume the animation sequence. animation-timing-function  Configures the timing of the animation; that is, how the animation transitions through keyframes, by establishing acceleration curves. animation-fill-mode  Configures what values are applied by the animation before and after it is executing.  Defining the animation sequence using keyframes Once you've configured the animation's timing, you need to define the appearance of the animation. This is done by establishing two or more keyframes using the @keyframes  at-rule. Each keyframe describes how the animated element should render at a given time during the animation sequence. Since the timing of the animation is defined in the CSS\u00a0style that configures the animation, keyframes use a percentage  to indicate the time during the animation sequence at which they take place. 0% indicates the first moment of the animation sequence, while 100% indicates the final state of the animation. These two times must be specified so that the browser knows where the animation should start and finish; because they're so important, these two times have special aliases: from and to. You can optionally include additional keyframes that describe intermediate steps along the way from the starting point to the ending point of the animation. Examples Note: The examples here use the -moz- prefix on the animation CSS properties for brevity; the live examples you can click to see in your browser also include the -webkit- prefixed versions. Making text slide across the browser window This simple example styles the <h1>  element so that the text slides in from off the right edge of the browser window. \r           <style type=\"text\/css\">   h1 {     -moz-animation-duration: 3s;     -moz-animation-name: slidein;   }      @-moz-keyframes slidein {     from {       margin-left: 100%;       width: 300%     }          to {       margin-left: 0%;       width: 100%;     }   } <\/style>\r          The style for the <h1> \u00a0element here specifies that the animation should take 3 seconds to execute from start to finish, using the animation-duration  property, and that the name of the @keyframes  at-rule defining the keyframes for the animation sequence is named \"slidein\". If we wanted any custom styling on the <h1>  element to appear in browsers that don't support CSS\u00a0animations, we would include it here as well; however, in this case we don't want any custom styling other than the animation effect. The keyframes are defined using the @keyframes  at-rule. In this case, we have just two keyframes. The first occurs at 0%\u00a0(using the alias from). Here, we configure the left margin of the element to be at 100% (that is, at the far right edge of the containing element), and the width of the element to be 300% (or three times the width of the containing element). This causes the first frame of the animation to have the header drawn off the right edge of the browser window. The second (and final)\u00a0keyframe occurs at 100% (using the alias to). The left margin is set to 0% and the width of the element is set to 100%. This causes the header to finish its animation flush against the left edge of the content area.  View the live example  Adding another keyframe Let's add another keyframe to the previous example's animation. Let's say we want the header's font size to increase as it moves from right to left for a while, then to decrease back to its original size. That's as simple as adding this keyframe: \r           75% {   font-size: 300%;   margin-left: 25%;   width: 150%; }\r          This tells the browser that 75% of the way through the animation sequence, the header should have its left margin at 25% and the width should be 150%.  View the live example  Making it repeat To make the animation repeat itself, simply use the animation-iteration-count  property to indicate how many times to repeat the animation. In this case, let's use infinite to have the animation repeat indefinitely: \r           h1 {   -moz-animation-duration: 3s;   -moz-animation-name: slidein;   -moz-animation-iteration-count: infinite; }\r           View the live example  Making it move back and forth That made it repeat, but it's very odd having it jump back to the start each time it begins animating. What we really want is for it to move back and forth across the screen. That's easily accomplished by setting animation-direction \u00a0to alternate: \r           h1 {   -moz-animation-duration: 3s;   -moz-animation-name: slidein;   -moz-animation-iteration-count: infinite;   -moz-animation-direction: alternate; }\r           View the live example Using animation events You can get additional control over animations -- as well as useful information about them -- by making use of animation events. These events, represented by the AnimationEvent  object, can be used to detect when animations start, finish, and begin a new iteration. Each event includes the time at which it occurred as well as the name of the animation that triggered the event. We'll modify the sliding text example to output some information about each animation event when it occurs, so we can get a look at how they work. Adding the animation event listeners We'll use JavaScript code to listen for all three possible animation events. The setup() function configures our event listeners; we call it when the document is first loaded in order to set things up. \r           function setup() {   var e = document.getElementById(\"watchme\");   e.addEventListener(\"animationstart\", listener, false);   e.addEventListener(\"animationend\", listener, false);   e.addEventListener(\"animationiteration\", listener, false);      var e = document.getElementById(\"watchme\");   e.className = \"slidein\"; }\r          This is pretty standard code; you can get details on how it works in the documentation for element.addEventListener() . The last thing the setup() function here does is set the class on the element we'll be animating to \"slidein\"; we do this to start the animation. Why? Because the animationstart event fires as soon as the animation starts, and in our case, that happens before our code runs. So we'll start the animation ourselves by setting the class of the element to the style that gets animated after the fact. Receiving the events The events get delivered to the listener() function, which is shown below. \r           function listener(e) {   var l = document.createElement(\"li\");   switch(e.type) {     case \"animationstart\":       l.innerHTML = \"Started: elapsed time is \" + e.elapsedTime;       break;     case \"animationend\":       l.innerHTML = \"Ended: elapsed time is \" + e.elapsedTime;       break;     case \"animationiteration\":       l.innerHTML = \"New loop started at time \" + e.elapsedTime;       break;   }   document.getElementById(\"output\").appendChild(l); }\r          This code, too, is very simple. It simply looks at the event.type  to determine which kind of animation event occurred, then adds an appropriate note the <ul>  (unordered list) we're using to log these events. The output, when all is said and done, looks something like this:  Started: elapsed time is 0 New loop started at time 3.01200008392334 New loop started at time 6.00600004196167 Ended: elapsed time is 9.234000205993652  Note that the times are very close to, but not exactly, those expected given the timing established when the animation was configured. Note also that after the final iteration of the animation, the animationiteration event isn't sent; instead, the animationend event is sent. The HTML Just for the sake of completeness, here's the HTML that displays the page content, including the list into which the script inserts information about the received events: \r           <body onload=\"setup()\">   <h1 id=\"watchme\">Watch me move<\/h1>   <p>This example shows how to use CSS animations to make <code>H1<\/code> elements   move across the page.<\/p>   <p>In addition, we output some text each time an animation event fires, so you can see them in action.<\/p>   <ul id=\"output\">   <\/ul> <\/body>\r           View the live example  Making text slide across the browser window This simple example styles the <h1>  element so that the text slides in from off the right edge of the browser window. \r           <style type=\"text\/css\">   h1 {     -moz-animation-duration: 3s;     -moz-animation-name: slidein;   }      @-moz-keyframes slidein {     from {       margin-left: 100%;       width: 300%     }          to {       margin-left: 0%;       width: 100%;     }   } <\/style>\r          The style for the <h1> \u00a0element here specifies that the animation should take 3 seconds to execute from start to finish, using the animation-duration  property, and that the name of the @keyframes  at-rule defining the keyframes for the animation sequence is named \"slidein\". If we wanted any custom styling on the <h1>  element to appear in browsers that don't support CSS\u00a0animations, we would include it here as well; however, in this case we don't want any custom styling other than the animation effect. The keyframes are defined using the @keyframes  at-rule. In this case, we have just two keyframes. The first occurs at 0%\u00a0(using the alias from). Here, we configure the left margin of the element to be at 100% (that is, at the far right edge of the containing element), and the width of the element to be 300% (or three times the width of the containing element). This causes the first frame of the animation to have the header drawn off the right edge of the browser window. The second (and final)\u00a0keyframe occurs at 100% (using the alias to). The left margin is set to 0% and the width of the element is set to 100%. This causes the header to finish its animation flush against the left edge of the content area.  View the live example  Adding another keyframe Let's add another keyframe to the previous example's animation. Let's say we want the header's font size to increase as it moves from right to left for a while, then to decrease back to its original size. That's as simple as adding this keyframe: \r           75% {   font-size: 300%;   margin-left: 25%;   width: 150%; }\r          This tells the browser that 75% of the way through the animation sequence, the header should have its left margin at 25% and the width should be 150%.  View the live example  Making it repeat To make the animation repeat itself, simply use the animation-iteration-count  property to indicate how many times to repeat the animation. In this case, let's use infinite to have the animation repeat indefinitely: \r           h1 {   -moz-animation-duration: 3s;   -moz-animation-name: slidein;   -moz-animation-iteration-count: infinite; }\r           View the live example  Making it move back and forth That made it repeat, but it's very odd having it jump back to the start each time it begins animating. What we really want is for it to move back and forth across the screen. That's easily accomplished by setting animation-direction \u00a0to alternate: \r           h1 {   -moz-animation-duration: 3s;   -moz-animation-name: slidein;   -moz-animation-iteration-count: infinite;   -moz-animation-direction: alternate; }\r           View the live example Adding another keyframe Let's add another keyframe to the previous example's animation. Let's say we want the header's font size to increase as it moves from right to left for a while, then to decrease back to its original size. That's as simple as adding this keyframe: \r           75% {   font-size: 300%;   margin-left: 25%;   width: 150%; }\r          This tells the browser that 75% of the way through the animation sequence, the header should have its left margin at 25% and the width should be 150%.  View the live example  Making it repeat To make the animation repeat itself, simply use the animation-iteration-count  property to indicate how many times to repeat the animation. In this case, let's use infinite to have the animation repeat indefinitely: \r           h1 {   -moz-animation-duration: 3s;   -moz-animation-name: slidein;   -moz-animation-iteration-count: infinite; }\r           View the live example  Making it move back and forth That made it repeat, but it's very odd having it jump back to the start each time it begins animating. What we really want is for it to move back and forth across the screen. That's easily accomplished by setting animation-direction \u00a0to alternate: \r           h1 {   -moz-animation-duration: 3s;   -moz-animation-name: slidein;   -moz-animation-iteration-count: infinite;   -moz-animation-direction: alternate; }\r           View the live example Using animation events You can get additional control over animations -- as well as useful information about them -- by making use of animation events. These events, represented by the AnimationEvent  object, can be used to detect when animations start, finish, and begin a new iteration. Each event includes the time at which it occurred as well as the name of the animation that triggered the event. We'll modify the sliding text example to output some information about each animation event when it occurs, so we can get a look at how they work. Adding the animation event listeners We'll use JavaScript code to listen for all three possible animation events. The setup() function configures our event listeners; we call it when the document is first loaded in order to set things up. \r           function setup() {   var e = document.getElementById(\"watchme\");   e.addEventListener(\"animationstart\", listener, false);   e.addEventListener(\"animationend\", listener, false);   e.addEventListener(\"animationiteration\", listener, false);      var e = document.getElementById(\"watchme\");   e.className = \"slidein\"; }\r          This is pretty standard code; you can get details on how it works in the documentation for element.addEventListener() . The last thing the setup() function here does is set the class on the element we'll be animating to \"slidein\"; we do this to start the animation. Why? Because the animationstart event fires as soon as the animation starts, and in our case, that happens before our code runs. So we'll start the animation ourselves by setting the class of the element to the style that gets animated after the fact. Receiving the events The events get delivered to the listener() function, which is shown below. \r           function listener(e) {   var l = document.createElement(\"li\");   switch(e.type) {     case \"animationstart\":       l.innerHTML = \"Started: elapsed time is \" + e.elapsedTime;       break;     case \"animationend\":       l.innerHTML = \"Ended: elapsed time is \" + e.elapsedTime;       break;     case \"animationiteration\":       l.innerHTML = \"New loop started at time \" + e.elapsedTime;       break;   }   document.getElementById(\"output\").appendChild(l); }\r          This code, too, is very simple. It simply looks at the event.type  to determine which kind of animation event occurred, then adds an appropriate note the <ul>  (unordered list) we're using to log these events. The output, when all is said and done, looks something like this:  Started: elapsed time is 0 New loop started at time 3.01200008392334 New loop started at time 6.00600004196167 Ended: elapsed time is 9.234000205993652  Note that the times are very close to, but not exactly, those expected given the timing established when the animation was configured. Note also that after the final iteration of the animation, the animationiteration event isn't sent; instead, the animationend event is sent. The HTML Just for the sake of completeness, here's the HTML that displays the page content, including the list into which the script inserts information about the received events: \r           <body onload=\"setup()\">   <h1 id=\"watchme\">Watch me move<\/h1>   <p>This example shows how to use CSS animations to make <code>H1<\/code> elements   move across the page.<\/p>   <p>In addition, we output some text each time an animation event fires, so you can see them in action.<\/p>   <ul id=\"output\">   <\/ul> <\/body>\r           View the live example  Adding the animation event listeners We'll use JavaScript code to listen for all three possible animation events. The setup() function configures our event listeners; we call it when the document is first loaded in order to set things up. \r           function setup() {   var e = document.getElementById(\"watchme\");   e.addEventListener(\"animationstart\", listener, false);   e.addEventListener(\"animationend\", listener, false);   e.addEventListener(\"animationiteration\", listener, false);      var e = document.getElementById(\"watchme\");   e.className = \"slidein\"; }\r          This is pretty standard code; you can get details on how it works in the documentation for element.addEventListener() . The last thing the setup() function here does is set the class on the element we'll be animating to \"slidein\"; we do this to start the animation. Why? Because the animationstart event fires as soon as the animation starts, and in our case, that happens before our code runs. So we'll start the animation ourselves by setting the class of the element to the style that gets animated after the fact. Receiving the events The events get delivered to the listener() function, which is shown below. \r           function listener(e) {   var l = document.createElement(\"li\");   switch(e.type) {     case \"animationstart\":       l.innerHTML = \"Started: elapsed time is \" + e.elapsedTime;       break;     case \"animationend\":       l.innerHTML = \"Ended: elapsed time is \" + e.elapsedTime;       break;     case \"animationiteration\":       l.innerHTML = \"New loop started at time \" + e.elapsedTime;       break;   }   document.getElementById(\"output\").appendChild(l); }\r          This code, too, is very simple. It simply looks at the event.type  to determine which kind of animation event occurred, then adds an appropriate note the <ul>  (unordered list) we're using to log these events. The output, when all is said and done, looks something like this:  Started: elapsed time is 0 New loop started at time 3.01200008392334 New loop started at time 6.00600004196167 Ended: elapsed time is 9.234000205993652  Note that the times are very close to, but not exactly, those expected given the timing established when the animation was configured. Note also that after the final iteration of the animation, the animationiteration event isn't sent; instead, the animationend event is sent. The HTML Just for the sake of completeness, here's the HTML that displays the page content, including the list into which the script inserts information about the received events: \r           <body onload=\"setup()\">   <h1 id=\"watchme\">Watch me move<\/h1>   <p>This example shows how to use CSS animations to make <code>H1<\/code> elements   move across the page.<\/p>   <p>In addition, we output some text each time an animation event fires, so you can see them in action.<\/p>   <ul id=\"output\">   <\/ul> <\/body>\r           View the live example  See also  AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes  Detecting CSS animation support This post from Mozilla hacks, provides two additional examples:  http:\/\/jsfiddle.net\/T88X5\/3\/light\/ http:\/\/jsfiddle.net\/RtvCB\/9\/light\/"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_animations\/Detecting_CSS_animation_support","title":"Detecting CSS animation support","description":"Testing for CSS animation support This code will check to see if CSS animation support is available: \r           var animation = false,     animationstring = 'animation',     keyframeprefix = '',     domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),     pfx  = '';  if( elm.style.animationName ) { animation = true; }      if( animation === false ) {   for( var i = 0; i < domPrefixes.length; i++ ) {     if( elm.style[ domPrefixes[i] + 'AnimationName' ] !== undefined ) {       pfx = domPrefixes[ i ];       animationstring = pfx + 'Animation';       keyframeprefix = '-' + pfx.toLowerCase() + '-';       animation = true;       break;     }   } }\r          For starters we define a few variables. We assume that animation is not supported by setting animation to false. We set the animationstring to animation which is the property we want to set later on. We create an array of browser prefixes to loop over and we set pfx to an empty string. Then we check if the CSS animationName  property on the style collection for the element specified by the variable elm is set. This means the browser supports CSS animation without any prefix, which, to date, none of them do. If the browser does not support non-prefixed animation and animation is still false, we iterate over all the possible prefixes, since all the major browsers are currently prefixing this property and changing its name to AnimationName instead. Once this code is finished running, the value of animation will be false if CSS animation support isn't available, or it will be true. If it is true then both the animation property name and the keyframe prefix will be the right ones. So if you use a new Firefox, the property will be MozAnimation and the keyframe prefix -moz- and with Chrome it'll be WebkitAnimation and -webkit-. Notice browsers don't make it easy with the switching between camelCase and hyphen-ation. Animating using the correct syntax for different browsers Now that you know if CSS animation is supported or not, we can animate. \r           if( animation === false ) {    \/\/ animate in JavaScript fallback  } else {   elm.style[ animationstring ] = 'rotate 1s linear infinite';    var keyframes = '@' + keyframeprefix + 'keyframes rotate { '+                     'from {' + keyframeprefix + 'transform:rotate( 0deg ) }'+                     'to {' + keyframeprefix + 'transform:rotate( 360deg ) }'+                   '}';    if( document.styleSheets && document.styleSheets.length ) {        document.styleSheets[0].insertRule( keyframes, 0 );    } else {      var s = document.createElement( 'style' );     s.innerHTML = keyframes;     document.getElementsByTagName( 'head' )[ 0 ].appendChild( s );    }    }\r          This code looks at the value of animation; if it's false, we know we need to use our JavaScript fallback code to perform our animation. Otherwise, we can use JavaScript to create the desired CSS animation effects. Setting the animation property is easy; simply update its value in the style collection. However, adding keyframes is trickier, since they're not defined using traditional CSS syntax (which makes them more flexible, but harder to define from script). To define our keyframes using JavaScript, we need to write them out as a CSS string. All we do is set up a keyframes variable is set up, prefixing each attribute as it's constructed. This variable, once constructed, contains the complete description of all the keyframes needed by our animation sequence. The next task is to actually add the keyframes to the page's CSS. The first thing to do is look to see if there's already a style sheet on the document; if so, we simply insert the keyframe description into that stylesheet; this is done in lines 13-15. If there isn't already a style sheet, a new <style>  element is created, and its content is set to the value of keyframes. Then the new <style>  element is inserted into the document's <head> , thereby adding the new style sheet to the document.  View on jsFiddle  See also  CSS animations animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_CSS_multi-column_layouts","title":"Using CSS multi-column layouts","description":"Using columns Column count and width Two CSS properties control whether and how many columns will appear: column-count  and column-width . The column-count property sets the number of columns to a particular number. E.g., \r           <div style=\"column-count:2\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          will display the content in two columns (if you're using a multi-column compliant browser): Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The column-width property sets the minimum desired column width. If column-count is not also set, then the browser will automatically make as many columns as fit in the available width. \r           <div style=\"column-width:20em;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum<\/div>\r          becomes: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The exact details are described in the CSS3 specification. In a multi-column block, content is automatically flowed from one column into the next as needed. All HTML, CSS and DOM functionality is supported within columns, as are editing and printing. The columns shorthand Most of the time, the Web designer use one of the two CSS properties: column-count  or column-width . As values for these properties does not overlap, it is often convenient to use the shorthand columns . E.g. The CSS declaration column-width:12em can be replaced by: \r           <div style=\"columns:12em\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The CSS declaration column-count:4 can be replaced by: \r           <div style=\"columns:4\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The two CSS declarations column-width:8em and column-count:12 can be replaced by: \r           <div style=\"columns:12 8em\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumHeight Balancing The CSS3 Column specification requires that the column heights must be balanced: that is, the browser automatically sets the maximum column height so that the heights of the content in each column are approximately equal. Firefox does this. However, in some situations it is also useful to set the maximum height of the columns explicitly, and then lay out content starting at the first column and creating as many columns as necessary, possibly overflowing to the right. Therefore, if the height is constrained, by setting the CSS height  or max-height  properties on a multi-column block, each column is allowed to grow to that height and no further before adding new column. This mode is also much more efficient for layout.Column Gaps There is a gap between columns. The recommended default is 1em. This size can be changed by applying the column-gap  property to the multi-column block: \r           <div style=\"column-width:20em; column-gap:2em;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumColumn count and width Two CSS properties control whether and how many columns will appear: column-count  and column-width . The column-count property sets the number of columns to a particular number. E.g., \r           <div style=\"column-count:2\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          will display the content in two columns (if you're using a multi-column compliant browser): Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The column-width property sets the minimum desired column width. If column-count is not also set, then the browser will automatically make as many columns as fit in the available width. \r           <div style=\"column-width:20em;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum<\/div>\r          becomes: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The exact details are described in the CSS3 specification. In a multi-column block, content is automatically flowed from one column into the next as needed. All HTML, CSS and DOM functionality is supported within columns, as are editing and printing. The columns shorthand Most of the time, the Web designer use one of the two CSS properties: column-count  or column-width . As values for these properties does not overlap, it is often convenient to use the shorthand columns . E.g. The CSS declaration column-width:12em can be replaced by: \r           <div style=\"columns:12em\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The CSS declaration column-count:4 can be replaced by: \r           <div style=\"columns:4\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum The two CSS declarations column-width:8em and column-count:12 can be replaced by: \r           <div style=\"columns:12 8em\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumHeight Balancing The CSS3 Column specification requires that the column heights must be balanced: that is, the browser automatically sets the maximum column height so that the heights of the content in each column are approximately equal. Firefox does this. However, in some situations it is also useful to set the maximum height of the columns explicitly, and then lay out content starting at the first column and creating as many columns as necessary, possibly overflowing to the right. Therefore, if the height is constrained, by setting the CSS height  or max-height  properties on a multi-column block, each column is allowed to grow to that height and no further before adding new column. This mode is also much more efficient for layout.Column Gaps There is a gap between columns. The recommended default is 1em. This size can be changed by applying the column-gap  property to the multi-column block: \r           <div style=\"column-width:20em; column-gap:2em;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit,  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat  nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa  qui officia deserunt mollit anim id est laborum<\/div>\r          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumGraceful Degradation The column properties will just be ignored by non-columns-supporting browsers. Therefore it's relatively easy to create a layout that will display in a single column in those browsers and use multiple columns in supporting browsers. Note that not all browsers supports these properties unprefixed. To make use of this feature in most today's browsers, each property must be written thrice: once with the  -moz prefix, once with the  -webkit prefix and once without prefix.Conclusion CSS3 columns are a layout primitive that will help Web developers make the best use of screen real estate. Imaginative developers may find many uses for them, especially with the automatic height balancing feature.See also  CSS Reference The column-related CSS properties: column-width , column-count , column-gap , column-rule , column-rule-width , column-rule-style , column-rule-color , column-span , column-fill , columns  http:\/\/weblogs.mozillazine.org\/roc\/a...18_for_we.html  \u00a0 HTML5 DocumentationHTMLAudio\/Video Canvas WebGL SVG MathML WebForms AppCache Microformats SemanticTagsJavascriptStorage IndexDB WebSockets WebWorkers Events Drag\/Drop ProtocolHandler Geolocation FocusCSSNewSelectors Typography Visual Effects"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-appearance","title":"-moz-appearance","description":"The -moz-appearance CSS property is used in Gecko (Firefox) to display an element using a platform-native styling based on the operating system's theme. This property is frequently used in XUL stylesheets to design custom widgets with platform-appropriate styling. It is also used in the XBL implementations of the widgets that ship with the Mozilla platform.  Initial value : none  Applies to: all elements Inherited : no Media: visual    Computed value : as specified  Syntax  -moz-appearance:  <appearance> Values <appearance> is one of the following:  none No special styling is applied. (Default) button The element is drawn like a button. checkbox The element is drawn like a checkbox, including only the actual \"checkbox\" portion. checkbox-container The element is drawn like a container for a checkbox, which may include a prelighting background effect under certain platforms. Normally a would contain a label and a checkbox. checkbox-small   Obsolete since Gecko 1.9.1 dialog The element is styled like a dialog box, which includes background color and other properties. listbox menuitem The element is styled as menu item, item is highlighted when hovered. menulist menulist-button The element is styled as a button that would indicate a menulist can be opened. menulist-textfield The element is styled as the text field for a menulist. (Not implemented for the Windows platform) menupopup progressbar The element is styled like a progress bar. radio The element is drawn like a radio button, including only the actual \"radio button\" portion. radio-container The element is drawn like a container for a radio button, which may include a prelighting background effect under certain platforms. Normally would contain a label and a radio button. radio-small   Obsolete since Gecko 1.9.1 resizer scrollbar scrollbarbutton-down scrollbarbutton-left scrollbarbutton-right scrollbarbutton-up scrollbartrack-horizontal scrollbartrack-vertical separator statusbar tab tab-left-edge   Obsolete tabpanels textfield textfield-multiline toolbar toolbarbutton toolbox -moz-mac-unified-toolbar  New in Firefox 3.5  Mac OS\u00a0X only. This causes the toolbar and title bar to render using the unified toolbar style common to Mac OS\u00a0X 10.4 and later applications. -moz-win-borderless-glass  New in Firefox 4.0  Used for Windows Vista and later. This style applies the Aero Glass effect -- but without a border -- to the element. -moz-win-browsertabbar-toolbox  New in Firefox 3  Windows Vista and later. This toolbox style is meant to be used for the tab bar in a browser. -moz-win-communications-toolbox  New in Firefox 3  Windows Vista and later. This toolbox style is meant to be used in communications and productivity applications. Corresponding foreground color is -moz-win-communicationstext. -moz-win-glass  New in Firefox 3.5  Windows Vista and later. This style applies the Aero Glass effect to the element. -moz-win-media-toolbox  New in Firefox 3  Windows Vista and later. This toolbox style is meant to be used in applications that manage media objects. Corresponding foreground color is -moz-win-mediatext. tooltip treeheadercell treeheadersortarrow treeitem treetwisty treetwistyopen treeview window Examples  .exampleone { \t-moz-appearance: toolbarbutton; }  Browser compatibility    Browser Lowest version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.0) -moz-appearance   Opera (Presto) --- ---   Safari | Chrome | WebKit 3.0 | 1.0 | 522 -webkit-appearance    Specifications  CSS 3 Basic User Interface #appearance\u00a0 Candidate Recommendation 2004-05-11, outdated CSS 3 Basic User Interface #appearance\u00a0 Editor's draft (work in progress)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-background-inline-policy","title":"-moz-background-inline-policy","description":"In Gecko-based applications like Firefox, the -moz-background-inline-policy CSS property specifies how the background image of an inline element is determined when the content of the inline element wraps onto multiple lines. The choice of position has significant effects on repetition.  Initial value : continuous Applies to: inline elements Inherited : no Media: visual   Computed value : as specified  Syntax  -moz-background-inline-policy:  bounding-box | continuous | each-box  Values  bounding-box\u00a0 The background image is positioned (and repeated) in the smallest rectangle that contains all of the inline boxes for the element. It is then clipped to be visible only within those boxes, according to the -moz-background-clip  property. continuous The background image is positioned (and repeated) as if the inline box were not broken across lines, and then this long rectangle is sliced into pieces for each line. each-box The background image is positioned (and repeated) separately for each box of the inline element. This means that an image with background-repeat : no-repeat may be repeated multiple times.  Examples  Example showing the values of -moz-background-inline-policy hixie.ch\/tests\/adhoc\/css\/background\/inline\/policy\/ Notes -moz-background-inline-policy is supported since Gecko 1.3 (Firefox 1.0)."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-binding","title":"-moz-binding","description":"The -moz-binding CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.  Initial value : none  Applies to: all elements (not generated content or pseudo-elements) Inherited : no Media: visual   Computed value : as specified  Syntax \u00a0-moz-binding:\u00a0 <uri> | none Values  <uri> The URI for the XBL binding (including the fragment identifier). none No XBL binding is applied to the element.  Examples  .exampleone {     -moz-binding: url(\"http:\/\/www.example.org\/xbl\/htmlBindings.xml#checkbox\"); }See also  XBL Reference: Binding Attachment and Detachment XUL Tutorial: Introduction to XBL"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-bottom-colors","title":"-moz-border-bottom-colors","description":"In Mozilla applications like Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border. See the -moz-border-top-colors  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-left-colors","title":"-moz-border-left-colors","description":"In Mozilla applications like Firefox, the -moz-border-left-colors sets a list of colors for the left border. See the -moz-border-top-colors  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-right-colors","title":"-moz-border-right-colors","description":"In Mozilla applications like Firefox, -moz-border-right-colors sets a list of colors for the right border. See the -moz-border-top-colors  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-top-colors","title":"-moz-border-top-colors","description":"In Mozilla applications like Firefox, the -moz-border-top-colors  CSS property sets a list of colors for the top border. When an element has a border that is larger than a single CSS pixel, each line of pixels uses the next color specified in this property, from the outside in. This eliminates the need for nested boxes. If the border is wider than the number of specified colors, the remaining part of the border is the innermost color specified.  Initial value: none Applies to: all elements Inherited: no  It does not apply  if border-style  is dashed or dotted. to tables with border-collapse: collapse.  Syntax -moz-border-top-colors:  [<color>]* <color> | none  Values Accepts a white-space separated list of color values. <color>Specifies the color of a line of pixels in the bottom border. transparent is valid. See <color>  values for possible units.noneDefault, no colors are drawn or border-color  is used, if specified. Related properties  -moz-border-right-colors  sets colors for the right border -moz-border-bottom-colors  sets colors for the bottom border -moz-border-left-colors  sets colors for the left border  Examples  \/*  Other browsers use a \"inset gold 10px\" border  *\/  border: inset gold 10px;  color:gold;  background:gray;  padding:1em; -moz-border-top-colors:    #e00 #c30 #c50 #c60 #c70 #c80 #c90 #ca0 #cb0 #cc0; -moz-border-right-colors:   red #f60 #f80 #f90 #fa0 #fb0 #fc0 #fd0 #fe0 #ff0; -moz-border-bottom-colors:  red #f60 #f80 #f90 #fa0 #fb0 #fc0 #fd0 #fe0 #ff0; -moz-border-left-colors:   #e00 #c30 #c50 #c60 #c70 #c80 #c90 #ca0 #cb0 #cc0;   \/*  Other browsers use a \"solid 1.5em\" border  *\/  border: solid 1.5em;  -moz-border-radius:1.5em;  border-radius:1.5em; -moz-border-top-colors:    maroon maroon khaki maroon khaki maroon maroon transparent; -moz-border-right-colors:  maroon maroon khaki maroon khaki maroon maroon magenta; -moz-border-bottom-colors: maroon maroon khaki maroon khaki maroon maroon transparent; -moz-border-left-colors:   maroon maroon khaki maroon khaki maroon maroon transparent; Specifications Non-standard      Browser compatibility Supported since Gecko 1.0 (Firefox 1.0), no support in other major browsers. See also border-color"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-align","title":"box-align","description":"The CSS box-align property specifies how an element aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box. The direction of layout depends on the element's orientation: horizontal or vertical.  Initial value : stretch  Applies to: elements with a CSS display  value of box  or inline-box  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  box-align:         start | center | end | baseline | stretch     \/* As specified *\/ -moz-box-align:    start | center | end | baseline | stretch     \/* Mozilla *\/ -webkit-box-align: start | center | end | baseline | stretch     \/* WebKit *\/  Values  start The box aligns contents at the start, leaving any extra space at the end. center The box aligns contents in the center, dividing any extra space equally between the start and the end. end The box aligns contents at the end, leaving any extra space at the start. baseline The box aligns the baselines of the contents (lining up the text). This only applies if the box's orientation is horizontal. stretch The box stretches the contents so that there is no extra space in the box.  Examples \r           <!DOCTYPE html> <html>   <head>     <title>CSS box-align example<\/title>     <style>       div.example {         display: box;                   \/* As specified *\/         display: -moz-box;              \/* Mozilla *\/         display: -webkit-box;           \/* WebKit *\/                  \/* Make this box taller than the children,             so there is room for the box-pack *\/         height: 400px;                             \/* Make this box wider than the children            so there is room for the box-align *\/         width: 300px;          \/* Children should be oriented vertically *\/         box-orient: vertical;           \/* As specified *\/         -moz-box-orient: vertical;      \/* Mozilla *\/         -webkit-box-orient: vertical;   \/* WebKit *\/          \/* Align children to the horizontal center of this box *\/         box-align: center;              \/* As specified *\/         -moz-box-align: center;         \/* Mozilla *\/         -webkit-box-align: center;      \/* WebKit *\/                  \/* Pack children to the bottom of this box *\/         box-pack: end;                  \/* As specified *\/         -moz-box-pack: end;             \/* Mozilla *\/         -webkit-box-pack: end;          \/* WebKit *\/       }       div.example > p {                     \/* Make children narrower than their parent,             so there is room for the box-align *\/          width: 200px;       }     <\/style>   <\/head>   <body>     <div class=\"example\">       <p>I will be second from the bottom of div.example, centered horizontally.<\/p>       <p>I will be on the bottom of div.example, centered horizontally.<\/p>     <\/div>   <\/body> <\/html>\r          Notes The edge of the box designated the start for alignment purposes depends on the box's orientation:    Horizontal top   Vertical left    The edge opposite to the start is designated the end. If the alignment is set using the element's align attribute, then the style is ignored. Specifications Flexible Box Layout Module (W3C Working Draft) Note:\u00a0The current state of this specification does not reflect Mozilla's or WebKit's implementation.  Old Flexible Box Layout Module Note:\u00a0WebKit and Mozilla's implementations reflect this version of the specification  See also box-orient , box-direction , box-pack"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-direction","title":"box-direction","description":"The CSS box-direction property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).  Initial value : normal Applies to: elements with a CSS display  value of box  or inline-box  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  box-direction:         normal | reverse | inherit      \/* As specified *\/ -moz-box-direction:    normal | reverse | inherit      \/* Mozilla *\/ -webkit-box-direction: normal | reverse | inherit      \/* WebKit *\/  Values  normal The box lays out its contents from the start (the left or top edge). reverse The box lays out its contents from the end (the right or bottom edge).  Examples \r           .example {   \/* bottom-to-top layout *\/   box-direction: reverse;           \/* As specified *\/   -moz-box-direction: reverse;      \/* Mozilla *\/   -webkit-box-direction: reverse;   \/* WebKit *\/ }\r          Notes The edge of the box designated the start for layout purposes depends on the box's orientation:    Horizontal left   Vertical top    The edge opposite to the start is designated the end. If the direction is set using the element's dir attribute, then the style is ignored. Specifications Flexible Box Layout Module (W3C Working Draft) Note:\u00a0The current state of this specification does not reflect Mozilla's or WebKit's implementation.  Old Flexible Box Layout Module Note:\u00a0WebKit and Mozilla's implementations reflect this version of the specification  See also box-orient , box-pack , box-align"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-flex","title":"box-flex","description":"The CSS box-flex property specifies how a box grows to fill the box that contains it, in the direction of the containing box's layout.  Initial value : 0 Applies to: elements that are direct children of an element with a CSS display  value of box  or inline-box  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax box-flex: number           \/* As specified *\/ -moz-box-flex: number      \/* Mozilla *\/ -webkit-box-flex: number   \/* WebKit *\/  Values  0 The box does not grow. > 0 The box grows to fill a proportion of the available space.  Examples \r           <!DOCTYPE html> <html>   <head>   <\/head>   <body>     <style>       div.example {         display: box;         display: -moz-box;         display: -webkit-box;                       }       div.example > p:nth-child(1) {         box-flex: 1;            \/* As specified *\/         -moz-box-flex: 1;       \/* Mozilla *\/         -webkit-box-flex: 1;    \/* WebKit *\/       }       div.example > p:nth-child(2) {         box-flex: 0;            \/* As specified *\/         -moz-box-flex: 0;       \/* Mozilla *\/         -webkit-box-flex: 0;    \/* WebKit *\/       }     <\/style>     <div class=\"example\">       <p>I will expand to fill extra space<\/p>       <p>I will not expand<\/p>     <\/div>   <\/body> <\/html>\r          Notes The containing box allocates the available extra space in proportion to the flex value of each of the content elements. Content elements that have zero flex do not grow. If only one content element has nonzero flex, then it grows to fill the available space. Content elements that have the same flex grow by the same absolute amounts. If the flex value is set using the element's flex attribute, then the style is ignored. To make XUL elements in a containing box the same size, set the containing box's equalsize attribute to the value always. This attribute does not have a corresponding CSS property. A trick to make all content elements in a containing box the same size, is to give them all a fixed size (e.g. height: 0), and the same box-flex value greater than zero (e.g.\u00a0box-flex: 1). Specifications Flexible Box Layout Module (W3C Working Draft) Note:\u00a0The current state of this specification does not reflect Mozilla's or WebKit's implementation.  Old Flexible Box Layout Module Note:\u00a0WebKit and Mozilla's implementations reflect this version of the specification  See also -moz-box-orient , box-pack , -moz-box-direction  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-ordinal-group","title":"-moz-box-ordinal-group","description":"Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group. Values Values must be integers greater than zero. The default value for this property is 1. Examples \r           <style type=\"text\/css\">   #Flexbox {     display: -ms-box;     display: -moz-box;     display: -webkit-box;   }     #text1 {     background: red;     -ms-box-ordinal-group: 4;     -moz-box-ordinal-group: 4;     -webkit-box-ordinal-group: 4;   }     #text2 {     background: green;     -ms-box-ordinal-group: 3;     -moz-box-ordinal-group: 3;     -webkit-box-ordinal-group: 3;   }     #text3 {     background: blue;     -ms-box-ordinal-group: 2;     -moz-box-ordinal-group: 2;     -webkit-box-ordinal-group: 2;   }     #text4 {     background: orange;   } <\/style>  <div id=\"Flexbox\">       <div id=\"text1\">text 1<\/div>       <div id=\"text2\">text 2<\/div>       <div id=\"text3\">text 3<\/div>       <div id=\"text4\">text 4<\/div> <\/div>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-orient","title":"box-orient","description":"The CSS box-orient property specifies whether an element lays out its contents horizontally or vertically. For example, XUL box  and hbox  elements lay out their contents horizontally by default, but XUL vbox  elements lay out their contents vertically by default. HTML DOM elements lay out their contents along the inline-axis by default. This CSS property will only apply to HTML elements with a CSS display  value of box  or inline-box .  Initial value : horizontal  (XUL) Initial value : inline-axis  (HTML) Applies to: elements with a CSS display  value of box  or inline-box  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  box-orient:         horizontal | vertical | inline-axis | block-axis | inherit      \/* As specified *\/ -moz-box-orient:    horizontal | vertical | inline-axis | block-axis | inherit      \/* Mozilla *\/ -webkit-box-orient: horizontal | vertical | inline-axis | block-axis | inherit      \/* WebKit *\/  Values  horizontal The box lays out its contents horizontally. vertical The box lays out its contents vertically. inline-axis (HTML) The box displays its children along the inline axis. block-axis (HTML) The box displays its children along the block axis.  The inline and block axes are the writing-mode dependent keywords which, in English, map to horizontal and vertical respectively. Examples \r           <!DOCTYPE html> <html>   <head>     <title>CSS box-orient example<\/title>     <style>       div.example {         display: box;                     \/* As specified *\/         display: -moz-box;                \/* Mozilla *\/         display: -webkit-box;             \/* WebKit *\/          \/* Children should be oriented vertically *\/         box-orient: horizontal;           \/* As specified *\/         -moz-box-orient: horizontal;      \/* Mozilla *\/         -webkit-box-orient: horizontal;   \/* WebKit *\/       }     <\/style>   <\/head>   <body>     <div class=\"example\">       <p>I will be to the left of my sibling.<\/p>       <p>I will be to the right of my sibling.<\/p>     <\/div>   <\/body> <\/html>\r          Notes For XUL elements, if the orientation is set using the element's orient  attribute, then the style is ignored. Specifications Flexible Box Layout Module (W3C Working Draft) Note:\u00a0The current state of this specification does not reflect Mozilla's or WebKit's implementation.  Old Flexible Box Layout Module Note:\u00a0WebKit and Mozilla's implementations reflect this version of the specification  See also box-direction , box-pack , box-align"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-pack","title":"box-pack","description":"The CSS box-pack property specifies how a box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box. The direction of layout depends on the element's orientation: horizontal or vertical.  Initial value : start  Applies to: elements with a CSS display  value of box  or inline-box  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  box-pack:         start | center | end | justify     \/* As specified *\/ -moz-box-pack:    start | center | end | justify     \/* Mozilla *\/ -webkit-box-pack: start | center | end | justify     \/* WebKit *\/  Values  start The box packs contents at the start, leaving any extra space at the end. center The box packs contents in the center, dividing any extra space equally between the start and the end. end The box packs contents at the end, leaving any extra space at the start. justify The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start.  Examples \r           <!DOCTYPE html> <html>   <head>     <title>CSS box-pack example<\/title>     <style>       div.example {         display: box;                   \/* As specified *\/         display: -moz-box;              \/* Mozilla *\/         display: -webkit-box;           \/* WebKit *\/          \/* Make this box taller than the children,             so there is room for the box-pack *\/         height: 400px;                             \/* Children should be oriented vertically *\/         box-orient: vertical;           \/* As specified *\/         -moz-box-orient: vertical;      \/* Mozilla *\/         -webkit-box-orient: vertical;   \/* WebKit *\/          \/* Align children to the horizontal center of this box *\/         box-align: center;              \/* As specified *\/         -moz-box-align: center;         \/* Mozilla *\/         -webkit-box-align: center;      \/* WebKit *\/          \/* Pack children to the bottom of this box *\/         box-pack: end;                  \/* As specified *\/         -moz-box-pack: end;             \/* Mozilla *\/         -webkit-box-pack: end;          \/* WebKit *\/       }       div.example > p {                     \/* Make children narrower than their parent,             so there is room for the box-align *\/          width: 200px;       }     <\/style>   <\/head>   <body>     <div class=\"example\">       <p>I will be second from the bottom of div.example, centered horizontally.<\/p>       <p>I will be on the bottom of div.example, centered horizontally.<\/p>     <\/div>   <\/body> <\/html>\r          Notes The edge of the box designated the start for packing purposes depends on the box's orientation and direction:    \u00a0 Normal Reverse   Horizontal left right   Vertical top bottom    The edge opposite to the start is designated the end. If the packing is set using the element's pack attribute, then the style is ignored. Specifications Flexible Box Layout Module (W3C Working Draft) Note:\u00a0The current state of this specification does not reflect Mozilla's or WebKit's implementation.  Old Flexible Box Layout Module Note:\u00a0WebKit and Mozilla's implementations reflect this version of the specification  See also box-orient , box-direction , box-align"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-filter","title":"-moz-filter","description":"Initial value : none Applies to: graphics and container elements Inherited :\u00a0no Percentages: n\/a Media: visual   Computed value :  Syntax  filter: url(svg-url#element-id)   Examples  .target { filter: url(#c1); }  .anothertarget { filter: url(resources.svg#c1); }  Specifications  Filter Effects 1.0 Working Draft  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? 3.5 (1.9.1) --[*] ? ?         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ?  ?      [*] From Internet Explorer 5.5 to Internet Explorer 7.0 included, that browser implemented a non-standard filter property. The syntax was completely different from this one and is not documented here. See also  Applying SVG effects to HTML content The mask  property SVG"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-float-edge","title":"-moz-float-edge","description":"Related bugs    bug 432891"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-font-feature-settings","title":"-moz-font-feature-settings","description":"The -moz-font-feature-settings CSS property allows control over advanced typographic features in OpenType fonts.  Initial value : normal  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  -moz-font-feature-settings : normal | <string> where <string> is defined as quoted list of OpenType feature tag-value pairs Values  normal Text is laid out using default settings. <string> When rendering text, the list of OpenType feature tags is passed to the text layout engine to enable or disable font features.\u00a0 For example, \"tagx=1\" implies that the OpenType feature 'tagx' is enabled.\u00a0 Using a value of 0 disables a given feature.\u00a0 For non-boolean OpenType features (e.g. stylistic alternates), the value implies a particular glyph to be selected.  Examples  \/* use small-cap alternate glyphs *\/ .smallcaps { -moz-font-feature-settings: \"smcp=1\"; }  \/* convert both upper and lowercase to small caps (affects punctuation also) *\/ .allsmallcaps { -moz-font-feature-settings: \"c2sc=1, smcp=1\"; }  \/* enable historical forms *\/ .hist { -moz-font-feature-settings: \"hist=1\"; }  \/* disable common ligatures, usually on by default *\/ .noligs { -moz-font-feature-settings: \"liga=0\"; }  \/* enable tabular (monospaced) figures *\/ td.tabular { -moz-font-feature-settings: \"tnum=1\"; }  \/* enable automatic fractions *\/ .fractions { -moz-font-feature-settings: \"frac=1\"; }  \/* use the second available swash character *\/ .swash { -moz-font-feature-settings: \"swsh=2\"; }  \/* enable stylistic set 7 *\/ .fancystyle {   font-family: Gabriola; \/* available on Windows 7 *\/   -moz-font-feature-settings: \"ss07=1\"; } Notes This syntax for this property is still under development and will likely change as the CSS3 Fonts specification evolves. Authors should not rely on the current syntax being supported in future versions of Firefox. Browser compatibility Supported in Gecko 2.0 (Firefox 4.0), no support in other major browsers. Specifications  CSS3 Fonts Editor's Draft OpenType Feature Tags list OpenType Font Feature support in Firefox 4 blog article See Also  FontFont OpenType User Guide"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-force-broken-image-icon","title":"-moz-force-broken-image-icon","description":"-moz-force-broken-image-icon is an extended CSS property. The value 1 forces a broken image icon even if the image has an  alt attribute. When the value 0 is used the image will act as usual and only display the alt attribute. Note: Even if the value is set to 1 the alt attribute will still be displayed. More information is available below.  Initial value : 0 Applies to: images Inherited : no Percentages: n\/a Media: visual   Computed value : as specified Syntax  -moz-force-broken-image-icon: <integer>;  Values  <integer>     Examples  View Live Examples (not available, please check later)   img { \u00a0\u00a0\u00a0\u00a0-moz-force-broken-image-icon: 1; \u00a0\u00a0\u00a0 height:100px; \u00a0\u00a0\u00a0\u00a0width:100px; }  Note: Unless the image has a specified height and width the broken image icon will not be displayed but the alt attribute will also be hidden if -moz-force-broken-image-icon is set to 1. Notes  This property will only work in Gecko-based browsers. The use of this property is not recommended. A proper alt attribute should be used instead.  See also   bug 58646"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-image-region","title":"-moz-image-region","description":"For certain XUL elements and pseudo-elements that use an image from the list-style-image  property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance. The syntax is similar to the clip  property. All four values are relative to the upper left corner of the image.  Initial value : auto  Applies to: XUL image  elements and :-moz-tree-image , :-moz-tree-twisty , and :-moz-tree-checkbox  pseudo-elements Inherited : yes Percentages: n\/a Media: visual   Computed value : For rect() values, a rect consisting of four computed lengths; otherwise as specified.  Syntax -moz-image-region: rect(top, right, bottom, left);  Examples #example-button {   \/* display only the 4x4 area from the top left of this image *\/   list-style-image: url(\"chrome:\/\/example\/skin\/example.png\");   -moz-image-region: rect(0px, 4px, 4px, 0px); } #example-button:hover {   \/* use the 4x4 area to the right of the first for the hovered button *\/   -moz-image-region: rect(0px, 8px, 4px, 4px); }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-margin-end","title":"-moz-margin-end","description":"In left to right (LTR) situations, the -moz-margin-end CSS property specifies the right margin and is synonymous with margin-right . In RTL cases it sets the left margin (same as margin-left ). In Right to Left (RTL) situations -moz-margin-end flips the elements margin without having to specify absolute left or right.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : The percentage as specified or the absolute length  Syntax  -moz-margin-end:   <length> | <percentage> | inherit | auto   Values  <length>  Specifies a fixed width.  <percentage>  A percentage with respect to the width of the containing block.   Examples    .content {-moz-margin-end: 5%}    .sidebox {-moz-margin-end: 10px}  Specifications Not (yet) candidate for specifications.  CSS 3 box  Browser compatibility    Browser Lowest Version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.7) -moz-margin-end   Opera --- ---   Safari (WebKit) --- ---    See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-margin-start","title":"-moz-margin-start","description":"In left to right (LTR) situations the -moz-margin-start CSS property specifies the left margin and is synonymous with margin-left . In RTL cases it sets the right margin (same as margin-right ). In Right to Left (RTL) situations -moz-margin-start flips the elements margin without having to specify absolute left or right.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  -moz-margin-start:   <length> | <percentage> | inherit | auto   Values  <length>  Specifies a fixed width.  <percentage>  a percentage with respect to the width of the containing block.   Examples -moz-margin-start:33%; -webkit-margin-start:33%; direction:rtl; -moz-margin-start:33%; -webkit-margin-start:33%; Specifications Not (yet) candidate for specifications.  CSS 3 Box model #margins Working draft  Browser compatibility    Browser Lowest Version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.7) -moz-margin-start   Opera --- ---   Safari (WebKit) 2.0 (412) -khtml-margin-start   3.0 (522) -khtml-margin-start | -webkit-margin-start    See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-orient","title":"-moz-orient","description":"Specifies the orientation of the element to which it's applied.  Initial value : horizontal Applies to: <progress>  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  orient:  horizontal | vertical  Values  horizontal The element is rendered horizontally. vertical The element is rendered vertically. Examples This example displays two progress bars; one horizontal and one vertical. \r           <html> <head>   <title>orient example<\/title>   <style type=\"text\/css\">     .vert {       -moz-orient: vertical;       width: 16px;       height: 150px;     }   <\/style> <\/head> <body>   <p>The following progress meter is horizontal (the default):<\/p>   <progress max=\"100\" value=\"75\"><\/progress>   <p>The following progress meter is vertical:<\/p>   <progress class=\"vert\" max=\"100\" value=\"75\"><\/progress> <\/body> <\/html>\r           View the live example  Specifications  Not part of any specification; currently, this is a Mozilla-specific extension (that is, -moz-orient).  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support -- 6.0 (6.0)  -- -- --         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support -- 6.0 (6.0)  -- -- --     Gecko notes In Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) , there's a bug that causes vertical <progress>  elements to render with the dimensions of a horizontal bar. This is fixed in Gecko 7.0 (Firefox 7.0 \/ Thunderbird 7.0 \/ SeaMonkey 2.4) . Gecko notes In Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) , there's a bug that causes vertical <progress>  elements to render with the dimensions of a horizontal bar. This is fixed in Gecko 7.0 (Firefox 7.0 \/ Thunderbird 7.0 \/ SeaMonkey 2.4) . See also  box-orient"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius","title":"-moz-outline-radius","description":"In Mozilla applications like Firefox, the -moz-outline-radius CSS property can be used to give outlines rounded corners. An outline  is a line that is drawn around elements, outside the border edge, to make the element stand out. -moz-outline-radius is a convenient shortcut to set the four properties -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright  and -moz-outline-radius-bottomleft .  Initial value : 0 Applies to: all elements Inherited : no Percentages: yes Media: visual   Computed value : ?  Syntax  -moz-outline-radius:\u00a0\u00a0 <outline-radius>{1,4} [ \/ <outline-radius>{1,4}]? | inherit Values Elliptical outlines and <percentage> values follow the syntax described in border-radius . One, two, three or four <outline-radius> values, represents one of:  <length> See  <length>  for possible values <percentage> A <percentage> ; see border-radius  for details   One single value applies to all 4 corners  Two values apply to 1. topLeft and bottomRight and 2. to the topRight and bottomLeft corner Three values apply to 1. topLeft, 2. topRight and bottomLeft and 3. to the bottomRight corner Four values apply to 1. topLeft, 2. topRight, 3. bottomRight and 4. to the bottomLeft corner  Examples   outline: dotted red;   -moz-outline-radius:  12% 1em 25px;    \/* is equivalent to: *\/  -moz-outline-radius-topleft:     12%;  -moz-outline-radius-topright:    1em;  -moz-outline-radius-bottomright: 35px;  -moz-outline-radius-bottomleft:  1em;  Notes  dotted or dashed radiused corners are rendered as solid,   bug 382721  Future versions of Gecko\/Firefox may drop this property completely. See   bug 593717  (remove -moz-outline-radius and make outlines follow border-radius)  Specifications This property it is not defined in any CSS standard. Browser compatibility Support since Firefox 1.5 (Gecko 1.8). There is no correlative property in other major Browsers. See also   outline , outline-width , outline-style , outline-color , outline-offset , -moz-outline-radius , -moz-outline-radius-topleft , -moz-outline-radius-topright , -moz-outline-radius-bottomright , -moz-outline-radius-bottomleft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-bottomleft","title":"-moz-outline-radius-bottomleft","description":"Summary  In Mozilla applications, -moz-outline-radius-bottomleft sets the rounding of the bottom-left corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-bottomright","title":"-moz-outline-radius-bottomright","description":"Summary  In Mozilla applications, -moz-outline-radius-bottomright sets the rounding of the bottom-right corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-topleft","title":"-moz-outline-radius-topleft","description":"Summary  In Mozilla applications, -moz-outline-radius-topleft sets the rounding of the top-left corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-topright","title":"-moz-outline-radius-topright","description":"Summary  In Mozilla applications, -moz-outline-radius-topright sets the rounding of the top-right corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-padding-end","title":"-moz-padding-end","description":"-moz-padding-end specifies the logical end padding for an element. The computed value of the element's direction property then determines how the padding is translated to a physical padding. If the computed direction is left-to-right (ltr) then -moz-padding-end sets the right padding; otherwise it sets the left padding. See also -moz-padding-start   Initial value : 0 Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  -moz-padding-end:  <length>  | <percentage>  | inherit  | auto ;  -moz-padding-end:  <length>  | <percentage>  | inherit  | auto ; Values   <length>  Specifies a fixed width. <percentage>  a percentage with respect to the width of the containing block.  Examples  View Live Examples    .content {     -moz-padding-end: 5%;   }    .sidebox {     -moz-padding-end: 10px;   }   Notes Specifications Not yet candidate for Specifications CSS 3\u00a0Writing Modes Browser Compatibility    Browser Lowest version   Internet Explorer --   Firefox (Gecko) \u00a0Firefox 3 (1.9) (-moz-padding-start)   Opera --    Safari | Chrome | WebKit   3 | 2 |\u00a0528.17 (-webkit-padding-start)     See also   padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-padding-start","title":"-moz-padding-start","description":"-moz-padding-start specifies the logical start padding for an element. The computed value of the element's direction property then determines how the padding is translated to a physical padding. If the computed direction is left-to-right (\"ltr\") then -moz-padding-start sets the left padding; otherwise it sets the right padding. See also -moz-padding-end   Initial value : 0 Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  -moz-padding-start:  <length>  | <percentage>  | inherit  | auto ;  Values   <length>  Specifies a fixed width. <percentage>  A percentage with respect to the width of the containing block.  Examples  View Live Examples    .content {     -moz-padding-start: 5%;   }    .sidebox {     -moz-padding-start: 10px;   }   Notes Specifications Not yet candidate for Specifications CSS 3\u00a0Writing Modes Browser Compatibility    Browser Lowest version   Internet Explorer --   Firefox (Gecko) \u00a0Firefox 3 (1.9) (-moz-padding-start)   Opera --    Safari | Chrome | WebKit   3 | 2 |\u00a0528.17 (-webkit-padding-start)     See also   padding , padding-top , padding-right , padding-bottom , padding-left , -moz-padding-start , -moz-padding-end , border , margin"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-stack-sizing","title":"-moz-stack-sizing","description":"-moz-stack-sizing is an extended CSS property. Normally, a stack  will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible. If you wish to prevent the stack from resizing automatically to accommodate its children, you can set -moz-stack-sizing to ignore on the child element. The property is set not on the stack itself, but on the stack's children. This lets you ignore certain children, but not others.  Initial value : stretch-to-fit Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  -moz-stack-sizing: ignore | stretch-to-fit  Values  stretch-to-fit The child will influence the stack's size. ignore The stack won't consider this child when calculating the its size.  Examples  View Live Examples (not available, please check later)   .mainsheet{ \t-moz-stack-sizing: ignore; }  Notes In previous versions of Gecko it was possible to work around the problem by setting very large negative bottom and right margins on the stack element and equally large positive bottom and right margins on the children whose size you didn't want to ignore. (The problem does not affect children moved above or to the left of the stack.) Bugzilla   bug 346189"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-text-blink","title":"-moz-text-blink","description":"The -moz-text-blink non-standard Mozilla CSS extension specifies the blink mode.  Initial value : none Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  -moz-text-blink: none | blink Values  none Produces no blinking. blink Text blinks. Note that not blinking the text is one technique to satisfy checkpoint 3.3 of WAI-UAAG.  Examples  .example {      -moz-text-blink: blink; }  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 6.0 (6.0)  -- -- -- --         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support ? -- -- -- --     Specifications  Old CSS 3 Text specification #text-blink  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-user-input","title":"-moz-user-input","description":"In Mozilla applications, -moz-user-input determines if an element will accept user input.  Initial value : none  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified   -moz-user-input was one of the proposals leading to the proposed CSS 3 user-input  property, which has not yet reached Candidate Recommendation (call for implementations). For elements that normally take user input, such as a textarea, the initial value of -moz-user-input is enabled. Syntax  -moz-user-input: none | enabled | disabled | inherit  Values  none The element does not respond to user input, and it does not become :active . enabled The element accepts user input. For textboxes, this is the default behavior. disabled The element does not accept user input. However, this is not the same as setting disabled  to true, in that the element is drawn normally.  Related properties  -moz-user-focus controls what happens when an element is given focus. -moz-user-modify controls if a user can read or write in an element. -moz-user-select controls how an element is selected.  Examples  input.example {   \/* the user will be able to select the text, but not change it. *\/   -moz-user-input: disabled; }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-user-modify","title":"-moz-user-modify","description":"The -moz-user-modify property determines whether or not the content of an element can be edited by a user. This property is related to the contentEditable attribute.  Initial value : read-only Applies to: all elements Inherited : yes Percentages: n\/a Media: interactive Computed value : as specified  Syntax  -moz-user-modify: read-only | read-write | write-only Values  read-only Default value. Contents are read-only. read-write The user is able to read and write contents. write-only The user is able to edit the content, but not to read it.  Example  .readwrite {   -moz-user-modify: read-write;   -webkit-user-modify: read-write; }  <div class=\"readwrite\">The user is able to change this text.<\/div>  Browser compatibility    Browser Version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.0) -moz-user-modify   Opera --- ---   Safari (WebKit) 3.0 (522) -webkit-user-modify [*]    [*] Also supported: -webkit-user-modify: read-write-plaintext-only (Richtext will be lost).  This property was called -khtml-user-modify in Safari 2.0. Specification  CSS 3 User Interface #user-modify (Working Draft February 2000, now superseded by CSS 3 Basic User Interface)  See also  -moz-user-focus -moz-user-input -moz-user-select"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-user-select","title":"user-select","description":"Examples \r           <style>   .unselectable {     -moz-user-select: none;     -webkit-user-select: none;     -ms-user-select: none;   } <\/style> <body>   <p class=\"unselectable\">The user is not able to select this text in Firefox, Chrome, Safari, and IE.<\/p> <\/body>\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1 (Supported) 10 - (Supported)   Element  -webkit  -moz  -ms \u00a0  -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  ::-moz-selection,\u00a0::selection  Safari -webkit-user-select reference documentation IE 10 Blog post  See also  ::-moz-selection,\u00a0::selection  Safari -webkit-user-select reference documentation IE 10 Blog post"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-window-shadow","title":"-moz-window-shadow","description":"-moz-window-shadow specifies whether a window will have a shadow. Currently it only works on Mac OS X.  Initial value : default  Applies to: all elements that create native windows, e.g. window, panel Inherited : no Percentages: n\/a Media: visual   Computed value :  Firefox 3 added support for transparent windows on Mac OS X. However, for these windows shadows were turned off and there was no way of turning them on. In Firefox 3.5 we changed the default; all windows now have a shadow. We introduced the -moz-window-shadow CSS property to provide a way to turn off unwanted shadows. Syntax  -moz-window-shadow: default | menu | tooltip | sheet | none  Values  default The window will have a shadow with the default window shadow style. menu  Requires Gecko 2.0  The window will have the shadow style that's appropriate for menus. tooltip  Requires Gecko 2.0  The window will have the shadow style that's appropriate for tooltips. sheet  Requires Gecko 2.0  The window will have the shadow style that's appropriate for sheet windows. none The window won't have a shadow.  Examples  .KUI-panel {   -moz-window-shadow: none; }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-linear-gradient","title":"linear-gradient","description":"Syntax linear-gradient( [ [ <angle> | to <side-or-corner> ,]? <color-stop> [, <color-stop>]+ )  Vendor prefixes: See the compatibility table below for detail on the vendor prefixes you'll need to use for gradients. Where:  <color-stop>  <color>  [ <percentage>  |  <length>  ]   Values  <side-or-corner> Represents the position of the starting-point of the gradient line. It consists of two keywords: the first one indicates the horizontal side, left or right, and the second one the vertical side, top or bottom. The order is not relevant and each of the keyword is optional. The values to top, to bottom, to left and to right are translated into the angles 0deg, 180deg, 270deg, 90deg respectively. The others are translated into an angle that let the starting-point to be in the same quadrant than the described corner and so that the line defined by the starting-point and the corner is perpendicular to the gradient line. That way, the color described by the <color-stop> will exactly apply to the corner point. This is sometimes called the \"magic corner\" property. The end-point of the gradient line is the symmetrical point of the starting-point on the other direction of the center box. <angle> An angle of direction for the gradient. See <angle> . <color-stop> This value is comprised of a <color>  value, followed by an optional stop position (either a percentage between 0% and 100% or a  <length>  along the gradient axis). Rendering of color-stops in CSS gradients follows the same rules as color-stops in SVG gradients.  Examples Positions can be specified along the gradient axis with a color for each of them, called \"color-stops\", and the areas between every color-stop smoothly transition between each other. Any one color in the gradient forms a straight line that is perpendicular to the gradient axis. In the below image, the gradient's axis starts from the top-left corner of the div, and is directed at a 45 degree angle. Two color-stops are specified, red and blue.  Example: Multiple color stops If the first color-stop does not have a <length> or <percentage>, it defaults to 0%. If the last color-stop does not have a <length> or <percentage>, it defaults to 100%. If a color-stop doesn't have a specified position and it isn't the first or last stop, then it is assigned the position that is half way between the previous stop and next stop. Color-stops must be specified in order. After assigning default values to the first and last stops if necessary, if a color-stop has a specified position that is less than the specified position of any color-stop before it in the list, its position is changed to be equal to the largest specified position of any color-stop before it. A rainbow made from a gradient background-image: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);  Examples: Repeating The linear-gradient does not allow repeating gradients. By default, the gradient will stretch to fill the element it is defined on. For this functionality, see repeating-linear-gradient . Example: Using transparency Linear with transparency background-image: linear-gradient(top left, red, rgba(255,0,0,0)); Gradient backgrounds are not affected by background-size  if all points and lengths are specified using fixed units (as opposed to percentages or keywords, which are relative to the value of background-size). Example: Multiple color stops If the first color-stop does not have a <length> or <percentage>, it defaults to 0%. If the last color-stop does not have a <length> or <percentage>, it defaults to 100%. If a color-stop doesn't have a specified position and it isn't the first or last stop, then it is assigned the position that is half way between the previous stop and next stop. Color-stops must be specified in order. After assigning default values to the first and last stops if necessary, if a color-stop has a specified position that is less than the specified position of any color-stop before it in the list, its position is changed to be equal to the largest specified position of any color-stop before it. A rainbow made from a gradient background-image: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);  Examples: Repeating The linear-gradient does not allow repeating gradients. By default, the gradient will stretch to fill the element it is defined on. For this functionality, see repeating-linear-gradient . Example: Using transparency Linear with transparency background-image: linear-gradient(top left, red, rgba(255,0,0,0)); Gradient backgrounds are not affected by background-size  if all points and lengths are specified using fixed units (as opposed to percentages or keywords, which are relative to the value of background-size). Notes If you set the background-image  property of the <body>  tag to a linear-gradient, the gradient won't fill the browser screen unless you also set the min-height  property of the document root (e.g. the <html>  tag) to 100%. Specifications    Specification Status Comment     CSS Image Value and Replaced Content Module Level 3 Working Draft  \u00a0    Browser compatibility    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.6 (1.9.2)  -moz   bug 479220  [3] 10.0 (534.16) -webkit [2][3] 10.0  -ms[1] 11.10 -o [3] 5.1 -webkit[2][3]   Legacy webkit syntaxNon-standard      -- 3 -webkit [2] -- -- 4.0 -webkit[2]   Legacy from syntax (without to) Non-standard      3.6 (1.9.2)  -moz [4] 10.0 (534.16) -webkit [2] 10.0  -ms [2] 11.10 -o 5.1 -webkit[2]   to syntax  10.0 (10)  -moz   bug 685400  [4]  -- -- -- --    [1] Internet Explorer 5.5 through 8.0 supports proprietary filter: progid:DXImageTransform.Microsoft.Gradient() filter. [2] WebKit since 528 supports the legacy -webkit-gradient(linear,\u2026) function. As of WebKit 534.16, it also supports the standard gradient syntax. Unlike in Gecko, in legacy WebKit you cannot specify both a position and angle in -webkit-linear-gradient(). You can achieve the same effect by offsetting the color stops. [3] Gecko, Opera & Webkit considers <angle>  to start to the right, instead of the top. I.e. it considered an angle of 0deg as a direction indicator pointing to the right. This is different from the latest specification where an angle of 0deg as a direction indicator points to the top. [3] [4] [4] Firefox 3.6 implemented, prefixed, an early syntax where the starting corner or side was indicated without the to keyword, and effectively considered as a from position. The to syntax has been added in Firefox 10, without removing the deprecated syntax and translation between the two is trivial: -moz-linear-gradient(to top left, blue, red);  is the same as:  -moz-linear-gradient(bottom right, blue, red);  The legacy syntax, without to, is planned to go away when the prefix will be removed. Cross-browser gradients Considering all prefixes above, here is a gradient from pink to green, top to bottom. (Code taken from css3please.com) .grad {     background-color: #F07575; \/* fallback color if gradients are not supported *\/    background-image: -webkit-gradient(linear, left top, left bottom, from(hsl(0, 80%, 70%)), to(#BADA55));    background-image: -webkit-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);    background-image:    -moz-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);    background-image:     -ms-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);    background-image:      -o-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);    background-image:         linear-gradient(to bottom, hsl(0, 80%, 70%), #BADA55); \/* current standard, but unimplemented and subject to change *\/  }  See also  Using CSS gradients, radial-gradient() , repeating-linear-gradient() , repeating-radial-gradient() ; Some properties where it can be used: background-image , background ; The now obsolete WebKit's original proposal; CSS Gradients Patterns Gallery, by Lea Verou; CSS3 Gradients Library, by Estelle Weyl."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-element","title":"element","description":"Syntax element( id )  where:  id The ID of an element to use as the background, specified using the HTML attribute #id on the element.  Examples These examples can be viewed live in builds of Firefox that support -moz-element(). A somewhat realistic example This example uses a hidden <div>  as a background. The background element uses a gradient, but also includes text that is rendered as part of the background. \r           <div style=\"width:400px; height:400px; background:-moz-element(#myBackground1) no-repeat;\">     <p>This box uses the element with the #myBackground1 ID as its background!<\/p>   <\/div>    <div style=\"overflow:hidden; height:0;\">     <div id=\"myBackground1\" style=\"width:1024px; height:1024px; background-image: -moz-linear-gradient(left, red, orange, yellow, white);\">     <p style=\"-moz-transform-origin:0 0; -moz-transform: rotate(45deg); color:white;\">This text is part of the background. Cool, huh?<\/p>     <\/div>   <\/div>\r          The <div>  element with the ID\u00a0\"myBackground1\" is used as the background for the content including the paragraph \"This box uses the element with the #myBackground1\u00a0ID as its background!\".  A somewhat more bizarre example This example uses a hidden <button>  element in a repeating pattern as its background. This demonstrates that you can use arbitrary elements as background, but doesn't necessarily demonstrate good design practices. \r           <div style=\"width:400px; height:100px; background:-moz-element(#myBackground2);\">   <\/div>    <div style=\"overflow:hidden; height:0;\">     <button id=\"myBackground2\" type=\"button\">Evil button!<\/button>   <\/div>\r           A somewhat realistic example This example uses a hidden <div>  as a background. The background element uses a gradient, but also includes text that is rendered as part of the background. \r           <div style=\"width:400px; height:400px; background:-moz-element(#myBackground1) no-repeat;\">     <p>This box uses the element with the #myBackground1 ID as its background!<\/p>   <\/div>    <div style=\"overflow:hidden; height:0;\">     <div id=\"myBackground1\" style=\"width:1024px; height:1024px; background-image: -moz-linear-gradient(left, red, orange, yellow, white);\">     <p style=\"-moz-transform-origin:0 0; -moz-transform: rotate(45deg); color:white;\">This text is part of the background. Cool, huh?<\/p>     <\/div>   <\/div>\r          The <div>  element with the ID\u00a0\"myBackground1\" is used as the background for the content including the paragraph \"This box uses the element with the #myBackground1\u00a0ID as its background!\".  A somewhat more bizarre example This example uses a hidden <button>  element in a repeating pattern as its background. This demonstrates that you can use arbitrary elements as background, but doesn't necessarily demonstrate good design practices. \r           <div style=\"width:400px; height:100px; background:-moz-element(#myBackground2);\">   <\/div>    <div style=\"overflow:hidden; height:0;\">     <button id=\"myBackground2\" type=\"button\">Evil button!<\/button>   <\/div>\r           Specifications    Specification Status Comment     CSS Image Values and Replaced Content Level 3 Unknown  \u00a0    Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4.0 (2.0) [1] [*]  -moz -- -- -- -- [2]         Feature Firefox Mobile (Gecko) Android IE\u00a0Phone Opera Mobile Safari Mobile   Basic support 4.0 (2.0) [3] [*]  -moz -- -- -- --     [*] Usage limited to the background \u00a0and background-image  CSS properties. See also  document.mozSetImageElement()"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-radial-gradient","title":"radial-gradient","description":"Syntax radial-gradient( [<position> || <angle>,]? [<shape> ||\u00a0<size>,]? <stop>, <stop>[, <stop>]* )  Values  <position> A position, interpreted in the same way as background-position  or transform-origin . If omitted, the default is center. <angle> An angle establishing the gradient line, which extends from the starting point at this angle; this is 0deg by default. <shape> The gradient's shape. This is one of circle (meaning that the gradient's shape is a circle with constant radius) or ellipse (meaning that the shape is an axis-aligned ellipse). The default value is ellipse. <size> The size of the gradient. This is one of the Size constants listed below. <stop> This value is comprised of a <color>  value, followed by an optional stop position (either a percentage between 0% and 100% or a  <length>  along the gradient axis). Rendering of color-stops in CSS gradients follows the same rules as color-stops in SVG gradients.  Size constants    Constant Description   closest-side  The gradient's shape meets the side of the box closest to its center (for circles) or meets both the vertical and horizontal sides closest to the center (for ellipses).   closest-corner The gradient's shape is sized so it exactly meets the closest corner of the box from its center.   farthest-side Similar to closest-side, except the shape is sized to meet the side of the box farthest from its center (or vertical and horizontal sides).   farthest-corner  The gradient's shape is sized so it exactly meets the farthest corner of the box from its center.   contain  A synonym for closest-side.   cover  A synonym for farthest-corner.    Usage Radial gradients also run along an axis. At each end point of the axis, a radius is specified. This can be imagined as creating two \"circles\", where for each circle the center is specified by the point and the radius is specified by the radius length. The gradient runs outwards from the circumference of the inner circle to the circumference of the outer circle. background-image:    -moz-radial-gradient(center 45deg, circle closest-side, orange 0%, red 100%); background-image: -webkit-radial-gradient(center 45deg, circle closest-side, orange 0%, red 100%); background-image: -ms-radial-gradient(center 45deg, circle closest-side, orange 0%, red 100%); background-image: -o-radial-gradient(center 45deg, circle closest-side, orange 0%, red 100%);  Examples For a more general introduction to how CSS gradients in Gecko\/Firefox work, see -moz-linear-gradient . background:    -moz-radial-gradient(45px 45px 45deg, circle cover, \t\t\t\t aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%); background: -webkit-radial-gradient(45px 45px 45deg, circle cover, \u00a0\u00a0\u00a0\u00a0 aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%); background: -ms-radial-gradient(45px 45px 45deg, circle cover, \u00a0\u00a0\u00a0\u00a0 aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%); background: -o-radial-gradient(45px 45px 45deg, circle cover, \u00a0\u00a0\u00a0\u00a0 aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%);  background-image: -webkit-radial-gradient(45px 45px, ellipse farthest-corner, \t\t\t\t aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%); background-image: -moz-radial-gradient(45px 45px, ellipse farthest-corner, \t\t\t\t aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%); background-image:\u00a0\u00a0\u00a0 -ms-radial-gradient(45px 45px, ellipse farthest-corner, \t\t\t\t aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%); background-image:\u00a0\u00a0\u00a0 -o-radial-gradient(45px 45px, ellipse farthest-corner, \t\t\t\t aqua 0%, rgba(0, 0, 255, 0) 100%, blue 95%);  Radial background: -webkit-radial-gradient(45px 45px, cover, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%); background:    -moz-radial-gradient(45px 45px, cover, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%); background:    -ms-radial-gradient(45px 45px, cover, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%); background:    -o-radial-gradient(45px 45px, cover, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%);  Browser compatibility    Browser Lowest version Support of   Internet Explorer  5.5 (including 8.0)   filter: progid:DXImageTransform.Microsoft.Gradient() MSDN library, gradient filter     10   -ms-radial-gradient()    Firefox (Gecko) 3.6 (1.9.2) -moz-radial-gradient()   Opera 12 [1] -o-radial-gradient()   Safari \/ WebKit \/ Chrome 4.0 \/ 528 \/ 3 -webkit-gradient(radial,\u2026) Safari Reference Library, gradients   \u00a0 6 \/ r75891 \/ 10 -webkit-radial-gradient() Safari: CSS3 Gradients Note: unlike Gecko, WebKit supports explicitly sized gradients. See   bug 627885     Note that the Mozilla syntax proposal for CSS gradients differs significantly from WebKit's original proposal:  Gecko (Firefox) uses separate kinds of property values to distinguish radial and linear gradients, whereas WebKit previously lumped them into a single kind of property value and needs a leading parameter to identify the type of gradient. The actual syntax for how a radial gradient is specified is significantly different. Webkit, Mozilla, Opera and Microsoft now implement the previous version of the W3C standard syntax. The syntax has been changed as of October 2011. The new proposed syntax is not supported in any browser.  See also  Using gradients -moz-linear-gradient  background-image  background  WebKit's original proposal: http:\/\/webkit.org\/blog\/175\/introducing-css-gradients\/ WebKit's new implementation:\u00a0http:\/\/webkit.org\/blog\/1424\/css3-gradients\/ Mozilla Bug:   bug 479220  W3C\u00a0Proposal for Radial Gradients: http:\/\/dev.w3.org\/csswg\/css3-images\/#radial-gradients W3C Proposal for Background\u00a0Position:\u00a0http:\/\/www.w3.org\/TR\/css3-background\/#the-background-position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-image-rect","title":"-moz-image-rect","description":"This value for CSS\u00a0background-image  lets you use a portion of a larger image as a background. This allows you to, for example, use different parts of one larger image as backgrounds in different parts of your content. This works very similarly to the -moz-image-region  property, which is used with the list-style-image  property to use parts of an image as the bullets in lists. However, this can be used for any CSS\u00a0background. The syntax for the rectangle is similar to the rect() function generating a <shape>  CSS type. All four values are relative to the upper left corner of the image.Syntax  -moz-image-rect(<uri> , top, right, bottom, left); Values  <uri>  The URI\u00a0of the image from which to take the sub-image. top The top edge, specified as a  <length> , of the sub-image within the specified image. right The right edge, specified as a  <length> , of the sub-image within the specified image. bottom The bottom edge, specified as a  <length> , of the sub-image within the specified image. left The left edge, specified as a  <length> , of the sub-image within the specified image.  Values  <uri>  The URI\u00a0of the image from which to take the sub-image. top The top edge, specified as a  <length> , of the sub-image within the specified image. right The right edge, specified as a  <length> , of the sub-image within the specified image. bottom The bottom edge, specified as a  <length> , of the sub-image within the specified image. left The left edge, specified as a  <length> , of the sub-image within the specified image.  Example This example loads an image and uses it in four segments to draw the Firefox logo in four <div> \u00a0blocks. Clicking on their container causes the four segments to rotate around by swapping the background-image  property values among the four <div> \u00a0blocks. CSS The CSS\u00a0defines one container style, then the styles for the four boxes that comprise the complete image. The container looks like this: \r           #container {   width:400px;   height:400px;   top:100px;   left:100px;   position:absolute;   font-size:16px;   text-shadow:white 0px 0px 6px;   text-align:center; }\r          Then the four boxes defining the segments of the image are defined. Let's look at them one at a time. \r           #box1 {   background-image: -moz-image-rect(url(firefox.jpg), 0%, 50%, 50%, 0%);   width:200px;   height:200px;   position:absolute; }\r          This is the top-left corner of the image. It defines a rectangle containing the top-left quarter of the image in the file firefox.jpg. \r           #box2 {   background-image: -moz-image-rect(url(firefox.jpg), 0%, 100%, 50%, 50%);   width:200px;   height:200px;   position:absolute; }\r          This defines the top-right corner of the image. The other corners follow a similar pattern: \r           #box3 {   background-image: -moz-image-rect(url(firefox.jpg), 50%, 50%, 100%, 0%);   width:200px;   height:200px;   position:absolute; } #box4 {   background-image: -moz-image-rect(url(firefox.jpg), 50%, 100%, 100%, 50%);   width:200px;   height:200px;   position:absolute; }\r          HTML The HTML\u00a0is quite simple: \r           <div id=\"container\" onclick=\"rotate()\">   <div id=\"box1\" style=\"left:0px;top:0px;\">Top left<\/div>   <div id=\"box2\" style=\"left:200px;top:0px;\">Top right<\/div>   <div id=\"box3\" style=\"left:0px;top:200px;\">Bottom left<\/div>   <div id=\"box4\" style=\"left:200px;top:200px;\">Bottom right<\/div> <\/div>\r          This places the four segments of our image in a two-by-two box grid. These four segments are all contained within a larger <div> \u00a0block whose primary purpose is to receive click events and dispatch them to our JavaScript code. The JavaScript code This code handles the click event when the container receives a mouse click. \r           function rotate() {   var prevStyle = window.getComputedStyle(document.getElementById(\"box4\"), null).getPropertyValue(\"background-image\");      \/\/ Now that we've saved the last one, start rotating      for (var i=1; i<=4; i++) {     var curId = \"box\" + i;          \/\/ Shift the background iamges          var curStyle = window.getComputedStyle(document.getElementById(curId), null).getPropertyValue(\"background-image\");     document.getElementById(curId).style.backgroundImage = prevStyle;     prevStyle = curStyle;   }     }\r          This uses window.getComputedStyle()  to fetch the style of each element, shifting it to the following element. Notice that before it begins doing so it saves a copy of the last box's style since it will be overwritten by the third element's style. By simply copying the values of the background-image  property from one element to the next with each mouse click, we achieve the desired effect. What it looks like Here's what the display looks like when first loaded:  After clicking it once:  After the second click:  And after the third click:  Another click rotates it back around to what it originally looked like.  View the live example  CSS The CSS\u00a0defines one container style, then the styles for the four boxes that comprise the complete image. The container looks like this: \r           #container {   width:400px;   height:400px;   top:100px;   left:100px;   position:absolute;   font-size:16px;   text-shadow:white 0px 0px 6px;   text-align:center; }\r          Then the four boxes defining the segments of the image are defined. Let's look at them one at a time. \r           #box1 {   background-image: -moz-image-rect(url(firefox.jpg), 0%, 50%, 50%, 0%);   width:200px;   height:200px;   position:absolute; }\r          This is the top-left corner of the image. It defines a rectangle containing the top-left quarter of the image in the file firefox.jpg. \r           #box2 {   background-image: -moz-image-rect(url(firefox.jpg), 0%, 100%, 50%, 50%);   width:200px;   height:200px;   position:absolute; }\r          This defines the top-right corner of the image. The other corners follow a similar pattern: \r           #box3 {   background-image: -moz-image-rect(url(firefox.jpg), 50%, 50%, 100%, 0%);   width:200px;   height:200px;   position:absolute; } #box4 {   background-image: -moz-image-rect(url(firefox.jpg), 50%, 100%, 100%, 50%);   width:200px;   height:200px;   position:absolute; }\r          HTML The HTML\u00a0is quite simple: \r           <div id=\"container\" onclick=\"rotate()\">   <div id=\"box1\" style=\"left:0px;top:0px;\">Top left<\/div>   <div id=\"box2\" style=\"left:200px;top:0px;\">Top right<\/div>   <div id=\"box3\" style=\"left:0px;top:200px;\">Bottom left<\/div>   <div id=\"box4\" style=\"left:200px;top:200px;\">Bottom right<\/div> <\/div>\r          This places the four segments of our image in a two-by-two box grid. These four segments are all contained within a larger <div> \u00a0block whose primary purpose is to receive click events and dispatch them to our JavaScript code. The JavaScript code This code handles the click event when the container receives a mouse click. \r           function rotate() {   var prevStyle = window.getComputedStyle(document.getElementById(\"box4\"), null).getPropertyValue(\"background-image\");      \/\/ Now that we've saved the last one, start rotating      for (var i=1; i<=4; i++) {     var curId = \"box\" + i;          \/\/ Shift the background iamges          var curStyle = window.getComputedStyle(document.getElementById(curId), null).getPropertyValue(\"background-image\");     document.getElementById(curId).style.backgroundImage = prevStyle;     prevStyle = curStyle;   }     }\r          This uses window.getComputedStyle()  to fetch the style of each element, shifting it to the following element. Notice that before it begins doing so it saves a copy of the last box's style since it will be overwritten by the third element's style. By simply copying the values of the background-image  property from one element to the next with each mouse click, we achieve the desired effect. What it looks like Here's what the display looks like when first loaded:  After clicking it once:  After the second click:  And after the third click:  Another click rotates it back around to what it originally looked like.  View the live example  Bugs    WebKit bug 32177"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-calc","title":"calc","description":"The calc() CSS function can be used anywhere a  <length>  is required. With calc(), you can perform calculations to determine the size and shape of objects. Syntax  <a_css_property>: -vendor-calc(expression)  Values  expression A\u00a0mathematical expression, the result of which is used as the  <length> .  Expressions The expression can be any simple expression combining the following operators:  + Addition - Subtraction * Multiplication \/ Division. You can't divide by a length; instead, this is used to, for example, say that you want your resulting length to be a given fraction of an existing length. mod  Unimplemented  Modulo; this returns the remainder left over after dividing two values.  The operands in the expression may be any length syntax value. You can use different units for each value in your expression, if you wish. You may also use parentheses to establish computation order when needed. Note: Division by zero results in an error being generated by the HTML\u00a0parser. Note: operators should always be surrounded by whitespaces. The operand of calc(50 -8px) for instance will be parsed as a percentage followed by a negative length, an invalid expression, while the operand of calc(50% - 8px) is a percentage followed by a minus sign and a length.   Examples Positioning an object on screen with a margin calc() makes it easy to position an object with a set margin. In this example, the CSS creates a banner that stretches across the window, with a 40-pixel gap between both sides of the banner and the edges of the window: \r           .banner {   position:absolute;   left: 40px;   width: -moz-calc(100% - 80px);   width: -webkit-calc(100% - 80px);   width: calc(100% - 80px);   border: solid black 1px;   box-shadow: 1px 2px;   background-color: yellow;   padding: 6px;   text-align: center; }\r           View the live example  Automatically sizing form fields to fit their container Another use case for calc() is to help ensure that form fields fit in the available space, without extruding past the edge of their container, while maintaining an appropriate margin. Let's look at some CSS: \r           input {   padding: 2px;   display: block;   width: -moz-calc(100% - 1em);   width: -webkit-calc(100% - 1em);   width: calc(100% - 1em); }  #formbox {   width: -moz-calc(100%\/6);   width: -webkit-calc(100%\/6);   width: calc(100%\/6);   border: 1px solid black;   padding: 4px; }\r          Here, the form itself is established to use 1\/6 of the available window width. Then, to ensure that input fields retain an appropriate size, we use calc() again to establish that they should be the width of their container minus 1em. Then, the following HTML\u00a0makes use of this CSS: \r           <form>   <div id=\"formbox\">   <label>Type something:<\/label>   <input type=\"text\">   <\/div> <\/form>\r           View the live example  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support - (crbug.com\/69487) 4.0 (2)  9 - - (  WebKit bug 16662)   Method  -webkit-calc()  -webkit  -moz-calc()  -moz calc() -  -webkit-calc  -webkit          Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0    Positioning an object on screen with a margin calc() makes it easy to position an object with a set margin. In this example, the CSS creates a banner that stretches across the window, with a 40-pixel gap between both sides of the banner and the edges of the window: \r           .banner {   position:absolute;   left: 40px;   width: -moz-calc(100% - 80px);   width: -webkit-calc(100% - 80px);   width: calc(100% - 80px);   border: solid black 1px;   box-shadow: 1px 2px;   background-color: yellow;   padding: 6px;   text-align: center; }\r           View the live example  Automatically sizing form fields to fit their container Another use case for calc() is to help ensure that form fields fit in the available space, without extruding past the edge of their container, while maintaining an appropriate margin. Let's look at some CSS: \r           input {   padding: 2px;   display: block;   width: -moz-calc(100% - 1em);   width: -webkit-calc(100% - 1em);   width: calc(100% - 1em); }  #formbox {   width: -moz-calc(100%\/6);   width: -webkit-calc(100%\/6);   width: calc(100%\/6);   border: 1px solid black;   padding: 4px; }\r          Here, the form itself is established to use 1\/6 of the available window width. Then, to ensure that input fields retain an appropriate size, we use calc() again to establish that they should be the width of their container minus 1em. Then, the following HTML\u00a0makes use of this CSS: \r           <form>   <div id=\"formbox\">   <label>Type something:<\/label>   <input type=\"text\">   <\/div> <\/form>\r           View the live example  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support - (crbug.com\/69487) 4.0 (2)  9 - - (  WebKit bug 16662)   Method  -webkit-calc()  -webkit  -moz-calc()  -moz calc() -  -webkit-calc  -webkit          Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support - (crbug.com\/69487) 4.0 (2)  9 - - (  WebKit bug 16662)   Method  -webkit-calc()  -webkit  -moz-calc()  -moz calc() -  -webkit-calc  -webkit          Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?     Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0    Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-any","title":":any","description":"The :any() pseudo-class lets you quickly construct sets of similar selectors by establishing groups from which any of the included items will match. This is an alternative to having to repeat the entire selector for the one item that varies. Note : This pseudo-class is in progress to be standardized in CSS Selectors Level 4 under the name :matches(). It is likely that the syntax and name of :-vendor-any() will be changed to reflect it in the near future. Syntax :-moz-any( selector[, selector]* ) :-webkit-any( selector[, selector]* ) Values  selector A selector. This may be a simple selector or a multiple selector comprised of CSS 3 simple selectors.  Note: The selectors may not contain combinators or pseudo-elements. Values  selector A selector. This may be a simple selector or a multiple selector comprised of CSS 3 simple selectors.  Note: The selectors may not contain combinators or pseudo-elements. Examples For example, the following CSS: \r           \/* 3 deep (or more) unordered lists use a square *\/ ol ol ul,     ol ul ul,     ol menu ul,     ol dir ul, ol ol menu,   ol ul menu,   ol menu menu,   ol dir menu, ol ol dir,    ol ul dir,    ol menu dir,    ol dir dir, ul ol ul,     ul ul ul,     ul menu ul,     ul dir ul, ul ol menu,   ul ul menu,   ul menu menu,   ul dir menu, ul ol dir,    ul ul dir,    ul menu dir,    ul dir dir, menu ol ul,   menu ul ul,   menu menu ul,   menu dir ul, menu ol menu, menu ul menu, menu menu menu, menu dir menu, menu ol dir,  menu ul dir,  menu menu dir,  menu dir dir, dir ol ul,    dir ul ul,    dir menu ul,    dir dir ul, dir ol menu,  dir ul menu,  dir menu menu,  dir dir menu, dir ol dir,   dir ul dir,   dir menu dir,   dir dir dir {   list-style-type: square; }\r          Can be replaced with: \r           \/* 3 deep (or more) unordered lists use a square *\/ :-moz-any(ol, ul, menu, dir) :-moz-any(ol, ul, menu, dir) ul, :-moz-any(ol, ul, menu, dir) :-moz-any(ol, ul, menu, dir) menu, :-moz-any(ol, ul, menu, dir) :-moz-any(ol, ul, menu, dir) dir {   list-style-type: square; }\r          Notes This is particularly useful when dealing with HTML5 sections and headings. Since <section> , <article> , <aside> , and <nav> \u00a0can be nested, without :any(), styling these to match one another can be tricky. For example, without :any(), styling all the <h1>  elements at different depths could be very complicated: \r           \/* Level 0 *\/ h1 {   font-size: 30px; } \/* Level 1 *\/ section h1, article h1, aside h1, nav h1 {   font-size: 25px; } \/* Level 2 *\/ section section h1, section article h1, section aside h1, section nav h1, article section h1, article article h1, article aside h1, article nav h1, aside section h1, aside article h1, aside aside h1, aside nav h1, nav section h1, nav article h1, nav aside h1, nav nav h1, {   font-size: 20px; } \/* Level 3 *\/ \/* ... don't even think about it*\/\r          Using :-any(), though, it's much easier: \r           \/* Level 0 *\/ h1 {   font-size: 30px; } \/* Level 1 *\/ :-moz-any(section, article, aside, nav) h1 {   font-size: 25px; } \/* Level 2 *\/ :-moz-any(section, article, aside, nav) :-moz-any(section, article, aside, nav) h1 {   font-size: 20px; } \/* Level 3 *\/ :-moz-any(section, article, aside, nav) :-moz-any(section, article, aside, nav) :-moz-any(section, article, aside, nav) h1 {   font-size: 15px; }\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4.0 (2)  -moz 12.0 (534.30) -webkit \u00a0 \u00a0  Nightly build  -webkit         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-broken","title":":-moz-broken","description":":-moz-broken matches elements representing broken image links. This selector is intended for use mainly by theme developers. Bugzilla   bug 11011  See also  -moz-alt-content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-drag-over","title":":-moz-drag-over","description":"The :-moz-drag-over pseudo-class is used to edit an element when a drag-over event is called on it. Syntax  element:-moz-drag-over { style properties }   Examples   td:-moz-drag-over { color:red; }  ...where...   <table border=\"1\">   <tr>     <td width=\"100px\" height=\"100px\">Drag Over<\/td>   <\/tr> <\/table>  ...result... ..."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-first-node","title":":-moz-first-node","description":"The :-moz-first-node pseudo-class represents any element that is the first child node of some other element. It differs from :first-child  because it does not match a first child element with (non-whitespace) text before it. Syntax  span:-moz-first-node { style properties }     Examples   span:-moz-first-node {     background-color: lime; }  ...where...   <div>   <span>:-moz-first-node<\/span>   <span>:-moz-last-node<\/span> <\/div>   Notes  Any white space at the start of an element is ignored for the determination of :-moz-first-node."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-focusring","title":":-moz-focusring","description":":-moz-focusring is specified on an element if and only if it's currently focused and should have a focus ring drawn about it. The precise behavior may vary from platform to platform, depending on that platform's particular focus best practices. Note: Keep in mind that not all focused elements will have this pseudo-selector specified; it's only applied when the element is both focused and should render a focus indicator. Syntax  :-moz-focusring Example To specify the appearance of an element when it's focused, you can use this pseudo-selector like this: \r           mybutton:-moz-focusring {   outline: 2px dotted; }\r          See also    bug 418521"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-full-screen","title":":-moz-full-screen","description":"The :-moz-full-screen CSS pseudo-class applies to any element that's currently being displayed in full-screen mode. See Using full-screen mode for details. Examples Needs example. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) -webkit 9.0 (9.0)  -moz ? ? (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification Though not yet part of any formal specification, the Mozilla proposal has been discussed at the WhatWG and other vendors started to implement it, with their own prefix.See also  Using full-screen mode element.mozRequestFullScreen()  document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled    mozallowfullscreen  :-moz-full-screen-ancestor"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-handler-blocked","title":":-moz-handler-blocked","description":":-moz-handler-blocked matches elements that cannot be displayed because their handlers have been blocked. This is primarily useful for theme developers. See also  :-moz-handler-crashed  :-moz-handler-disabled"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-handler-crashed","title":":-moz-handler-crashed","description":":-moz-handler-crashed matches elements that cannot be displayed because the plugin responsible for drawing them has crashed. This is primarily useful for theme developers. See also  :-moz-handler-blocked  :-moz-handler-disabled"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-handler-disabled","title":":-moz-handler-disabled","description":":-moz-handler-disabled matches elements that cannot be displayed because their handlers have been disabled by the user. This is primarily useful for theme developers. See also  :-moz-handler-blocked  :-moz-handler-crashed"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-last-node","title":":-moz-last-node","description":"The :-moz-last-node pseudo-class matches an element that is the last child node of some other element. It differs from :last-child  because it does not match a last child element with (non-whitespace) text after it. Syntax  span:-moz-last-node { style properties }   Examples   span:-moz-last-node {     background-color: lime; }  ...where...   <div>   <span>:-moz-first-node<\/span>   <span>:-moz-last-node<\/span> <\/div>   Notes  Any white space at the end of an element is ignored for the determination of :-moz-last-node."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-list-bullet","title":"::-moz-list-bullet","description":"The ::-moz-list-bullet pseudo-class is used to edit the bullet of a list element. Syntax li::-moz-list-bullet { style properties }  Examples .liste li::-moz-list-bullet{ font-size:36px }  ...where... <ul> <li>Number 1<\/li> <li>Number 2<\/li> <li>Number 3<\/li> <\/ul> <ul class=\"liste\"> <li>Number 1<\/li> <li>Number 2<\/li> <li>Number 3<\/li> <\/ul>  ...result..."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-list-number","title":":-moz-list-number","description":"The ::-moz-list-number pseudo-class lets you customize the appearance of numbers on list items (<li> ) occurring in ordered lists (<ol> ). Syntax  li::-moz-list-number { style properties }  Examples \r           <style type=\"text\/css\">     li::-moz-list-number {       font-style: italic;       font-weight: bold;     }   <\/style>    <ol>     <li>First item<\/li>     <li>Second item<\/li>     <li>Third item<\/li>   <\/ol>\r          Gives the following result:   View the live example"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-loading","title":":-moz-loading","description":":-moz-loading matches elements none of which can be displayed because they have not started loading, such as images that haven't started to arrive yet.\u00a0 Note that images that are in the process of loading are not matched by this pseudo-class. This is primarily useful for theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-locale-dir(ltr)","title":":-moz-locale-dir(ltr)","description":":-moz-locale-dir(ltr) matches an element if the user interface is being displayed left-to-right. This is determined by the preference intl.uidirection.locale (where locale is the current locale) being set to \"ltr\". This allows extensions (and themes) to easily adapt their user interface based on the user's locale's needs. This can vary from window to window, and even from tab to tab. This also allows extensions to work even if they don't support the user's default locale, since they can support both left-to-right and right-to-left layouts without worrying about the locale specifics. This selector does not work properly from HTML; it always matches, no matter whether the UI\u00a0locale is left-to-right or right-to-left. See also  :-moz-locale-dir(rtl)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-locale-dir(rtl)","title":":-moz-locale-dir(rtl)","description":":-moz-locale-dir(rtl) matches an element if the user interface is being displayed right-to-left. This is determined by the preference intl.uidirection.locale (where locale is the current locale) being set to \"rtl\". This allows extensions (and themes) to easily adapt their user interface based on the user's locale's needs. This can vary from window to window, and even from tab to tab. This also allows extensions to work even if they don't support the user's default locale, since they can support both left-to-right and right-to-left layouts without worrying about the locale specifics. This selector does not work properly from HTML; it never matches, no matter whether the UI\u00a0locale is left-to-right or right-to-left. See also  :-moz-locale-dir(ltr)  Making sure your theme works with RTL\u00a0locales"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-lwtheme","title":":-moz-lwtheme","description":"The :-moz-lwtheme pseudo-class matches in chrome documents when the root element's lightweightthemes  attribute is true and a theme is selected.See also  :-moz-lwtheme-darktext  :-moz-lwtheme-brighttext  Lightweight themes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-lwtheme-brighttext","title":":-moz-lwtheme-brighttext","description":"The :-moz-lwtheme-brighttext pseudo-class matches in chrome documents when :-moz-lwtheme \u00a0is true and a lightweight theme with a bright text color is selected.See also  :-moz-lwtheme  :-moz-lwtheme-darktext  Lightweight themes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-lwtheme-darktext","title":":-moz-lwtheme-darktext","description":"The :-moz-lwtheme-darktext pseudo-class matches in chrome documents when :-moz-lwtheme \u00a0is true and a lightweight theme with a dark text color is selected.See also  :-moz-lwtheme  :-moz-lwtheme-brighttext  Lightweight themes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-only-whitespace","title":":-moz-only-whitespace","description":"Summary  The :-moz-only-whitespace pseudo-class matches an element that has no child nodes at all or empty text nodes or text nodes that have only white-space in them. Only when there are element nodes or text nodes with one or more characters inside the element, the element doesn't match this pseudo-class anymore.   Syntax  span:-moz-only-whitespace { style properties }   Examples   span:-moz-only-whitespace::before {     background-color: lime; }  ...where...     <span> <\/span>   Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-placeholder","title":":-moz-placeholder","description":"The :-moz-placeholder pseudo-class represents any form element displaying placeholder text. This allows web developers and theme designers to customize the appearance of placeholder text, which is a light grey color by default. This may not work well if you've changed the background color of your form fields to be a similar color, for example, so you can use this pseudo-class to change the placeholder text color.Example This example styles the placeholder text by making it green. \r           <!doctype html> <html> <head>   <title>Placeholder demo<\/title>   <style type=\"text\/css\">     input:-moz-placeholder {       color: green;     }   <\/style> <\/head> <body>   <input id=\"test\" placeholder=\"Placeholder text!\"> <\/body> <\/html>\r          View this example live. Bugzilla   bug 457801  Notes Note: This was previously incorrectly documented as having been created for Gecko 1.9 (Firefox 3) , for an entirely different purpose.  See also  Forms in HTML5 <input>  <textarea>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-suppressed","title":":-moz-suppressed","description":":-moz-suppressed matches elements representing images that were not loaded because loading images from that site has been blocked. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(mac-graphite-theme)","title":":-moz-system-metric(mac-graphite-theme)","description":":-moz-system-metric(mac-graphite-theme) will match an element if the user has chosen the \"Graphite\" appearance in the \"Appearance\" prefpane of the Mac OS X System Preferences. This selector is intended for use mainly by theme developers. Examples Demo Bugzilla   bug 448767"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(images-in-menus)","title":":-moz-system-metric(images-in-menus)","description":"Summary  :-moz-system-metric(images-in-menus) will match an element if the computer's user interface supports images in menus. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-submit-invalid","title":":-moz-submit-invalid","description":"The :-moz-submit-invalid CSS pseudo-class represents any submit button on forms whose contents aren't valid based on their validation constraints. By default, no style is applied. You can use this style to customize the appearance of the submit button when there are invalid form fields.Browser compatibility    Browser Lowest version   Internet Explorer ---   Firefox (Gecko) 4.0\u00a0(2.0)   Opera ?   Safari (WebKit) ?    See also  :valid  :invalid  :required  :optional"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-end-backward)","title":":-moz-system-metric(scrollbar-end-backward)","description":"Summary  :-moz-system-metric(scrollbar-end-backward) will match an element if the computer's user interface includes a backward arrow button at the end of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-end-forward)","title":":-moz-system-metric(scrollbar-end-forward)","description":"Summary  :-moz-system-metric(scrollbar-end-forward) will match an element if the computer's user interface includes a forward arrow button at the end of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-start-forward)","title":":-moz-system-metric(scrollbar-start-forward)","description":"Summary  :-moz-system-metric(scrollbar-start-foreward) will match an element if the computer's user interface includes a forward arrow button at the start of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-start-backward)","title":":-moz-system-metric(scrollbar-start-backward)","description":":-moz-system-metric(scrollbar-start-backward) will match an element if the computer's user interface includes a backward arrow button at the start of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-thumb-proportional)","title":":-moz-system-metric(scrollbar-thumb-proportional)","description":"Summary  :-moz-system-metric(scrollbar-thumb-proportional) will match an element if the computer's user interface uses proportional scrollbar thumbs; that is, the draggable thumb on the scrollbar resizes to indicate the relative size of the visible area of the document. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(touch-enabled)","title":":-moz-system-metric(touch-enabled)","description":":-moz-system-metric(touch-enabled) will match an element if the device on which the content is being rendered offers a supported touch-screen interface. Note: This is not intended for use in web content. Use the -moz-touch-enabled media query instead."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(windows-default-theme)","title":":-moz-system-metric(windows-default-theme)","description":"Summary  :-moz-system-metric(windows-default-theme) will match an element if the user is currently using one of the following themes in Windows: Luna, Royale, Zune, or Aero (i.e., Vista Basic, Vista Standard, or Aero Glass). This will exclude Windows Classic themes as well as third-party themes. This selector is intended for use mainly by theme developers.   Examples  Demo   Bugzilla    bug 426660    bug 429176"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-cell-text(hover)","title":":-moz-tree-cell-text(hover)","description":":-moz-tree-cell-text(hover) will match an element if the mouse cursor is presently hovering over text in a tree cell. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-cell-text","title":":-moz-tree-cell-text","description":"Associated Elements  treecell  Style Properties  font visibility color text-decoration"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-cell","title":":-moz-tree-cell","description":"Associated Elements  treecell  Style Properties  background border margin outline padding visibility  See also  Styling a Tree"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-column","title":":-moz-tree-column","description":"Associated Elements  treecol  Style Properties  margin visibility text style"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-drop-feedback","title":":-moz-tree-drop-feedback","description":"Associated Elements  treerow  Style Properties  margin visibility"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-image","title":":-moz-tree-image","description":"Associated Elements  treeitem treecell  Style Properties  margin list style position  Examples Bookmark icons in the Places window - Mozillazine Forum"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-indentation","title":":-moz-tree-indentation","description":"Associated Elements  treeitem  Style Properties  position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-progressmeter","title":":-moz-tree-progressmeter","description":"Associated Elements  treecell  Style Properties  margin color"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-line","title":":-moz-tree-line","description":"Associated Elements  treeitem  Style Properties  border visibility"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-row","title":":-moz-tree-row","description":"-moz-tree-row is used to select rows and apply style to tree rows. Associated Elements  treerow  Associated Elements  treerow  Syntax  treechildren::-moz-tree-row { style properties }  Style Properties  background border margin outline padding display -moz-appearance  Style Properties  background border margin outline padding display -moz-appearance  Examples  treechildren::-moz-tree-row( foo bar ) {     margin: 2%; }  ...where...    <treerow properties=\"foo\">...<\/treerow>  Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-row(hover)","title":":-moz-tree-row(hover)","description":"Summary  :-moz-tree-row(hover) will match an element if the mouse cursor is presently hovering over a tree row. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-twisty","title":":-moz-tree-twisty","description":"Associated Elements  treecell  Style Properties  border margin padding display list style position -moz-appearance"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-separator","title":":-moz-tree-separator","description":"Associated Elements  treeseparator  Style Properties  border display -moz-appearance"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-ui-valid","title":":-moz-ui-valid","description":"The :-moz-ui-valid CSS pseudo-class represents any validated form element whose value validates correctly based on its validation constraints. This pseudo-class is applied according to the following rules:  If the control does not have focus, and the value is valid, apply this pseudo-class. If the control has focus, and the value was valid (including empty) when it gained focus, apply this pseudo-class. If the control has focus, and the value was invalid when it gained focus, re-validate on every keystroke. If the element is required, the preceding rules apply only if the user has changed the value or attempted to submit the form.  The result is that if the control was valid when the user started interacting with it, the validity styling is changed only when the user shifts focus to another control. However, if the user is trying to correct a previously-flagged value, the control shows immediately when the value becomes valid. Required items are flagged as invalid only if the user changes them or attempts to submit an unchanged invalid value.Browser compatibility    Browser Lowest version   Internet Explorer ---   Firefox (Gecko) 4.0\u00a0(2.0)   Opera ?   Safari (WebKit) ?    See also  :valid  :invalid  :required  :optional  :-moz-ui-invalid"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-ui-invalid","title":":-moz-ui-invalid","description":"The :-moz-ui-invalid CSS pseudo-class represents any validated form element whose value isn't valid based on their validation constraints, in certain circumstances. This pseudo-class is applied according to the following rules:  If the control does not have focus, and the value is invalid, apply this pseudo-class. If the control has focus, and the value was valid (including empty) when it gained focus, do not apply the pseudo-class. If the control has focus, and the value was invalid when it gained focus, re-validate on every keystroke. If the element is required, the preceding rules apply only if the user has changed the value or attempted to submit the form.  The result is that if the control was valid when the user started interacting with it, the validity styling is changed only when the user shifts focus to another control. However, if the user is trying to correct a previously-flagged value, the control shows immediately when the value becomes valid. Required items have the pseudo-class applied only if the user changes them or attempts to submit an unchanged valid value. By default, Gecko applies a style that creates a red \"glow\" (using the box-shadow  property) around items with that have this pseudo-class applied. See the :invalid  pseudo-class for an example that shows how to override the default style.Browser compatibility    Browser Lowest version   Internet Explorer ---   Firefox (Gecko) 4.0\u00a0(2.0)   Opera ?   Safari (WebKit) ?    See also  :valid  :invalid  :required  :optional  :-moz-ui-valid"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-user-disabled","title":":-moz-user-disabled","description":":-moz-user-disabled matches elements representing images that were not loaded because images have been entirely disabled by the user's preferences. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-window-inactive","title":":-moz-window-inactive","description":"The :-moz-window-inactive pseudo-class matches any element while it's in an inactive window. Note: Prior to the addition of this attribute, giving different styles to background windows was achieved by setting an attribute (active=\"true\") on the top level XUL chrome window. This attribute is no longer used. :-moz-window-inactive works in content HTML documents, too. Example This example alters the appearance of a box's background depending on whether its window is active or not. \r           <style type=\"text\/css\">     #mybox {       background: -moz-linear-gradient(top, blue, cyan);     }     #mybox:-moz-window-inactive {       background: cyan;     }   <\/style>    <div id=\"mybox\" style=\"width:200px; height:200px;\">     <p>This is a box!<\/p>   <\/div>\r          You can view this as a live sample here. This was implemented in bug 508482."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@-moz-document","title":"@-moz-document","description":"The @-moz-document rule is a Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document. It is designed primarily for user style sheets. A @-moz-document rule can specify one or more matching functions. If any of the functions apply to a URL, the rule will take effect on that URL. The functions available are:  url(), which matches an exact URL url-prefix(), which matches if the document URL starts with the value provided domain(), which matches if the document URL is on the domain provided (or a subdomain of it) regexp(), which matches if the document URL is matched by the regular expression provided. The expression must match the entire URL.    Gecko 6.0 note(Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3)   Support for the regexp()function was added in Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) .  Syntax The values provided to the url(), url-prefix(), and domain() functions can optionally be enclosed by single or double quotes. The values provided to the regexp() function must be enclosed in quotes. Escaped values provided to the regexp() function must additionally escaped from the CSS. For example, a . (period) matches any character in regular expressions. To match a literal period, you would first need to escape it using regular expression rules (to \\.), then escape that string using CSS rules (to \\\\.). Examples You can put this into your userContent.css file: \r           @-moz-document url(http:\/\/www.w3.org\/),                url-prefix(http:\/\/www.w3.org\/Style\/),                domain(mozilla.org),                regexp(\"^https:.*\") {   \/* CSS rules here apply to:      + The page \"http:\/\/www.w3.org\/\".      + Any page whose URL begins with \"http:\/\/www.w3.org\/Style\/\"      + Any page whose URL's host is \"mozilla.org\" or ends with        \".mozilla.org\"      + Any page whose URL starts with \"https:\" *\/    \/* make the above-mentioned pages really ugly *\/   body { color: purple; background: yellow; } }\r          Specifications  Per-site user style sheet rules. Not part of any W3C specification. CSS Conditional Rules Module Level 3  Browser compatibility Available since Mozilla 1.8 \/ Firefox 1.5."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Multiple_backgrounds","title":"Multiple backgrounds","description":"Example In this example, three backgrounds are stacked: the Firefox logo, a linear gradient, and an image with flowers: \r           .multi_bg_example {   background: url(http:\/\/demos.hacks.mozilla.org\/openweb\/resources\/images\/logos\/firefox-48.png),         -moz-linear-gradient(left, rgba(255, 255, 255, 0),  rgba(255, 255, 255, 1)),         url(http:\/\/demos.hacks.mozilla.org\/openweb\/resources\/images\/patterns\/flowers-pattern.jpg);   background-repeat: no-repeat, no-repeat, repeat;   background-position: bottom right, left, right; }\r             Screen Shot Live Demonstration    \u00a0    As you can see here, the Firefox logo (listed first)\u00a0is on top, followed by the gradient, which is layered atop the flowered background. Each subsequent sub-property (background-repeat  and background-position ) applies to the corresponding backgrounds. So the first listed value for background-repeat  applies to the first (frontmost) background, and so forth.See also  background , background-attachment , background-clip , background-color , background-image , background-origin , background-position , background-repeat , background-size  Using gradients"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Scaling_of_SVG_backgrounds","title":"Scaling of SVG backgrounds","description":"The algorithm, in summary The algorithm can for the most part be summarized by these four rules. There are some edge cases that aren't covered by these rules, but this covers the majority of cases.  If background-size  specifies a fixed dimension (that is, percentages and relative units are fixed by their context), that dimension wins. If the image has an intrinsic ratio (that is, its width:height ratio is constant, such as 16:9, 4:3, 2.39:1, 1:1, and so forth), the rendered size preserves that ratio. If the image specifies a size, and the size isn't modified by constrain or cover, that specified size wins. If none of the above cases are met, the image is rendered at the same size as the background area.  It's worth noting that the sizing algorithm only cares about the image's dimensions and proportions, or lack thereof. An SVG image with fixed dimensions will be treated just like a raster image of the same size. Source image examples Before diving in to look at the results of using different kinds of source images and seeing how they look when used with background-size , it would be helpful to look at a few example source images that have different dimensions and sizing settings. In each case, we show what the source image looks like rendered in a 150x150 box, and provide a link to the SVG source. Dimensionless and proportionless This image is both dimensionless and proportionless. It doesn't care what size it is, nor does it care about remaining at a particular aspect ratio. This would make a good gradient desktop background that would work regardless of your screen size and its aspect ratio.  SVG source One specified dimension and proportionless This image specifies a width of 100 pixels but no height or intrinsic ratio. This is, basically, a thin strip of wallpaper that could be stretched across the entire height of a block.  SVG source One specified dimension with intrinsic ratio This image specifies a 100 pixel height but no width. It also specifies an intrinsic aspect ratio of 3:4. This ensures that its width:height ratio is always 3:4, unless it's deliberately scaled to a disproportionate size (that is, by explicitly specifying both width and height that aren't of that ratio). This is very much like specifying a specific width and height, since once you have one dimension and a ratio, the other dimension is implied, but it's still a useful example.  SVG source No width or height with intrinsic ratio This image doesn't specify either a width or a height; instead, it specifies an intrinsic ratio of 1:1. Think of this like a program icon. It's always square, and is usable at any size, such as 32x32, 128x128, or 512x512, for example.  SVG source Dimensionless and proportionless This image is both dimensionless and proportionless. It doesn't care what size it is, nor does it care about remaining at a particular aspect ratio. This would make a good gradient desktop background that would work regardless of your screen size and its aspect ratio.  SVG source One specified dimension and proportionless This image specifies a width of 100 pixels but no height or intrinsic ratio. This is, basically, a thin strip of wallpaper that could be stretched across the entire height of a block.  SVG source One specified dimension with intrinsic ratio This image specifies a 100 pixel height but no width. It also specifies an intrinsic aspect ratio of 3:4. This ensures that its width:height ratio is always 3:4, unless it's deliberately scaled to a disproportionate size (that is, by explicitly specifying both width and height that aren't of that ratio). This is very much like specifying a specific width and height, since once you have one dimension and a ratio, the other dimension is implied, but it's still a useful example.  SVG source No width or height with intrinsic ratio This image doesn't specify either a width or a height; instead, it specifies an intrinsic ratio of 1:1. Think of this like a program icon. It's always square, and is usable at any size, such as 32x32, 128x128, or 512x512, for example.  SVG source Scaling examples Now let's see some examples of what happens as we apply different scaling to these images. In each of the examples below, the enclosing rectangles are 300 pixels wide and 300 pixels tall. In addition, the backgrounds have background-repeat  set to no-repeat for clarity. Note: The screenshots below show the expected rendering. Not all browsers currently render these correctly. Specifying fixed lengths for both dimensions If you use background-size  to specify fixed lengths for both dimensions, those lengths are always used, per rule 1 above. In other words, the image will always get stretched to the dimensions you specify, regardless of whether or not the source image has specified its dimensions and\/or aspect ratio. Source: No dimensions or intrinsic ratio Given this CSS: background: url(no-dimensions-or-ratio.svg); background-size: 125px 175px;  The rendered output would look like this:  Source: One specified dimension, no intrinsic ratio Given this CSS: background: url(100px-wide-no-height-or-ratio.svg); background-size: 250px 150px;  The rendered output would look like this:  Source: One specified dimension with intrinsic ratio Given this CSS: background: url(100px-height-3x4-ratio.svg); background-size: 275px 125px;  The rendered output would look like this:  Source: No specified width or height with intrinsic ratio Given this CSS: background: url(no-dimensions-1x1-ratio.svg); background-size: 250px 100px;  The rendered output would look like this:  Using contain or cover Specifying cover for background-size  makes the picture as small as possible while still covering the entire background area. contain, on the other hand, makes the image as large as possible while not being clipped by the background area. For an image with an intrinsic ratio, exactly one size matches the cover\/fit criteria alone. But if there is no intrinsic ratio specified, cover\/fit isn't sufficient, so the large\/small constraints choose the resulting size. Source: No dimensions or intrinsic ratio If an image doesn't specify either dimensions or an intrinsic ratio, neither rule 2 nor rule 3 apply, so rule 4 takes over: the background image is rendered covering the entire background area. This satisfies the largest-or-smallest constraint. background: url(no-dimensions-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension, no intrinsic ratio Similarly, if the image has one dimension specified but no intrinsic ratio, rule 4 applies, and the image is scaled to cover the entire background area. background: url(100px-wide-no-height-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension with intrinsic ratio Things change when you specify an intrinsic ratio. In this case, rule 1 isn't relevant, so rule 2 is applied: we try to preserve any intrinsic ratio (while respecting contain or cover). For example, preserving a 3:4 intrinsic aspect ratio for a 300x200 box with contain means drawing a 150x200 background. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. Source: No dimensions with intrinsic ratio When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. Automatic sizing using \"auto\" for both dimensions If background-size  is set to auto or auto auto, rule 2 says that rendering must preserve any intrinsic ratio that's provided. Source: No dimensions or intrinsic ratio When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area. background: url(no-dimensions-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: One dimension and no intrinsic ratio If no intrinsic ratio is specified, but at least one dimension is specified, rule 3 takes effect, and we render the image obeying those dimensions. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Note here that the width, which is specified in the source SVG at 100 pixels, is obeyed, while the height fills the background area since it's not specified (either explicitly or by an intrinsic ratio). Source: One dimension and an intrinsic ratio If we have an intrinsic ratio with a fixed dimension, that fixes both dimensions in place. Knowing one dimension and a ratio is, as has been mentioned already, the same as specifying both dimensions explicitly. background: url(100px-height-3x4-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Since this image has an explicit 100 pixel height, the 3:4 ratio explicitly sets its width at 75 pixels, so that's how it's rendered in the auto case. Source: No fixed dimensions with intrinsic ratio When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the contain case. background: url(no-dimensions-1x1-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Using \"auto\" and one specific length Given rule 1, specified dimensions are always used, so we need to use our rules only to determine the second dimension. Source: No dimensions or intrinsic ratio If the image has no dimensions or intrinsic ratio, rule 4 applies, and we use the background area's dimension to determine the value for the auto dimension. background: url(no-dimensions-or-ratio.svg); background-size: auto 150px;   Here, the width is determined using the background area's width per rule 4, while the height is the 140px specified in the CSS. Source: One specified dimension with no intrinsic ratio If the image has one specified dimension but no intrinsic ratio, that specified dimension is used per rule 3 if that dimension is set to auto in the CSS. background: url(100px-wide-no-height-or-ratio.svg); background-size: 200px auto;   Here, the 200px specified in the CSS overrides the 100px width specified in the SVG, per rule 1. Since there's no intrinsic ratio or height provided, auto selects the height of the background area as the height for the rendered image. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto 125px;   In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1. Source: One specified dimension with intrinsic ratio When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension. background: url(100px-height-3x4-ratio.svg); background-size: 150px auto;   In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the auto case. Source: No specified dimensions with intrinsic ratio If no dimensions are specified in the SVG, the specified dimension in the CSS is applied, then the intrinsic ratio is used to select the other dimension, per rule 2. background: url(no-dimensions-1x1-ratio.svg); background-size: 150px auto;   The width is set by the CSS to 150px. The auto value for the height is computed using that width and the 1:1 aspect ratio to be 150px as well, resulting in the image above. Specifying fixed lengths for both dimensions If you use background-size  to specify fixed lengths for both dimensions, those lengths are always used, per rule 1 above. In other words, the image will always get stretched to the dimensions you specify, regardless of whether or not the source image has specified its dimensions and\/or aspect ratio. Source: No dimensions or intrinsic ratio Given this CSS: background: url(no-dimensions-or-ratio.svg); background-size: 125px 175px;  The rendered output would look like this:  Source: One specified dimension, no intrinsic ratio Given this CSS: background: url(100px-wide-no-height-or-ratio.svg); background-size: 250px 150px;  The rendered output would look like this:  Source: One specified dimension with intrinsic ratio Given this CSS: background: url(100px-height-3x4-ratio.svg); background-size: 275px 125px;  The rendered output would look like this:  Source: No specified width or height with intrinsic ratio Given this CSS: background: url(no-dimensions-1x1-ratio.svg); background-size: 250px 100px;  The rendered output would look like this:  Source: No dimensions or intrinsic ratio Given this CSS: background: url(no-dimensions-or-ratio.svg); background-size: 125px 175px;  The rendered output would look like this:  Source: One specified dimension, no intrinsic ratio Given this CSS: background: url(100px-wide-no-height-or-ratio.svg); background-size: 250px 150px;  The rendered output would look like this:  Source: One specified dimension with intrinsic ratio Given this CSS: background: url(100px-height-3x4-ratio.svg); background-size: 275px 125px;  The rendered output would look like this:  Source: No specified width or height with intrinsic ratio Given this CSS: background: url(no-dimensions-1x1-ratio.svg); background-size: 250px 100px;  The rendered output would look like this:  Using contain or cover Specifying cover for background-size  makes the picture as small as possible while still covering the entire background area. contain, on the other hand, makes the image as large as possible while not being clipped by the background area. For an image with an intrinsic ratio, exactly one size matches the cover\/fit criteria alone. But if there is no intrinsic ratio specified, cover\/fit isn't sufficient, so the large\/small constraints choose the resulting size. Source: No dimensions or intrinsic ratio If an image doesn't specify either dimensions or an intrinsic ratio, neither rule 2 nor rule 3 apply, so rule 4 takes over: the background image is rendered covering the entire background area. This satisfies the largest-or-smallest constraint. background: url(no-dimensions-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension, no intrinsic ratio Similarly, if the image has one dimension specified but no intrinsic ratio, rule 4 applies, and the image is scaled to cover the entire background area. background: url(100px-wide-no-height-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension with intrinsic ratio Things change when you specify an intrinsic ratio. In this case, rule 1 isn't relevant, so rule 2 is applied: we try to preserve any intrinsic ratio (while respecting contain or cover). For example, preserving a 3:4 intrinsic aspect ratio for a 300x200 box with contain means drawing a 150x200 background. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. Source: No dimensions with intrinsic ratio When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. Source: No dimensions or intrinsic ratio If an image doesn't specify either dimensions or an intrinsic ratio, neither rule 2 nor rule 3 apply, so rule 4 takes over: the background image is rendered covering the entire background area. This satisfies the largest-or-smallest constraint. background: url(no-dimensions-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension, no intrinsic ratio Similarly, if the image has one dimension specified but no intrinsic ratio, rule 4 applies, and the image is scaled to cover the entire background area. background: url(100px-wide-no-height-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension with intrinsic ratio Things change when you specify an intrinsic ratio. In this case, rule 1 isn't relevant, so rule 2 is applied: we try to preserve any intrinsic ratio (while respecting contain or cover). For example, preserving a 3:4 intrinsic aspect ratio for a 300x200 box with contain means drawing a 150x200 background. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. Source: No dimensions with intrinsic ratio When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. Automatic sizing using \"auto\" for both dimensions If background-size  is set to auto or auto auto, rule 2 says that rendering must preserve any intrinsic ratio that's provided. Source: No dimensions or intrinsic ratio When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area. background: url(no-dimensions-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: One dimension and no intrinsic ratio If no intrinsic ratio is specified, but at least one dimension is specified, rule 3 takes effect, and we render the image obeying those dimensions. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Note here that the width, which is specified in the source SVG at 100 pixels, is obeyed, while the height fills the background area since it's not specified (either explicitly or by an intrinsic ratio). Source: One dimension and an intrinsic ratio If we have an intrinsic ratio with a fixed dimension, that fixes both dimensions in place. Knowing one dimension and a ratio is, as has been mentioned already, the same as specifying both dimensions explicitly. background: url(100px-height-3x4-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Since this image has an explicit 100 pixel height, the 3:4 ratio explicitly sets its width at 75 pixels, so that's how it's rendered in the auto case. Source: No fixed dimensions with intrinsic ratio When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the contain case. background: url(no-dimensions-1x1-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: No dimensions or intrinsic ratio When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area. background: url(no-dimensions-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: One dimension and no intrinsic ratio If no intrinsic ratio is specified, but at least one dimension is specified, rule 3 takes effect, and we render the image obeying those dimensions. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Note here that the width, which is specified in the source SVG at 100 pixels, is obeyed, while the height fills the background area since it's not specified (either explicitly or by an intrinsic ratio). Source: One dimension and an intrinsic ratio If we have an intrinsic ratio with a fixed dimension, that fixes both dimensions in place. Knowing one dimension and a ratio is, as has been mentioned already, the same as specifying both dimensions explicitly. background: url(100px-height-3x4-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Since this image has an explicit 100 pixel height, the 3:4 ratio explicitly sets its width at 75 pixels, so that's how it's rendered in the auto case. Source: No fixed dimensions with intrinsic ratio When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the contain case. background: url(no-dimensions-1x1-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Using \"auto\" and one specific length Given rule 1, specified dimensions are always used, so we need to use our rules only to determine the second dimension. Source: No dimensions or intrinsic ratio If the image has no dimensions or intrinsic ratio, rule 4 applies, and we use the background area's dimension to determine the value for the auto dimension. background: url(no-dimensions-or-ratio.svg); background-size: auto 150px;   Here, the width is determined using the background area's width per rule 4, while the height is the 140px specified in the CSS. Source: One specified dimension with no intrinsic ratio If the image has one specified dimension but no intrinsic ratio, that specified dimension is used per rule 3 if that dimension is set to auto in the CSS. background: url(100px-wide-no-height-or-ratio.svg); background-size: 200px auto;   Here, the 200px specified in the CSS overrides the 100px width specified in the SVG, per rule 1. Since there's no intrinsic ratio or height provided, auto selects the height of the background area as the height for the rendered image. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto 125px;   In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1. Source: One specified dimension with intrinsic ratio When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension. background: url(100px-height-3x4-ratio.svg); background-size: 150px auto;   In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the auto case. Source: No specified dimensions with intrinsic ratio If no dimensions are specified in the SVG, the specified dimension in the CSS is applied, then the intrinsic ratio is used to select the other dimension, per rule 2. background: url(no-dimensions-1x1-ratio.svg); background-size: 150px auto;   The width is set by the CSS to 150px. The auto value for the height is computed using that width and the 1:1 aspect ratio to be 150px as well, resulting in the image above. Source: No dimensions or intrinsic ratio If the image has no dimensions or intrinsic ratio, rule 4 applies, and we use the background area's dimension to determine the value for the auto dimension. background: url(no-dimensions-or-ratio.svg); background-size: auto 150px;   Here, the width is determined using the background area's width per rule 4, while the height is the 140px specified in the CSS. Source: One specified dimension with no intrinsic ratio If the image has one specified dimension but no intrinsic ratio, that specified dimension is used per rule 3 if that dimension is set to auto in the CSS. background: url(100px-wide-no-height-or-ratio.svg); background-size: 200px auto;   Here, the 200px specified in the CSS overrides the 100px width specified in the SVG, per rule 1. Since there's no intrinsic ratio or height provided, auto selects the height of the background area as the height for the rendered image. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto 125px;   In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1. Source: One specified dimension with intrinsic ratio When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension. background: url(100px-height-3x4-ratio.svg); background-size: 150px auto;   In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the auto case. Source: No specified dimensions with intrinsic ratio If no dimensions are specified in the SVG, the specified dimension in the CSS is applied, then the intrinsic ratio is used to select the other dimension, per rule 2. background: url(no-dimensions-1x1-ratio.svg); background-size: 150px auto;   The width is set by the CSS to 150px. The auto value for the height is computed using that width and the 1:1 aspect ratio to be 150px as well, resulting in the image above. See also  background-size  Blog post: Properly resizing vector image backgrounds"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_URL_values_for_the_cursor_property","title":"Using URL values for the cursor property","description":"Syntax The basic (CSS 2.1) syntax for this property is:  cursor:  [<url>,]* keyword This means that zero or more URLs may be specified (comma-separated), which must be followed by one of the keywords defined in the CSS specification, such as auto or pointer. For example, the following value would be allowed:  cursor:  url(foo.cur), url(http:\/\/www.example.com\/bar.gif), auto; This will first try loading foo.cur. If that file does not exist or is not valid for some other reason, bar.gif is tried, and if that can't be used either, auto will be used. Support for the CSS 3 syntax for cursor values got added in Gecko 1.8 (Firefox 1.5):  cursor:  [<uri> [<x> <y>]?,]* keyword It allows specifying the coordinates of the cursor's hotspot, which will be clamped to the boundaries of the cursor image. If none are specified, the coordinates of the hotspot are read from the file itself (for CUR and XBM files) or are set to the top left corner of the image. An example of the CSS3 syntax is:  .foo  {     cursor:  auto;     cursor:  url(cursor1.png) 4 12; }  .bar  {     cursor:  pointer;     cursor:  url(cursor2.png) 2 2; }   \/* fallsback onto 'auto' and 'pointer' in IE, but must be set seperately *\/  The first number is the x-coordinate, and the second number is the y-coordinate. The example will set the hotspot to be the pixel at (4,12) from the top left (0,0). Limitations All image formats supported by Gecko can be used. This means that you can use PNG, GIF, JPG, BMP, CUR etc. images. ANI is not supported. An animated GIF will not create an animated cursor.   Gecko 2.0 note(Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1)   Starting with Gecko 2.0 (Firefox 4 \/ Thunderbird 3.3 \/ SeaMonkey 2.1) , Gecko also supports the SVG\u00a0image format for cursors. However, the SVG image must contain a length-valued (not percentage-valued) height and width on its root SVG node.  In Gecko (Firefox) the limit of the cursor size is 128\u00d7128px. Larger cursor images are ignored. However, you should limit yourself to the size 32\u00d732 for maximum compatibility with operating systems and platforms. (Due to a bug in Gecko 1.9.2-1.9.2.6, Firefox 3.6-3.6.6 on Windows limits to 32x32px. This is fixed in later versions) Translucent cursors are not supported on Windows releases earlier than XP. This is a limitation of the operating system. Transparency works on all platforms. URL values as cursors are supported in Windows, OS\/2, and Linux (when using GTK+ 2.4 or better) releases of Mozilla.\u00a0 Mac OS\u00a0 support was added with Gecko 2 (Firefox 4) . Compatibility with other browsers Microsoft Internet Explorer 6.0 also supports URI values for the cursor property. However:  IE only supports CUR and ANI as formats. IE doesn't support the CSS 3 syntax with x- and y-coordinates. The cursor image, and the rest of the property, are ignored.     Browser Lowest version formats (e.g.) x-y-coordinates   Internet Explorer 6.0 .cur | .ani ---   Firefox (Gecko), Windows and Linux 1.5 (1.8) .cur | .png | .gif | .jpg 1.5 (1.8)   Firefox (Gecko) 4.0 (2.0) .cur | .png | .gif | .jpg | .svg  (Gecko 2.0)   Opera --- --- ---   Safari (Webkit) 3.0 (522-523) .cur | .png | .gif | .jpg 3.0 (522-523)   Since OS X 10.5 supports Safari (Mac) .cur files"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/bleed","title":"bleed","description":"This property specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled.  Initial value : 6pt Applies to: page context Inherited : no Percentages: refer to width of page box Media: visual   Computed value : as specified value  Syntax  bleed : <length>  Values   <length>   The amount of page bleed outside the page box.  Examples    \u00a0 Specifications  CSS Generated Content for Paged Media Module  Browser compatibility    Browser Lowest version   Internet Explorer \u00a0   Firefox (Gecko) \u00a0   Opera \u00a0   Safari (WebKit) \u00a0    See also  marks"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/repeating-linear-gradient","title":"repeating-linear-gradient","description":"Syntax repeating-linear-gradient( [ [ <angle> | to <side-or-corner> ,]? <color-stop> [, <color-stop>]+ )  Vendor prefixes: See the compatibility table below for detail on the vendor prefixes you'll need to use for gradients. Where:  <color-stop>  <color>  [ <percentage>  |  <length>  ]   Values  <side-or-corner> Represents the position of the starting-point of the gradient line. It consists of two keywords: the first one indicates the horizontal side, left or right, and the second one the vertical side, top or bottom. The order is not relevant and each of the keyword is optional. The values to top, to bottom, to left and to right are translated into the angles 0deg, 180deg, 270deg, 90deg respectively. The others are translated into an angle that let the starting-point to be in the same quadrant than the described corner and so that the line defined by the starting-point and the corner is perpendicular to the gradient line. That way, the color described by the <color-stop> will exactly apply to the corner point. This is sometimes called the \"magic corner\" property. The end-point of the gradient line is the symmetrical point of the starting-point on the other direction of the center box. <angle> An angle of direction for the gradient. See <angle> . <color-stop> This value is comprised of a <color>  value, followed by an optional stop position (either a percentage between 0% and 100% or a  <length>  along the gradient axis). Rendering of color-stops in CSS gradients follows the same rules as color-stops in SVG gradients.  Example background: repeating-linear-gradient(to bottom right, red, red 5px, white 5px, white 10px);  Specifications    Specification Status Comment     CSS Image Value and Replaced Content Module Level 3 Working Draft  \u00a0    Browser compatibility    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.6 (1.9.2)  -moz   bug 479220  [3] 10.0 (534.16) -webkit [3] 10.0  -ms[1] 11.10 -o [3] 5.1 -webkit[3]   Legacy from syntax (without to) Non-standard      3.6 (1.9.2)  -moz [2] 10.0 (534.16) -webkit 10.0  -ms [1] 11.10 -o 5.1 -webkit   to syntax  10.0 (10)  -moz   bug 685400  [2]  -- -- -- --    [1] Internet Explorer 5.5 through 8.0 supports proprietary filter: progid:DXImageTransform.Microsoft.Gradient() filter. [2] Firefox 3.6 implemented, prefixed, an early syntax where the starting corner or side was indicated without the to keyword, and effectively considered as a from position. The to syntax has been added in Firefox 10, without removing the deprecated syntax and translation between the two is trivial: -moz-repeating-linear-gradient(to top left, blue, red);  is the same as:  -moz-repating-linear-gradient(bottom right, blue, red);  The legacy syntax, without to, is planned to go away when the prefix will be removed. \u00a0 [3] Gecko, Opera & Webkit considers <angle>  to start to the right, instead of the top. I.e. it considered an angle of 0deg as a direction indicator pointing to the right. This is different from the latest specification where an angle of 0deg as a direction indicator points to the top. [2] [3] See also  Using CSS gradients, radial-gradient() , repeating-linear-gradient() , repeating-radial-gradient() ; Some properties where it can be used: background-image , background ; The now obsolete WebKit's original proposal."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/repeating-radial-gradient","title":"repeating-radial-gradient","description":"Syntax -moz-repeating-radial-gradient( [<position> || <angle>,]? [<shape> ||\u00a0<size>,]? <stop>, <stop>[, <stop>]* )  Values  <position> A position, interpreted in the same way as background-position  or -moz-transform-origin . If omitted, the default is center. <angle> An angle establishing the gradient line, which extends from the starting point at this angle; this is 0deg by default. <shape> The gradient's shape. This is one of circle (meaning that the gradient's shape is a circle with constant radius) or ellipse (meaning that the shape is an axis-aligned ellipse). The default value is ellipse. <size> The size of the gradient. This is one of the Size constants listed below. <stop> This value is comprised of a <color>  value, followed by an optional stop position (either a percentage between 0% and 100% or a  <length>  along the gradient axis). Rendering of color-stops in CSS gradients follows the same rules as color-stops in SVG gradients.  Size constants    Constant Description   closest-side  The gradient's shape meets the side of the box closest to its center (for circles) or meets both the vertical and horizontal sides closest to the center (for ellipses).   closest-corner The gradient's shape is sized so it exactly meets the closest corner of the box from its center.   farthest-side Similar to closest-side, except the shape is sized to meet the side of the box farthest from its center (or vertical and horizontal sides).   farthest-corner  The gradient's shape is sized so it exactly meets the farthest corner of the box from its center.   contain  A synonym for closest-side.   cover  A synonym for farthest-corner.    Usage Radial gradients also run along an axis. At each end point of the axis, a radius is specified. This can be imagined as creating two \"circles\", where for each circle the center is specified by the point and the radius is specified by the radius length. The gradient runs outwards from the circumference of the inner circle to the circumference of the outer circle. background: -moz-repeating-radial-gradient(black, black 5px, white 5px, white 10px); Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 10 -webkit-repeating-radial-gradient() 3.6 (1.9.2) -moz-repeating-radial-gradient() 5.5 (including 8.0) filter: progid:DXImageTransform.Microsoft.Gradient()  12 [1] -o-repeating-radial-gradient()  Nightly build (534.16) -webkit-repeating-radial-gradient()         Feature Android Firefox Mobile (Gecko) IE\u00a0Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Using gradients repeating-linear-gradient  -moz-radial-gradient  background-image  background  WebKit's original proposal: http:\/\/webkit.org\/blog\/175\/introducing-css-gradients\/ Bug:   bug 479220  W3C\u00a0Proposal for Radial Gradients: http:\/\/dev.w3.org\/csswg\/css3-images\/#radial-gradients W3C Proposal for Background\u00a0Position:\u00a0http:\/\/www.w3.org\/TR\/css3-background\/#the-background-position MSDN library, gradient filter (reference doc) Safari: CSS3 Gradients (blog post)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/General_sibling_selectors","title":"General sibling selectors","description":"The ~ combinator separates two selectors and matches the second element only if it is preceded by the first, and both share a common parent. Syntax element ~ element { style properties }  Examples \r           p ~ span {   color: red; }\r          ...where... \r           <p>Here is a paragraph.<\/p> <code>Here is some code.<\/code> <span>And here is a span.<\/span>\r          ... should look like ... Here is a paragraph Here is some code.And here is a span. Specifications  CSS 3 Selectors  See Also Adjacent sibling selectors  Notes \u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Privacy_and_the_%3Avisited_selector","title":"Privacy and the :visited selector","description":"Little white lies The first change is that Gecko will lie to web applications under certain circumstances. In particular, getComputedStyle() and similar functions such as element.querySelector()  always return values indicating that a user has never visited any of the links on a page. Also, if you use a sibling connector such as :visited +\u00a0span, the <span>  will be styled as if the link were unvisited. And, in a rare scenario, if you're using nested link elements and the element being matched is different from the link whose presence in history is being tested, the element is drawn as if the link were unvisited as well. Limits to visited link styles You will still be able to visually style visited links, but there are now limits on what styles you can use. Only the following properties can be applied to visited links:  color  background-color  border-color  (and its sub-properties) outline-color  The color parts of the fill and stroke properties  In addition, even for the properties you can set for visited links, you won't be able to change the transparency between unvisited and visited links, as you otherwise would be able to using rgba() or hsla()\u00a0color values or the transparent keyword. Impact on web developers Overall, this shouldn't affect web developers too significantly. There are, however, a few special cases that may require changes to sites:  Using background images to style links and indicate whether or not they've been visited will no longer work, since only colors can be used to style visited links. CSS\u00a0transitions won't be supported for visited links. Fortunately, CSS transitions are very new, and there are few sites using them at this point, so this isn't likely to impact many people at this point.  See also  privacy-related changes coming to CSS :visited on Mozilla Hacks Plugging the CSS\u00a0History Leak on the Mozilla Security Blog Preventing attacks on a user's history through CSS :visited selectors"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Media","title":"Media","description":"Information: Media The purpose of CSS is to specify how documents are presented to the user. Presentation can take more than one form. For example, you are probably reading this page on a display device. But you might also want to project it on a screen for a large audience, or print it. These different media can have different characteristics. CSS provides ways to present a document differently in different media. To specify rules that are specific to a type of media, use @media  followed by the media type, followed by curly braces that enclose the rules.  Example    A document on a web site has a navigation area to allow the user to move around the site. In the markup language, the navigation area's parent element has the id nav-area. (In  HTML5, this can be marked up with the <nav>  element instead of <div>  with an id attribute.) When the document is printed the navigation area has no purpose, so the stylesheet removes it completely:   @media print {   #nav-area {display: none;}   }       Some of the common media types are:    screen Color computer display   print Paged media   projection Projected display   all All media (the default)    \u00a0  More details    There are other ways to specify the media type of a set of rules. The document's markup language might allow the media type to be specified when the stylesheet is linked to the document. For example, in HTML you can optionally specify the media type with a media attribute in the LINK tag. In CSS you can use @import  at the start of a stylesheet to import another stylesheet from a URL, optionally specifying the media type. By using these techniques you can separate style rules for different media types into different files. This is sometimes a useful way to structure your stylesheets. For full details of media types, see Media in the CSS Specification. There are more examples of the display  property in a later page in this tutorial: XML data.     Printing CSS has some specific support for printing and for paged media in general. A @page  rule can set the page margins. For double-sided printing, you can specify the margins separately for @page:left and @page:right. For print media, you normally use appropriate length units like inches (in) and points (pt = 1\/72 inch), or centimeters (cm) and millimeters (mm). It is equally appropriate to use ems (em) to match the font size, and percentages (). You can control how the content of the document breaks across page boundaries, by using the page-break-before , page-break-after  and page-break-inside  properties.  Examples    This rule sets the page margins to one inch on all four sides:   @page {margin: 1in;}   This rule ensures that every H1 element starts on a new page:   h1 {page-break-before: always;}       \u00a0  More details    For full details of CSS support for paged media, see Paged media in the CSS Specification. Like other features of CSS, printing depends on your browser and its settings. For example, your Mozilla browser supplies default margins, headers and footers when it prints. When other users print your document, you probably cannot predict the browser and the settings that they will use, so you probably cannot control the results completely.     User interfaces CSS has some special properties for devices that support a user interface, like computer displays. These make the document's appearance change dynamically as the user works with the interface. There is no special media type for devices with user interfaces. There are five special selectors:    Selector Selects   E:hover  Any E element that has the pointer over it   E:focus  Any E element that has keyboard focus   E:active  The E element that is involved in the current user action   E:link  Any E element that is a hyperlink to a URL that the user has not visited recently   E:visited  Any E element that is a hyperlink to a URL that the user has visited recently     Note:\u00a0The information that can be obtained from the :visited selector is restricted in Gecko\u00a02.0. See Privacy and the :visited selector for more details.  The cursor  property specifies the shape of the pointer: Some of the common shapes are as follows. Place your mouse over the items in this list to see the actual pointer shapes in your browser:    Selector Selects   pointer Indicating a link   wait Indicating that the program cannot accept input   progress Indicating that the program is working, but can still accept input   default The default (usually an arrow)     An outline  property creates an outline that is often used to indicate keyboard focus. Its values are similar to the border  property, except that you cannot specify individual sides. Some other features of user interfaces are implemented using attributes, in the normal way. For example, an element that is disabled or read-only has the disabled attribute or the readonly attribute. Selectors can specify these attributes like any other attributes, by using square brackets: [disabled] or [readonly].  Example    These rules specify styles for a button that changes dynamically as the user interacts with it:   .green-button {   background-color:#cec;   color:#black;   border:2px outset #cec;   }  .green-button[disabled] {   background-color:#cdc;   color:#777;   }  .green-button:active {   border-style: inset;   }   This wiki does not support a user interface on the page, so these buttons do not \"click\". Here are some static images to illustrate the idea:        Click\u00a0Me Click\u00a0Me Click\u00a0Me   \u00a0   disabled normal active        A fully functional button also has a dark outline around the entire button when it is the default, and a dotted outline on the face of the button when it has keyboard focus. It might also have a hover effect when the pointer is over it.      More details    For more information about user interfaces in CSS, see User interface in the CSS Specification. There is an example of Mozilla's markup language for user interfaces, XUL, in Part II of this tutorial.     Printing CSS has some specific support for printing and for paged media in general. A @page  rule can set the page margins. For double-sided printing, you can specify the margins separately for @page:left and @page:right. For print media, you normally use appropriate length units like inches (in) and points (pt = 1\/72 inch), or centimeters (cm) and millimeters (mm). It is equally appropriate to use ems (em) to match the font size, and percentages (). You can control how the content of the document breaks across page boundaries, by using the page-break-before , page-break-after  and page-break-inside  properties.  Examples    This rule sets the page margins to one inch on all four sides:   @page {margin: 1in;}   This rule ensures that every H1 element starts on a new page:   h1 {page-break-before: always;}       \u00a0  More details    For full details of CSS support for paged media, see Paged media in the CSS Specification. Like other features of CSS, printing depends on your browser and its settings. For example, your Mozilla browser supplies default margins, headers and footers when it prints. When other users print your document, you probably cannot predict the browser and the settings that they will use, so you probably cannot control the results completely.     User interfaces CSS has some special properties for devices that support a user interface, like computer displays. These make the document's appearance change dynamically as the user works with the interface. There is no special media type for devices with user interfaces. There are five special selectors:    Selector Selects   E:hover  Any E element that has the pointer over it   E:focus  Any E element that has keyboard focus   E:active  The E element that is involved in the current user action   E:link  Any E element that is a hyperlink to a URL that the user has not visited recently   E:visited  Any E element that is a hyperlink to a URL that the user has visited recently     Note:\u00a0The information that can be obtained from the :visited selector is restricted in Gecko\u00a02.0. See Privacy and the :visited selector for more details.  The cursor  property specifies the shape of the pointer: Some of the common shapes are as follows. Place your mouse over the items in this list to see the actual pointer shapes in your browser:    Selector Selects   pointer Indicating a link   wait Indicating that the program cannot accept input   progress Indicating that the program is working, but can still accept input   default The default (usually an arrow)     An outline  property creates an outline that is often used to indicate keyboard focus. Its values are similar to the border  property, except that you cannot specify individual sides. Some other features of user interfaces are implemented using attributes, in the normal way. For example, an element that is disabled or read-only has the disabled attribute or the readonly attribute. Selectors can specify these attributes like any other attributes, by using square brackets: [disabled] or [readonly].  Example    These rules specify styles for a button that changes dynamically as the user interacts with it:   .green-button {   background-color:#cec;   color:#black;   border:2px outset #cec;   }  .green-button[disabled] {   background-color:#cdc;   color:#777;   }  .green-button:active {   border-style: inset;   }   This wiki does not support a user interface on the page, so these buttons do not \"click\". Here are some static images to illustrate the idea:        Click\u00a0Me Click\u00a0Me Click\u00a0Me   \u00a0   disabled normal active        A fully functional button also has a dark outline around the entire button when it is the default, and a dotted outline on the face of the button when it has keyboard focus. It might also have a hover effect when the pointer is over it.      More details    For more information about user interfaces in CSS, see User interface in the CSS Specification. There is an example of Mozilla's markup language for user interfaces, XUL, in Part II of this tutorial.     Action: Printing a document  Make a new HTML document, doc4.html. Copy and paste the content from here, making sure that you scroll to get all of it:   <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0\/\/EN\"> <HTML>  <HEAD> <TITLE>Print sample<\/TITLE> <LINK rel=\"stylesheet\" type=\"text\/css\" href=\"style4.css\"><\/strong> <\/HEAD>  <BODY> <H1>Section A<\/H1> <P>This is the first section...<\/P>  <H1>Section B<\/H1> <P>This is the second section...<\/P>  <DIV id=\"print-head\"> Heading for paged media <\/DIV>  <DIV id=\"print-foot\"> Page:\u00a0 <\/DIV>  <\/BODY> <\/HTML>    Make a new stylesheet, style4.css. Copy and paste the content from here, making sure that you scroll to get all of it:   \/*** Print sample ***\/  \/* defaults  for screen *\/ #print-head, #print-foot {   display: none;   }  \/* print only *\/ @media print {  h1 {   page-break-before: always;   padding-top: 2em;   }  h1:first-child {   page-break-before: avoid;   counter-reset: page;   }  #print-head {   display: block;   position: fixed;   top: 0pt;   left:0pt;   right: 0pt;    font-size: 200%;   text-align: center;   }  #print-foot {   display: block;   position: fixed;   bottom: 0pt;   right: 0pt;    font-size: 200%;   }  #print-foot:after {   content: counter(page);   counter-increment: page;   }  } \/* end print only *\/    View this document in your browser; it uses your browser's default style. Print (or print preview) the document; the stylesheet places each section on a separate page, and it adds a header and footer to each page. If your browser supports counters, it adds a page number in the footer.             Heading for paged media Section A This is the first section... Page: 1                   Heading for paged media Section B This is the second section... Page: 2                Challenges    Move the print-specific style rules to a separate CSS file. Read the @import  reference page to find details of how to import the new print-specific CSS file into your style4.css stylesheet. Make the headings turn blue when the mouse pointer is over them.     \u00a0See solutions to these challenges. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. So far, all the style rules in this tutorial have been specified in files. The rules and their values are fixed. The next page describes how you can change rules dynamically by using a programming language: JavaScript     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_media_queries_from_code","title":"Using media queries from code","description":"Creating a media query list Before you can evaluate the results of a query, you need to create the MediaQueryList  object representing the media query. To do this, use the window.matchMedia \u00a0method. For example, if you want to set up a query list that determines whether the device is in landscape or portrait orientation, you can do so like this: var mql = window.matchMedia(\"(orientation: portrait)\");  Checking the result of a query Once your media query list has been created, you can check the result of the query by looking at the value of its matches property, which reflects the result of the query: \r           if (mql.matches) {   \/* The device is currently in portrait orientation *\/ } else {   \/* The device is currently in landscape orientation *\/ }\r          Receiving query notifications If you need to be aware of changes to the evaluated result of the query on an ongoing basis, it's more efficient to register a listener than to poll the query's result. To do this, you can call the addListener()\u00a0method on the MediaQueryList \u00a0object, specifying an observer that implements the MediaQueryListListener \u00a0interface: \r           var mql = window.matchMedia(\"(orientation: portrait)\"); mql.addListener(handleOrientationChange); handleOrientationChange(mql);\r          This code creates the orientation testing media query list, mql, then adds a listener to it. Note that after adding the listener, we actually invoke the listener directly once. This lets our listener perform initial adjustments based on the current device orientation (otherwise, if our code assumes the device is in portrait mode but it's actually in landscape mode at startup, we could have inconsistencies). The handleOrientationChange()\u00a0method we implement then would look at the result of the query and handle whatever we need to do on an orientation change: \r           function handleOrientationChange(mql) {   if (mql.matches) {     \/* The device is currently in portrait orientation *\/   } else {     \/* The device is currently in landscape orientation *\/   } }\r          Ending query notifications When you no longer need to receive notifications about changes to the value of your media query, you can simply call removeListener()\u00a0on the MediaQueryList : mql.removeListener(handleOrientationChange);  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 9 6.0 (6.0)  ? ? 5.1         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? 5     See also  Media queries window.matchMedia()  MediaQueryList  MediaQueryListListener"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Why_use_CSS","title":"Why use CSS","description":"Information: Why use CSS? CSS helps you to keep the information content of a document separate from the details of how to display it. The details of how to display the document are known as its style. You keep the style separate from the content so that you can:  Avoid duplication Make maintenance easier Use the same content with different styles for different purposes   Example   Your web site might have thousands of pages that look similar. Using CSS, you store the style information in common files that all the pages share. When a user displays a web page, the user's browser loads the style information along with the content of the page. When a user prints a web page, you provide different style information that makes the printed page easy to read.     In general with CSS, you use the markup language to describe the information content of the document, not its style. You use CSS to specify its style, not its content. (Later in this tutorial, you will see some exceptions to this arrangement.)  More details   A markup language like HTML also provides some ways to specify style. For example, in HTML you can use a <b> tag to make text bold, and you can specify the background color of a page in its <body> tag. When you use CSS, you normally avoid using these features of the markup language so that all your document's style information is in one place.     Action: Creating a stylesheet  Create another text file in the same directory as before. This file will be your stylesheet. Name it: style1.css In your CSS file, copy and paste this one line, then save the file:   strong {color: red;}     Linking your document to your stylesheet  To link your document to your stylesheet, edit your HTML file. Add the line shown here in bold:   <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html>   <head>   <meta http-equiv=\"Content-Type\" content=\"text\/html;  charset=iso-8859-1\">   <title>Sample document<\/title>   <link rel=\"stylesheet\" type=\"text\/css\" href=\"style1.css\">   <\/head>   <body>     <p>       <strong>C<\/strong>ascading       <strong>S<\/strong>tyle       <strong>S<\/strong>heets     <\/p>   <\/body> <\/html>    Save the file and refresh your browser's display. The stylesheet makes the initial letters red, like this:    Cascading Style Sheets       Challenge   In addition to red, CSS allows some other color names. Without looking up a reference, find five more color names that work in your stylesheet.     See a solution for the challenge. Linking your document to your stylesheet  To link your document to your stylesheet, edit your HTML file. Add the line shown here in bold:   <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html>   <head>   <meta http-equiv=\"Content-Type\" content=\"text\/html;  charset=iso-8859-1\">   <title>Sample document<\/title>   <link rel=\"stylesheet\" type=\"text\/css\" href=\"style1.css\">   <\/head>   <body>     <p>       <strong>C<\/strong>ascading       <strong>S<\/strong>tyle       <strong>S<\/strong>heets     <\/p>   <\/body> <\/html>    Save the file and refresh your browser's display. The stylesheet makes the initial letters red, like this:    Cascading Style Sheets       Challenge   In addition to red, CSS allows some other color names. Without looking up a reference, find five more color names that work in your stylesheet.     See a solution for the challenge. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. Now you have a sample document linked to a separate stylesheet, you are ready to learn more about how your browser combines them when it displays the document: How CSS works     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/What_is_CSS","title":"What is CSS","description":"Information: What is CSS? A dialog in a Mozilla application is a document. The user interface controls that you see in a Mozilla dialog are structured using the markup language XUL (XML User-interface Language). Action: Creating a document  Use your computer to create a new directory and a new text file there. The file will contain your document. Copy and paste the HTML shown below. Save the file using the name doc1.html  \r           <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html>   <head>   <meta http-equiv=\"Content-Type\" content=\"text\/html;   charset=iso-8859-1\">   <title>Sample document<\/title>   <\/head>    <body>     <p>       <strong>C<\/strong>ascading       <strong>S<\/strong>tyle       <strong>S<\/strong>heets     <\/p>   <\/body> <\/html>\r            In your browser, open a new tab or a new window, and open the file there. You should see the text with the initial letters bold, like this:    Cascading Style Sheets    What you see in your browser might not look exactly the same as this, because of settings in your browser and in this wiki. If there are some differences in the font, spacing and colors that you see, they are not important.   What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. Your document does not yet use CSS. On the next page you use CSS to specify its style: Why use CSS?     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/How_CSS_works","title":"How CSS works","description":"Information: How CSS works When a browser displays a document, it must combine the document's content with its style information. It processes the document in two stages:  The browser converts the markup language and the CSS into a structure called the\u00a0DOM (Document Object Model). The DOM represents the document in the computer's memory. It combines the document's content with its style. The browser displays the contents of the DOM.  A markup language uses elements to define the document's structure. You mark an element using tags, which are strings beginning with '<' and ending with '>'. An element can have a start tag, which is just the name of the element, inside '< >', and an end tag, which has the element name with a '\/' after the '<'. Depending on the markup language, some elements have only a start tag, or only a tag where the '\/' comes after the name. An element can be a container, with other elements between its start tag and end tag. A DOM has a tree-like structure. Each element and run of text in the markup language becomes a node in the tree structure. DOM nodes are not containers. Instead, they can be parents of child nodes.  Example    In your sample document, the <p> tag and its end tag <\/p> create a container:   <p>   <strong>C<\/strong>ascading   <strong>S<\/strong>tyle   <strong>S<\/strong>heets <\/p>   In the DOM, the corresponding P node is a parent. Its children are the STRONG nodes and the text nodes. The STRONG nodes are themselves parents, with text nodes as their children:   P \u251c\u2500STRONG \u2502 \u2514\u2500\"C\" \u251c\u2500\"ascading\" \u251c\u2500STRONG \u2502 \u2514\u2500\"S\" \u251c\u2500\"tyle\" \u251c\u2500STRONG \u2502 \u2514\u2500\"S\" \u2514\u2500\"heets\"      Understanding the DOM helps you to design, debug and maintain your CSS, because the DOM is where your CSS and the document's content meet up. Action: Analyzing a DOM Using DOM\u00a0Inspector To analyze a DOM, you need special software. Here, you use Mozilla's DOM Inspector (DOMi) add-on to analyze a DOM. You need to install the add-on in order to do this activity.  Use your Mozilla browser to open your sample HTML document. From your browser's menu bar, choose Tools > DOM Inspector, or perhaps Tools > Web Development > DOM Inspector.  More details    If your Mozilla browser does not have DOMi, you can install it from the Add-ons site and restart the browser. Then return to this tutorial. If you do not want to install DOMi (or you're using a non-Mozilla browser), you can use Web X-Ray Goggles, as described in the next section. Or you can skip this section and go straight to the next page. Skipping this section does not interfere with the rest of the tutorial.      In DOMi, expand your document's nodes by clicking on their arrows. Note:\u00a0 Spacing in your HTML file may cause DOMi to show some empty text nodes, which you can ignore. Part of the result might look like this, depending on which nodes you have expanded:      \u2502 \u25bc\u2574P \u2502 \u2502 \u2502 \u25bc\u2574STRONG \u2502 \u2502 \u2514#text \u2502 \u251c\u2574#text \u2502 \u25b6\u2574STRONG \u2502 \u2502      When you select any node, you can use DOMi's right-hand pane to find out more about it. For example, when you select a text node, DOMi shows you the text in the right-hand pane. When you select an element node, DOMi analyzes it and provides a huge amount of information in its right-hand pane. Style information is just part of the information it provides.    Challenge    In DOMi, click on a STRONG node. Use DOMi's right-hand pane to find out where the node's color is set to red, and where its appearance is made bolder than normal text.     \u00a0See a solution to the challenge. Using Web X-Ray Goggles Web X-Ray Goggles shows less information than DOM\u00a0Inspector, but is simpler to install and use.  Go to the home page for Web X-Ray Goggles. Drag the bookmarklet link in that page to your browser toolbar. Open your sample HTML\u00a0document. Activate Web X-Ray Goggles by clicking the bookmarklet on the toolbar. Move your mouse pointer around over your document to see the elements in the document.  Using DOM\u00a0Inspector To analyze a DOM, you need special software. Here, you use Mozilla's DOM Inspector (DOMi) add-on to analyze a DOM. You need to install the add-on in order to do this activity.  Use your Mozilla browser to open your sample HTML document. From your browser's menu bar, choose Tools > DOM Inspector, or perhaps Tools > Web Development > DOM Inspector.  More details    If your Mozilla browser does not have DOMi, you can install it from the Add-ons site and restart the browser. Then return to this tutorial. If you do not want to install DOMi (or you're using a non-Mozilla browser), you can use Web X-Ray Goggles, as described in the next section. Or you can skip this section and go straight to the next page. Skipping this section does not interfere with the rest of the tutorial.      In DOMi, expand your document's nodes by clicking on their arrows. Note:\u00a0 Spacing in your HTML file may cause DOMi to show some empty text nodes, which you can ignore. Part of the result might look like this, depending on which nodes you have expanded:      \u2502 \u25bc\u2574P \u2502 \u2502 \u2502 \u25bc\u2574STRONG \u2502 \u2502 \u2514#text \u2502 \u251c\u2574#text \u2502 \u25b6\u2574STRONG \u2502 \u2502      When you select any node, you can use DOMi's right-hand pane to find out more about it. For example, when you select a text node, DOMi shows you the text in the right-hand pane. When you select an element node, DOMi analyzes it and provides a huge amount of information in its right-hand pane. Style information is just part of the information it provides.    Challenge    In DOMi, click on a STRONG node. Use DOMi's right-hand pane to find out where the node's color is set to red, and where its appearance is made bolder than normal text.     \u00a0See a solution to the challenge. Using Web X-Ray Goggles Web X-Ray Goggles shows less information than DOM\u00a0Inspector, but is simpler to install and use.  Go to the home page for Web X-Ray Goggles. Drag the bookmarklet link in that page to your browser toolbar. Open your sample HTML\u00a0document. Activate Web X-Ray Goggles by clicking the bookmarklet on the toolbar. Move your mouse pointer around over your document to see the elements in the document.  What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. If you took the challenge, you saw that style information from more than one place interacts to create the final style for an element. The next page explains more about these interactions: Cascading and inheritance     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Cascading_and_inheritance","title":"Cascading and inheritance","description":"Information: Cascading and inheritance The final style for an element can be specified in many different places, which can interact in a complex way. This complex interaction makes CSS powerful, but it can also make it confusing and difficult to debug. Three main sources of style information form a cascade. They are:  The browser's default styles for the markup language. Styles specified by a user who is reading the document. The styles linked to the document by its author. These can be specified in three places:  In an external file: this tutorial primarily discusses this method of defining styles. In a definition at the beginning of the document: use this method only for styles that are used only on that page. On a specific element in the body of the document:\u00a0this is the least maintainable method, but can be used for testing.    The user's style modifies the browser's default style. The document author's style then modifies the style some more. In this tutorial, you are the author of your sample document, and you only work with author stylesheets.  Example    When you read this document in a browser, part of the style that you see comes from your browser's defaults for HTML. Part of the style might come from customized browser settings or a customized style definition file. In Firefox, settings can be customized in the Preferences dialog , or you can specify styles in a file named userContent.css file in your browser profile. Part of the style comes from stylesheets linked to the document by the wiki server.      When you open your sample document in your browser, the <strong>  elements are bolder than the rest of the text. This comes from the browser's default style for HTML. The <strong>  elements are red. This comes from your own sample stylesheet. The <strong>  elements also inherit much of the <p>  element's style, because they are its children. In the same way, the <p> element inherits much of the <body>  element's style. For styles in the cascade, author stylesheets have priority, then reader stylesheets, then the browser's defaults. For inherited styles, a child node's own style has priority over style inherited from its parent. These are not the only priorities that apply. A later page in this tutorial will explain more.  More details    CSS also provides a way for the reader to override the document author's style, by using the keyword !important. This means that as a document author, you cannot always predict exactly what your readers will see. If you want to know all the details of cascading and inheritance, see Assigning property values, Cascading, and Inheritance in the CSS Specification.     Action: Using inheritance  Edit your sample CSS file. Add this line by copying and pasting it. It does not really matter whether you add it above or below the line that is already there. However, adding it at the top is more logical because in your document the <p>  element is the parent of the <strong>  element:  p {color: blue; text-decoration: underline;}   Now refresh your browser to see the effect on your sample document. The underlining affects all the text in the paragraph, including the initial letters. The <strong>  elements have inherited the underlined style from their parent <p>  element.   But the <strong>  elements are still red. The red color is their own style, so it has priority over the blue color of their parent <p>  element.      Before    Cascading Style Sheets       After    Cascading Style Sheets           Challenge    Change your stylesheet so that only the red letters are underlined:    Cascading Style Sheets        \u00a0See a solution to this challenge. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. Your sample style sheet specifies styles for tags, P and STRONG, changing the style of the corresponding elements throughout your document. The next page describes how to specify style in more selective ways: Selectors     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Selectors","title":"Selectors","description":"Information: Selectors CSS has its own terminology to describe the CSS language. Previously in this tutorial, you created a line in your stylesheet like this:   strong {color: red;}   In CSS terminology, this entire line is a rule. This rule starts with strong, which is a selector. It selects which elements in the DOM the rule applies to.  More details    The part inside the curly braces is the declaration. The keyword color is a property, and red is a value. The semicolon after the property-value pair separates it from other property-value pairs in the same declaration. This tutorial refers to a selector like strong as a tag selector. The CSS Specification refers to it as a type selector.     This page of the tutorial explains more about the selectors that you can use in CSS rules. In addition to tag names, you can use attribute values in selectors. This allows your rules to be more specific. Two attributes have special status for CSS. They are class and id. Class selectors Use the class attribute in an element to assign the element to a named class. It is up to you what name you choose for the class. Multiple elements in a document can have the same class value. In your stylesheet, type a full stop (period) before the class name when you use it in a selector. ID\u00a0selectors Use the id attribute in an element to assign an ID to the element. It is up to you what name you choose for the ID. The ID name must be unique in the document. In your stylesheet, type a number sign (hash) before the ID when you use it in a selector.  Examples    This HTML tag has both a class attribute and an id attribute:   <P class=\"key\" id=\"principal\">   The id value, principal, must be unique in the document, but other tags in the document can have the same class name, key. In a CSS stylesheet, this rule makes all the elements with class key green. (They might not all be <p>  elements.)   .key {color: green;}   This rule makes the one element with the id principal bold:   #principal {font-weight: bolder;}        If more than one rule applies to an element and specifies the same property, then CSS gives priority to the rule that has the more specific selector. An ID selector is more specific than a class selector, which in turn is more specific than a tag selector.  More details    You can also combine selectors, making a more specific selector. For example, the selector .key selects all elements that have the class name key. The selector p.key selects only <p>  elements that have the class name key. You are not restricted to the two special attrbutes, class and id. You can specify other attributes by using square brackets. For example, the selector [type='button'] selects all elements that have a type attribute with the value button. A later page of this tutorial (Tables) has information about complex selectors based on relationships. For complete information on selectors, see Selectors in the CSS Specification.      If the stylesheet has conflicting rules and they are equally specific, then CSS gives priority to the rule that is later in the stylesheet. When you have a problem with conflicting rules, try to resolve it by making one of the rules more specific, so that it has priority. If you cannot do that, try moving one of the rules nearer the end of the stylesheet so that it has priority. Class selectors Use the class attribute in an element to assign the element to a named class. It is up to you what name you choose for the class. Multiple elements in a document can have the same class value. In your stylesheet, type a full stop (period) before the class name when you use it in a selector. ID\u00a0selectors Use the id attribute in an element to assign an ID to the element. It is up to you what name you choose for the ID. The ID name must be unique in the document. In your stylesheet, type a number sign (hash) before the ID when you use it in a selector.  Examples    This HTML tag has both a class attribute and an id attribute:   <P class=\"key\" id=\"principal\">   The id value, principal, must be unique in the document, but other tags in the document can have the same class name, key. In a CSS stylesheet, this rule makes all the elements with class key green. (They might not all be <p>  elements.)   .key {color: green;}   This rule makes the one element with the id principal bold:   #principal {font-weight: bolder;}        If more than one rule applies to an element and specifies the same property, then CSS gives priority to the rule that has the more specific selector. An ID selector is more specific than a class selector, which in turn is more specific than a tag selector.  More details    You can also combine selectors, making a more specific selector. For example, the selector .key selects all elements that have the class name key. The selector p.key selects only <p>  elements that have the class name key. You are not restricted to the two special attrbutes, class and id. You can specify other attributes by using square brackets. For example, the selector [type='button'] selects all elements that have a type attribute with the value button. A later page of this tutorial (Tables) has information about complex selectors based on relationships. For complete information on selectors, see Selectors in the CSS Specification.      If the stylesheet has conflicting rules and they are equally specific, then CSS gives priority to the rule that is later in the stylesheet. When you have a problem with conflicting rules, try to resolve it by making one of the rules more specific, so that it has priority. If you cannot do that, try moving one of the rules nearer the end of the stylesheet so that it has priority. Action: Using class and ID selectors  Edit your HTML file, and duplicate the paragraph by copying and pasting it. Then add id and class attributes to the first copy, and an id attribute to the second copy as shown below. Alternatively, copy and paste the entire file again:   <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html>   <head>   <meta http-equiv=\"Content-Type\" content=\"text\/html;    charset=iso-8859-1\">   <title>Sample document<\/title>   <link rel=\"stylesheet\" type=\"text\/css\" href=\"style1.css\">   <\/head>   <body>     <p id=\"first\">       <strong class=\"carrot\">C<\/strong>ascading       <strong class=\"spinach\">S<\/strong>tyle       <strong class=\"spinach\">S<\/strong>heets     <\/P>     <P id=\"second\">          <strong>C<\/strong>ascading          <strong>S<\/strong>tyle          <strong>S<\/strong>heets        <\/p>   <\/body> <\/html>    Now edit your CSS file. Replace the entire contents with:   strong {color: red;} .carrot {color: orange;} .spinach {color: green;} #first {font-style: italic;}    Save the files and refresh your browser to see the result:    Cascading Style Sheets   Cascading Style Sheets    You can try rearranging the lines in your CSS file to show that the order has no effect. The class selectors .carrot and .spinach have priority over the tag selector strong. The ID selector #first has priority over the class and tag selectors.    Challenges    Without changing your HTML file, add a single rule to your CSS file that keeps all the initial letters that same color as they are now, but makes all the other text in the second paragraph blue:    Cascading Style Sheets   Cascading Style Sheets    Now change the rule you have just added (without changing anything else), to make the first paragraph blue too:    Cascading Style Sheets   Cascading Style Sheets        \u00a0See solutions to these challenges. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. Your sample stylesheet is starting to look dense and complicated. The next page describes ways to make CSS easier to read: Readable CSS     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Readable_CSS","title":"Readable CSS","description":"Information: Readable CSS You can add white space and comments to your stylesheets to make them more readable. You can also group selectors together, when the same style rules apply to elements selected in different ways. White space White space means actual spaces, tabs and new lines. You can add white space to make your stylesheets more readable. Your sample CSS file currently has one rule per line, and almost the minimum of white space. In a complex stylesheet this layout would be difficult to read, making the stylesheet difficult to maintain. The layout you choose is usually a personal preference, but if your stylesheets are part of shared projects, those projects might have their own conventions. Examples Some people like the compact layout that we have been using, only splitting a line when it becomes very long: \r           .carrot {color: orange; text-decoration: underline; font-style: italic;}\r          Some people prefer one property-value per line:  \r           .carrot { color: orange; text-decoration: underline; font-style: italic; }\r           Some people use indention\u2014two spaces, four spaces, or a tab are common:  \r           .carrot {   color: orange;   text-decoration: underline;   font-style: italic; }\r           Some people like everything to line up vertically (but a layout like this is difficult to maintain):  \r           .carrot     {     color           : orange;     text-decoration : underline;     font-style      : italic;     }\r           Some people use tabs for the layout. Some people only use spaces. Comments Comments in CSS begin with \/* and end with *\/. You can use comments to make actual comments in your stylesheet, and also to comment out parts of it temporarily for testing purposes. To comment out part of a stylesheet, place that part in a comment so that the browser ignores it. Be careful where you start and end the comment. The rest of the stylesheet must still have correct syntax. Example \r           \/* style for initial letter C in first paragraph *\/ .carrot {   color:            orange;   text-decoration:  underline;   font-style:       italic;   }\r          Grouped selectors When many elements have the same style, you can specify a group of selectors, separating them with commas. The declaration applies to all the selected elements. Elsewhere in your stylesheet you can specify the same selectors again individually, to apply individual style rules to them. Example This rule makes <h1> , <h2> , and <h3>  elements the same color. It is convenient to specify the color in only one place, in case it has to be changed.  \r           \/* color for headings *\/ h1, h2, h3 {color: navy;}\r           White space White space means actual spaces, tabs and new lines. You can add white space to make your stylesheets more readable. Your sample CSS file currently has one rule per line, and almost the minimum of white space. In a complex stylesheet this layout would be difficult to read, making the stylesheet difficult to maintain. The layout you choose is usually a personal preference, but if your stylesheets are part of shared projects, those projects might have their own conventions. Examples Some people like the compact layout that we have been using, only splitting a line when it becomes very long: \r           .carrot {color: orange; text-decoration: underline; font-style: italic;}\r          Some people prefer one property-value per line:  \r           .carrot { color: orange; text-decoration: underline; font-style: italic; }\r           Some people use indention\u2014two spaces, four spaces, or a tab are common:  \r           .carrot {   color: orange;   text-decoration: underline;   font-style: italic; }\r           Some people like everything to line up vertically (but a layout like this is difficult to maintain):  \r           .carrot     {     color           : orange;     text-decoration : underline;     font-style      : italic;     }\r           Some people use tabs for the layout. Some people only use spaces. Examples Some people like the compact layout that we have been using, only splitting a line when it becomes very long: \r           .carrot {color: orange; text-decoration: underline; font-style: italic;}\r          Some people prefer one property-value per line:  \r           .carrot { color: orange; text-decoration: underline; font-style: italic; }\r           Some people use indention\u2014two spaces, four spaces, or a tab are common:  \r           .carrot {   color: orange;   text-decoration: underline;   font-style: italic; }\r           Some people like everything to line up vertically (but a layout like this is difficult to maintain):  \r           .carrot     {     color           : orange;     text-decoration : underline;     font-style      : italic;     }\r           Some people use tabs for the layout. Some people only use spaces. Comments Comments in CSS begin with \/* and end with *\/. You can use comments to make actual comments in your stylesheet, and also to comment out parts of it temporarily for testing purposes. To comment out part of a stylesheet, place that part in a comment so that the browser ignores it. Be careful where you start and end the comment. The rest of the stylesheet must still have correct syntax. Example \r           \/* style for initial letter C in first paragraph *\/ .carrot {   color:            orange;   text-decoration:  underline;   font-style:       italic;   }\r          Example \r           \/* style for initial letter C in first paragraph *\/ .carrot {   color:            orange;   text-decoration:  underline;   font-style:       italic;   }\r          Grouped selectors When many elements have the same style, you can specify a group of selectors, separating them with commas. The declaration applies to all the selected elements. Elsewhere in your stylesheet you can specify the same selectors again individually, to apply individual style rules to them. Example This rule makes <h1> , <h2> , and <h3>  elements the same color. It is convenient to specify the color in only one place, in case it has to be changed.  \r           \/* color for headings *\/ h1, h2, h3 {color: navy;}\r           Example This rule makes <h1> , <h2> , and <h3>  elements the same color. It is convenient to specify the color in only one place, in case it has to be changed.  \r           \/* color for headings *\/ h1, h2, h3 {color: navy;}\r           Action: Adding comments and improving the layout  Edit your CSS file, and ensure that it has these rules in it (in any order):  \r           strong {color: red;} .carrot {color: orange;} .spinach {color: green;} #first {font-style: italic;} p {color: blue;}\r            Make it more readable by rearranging it in a way that you find logical, and by adding white space and comments in whatever way you think best. Save the file and refresh your browser's display, to make sure that your changes do not affect how the stylesheet works:    Cascading Style Sheets   Cascading Style Sheets      Challenge Comment out part of your stylesheet, without changing anything else, to make the very first letter of your document red:    Cascading Style Sheets   Cascading Style Sheets    (There is more than one way to do this.) \u00a0See a solution to this challenge. Challenge Comment out part of your stylesheet, without changing anything else, to make the very first letter of your document red:    Cascading Style Sheets   Cascading Style Sheets    (There is more than one way to do this.) \u00a0See a solution to this challenge. What next? Your sample stylesheet has used italic text and underlined text. The next page describes more ways to specify the appearance of text in your document: Text styles     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Text_styles","title":"Text styles","description":"Information: Text styles CSS has several properties for styling text. There is a convenient shorthand property, font , which you can use to specify several aspects at once\u2014for example:  Bold, italic, and small-caps (small capitals) The size The line height The font typeface   Example       p {font: italic 75%\/125% \"Comic Sans MS\", cursive;}   This rule sets various font properties, making all paragraphs italic. The font size is set to three-quarters of the size in each paragraph's parent element, and the line height is set to 125% (a little more spaced than normal). The font typeface is set to Comic Sans MS, but if this typeface is not available then the browser will use its default cursive (hand-written) typeface. The rule has the side-effect of turning off of bold and small-caps (setting them to normal):     Font faces You cannot predict what typefaces the readers of your document will have. So when you specify font typefaces, it is a good idea to give a list of alternatives in order of preference. End the list with one of the built-in default typefaces: serif, sans-serif, cursive, fantasy or monospace. If the typeface does not support some features in the document, then the browser can substitute a different typeface. For example, the document might contain special characters that the typeface does not support. If the browser can find another typeface that has those characters, then it will use the other typeface. To specify a typeface on its own, use the font-family  property. Font sizes Browser users can override the default font sizes or change the text size while they read a page, so it makes good sense for you to use relative sizes wherever you can. You can use some built-in values for font sizes, like small, medium and large. You can also use values relative to the font size of the parent element, like: smaller, larger, 150% or 1.5em. An \"em\" is equivalent to the width of the letter \"m\" (for the font size of the parent element); thus 1.5em is one-and-a-half times the size of the font of the parent element. If necessary you can specify an actual size, like: 14px (14 pixels) for a display device or 14pt (14 points) for a printer. This is not accessible for visually impaired users, because it does not allow them to change the size. A more accessible strategy is to set a built-in value like medium on a top-level element of the document, and then set relative sizes for all its descendent elements. To specify a font size on its own, use the font-size  property. Line height The line height specifies the spacing between lines. If your document has long paragraphs with many lines, a larger-than-normal spacing makes it easier to read, especially if the font size is small. To specify a line height on its own, use the line-height  property. Decoration The separate text-decoration  property can specify other styles, like underline or line-through. You can set it to none to explicitly remove any decoration. Other properties To specify italic on its own, use font-style : italic; To specify bold on its own, use font-weight : bold; To specify small capitals on its own, use font-variant : small-caps; To turn any of these off individually, you can specify the value normal or inherit.  More details    You can specify text styles in a variety of other ways. For example, some of the properties mentioned here have other values that you can use. In a complex stylesheet, avoid using the shorthand font property, because of its side-effects (resetting other individual properties). For full details of the properties that relate to fonts, see Fonts in the CSS Specification. For full details of text decoration, see Text there. If you don't want to depend on the typefaces installed on users' systems, you can use @font-face to specify an online font. However, this requires that the users have a browser that supports this rule.     Font faces You cannot predict what typefaces the readers of your document will have. So when you specify font typefaces, it is a good idea to give a list of alternatives in order of preference. End the list with one of the built-in default typefaces: serif, sans-serif, cursive, fantasy or monospace. If the typeface does not support some features in the document, then the browser can substitute a different typeface. For example, the document might contain special characters that the typeface does not support. If the browser can find another typeface that has those characters, then it will use the other typeface. To specify a typeface on its own, use the font-family  property. Font sizes Browser users can override the default font sizes or change the text size while they read a page, so it makes good sense for you to use relative sizes wherever you can. You can use some built-in values for font sizes, like small, medium and large. You can also use values relative to the font size of the parent element, like: smaller, larger, 150% or 1.5em. An \"em\" is equivalent to the width of the letter \"m\" (for the font size of the parent element); thus 1.5em is one-and-a-half times the size of the font of the parent element. If necessary you can specify an actual size, like: 14px (14 pixels) for a display device or 14pt (14 points) for a printer. This is not accessible for visually impaired users, because it does not allow them to change the size. A more accessible strategy is to set a built-in value like medium on a top-level element of the document, and then set relative sizes for all its descendent elements. To specify a font size on its own, use the font-size  property. Line height The line height specifies the spacing between lines. If your document has long paragraphs with many lines, a larger-than-normal spacing makes it easier to read, especially if the font size is small. To specify a line height on its own, use the line-height  property. Decoration The separate text-decoration  property can specify other styles, like underline or line-through. You can set it to none to explicitly remove any decoration. Other properties To specify italic on its own, use font-style : italic; To specify bold on its own, use font-weight : bold; To specify small capitals on its own, use font-variant : small-caps; To turn any of these off individually, you can specify the value normal or inherit.  More details    You can specify text styles in a variety of other ways. For example, some of the properties mentioned here have other values that you can use. In a complex stylesheet, avoid using the shorthand font property, because of its side-effects (resetting other individual properties). For full details of the properties that relate to fonts, see Fonts in the CSS Specification. For full details of text decoration, see Text there. If you don't want to depend on the typefaces installed on users' systems, you can use @font-face to specify an online font. However, this requires that the users have a browser that supports this rule.     Action: Specifying fonts For a simple document, you can set the font of the <body>  element and the rest of the document inherits the settings.  Edit your CSS file. Add the following rule to change the font throughout the document. The top of the CSS file is a logical place for it, but it has the same effect wherever you put it:   body {font: 16px \"Comic Sans MS\", cursive;}    Add a comment explaining the rule, and add white space to make it match your preferred layout. Save the file and refresh your browser to see the effect. If your system has Comic Sans MS, or another cursive font that does not support italic, then your browser chooses a different font face for the italic text in the first line:    Cascading Style Sheets   Cascading Style Sheets     From your browser's menu bar, choose View > Text Size > Increase (or View > Zoom > Zoom In). Even though you specified 16 pixels in the style, a user reading the document can change the size.   Challenge    Without changing anything else, make all six initial letters twice the size in the browser's default serif font:    Cascading Style Sheets   Cascading Style Sheets        \u00a0 See a solution to this challenge. What next? Your sample document already uses several named colors. The next page lists the names of standard colors and explains how you can specify others: Color     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Color","title":"Color","description":"Information: Color In this tutorial so far, you have used a limited number of named colors. CSS 2 supports 17 named colors in all. Some of the names might not be what you expect:    \u00a0 black \u00a0 gray \u00a0 silver \u00a0 white \u00a0   primaries red \u00a0 lime \u00a0 blue \u00a0   secondaries yellow \u00a0 aqua \u00a0 fuchsia \u00a0   \u00a0 maroon \u00a0 orange \u00a0 olive \u00a0 purple \u00a0 green \u00a0 navy \u00a0 teal \u00a0    \u00a0  More details    Your browser might support many more named colors, like:    dodgerblue \u00a0 peachpuff \u00a0 tan \u00a0 firebrick \u00a0 aquamarine \u00a0    For details of this extended list, see: SVG color keywords in the CSS 3 Color Module. Beware of using color names that your reader's browsers might not support.     For a larger palette, specify the red, green and blue components of the color you want by using a number sign (hash) and three hexadecimal digits in the range 0 \u2013 9, a \u2013 f. The letters a \u2013 f represent the values 10 \u2013 15:    black \u00a0 #000   pure red \u00a0 #f00   pure green \u00a0 #0f0   pure blue \u00a0 #00f   white \u00a0 #fff     For the full palette, specify two hexadcimal digits for each component:    black \u00a0 #000000   pure red \u00a0 #ff0000   pure green \u00a0 #00ff00   pure blue \u00a0 #0000ff   white \u00a0 #ffffff    You can usually get these six-digit hexadecimal codes from your graphics program or some other tool.  Examples    With a little practice, you can adjust the three-digit colors manually for most purposes:    Start with pure red: \u00a0 #f00   To make it paler, add some green and blue: \u00a0 #f77   To make it more orange, add a little extra green: \u00a0 #fa7   To darken it, reduce all its components: \u00a0 #c74   To reduce its saturation, make its components more equal: \u00a0 #c98   If you make them exactly equal, you get gray: \u00a0 #ccc       For a pastel shade like pale blue:    Start with pure white: \u00a0 #fff   Reduce the other components a little: \u00a0 #eef        \u00a0  More details    You can also specify a color using decimal RGB values in the range 0 \u2013 255, or percentages. For example, this is maroon (dark red):   rgb(128, 0, 0)    For full details of how to specify colors, see: Colors in the CSS Specification. For information on matching system colors like Menu and ThreeDFace, see: CSS2 System Colors in the CSS Specification.     Color properties You have already used the color  property on text. You can also use the background-color  property to change elements' backgrounds. Backgrounds can be set to transparent to explicitly remove any color, revealing the parent element's background.  Example    The Example boxes in this tutorial use this pale yellow background:   background-color: #fffff4;   The More details boxes use this pale gray:   background-color: #f4f4f4;       Color properties You have already used the color  property on text. You can also use the background-color  property to change elements' backgrounds. Backgrounds can be set to transparent to explicitly remove any color, revealing the parent element's background.  Example    The Example boxes in this tutorial use this pale yellow background:   background-color: #fffff4;   The More details boxes use this pale gray:   background-color: #f4f4f4;       Action: Using color codes  Edit your CSS file. Make the change shown here in bold, to give the initial letters a pale blue background. (The layout and comments in your file probably differ from the file shown here. Keep the layout and comments the way you prefer them.)   \/*** CSS Tutorial: Color page ***\/ \u00a0 \/* page font *\/ body {font: 16px \"Comic Sans MS\", cursive;} \u00a0 \/* paragraphs *\/ p {color: blue;} #first {font-style: italic;} \u00a0 \/* initial letters *\/ strong {   color: red;   background-color: #ddf;   font: 200% serif;   } \u00a0 .carrot {color: red;} .spinach {color: green;}    Save the file and refresh your browser to see the result:    Cascading Style Sheets   Cascading Style Sheets    \u00a0  Challenge    In your CSS file, change all the color names to 3-digit color codes without affecting the result. (This cannot be done exactly, but you can get close. To do it exactly you need 6-digit codes, and you need to look up the CSS Specification or use a graphics tool to match the colors.)     See a solution to this challenge. What next? Your sample document and your sample stylesheet strictly separate content from style. The next page explains how you can make exceptions to this strict separation: Content      CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0       What next? Your sample document and your sample stylesheet strictly separate content from style. The next page explains how you can make exceptions to this strict separation: Content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Content","title":"Content","description":"Information: Content One of the important advantages of CSS is that it helps you to separate a document's style from its content. Yet there are situations where it makes sense to specify certain content as part of the stylesheet, not as part of the document. Content specified in a stylesheet can consist of text or images. You specify content in your stylesheet when the content is closely linked to the document's structure.  More details    Specifying content in a stylesheet can cause complications. For example, you might have different language versions of your document that share a stylesheet. If part of the stylesheet has to be translated, it means that you must put those parts of the stylesheet in separate files and arrange for them to be linked with the appropriate language versions of your document. These complications do not arise if the content you specify consists of symbols or images that apply in all languages and cultures. Content specified in a stylesheet does not become part of the DOM.     Text content CSS can insert text content before or after an element. To specify this, make a rule and add :before  or :after  to the selector. In the declaration, specify the content  property with the text content as its value.  Example    This rule adds the text Reference: before every element with the class ref:   .ref:before {   font-weight: bold;   color: navy;   content: \"Reference: \";   }        More details    The character set of a stylesheet is UTF-8 by default, but it can be specified in the link, or in the stylesheet itself, or in other ways. For details, see 4.4 CSS style sheet representation in the CSS Specification. Individual characters can also be specified by an escape mechanism that uses backslash as the escape character. For example, \\265B is the chess symbol for a black queen \u265b. For details, see Referring to characters not represented in a character encoding and also Characters and case in the CSS Specification.     Image content To add an image before or after an element, you can specify the URL of an image file in the value of the content  property.  Example    This rule adds a space and an icon after every link that has the class glossary:   a.glossary:after {content: \" \" url(\"..\/images\/glossary-icon.gif\");}        To add an image as an element's background, specify the URL of an image file in the value of the background  property. This is a shorthand property that specifies the background color, the image, how the image repeats, and some other details.  Example    This rule sets the background of a specific element, using a URL to specify an image file. The selector specifies the element's id. The value no-repeat makes the image appear only once:   #sidebar-box {background: url(\"..\/images\/sidebar-ground.png\") no-repeat;}        More details    For information about individual properties affecting backgrounds, and about other options when you specify background images, see the\u00a0 background  reference page.    Text content CSS can insert text content before or after an element. To specify this, make a rule and add :before  or :after  to the selector. In the declaration, specify the content  property with the text content as its value.  Example    This rule adds the text Reference: before every element with the class ref:   .ref:before {   font-weight: bold;   color: navy;   content: \"Reference: \";   }        More details    The character set of a stylesheet is UTF-8 by default, but it can be specified in the link, or in the stylesheet itself, or in other ways. For details, see 4.4 CSS style sheet representation in the CSS Specification. Individual characters can also be specified by an escape mechanism that uses backslash as the escape character. For example, \\265B is the chess symbol for a black queen \u265b. For details, see Referring to characters not represented in a character encoding and also Characters and case in the CSS Specification.     Image content To add an image before or after an element, you can specify the URL of an image file in the value of the content  property.  Example    This rule adds a space and an icon after every link that has the class glossary:   a.glossary:after {content: \" \" url(\"..\/images\/glossary-icon.gif\");}        To add an image as an element's background, specify the URL of an image file in the value of the background  property. This is a shorthand property that specifies the background color, the image, how the image repeats, and some other details.  Example    This rule sets the background of a specific element, using a URL to specify an image file. The selector specifies the element's id. The value no-repeat makes the image appear only once:   #sidebar-box {background: url(\"..\/images\/sidebar-ground.png\") no-repeat;}        More details    For information about individual properties affecting backgrounds, and about other options when you specify background images, see the\u00a0 background  reference page.    Action: Adding a background image This image is a white square with a blue line at the bottom:         Download the image file into the same directory as your CSS file. (For example, right-click it to get a context menu, then choose Save Image As and specify the directory that you are using for this tutorial.) Edit your CSS file and add this rule to the body, setting a background image for the entire page.   background: url(\"Blue-rule.png\");   The value repeat is the default, so it does not need to be specified. The image repeats horizontally and vertically, giving an appearance like lined writing paper:     Cascading Style Sheets   Cascading Style Sheets       Challenge    Download this image:        Add a one rule to your stylesheet so that it displays the image at the start of each line:     Cascading Style Sheets  Cascading Style Sheets       See a solution to this challenge. What next? A common way that stylesheets add content is to mark items in lists. The next page describes how to specify style for list elements: Lists     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Boxes","title":"Boxes","description":"Information: Boxes When your browser displays an element, the element takes up space. There are four parts to the space that it takes up. In the middle, there is the space that the element needs to display its content. Around that, there is padding. Around that, there is a border. Around that, there is a margin that separates the element from other elements.      margin border  padding  element    The pale gray shows parts of the layout.    \u00a0 \u00a0  \u00a0  element    This is what you see in your browser.     The padding, border and margin can have different sizes on the top, right, bottom and left of the element. Any or all of these sizes can be zero. Coloring The padding is always the same color as the element's background. So when you set the background color, you see the color applied to the element itself and its padding. The margin is always transparent.      margin border  padding  element    The element has a green background.    \u00a0 \u00a0  \u00a0  element    This is what you see in your browser.     Borders You can use borders to decorate elements with lines or boxes. To specify the same border all around an element, use the border  property. Specify the width (usually in pixels for display on a screen), the style, and the color. The styles are:     solid   dotted   dashed   double     inset   outset   ridge   groove     You can also set the style to none or hidden to explicitly remove the border, or set the color to transparent to make the border invisible without changing the layout. To specify borders one side at a time, use the properties: border-top , border-right , {{cssxref(\"border-bottom\"), {{cssxref(\"border-left\")}}. You can use these to specify a border on only one side, or different borders on different sides.  Examples    This rule sets the background color and the top border of heading elements:   h3 {   border-top: 4px solid #7c7; \/* mid green *\/   background-color: #efe;     \/* pale green *\/   color: #050;                \/* dark green *\/   }   The result looks like:     Stylish heading      This rule makes images easier to see by giving them a mid-gray border all round:   img {border: 2px solid #ccc;}   The result looks like:    Image:         Margins and padding Use margins and padding to adjust elements' positions and to create space around them. Use the margin  property or the padding  property to set the margin or padding widths respectively. If you specify one width, it applies all around the element (top, right, bottom and left). If you specify two widths, the first applies to the top and bottom, the second to the right and left. You can specify all four widths in the order: top, right, bottom, left.  Example    This rule marks out paragraphs with the class remark by giving them a red border all round. Padding all round separates the border from the text a little. A left margin indents the paragraph relative to the rest of the text:   p.remark {   border: 2px solid red;   padding: 4px;   margin-left: 24px;   }   The result looks like:     Here is a normal paragraph. Here is a remark.          More details    When you use margins and padding to adjust the way elements are laid out, your style rules interact with the browser's defaults in ways that can be complex. Different browsers lay elements out differently. The results might look similar until your stylesheet changes things. Sometimes this can make your stylesheet give surprising results. To get the result you want, you might have to change your document's markup. The next page of this tutorial has more information on this. For detailed information about padding, margins and borders, see the Box model reference page.     Coloring The padding is always the same color as the element's background. So when you set the background color, you see the color applied to the element itself and its padding. The margin is always transparent.      margin border  padding  element    The element has a green background.    \u00a0 \u00a0  \u00a0  element    This is what you see in your browser.     Borders You can use borders to decorate elements with lines or boxes. To specify the same border all around an element, use the border  property. Specify the width (usually in pixels for display on a screen), the style, and the color. The styles are:     solid   dotted   dashed   double     inset   outset   ridge   groove     You can also set the style to none or hidden to explicitly remove the border, or set the color to transparent to make the border invisible without changing the layout. To specify borders one side at a time, use the properties: border-top , border-right , {{cssxref(\"border-bottom\"), {{cssxref(\"border-left\")}}. You can use these to specify a border on only one side, or different borders on different sides.  Examples    This rule sets the background color and the top border of heading elements:   h3 {   border-top: 4px solid #7c7; \/* mid green *\/   background-color: #efe;     \/* pale green *\/   color: #050;                \/* dark green *\/   }   The result looks like:     Stylish heading      This rule makes images easier to see by giving them a mid-gray border all round:   img {border: 2px solid #ccc;}   The result looks like:    Image:         Margins and padding Use margins and padding to adjust elements' positions and to create space around them. Use the margin  property or the padding  property to set the margin or padding widths respectively. If you specify one width, it applies all around the element (top, right, bottom and left). If you specify two widths, the first applies to the top and bottom, the second to the right and left. You can specify all four widths in the order: top, right, bottom, left.  Example    This rule marks out paragraphs with the class remark by giving them a red border all round. Padding all round separates the border from the text a little. A left margin indents the paragraph relative to the rest of the text:   p.remark {   border: 2px solid red;   padding: 4px;   margin-left: 24px;   }   The result looks like:     Here is a normal paragraph. Here is a remark.          More details    When you use margins and padding to adjust the way elements are laid out, your style rules interact with the browser's defaults in ways that can be complex. Different browsers lay elements out differently. The results might look similar until your stylesheet changes things. Sometimes this can make your stylesheet give surprising results. To get the result you want, you might have to change your document's markup. The next page of this tutorial has more information on this. For detailed information about padding, margins and borders, see the Box model reference page.     Action: Adding borders Edit your CSS file, style2.css. Add this rule to draw a line across the page over each heading:   h3 {border-top: 1px solid gray;}   If you took the challenge on the last page, modify the rule you created, otherwise add this new rule to add space underneath each list item:   li {   list-style: lower-roman;   margin-bottom: 8px;   }   Refresh your browser to see the result:     (A) The oceans  Arctic Atlantic Pacific Indian Southern  (B) Numbered paragraphs 1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum     \u00a0  Challenge    Add one rule to your stylesheet, making a wide border all around the oceans in a color that reminds you of the sea\u2014something like this:     (A) The oceans   Arctic Atlantic Pacific Indian Southern   (B) Numbered paragraphs . . .     (There is no need to match the width and color you see here exactly.)     See a solution to this challenge. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. By specifying margins and padding, you modified the layout of your document. On the next page you cange your document's layout in other ways: Layout     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Lists","title":"Lists","description":"Information: Lists If you took the challenge on the last page (Content), then you saw how you can add content before any element to display it like a list item. CSS provides special properties that are designed for lists. It is usually more convenient to use these properties whenever you can. To specify the style for a list, use the list-style  property to specify the type of marker. The selector in your CSS rule can either select the list item elements (for example, <li> ), or it can select the parent list element (for example, <ul> ) so that the list elements inherit the style. Unordered lists In an unordered list, each list item is marked in the same way. CSS has three types of markers, and here is how your browser displays them:  disc circle square  Alternatively, you can specify the URL of an image.  Example    These rules specify different markers for different classes of list item:   li.open {list-style: circle;} li.closed {list-style: disc;}   When these classes are used in a list, they distinguish between open and closed items (for example, in a to-do list):   <ul>   <li class=\"open\">Lorem ipsum<\/li>   <li class=\"closed\">Dolor sit<\/li>   <li class=\"closed\">Amet consectetuer<\/li>   <li class=\"open\">Magna aliquam<\/li>   <li class=\"closed\">Autem veleum<\/li> <\/ul>   The result might look like:      Lorem ipsum Dolor sit Amet consectetuer Magna aliquam Autem veleum          Ordered lists In an ordered list, each list item is marked differently to show its position in the sequence. Use the list-style  property to specify the type of marker:  decimal lower-roman upper-roman lower-latin upper-latin   Example    This rule specifies that in <ol>  elements with the class info, the items are identified with capital letters.   ol.info {list-style: upper-latin;}   The <li>  elements in the list inherit this style:      Lorem ipsum Dolor sit Amet consectetuer Magna aliquam Autem veleum           More details     The list-style  property is a shorthand property. In complex stylesheets you might prefer to use separate properties to set separate values. For links to these separate properties, and more details of how CSS specifies lists, see the list-style  reference page. If you are using a markup language like HTML that provides conventional tags for unordered (<ul> ) and ordered (<ol> ) lists, then it is good practice to use the tags in the way they were intended. However, you can use CSS to make <ul>  display ordered and <ol>  display unordered if you wish. Browsers differ in the way they implement the styles for lists. Do not expect your stylesheet to give identical results in all browsers.     Counters  Note:\u00a0 Some browsers do not support counters. The CSS\u00a0contents and browser compatibility page on the Quirks Mode site contains a detailed chart of browser compatibility for this and other CSS features. Individual pages in the CSS\u00a0Reference on this site also have browser compatibility tables.  You can use counters to number any elements, not only list items. For example, in some documents you might want to number headings or paragraphs. To specify numbering, you need a counter with a name that you specify. In some element before the counting is to start, reset the counter with the property counter-reset  and the name of your counter. The parent of the elements you are counting is a good place to do this, but you can use any element that comes before the list items. In each element where the counter increments, use the property counter-increment  and the name of your counter. To display your counter, add :before  or :after  to the selector and use the content property (as you did on the previous page, Content). In the value of the content property, specify counter() with the name of your counter. Optionally specify a type. The types are the same as in the Ordered lists section above. Normally the element that displays the counter also increments it.  Example    This rule initializes a counter for every <h3>  element with the class numbered:   h3.numbered {counter-reset: mynum;}   This rule displays and increments the counter for every <p>  element with the class numbered:   p.numbered:before {   content: counter(mynum) \": \";   counter-increment: mynum;   font-weight: bold;}   The result looks like this:    Heading 1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum          More details    You cannot use counters unless you know that everyone who reads your document has a browser that supports them. If you are able to use counters, they have the advantage that you can style the counters separately from the list items. In the example above, the counters are bold but the list items are not. You can also use counters in more complex ways\u2014for example, to number sections, headings, subheadings and paragraphs in formal documents. For details, see Automatic counters and numbering in the CSS Specification.     Unordered lists In an unordered list, each list item is marked in the same way. CSS has three types of markers, and here is how your browser displays them:  disc circle square  Alternatively, you can specify the URL of an image.  Example    These rules specify different markers for different classes of list item:   li.open {list-style: circle;} li.closed {list-style: disc;}   When these classes are used in a list, they distinguish between open and closed items (for example, in a to-do list):   <ul>   <li class=\"open\">Lorem ipsum<\/li>   <li class=\"closed\">Dolor sit<\/li>   <li class=\"closed\">Amet consectetuer<\/li>   <li class=\"open\">Magna aliquam<\/li>   <li class=\"closed\">Autem veleum<\/li> <\/ul>   The result might look like:      Lorem ipsum Dolor sit Amet consectetuer Magna aliquam Autem veleum          Ordered lists In an ordered list, each list item is marked differently to show its position in the sequence. Use the list-style  property to specify the type of marker:  decimal lower-roman upper-roman lower-latin upper-latin   Example    This rule specifies that in <ol>  elements with the class info, the items are identified with capital letters.   ol.info {list-style: upper-latin;}   The <li>  elements in the list inherit this style:      Lorem ipsum Dolor sit Amet consectetuer Magna aliquam Autem veleum           More details     The list-style  property is a shorthand property. In complex stylesheets you might prefer to use separate properties to set separate values. For links to these separate properties, and more details of how CSS specifies lists, see the list-style  reference page. If you are using a markup language like HTML that provides conventional tags for unordered (<ul> ) and ordered (<ol> ) lists, then it is good practice to use the tags in the way they were intended. However, you can use CSS to make <ul>  display ordered and <ol>  display unordered if you wish. Browsers differ in the way they implement the styles for lists. Do not expect your stylesheet to give identical results in all browsers.     Counters  Note:\u00a0 Some browsers do not support counters. The CSS\u00a0contents and browser compatibility page on the Quirks Mode site contains a detailed chart of browser compatibility for this and other CSS features. Individual pages in the CSS\u00a0Reference on this site also have browser compatibility tables.  You can use counters to number any elements, not only list items. For example, in some documents you might want to number headings or paragraphs. To specify numbering, you need a counter with a name that you specify. In some element before the counting is to start, reset the counter with the property counter-reset  and the name of your counter. The parent of the elements you are counting is a good place to do this, but you can use any element that comes before the list items. In each element where the counter increments, use the property counter-increment  and the name of your counter. To display your counter, add :before  or :after  to the selector and use the content property (as you did on the previous page, Content). In the value of the content property, specify counter() with the name of your counter. Optionally specify a type. The types are the same as in the Ordered lists section above. Normally the element that displays the counter also increments it.  Example    This rule initializes a counter for every <h3>  element with the class numbered:   h3.numbered {counter-reset: mynum;}   This rule displays and increments the counter for every <p>  element with the class numbered:   p.numbered:before {   content: counter(mynum) \": \";   counter-increment: mynum;   font-weight: bold;}   The result looks like this:    Heading 1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum          More details    You cannot use counters unless you know that everyone who reads your document has a browser that supports them. If you are able to use counters, they have the advantage that you can style the counters separately from the list items. In the example above, the counters are bold but the list items are not. You can also use counters in more complex ways\u2014for example, to number sections, headings, subheadings and paragraphs in formal documents. For details, see Automatic counters and numbering in the CSS Specification.     Action: Styled lists Make a new HTML document, doc2.html. Copy and paste the content from here, making sure that you scroll to get all of it:   <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text\/html;  charset=iso-8859-1\"> <title>Sample document 2<\/title> <link rel=\"stylesheet\" type=\"text\/css\" href=\"style2.css\"> <\/head> <body> \u00a0 <h3 id=\"oceans\">The oceans<\/h3> <ul> <li>Arctic<\/li> <li>Atlantic<\/li> <li>Pacific<\/li> <li>Indian<\/li> <li>Southern<\/li> <\/ul> \u00a0 <h3 class=\"numbered\">Numbered paragraphs<\/h3> <p class=\"numbered\">Lorem ipsum<\/p> <p class=\"numbered\">Dolor sit<\/p> <p class=\"numbered\">Amet consectetuer<\/p> <p class=\"numbered\">Magna aliquam<\/p> <p class=\"numbered\">Autem veleum<\/p> \u00a0 <\/body> <\/html>   Make a new stylesheet, style2.css. Copy and paste the content from here:   \/* numbered paragraphs *\/ h3.numbered {counter-reset: mynum;} \u00a0 p.numbered:before {   content: counter(mynum) \": \";   counter-increment: mynum;   font-weight: bold;}   If the layout and comment are not to your taste, change them. Open the document in your browser. If your browser supports counters, you see something like the example below. If your browser does not support counters, then you do not see the numbers (and probably not even the colons):     The oceans  Arctic Atlantic Pacific Indian Southern  Numbered paragraphs 1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum     \u00a0  Challenges    Add a rule to your stylesheet, to number the oceans using Roman numerals from i to v:     The oceans  Arctic Atlantic Pacific Indian Southern       Change your stylesheet to identify the headings with capital letters in parentheses like this:     (A) The oceans . . . (B) Numbered paragraphs . . .         \u00a0See solutions to these challenges. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. When your browser displays your sample document, it creates space around the elements when it lays them out on the page. The next page describes how you can use CSS to work with the underlying shapes of elements: Boxes     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Layout","title":"Layout","description":"Information: Layout You can use CSS to specify various visual effects that change the layout of your document. Some of the techniques for specifying layout are advanced, and beyond the scope of this basic tutorial. When you design a layout to look similar in many browsers, your stylesheet interacts with the browser's default stylesheet and layout engine in ways that can be complex. This is also an advanced subject, beyond the scope of this basic tutorial. This page describes some simple techniques that you can try. Document structure If you want to control the layout of your document, then you might have to change its structure. Your document's markup language might have general-purpose tags for creating structure. For example, in HTML you can use the <div>  element to create structure.  Example    In your sample document, the numbered paragraphs under the second heading do not have a container of their own. Your stylesheet cannot draw a border around those paragraphs, because there is no element to specify in the selector. To fix this structural problem, you can add a DIV tag around the paragraphs. This tag is unique, so it can by identified by an id attribute:   <H3 class=\"numbered\">Numbered paragraphs<\/H3> <DIV id=\"numbered\"> <P class=\"numbered\">Lorem ipsum<\/P> <P class=\"numbered\">Dolor sit<\/P> <P class=\"numbered\">Amet consectetuer<\/P> <P class=\"numbered\">Magna aliquam<\/P> <P class=\"numbered\">Autem veleum<\/P> <\/DIV>   Now your stylesheet can use one rule to specify borders around both lists:   ul, #numbered {   border: 1em solid #69b;   padding-right:1em;   }   The result looks like:     (A) The oceans   Arctic Atlantic Pacific Indian Southern   (B) Numbered paragraphs  1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum          Size units So far in this tutorial, you have specified sizes in pixels (px). These are appropriate for some purposes on a display device like a computer screen. But when the user changes the font size, your layout can look wrong. For many purposes it is better to specify sizes as a percentage or in ems (em). An em is nominally the size of the current font (the width of a letter m). When the user changes the font size, your layout adjusts automatically.  Example    The border on the left of this text has its size specified in pixels. The border on the right has its size specified in ems. In your browser, change the size of the font to see how the border on the right adjusts but the border on the left does not:     RESIZE ME PLEASE          More details    For other devices, other length units are appropriate. There is more information about this in a later page of this tutorial. For full details of the values and units that you can use, see Values in the CSS Specification.     Text layout Two properties specify how the content of an element is aligned. You can use them for simple layout adjustments:  text-align  Aligns the content. Use one of these values: left, right, center, justify text-indent  Indents the content by an amount that you specify.  These properties apply to any text-like content in the element, not only to actual text. Remember that they are inherited by the element's children, so you might have to explicitly turn them off in the children to avoid surprising results.  Example    To center headings:   h3 {   border-top: 1px solid gray;   text-align: center;   }   Resulting in:     (A) The oceans     In an HTML document, the content that you see below a heading is not structurally contained by the heading. So when you align a heading like this, the tags below the heading do not inherit the style.     Floats The float  property forces an element to the left or right. This is a simple way to control its position and size. The rest of the document's content normally flows around the floated element. You can control this by using the clear  property on other elements to make them stay clear of floats.  Example    In your sample document, the lists stretch across the window. You can prevent this by floating them to the left. To keep the headings in place, you must also specify that they stay clear of floats on their left:   ul, #numbered {float: left;} h3 {clear: left;}   The result looks like:     (A) The oceans   Arctic Atlantic Pacific Indian Southern   (B) Numbered paragraphs  1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum      (A little padding is needed on the right of the boxes, where the border is too close to the text.)     Positioning You can specify an element's position in four ways by specifying the position  property and one of the following values. These are advanced properties. It is possible to use them in simple ways\u2014that is why they are mentioned in this basic tutorial. But using them for complex layouts can be difficult.  relative The element's position is shifted relative to its normal position. Use this to shift an element by a specified amount. You can sometimes use the element's margin to achieve the same effect. fixed The element's position is fixed. Specify the element's position relative to the document window. Even if the rest of the document scrolls, the element remains fixed. absolute The element's position is fixed relative to a parent element. Only a parent that is itself positioned with relative, fixed or absolute will do. You can make any parent element suitable by specifying position: relative; for it without specifying any shift. static The default. Use this value if you need to turn positioning off explicitly.  Along with these values of the position property (except for static), specify one or more of the properties: top, right, bottom, left, width, height to identify where you want the element to appear, and perhaps also its size.  Example    To position two elements on top of each other, create a parent container in your document with the two elements inside it:   <DIV id=\"parent-div\"> <P id=\"forward\">\/<\/P> <P id=\"back\">\\<\/P> <\/DIV>   In your stylesheet, make the parent's position relative. There is no need to specify any actual shift. Make the children's position absolute:   #parent-div {   position: relative;   font: bold 200% sans-serif;   }  #forward, #back {   position: absolute;   margin:0px; \/* no margin around the elements *\/ \u00a0 top: 0px; \/* distance from top *\/ \u00a0 left: 0px; \/* distance from left *\/ \u00a0 }  #forward {   color: blue;   }  #back {   color: red;   }   The result looks like this, with the backslash on top of the forward slash:  \/ \\     \u00a0    \u00a0      More details    The full story on positioning takes up two complex chapters in the CSS Specification: Visual formatting model and Visual formatting model details. If you are designing stylesheets to work in many browsers, then you also need to take into account differences in the way browsers interpret the standard, and perhaps bugs in particular versions of particular browsers.     Document structure If you want to control the layout of your document, then you might have to change its structure. Your document's markup language might have general-purpose tags for creating structure. For example, in HTML you can use the <div>  element to create structure.  Example    In your sample document, the numbered paragraphs under the second heading do not have a container of their own. Your stylesheet cannot draw a border around those paragraphs, because there is no element to specify in the selector. To fix this structural problem, you can add a DIV tag around the paragraphs. This tag is unique, so it can by identified by an id attribute:   <H3 class=\"numbered\">Numbered paragraphs<\/H3> <DIV id=\"numbered\"> <P class=\"numbered\">Lorem ipsum<\/P> <P class=\"numbered\">Dolor sit<\/P> <P class=\"numbered\">Amet consectetuer<\/P> <P class=\"numbered\">Magna aliquam<\/P> <P class=\"numbered\">Autem veleum<\/P> <\/DIV>   Now your stylesheet can use one rule to specify borders around both lists:   ul, #numbered {   border: 1em solid #69b;   padding-right:1em;   }   The result looks like:     (A) The oceans   Arctic Atlantic Pacific Indian Southern   (B) Numbered paragraphs  1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum          Size units So far in this tutorial, you have specified sizes in pixels (px). These are appropriate for some purposes on a display device like a computer screen. But when the user changes the font size, your layout can look wrong. For many purposes it is better to specify sizes as a percentage or in ems (em). An em is nominally the size of the current font (the width of a letter m). When the user changes the font size, your layout adjusts automatically.  Example    The border on the left of this text has its size specified in pixels. The border on the right has its size specified in ems. In your browser, change the size of the font to see how the border on the right adjusts but the border on the left does not:     RESIZE ME PLEASE          More details    For other devices, other length units are appropriate. There is more information about this in a later page of this tutorial. For full details of the values and units that you can use, see Values in the CSS Specification.     Text layout Two properties specify how the content of an element is aligned. You can use them for simple layout adjustments:  text-align  Aligns the content. Use one of these values: left, right, center, justify text-indent  Indents the content by an amount that you specify.  These properties apply to any text-like content in the element, not only to actual text. Remember that they are inherited by the element's children, so you might have to explicitly turn them off in the children to avoid surprising results.  Example    To center headings:   h3 {   border-top: 1px solid gray;   text-align: center;   }   Resulting in:     (A) The oceans     In an HTML document, the content that you see below a heading is not structurally contained by the heading. So when you align a heading like this, the tags below the heading do not inherit the style.     Floats The float  property forces an element to the left or right. This is a simple way to control its position and size. The rest of the document's content normally flows around the floated element. You can control this by using the clear  property on other elements to make them stay clear of floats.  Example    In your sample document, the lists stretch across the window. You can prevent this by floating them to the left. To keep the headings in place, you must also specify that they stay clear of floats on their left:   ul, #numbered {float: left;} h3 {clear: left;}   The result looks like:     (A) The oceans   Arctic Atlantic Pacific Indian Southern   (B) Numbered paragraphs  1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum      (A little padding is needed on the right of the boxes, where the border is too close to the text.)     Positioning You can specify an element's position in four ways by specifying the position  property and one of the following values. These are advanced properties. It is possible to use them in simple ways\u2014that is why they are mentioned in this basic tutorial. But using them for complex layouts can be difficult.  relative The element's position is shifted relative to its normal position. Use this to shift an element by a specified amount. You can sometimes use the element's margin to achieve the same effect. fixed The element's position is fixed. Specify the element's position relative to the document window. Even if the rest of the document scrolls, the element remains fixed. absolute The element's position is fixed relative to a parent element. Only a parent that is itself positioned with relative, fixed or absolute will do. You can make any parent element suitable by specifying position: relative; for it without specifying any shift. static The default. Use this value if you need to turn positioning off explicitly.  Along with these values of the position property (except for static), specify one or more of the properties: top, right, bottom, left, width, height to identify where you want the element to appear, and perhaps also its size.  Example    To position two elements on top of each other, create a parent container in your document with the two elements inside it:   <DIV id=\"parent-div\"> <P id=\"forward\">\/<\/P> <P id=\"back\">\\<\/P> <\/DIV>   In your stylesheet, make the parent's position relative. There is no need to specify any actual shift. Make the children's position absolute:   #parent-div {   position: relative;   font: bold 200% sans-serif;   }  #forward, #back {   position: absolute;   margin:0px; \/* no margin around the elements *\/ \u00a0 top: 0px; \/* distance from top *\/ \u00a0 left: 0px; \/* distance from left *\/ \u00a0 }  #forward {   color: blue;   }  #back {   color: red;   }   The result looks like this, with the backslash on top of the forward slash:  \/ \\     \u00a0    \u00a0      More details    The full story on positioning takes up two complex chapters in the CSS Specification: Visual formatting model and Visual formatting model details. If you are designing stylesheets to work in many browsers, then you also need to take into account differences in the way browsers interpret the standard, and perhaps bugs in particular versions of particular browsers.     Action: Specifying layout  Change your sample document, doc2.html, and stylesheet, style2.css, using the examples above in the sections Document structure and Floats. In the Floats example, add padding to separate the text from the right border by 0.5 em.   Challenges    Change your sample document, doc2.html, adding this tag to it near the end, just before <\/BODY>.  <IMG id=\"fixed-pin\" src=\"Yellow-pin.png\" alt=\"Yellow map pin\">  If you did not download the image file earlier in this tutorial, download it now, and place it in the same directory as the other sample files:        Predict where the image will appear in your document. Then refresh your browser to see if you were correct. Add a rule to your stylesheet that places the image in the top right of your document. Refresh your browser and make the window small. Check that the image stays in the top right even when you scroll your document:   (A) The oceans   Arctic Atlantic Pacific Indian Southern   (B) Numbered paragraphs  1: Lorem ipsum 2: Dolor sit 3: Amet consectetuer 4: Magna aliquam 5: Autem veleum  \u00a0        \u00a0See a solution to this challenge. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. You have just about covered all the topics in this basic CSS tutorial. The next page describes more advanced selectors for CSS rules, and some specific ways that you can style tables: Tables     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Tables","title":"Tables","description":"Information: More selectors CSS has some ways to select elements based on the relationships between elements. You can use these to make selectors that are more specific.  Selectors based on relationships   Selector Selects   A E Any E element that is a descendant of an A element (that is: a child, or a child of a child, etc.)   A > E Any E element that is a child of an A element   E:first-child Any E element that is the first child of its parent   B + E Any E element that is the next sibling of a B element (that is: the next child of the same parent)    You can combine these to express complex relationships. You can also use the symbol * (asterisk) to mean \"any element\".  Example    An HTML table has an id attribute, but its rows and cells do not have individual identifiers:   <TABLE id=\"data-table-1\"> ... <TR> <TD>Prefix<\/TD> <TD>0001<\/TD> <TD>default<\/TD> <\/TR> ...   These rules make the first cell in each row bold, and the second cell in each row monospaced. They only affect one specific table in the document:   data-table-1 td:first-child {font-weight: bolder;}  data-table-1 td:first-child + td {font-family: monospace;}   The result looks like:        Prefix 0001 default             More details    In the usual way, if you make a selector more specific, then you increase its priority. If you use these techniques, you avoid the need to specify class or id attributes on so many tags in your document. Instead, CSS does the work. In large designs where speed is important, you can make your stylesheets more efficient by avoiding complex rules that depend on relationships between elements. For full details of selectors, see Selectors in the CSS Reference page.     Information: Tables A table is an arrangement of information in a rectangular grid. Some tables can be complex, and for complex tables different browsers can give different results. When you design your document, use a table to express the relationships between the pieces of information. Then it does not matter if different browsers present the information in slightly different ways, because the meaning is still clear. Do not use tables in unusual ways to produce particular visual layouts. The techniques on the previous page of this tutorial (Layout) are better for that purpose. Table structure In a table, each piece of information is displayed in a cell. The cells in a line across the page make up a row. In some tables, the rows might be grouped. A special group of rows at the start of the table is the header. A special group of rows at the end of the table is the footer. The main rows in the table are the body, and they might also be in groups. The cells in a line down the page make up a column, but columns have limited use in CSS tables.  Example    The table of Selectors based on relationships near the top of this page has ten cells in five rows. The first row is the header. The other four rows are the body. There is no footer. It has two columns.      This tutorial only covers simple tables, where the results are fairly predictable. In a simple table, every cell occupies only one row and column. You can use CSS for complex tables where cells span (extend across) more than one row or column, but tables like that are beyond the scope of this basic tutorial. Borders Cells have no margins. Cells do have borders and padding. By default, the borders are separated by the value of the table's border-spacing  property. You can also remove the spacing completely by setting the table's border-collapse  property to collapse.  Example    Here are three tables. The table on the left has 0.5 em border spacing. The table in the center has zero border spacing. The table on the right has collapsed borders:        Clubs Hearts   Diamonds Spades         Clubs Hearts   Diamonds Spades         Clubs Hearts   Diamonds Spades            Captions A <caption>  element is a label that applies to the entire table. By default, it is displayed at the top of the table. To move it to the bottom, set its caption-side  property to bottom. The property is inherited, so alternatively you can set it on the table or another ancestor element. To style the text of the caption, use any of the usual properties for text.  Example    This table has a caption at the bottom:   #demo-table > caption {   caption-side: bottom;   font-style: italic;   text-align: right;   }        Suits        Clubs Hearts   Diamonds Spades                Empty cells You can display empty cells (that is, their borders and backgrounds) by specifying empty-cells : show; for the table element. You can hide them by specifying empty-cells: hide;. Then, if a cell's parent element has a background, it shows through the empty cell.  Example    These tables have a pale green background. Their cells have a pale gray background and dark gray borders. In the table on the left, the empty cell is shown. On the right, it is hidden:        \u00a0 Hearts   Diamonds Spades         \u00a0 Hearts   Diamonds Spades            \u00a0  More details    For detailed information about tables, see Tables in the CSS Specification. The information there goes further than this tutorial, but it does not cover differences between browsers that can affect complex tables.     Table structure In a table, each piece of information is displayed in a cell. The cells in a line across the page make up a row. In some tables, the rows might be grouped. A special group of rows at the start of the table is the header. A special group of rows at the end of the table is the footer. The main rows in the table are the body, and they might also be in groups. The cells in a line down the page make up a column, but columns have limited use in CSS tables.  Example    The table of Selectors based on relationships near the top of this page has ten cells in five rows. The first row is the header. The other four rows are the body. There is no footer. It has two columns.      This tutorial only covers simple tables, where the results are fairly predictable. In a simple table, every cell occupies only one row and column. You can use CSS for complex tables where cells span (extend across) more than one row or column, but tables like that are beyond the scope of this basic tutorial. Borders Cells have no margins. Cells do have borders and padding. By default, the borders are separated by the value of the table's border-spacing  property. You can also remove the spacing completely by setting the table's border-collapse  property to collapse.  Example    Here are three tables. The table on the left has 0.5 em border spacing. The table in the center has zero border spacing. The table on the right has collapsed borders:        Clubs Hearts   Diamonds Spades         Clubs Hearts   Diamonds Spades         Clubs Hearts   Diamonds Spades            Captions A <caption>  element is a label that applies to the entire table. By default, it is displayed at the top of the table. To move it to the bottom, set its caption-side  property to bottom. The property is inherited, so alternatively you can set it on the table or another ancestor element. To style the text of the caption, use any of the usual properties for text.  Example    This table has a caption at the bottom:   #demo-table > caption {   caption-side: bottom;   font-style: italic;   text-align: right;   }        Suits        Clubs Hearts   Diamonds Spades                Empty cells You can display empty cells (that is, their borders and backgrounds) by specifying empty-cells : show; for the table element. You can hide them by specifying empty-cells: hide;. Then, if a cell's parent element has a background, it shows through the empty cell.  Example    These tables have a pale green background. Their cells have a pale gray background and dark gray borders. In the table on the left, the empty cell is shown. On the right, it is hidden:        \u00a0 Hearts   Diamonds Spades         \u00a0 Hearts   Diamonds Spades            \u00a0  More details    For detailed information about tables, see Tables in the CSS Specification. The information there goes further than this tutorial, but it does not cover differences between browsers that can affect complex tables.     Action: Styling a table  Make a new HTML document, doc3.html. Copy and paste the content from here, making sure that you scroll to get all of it:   <DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0\/\/EN\"> <HTML> <HEAD> <TITLE>Sample document 3<\/TITLE> <LINK rel=\"stylesheet\" type=\"text\/css\" href=\"style3.css\"> <\/HEAD> <BODY>  <TABLE id=\"demo-table\"> <CAPTION>Oceans<\/CAPTION>  <THEAD> <TR> <TH><\/TH> <TH>Area<\/TH> <TH>Mean depth<\/TH> <\/TR> <TR> <TH><\/TH> <TH>million km<SUP>2<\/SUP><\/TH> <TH>m<\/TH> <\/TR> <\/THEAD>  <TBODY> <TR> <TH>Arctic<\/TH> <TD>13,000<\/TD> <TD>1,200<\/TD> <\/TR> <TR> <TH>Atlantic<\/TH> <TD>87,000<\/TD> <TD>3,900<\/TD> <\/TR> <TR> <TH>Pacific<\/TH> <TD>180,000<\/TD> <TD>4,000<\/TD> <\/TR> <TR> <TH>Indian<\/TH> <TD>75,000<\/TD> <TD>3,900<\/TD> <\/TR> <TR> <TH>Southern<\/TH> <TD>20,000<\/TD> <TD>4,500<\/TD> <\/TR> <\/TBODY>  <TFOOT> <TR> <TH>Total<\/TH> <TD>361,000<\/TD> <TD><\/TD> <\/TR> <TR> <TH>Mean<\/TH> <TD>72,000<\/TD> <TD>3,800<\/TD> <\/TR> <\/TFOOT>  <\/TABLE>     <\/BODY> <\/HTML>    Make a new stylesheet, style3.css. Copy and paste the content from here, making sure that you scroll to get all of it:   \/*** Style for doc3.html (Tables) ***\/  #demo-table {   font: 100% sans-serif;   background-color: #efe;   border-collapse: collapse;   empty-cells: show;   border: 1px solid #7a7;   }  #demo-table > caption {   text-align: left;   font-weight: bold;   font-size: 200%;   border-bottom: .2em solid #4ca;   margin-bottom: .5em;   }   \/* basic shared rules *\/ #demo-table th, #demo-table td {   text-align: right;   padding-right: .5em;   }  #demo-table th {   font-weight: bold;   padding-left: .5em;   }   \/* header *\/ #demo-table > thead > tr:first-child > th {   text-align: center;   color: blue;   }  #demo-table > thead > tr + tr > th {   font-style: italic;   color: gray;   }  \/* fix size of superscript *\/ #demo-table sup {   font-size: 75%;   }  \/* body *\/ #demo-table td {   background-color: #cef;   padding:.5em .5em .5em 3em;   }  #demo-table tbody th:after {   content: \":\";   }   \/* footer *\/ #demo-table tfoot {   font-weight: bold;   }  #demo-table tfoot th {   color: blue;   }  #demo-table tfoot th:after {   content: \":\";   }  #demo-table > tfoot td {   background-color: #cee;   }  #demo-table > tfoot > tr:first-child td {   border-top: .2em solid #7a7;   }    Open the document in your browser. It should look very similar to this:      Oceans     \u00a0 Area Mean\u00a0depth   \u00a0 million km2 m   Arctic: 13,000 1,200   Atlantic: 87,000 3,900   Pacific: 180,000 4,000   Indian: 75,000 3,900   Southern: 20,000 4,500   Total: 361,000 \u00a0   Mean: 72,000 3,800           Compare the rules in the stylesheet with the displayed table, to ensure that you understand the effect of each rule. If you find a rule that you are not sure about, comment it out and refresh your browser to see what happens. Here are some notes about this table:  The caption lies outside the table border. If you have a minimum point size set in Options, it might affect the superscript in km2. There are three empty cells. Two of them allow the table background to show through. The third has a background and a top border. The colons are added by the stylesheet.     Challenges    Change the stylesheet to make the table look like this:          \u00a0 Area Mean\u00a0depth   \u00a0 million km2 m   Arctic: 13,000 1,200   Atlantic: 87,000 3,900   Pacific: 180,000 4,000   Indian: 75,000 3,900   Southern: 20,000 4,500   Total: 361,000 \u00a0   Mean: 72,000 3,800     Oceans          \u00a0 See a solution to this challenge. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. This is the last page in this tutorial that focusses on CSS properties and values. For a complete summary of properties and values, see Full property table in the CSS Specification. The next page looks again at the purpose and structure of CSS stylesheets: Media     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/JavaScript","title":"JavaScript and CSS","description":"Information: JavaScript JavaScript is a programming language. JavaScript is widely used to provide interactivity in web sites and applications. JavaScript can interact with stylesheets, allowing you to write programs that change a document's style dynamically. There are three ways to do this:  By working with the document's list of stylesheets\u2014for example: adding, removing or modifying a stylesheet. By working with the rules in a stylesheet\u2014for example: adding, removing or modifying a rule. By working with an individual element in the DOM\u2014modifying its style independently of the document's stylesheets   More details    For more information about JavaScript, see the JavaScript page in this wiki.    Action: A JavaScript demonstration Make a new HTML document, doc5.html. Copy and paste the content from here, making sure that you scroll to get all of it:   <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0\/\/EN\"> <HTML>  <HEAD> <TITLE>Mozilla CSS Getting Started - JavaScript demonstration<\/TITLE> <LINK rel=\"stylesheet\" type=\"text\/css\" href=\"style5.css\"> <SCRIPT type=\"text\/javascript\" src=\"script5.js\"><\/SCRIPT> <\/HEAD>  <BODY> <H1>JavaScript sample<\/H1>  <DIV id=\"square\"><\/DIV>  <BUTTON type=\"button\" onclick=\"doDemo(this);\">Click Me<\/BUTTON>  <\/BODY> <\/HTML>   Make a new CSS file, style5.css. Copy and paste the content from here:   \/*** JavaScript demonstration ***\/ #square {   width: 20em;   height: 20em;   border: 2px inset gray;   margin-bottom: 1em;   }  button {   padding: .5em 2em;   }   Make a new text file, script5.js. Copy and paste the content from here:   \/\/ JavaScript demonstration function doDemo (button) {   var square = document.getElementById(\"square\");   square.style.backgroundColor = \"#fa4\";   button.setAttribute(\"disabled\", \"true\");   setTimeout(clearDemo, 2000, button);   }  function clearDemo (button) {   var square = document.getElementById(\"square\");   square.style.backgroundColor = \"transparent\";   button.removeAttribute(\"disabled\");   }   Open the document in your browser and press the button. This wiki does not support JavaScript in pages, so it is not possible to show the demonstration here. It looks something like this, before and after you press the button:         JavaScript demonstration           JavaScript demonstration         Important notes about this demonstration:  The HTML document links the stylesheet as usual, and it also links the script. The script works with individual elements in the DOM. It modifies the square's style directly. It modifies the button's style indirectly by changing an attribute. In JavaScript, document.getElementById(\"square\") is similar in function to to the CSS selector #square. In JavaScript, backgroundColor corresponds to the CSS property background-color. JavaScript does not allow hyphens in names, so \"camelCase\" is used instead. Your browser has a built-in CSS rule for button[disabled=\"true\"] that changes the button's appearance when it is disabled.    Challenge    Change the script so that the square jumps to the right by 20 em when its color changes, and jumps back afterwards.    See a solution to this challenge. What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. In this demonstration, the HTML document links the script even though only the button element uses the script. Mozilla extends CSS so that it can link JavaScript code (and also content and other stylesheets) to selected elements. The next page demonstrates this: XBL bindings     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/SVG_graphics","title":"SVG and CSS","description":"Information: SVG SVG (Scalable Vector Graphics) is an XML-based language for creating graphics. It can be used for static images, and also for animations and user interfaces. Like other XML-based languages, SVG supports CSS stylesheets so that you can separate the style of a graphic from its content. Also, stylesheets that you use with other document markup languages can specify the URL of an SVG graphic where an image is required. For example, a stylesheet that you use with an HTML document can specify the URL of an SVG graphic in the value of a background property.  More details     At the time of writing (mid 2011), most modern browsers have basic support for SVG, including Internet Explorer 9 or later. Some SVG\u00a0features are supported only partially or not at all on some browsers. See the SVG tables on caniuse.com for an overview of SVG support, or the compatibility tables in the SVG element reference for support of specific items. You can add SVG support to other versions by installing a plugin such as the one provided by Adobe. For more information about SVG in Mozilla, see the SVG page in this wiki.     Action: An SVG demonstration Make a new SVG document as a plain text file, doc8.svg. Copy and paste the content from here, making sure that you scroll to get all of it:  \r           <?xml version=\"1.0\" standalone=\"no\"?>  <?xml-stylesheet type=\"text\/css\" href=\"style8.css\"?>  <!DOCTYPE svg PUBLIC \"-\/\/W3C\/\/DTD SVG 1.1\/\/EN\"   \"http:\/\/www.w3.org\/Graphics\/SVG\/1.1\/DTD\/svg11.dtd\">  <svg width=\"600px\" height=\"600px\" viewBox=\"-300 -300 600 600\"   xmlns=\"http:\/\/www.w3.org\/2000\/svg\" version=\"1.1\"   xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">  <title>SVG demonstration<\/title> <desc>Mozilla CSS Getting Started - SVG demonstration<\/desc>  <defs>   <g id=\"segment\" class=\"segment\">     <path class=\"segment-fill\" d=\"M0,0 v-200 a40,40 0 0,0 -62,10 z\"\/>     <path class=\"segment-edge\" d=\"M0,-200 a40,40 0 0,0 -62,10\"\/>     <\/g>   <g id=\"quadrant\">     <use xlink:href=\"#segment\"\/>     <use xlink:href=\"#segment\" transform=\"rotate(18)\"\/>     <use xlink:href=\"#segment\" transform=\"rotate(36)\"\/>     <use xlink:href=\"#segment\" transform=\"rotate(54)\"\/>     <use xlink:href=\"#segment\" transform=\"rotate(72)\"\/>     <\/g>   <g id=\"petals\">     <use xlink:href=\"#quadrant\"\/>     <use xlink:href=\"#quadrant\" transform=\"rotate(90)\"\/>     <use xlink:href=\"#quadrant\" transform=\"rotate(180)\"\/>     <use xlink:href=\"#quadrant\" transform=\"rotate(270)\"\/>     <\/g>   <radialGradient id=\"fade\" cx=\"0\" cy=\"0\" r=\"200\"       gradientUnits=\"userSpaceOnUse\">     <stop id=\"fade-stop-1\" offset=\"33%\"\/>     <stop id=\"fade-stop-2\" offset=\"95%\"\/>     <\/radialGradient>   <\/defs>  <text id=\"heading\" x=\"-280\" y=\"-270\">   SVG demonstration<\/text> <text  id=\"caption\" x=\"-280\" y=\"-250\">   Move your mouse pointer over the flower.<\/text>  <g id=\"flower\">   <circle id=\"overlay\" cx=\"0\" cy=\"0\" r=\"200\"     stroke=\"none\" fill=\"url(#fade)\"\/>   <use id=\"outer-petals\" xlink:href=\"#petals\"\/>   <use id=\"inner-petals\" xlink:href=\"#petals\"     transform=\"rotate(9) scale(0.33)\"\/>   <\/g>  <\/svg>\r           Make a new CSS file, style8.css. Copy and paste the content from here, making sure that you scroll to get all of it:  \r           \/*** SVG demonstration ***\/  \/* page *\/ svg {   background-color: beige;   }  #heading {   font-size: 24px;   font-weight: bold;   }  #caption {   font-size: 12px;   }  \/* flower *\/ #flower:hover {   cursor: crosshair;   }  \/* gradient *\/ #fade-stop-1 {   stop-color: blue;   }  #fade-stop-2 {   stop-color: white;   }  \/* outer petals *\/ #outer-petals {   opacity: .75;   }  #outer-petals .segment-fill {   fill: azure;   stroke: lightsteelblue;   stroke-width: 1;   }  #outer-petals .segment-edge {   fill: none;   stroke: deepskyblue;   stroke-width: 3;   }  #outer-petals .segment:hover > .segment-fill {   fill: plum;   stroke: none;   }  #outer-petals .segment:hover > .segment-edge {   stroke: slateblue;   }  \/* inner petals *\/ #inner-petals .segment-fill {   fill: yellow;   stroke: yellowgreen;   stroke-width: 1;   }  #inner-petals .segment-edge {   fill: none;   stroke: yellowgreen;   stroke-width: 9;   }  #inner-petals .segment:hover > .segment-fill {   fill: darkseagreen;   stroke: none;   }  #inner-petals .segment:hover > .segment-edge {   stroke: green;   }\r           Open the document in your SVG-enabled browser. Move your mouse pointer over the graphic. This wiki does not support SVG in pages, so it is not possible to show the demonstration here. The graphic looks like this:        Notes about this demonstration:  The SVG document links the styesheet in the usual way. SVG has its own CSS properties and values. Some of them are similar to CSS properties for HTML.   Challenge    Change the stylesheet so that the inner petals all turn pink when the mouse pointer is over any one of them, without changing the way the outer petals work.    \u00a0 What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. In this demonstration, your SVG-enabled browser already knows how to display SVG elements. The stylesheet only modifies the display in certain ways. This is also true for HTML and XUL documents. But you can use CSS for general-purpose XML documents, where there is no predefined way to display the elements. The next page demonstrates this: XML data     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0     What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. In this demonstration, your SVG-enabled browser already knows how to display SVG elements. The stylesheet only modifies the display in certain ways. This is also true for HTML and XUL documents. But you can use CSS for general-purpose XML documents, where there is no predefined way to display the elements. The next page demonstrates this: XML data     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/XML_data","title":"XML data","description":"Information: XML data XML (eXtensible Markup Language) is a general-purpose language for any kind of structured data. By default, your Mozilla browser displays XML in a format very similar to the original data in the XML file. You see the actual tags that define the data's structure. By linking a CSS stylesheet with the XML document, you can define other ways to display it. To do this, your stylesheet uses rules that map tags in the XML document to the display types used by HTML.  Example    Data in an XML document uses <INFO> tags. You want the document's INFO elements to be displayed like HTML paragraphs. In the document's stylesheet, you specify how INFO elements are to be displayed:   INFO {   display: block;   margin: 1em 0;   }       The most common values for the display property are:    block Displayed like HTML's DIV (for headings, paragraphs)   inline Displayed like HTML's SPAN (for emphasis within text)    Add your own style rules that specify the font, spacing and other details in the same way as for HTML.  More details    Other values of display display the element like a list item, or like a component of a table. For the full list of display types, see The display property in the CSS Specification. Using CSS alone, the structure of the display must be the same as the structure of the document. Other technologies can modify the structure of the display\u2014for example, XBL can add content, and JavaScript can modify the DOM. For more information about XML in Mozilla, see the XML page in this wiki.     Action: An XML demonstration Make a new XML file, doc9.xml. Copy and paste the content from here, making sure that you scroll to get all of it:   <?xml version=\"1.0\"?> <!-- XML demonstration -->  <?xml-stylesheet type=\"text\/css\" href=\"style9.css\"?>  <!DOCTYPE planet> <planet>  <ocean> <name>Arctic<\/name> <area>13,000<\/area> <depth>1,200<\/depth> <\/ocean>  <ocean> <name>Atlantic<\/name> <area>87,000<\/area> <depth>3,900<\/depth> <\/ocean>  <ocean> <name>Pacific<\/name> <area>180,000<\/area> <depth>4,000<\/depth> <\/ocean>  <ocean> <name>Indian<\/name> <area>75,000<\/area> <depth>3,900<\/depth> <\/ocean>  <ocean> <name>Southern<\/name> <area>20,000<\/area> <depth>4,500<\/depth> <\/ocean>  <\/planet>   Make a new CSS file, style9.css. Copy and paste the content from here, making sure that you scroll to get all of it:   \/*** XML demonstration ***\/  planet:before {   display: block;   width: 8em;   font-weight: bold;   font-size: 200%;   content: \"Oceans\";   margin: -.75em 0px .25em -.25em;   padding: .1em .25em;   background-color: #cdf;   }  planet {   display: block;   margin: 2em 1em;   border: 4px solid #cdf;   padding: 0px 1em;   background-color: white;   }  ocean {   display: block;   margin-bottom: 1em;   }  name {   display: block;   font-weight: bold;   font-size: 150%;   }  area {   display: block;   }  area:before {   content: \"Area: \";   }  area:after {   content: \" million km\\B2\";   }  depth {   display: block;   }  depth:before {   content: \"Mean depth: \";   }  depth:after {   content: \" m\";   }   Open the document in your browser:      Oceans Arctic Area: 13,000 million km\u00b2 Mean depth: 1,200 m Atlantic Area: 87,000 million km\u00b2 Mean depth: 3,900 m . . .       Notes about this demonstration:  The superscript 2 (in \"million km\u00b2\") a Unicode character, coded as \\B2 in the CSS file. The heading, \"Oceans\", has a negative top margin, moving it up so it is displayed on top of the border.  \u00a0  Challenge    Change the stylesheet so that it displays the document as a table. (See the Tables chapter in the CSS Specification for examples that you can adapt.)     What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. This is the last page of the tutorial. For more information about CSS in Mozilla, see the main CSS page in this wiki.     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0     What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. This is the last page of the tutorial. For more information about CSS in Mozilla, see the main CSS page in this wiki.     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/XBL_bindings","title":"XBL bindings","description":"Information: XBL bindings The structure provided by markup languages and CSS is not ideal for complex applications where parts need to be self-contained and reusable. You can place stylesheets in separate files, and you can place scripts in separate files. But you must link those files from the document as a whole. Another structural limitation concerns content. You can use CSS to provide content for selected elements, but the content is limited to text and images, and its positioning is limited to before or after the selected element. Mozilla provides a mechanism that overcomes these limitations: XBL (XML Bindings Language). You can use XBL to link selected elements to their own:  Stylesheets Content Properties and methods Event handlers  Because you avoid linking everything at the document level, you can make self-contained parts that are easy to maintain and reuse.  More details    For more information about XBL bindings, see the XBL page in this wiki.   Action: An XBL demonstration Make a new HTML document, doc6.html. Copy and paste the content from here:  \r           <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0\/\/EN\"> <HTML>  <HEAD> <TITLE>Mozilla CSS Getting Started - XBL demonstration<\/TITLE> <LINK rel=\"stylesheet\" type=\"text\/css\" href=\"style6.css\"> <\/HEAD>  <BODY> <H1>XBL demonstration<\/H1> <DIV id=\"square\">Click Me<\/DIV> <\/BODY>  <\/HTML>\r           Make a new CSS file, style6.css. This stylesheet contains the document style. Copy and paste the content from here:  \r           \/*** XBL demonstration ***\/ #square {   -moz-binding: url(\"square.xbl#square\");   }\r           Make a new text file, square.xbl. This file contains the XBL binding. Copy and paste the content from here:  \r           <?xml version=\"1.0\"?> <!DOCTYPE bindings> <bindings xmlns=\"http:\/\/www.mozilla.org\/xbl\"           xmlns:xul=\"http:\/\/www.mozilla.org\/keymaster\/gatekeeper\/there.is.only.xul\"           xmlns:html=\"http:\/\/www.w3.org\/1999\/xhtml\">  <binding id=\"square\">    <resources>     <stylesheet src=\"bind6.css\"\/>     <\/resources>    <content>     <html:div anonid=\"square\"\/>     <xul:button anonid=\"button\" type=\"button\">       <children\/>       <\/xul:button>     <\/content>    <implementation>      <field name=\"square\"><![CDATA[       document.getAnonymousElementByAttribute(this, \"anonid\", \"square\")       ]]><\/field>      <field name=\"button\"><![CDATA[       document.getAnonymousElementByAttribute(this, \"anonid\", \"button\")       ]]><\/field>      <method name=\"doDemo\">       <body><![CDATA[         this.square.style.backgroundColor = \"#cf4\"         this.square.style.marginLeft = \"20em\"         this.button.setAttribute(\"disabled\", \"true\")         setTimeout(this.clearDemo, 2000, this)         ]]><\/body>       <\/method>      <method name=\"clearDemo\">       <parameter name=\"me\"\/>       <body><![CDATA[         me.square.style.backgroundColor = \"transparent\"         me.square.style.marginLeft = \"0\"         me.button.removeAttribute(\"disabled\")         ]]><\/body>       <\/method>      <\/implementation>    <handlers>     <handler event=\"click\" button=\"0\"><![CDATA[      if (event.originalTarget == this.button) this.doDemo()      ]]><\/handler>     <\/handlers>    <\/binding>  <\/bindings>\r           Make a new CSS file, bind6.css. This separate stylesheet contains style for the binding. Copy and paste the content from here:  \r           \/*** XBL demonstration ***\/ [anonid=\"square\"] {   width: 20em;   height: 20em;   border: 2px inset gray;   }  [anonid=\"button\"] {   margin-top: 1em;   padding: .5em 2em;   }\r           Open the document in your browser and press the button. This wiki does not support JavaScript in pages, so it is not possible to show the demonstration here. It looks something like this, before and after you press the button:         Notes about this demonstration:  The HTML document links the document stylesheet as usual, but it does not link any JavaScript code. The document does not contain any button. It only contains the text of the button's label. The button is added by the binding. The document stylesheet links the binding. The binding links its own stylesheet, and it supplies its own content and JavaScript code. So the binding is self-contained.    Challenges    Change the XBL file so that the square doubles in width when it changes color, instead of jumping to the right. Use the DOM Inspector tool to inspect the document, revealing the added content.    What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. In this demonstration, the square and the button make a self-contained widget that functions within an HTML document. Mozilla has a specialized markup language for creating user interfaces. The next page demonstrates it: XUL user interfaces     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/XUL_user_interfaces","title":"XUL user interfaces","description":"Information: User interfaces Although HTML has some support for user interfaces, it does not support all the features that you need to make a standalone application. Mozilla overcomes this limitation by providing a specialized language for creating user interfaces: XUL (XML User-interface Language, usually pronounced like \"zool\"). In XUL, many common user interface features are built in. For example, XUL provides specialized windows like dialogs and wizards, as well as status bars, menus, tool bars, and even browsers. More specialized features can be built from parts by using XUL together with other technologies that you have seen in this tutorial: CSS style, JavaScript code, and XBL bindings. Like other XML-based languages, XUL uses CSS stylesheets.  More details    For more information about XUL user interfaces, see the XUL page in this wiki.    Action: A XUL demonstration Make a new XUL document as a plain text file, doc7.xul. Copy and paste the content from here, making sure that you scroll to get all of it:   <?xml version=\"1.0\"?> <?xml-stylesheet type=\"text\/css\" href=\"style7.css\"?> <!DOCTYPE window>  <window   xmlns=\"http:\/\/www.mozilla.org\/keymaster\/gatekeeper\/there.is.only.xul\"   title=\"CSS Getting Started - XUL demonstration\"   onload=\"init();\">  <script type=\"application\/javascript\" src=\"script7.js\"\/>  <label class=\"head-1\" value=\"XUL demonstration\"\/>  <vbox>    <groupbox class=\"demo-group\">     <caption label=\"Day of week calculator\"\/>     <grid>       <columns>         <column\/>         <column\/>         <\/columns>       <rows>         <row>           <label class=\"text-prompt\" value=\"Date:\"              accesskey=\"D\" control=\"date-text\"\/>           <textbox id=\"date-text\" type=\"timed\"              timeout=\"750\" oncommand=\"refresh();\"\/>           <\/row>         <row>           <label value=\"Day:\"\/>           <hbox id=\"day-box\">             <label class=\"day\" value=\"Sunday\" disabled=\"true\"\/>             <label class=\"day\" value=\"Monday\" disabled=\"true\"\/>             <label class=\"day\" value=\"Tuesday\" disabled=\"true\"\/>             <label class=\"day\" value=\"Wednesday\" disabled=\"true\"\/>             <label class=\"day\" value=\"Thursday\" disabled=\"true\"\/>             <label class=\"day\" value=\"Friday\" disabled=\"true\"\/>             <label class=\"day\" value=\"Saturday\" disabled=\"true\"\/>             <\/hbox>           <\/row>         <\/rows>       <\/grid>     <hbox class=\"buttons\">       <button id=\"clear\" label=\"Clear\" accesskey=\"C\"          oncommand=\"clearDate();\"\/>       <button id=\"today\" label=\"Today\" accesskey=\"T\"         oncommand=\"setToday();\"\/>       <\/hbox>     <\/groupbox>    <statusbar>     <statusbarpanel id=\"status\"\/>     <\/statusbar>  <\/vbox>  <\/window>   Make a new CSS file, style7.css. Copy and paste the content from here, making sure that you scroll to get all of it:   \/*** XUL demonstration ***\/ window {   -moz-box-align: start;   background-color: -moz-dialog;   font: -moz-dialog;   padding: 2em;   }  .head-1 {   font-weight: bold;   font-size: 200%;   padding-left: 5px;   }   \/* the group box *\/ .demo-group {   padding: 1em;   }  .demo-group grid {   margin-bottom: 1em;   }  .demo-group column {   margin-right: .5em;   }  .demo-group row {   margin-bottom: .5em;   }  .demo-group .buttons {   -moz-box-pack: end;   }   \/* the day-of-week labels *\/ .day {   margin-left: 1em;   }  .day[disabled] {   color: #777;   }  .day:first-child {   margin-left: 4px;   }   \/* the left column labels *\/ .text-prompt {   padding-top: .25em;   }   \/* the date input box *\/ #date-text {   max-width: 8em;   }   \/* the status bar *\/ statusbar {   width: 100%;   border: 1px inset -moz-dialog;   margin: 4px;   padding: 0px 4px;   }  #status {   padding: 4px;   }  #status[warning] {   color: red;   }   Make a new text file, script7.js. Copy and paste the content from here, making sure that you scroll to get all of it:   \/\/ XUL demonstration  var dateBox, dayBox, currentDay, status; \/\/ elements  \/\/ called by window onLoad function init() {   dateBox = document.getElementById(\"date-text\")   dayBox = document.getElementById(\"day-box\")   status = document.getElementById(\"status\")   setToday();   }  \/\/ called by Clear button function clearDate() {   dateBox.value = \"\"   refresh()   }  \/\/ called by Today button function setToday() {   var d = new Date()   dateBox.value = (d.getMonth() + 1)     + \"\/\" + d.getDate()     + \"\/\" + d.getFullYear()   refresh()   }  \/\/ called by Date textbox function refresh() {   var d = dateBox.value   var theDate = null    showStatus(null)   if (d\u00a0!= \"\") {     try {       var a = d.split(\"\/\")       var theDate = new Date(a[2], a[0] - 1, a[1])       showStatus(theDate)       }     catch (ex) {}     }   setDay(theDate)   }  \/\/ internal function setDay(aDate) {   if (currentDay) currentDay.setAttribute(\"disabled\", \"true\")   if (aDate == null) currentDay = null   else {     var d = aDate.getDay()     currentDay = dayBox.firstChild     while (d-- > 0) currentDay = currentDay.nextSibling     currentDay.removeAttribute(\"disabled\")     }   dateBox.focus();   }  function showStatus(aDate) {   if (aDate == null) {     status.removeAttribute(\"warning\")     status.setAttribute(\"label\", \"\")     }   else if (aDate === false || isNaN(aDate.getTime())) {     status.setAttribute(\"warning\", \"true\")     status.setAttribute(\"label\", \"Date is not valid\")     }   else {     status.removeAttribute(\"warning\")     status.setAttribute(\"label\", aDate.toLocaleDateString())     }   }   To see the result exactly as intended, use the default theme in your browser. If you use a different theme, it changes some user-interface styles and the demonstration might look strange. Open the document in your Mozilla browser and use the interface. This wiki does not support XUL and JavaScript in pages, so it is not possible to show the demonstration here. It looks something like this:     XUL demonstration  Day of week calculator    Date: 6\/27\/2005   Day: Sunday Monday Tuesday Wednesday Thurdsay Friday Saturday   \u00a0   Clear Today        June 27, 2005      Notes about this demonstration:  The XUL document links the stylesheet as usual, and it also links the script. The script is not important in this demonstration. Much of the style that you see is determined by your browser's theme.  Examine the document's stylesheet to ensure that you understand all the rules there. If there is a rule that you do not understand, comment it out and refresh your browser to see the effect on the document.  Challenge    Use the DOM Inspector tool to examine the Date textbox. It is made up of other elements that are generated by its XBL binding. Discover the class of its html:input element. This is the element that actually receives user input. Using this knowledge, add a rule to the stylesheet that makes the background of the Date box pale blue when it has keyboard focus (but white when keyboard focus is somewhere else).     What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. In this demonstration, you see the standard rectangular shapes that are common to most user interfaces. Mozilla also supports a specialized graphics language for creating shapes, using CSS stylesheets to specify the style. The next page demonstrates this: SVG graphics     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0     What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. In this demonstration, you see the standard rectangular shapes that are common to most user interfaces. Mozilla also supports a specialized graphics language for creating shapes, using CSS stylesheets to specify the style. The next page demonstrates this: SVG graphics     CSS Getting Started Tutorial    Part I 1. What is CSS? > 2. Why use CSS? > 3. How CSS works > 4. Cascading and inheritance > 5. Selectors > 6. Readable CSS > 7. Text styles > 8. Color > 9. Content > 10. Lists > 11. Boxes > 12. Layout > 13. Tables > 14. Media    Part II 1. JavaScript > 2. SVG > 3. XML data > 4. XBL binding > 5. XUL user interfaces\u00a0"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Challenge_solutions","title":"Challenge solutions","description":"Why use CSS Colors  Challenge   Without looking up a reference, find five more color names that work in your stylesheet. Solution CSS\u00a0supports common color names like orange, yellow, blue, green, or black. It also supports some more exotic color names like chartreuse, fuschia, or burlywood. See CSS Color value for a complete list as well as other ways of specifying colors.  Colors  Challenge   Without looking up a reference, find five more color names that work in your stylesheet. Solution CSS\u00a0supports common color names like orange, yellow, blue, green, or black. It also supports some more exotic color names like chartreuse, fuschia, or burlywood. See CSS Color value for a complete list as well as other ways of specifying colors.  How CSS works DOM inspector  Challenge In DOMi, click on a STRONG node. Use DOMi's right-hand pane to find out where the node's color is set to red, and where its appearance is made bolder than normal text. Solution In the menu above the right-hand pane, choose CSS Rules.\u00a0 You see two items listed, one that references an internal resource and one that references your stylesheet file. The internal resource defines the font-weight property as bolder; your stylesheet defines the color property as red.  DOM inspector  Challenge In DOMi, click on a STRONG node. Use DOMi's right-hand pane to find out where the node's color is set to red, and where its appearance is made bolder than normal text. Solution In the menu above the right-hand pane, choose CSS Rules.\u00a0 You see two items listed, one that references an internal resource and one that references your stylesheet file. The internal resource defines the font-weight property as bolder; your stylesheet defines the color property as red.  Cascading and inheritance Inherited styles  Challenge Change your stylesheet so that only the red letters are underlined. Solution Move the declaration for underlining from the rule for <p>  to the one for <strong> . The resulting file looks like this: \r           p {color: blue; } strong {color: orange; text-decoration: underline;}\r            Later sections of this tutorial describe style rules and declarations in greater detail. Inherited styles  Challenge Change your stylesheet so that only the red letters are underlined. Solution Move the declaration for underlining from the rule for <p>  to the one for <strong> . The resulting file looks like this: \r           p {color: blue; } strong {color: orange; text-decoration: underline;}\r            Later sections of this tutorial describe style rules and declarations in greater detail. Selectors Second paragraph blue  Challenge Without changing your HTML file, add a single rule to your CSS file that keeps all the initial letters that same color as they are now, but makes all the other text in the second paragraph blue. Solution Add a rule with an ID selector of #second and a declaration color:\u00a0blue;, as shown below: \r           #second { color: blue; }\r          A more specific selector, p#second also works.  Both paragraphs blue  Challenge Now change the rule you have just added (without changing anything else), to make the first paragraph blue too. Solution Change the selector of the new rule to be a tag selector using p: \r           p { color: blue; }\r            The rules for the other colors all have more specific selectors, so they override the blue of the paragraph. Second paragraph blue  Challenge Without changing your HTML file, add a single rule to your CSS file that keeps all the initial letters that same color as they are now, but makes all the other text in the second paragraph blue. Solution Add a rule with an ID selector of #second and a declaration color:\u00a0blue;, as shown below: \r           #second { color: blue; }\r          A more specific selector, p#second also works.  Both paragraphs blue  Challenge Now change the rule you have just added (without changing anything else), to make the first paragraph blue too. Solution Change the selector of the new rule to be a tag selector using p: \r           p { color: blue; }\r            The rules for the other colors all have more specific selectors, so they override the blue of the paragraph. Readable CSS Commenting out a rule  Challenge Comment out part of your stylesheet, without changing anything else, to make the very first letter of your document red. Solution One way to do this is to put comment delimiters around the rule for .carrot: \r           \/* .carrot {   color: orange; } *\/\r            Commenting out a rule  Challenge Comment out part of your stylesheet, without changing anything else, to make the very first letter of your document red. Solution One way to do this is to put comment delimiters around the rule for .carrot: \r           \/* .carrot {   color: orange; } *\/\r            Text styles Big initial letters  Challenge Without changing anything else, make all six initial letters twice the size in the browser's default serif font. Solution Add the following style declaration to the strong rule: \r           font: 200% serif;\r          If you use separate declarations for font-size and font-family, then the font-style setting on the first paragraph is not overridden.  Big initial letters  Challenge Without changing anything else, make all six initial letters twice the size in the browser's default serif font. Solution Add the following style declaration to the strong rule: \r           font: 200% serif;\r          If you use separate declarations for font-size and font-family, then the font-style setting on the first paragraph is not overridden.  Color Three-digit color codes  Challenge In your CSS file, change all the color names to 3-digit color codes without affecting the result. Solution The following values are reasonable approximations of the named colors: \r           strong {   color: #f00; \/* red *\/   background-color: #ddf; \/* pale blue *\/   font: 200% serif; }  .carrot {   color: #fa0; \/* orange *\/ }  .spinach {   color: #080; \/* dark green *\/ }  p {   color: #00f; \/* blue *\/ }\r            Three-digit color codes  Challenge In your CSS file, change all the color names to 3-digit color codes without affecting the result. Solution The following values are reasonable approximations of the named colors: \r           strong {   color: #f00; \/* red *\/   background-color: #ddf; \/* pale blue *\/   font: 200% serif; }  .carrot {   color: #fa0; \/* orange *\/ }  .spinach {   color: #080; \/* dark green *\/ }  p {   color: #00f; \/* blue *\/ }\r            Content Add an image  Challenge Add a one rule to your stylesheet so that it displays the image at the start of each line. Solution Add this rule to your stylesheet: \r           p:before{   content: url(\"yellow-pin.png\"); }\r            Add an image  Challenge Add a one rule to your stylesheet so that it displays the image at the start of each line. Solution Add this rule to your stylesheet: \r           p:before{   content: url(\"yellow-pin.png\"); }\r            Lists Lower Roman numerals  Challenge Add a rule to your stylesheet, to number the oceans using Roman numerals from i to v. Solution Define a rule for list items to use the lower-roman list style: \r           li {   list-style: lower-roman; }\r            Capital letters  Challenge Change your stylesheet to identify the headings with capital letters in parentheses. Solution Add a rule to the body element (parent of the headings) to reset a new counter, and one to display and increment the counter on the headings: \r           \/* numbered headings *\/ body {counter-reset: headnum;} h3:before {   content: \"(\" counter(headnum, upper-latin) \") \";   counter-increment: headnum; }\r            Lower Roman numerals  Challenge Add a rule to your stylesheet, to number the oceans using Roman numerals from i to v. Solution Define a rule for list items to use the lower-roman list style: \r           li {   list-style: lower-roman; }\r            Capital letters  Challenge Change your stylesheet to identify the headings with capital letters in parentheses. Solution Add a rule to the body element (parent of the headings) to reset a new counter, and one to display and increment the counter on the headings: \r           \/* numbered headings *\/ body {counter-reset: headnum;} h3:before {   content: \"(\" counter(headnum, upper-latin) \") \";   counter-increment: headnum; }\r            Boxes Ocean border  Challenge Add one rule to your stylesheet, making a wide border all around the oceans in a color that reminds you of the sea. Solution The following rule achieves this effect: \r           ul {   border: 10px solid lightblue; }\r            Ocean border  Challenge Add one rule to your stylesheet, making a wide border all around the oceans in a color that reminds you of the sea. Solution The following rule achieves this effect: \r           ul {   border: 10px solid lightblue; }\r            Layout Default image position  Challenge Change your sample document, doc2.html, adding this tag to it near the end, just before <\/BODY>:  <IMG id=\"fixed-pin\" src=\"Yellow-pin.png\" alt=\"Yellow map pin\"> Predict where the image will appear in your document. Then refresh your browser to see if you were correct. Solution The image appears to the right of the second list.  Fixed image position Challenge Add a rule to your stylesheet that places the image in the top right of your document. Solution The following rule achieves the desired result:  #fixed-pin  {   position:fixed;   top: 3px;   right: 3px; }    Default image position  Challenge Change your sample document, doc2.html, adding this tag to it near the end, just before <\/BODY>:  <IMG id=\"fixed-pin\" src=\"Yellow-pin.png\" alt=\"Yellow map pin\"> Predict where the image will appear in your document. Then refresh your browser to see if you were correct. Solution The image appears to the right of the second list.  Fixed image position Challenge Add a rule to your stylesheet that places the image in the top right of your document. Solution The following rule achieves the desired result:  #fixed-pin  {   position:fixed;   top: 3px;   right: 3px; }    Fixed image position Challenge Add a rule to your stylesheet that places the image in the top right of your document. Solution The following rule achieves the desired result:  #fixed-pin  {   position:fixed;   top: 3px;   right: 3px; }   Tables Borders on data cells only  Challenge Change the stylesheet to make the table have a green border around only the data cells. Solution The following rule puts borders around only <td>  elements that are inside the <tbody>  element of the table with id=demo-table:  #demo-table tbody td {   border:1px solid #7a7; }    Borders on data cells only  Challenge Change the stylesheet to make the table have a green border around only the data cells. Solution The following rule puts borders around only <td>  elements that are inside the <tbody>  element of the table with id=demo-table:  #demo-table tbody td {   border:1px solid #7a7; }    Media Separate print style file  Challenge Move the print-specific style rules to a separate CSS file and import them into your style4.css stylesheet. Solution Cut and paste the lines between \/* print only *\/ and \/* end print only *\/ into a file named style4_print.css. In style4.css, add the following line at the beginning of the file:  @import url(\"style4_print.css\") print;    Heading hover color  Challenge Make the headings turn blue when the mouse pointer is over them. Solution The following rule achieves the desired result:  h1:hover {   color: blue; }    Separate print style file  Challenge Move the print-specific style rules to a separate CSS file and import them into your style4.css stylesheet. Solution Cut and paste the lines between \/* print only *\/ and \/* end print only *\/ into a file named style4_print.css. In style4.css, add the following line at the beginning of the file:  @import url(\"style4_print.css\") print;    Heading hover color  Challenge Make the headings turn blue when the mouse pointer is over them. Solution The following rule achieves the desired result:  h1:hover {   color: blue; }    JavaScript Move box to the right  Challenge Change the script so that the square jumps to the right by 20 em when its color changes, and jumps back afterwards. Solution Add lines to modify the margin-left property. Be sure to specify it as marginLeft in JavaScript. The following script achieves the desired result: \r           \/\/ JavaScript demonstration function doDemo (button) {   var square = document.getElementById(\"square\");   square.style.backgroundColor = \"#fa4\";   square.style.marginLeft = \"20em\";   button.setAttribute(\"disabled\", \"true\");   setTimeout(clearDemo, 2000, button); }  function clearDemo (button) {   var square = document.getElementById(\"square\");   square.style.backgroundColor = \"transparent\";   square.style.marginLeft = \"0em\";   button.removeAttribute(\"disabled\"); }\r           Move box to the right  Challenge Change the script so that the square jumps to the right by 20 em when its color changes, and jumps back afterwards. Solution Add lines to modify the margin-left property. Be sure to specify it as marginLeft in JavaScript. The following script achieves the desired result: \r           \/\/ JavaScript demonstration function doDemo (button) {   var square = document.getElementById(\"square\");   square.style.backgroundColor = \"#fa4\";   square.style.marginLeft = \"20em\";   button.setAttribute(\"disabled\", \"true\");   setTimeout(clearDemo, 2000, button); }  function clearDemo (button) {   var square = document.getElementById(\"square\");   square.style.backgroundColor = \"transparent\";   square.style.marginLeft = \"0em\";   button.removeAttribute(\"disabled\"); }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Why_use_CSS%3F","title":"Why use CSS?","description":"Information: Why use CSS? CSS helps you to keep the information content of a document separate from the details of how to display it. The details of how to display the document are known as its style. You keep the style separate from the content so that you can:  Avoid duplication Make maintenance easier Use the same content with different styles for different purposes   Example    Your web site might have thousands of pages that look similar. Using CSS, you store the style information in common files that all the pages share. When a user displays a web page, the user's browser loads the style information along with the content of the page. When a user prints a web page, you provide different style information that makes the printed page easy to read.     In general with CSS, you use the markup language to describe the information content of the document, not its style. You use CSS to specify its style, not its content. (Later in this tutorial, you will see some exceptions to this arrangement.)  More details    A markup language like HTML also provides some ways to specify style. For example, in HTML you can use a <B> tag to make text bold, and you can specify the background color of a page in it's <BODY> tag. When you use CSS, you normally avoid using these features of the markup language so that all your document's style information is in one place.     Action: Creating a stylesheet  Create another text file in the same directory as before. This file will be your stylesheet. Name it: style1.css In your CSS file, copy and paste this one line, then save the file:  strong {color: red;}    Linking your document to your stylesheet  To link your document to your stylesheet, edit your HTML file. Add the line shown here in bold:  <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\"> <HTML>   <HEAD>   <TITLE>Sample document<\/TITLE>   <LINK rel=\"stylesheet\" href=\"style1.css\">   <\/HEAD>   <BODY>     <P>       <STRONG>C<\/STRONG>ascading       <STRONG>S<\/STRONG>tyle       <STRONG>S<\/STRONG>heets     <\/P>   <\/BODY> <\/HTML>   Save the file and refresh your browser's display. The stylesheet makes the initial letters red, like this:    Cascading Style Sheets     Challenge    In addition to red, CSS allows some other color names. Without looking up a reference, find five more color names that work in your stylesheet.       Linking your document to your stylesheet  To link your document to your stylesheet, edit your HTML file. Add the line shown here in bold:  <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\"> <HTML>   <HEAD>   <TITLE>Sample document<\/TITLE>   <LINK rel=\"stylesheet\" href=\"style1.css\">   <\/HEAD>   <BODY>     <P>       <STRONG>C<\/STRONG>ascading       <STRONG>S<\/STRONG>tyle       <STRONG>S<\/STRONG>heets     <\/P>   <\/BODY> <\/HTML>   Save the file and refresh your browser's display. The stylesheet makes the initial letters red, like this:    Cascading Style Sheets     Challenge    In addition to red, CSS allows some other color names. Without looking up a reference, find five more color names that work in your stylesheet.       What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. Now you have a sample document linked to a separate stylesheet, you are ready to learn more about how your browser combines them when it displays the document: How CSS works"}]
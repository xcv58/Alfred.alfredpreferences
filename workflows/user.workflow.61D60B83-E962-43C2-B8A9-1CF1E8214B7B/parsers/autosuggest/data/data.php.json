[{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-import.php","title":"classkit_import","description":"classkit_import   (PECL classkit >= 0.3)classkit_import \u2014 Import new class method definitions from a file        Description       array classkit_import     ( string $filename    )    Note: This function cannot be used to manipulate the currently running (or chained) method.    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    filename                      The filename of the class method definitions to import                                    Return Values       Associative array of imported methods             Examples            Example #1 classkit_import() example       <?php\/\/\u00a0file:\u00a0newclass.phpclass\u00a0Example\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"bar!\\n\";\u00a0\u00a0\u00a0\u00a0}}?>               <?php\/\/\u00a0requires\u00a0newclass.php\u00a0(see\u00a0above)class\u00a0Example\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"foo!\\n\";\u00a0\u00a0\u00a0\u00a0}}$e\u00a0=\u00a0new\u00a0Example();\/\/\u00a0output\u00a0originalecho\u00a0$e->foo();\/\/\u00a0import\u00a0replacement\u00a0methodclasskit_import('newclass.php');\/\/\u00a0output\u00a0importedecho\u00a0$e->foo();?>             The above example will output:       foo! bar!                       See Also            classkit_method_add() - Dynamically adds a new method to a given class     classkit_method_copy() - Copies a method from class to another"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-add.php","title":"classkit_method_add","description":"classkit_method_add   (PECL classkit >= 0.1)classkit_method_add \u2014 Dynamically adds a new method to a given class        Description       bool classkit_method_add     ( string $classname    , string $methodname    , string $args    , string $code    [, int $flags = CLASSKIT_ACC_PUBLIC   ] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    classname                      The class to which this method will be added                                methodname                      The name of the method to add                                args                      Comma-delimited list of arguments for the newly-created method                                code                      The code to be evaluated when methodname        is called                                flags                      The type of method to create, can be        CLASSKIT_ACC_PUBLIC,        CLASSKIT_ACC_PROTECTED or        CLASSKIT_ACC_PRIVATE              Note:                  This parameter is only used as of PHP 5, because, prior to this,         all methods were public.                                            Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 classkit_method_add() example       <?phpclass\u00a0Example\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"foo!\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0create\u00a0an\u00a0Example\u00a0object$e\u00a0=\u00a0new\u00a0Example();\/\/\u00a0Add\u00a0a\u00a0new\u00a0public\u00a0methodclasskit_method_add(\u00a0\u00a0\u00a0\u00a0'Example',\u00a0\u00a0\u00a0\u00a0'add',\u00a0\u00a0\u00a0\u00a0'$num1,\u00a0$num2',\u00a0\u00a0\u00a0\u00a0'return\u00a0$num1\u00a0+\u00a0$num2;',\u00a0\u00a0\u00a0\u00a0CLASSKIT_ACC_PUBLIC);\/\/\u00a0add\u00a012\u00a0+\u00a04echo\u00a0$e->add(12,\u00a04);?>             The above example will output:       16                     See Also            classkit_method_copy() - Copies a method from class to another     classkit_method_redefine() - Dynamically changes the code of the given method     classkit_method_remove() - Dynamically removes the given method     classkit_method_rename() - Dynamically changes the name of the given method     create_function() - Create an anonymous (lambda-style) function"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-copy.php","title":"classkit_method_copy","description":"classkit_method_copy   (PECL classkit >= 0.2)classkit_method_copy \u2014 Copies a method from class to another        Description       bool classkit_method_copy     ( string $dClass    , string $dMethod    , string $sClass    [, string $sMethod   ] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    dClass                      Destination class for copied method                                dMethod                      Destination method name                                sClass                      Source class of the method to copy                                sMethod                      Name of the method to copy from the source class. If this parameter is        omitted, the value of dMethod is assumed.                                    Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 classkit_method_copy() example       <?phpclass\u00a0Foo\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0example()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"foo!\\n\";\u00a0\u00a0\u00a0\u00a0}}class\u00a0Bar\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0initially,\u00a0no\u00a0methods}\/\/\u00a0copy\u00a0the\u00a0example()\u00a0method\u00a0from\u00a0the\u00a0Foo\u00a0class\u00a0to\u00a0the\u00a0Bar\u00a0class,\u00a0as\u00a0baz()classkit_method_copy('Bar',\u00a0'baz',\u00a0'Foo',\u00a0'example');\/\/\u00a0output\u00a0copied\u00a0functionecho\u00a0Bar::baz();?>             The above example will output:       foo!                     See Also            classkit_method_add() - Dynamically adds a new method to a given class     classkit_method_redefine() - Dynamically changes the code of the given method     classkit_method_remove() - Dynamically removes the given method     classkit_method_rename() - Dynamically changes the name of the given method"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-redefine.php","title":"classkit_method_redefine","description":"classkit_method_redefine   (PECL classkit >= 0.1)classkit_method_redefine \u2014 Dynamically changes the code of the given method        Description       bool classkit_method_redefine     ( string $classname    , string $methodname    , string $args    , string $code    [, int $flags = CLASSKIT_ACC_PUBLIC   ] )    Note: This function cannot be used to manipulate the currently running (or chained) method.    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    classname                      The class in which to redefine the method                                methodname                      The name of the method to redefine                                args                      Comma-delimited list of arguments for the redefined method                                code                      The new code to be evaluated when methodname        is called                                flags                      The redefined method can be        CLASSKIT_ACC_PUBLIC,        CLASSKIT_ACC_PROTECTED or        CLASSKIT_ACC_PRIVATE              Note:                  This parameter is only used as of PHP 5, because, prior to this,         all methods were public.                                            Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 classkit_method_redefine() example       <?phpclass\u00a0Example\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"foo!\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0create\u00a0an\u00a0Example\u00a0object$e\u00a0=\u00a0new\u00a0Example();\/\/\u00a0output\u00a0Example::foo()\u00a0(before\u00a0redefine)echo\u00a0\"Before:\u00a0\"\u00a0.\u00a0$e->foo();\/\/\u00a0Redefine\u00a0the\u00a0'foo'\u00a0methodclasskit_method_redefine(\u00a0\u00a0\u00a0\u00a0'Example',\u00a0\u00a0\u00a0\u00a0'foo',\u00a0\u00a0\u00a0\u00a0'',\u00a0\u00a0\u00a0\u00a0'return\u00a0\"bar!\\n\";',\u00a0\u00a0\u00a0\u00a0CLASSKIT_ACC_PUBLIC);\/\/\u00a0output\u00a0Example::foo()\u00a0(after\u00a0redefine)echo\u00a0\"After:\u00a0\"\u00a0.\u00a0$e->foo();?>             The above example will output:       Before: foo! After: bar!                     See Also            classkit_method_add() - Dynamically adds a new method to a given class     classkit_method_copy() - Copies a method from class to another     classkit_method_remove() - Dynamically removes the given method     classkit_method_rename() - Dynamically changes the name of the given method"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-remove.php","title":"classkit_method_remove","description":"classkit_method_remove   (PECL classkit >= 0.1)classkit_method_remove \u2014 Dynamically removes the given method        Description       bool classkit_method_remove     ( string $classname    , string $methodname    )    Note: This function cannot be used to manipulate the currently running (or chained) method.    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    classname                      The class in which to remove the method                                methodname                      The name of the method to remove                                    Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 classkit_method_remove() example       <?phpclass\u00a0Example\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"foo!\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function\u00a0bar()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"bar!\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Remove\u00a0the\u00a0'foo'\u00a0methodclasskit_method_remove(\u00a0\u00a0\u00a0\u00a0'Example',\u00a0\u00a0\u00a0\u00a0'foo');echo\u00a0implode('\u00a0',\u00a0get_class_methods('Example'));?>             The above example will output:       bar                     See Also            classkit_method_add() - Dynamically adds a new method to a given class     classkit_method_copy() - Copies a method from class to another     classkit_method_redefine() - Dynamically changes the code of the given method     classkit_method_rename() - Dynamically changes the name of the given method"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-rename.php","title":"classkit_method_rename","description":"classkit_method_rename   (PECL classkit >= 0.1)classkit_method_rename \u2014 Dynamically changes the name of the given method        Description       bool classkit_method_rename     ( string $classname    , string $methodname    , string $newname    )    Note: This function cannot be used to manipulate the currently running (or chained) method.    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    classname                      The class in which to rename the method                                methodname                      The name of the method to rename                                newname                      The new name to give to the renamed method                                    Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 classkit_method_rename() example       <?phpclass\u00a0Example\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"foo!\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Rename\u00a0the\u00a0'foo'\u00a0method\u00a0to\u00a0'bar'classkit_method_rename(\u00a0\u00a0\u00a0\u00a0'Example',\u00a0\u00a0\u00a0\u00a0'foo',\u00a0\u00a0\u00a0\u00a0'bar');\/\/\u00a0output\u00a0renamed\u00a0functionecho\u00a0Example::bar();?>             The above example will output:       foo!                     See Also            classkit_method_add() - Dynamically adds a new method to a given class     classkit_method_copy() - Copies a method from class to another     classkit_method_redefine() - Dynamically changes the code of the given method     classkit_method_remove() - Dynamically removes the given method"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-from-jd.php","title":"cal_from_jd","description":"cal_from_jd   (PHP 4 >= 4.1.0, PHP 5)cal_from_jd \u2014 Converts from Julian Day Count to a supported calendar         Description       array cal_from_jd     ( int $jd    , int $calendar    )        cal_from_jd() converts the Julian day given in    jd into a date of the specified    calendar. Supported    calendar values are    CAL_GREGORIAN,    CAL_JULIAN,    CAL_JEWISH and    CAL_FRENCH.            Parameters                    jd                      Julian day as integer                                calendar                      Calendar to convert to                                     Return Values       Returns an array containing calendar information like month, day, year,    day of week, abbreviated and full names of weekday and month and the    date in string form \"month\/day\/year\".            Examples            Example #1 cal_from_jd() example       <?php$today\u00a0=\u00a0unixtojd(mktime(0,\u00a00,\u00a00,\u00a08,\u00a016,\u00a02003));print_r(cal_from_jd($today,\u00a0CAL_GREGORIAN));?>             The above example will output:       Array (     [date] => 8\/16\/2003     [month] => 8     [day] => 16     [year] => 2003     [dow] => 6     [abbrevdayname] => Sat     [dayname] => Saturday     [abbrevmonth] => Aug     [monthname] => August )                      See Also            cal_to_jd() - Converts from a supported calendar to Julian Day Count     jdtofrench() - Converts a Julian Day Count to the French Republican Calendar       jdtogregorian() - Converts Julian Day Count to Gregorian date     jdtojewish() - Converts a Julian day count to a Jewish calendar date       jdtojulian() - Converts a Julian Day Count to a Julian Calendar Date     jdtounix() - Convert Julian Day to Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-info.php","title":"cal_info","description":"cal_info   (PHP 4 >= 4.1.0, PHP 5)cal_info \u2014 Returns information about a particular calendar         Description       array cal_info     ([ int $calendar = -1   ] )        cal_info() returns information on the    specified calendar.          Calendar information is returned as an array containing the    elements calname, calsymbol,    month, abbrevmonth and    maxdaysinmonth. The names of the different calendars     which can be used as calendar are as follows:                      0 or CAL_GREGORIAN - Gregorian Calendar                             1 or CAL_JULIAN - Julian Calendar                             2 or CAL_JEWISH - Jewish Calendar                             3 or CAL_FRENCH - French Revolutionary Calendar                         If no calendar is specified information on all    supported calendars is returned as an array.             Parameters                    calendar                      Calendar to return information for. If no calendar is specified        information about all calendars is returned.                                     Return Values               Changelog                                 Version        Description                                    5.0.0                 The calendar parameter becomes optional         and defaults to \"all calendars\" if omitted.                                            Examples            Example #1 cal_info() example       <?php$info\u00a0=\u00a0cal_info(0);print_r($info);?>             The above example will output:       Array (     [months] => Array         (             [1] => January             [2] => February             [3] => March             [4] => April             [5] => May             [6] => June             [7] => July             [8] => August             [9] => September             [10] => October             [11] => November             [12] => December         )      [abbrevmonths] => Array         (             [1] => Jan             [2] => Feb             [3] => Mar             [4] => Apr             [5] => May             [6] => Jun             [7] => Jul             [8] => Aug             [9] => Sep             [10] => Oct             [11] => Nov             [12] => Dec         )      [maxdaysinmonth] => 31     [calname] => Gregorian     [calsymbol] => CAL_GREGORIAN )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-to-jd.php","title":"cal_to_jd","description":"cal_to_jd   (PHP 4 >= 4.1.0, PHP 5)cal_to_jd \u2014 Converts from a supported calendar to Julian Day Count         Description       int cal_to_jd     ( int $calendar    , int $month    , int $day    , int $year    )        cal_to_jd() calculates the Julian day count    for a date in the specified calendar.    Supported calendars are    CAL_GREGORIAN,    CAL_JULIAN,    CAL_JEWISH and    CAL_FRENCH.            Parameters                    calendar                      Calendar to convert from, one of         CAL_GREGORIAN,        CAL_JULIAN,        CAL_JEWISH or        CAL_FRENCH.                                month                      The month as a number, the valid range depends         on the calendar                                day                      The day as a number, the valid range depends         on the calendar                                year                      The year as a number, the valid range depends         on the calendar                                       Return Values       A Julian Day number.            See Also            cal_from_jd() - Converts from Julian Day Count to a supported calendar     frenchtojd() - Converts a date from the French Republican Calendar to a Julian Day Count      gregoriantojd() - Converts a Gregorian date to Julian Day Count       jewishtojd() - Converts a date in the Jewish Calendar to Julian Day Count       juliantojd() - Converts a Julian Calendar date to Julian Day Count       unixtojd() - Convert Unix timestamp to Julian Day"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-days-in-month.php","title":"cal_days_in_month","description":"cal_days_in_month   (PHP 4 >= 4.1.0, PHP 5)cal_days_in_month \u2014 Return the number of days in a month for a given year and calendar         Description       int cal_days_in_month     ( int $calendar    , int $month    , int $year    )        This function will return the number of days in the    month of year for    the specified calendar.            Parameters                    calendar                      Calendar to use for calculation                                month                      Month in the selected calendar                                year                      Year in the selected calendar                                     Return Values       The length in days of the selected month in the given calendar            Examples            Example #1 cal_days_in_month() example       <?php$num\u00a0=\u00a0cal_days_in_month(CAL_GREGORIAN,\u00a08,\u00a02003);\u00a0\/\/\u00a031echo\u00a0\"There\u00a0was\u00a0$num\u00a0days\u00a0in\u00a0August\u00a02003\";?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.frenchtojd.php","title":"FrenchToJD","description":"FrenchToJD   (PHP 4, PHP 5)FrenchToJD \u2014 Converts a date from the French Republican Calendar to a Julian Day Count         Description       int frenchtojd     ( int $month    , int $day    , int $year    )        Converts a date from the French Republican Calendar to a Julian    Day Count.          These routines only convert dates in years 1 through 14    (Gregorian dates 22 September 1792 through 22 September    1806). This more than covers the period when the calendar was in    use.            Parameters                    month                      The month as a number from 1 (for Vend\u00e9miaire) to 13 (for the period of 5-6 days at the end of each year)                                day                      The day as a number from 1 to 30                                year                      The year as a number between 1 and 14                                       Return Values       The julian day for the given french revolution date as an integer.            See Also            jdtofrench() - Converts a Julian Day Count to the French Republican Calendar      cal_to_jd() - Converts from a supported calendar to Julian Day Count"},{"url":"http:\/\/www.php.net\/manual\/en\/function.easter-days.php","title":"easter_days","description":"easter_days   (PHP 4, PHP 5)easter_days \u2014 Get number of days after March 21 on which Easter falls for a given year         Description       int easter_days     ([ int $year    [, int $method = CAL_EASTER_DEFAULT   ]] )        Returns the number of days after March 21 on which Easter falls    for a given year. If no year is specified, the current year is    assumed.          This function can be used instead of    easter_date() to calculate Easter for years    which fall outside the range of Unix timestamps (i.e. before 1970    or after 2037).          The date of Easter Day was defined by the Council of Nicaea in    AD325 as the Sunday after the first full moon which falls on or    after the Spring Equinox.  The Equinox is assumed to always fall    on 21st March, so the calculation reduces to determining the date    of the full moon and the date of the following Sunday.  The    algorithm used here was introduced around the year 532 by    Dionysius Exiguus.  Under the Julian Calendar (for years before    1753) a simple 19-year cycle is used to track the phases of the    Moon.  Under the Gregorian Calendar (for years after 1753 -    devised by Clavius and Lilius, and introduced by Pope Gregory    XIII in October 1582, and into Britain and its then colonies in    September 1752) two correction factors are added to make the    cycle more accurate.            Parameters                    year                      The year as a positive number                                  method                      Allows to calculate easter dates based        on the Gregorian calendar during the years 1582 - 1752 when set to        CAL_EASTER_ROMAN. See the calendar constants for more valid        constants.                                              Return Values       The number of days after March 21st that the Easter Sunday    is in the given year.            Changelog                                 Version        Description                                    Since 4.3.0                 The year parameter is optional and defaults         to the current year according to the local time if omitted.                               Since 4.3.0                 The method parameter was introduced.                                            Examples            Example #1 easter_days() example       <?phpecho\u00a0easter_days(1999);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a014,\u00a0i.e.\u00a0April\u00a04echo\u00a0easter_days(1492);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a032,\u00a0i.e.\u00a0April\u00a022echo\u00a0easter_days(1913);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\u00a02,\u00a0i.e.\u00a0March\u00a023?>                        See Also            easter_date() - Get Unix timestamp for midnight on Easter of a given year"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gregoriantojd.php","title":"GregorianToJD","description":"GregorianToJD    (PHP 4, PHP 5)GregorianToJD \u2014 Converts a Gregorian date to Julian Day Count         Description       int gregoriantojd     ( int $month    , int $day    , int $year    )        Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.       Although this function can handle dates all the way back to 4714    B.C., such use may not be meaningful. The Gregorian calendar was    not instituted until October 15, 1582 (or October 5, 1582 in the    Julian calendar). Some countries did not accept it until much    later. For example, Britain converted in 1752, The USSR in 1918    and Greece in 1923. Most European countries used the Julian    calendar prior to the Gregorian.            Parameters                    month                      The month as a number from 1 (for January) to 12 (for December)                                day                      The day as a number from 1 to 31                                year                      The year as a number between -4714 and 9999                                       Return Values       The julian day for the given gregorian date as an integer.            Examples            Example #1 Calendar functions       <?php$jd\u00a0=\u00a0GregorianToJD(10,\u00a011,\u00a01970);echo\u00a0\"$jd\\n\";$gregorian\u00a0=\u00a0JDToGregorian($jd);echo\u00a0\"$gregorian\\n\";?>                        See Also            jdtogregorian() - Converts Julian Day Count to Gregorian date      cal_to_jd() - Converts from a supported calendar to Julian Day Count"},{"url":"http:\/\/www.php.net\/manual\/en\/function.easter-date.php","title":"easter_date","description":"easter_date   (PHP 4, PHP 5)easter_date \u2014 Get Unix timestamp for midnight on Easter of a given year         Description       int easter_date     ([ int $year   ] )        Returns the Unix timestamp corresponding to midnight on Easter of    the given year.      Warning         This function will generate a warning if the year is outside     of the range for Unix timestamps (i.e. before 1970 or after 2037).              The date of Easter Day was defined by the Council of Nicaea in    AD325 as the Sunday after the first full moon which falls on or    after the Spring Equinox.  The Equinox is assumed to always fall    on 21st March, so the calculation reduces to determining the date    of the full moon and the date of the following Sunday.  The    algorithm used here was introduced around the year 532 by    Dionysius Exiguus.  Under the Julian Calendar (for years before    1753) a simple 19-year cycle is used to track the phases of the    Moon.  Under the Gregorian Calendar (for years after 1753 -    devised by Clavius and Lilius, and introduced by Pope Gregory    XIII in October 1582, and into Britain and its then colonies in    September 1752) two correction factors are added to make the    cycle more accurate.            Parameters                    year                      The year as a number between 1970 an 2037                                       Return Values       The easter date as a unix timestamp.            Changelog                                 Version        Description                                    Since 4.3.0                 The year parameter is optional and defaults         to the current year according to the local time if omitted.                                            Examples            Example #1 easter_date() example       <?phpecho\u00a0date(\"M-d-Y\",\u00a0easter_date(1999));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Apr-04-1999echo\u00a0date(\"M-d-Y\",\u00a0easter_date(2000));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Apr-23-2000echo\u00a0date(\"M-d-Y\",\u00a0easter_date(2001));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Apr-15-2001?>                        See Also                  easter_days() - Get number of days after March 21 on which Easter falls for a given year for calculating Easter       before 1970 or after 2037"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jddayofweek.php","title":"JDDayOfWeek","description":"JDDayOfWeek   (PHP 4, PHP 5)JDDayOfWeek \u2014 Returns the day of the week         Description       mixed jddayofweek     ( int $julianday    [, int $mode = CAL_DOW_DAYNO   ] )        Returns the day of the week.  Can return a string or an integer    depending on the mode.            Parameters                    julianday                      A julian day number as integer                                mode                      Calendar week modes                                      Mode           Meaning                                                   0 (Default)                        Return the day number as an int (0=Sunday, 1=Monday, etc)                                           1                        Returns string containing the day of week            (English-Gregorian)                                           2                        Return a string containing the abbreviated day of week            (English-Gregorian)                                                                             Return Values       The gregorian weekday as either an integer or string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdmonthname.php","title":"JDMonthName","description":"JDMonthName   (PHP 4, PHP 5)JDMonthName \u2014 Returns a month name         Description       string jdmonthname     ( int $julianday    , int $mode    )        Returns a string containing a month name.    mode tells this function which calendar to    convert the Julian Day Count to, and what type of month names are    to be returned.         Calendar modes                          Mode        Meaning        Values                                    0        Gregorian - abbreviated        Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec                       1        Gregorian        January, February, March, April, May, June, July, August, September, October, November, December                       2        Julian - abbreviated        Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec                       3        Julian        January, February, March, April, May, June, July, August, September, October, November, December                       4        Jewish        Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul                       5        French Republican        Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra                                    Parameters                    jday                      The Julian Day to operate on                                calendar                      The calendar to take the month name from                                     Return Values       The month name for the given Julian Day and calendar."},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtofrench.php","title":"JDToFrench","description":"JDToFrench   (PHP 4, PHP 5)JDToFrench \u2014 Converts a Julian Day Count to the French Republican Calendar        Description       string jdtofrench     ( int $juliandaycount    )        Converts a Julian Day Count to the French Republican Calendar.            Parameters                    julianday                      A julian day number as integer                                     Return Values       The french revolution date as a string in the form \"month\/day\/year\"            See Also            frenchtojd() - Converts a date from the French Republican Calendar to a Julian Day Count      cal_from_jd() - Converts from Julian Day Count to a supported calendar"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtojewish.php","title":"jdtojewish","description":"jdtojewish   (PHP 4, PHP 5)jdtojewish \u2014 Converts a Julian day count to a Jewish calendar date        Description       string jdtojewish     ( int $juliandaycount    [, bool $hebrew = false    [, int $fl = 0   ]] )        Converts a Julian Day Count to the Jewish Calendar.            Parameters                    julianday                      A julian day number as integer                                hebrew                      If the hebrew parameter is set to TRUE, the        fl parameter is used for Hebrew, string based,        output format.                                  fl                      The available formats are:          CAL_JEWISH_ADD_ALAFIM_GERESH,        CAL_JEWISH_ADD_ALAFIM,        CAL_JEWISH_ADD_GERESHAYIM.                                     Return Values       The jewish date as a string in the form \"month\/day\/year\"            Changelog                                 Version        Description                                    5.0.0                 The fl parameter was added.                               4.3.0                 The hebrew parameter was added.                                            Examples            Example #1 jdtojewish() Example       <?phpecho\u00a0jdtojewish(gregoriantojd(10,\u00a08,\u00a02002),\u00a0true,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CAL_JEWISH_ADD_GERESHAYIM\u00a0+\u00a0CAL_JEWISH_ADD_ALAFIM\u00a0+\u00a0CAL_JEWISH_ADD_ALAFIM_GERESH);\u00a0?>                        See Also            jewishtojd() - Converts a date in the Jewish Calendar to Julian Day Count      cal_from_jd() - Converts from Julian Day Count to a supported calendar"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtojulian.php","title":"JDToJulian","description":"JDToJulian    (PHP 4, PHP 5)JDToJulian \u2014 Converts a Julian Day Count to a Julian Calendar Date         Description       string jdtojulian     ( int $julianday    )        Converts Julian Day Count to a string containing the Julian    Calendar Date in the format of \"month\/day\/year\".            Parameters                    julianday                      A julian day number as integer                                     Return Values       The julian date as a string in the form \"month\/day\/year\"            See Also            juliantojd() - Converts a Julian Calendar date to Julian Day Count      cal_from_jd() - Converts from Julian Day Count to a supported calendar"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtogregorian.php","title":"JDToGregorian","description":"JDToGregorian   (PHP 4, PHP 5)JDToGregorian \u2014 Converts Julian Day Count to Gregorian date        Description       string jdtogregorian     ( int $julianday    )        Converts Julian Day Count to a string containing the Gregorian    date in the format of \"month\/day\/year\".            Parameters                    julianday                      A julian day number as integer                                     Return Values       The gregorian date as a string in the form \"month\/day\/year\"            See Also            gregoriantojd() - Converts a Gregorian date to Julian Day Count      cal_from_jd() - Converts from Julian Day Count to a supported calendar"},{"url":"http:\/\/www.php.net\/manual\/en\/function.juliantojd.php","title":"JulianToJD","description":"JulianToJD    (PHP 4, PHP 5)JulianToJD \u2014 Converts a Julian Calendar date to Julian Day Count        Description       int juliantojd     ( int $month    , int $day    , int $year    )        Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.          Although this function can handle dates all the way back to 4713    B.C., such use may not be meaningful. The calendar was created in    46 B.C., but the details did not stabilize until at least 8 A.D.,    and perhaps as late at the 4th century. Also, the beginning of a    year varied from one culture to another - not all accepted    January as the first month.      Caution         Remember, the current calendar system being used worldwide is the     Gregorian calendar.  gregoriantojd() can be used to     convert such dates to their Julian Day count.                Parameters                    month                      The month as a number from 1 (for January) to 12 (for December)                                day                      The day as a number from 1 to 31                                year                      The year as a number between -4713 and 9999                                       Return Values       The julian day for the given julian date as an integer.            See Also            jdtojulian() - Converts a Julian Day Count to a Julian Calendar Date      cal_to_jd() - Converts from a supported calendar to Julian Day Count"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jewishtojd.php","title":"JewishToJD","description":"JewishToJD    (PHP 4, PHP 5)JewishToJD \u2014 Converts a date in the Jewish Calendar to Julian Day Count        Description       int jewishtojd     ( int $month    , int $day    , int $year    )        Although this function can handle dates all the way back to the year 1    (3761 B.C.), such use may not be meaningful.  The Jewish calendar has    been in use for several thousand years, but in the early days there was    no formula to determine the start of a month. A new month was started    when the new moon was first observed.            Parameters                    month                      The month as a number from 1 to 13                                day                      The day as a number from 1 to 30                                year                      The year as a number between 1 and 9999                                       Return Values       The julian day for the given jewish date as an integer.            See Also            jdtojewish() - Converts a Julian day count to a Jewish calendar date      cal_to_jd() - Converts from a supported calendar to Julian Day Count"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtounix.php","title":"jdtounix","description":"jdtounix   (PHP 4, PHP 5)jdtounix \u2014 Convert Julian Day to Unix timestamp         Description       int jdtounix     ( int $jday    )        This function will return a Unix timestamp corresponding to the    Julian Day given in jday or FALSE if    jday is not inside the Unix epoch    (Gregorian years between 1970 and 2037 or 2440588 <=    jday <= 2465342 ). The time returned is    localtime (and not GMT).            Parameters                    jday                      A julian day number between 2440588 and 2465342.                                     Return Values       The unix timestamp for the start of the given julian day.            See Also            unixtojd() - Convert Unix timestamp to Julian Day"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unixtojd.php","title":"unixtojd","description":"unixtojd   (PHP 4, PHP 5)unixtojd \u2014 Convert Unix timestamp to Julian Day         Description       int unixtojd     ([ int $timestamp = time()   ] )        Return the Julian Day for a Unix timestamp    (seconds since 1.1.1970), or for the current day if no    timestamp is given.            Parameters                    timestamp                      A unix timestamp to convert.                                     Return Values       A julian day number as integer.            See Also            jdtounix() - Convert Julian Day to Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-child-terminate.php","title":"apache_child_terminate","description":"apache_child_terminate   (PHP 4 >= 4.0.5, PHP 5)apache_child_terminate \u2014 Terminate apache process after this request         Description       bool apache_child_terminate     ( void    )        apache_child_terminate() will register the    Apache process executing the current PHP request for termination    once execution of PHP code is completed. It may be used to    terminate a process after a script with high memory consumption has    been run as memory will usually only be freed internally but not    given back to the operating system.             Return Values       Returns TRUE if PHP is running as an Apache 1 module, the Apache version    is non-multithreaded, and the     child_terminate PHP directive is     enabled (disabled by default). If these conditions are not met, FALSE is     returned and an error of level E_WARNING is generated.            Changelog                                 Version        Description                                    5.4.0                 This function became available under FastCGI. Previously, it was         supported only when PHP was installed as an Apache module.                                            Notes   Note: This function is not implemented on Windows platforms.         See Also            exit() - Output a message and terminate the current script"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-get-modules.php","title":"apache_get_modules","description":"apache_get_modules   (PHP 4 >= 4.3.2, PHP 5)apache_get_modules \u2014 Get a list of loaded Apache modules         Description       array apache_get_modules     ( void    )        Get a list of loaded Apache modules.             Return Values       An array of loaded Apache modules.            Changelog                                 Version        Description                                    5.0.0                 Became available when using Apache 1, or the PHP  Apache 2          filter API. Before this time, it was only          available when using the Apache 2 handler API.                                            Examples            Example #1 apache_get_modules() example       <?phpprint_r(apache_get_modules());?>             The above example will output something similar to:       Array (     [0] => core     [1] => http_core     [2] => mod_so     [3] => sapi_apache2     [4] => mod_mime     [5] => mod_rewrite )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-get-version.php","title":"apache_get_version","description":"apache_get_version   (PHP 4 >= 4.3.2, PHP 5)apache_get_version \u2014 Fetch Apache version         Description       string apache_get_version     ( void    )        Fetch the Apache version.            Return Values       Returns the Apache version on success or FALSE on failure.            Changelog                                 Version        Description                                    4.3.4                 Became available with Apache 1.                               5.0.0                 Became available with the Apache 2 filter API.                                            Examples            Example #1 apache_get_version() example       <?php$version\u00a0=\u00a0apache_get_version();echo\u00a0\"$version\\n\";?>             The above example will output something similar to:       Apache\/1.3.29 (Unix) PHP\/4.3.4                       See Also            phpinfo() - Outputs information about PHP's configuration"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-note.php","title":"apache_note","description":"apache_note   (PHP 4, PHP 5)apache_note \u2014 Get and set apache request notes         Description       string apache_note     ( string $note_name    [, string $note_value   ] )        This function is a wrapper for Apache&#039;s table_get and    table_set. It edits the table of notes that exists    during a request. The table&#039;s purpose is to allow Apache modules to    communicate.          The main use for apache_note() is to pass information    from one module to another within the same request.            Parameters                    note_name                      The name of the note.                                note_value                      The value of the note.                                     Return Values       If called with one argument, it returns the current value of note    note_name. If called with two arguments, it    sets the value of note note_name to    note_value and returns the previous value of    note note_name.    If the note cannot be retrieved, FALSE is returned.            Examples            Example #1 Passing information between PHP and Perl       <?phpapache_note('name',\u00a0'Fredrik\u00a0Ekengren');\/\/\u00a0Call\u00a0perl\u00a0scriptvirtual(\"\/perl\/some_script.pl\");$result\u00a0=\u00a0apache_note(\"resultdata\");?>              # Get Apache request object my $r = Apache->request()->main();  # Get passed data my $name = $r->notes(&#039;name&#039;);  # some processing  # Pass result back to PHP $r->notes(&#039;resultdata&#039;, $result);                          Example #2 Logging values in access.log       <?phpapache_note('sessionID',\u00a0session_id());?>              # \"%{sessionID}n\" can be used in the LogFormat directive                       See Also            virtual() - Perform an Apache sub-request"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-reset-timeout.php","title":"apache_reset_timeout","description":"apache_reset_timeout   (PHP 5 >= 5.1.0)apache_reset_timeout \u2014 Reset the Apache write timer         Description       bool apache_reset_timeout     ( void    )        apache_reset_timeout() resets the Apache write timer,    which defaults to 300 seconds. With set_time_limit(0);    ignore_user_abort(true) and periodic    apache_reset_timeout() calls, Apache can theoretically    run forever.          This function requires Apache 1.            Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: This function is disabled when PHP is running in safe mode.         See Also            set_time_limit() - Limits the maximum execution time     ignore_user_abort() - Set whether a client disconnect should abort script execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-getenv.php","title":"apache_getenv","description":"apache_getenv   (PHP 4 >= 4.3.0, PHP 5)apache_getenv \u2014 Get an Apache subprocess_env variable         Description       string apache_getenv     ( string $variable    [, bool $walk_to_top   ] )        Get an Apache environment variable as specified by     variable.          This function requires Apache 2 otherwise it&#039;s undefined.            Parameters                    variable                      The Apache environment variable                                walk_to_top                      Whether to get the top-level variable available to all Apache layers.                                     Return Values       The value of the Apache environment variable on success, or FALSE on    failure            Examples            Example #1 apache_getenv() example           The example above shows how to retrieve the value of the Apache      environment variable SERVER_ADDR.            <?php$ret\u00a0=\u00a0apache_getenv(\"SERVER_ADDR\");echo\u00a0$ret;?>             The above example will output something similar to:       42.24.42.240                      See Also            apache_setenv() - Set an Apache subprocess_env variable     getenv() - Gets the value of an environment variable     Superglobals"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-lookup-uri.php","title":"apache_lookup_uri","description":"apache_lookup_uri   (PHP 4, PHP 5)apache_lookup_uri \u2014 Perform a partial request for the specified URI and return all info about it         Description       object apache_lookup_uri     ( string $filename    )        This performs a partial request for a URI.  It goes just far    enough to obtain all the important information about the given    resource.      This function is only supported when PHP is installed as an Apache module.         Parameters                    filename                      The filename (URI) that&#039;s being requested.                                     Return Values       An object of related URI information. The properties of    this object are:               status     the_request     status_line     method     content_type     handler     uri     filename     path_info     args     boundary     no_cache     no_local_copy     allowed     send_bodyct     bytes_sent     byterange     clength     unparsed_uri     mtime     request_time                Examples            Example #1 apache_lookup_uri() example       <?php$info\u00a0=\u00a0apache_lookup_uri('index.php?var=value');print_r($info);if\u00a0(file_exists($info->filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'file\u00a0exists!';}?>             The above example will output something similar to:       stdClass Object (     [status] => 200     [the_request] => GET \/dir\/file.php HTTP\/1.1     [method] => GET     [mtime] => 0     [clength] => 0     [chunked] => 0     [content_type] => application\/x-httpd-php     [no_cache] => 0     [no_local_copy] => 1     [unparsed_uri] => \/dir\/index.php?var=value     [uri] => \/dir\/index.php     [filename] => \/home\/htdocs\/dir\/index.php     [args] => var=value     [allowed] => 0     [sent_bodyct] => 0     [bytes_sent] => 0     [request_time] => 1074282764 ) file exists!"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-request-headers.php","title":"apache_request_headers","description":"apache_request_headers   (PHP 4 >= 4.3.0, PHP 5)apache_request_headers \u2014 Fetch all HTTP request headers         Description       array apache_request_headers     ( void    )        Fetches all HTTP request headers from the current request.            Return Values       An associative array of all the HTTP headers in the current request, or    FALSE on failure.            Changelog                                 Version        Description                                    5.4.0                 This function became available under FastCGI. Previously, it was         supported only when PHP was installed as an Apache module.                               4.3.3                 As of PHP 4.3.3 you can use this function with the NSAPI server module in Netscape\/iPlanet\/SunONE webservers, too.                                             Examples            Example #1 apache_request_headers() example       <?php$headers\u00a0=\u00a0apache_request_headers();foreach\u00a0($headers\u00a0as\u00a0$header\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$header:\u00a0$value\u00a0<br\u00a0\/>\\n\";}?>             The above example will output something similar to:       Accept: *\/* Accept-Language: en-us Accept-Encoding: gzip, deflate User-Agent: Mozilla\/4.0 Host: www.example.com Connection: Keep-Alive                      Notes   Note:          You can also get at the value of the common CGI variables by     reading them from the environment, which works whether or not     you are using PHP as an Apache module. Use     phpinfo() to see a list of all of the available     environment variables.                See Also            apache_response_headers() - Fetch all HTTP response headers"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-setenv.php","title":"apache_setenv","description":"apache_setenv   (PHP 4 >= 4.2.0, PHP 5)apache_setenv \u2014 Set an Apache subprocess_env variable         Description       bool apache_setenv     ( string $variable    , string $value    [, bool $walk_to_top = false   ] )        apache_setenv() sets the value of the Apache    environment variable specified by    variable.      Note:          When setting an Apache environment variable, the corresponding      $_SERVER     variable is not changed.                Parameters                    variable                      The environment variable that&#039;s being set.                                value                      The new variable value.                                walk_to_top                      Whether to set the top-level variable available to all Apache layers.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples           Example #1 Setting an Apache environment variable using apache_setenv()      <?phpapache_setenv(\"EXAMPLE_VAR\",\u00a0\"Example\u00a0Value\");?>                        Notes   Note:          apache_setenv() can be paired up with     apache_getenv() across separate pages or for setting     variables to pass to Server Side Includes (.shtml) that have been     included in PHP scripts.                See Also            apache_getenv() - Get an Apache subprocess_env variable"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-response-headers.php","title":"apache_response_headers","description":"apache_response_headers   (PHP 4 >= 4.3.0, PHP 5)apache_response_headers \u2014 Fetch all HTTP response headers         Description       array apache_response_headers     ( void    )        Fetch all HTTP response headers.            Return Values       An array of all Apache response headers on success or FALSE on failure.            Changelog                                 Version        Description                                    5.4.0                 This function became available under FastCGI. Previously, it was         supported only when PHP was installed as an Apache module.                               4.3.3                 As of PHP 4.3.3 you can use this function with the NSAPI server module in Netscape\/iPlanet\/SunONE webservers, too.                                             Examples            Example #1 apache_response_headers() example       <?phpprint_r(apache_response_headers());?>             The above example will output something similar to:       Array (     [Accept-Ranges] => bytes     [X-Powered-By] => PHP\/4.3.8 )                      See Also            apache_request_headers() - Fetch all HTTP request headers     headers_sent() - Checks if or where headers have been sent     headers_list() - Returns a list of response headers sent (or ready to send)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getallheaders.php","title":"getallheaders","description":"getallheaders   (PHP 4, PHP 5)getallheaders \u2014 Fetch all HTTP request headers         Description       array getallheaders     ( void    )        Fetches all HTTP headers from the current request.          This function is an alias for apache_request_headers().    Please read the apache_request_headers()    documentation for more information on how this function works.            Return Values       An associative array of all the HTTP headers in the current request, or    FALSE on failure.            Changelog                                 Version        Description                                    5.4.0                 This function became available under FastCGI. Previously, it was         supported only when PHP was installed as an Apache module.                               4.3.3                 As of PHP 4.3.3 you can use this function with the NSAPI server module in Netscape\/iPlanet\/SunONE webservers, too.                               4.3.0                 Became an alias for apache_request_headers().         Essentially, it was renamed.  This is because this function         only works with Apache.                                            Examples            Example #1 getallheaders() example       <?phpforeach\u00a0(getallheaders()\u00a0as\u00a0$name\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$name:\u00a0$value\\n\";}?>                        See Also            apache_response_headers() - Fetch all HTTP response headers"},{"url":"http:\/\/www.php.net\/manual\/en\/function.virtual.php","title":"virtual","description":"virtual   (PHP 4, PHP 5)virtual \u2014 Perform an Apache sub-request         Description       bool virtual     ( string $filename    )        virtual() is an Apache-specific function which    is similar to <!--#include virtual...--> in    mod_include.    It performs an Apache sub-request.  It is useful for including    CGI scripts or .shtml files, or anything else that you would    parse through Apache. Note that for a CGI script, the script    must generate valid CGI headers.  At the minimum that means it    must generate a Content-Type header.          To run the sub-request, all buffers are terminated and flushed to the    browser, pending headers are sent too.      This function is only supported when PHP is installed as an Apache module.         Parameters                    filename                      The file that the virtual command will be performed on.                                     Return Values       Performs the virtual command on success, or returns FALSE on failure.            Changelog                                 Version        Description                                    4.3.3                 As of PHP 4.3.3 you can use this function with the NSAPI server module in Netscape\/iPlanet\/SunONE webservers, too.                               4.0.6                 This function may be used on PHP files. However, it is typically         better to use include() or         require() for PHP files.                                            Examples       See apache_note() for an example.            Notes   Warning         The query string can be passed to the included file but     $_GET is copied from the parent script and only     $_SERVER['QUERY_STRING'] is filled with the passed     query string. The query string may only be passed when using Apache 2.     The requested file will not be listed in the Apache access log.          Note:          Environment variables set in the requested file are not visible to the     calling script.                See Also            apache_note() - Get and set apache request notes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzclose.php","title":"bzclose","description":"bzclose   (PHP 4 >= 4.0.4, PHP 5)bzclose \u2014 Close a bzip2 file        Description       int bzclose     ( resource $bz    )        Closes the given bzip2 file pointer.           Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            bzopen() - Opens a bzip2 compressed file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzerrno.php","title":"bzerrno","description":"bzerrno   (PHP 4 >= 4.0.4, PHP 5)bzerrno \u2014 Returns a bzip2 error number        Description       int bzerrno     ( resource $bz    )        Returns the error number of any bzip2 error returned by the given file    pointer.           Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                    Return Values       Returns the error number as an integer.           See Also            bzerror() - Returns the bzip2 error number and error string in an array     bzerrstr() - Returns a bzip2 error string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzcompress.php","title":"bzcompress","description":"bzcompress   (PHP 4 >= 4.0.4, PHP 5)bzcompress \u2014 Compress a string into bzip2 encoded data        Description       mixed bzcompress     ( string $source    [, int $blocksize = 4    [, int $workfactor = 0   ]] )        bzcompress() compresses the given string and returns    it as bzip2 encoded data.           Parameters                    source                      The string to compress.                                blocksize                      Specifies the blocksize used during compression and should be a number         from 1 to 9 with 9 giving the best compression, but using more         resources to do so.                                workfactor                      Controls how the compression phase behaves when presented with worst        case, highly repetitive, input data.  The value can be between 0 and        250 with 0 being a special case.                       Regardless of the workfactor, the generated         output is the same.                                    Return Values       The compressed string, or an error number if an error occurred.           Examples       Example #1 Compressing data      <?php$str\u00a0=\u00a0\"sample\u00a0data\";$bzstr\u00a0=\u00a0bzcompress($str,\u00a09);echo\u00a0$bzstr;?>                   See Also            bzdecompress() - Decompresses bzip2 encoded data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzdecompress.php","title":"bzdecompress","description":"bzdecompress   (PHP 4 >= 4.0.4, PHP 5)bzdecompress \u2014 Decompresses bzip2 encoded data        Description       mixed bzdecompress     ( string $source    [, int $small = 0   ] )        bzdecompress() decompresses the given string containing    bzip2 encoded data.           Parameters                    source                      The string to decompress.                                small                      If TRUE, an alternative decompression algorithm will be used which        uses less memory (the maximum memory requirement drops to around 2300K)         but works at roughly half the speed.                      See the \u00bb\u00a0bzip2 documentation for more         information about this feature.                                    Return Values       The decompressed string, or an error number if an error occurred.           Examples            Example #1 Decompressing a String       <?php$start_str\u00a0=\u00a0\"This\u00a0is\u00a0not\u00a0an\u00a0honest\u00a0face?\";$bzstr\u00a0=\u00a0bzcompress($start_str);echo\u00a0\"Compressed\u00a0String:\u00a0\";echo\u00a0$bzstr;echo\u00a0\"\\n<br\u00a0\/>\\n\";$str\u00a0=\u00a0bzdecompress($bzstr);echo\u00a0\"Decompressed\u00a0String:\u00a0\";echo\u00a0$str;echo\u00a0\"\\n<br\u00a0\/>\\n\";?>                       See Also            bzcompress() - Compress a string into bzip2 encoded data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzerror.php","title":"bzerror","description":"bzerror   (PHP 4 >= 4.0.4, PHP 5)bzerror \u2014     Returns the bzip2 error number and error string in an array           Description       array bzerror     ( resource $bz    )        Returns the error number and error string of any bzip2 error returned by     the given file pointer.           Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                    Return Values       Returns an associative array, with the error code in the     errno entry, and the error message in the    errstr entry.           Examples            Example #1 bzerror() example       <?php$error\u00a0=\u00a0bzerror($bz);echo\u00a0$error[\"errno\"];echo\u00a0$error[\"errstr\"];?>                       See Also            bzerrno() - Returns a bzip2 error number     bzerrstr() - Returns a bzip2 error string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzerrstr.php","title":"bzerrstr","description":"bzerrstr   (PHP 4 >= 4.0.4, PHP 5)bzerrstr \u2014 Returns a bzip2 error string        Description       string bzerrstr     ( resource $bz    )        Gets the error string of any bzip2 error returned by the given file    pointer.           Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                    Return Values       Returns a string containing the error message.           See Also            bzerrno() - Returns a bzip2 error number     bzerror() - Returns the bzip2 error number and error string in an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzflush.php","title":"bzflush","description":"bzflush   (PHP 4 >= 4.0.4, PHP 5)bzflush \u2014 Force a write of all buffered data        Description       int bzflush     ( resource $bz    )        Forces a write of all buffered bzip2 data for the file pointer    bz.           Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            bzread() - Binary safe bzip2 file read     bzwrite() - Binary safe bzip2 file write"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzopen.php","title":"bzopen","description":"bzopen   (PHP 4 >= 4.0.4, PHP 5)bzopen \u2014 Opens a bzip2 compressed file        Description       resource bzopen     ( string $filename    , string $mode    )        bzopen() opens a bzip2 (.bz2) file for reading or    writing.           Parameters                    filename                      The name of the file to open.                                mode                      Similar to the fopen() function, only &#039;r&#039; (read)        and &#039;w&#039; (write) are supported. Everything else will cause bzopen        to return FALSE.                                    Return Values       If the open fails, bzopen() returns FALSE, otherwise    it returns a pointer to the newly opened file.           Examples            Example #1 bzopen() example       <?php$file\u00a0=\u00a0\"\/tmp\/foo.bz2\";$bz\u00a0=\u00a0bzopen($file,\u00a0\"r\")\u00a0or\u00a0die(\"Couldn't\u00a0open\u00a0$file\u00a0for\u00a0reading\");bzclose($bz);?>                       See Also            bzclose() - Close a bzip2 file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzwrite.php","title":"bzwrite","description":"bzwrite   (PHP 4 >= 4.0.4, PHP 5)bzwrite \u2014 Binary safe bzip2 file write        Description       int bzwrite     ( resource $bz    , string $data    [, int $length   ] )        bzwrite() writes a string into the given bzip2 file     stream.           Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                data                      The written data.                                length                      If supplied, writing will stop after length         (uncompressed) bytes have been written or the end of         data is reached, whichever comes first.                                    Return Values       Returns the number of bytes written, or FALSE on error.           Examples            Example #1 bzwrite() example       <?php$str\u00a0=\u00a0\"uncompressed\u00a0data\";$bz\u00a0=\u00a0bzopen(\"\/tmp\/foo.bz2\",\u00a0\"w\");bzwrite($bz,\u00a0$str,\u00a0strlen($str));bzclose($bz);?>                        See Also            bzread() - Binary safe bzip2 file read     bzopen() - Opens a bzip2 compressed file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzread.php","title":"bzread","description":"bzread   (PHP 4 >= 4.0.4, PHP 5)bzread \u2014 Binary safe bzip2 file read        Description       string bzread     ( resource $bz    [, int $length = 1024   ] )        bzread() reads from the given bzip2 file pointer.          Reading stops when length (uncompressed) bytes have    been read or EOF is reached, whichever comes first.             Parameters                    bz                      The file pointer. It must be valid and must point to a file         successfully opened by bzopen().                                length                      If not specified, bzread() will read 1024         (uncompressed) bytes at a time. A maximum of 8192        uncompressed bytes will be read at a time.                                     Return Values       Returns the uncompressed data, or FALSE on error.           Examples            Example #1 bzread() example       <?php$file\u00a0=\u00a0\"\/tmp\/foo.bz2\";$bz\u00a0=\u00a0bzopen($file,\u00a0\"r\")\u00a0or\u00a0die(\"Couldn't\u00a0open\u00a0$file\");$decompressed_file\u00a0=\u00a0'';while\u00a0(!feof($bz))\u00a0{\u00a0\u00a0$decompressed_file\u00a0.=\u00a0bzread($bz,\u00a04096);}bzclose($bz);echo\u00a0\"The\u00a0contents\u00a0of\u00a0$file\u00a0are:\u00a0<br\u00a0\/>\\n\";echo\u00a0$decompressed_file;?>                       See Also            bzwrite() - Binary safe bzip2 file write     feof() - Tests for end-of-file on a file pointer     bzopen() - Opens a bzip2 compressed file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-chunk.php","title":"array_chunk","description":"array_chunk   (PHP 4 >= 4.2.0, PHP 5)array_chunk \u2014 Split an array into chunks          Description       array array_chunk     ( array $input    , int $size    [, bool $preserve_keys = false   ] )        Chunks an array into size large chunks.    The last chunk may contain less than size elements.            Parameters                     input                      The array to work on                                 size                      The size of each chunk                                 preserve_keys                      When set to TRUE keys will be preserved.        Default is FALSE which will reindex the chunk numerically                                      Return Values       Returns a multidimensional numerically indexed array, starting with zero,    with each dimension containing size elements.            Errors\/Exceptions       If size is less than 1    E_WARNING will be thrown and NULL returned.            Examples            Example #1 array_chunk() example       <?php$input_array\u00a0=\u00a0array('a',\u00a0'b',\u00a0'c',\u00a0'd',\u00a0'e');print_r(array_chunk($input_array,\u00a02));print_r(array_chunk($input_array,\u00a02,\u00a0true));?>             The above example will output:       Array (     [0] => Array         (             [0] => a             [1] => b         )      [1] => Array         (             [0] => c             [1] => d         )      [2] => Array         (             [0] => e         )  ) Array (     [0] => Array         (             [0] => a             [1] => b         )      [1] => Array         (             [2] => c             [3] => d         )      [2] => Array         (             [4] => e         )  )                      See Also            array_slice() - Extract a slice of the array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-change-key-case.php","title":"array_change_key_case","description":"array_change_key_case   (PHP 4 >= 4.2.0, PHP 5)array_change_key_case \u2014 Changes all keys in an array          Description       array array_change_key_case     ( array $input    [, int $case = CASE_LOWER   ] )        Returns an array with all keys from input lowercased    or uppercased. Numbered indices are left as is.            Parameters                     input                      The array to work on                                 case                      Either CASE_UPPER or        CASE_LOWER (default)                                      Return Values       Returns an array with its keys lower or uppercased, or FALSE if    input is not an array.            Errors\/Exceptions       Throws E_WARNING if input is    not an array.            Examples            Example #1 array_change_key_case() example       <?php$input_array\u00a0=\u00a0array(\"FirSt\"\u00a0=>\u00a01,\u00a0\"SecOnd\"\u00a0=>\u00a04);print_r(array_change_key_case($input_array,\u00a0CASE_UPPER));?>             The above example will output:       Array (     [FIRST] => 1     [SECOND] => 4 )                      Notes   Note:          If an array has indices that will be the same once run through this     function (e.g. \"keY\" and \"kEY\"),      the value that is later in the array will override other indices."},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-combine.php","title":"array_combine","description":"array_combine   (PHP 5)array_combine \u2014 Creates an array by using one array for keys and another for its values          Description       array array_combine     ( array $keys    , array $values    )        Creates an array by using the values from the    keys array as keys and the values from the    values array as the corresponding values.            Parameters                     keys                      Array of keys to be used. Illegal values for key will be        converted to string.                                 values                      Array of values to be used                                      Return Values       Returns the combined array, FALSE if the number of elements    for each array isn&#039;t equal.            Errors\/Exceptions       Throws E_WARNING if the number of elements in    keys and values does not    match.            Changelog                                 Version        Description                                    5.4.0                 Previous versions issued E_WARNING and returned         FALSE for empty arrays.                                             Examples            Example #1 A simple array_combine() example       <?php$a\u00a0=\u00a0array('green',\u00a0'red',\u00a0'yellow');$b\u00a0=\u00a0array('avocado',\u00a0'apple',\u00a0'banana');$c\u00a0=\u00a0array_combine($a,\u00a0$b);print_r($c);?>             The above example will output:       Array (     [green]  => avocado     [red]    => apple     [yellow] => banana )                      See Also            array_merge() - Merge one or more arrays     array_walk() - Apply a user function to every member of an array     array_values() - Return all the values of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-count-values.php","title":"array_count_values","description":"array_count_values   (PHP 4, PHP 5)array_count_values \u2014 Counts all the values of an array          Description       array array_count_values     ( array $input    )        array_count_values() returns an array using    the values of the input array as keys and    their frequency in input as values.            Parameters                     input                      The array of values to count                                      Return Values       Returns an associative array of values from input as    keys and their count as value.            Errors\/Exceptions       Throws E_WARNING for every element which is not    string or integer.            Examples            Example #1 array_count_values() example       <?php$array\u00a0=\u00a0array(1,\u00a0\"hello\",\u00a01,\u00a0\"world\",\u00a0\"hello\");print_r(array_count_values($array));?>             The above example will output:       Array (     [1] => 2     [hello] => 2     [world] => 1 )                      See Also            count() - Count all elements in an array, or something in an object     array_unique() - Removes duplicate values from an array     array_values() - Return all the values of an array     count_chars() - Return information about characters used in a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-assoc.php","title":"array_diff_assoc","description":"array_diff_assoc   (PHP 4 >= 4.3.0, PHP 5)array_diff_assoc \u2014 Computes the difference of arrays with additional index check          Description       array array_diff_assoc     ( array $array1    , array $array2    [, array $...   ] )        Compares array1 against array2 and    returns the difference. Unlike array_diff() the array    keys are used in the comparison.            Parameters                     array1                      The array to compare from                                 array2                      An array to compare against                                 ...                      More arrays to compare against                                      Return Values       Returns an array containing all the values from    array1 that are not present in any of the other arrays.              Examples            Example #1 array_diff_assoc() example           In this example you see the \"a\" => \"green\"      pair is present in both arrays and thus it is not in the output from the      function. Unlike this, the pair 0 => \"red\"      is in the output because in the second argument \"red\"      has key which is 1.            <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"yellow\",\u00a0\"red\");$result\u00a0=\u00a0array_diff_assoc($array1,\u00a0$array2);print_r($result);?>             The above example will output:       Array (     [b] => brown     [c] => blue     [0] => red )                         Example #2 array_diff_assoc() example           Two values from key => value pairs are      considered equal only if (string) $elem1 === (string)      $elem2 . In other words a strict check takes place so      the string representations must be the same.            <?php$array1\u00a0=\u00a0array(0,\u00a01,\u00a02);$array2\u00a0=\u00a0array(\"00\",\u00a0\"01\",\u00a0\"2\");$result\u00a0=\u00a0array_diff_assoc($array1,\u00a0$array2);print_r($result);?>             The above example will output:       Array (     [0] => 0     [1] => 1     )                      Notes   Note:          This function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using, for example,     array_diff_assoc($array1[0], $array2[0]);.                See Also            array_diff() - Computes the difference of arrays     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-uassoc.php","title":"array_diff_uassoc","description":"array_diff_uassoc   (PHP 5)array_diff_uassoc \u2014 Computes the difference of arrays with additional index check which is performed by a user supplied callback function          Description       array array_diff_uassoc     ( array $array1    , array $array2    [, array $...    ], callback $key_compare_func    )        Compares array1 against array2 and    returns the difference. Unlike array_diff() the array    keys are used in the comparison.          Unlike array_diff_assoc() an user supplied callback    function is used for the indices comparison, not internal function.            Parameters                     array1                      The array to compare from                                 array2                      An array to compare against                                 ...                      More arrays to compare against                                 key_compare_func                      callback function to use.        The callback function must return an integer less than, equal        to, or greater than zero if the first argument is considered to        be respectively less than, equal to, or greater than the second.                                      Return Values       Returns an array containing all the entries from    array1 that are not present in any of the other arrays.              Examples            Example #1 array_diff_uassoc() example           The \"a\" => \"green\"      pair is present in both arrays and thus it is not in the output from the      function. Unlike this, the pair 0 => \"red\"      is in the output because in the second argument \"red\"      has key which is 1.            <?phpfunction\u00a0key_compare_func($a,\u00a0$b){\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0===\u00a0$b)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0>\u00a0$b)?\u00a01:-1;}$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"yellow\",\u00a0\"red\");$result\u00a0=\u00a0array_diff_uassoc($array1,\u00a0$array2,\u00a0\"key_compare_func\");print_r($result);?>             The above example will output:       Array (     [b] => brown     [c] => blue     [0] => red )                 The equality of 2 indices is checked by the user supplied callback function.                      Notes   Note:          This function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using, for example,     array_diff_uassoc($array1[0], $array2[0], \"key_compare_func\");.                See Also            array_diff() - Computes the difference of arrays     array_diff_assoc() - Computes the difference of arrays with additional index check     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_uintersect() - Computes the intersection of arrays, compares data by a callback function     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-key.php","title":"array_diff_key","description":"array_diff_key   (PHP 5 >= 5.1.0)array_diff_key \u2014 Computes the difference of arrays using keys for comparison          Description       array array_diff_key     ( array $array1    , array $array2    [, array $...   ] )        Compares the keys from array1 against the keys    from array2 and returns the difference.    This function is like array_diff() except the    comparison is done on the keys instead of the values.            Parameters                     array1                      The array to compare from                                 array2                      An array to compare against                                 ...                      More arrays to compare against                                      Return Values       Returns an array containing all the entries from    array1 whose keys are not present in any of the    other arrays.              Examples            Example #1 array_diff_key() example           The two keys from the key => value pairs are      considered equal only if      (string) $key1 === (string) $key2 . In other words      a strict type check is executed so the string representation must be      the same.            <?php$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);var_dump(array_diff_key($array1,\u00a0$array2));?>             The above example will output:       array(2) {   [\"red\"]=>   int(2)   [\"purple\"]=>   int(4) }                      Notes   Note:          This function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using     array_diff_key($array1[0], $array2[0]);.                See Also            array_diff() - Computes the difference of arrays     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_diff_assoc() - Computes the difference of arrays with additional index check     array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_diff_ukey() - Computes the difference of arrays using a callback function on the keys for comparison     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function     array_intersect_key() - Computes the intersection of arrays using keys for comparison     array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-ukey.php","title":"array_diff_ukey","description":"array_diff_ukey   (PHP 5 >= 5.1.0)array_diff_ukey \u2014 Computes the difference of arrays using a callback function on the keys for comparison          Description       array array_diff_ukey     ( array $array1    , array $array2    [, array $ ...    ], callback $key_compare_func    )        Compares the keys from array1 against the keys    from array2 and returns the difference.    This function is like array_diff() except the    comparison is done on the keys instead of the values.          Unlike array_diff_key() an user supplied callback    function is used for the indices comparison, not internal function.            Parameters                     array1                      The array to compare from                                 array2                      An array to compare against                                 ...                      More arrays to compare against                                 key_compare_func                      callback function to use.        The callback function must return an integer less than, equal        to, or greater than zero if the first argument is considered to        be respectively less than, equal to, or greater than the second.                                      Return Values       Returns an array containing all the entries from    array1 that are not present in any of the other arrays.               Examples            Example #1 array_diff_ukey() example       <?phpfunction\u00a0key_compare_func($key1,\u00a0$key2){\u00a0\u00a0\u00a0\u00a0if\u00a0($key1\u00a0==\u00a0$key2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0else\u00a0if\u00a0($key1\u00a0>\u00a0$key2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01;\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1;}$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);var_dump(array_diff_ukey($array1,\u00a0$array2,\u00a0'key_compare_func'));?>             The above example will output:       array(2) {   [\"red\"]=>   int(2)   [\"purple\"]=>   int(4) }                      Notes   Note:          This function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using     array_diff_ukey($array1[0], $array2[0], &#039;callback_func&#039;);.                See Also            array_diff() - Computes the difference of arrays     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_diff_assoc() - Computes the difference of arrays with additional index check     array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_diff_key() - Computes the difference of arrays using keys for comparison     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function     array_intersect_key() - Computes the intersection of arrays using keys for comparison     array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-fill-keys.php","title":"array_fill_keys","description":"array_fill_keys   (PHP 5 >= 5.2.0)array_fill_keys \u2014 Fill an array with values, specifying keys         Description       array array_fill_keys     ( array $keys    , mixed $value    )        Fills an array with the    value of the value parameter, using the    values of the keys array as keys.            Parameters                     keys                      Array of values that will be used as keys. Illegal values        for key will be converted to string.                                 value                      Value to use for filling                                      Return Values       Returns the filled array              Examples            Example #1 array_fill_keys() example       <?php$keys\u00a0=\u00a0array('foo',\u00a05,\u00a010,\u00a0'bar');$a\u00a0=\u00a0array_fill_keys($keys,\u00a0'banana');print_r($a);?>             The above example will output:       Array (     [foo] => banana     [5] => banana     [10] => banana     [bar] => banana )                      See Also            array_fill() - Fill an array with values     array_combine() - Creates an array by using one array for keys and another for its values"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff.php","title":"array_diff","description":"array_diff   (PHP 4 >= 4.0.1, PHP 5)array_diff \u2014 Computes the difference of arrays         Description       array array_diff     ( array $array1    , array $array2    [, array $...   ] )        Compares array1 against array2 and    returns the difference.            Parameters                    array1                      The array to compare from                                array2                      An array to compare against                                ...                      More arrays to compare against                                     Return Values       Returns an array containing all the entries from    array1 that are not present in any of the other arrays.            Examples            Example #1 array_diff() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"red\",\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"b\"\u00a0=>\u00a0\"green\",\u00a0\"yellow\",\u00a0\"red\");$result\u00a0=\u00a0array_diff($array1,\u00a0$array2);print_r($result);?>                   Multiple occurrences in $array1 are all      treated the same way. This will output :            Array (     [1] => blue )                      Notes   Note:          Two elements are considered equal if and only if     (string) $elem1 === (string) $elem2. In words:     when the string representation is the same.               Note:          This function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using     array_diff($array1[0], $array2[0]);.                See Also            array_diff_assoc() - Computes the difference of arrays with additional index check     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-fill.php","title":"array_fill","description":"array_fill   (PHP 4 >= 4.2.0, PHP 5)array_fill \u2014 Fill an array with values          Description       array array_fill     ( int $start_index    , int $num    , mixed $value    )        Fills an array with    num entries of the value of the    value parameter, keys starting at the    start_index parameter.            Parameters                     start_index                      The first index of the returned array.                      If start_index is negative,         the first index of the returned array will be         start_index and the following         indices will start from zero         (see example).                                 num                      Number of elements to insert.        Must be greater than zero.                                 value                      Value to use for filling                                      Return Values       Returns the filled array            Errors\/Exceptions       Throws a E_WARNING if num is    less than one.            Examples            Example #1 array_fill() example       <?php$a\u00a0=\u00a0array_fill(5,\u00a06,\u00a0'banana');$b\u00a0=\u00a0array_fill(-2,\u00a04,\u00a0'pear');print_r($a);print_r($b);?>             The above example will output:       Array (     [5]  => banana     [6]  => banana     [7]  => banana     [8]  => banana     [9]  => banana     [10] => banana ) Array (     [-2] => pear     [0] => pear     [1] => pear     [2] => pear )                      Notes       See also the Arrays     section of manual for a detailed explanation of negative keys.             See Also            array_fill_keys() - Fill an array with values, specifying keys     str_repeat() - Repeat a string     range() - Create an array containing a range of elements"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-flip.php","title":"array_flip","description":"array_flip   (PHP 4, PHP 5)array_flip \u2014 Exchanges all keys with their associated values in an array        Description       array array_flip     ( array $trans    )        array_flip() returns an array in flip    order, i.e. keys from trans become values and values    from trans become keys.          Note that the values of trans need to be valid    keys, i.e. they need to be either integer or    string. A warning will be emitted if a value has the wrong    type, and the key\/value pair in question will not be    flipped.          If a value has several occurrences, the latest key will be    used as its values, and all others will be lost.            Parameters                    trans                      An array of key\/value pairs to be flipped.                                     Return Values       Returns the flipped array on success and NULL on failure.            Examples            Example #1 array_flip() example       <?php$trans\u00a0=\u00a0array_flip($trans);$original\u00a0=\u00a0strtr($str,\u00a0$trans);?>                           Example #2 array_flip() example : collision       <?php$trans\u00a0=\u00a0array(\"a\"\u00a0=>\u00a01,\u00a0\"b\"\u00a0=>\u00a01,\u00a0\"c\"\u00a0=>\u00a02);$trans\u00a0=\u00a0array_flip($trans);print_r($trans);?>                   now $trans is:            Array (     [1] => b     [2] => c )                      See Also            array_values() - Return all the values of an array     array_keys() - Return all the keys or a subset of the keys of an array     array_reverse() - Return an array with elements in reverse order"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-filter.php","title":"array_filter","description":"array_filter   (PHP 4 >= 4.0.6, PHP 5)array_filter \u2014 Filters elements of an array using a callback function          Description       array array_filter     ( array $input    [, callback $callback   ] )        Iterates over each value in    the input array passing them to the    callback function. If the     callback function returns true, the current    value from input is returned into the    result array. Array keys are preserved.           Parameters                     input                      The array to iterate over                                 callback                      The callback function to use                      If no callback is supplied, all entries of        input equal to FALSE (see        converting to         boolean) will be removed.                                      Return Values       Returns the filtered array.              Examples            Example #1 array_filter() example       <?phpfunction\u00a0odd($var){\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0whether\u00a0the\u00a0input\u00a0integer\u00a0is\u00a0odd\u00a0\u00a0\u00a0\u00a0return($var\u00a0&\u00a01);}function\u00a0even($var){\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0whether\u00a0the\u00a0input\u00a0integer\u00a0is\u00a0even\u00a0\u00a0\u00a0\u00a0return(!($var\u00a0&\u00a01));}$array1\u00a0=\u00a0array(\"a\"=>1,\u00a0\"b\"=>2,\u00a0\"c\"=>3,\u00a0\"d\"=>4,\u00a0\"e\"=>5);$array2\u00a0=\u00a0array(6,\u00a07,\u00a08,\u00a09,\u00a010,\u00a011,\u00a012);echo\u00a0\"Odd\u00a0:\\n\";print_r(array_filter($array1,\u00a0\"odd\"));echo\u00a0\"Even:\\n\";print_r(array_filter($array2,\u00a0\"even\"));?>             The above example will output:       Odd : Array (     [a] => 1     [c] => 3     [e] => 5 ) Even: Array (     [0] => 6     [2] => 8     [4] => 10     [6] => 12 )                   Example #2 array_filter() without     callback       <?php$entry\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0=>\u00a0'foo',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0=>\u00a0false,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0=>\u00a0-1,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0=>\u00a0null,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04\u00a0=>\u00a0''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);print_r(array_filter($entry));?>             The above example will output:       Array (     [0] => foo     [2] => -1 )                      Notes   Caution         If the array is changed from the callback function (e.g. element     added, deleted or unset) the behavior of this function is undefined.                 See Also            array_map() - Applies the callback to the elements of the given arrays     array_reduce() - Iteratively reduce the array to a single value using a callback function     array_walk() - Apply a user function to every member of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-assoc.php","title":"array_intersect_assoc","description":"array_intersect_assoc   (PHP 4 >= 4.3.0, PHP 5)array_intersect_assoc \u2014 Computes the intersection of arrays with additional index check          Description       array array_intersect_assoc     ( array $array1    , array $array2    [, array $ ...   ] )        array_intersect_assoc() returns an array    containing all the values of array1    that are present in all the arguments. Note that the keys are used in    the comparison unlike in array_intersect().            Parameters                    array1                      The array with master values to check.                                array2                      An array to compare values against.                                array                      A variable list of arrays to compare.                                     Return Values       Returns an associative array containing all the values in     array1 that are present in all of the arguments.            Examples            Example #1 array_intersect_assoc() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"yellow\",\u00a0\"blue\",\u00a0\"red\");$result_array\u00a0=\u00a0array_intersect_assoc($array1,\u00a0$array2);print_r($result_array);?>             The above example will output:       Array (     [a] => green )                    In our example you see that only the pair \"a\" =>    \"green\" is present in both arrays and thus is returned.    The value \"red\" is not returned because in    $array1 its key is 0 while    the key of \"red\" in $array2 is    1, and the key \"b\" is not returned    because its values are different in each array.          The two values from the key => value pairs are    considered equal only if    (string) $elem1 === (string) $elem2 . In other words    a strict type check is executed so the string representation must be    the same.                See Also       array_intersect() - Computes the intersection of arrays    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions    array_diff() - Computes the difference of arrays    array_diff_assoc() - Computes the difference of arrays with additional index check"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-uassoc.php","title":"array_intersect_uassoc","description":"array_intersect_uassoc   (PHP 5)array_intersect_uassoc \u2014 Computes the intersection of arrays with additional index check, compares indexes by a callback function          Description       array array_intersect_uassoc     ( array $array1    , array $array2    [, array $ ...    ], callback $key_compare_func    )        array_intersect_uassoc() returns an array    containing all the values of array1    that are present in all the arguments. Note that the keys are used in    the comparison unlike in array_intersect().          The index comparison is done by a user supplied callback function.    It must return an integer less than, equal to, or greater than zero    if the first argument is considered to be respectively less than,    equal to, or greater than the second.            Parameters                    array1                      Initial array for comparison of the arrays.                                array2                      First array to compare keys against.                                array                      Variable list of array arguments to compare values against.                                key_compare_func                      User supplied callback function to do the comparison.                                     Return Values       Returns the values of array1 whose values exist    in all of the arguments.            Examples            Example #1 array_intersect_uassoc() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");print_r(array_intersect_uassoc($array1,\u00a0$array2,\u00a0\"strcasecmp\"));?>             The above example will output:       Array (     [b] => brown )                      See Also            array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions     array_intersect_key() - Computes the intersection of arrays using keys for comparison     array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-key.php","title":"array_intersect_key","description":"array_intersect_key   (PHP 5 >= 5.1.0)array_intersect_key \u2014 Computes the intersection of arrays using keys for comparison          Description       array array_intersect_key     ( array $array1    , array $array2    [, array $ ...   ] )        array_intersect_key() returns an array    containing all the entries of array1    which have keys that are present in all the arguments.            Parameters                    array1                      The array with master keys to check.                                array2                      An array to compare keys against.                                array                      A variable list of arrays to compare.                                     Return Values       Returns an associative array containing all the entries of     array1 which have keys that are present in all    arguments.                  Examples            Example #1 array_intersect_key() example       <?php$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);var_dump(array_intersect_key($array1,\u00a0$array2));?>             The above example will output:       array(2) {   [\"blue\"]=>   int(1)   [\"green\"]=>   int(3) }                    In our example you see that only the keys &#039;blue&#039;    and &#039;green&#039; are present in both arrays and thus    returned. Also notice that the values for the keys    &#039;blue&#039; and &#039;green&#039; differ between    the two arrays. A match still occurs because only the keys are checked.    The values returned are those of array1.          The two keys from the key => value pairs are    considered equal only if    (string) $key1 === (string) $key2 . In other words    a strict type check is executed so the string representation must be    the same.            See Also            array_diff() - Computes the difference of arrays     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_diff_assoc() - Computes the difference of arrays with additional index check     array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_diff_key() - Computes the difference of arrays using keys for comparison     array_diff_ukey() - Computes the difference of arrays using a callback function on the keys for comparison     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function     array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-ukey.php","title":"array_intersect_ukey","description":"array_intersect_ukey   (PHP 5 >= 5.1.0)array_intersect_ukey \u2014 Computes the intersection of arrays using a callback function on the keys for comparison        Description       array array_intersect_ukey     ( array $array1    , array $array2    [, array $...    ], callback $key_compare_func    )        array_intersect_ukey() returns an array    containing all the values of array1    which have matching keys that are present in all the arguments.          This comparison is done by a user supplied callback function.    It must return an integer less than, equal to, or greater than zero if the    first key is considered to be respectively less than, equal to, or    greater than the second.            Parameters                    array1                      Initial array for comparison of the arrays.                                array2                      First array to compare keys against.                                array                      Variable list of array arguments to compare keys against.                                key_compare_func                      User supplied callback function to do the comparison.                                     Return Values       Returns the values of array1 whose keys exist    in all the arguments.            Examples            Example #1 array_intersect_ukey() example       <?phpfunction\u00a0key_compare_func($key1,\u00a0$key2){\u00a0\u00a0\u00a0\u00a0if\u00a0($key1\u00a0==\u00a0$key2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0else\u00a0if\u00a0($key1\u00a0>\u00a0$key2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01;\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1;}$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);var_dump(array_intersect_ukey($array1,\u00a0$array2,\u00a0'key_compare_func'));?>             The above example will output:       array(2) {   [\"blue\"]=>   int(1)   [\"green\"]=>   int(3) }                    In our example you see that only the keys &#039;blue&#039;    and &#039;green&#039; are present in both arrays and thus    returned. Also notice that the values for the keys    &#039;blue&#039; and &#039;green&#039; differ between    the two arrays. A match still occurs because only the keys are checked.    The values returned are those of array1.            See Also            array_diff() - Computes the difference of arrays     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_diff_assoc() - Computes the difference of arrays with additional index check     array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_diff_key() - Computes the difference of arrays using keys for comparison     array_diff_ukey() - Computes the difference of arrays using a callback function on the keys for comparison     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function     array_intersect_key() - Computes the intersection of arrays using keys for comparison"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect.php","title":"array_intersect","description":"array_intersect   (PHP 4 >= 4.0.1, PHP 5)array_intersect \u2014 Computes the intersection of arrays          Description       array array_intersect     ( array $array1    , array $array2    [, array $ ...   ] )        array_intersect() returns an array    containing all the values of array1    that are present in all the arguments.    Note that keys are preserved.            Parameters                    array1                      The array with master values to check.                                array2                      An array to compare values against.                                array                      A variable list of arrays to compare.                                     Return Values       Returns an array containing all of the values in     array1 whose values exist in all of the parameters.             Examples            Example #1 array_intersect() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"red\",\u00a0\"blue\");$array2\u00a0=\u00a0array(\"b\"\u00a0=>\u00a0\"green\",\u00a0\"yellow\",\u00a0\"red\");$result\u00a0=\u00a0array_intersect($array1,\u00a0$array2);print_r($result);?>             The above example will output:       Array (     [a] => green     [0] => red )                      Notes   Note:          Two elements are considered equal if and only if     (string) $elem1 === (string) $elem2. In words:     when the string representation is the same.                     See Also            array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_diff() - Computes the difference of arrays     array_diff_assoc() - Computes the difference of arrays with additional index check"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-keys.php","title":"array_keys","description":"array_keys   (PHP 4, PHP 5)array_keys \u2014 Return all the keys or a subset of the keys of an array          Description       array array_keys     ( array $input    [, mixed $search_value    [, bool $strict = false   ]] )        array_keys() returns the keys, numeric and    string, from the input array.          If the optional search_value is specified,    then only the keys for that value are returned. Otherwise, all    the keys from the input are returned.            Parameters                    input                      An array containing keys to return.                                search_value                      If specified, then only keys containing these values are returned.                                strict                      Determines if strict comparison (===) should be used during the search.                                     Return Values       Returns an array of all the keys in input.            Changelog                                 Version        Description                                    5.0.0                 Added the strict parameter.                                             Examples            Example #1 array_keys() example       <?php$array\u00a0=\u00a0array(0\u00a0=>\u00a0100,\u00a0\"color\"\u00a0=>\u00a0\"red\");print_r(array_keys($array));$array\u00a0=\u00a0array(\"blue\",\u00a0\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"blue\");print_r(array_keys($array,\u00a0\"blue\"));$array\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0array(\"blue\",\u00a0\"red\",\u00a0\"green\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"size\"\u00a0\u00a0=>\u00a0array(\"small\",\u00a0\"medium\",\u00a0\"large\"));print_r(array_keys($array));?>             The above example will output:       Array (     [0] => 0     [1] => color ) Array (     [0] => 0     [1] => 3     [2] => 4 ) Array (     [0] => color     [1] => size )                      See Also            array_values() - Return all the values of an array     array_key_exists() - Checks if the given key or index exists in the array     array_search() - Searches the array for a given value and returns the corresponding key if successful"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-key-exists.php","title":"array_key_exists","description":"array_key_exists   (PHP 4 >= 4.0.7, PHP 5)array_key_exists \u2014 Checks if the given key or index exists in the array          Description       bool array_key_exists     ( mixed $key    , array $search    )        array_key_exists() returns TRUE if the    given key is set in the array.    key can be any value possible    for an array index.            Parameters                    key                      Value to check.                                search                      An array with keys to check.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.3.0                 This function doesn&#039;t work with objects anymore,          property_exists() should be used in this case.                                             Examples            Example #1 array_key_exists() example       <?php$search_array\u00a0=\u00a0array('first'\u00a0=>\u00a01,\u00a0'second'\u00a0=>\u00a04);if\u00a0(array_key_exists('first',\u00a0$search_array))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0'first'\u00a0element\u00a0is\u00a0in\u00a0the\u00a0array\";}?>                      Example #2 array_key_exists() vs isset()         isset() does not return TRUE for array keys     that correspond to a NULL value, while     array_key_exists() does.          <?php$search_array\u00a0=\u00a0array('first'\u00a0=>\u00a0null,\u00a0'second'\u00a0=>\u00a04);\/\/\u00a0returns\u00a0falseisset($search_array['first']);\/\/\u00a0returns\u00a0truearray_key_exists('first',\u00a0$search_array);?>                   Notes   Note:          For backward compatibility, the following deprecated alias may be used:      key_exists()                See Also            isset() - Determine if a variable is set and is not NULL     array_keys() - Return all the keys or a subset of the keys of an array     in_array() - Checks if a value exists in an array     property_exists() - Checks if the object or class has a property"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-merge-recursive.php","title":"array_merge_recursive","description":"array_merge_recursive   (PHP 4 >= 4.0.1, PHP 5)array_merge_recursive \u2014 Merge two or more arrays recursively          Description       array array_merge_recursive     ( array $array1    [, array $...   ] )        array_merge_recursive() merges the elements of    one or more arrays together so that the values of one are appended    to the end of the previous one.  It returns the resulting array.          If the input arrays have the same string keys, then the values for    these keys are merged together into an array, and this is done    recursively, so that if one of the values is an array itself, the    function will merge it with a corresponding entry in another array    too. If, however, the arrays have the same numeric key, the later    value will not overwrite the original value, but will be appended.            Parameters                    array1                      Initial array to merge.                                ...                      Variable list of arrays to recursively merge.                                     Return Values       An array of values resulted from merging the arguments together.            Examples            Example #1 array_merge_recursive() example       <?php$ar1\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0array(\"favorite\"\u00a0=>\u00a0\"red\"),\u00a05);$ar2\u00a0=\u00a0array(10,\u00a0\"color\"\u00a0=>\u00a0array(\"favorite\"\u00a0=>\u00a0\"green\",\u00a0\"blue\"));$result\u00a0=\u00a0array_merge_recursive($ar1,\u00a0$ar2);print_r($result);?>             The above example will output:       Array (     [color] => Array         (             [favorite] => Array                 (                     [0] => red                     [1] => green                 )              [0] => blue         )      [0] => 5     [1] => 10 )                      See Also            array_merge() - Merge one or more arrays"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-map.php","title":"array_map","description":"array_map   (PHP 4 >= 4.0.6, PHP 5)array_map \u2014 Applies the callback to the elements of the given arrays          Description       array array_map     ( callback $callback    , array $arr1    [, array $...   ] )        array_map() returns an array containing all    the elements of arr1 after applying the    callback function to each one.    The number of parameters that the callback    function accepts    should match the number of arrays    passed to the array_map()            Parameters                    callback                      Callback function to run for each element in each array.                                arr1                      An array to run through the callback function.                                array                      Variable list of array arguments to run through the        callback function.                                     Return Values       Returns an array containing all the elements of arr1    after applying the callback function to each one.            Examples            Example #1 array_map() example       <?phpfunction\u00a0cube($n){\u00a0\u00a0\u00a0\u00a0return($n\u00a0*\u00a0$n\u00a0*\u00a0$n);}$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);$b\u00a0=\u00a0array_map(\"cube\",\u00a0$a);print_r($b);?>                   This makes $b have:            Array (     [0] => 1     [1] => 8     [2] => 27     [3] => 64     [4] => 125 )                         Example #2 array_map() using a lambda function (as of PHP 5.3.0)       <?php$func\u00a0=\u00a0function($value)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0$value\u00a0*\u00a02;};print_r(array_map($func,\u00a0range(1,\u00a05)));?>               Array (     [0] => 2     [1] => 4     [2] => 6     [3] => 8     [4] => 10 )                         Example #3 array_map() - using more arrays       <?phpfunction\u00a0show_Spanish($n,\u00a0$m){\u00a0\u00a0\u00a0\u00a0return(\"The\u00a0number\u00a0$n\u00a0is\u00a0called\u00a0$m\u00a0in\u00a0Spanish\");}function\u00a0map_Spanish($n,\u00a0$m){\u00a0\u00a0\u00a0\u00a0return(array($n\u00a0=>\u00a0$m));}$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);$b\u00a0=\u00a0array(\"uno\",\u00a0\"dos\",\u00a0\"tres\",\u00a0\"cuatro\",\u00a0\"cinco\");$c\u00a0=\u00a0array_map(\"show_Spanish\",\u00a0$a,\u00a0$b);print_r($c);$d\u00a0=\u00a0array_map(\"map_Spanish\",\u00a0$a\u00a0,\u00a0$b);print_r($d);?>             The above example will output:       \/\/ printout of $c Array (     [0] => The number 1 is called uno in Spanish     [1] => The number 2 is called dos in Spanish     [2] => The number 3 is called tres in Spanish     [3] => The number 4 is called cuatro in Spanish     [4] => The number 5 is called cinco in Spanish )  \/\/ printout of $d Array (     [0] => Array         (             [1] => uno         )      [1] => Array         (             [2] => dos         )      [2] => Array         (             [3] => tres         )      [3] => Array         (             [4] => cuatro         )      [4] => Array         (             [5] => cinco         )  )                    Usually when using two or more arrays, they should be of equal length    because the callback function is applied in parallel to the corresponding    elements.    If the arrays are of unequal length, the shortest one will be extended    with empty elements.          An interesting use of this function is to construct an array of arrays,    which can be easily performed by using NULL    as the name of the callback function               Example #4 Creating an array of arrays       <?php$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);$b\u00a0=\u00a0array(\"one\",\u00a0\"two\",\u00a0\"three\",\u00a0\"four\",\u00a0\"five\");$c\u00a0=\u00a0array(\"uno\",\u00a0\"dos\",\u00a0\"tres\",\u00a0\"cuatro\",\u00a0\"cinco\");$d\u00a0=\u00a0array_map(null,\u00a0$a,\u00a0$b,\u00a0$c);print_r($d);?>             The above example will output:       Array (     [0] => Array         (             [0] => 1             [1] => one             [2] => uno         )      [1] => Array         (             [0] => 2             [1] => two             [2] => dos         )      [2] => Array         (             [0] => 3             [1] => three             [2] => tres         )      [3] => Array         (             [0] => 4             [1] => four             [2] => cuatro         )      [4] => Array         (             [0] => 5             [1] => five             [2] => cinco         )  )                    If the array argument contains string keys then the returned array    will contain string keys if and only if exactly one array is passed. If     more than one argument is passed then the returned array always has     integer keys.               Example #5 array_map() - with string keys       <?php$arr\u00a0=\u00a0array(\"stringkey\"\u00a0=>\u00a0\"value\");function\u00a0cb1($a)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0array\u00a0($a);}function\u00a0cb2($a,\u00a0$b)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0array\u00a0($a,\u00a0$b);}var_dump(array_map(\"cb1\",\u00a0$arr));var_dump(array_map(\"cb2\",\u00a0$arr,\u00a0$arr));var_dump(array_map(null,\u00a0\u00a0$arr));var_dump(array_map(null,\u00a0$arr,\u00a0$arr));?>             The above example will output:       array(1) {   [\"stringkey\"]=>   array(1) {     [0]=>     string(5) \"value\"   } } array(1) {   [0]=>   array(2) {     [0]=>     string(5) \"value\"     [1]=>     string(5) \"value\"   } } array(1) {   [\"stringkey\"]=>   string(5) \"value\" } array(1) {   [0]=>   array(2) {     [0]=>     string(5) \"value\"     [1]=>     string(5) \"value\"   } }                      See Also            array_filter() - Filters elements of an array using a callback function     array_reduce() - Iteratively reduce the array to a single value using a callback function     array_walk() - Apply a user function to every member of an array     create_function() - Create an anonymous (lambda-style) function     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-pad.php","title":"array_pad","description":"array_pad   (PHP 4, PHP 5)array_pad \u2014 Pad array to the specified length with a value          Description       array array_pad     ( array $input    , int $pad_size    , mixed $pad_value    )        array_pad() returns a copy of the    input padded to size specified by    pad_size with value    pad_value. If    pad_size is positive then the array is    padded on the right, if it&#039;s negative then on the left. If the    absolute value of pad_size is less than or    equal to the length of the input then no    padding takes place.    It is possible to add most 1048576 elements at a time.            Parameters                    input                      Initial array of values to pad.                                pad_size                      New size of the array.                                pad_value                      Value to pad if input is less than        pad_size.                                     Return Values       Returns a copy of the input padded to size specified    by pad_size with value     pad_value. If pad_size is     positive then the array is padded on the right, if it&#039;s negative then     on the left. If the absolute value of pad_size is less    than or equal to the length of the input then no    padding takes place.            Examples            Example #1 array_pad() example       <?php$input\u00a0=\u00a0array(12,\u00a010,\u00a09);$result\u00a0=\u00a0array_pad($input,\u00a05,\u00a00);\/\/\u00a0result\u00a0is\u00a0array(12,\u00a010,\u00a09,\u00a00,\u00a00)$result\u00a0=\u00a0array_pad($input,\u00a0-7,\u00a0-1);\/\/\u00a0result\u00a0is\u00a0array(-1,\u00a0-1,\u00a0-1,\u00a0-1,\u00a012,\u00a010,\u00a09)$result\u00a0=\u00a0array_pad($input,\u00a02,\u00a0\"noop\");\/\/\u00a0not\u00a0padded?>                       See Also            array_fill() - Fill an array with values     range() - Create an array containing a range of elements"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-multisort.php","title":"array_multisort","description":"array_multisort   (PHP 4, PHP 5)array_multisort \u2014 Sort multiple or multi-dimensional arrays        Description       bool array_multisort     ( array &$arr    [, mixed $arg = SORT_ASC    [, mixed $arg = SORT_REGULAR    [, mixed $...   ]]] )        array_multisort() can be used to sort several    arrays at once, or a multi-dimensional array by one or more    dimensions.          Associative (string) keys will be maintained, but numeric    keys will be re-indexed.            Parameters                    arr                      An array being sorted.                                arg                      Optionally another array, or sort options for the        previous array argument:         SORT_ASC,         SORT_DESC,         SORT_REGULAR,        SORT_NUMERIC,        SORT_STRING.                                ...                      Additional arg&#039;s.                                      Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 Sorting multiple arrays       <?php$ar1\u00a0=\u00a0array(10,\u00a0100,\u00a0100,\u00a00);$ar2\u00a0=\u00a0array(1,\u00a03,\u00a02,\u00a04);array_multisort($ar1,\u00a0$ar2);var_dump($ar1);var_dump($ar2);?>                   In this example, after sorting, the first array will contain 0,      10, 100, 100. The second array will contain 4, 1, 2, 3. The      entries in the second array corresponding to the identical      entries in the first array (100 and 100) were sorted as well.            array(4) {   [0]=> int(0)   [1]=> int(10)   [2]=> int(100)   [3]=> int(100) } array(4) {   [0]=> int(4)   [1]=> int(1)   [2]=> int(2)   [3]=> int(3) }                         Example #2 Sorting multi-dimensional array       <?php$ar\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array(\"10\",\u00a011,\u00a0100,\u00a0100,\u00a0\"a\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a01,\u00a0\u00a02,\u00a0\"2\",\u00a0\u00a0\u00a03,\u00a0\u00a0\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);array_multisort($ar[0],\u00a0SORT_ASC,\u00a0SORT_STRING,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ar[1],\u00a0SORT_NUMERIC,\u00a0SORT_DESC);var_dump($ar);?>                   In this example, after sorting, the first array will transform to      \"10\", 100, 100, 11, \"a\" (it was sorted as strings in ascending      order). The second will contain 1, 3, \"2\", 2, 1 (sorted as numbers,      in descending order).            array(2) {   [0]=> array(5) {     [0]=> string(2) \"10\"     [1]=> int(100)     [2]=> int(100)     [3]=> int(11)     [4]=> string(1) \"a\"   }   [1]=> array(5) {     [0]=> int(1)     [1]=> int(3)     [2]=> string(1) \"2\"     [3]=> int(2)     [4]=> int(1)   } }                         Example #3 Sorting database results           For this example, each element in the data      array represents one row in a table. This type of dataset is typical      of database records.                Example data:            volume | edition -------+--------     67 |       2     86 |       1     85 |       6     98 |       2     86 |       6     67 |       7                 The data as an array, called data. This would usually,      for example, be obtained by looping with mysql_fetch_assoc().            <?php$data[]\u00a0=\u00a0array('volume'\u00a0=>\u00a067,\u00a0'edition'\u00a0=>\u00a02);$data[]\u00a0=\u00a0array('volume'\u00a0=>\u00a086,\u00a0'edition'\u00a0=>\u00a01);$data[]\u00a0=\u00a0array('volume'\u00a0=>\u00a085,\u00a0'edition'\u00a0=>\u00a06);$data[]\u00a0=\u00a0array('volume'\u00a0=>\u00a098,\u00a0'edition'\u00a0=>\u00a02);$data[]\u00a0=\u00a0array('volume'\u00a0=>\u00a086,\u00a0'edition'\u00a0=>\u00a06);$data[]\u00a0=\u00a0array('volume'\u00a0=>\u00a067,\u00a0'edition'\u00a0=>\u00a07);?>                   In this example, we will order by volume descending,      edition ascending.                We have an array of rows, but array_multisort()      requires an array of columns, so we use the below code to obtain the      columns, then perform the sorting.            <?php\/\/\u00a0Obtain\u00a0a\u00a0list\u00a0of\u00a0columnsforeach\u00a0($data\u00a0as\u00a0$key\u00a0=>\u00a0$row)\u00a0{\u00a0\u00a0\u00a0\u00a0$volume[$key]\u00a0\u00a0=\u00a0$row['volume'];\u00a0\u00a0\u00a0\u00a0$edition[$key]\u00a0=\u00a0$row['edition'];}\/\/\u00a0Sort\u00a0the\u00a0data\u00a0with\u00a0volume\u00a0descending,\u00a0edition\u00a0ascending\/\/\u00a0Add\u00a0$data\u00a0as\u00a0the\u00a0last\u00a0parameter,\u00a0to\u00a0sort\u00a0by\u00a0the\u00a0common\u00a0keyarray_multisort($volume,\u00a0SORT_DESC,\u00a0$edition,\u00a0SORT_ASC,\u00a0$data);?>                   The dataset is now sorted, and will look like this:            volume | edition -------+--------     98 |       2     86 |       1     86 |       6     85 |       6     67 |       2     67 |       7                         Example #4 Case insensitive sorting           Both SORT_STRING and      SORT_REGULAR are case sensitive, strings      starting with a capital letter will come before strings starting      with a lowercase letter.                To perform a case insensitive search, force the sorting order to be      determined by a lowercase copy of the original array.            <?php$array\u00a0=\u00a0array('Alpha',\u00a0'atomic',\u00a0'Beta',\u00a0'bank');$array_lowercase\u00a0=\u00a0array_map('strtolower',\u00a0$array);array_multisort($array_lowercase,\u00a0SORT_ASC,\u00a0SORT_STRING,\u00a0$array);print_r($array);?>             The above example will output:       Array (     [0] => Alpha     [1] => atomic     [2] => bank     [3] => Beta )                      See Also            usort() - Sort an array by values using a user-defined comparison function     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-pop.php","title":"array_pop","description":"array_pop   (PHP 4, PHP 5)array_pop \u2014 Pop the element off the end of array          Description       mixed array_pop     ( array &$array    )        array_pop() pops and returns the last value of    the array, shortening the    array by one element.    If array is empty (or is not an array),    NULL will be returned. Will additionally produce a    Warning    when called on a non-array.      Note: This function will reset() the array pointer of the input array after use.         Parameters                    array                      The array to get the value from.                                     Return Values       Returns the last value of array.    If array is empty (or is not an array),    NULL will be returned.            Examples            Example #1 array_pop() example       <?php$stack\u00a0=\u00a0array(\"orange\",\u00a0\"banana\",\u00a0\"apple\",\u00a0\"raspberry\");$fruit\u00a0=\u00a0array_pop($stack);print_r($stack);?>                   After this, $stack will have only 3 elements:            Array (     [0] => orange     [1] => banana     [2] => apple )                 and raspberry will be assigned to      $fruit.                     See Also            array_push() - Push one or more elements onto the end of array     array_shift() - Shift an element off the beginning of array     array_unshift() - Prepend one or more elements to the beginning of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-product.php","title":"array_product","description":"array_product   (PHP 5 >= 5.1.0)array_product \u2014 Calculate the product of values in an array        Description       number array_product     ( array $array    )        array_product() returns the product of values    in an array.           Parameters                    array                      The array.                                    Return Values       Returns the product as an integer or float.           Examples            Example #1 array_product() examples       <?php$a\u00a0=\u00a0array(2,\u00a04,\u00a06,\u00a08);echo\u00a0\"product(a)\u00a0=\u00a0\"\u00a0.\u00a0array_product($a)\u00a0.\u00a0\"\\n\";echo\u00a0\"product(array())\u00a0=\u00a0\"\u00a0.\u00a0array_product(array())\u00a0.\u00a0\"\\n\";?>             The above example will output:       product(a) = 384 product(array()) = 1"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-merge.php","title":"array_merge","description":"array_merge   (PHP 4, PHP 5)array_merge \u2014 Merge one or more arrays        Description       array array_merge     ( array $array1    [, array $...   ] )        Merges the elements of one or more arrays together so that the values of    one are appended to the end of the previous one. It returns the resulting    array.          If the input arrays have the same string keys, then the later value for    that key will overwrite the previous one.  If, however, the arrays    contain numeric keys, the later value will not overwrite the original value, but will be    appended.          Values in the input array with numeric keys will be renumbered with    incrementing keys starting from zero in the result array.           Parameters                    array1                      Initial array to merge.                                ...                      Variable list of arrays to merge.                                    Return Values       Returns the resulting array.           Changelog                                 Version        Description                                    5.0.0                 Warning                     The behavior of array_merge() was modified in PHP 5. Unlike PHP 4, array_merge()           now only accepts parameters of type array. However, you can use typecasting           to merge other types. See the example below for details.                                           Example #1 array_merge() PHP 5 example              <?php$beginning\u00a0=\u00a0'foo';$end\u00a0=\u00a0array(1\u00a0=>\u00a0'bar');$result\u00a0=\u00a0array_merge((array)$beginning,\u00a0(array)$end);print_r($result);?>                           The above example will output:                      Array     (         [0] => foo         [1] => bar     )                                                                                      Examples            Example #2 array_merge() example       <?php$array1\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0\"red\",\u00a02,\u00a04);$array2\u00a0=\u00a0array(\"a\",\u00a0\"b\",\u00a0\"color\"\u00a0=>\u00a0\"green\",\u00a0\"shape\"\u00a0=>\u00a0\"trapezoid\",\u00a04);$result\u00a0=\u00a0array_merge($array1,\u00a0$array2);print_r($result);?>             The above example will output:       Array (     [color] => green     [0] => 2     [1] => 4     [2] => a     [3] => b     [shape] => trapezoid     [4] => 4 )                         Example #3 Simple array_merge() example       <?php$array1\u00a0=\u00a0array();$array2\u00a0=\u00a0array(1\u00a0=>\u00a0\"data\");$result\u00a0=\u00a0array_merge($array1,\u00a0$array2);?>                   Don&#039;t forget that numeric keys will be renumbered!            Array (     [0] => data )                 If you want to append array elements from the second array to the      first array while not overwriting the elements from the first      array and not re-indexing, use the      + array union operator:            <?php$array1\u00a0=\u00a0array(0\u00a0=>\u00a0'zero_a',\u00a02\u00a0=>\u00a0'two_a',\u00a03\u00a0=>\u00a0'three_a');$array2\u00a0=\u00a0array(1\u00a0=>\u00a0'one_b',\u00a03\u00a0=>\u00a0'three_b',\u00a04\u00a0=>\u00a0'four_b');$result\u00a0=\u00a0$array1\u00a0+\u00a0$array2;var_dump($result);?>                   The keys from the first array will be preserved. If an array key      exists in both arrays, then the element from the first array will      be used and the matching key&#039;s element from the second array will      be ignored.            array(5) {   [0]=>   string(6) \"zero_a\"   [2]=>   string(5) \"two_a\"   [3]=>   string(7) \"three_a\"   [1]=>   string(5) \"one_b\"   [4]=>   string(6) \"four_b\" }                     See Also            array_merge_recursive() - Merge two or more arrays recursively     array_combine() - Creates an array by using one array for keys and another for its values     array operators"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-push.php","title":"array_push","description":"array_push   (PHP 4, PHP 5)array_push \u2014 Push one or more elements onto the end of array        Description       int array_push     ( array &$array    , mixed $var    [, mixed $...   ] )        array_push() treats array as a    stack, and pushes the passed variables onto the end of    array. The length of array    increases by the number of variables pushed. Has the same effect as:      <?php$array[]\u00a0=\u00a0$var;?>           repeated for each var.      Note:          If you use array_push() to add one element to the     array it&#039;s better to use $array[] =  because in that     way there is no overhead of calling a function.          Note:          array_push() will raise a warning if the first     argument is not an array. This differs from the     $var[] behaviour where a new array is created.               Parameters                    array                      The input array.                                var                      The pushed value.                                    Return Values       Returns the new number of elements in the array.           Examples            Example #1 array_push() example       <?php$stack\u00a0=\u00a0array(\"orange\",\u00a0\"banana\");array_push($stack,\u00a0\"apple\",\u00a0\"raspberry\");print_r($stack);?>             The above example will output:       Array (     [0] => orange     [1] => banana     [2] => apple     [3] => raspberry )                     See Also            array_pop() - Pop the element off the end of array     array_shift() - Shift an element off the beginning of array     array_unshift() - Prepend one or more elements to the beginning of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-reduce.php","title":"array_reduce","description":"array_reduce   (PHP 4 >= 4.0.5, PHP 5)array_reduce \u2014 Iteratively reduce the array to a single value using a callback function        Description       mixed array_reduce     ( array $input    , callback $function    [, mixed $initial = NULL   ] )        array_reduce() applies iteratively the    function function to the elements of the    array input, so as to reduce the array to    a single value.           Parameters                    input                      The input array.                                function                      The callback function.                                initial                      If the optional initial is available, it will        be used at the beginning of the process, or as a final result in case        the array is empty.                                    Return Values       Returns the resulting value.          If the array is empty and initial is not passed,    array_reduce() returns NULL.           Changelog                                 Version        Description                                    5.3.0                 Changed initial to allow mixed, previously integer.                                           Examples            Example #1 array_reduce() example       <?phpfunction\u00a0rsum($v,\u00a0$w){\u00a0\u00a0\u00a0\u00a0$v\u00a0+=\u00a0$w;\u00a0\u00a0\u00a0\u00a0return\u00a0$v;}function\u00a0rmul($v,\u00a0$w){\u00a0\u00a0\u00a0\u00a0$v\u00a0*=\u00a0$w;\u00a0\u00a0\u00a0\u00a0return\u00a0$v;}$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);$x\u00a0=\u00a0array();$b\u00a0=\u00a0array_reduce($a,\u00a0\"rsum\");$c\u00a0=\u00a0array_reduce($a,\u00a0\"rmul\",\u00a010);$d\u00a0=\u00a0array_reduce($x,\u00a0\"rsum\",\u00a0\"No\u00a0data\u00a0to\u00a0reduce\");?>                   This will result in $b containing      15, $c containing      1200 (= 10*1*2*3*4*5), and $d      containing No data to reduce.                    See Also            array_filter() - Filters elements of an array using a callback function     array_map() - Applies the callback to the elements of the given arrays     array_unique() - Removes duplicate values from an array     array_count_values() - Counts all the values of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-replace-recursive.php","title":"array_replace_recursive","description":"array_replace_recursive   (PHP 5 >= 5.3.0)array_replace_recursive \u2014 Replaces elements from passed arrays into the first array recursively        Description       array array_replace_recursive     ( array &$array    , array &$array1    [, array &$...   ] )        array_replace_recursive() replaces the values of the first    array with the same values from all the following    arrays. If a key from the first array exists in the second array, its value    will be replaced by the value from the second array. If the key exists in the    second array, and not the first, it will be created in the first array.    If a key only exists in the first array, it will be left as is.     If several arrays are passed for replacement, they will be processed    in order, the later array overwriting the previous values.          array_replace_recursive() is recursive : it will recurse into    arrays and apply the same process to the inner value.          When the value in array is scalar, it will be replaced    by the value in array1, may it be scalar or array.    When the value in array and array1    are both arrays, array_replace_recursive() will replace    their respective value recursively.           Parameters                    array                      The array in which elements are replaced.                                array1                      The array from which elements will be extracted.                                ...                      Optional. More arrays from which elements will be extracted.                                    Return Values       Returns an array, or NULL if an error occurs.           Examples            Example #1 array_replace_recursive() example       <?php$base\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array(\u00a0\"orange\")\u00a0,\u00a0'berries'\u00a0=>\u00a0array(\"blackberry\",\u00a0\"raspberry\"),\u00a0);$replacements\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array('pineapple'),\u00a0'berries'\u00a0=>\u00a0array('blueberry'));$basket\u00a0=\u00a0array_replace_recursive($base,\u00a0$replacements);print_r($basket);$basket\u00a0=\u00a0array_replace($base,\u00a0$replacements);print_r($basket);?>             The above example will output:       Array (     [citrus] => Array         (             [0] => pineapple         )      [berries] => Array         (             [0] => blueberry             [1] => raspberry         )  ) Array (     [citrus] => Array         (             [0] => pineapple         )      [berries] => Array         (             [0] => blueberry         )  )                    Example #2 array_replace_recursive() and recursive behavior       <?php$base\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array(\"orange\")\u00a0,\u00a0'berries'\u00a0=>\u00a0array(\"blackberry\",\u00a0\"raspberry\"),\u00a0'others'\u00a0=>\u00a0'banana'\u00a0);$replacements\u00a0=\u00a0array('citrus'\u00a0=>\u00a0'pineapple',\u00a0'berries'\u00a0=>\u00a0array('blueberry'),\u00a0'others'\u00a0=>\u00a0array('litchis'));$replacements2\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array('pineapple'),\u00a0'berries'\u00a0=>\u00a0array('blueberry'),\u00a0'others'\u00a0=>\u00a0'litchis');$basket\u00a0=\u00a0array_replace_recursive($base,\u00a0$replacements,\u00a0$replacements2);print_r($basket);?>             The above example will output:       Array (     [citrus] => Array         (             [0] => pineapple         )      [berries] => Array         (             [0] => blueberry             [1] => raspberry         )      [others] => litchis )                     See Also            array_replace() - Replaces elements from passed arrays into the first array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-replace.php","title":"array_replace","description":"array_replace   (PHP 5 >= 5.3.0)array_replace \u2014 Replaces elements from passed arrays into the first array        Description       array array_replace     ( array &$array    , array &$array1    [, array &$...   ] )        array_replace() replaces the values of the first    array with the same values from all the following    arrays. If a key from the first array exists in the second array, its value    will be replaced by the value from the second array. If the key exists in the    second array, and not the first, it will be created in the first array.    If a key only exists in the first array, it will be left as is.    If several arrays are passed for replacement, they will be processed    in order, the later arrays overwriting the previous values.          array_replace() is not recursive : it will replace    values in the first array by whatever type is in the second array.           Parameters                    array                      The array in which elements are replaced.                                array1                      The array from which elements will be extracted.                                ...                      More arrays from which elements will be extracted.        Values from later arrays overwrite the previous values.                                    Return Values       Returns an array, or NULL if an error occurs.           Examples            Example #1 array_replace() example       <?php$base\u00a0=\u00a0array(\"orange\",\u00a0\"banana\",\u00a0\"apple\",\u00a0\"raspberry\");$replacements\u00a0=\u00a0array(0\u00a0=>\u00a0\"pineapple\",\u00a04\u00a0=>\u00a0\"cherry\");$replacements2\u00a0=\u00a0array(0\u00a0=>\u00a0\"grape\");$basket\u00a0=\u00a0array_replace($base,\u00a0$replacements,\u00a0$replacements2);print_r($basket);?>             The above example will output:       Array (     [0] => grape     [1] => banana     [2] => apple     [3] => raspberry     [4] => cherry )                     See Also            array_replace_recursive() - Replaces elements from passed arrays into the first array recursively"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-rand.php","title":"array_rand","description":"array_rand   (PHP 4, PHP 5)array_rand \u2014 Pick one or more random entries out of an array        Description       mixed array_rand     ( array $input    [, int $num_req = 1   ] )        Picks one or more random entries out of an array, and returns the    key (or keys) of the random entries.           Parameters                    input                      The input array.                                num_req                      Specifies how many entries you want to pick. Trying to pick more        elements than there are in the array will result in an        E_WARNING level error.                                    Return Values       If you are picking only one entry, array_rand()    returns the key for a random entry. Otherwise, it returns an array    of keys for the random entries. This is done so that you can pick    random keys as well as values out of the array.           Changelog                                 Version        Description                                    5.2.10                 The resulting array of keys is no longer shuffled.                       4.2.0The random number generator is seeded automatically.                            Examples            Example #1 array_rand() example       <?php$input\u00a0=\u00a0array(\"Neo\",\u00a0\"Morpheus\",\u00a0\"Trinity\",\u00a0\"Cypher\",\u00a0\"Tank\");$rand_keys\u00a0=\u00a0array_rand($input,\u00a02);echo\u00a0$input[$rand_keys[0]]\u00a0.\u00a0\"\\n\";echo\u00a0$input[$rand_keys[1]]\u00a0.\u00a0\"\\n\";?>                       See Also            shuffle() - Shuffle an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-reverse.php","title":"array_reverse","description":"array_reverse   (PHP 4, PHP 5)array_reverse \u2014 Return an array with elements in reverse order        Description       array array_reverse     ( array $array    [, bool $preserve_keys = false   ] )        Takes an input array and returns a new array with    the order of the elements reversed.           Parameters                    array                      The input array.                                preserve_keys                      If set to TRUE numeric keys are preserved.         Non-numeric keys are not affected by this setting and will always be preserved.                                    Return Values       Returns the reversed array.           Changelog                                 Version        Description                                    4.0.3                 The preserve_keys parameter was added.                                           Examples            Example #1 array_reverse() example       <?php$input\u00a0\u00a0=\u00a0array(\"php\",\u00a04.0,\u00a0array(\"green\",\u00a0\"red\"));$result\u00a0=\u00a0array_reverse($input);$result_keyed\u00a0=\u00a0array_reverse($input,\u00a0true);?>                   This makes both $result and      $result_keyed have the same elements, but      note the difference between the keys. The printout of      $result and      $result_keyed will be:            Array (     [0] => Array         (             [0] => green             [1] => red         )      [1] => 4     [2] => php ) Array (     [2] => Array         (             [0] => green             [1] => red         )      [1] => 4     [0] => php )                     See Also            array_flip() - Exchanges all keys with their associated values in an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-shift.php","title":"array_shift","description":"array_shift   (PHP 4, PHP 5)array_shift \u2014 Shift an element off the beginning of array        Description       mixed array_shift     ( array &$array    )        array_shift() shifts the first value of the    array off and returns it, shortening the    array by one element and moving everything    down. All numerical array keys will be modified to start counting from zero    while literal keys won&#039;t be touched.      Note: This function will reset() the array pointer of the input array after use.        Parameters                    array                      The input array.                                    Return Values       Returns the shifted value, or NULL if array is    empty or is not an array.           Examples            Example #1 array_shift() example       <?php$stack\u00a0=\u00a0array(\"orange\",\u00a0\"banana\",\u00a0\"apple\",\u00a0\"raspberry\");$fruit\u00a0=\u00a0array_shift($stack);print_r($stack);?>             The above example will output:       Array (     [0] => banana     [1] => apple     [2] => raspberry )                 and orange will be assigned to      $fruit.                    See Also            array_unshift() - Prepend one or more elements to the beginning of an array     array_push() - Push one or more elements onto the end of array     array_pop() - Pop the element off the end of array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-slice.php","title":"array_slice","description":"array_slice   (PHP 4, PHP 5)array_slice \u2014 Extract a slice of the array        Description       array array_slice     ( array $array    , int $offset    [, int $length    [, bool $preserve_keys = false   ]] )        array_slice() returns the sequence of elements    from the array array as specified by the    offset and length    parameters.      Note: This function will reset() the array pointer of the input array after use.        Parameters                    array                      The input array.                                offset                      If offset is non-negative, the sequence will        start at that offset in the array.  If        offset is negative, the sequence will        start that far from the end of the array.                                length                      If length is given and is positive, then        the sequence will have up to that many elements in it. If the array        is shorter than the length, then only the        available array elements will be present. If        length is given and is negative then the        sequence will stop that many elements from the end of the        array. If it is omitted, then the sequence will have everything        from offset up until the end of the        array.                                preserve_keys                      Note that array_slice() will reorder and reset the        array indices by default. You can change this behaviour by setting        preserve_keys to TRUE.                                    Return Values       Returns the slice.            Changelog                                 Version        Description                                    5.0.2                 The optional preserve_keys parameter was added.                                           Examples            Example #1 array_slice() examples       <?php$input\u00a0=\u00a0array(\"a\",\u00a0\"b\",\u00a0\"c\",\u00a0\"d\",\u00a0\"e\");$output\u00a0=\u00a0array_slice($input,\u00a02);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"c\",\u00a0\"d\",\u00a0and\u00a0\"e\"$output\u00a0=\u00a0array_slice($input,\u00a0-2,\u00a01);\u00a0\u00a0\/\/\u00a0returns\u00a0\"d\"$output\u00a0=\u00a0array_slice($input,\u00a00,\u00a03);\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"a\",\u00a0\"b\",\u00a0and\u00a0\"c\"\/\/\u00a0note\u00a0the\u00a0differences\u00a0in\u00a0the\u00a0array\u00a0keysprint_r(array_slice($input,\u00a02,\u00a0-1));print_r(array_slice($input,\u00a02,\u00a0-1,\u00a0true));?>             The above example will output:       Array (     [0] => c     [1] => d ) Array (     [2] => c     [3] => d )                     See Also            array_splice() - Remove a portion of the array and replace it with something else     unset() - Unset a given variable     array_chunk() - Split an array into chunks"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-search.php","title":"array_search","description":"array_search   (PHP 4 >= 4.0.5, PHP 5)array_search \u2014 Searches the array for a given value and returns the corresponding key if successful        Description       mixed array_search     ( mixed $needle    , array $haystack    [, bool $strict = false   ] )        Searches haystack for needle.           Parameters                    needle                      The searched value.              Note:                  If needle is a string, the comparison is done         in a case-sensitive manner.                                        haystack                      The array.                                strict                      If the third parameter strict is set to TRUE        then the array_search() function will search for        identical elements in the        haystack. This means it will also check the        types of the        needle in the haystack,        and objects must be the same instance.                                    Return Values       Returns the key for needle if it is found in the    array, FALSE otherwise.          If needle is found in haystack    more than once, the first matching key is returned. To return the keys for    all matching values, use array_keys() with the optional    search_value parameter instead.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.        Changelog                                 Version        Description                                    4.2.0                 Prior to PHP 4.2.0, array_search() returns NULL         on failure instead of FALSE.                                           Examples            Example #1 array_search() example       <?php$array\u00a0=\u00a0array(0\u00a0=>\u00a0'blue',\u00a01\u00a0=>\u00a0'red',\u00a02\u00a0=>\u00a0'green',\u00a03\u00a0=>\u00a0'red');$key\u00a0=\u00a0array_search('green',\u00a0$array);\u00a0\/\/\u00a0$key\u00a0=\u00a02;$key\u00a0=\u00a0array_search('red',\u00a0$array);\u00a0\u00a0\u00a0\/\/\u00a0$key\u00a0=\u00a01;?>                       See Also            array_keys() - Return all the keys or a subset of the keys of an array     array_values() - Return all the values of an array     array_key_exists() - Checks if the given key or index exists in the array     in_array() - Checks if a value exists in an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-udiff-assoc.php","title":"array_udiff_assoc","description":"array_udiff_assoc   (PHP 5)array_udiff_assoc \u2014 Computes the difference of arrays with additional index check, compares data by a callback function        Description       array array_udiff_assoc     ( array $array1    , array $array2    [, array $ ...    ], callback $data_compare_func    )        Computes the difference of arrays with additional index check, compares    data by a callback function.      Note:          Please note that this function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using, for example,     array_udiff_assoc($array1[0], $array2[0], \"some_comparison_func\");.               Parameters                    array1                      The first array.                                array2                      The second array.                                data_compare_func                      The callback comparison function.                      The user supplied callback function is used for comparison.        It must return an integer less than, equal to, or greater than zero if        the first argument is considered to be respectively less than, equal        to, or greater than the second.                                    Return Values       array_udiff_assoc() returns an array    containing all the values from array1    that are not present in any of the other arguments.    Note that the keys are used in the comparison unlike    array_diff() and array_udiff().    The comparison of arrays&#039; data is performed by using an user-supplied    callback. In this aspect the behaviour is opposite to the behaviour of    array_diff_assoc() which uses internal function for    comparison.           Examples            Example #1 array_udiff_assoc() example       <?phpclass\u00a0cr\u00a0{\u00a0\u00a0\u00a0\u00a0private\u00a0$priv_member;\u00a0\u00a0\u00a0\u00a0function\u00a0cr($val)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_member\u00a0=\u00a0$val;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_cr($a,\u00a0$b)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a->priv_member\u00a0===\u00a0$b->priv_member)\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a->priv_member\u00a0>\u00a0$b->priv_member)?\u00a01:-1;\u00a0\u00a0\u00a0\u00a0}}$a\u00a0=\u00a0array(\"0.1\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(12),\u00a00\u00a0=>\u00a0new\u00a0cr(23),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);$b\u00a0=\u00a0array(\"0.2\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(22),\u00a00\u00a0=>\u00a0new\u00a0cr(3),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);$result\u00a0=\u00a0array_udiff_assoc($a,\u00a0$b,\u00a0array(\"cr\",\u00a0\"comp_func_cr\"));print_r($result);?>             The above example will output:       Array (     [0.1] => cr Object         (             [priv_member:private] => 9         )      [0.5] => cr Object         (             [priv_member:private] => 12         )      [0] => cr Object         (             [priv_member:private] => 23         ) )                    In our example above you see the \"1\" => new cr(4)    pair is present in both arrays and thus it is not in the output from the    function.           See Also            array_diff() - Computes the difference of arrays     array_diff_assoc() - Computes the difference of arrays with additional index check     array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_uintersect() - Computes the intersection of arrays, compares data by a callback function     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-sum.php","title":"array_sum","description":"array_sum   (PHP 4 >= 4.0.4, PHP 5)array_sum \u2014 Calculate the sum of values in an array        Description       number array_sum     ( array $array    )        array_sum() returns the sum of values in an array.           Parameters                    array                      The input array.                                    Return Values       Returns the sum of values as an integer or float.           Changelog                                 Version        Description                                    4.2.1                 PHP versions prior to 4.2.1 modified the passed array itself and         converted strings to numbers (which most of the time converted them         to zero, depending on their value).                                           Examples            Example #1 array_sum() examples       <?php$a\u00a0=\u00a0array(2,\u00a04,\u00a06,\u00a08);echo\u00a0\"sum(a)\u00a0=\u00a0\"\u00a0.\u00a0array_sum($a)\u00a0.\u00a0\"\\n\";$b\u00a0=\u00a0array(\"a\"\u00a0=>\u00a01.2,\u00a0\"b\"\u00a0=>\u00a02.3,\u00a0\"c\"\u00a0=>\u00a03.4);echo\u00a0\"sum(b)\u00a0=\u00a0\"\u00a0.\u00a0array_sum($b)\u00a0.\u00a0\"\\n\";?>             The above example will output:       sum(a) = 20 sum(b) = 6.9"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-splice.php","title":"array_splice","description":"array_splice   (PHP 4, PHP 5)array_splice \u2014 Remove a portion of the array and replace it with something else        Description       array array_splice     ( array &$input    , int $offset    [, int $length = 0    [, mixed $replacement   ]] )        Removes the elements designated by offset and    length from the input array,    and replaces them with the elements of the    replacement array, if supplied.          Note that numeric keys in input are not preserved.      Note:          If replacement is not an array, it will be     typecast     to one (i.e. (array) $parameter). This may result in unexpected     behavior when using an object or NULL replacement.                Parameters                    input                      The input array.                                offset                      If offset is positive then the start of removed        portion is at that offset from the beginning of the        input array.  If offset        is negative then it starts that far from the end of the        input array.                                length                      If length is omitted, removes everything        from offset to the end of the array.  If        length is specified and is positive, then        that many elements will be removed. If        length is specified and is negative then        the end of the removed portion will be that many elements from        the end of the array.  Tip: to remove everything from        offset to the end of the array when        replacement is also specified, use        count($input) for        length.                                replacement                      If replacement array is specified, then the        removed elements are replaced with elements from this array.                      If offset and length        are such that nothing is removed, then the elements from the        replacement array are inserted in the place        specified by the offset. Note that keys in        replacement array are not preserved.                      If replacement is just one element it is        not necessary to put array()        around it, unless the element is an array itself, an object or NULL.                                    Return Values       Returns the array consisting of the extracted elements.           Examples            Example #1 array_splice() examples       <?php$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");array_splice($input,\u00a02);\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"green\")$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");array_splice($input,\u00a01,\u00a0-1);\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"yellow\")$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");array_splice($input,\u00a01,\u00a0count($input),\u00a0\"orange\");\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"orange\")$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");array_splice($input,\u00a0-1,\u00a01,\u00a0array(\"black\",\u00a0\"maroon\"));\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"green\",\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"blue\",\u00a0\"black\",\u00a0\"maroon\")$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");array_splice($input,\u00a03,\u00a00,\u00a0\"purple\");\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"green\",\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"blue\",\u00a0\"purple\",\u00a0\"yellow\");?>                           Example #2 array_splice() examples           The following statements change the values of $input      the same way:            <?phparray_push($input,\u00a0$x,\u00a0$y);array_splice($input,\u00a0count($input),\u00a00,\u00a0array($x,\u00a0$y));array_pop($input);array_splice($input,\u00a0-1);array_shift($input);array_splice($input,\u00a00,\u00a01);array_unshift($input,\u00a0$x,\u00a0$y);array_splice($input,\u00a00,\u00a00,\u00a0array($x,\u00a0$y));$input[$x]\u00a0=\u00a0$y;\u00a0\/\/\u00a0for\u00a0arrays\u00a0where\u00a0key\u00a0equals\u00a0offsetarray_splice($input,\u00a0$x,\u00a01,\u00a0$y);?>                       See Also            array_slice() - Extract a slice of the array     unset() - Unset a given variable     array_merge() - Merge one or more arrays"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-udiff-uassoc.php","title":"array_udiff_uassoc","description":"array_udiff_uassoc   (PHP 5)array_udiff_uassoc \u2014 Computes the difference of arrays with additional index check, compares data and indexes by a callback function        Description       array array_udiff_uassoc     ( array $array1    , array $array2    [, array $ ...    ], callback $data_compare_func    , callback $key_compare_func    )        Computes the difference of arrays with additional index check, compares    data and indexes by a callback function.          Note that the keys are used in the comparison unlike    array_diff() and array_udiff().           Parameters                    array1                      The first array.                                array2                      The second array.                                data_compare_func                      The callback comparison function.                      The user supplied callback function is used for comparison.        It must return an integer less than, equal to, or greater than zero if        the first argument is considered to be respectively less than, equal        to, or greater than the second.                      The comparison of arrays&#039; data is performed by using an user-supplied        callback : data_compare_func. In this aspect        the behaviour is opposite to the behaviour of        array_diff_assoc() which uses internal function for        comparison.                                key_compare_func                      The comparison of keys (indices) is done also by the callback function        key_compare_func. This behaviour is unlike what        array_udiff_assoc() does, since the latter compares        the indices by using an internal function.                                    Return Values       Returns an array containing all the values from    array1 that are not present in any of the other    arguments.           Examples            Example #1 array_udiff_uassoc() example       <?phpclass\u00a0cr\u00a0{\u00a0\u00a0\u00a0\u00a0private\u00a0$priv_member;\u00a0\u00a0\u00a0\u00a0function\u00a0cr($val)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_member\u00a0=\u00a0$val;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_cr($a,\u00a0$b)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a->priv_member\u00a0===\u00a0$b->priv_member)\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a->priv_member\u00a0>\u00a0$b->priv_member)?\u00a01:-1;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_key($a,\u00a0$b)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0===\u00a0$b)\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0>\u00a0$b)?\u00a01:-1;\u00a0\u00a0\u00a0\u00a0}}$a\u00a0=\u00a0array(\"0.1\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(12),\u00a00\u00a0=>\u00a0new\u00a0cr(23),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);$b\u00a0=\u00a0array(\"0.2\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(22),\u00a00\u00a0=>\u00a0new\u00a0cr(3),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);$result\u00a0=\u00a0array_udiff_uassoc($a,\u00a0$b,\u00a0array(\"cr\",\u00a0\"comp_func_cr\"),\u00a0array(\"cr\",\u00a0\"comp_func_key\"));print_r($result);?>             The above example will output:       Array (     [0.1] => cr Object         (             [priv_member:private] => 9         )      [0.5] => cr Object         (             [priv_member:private] => 12         )      [0] => cr Object         (             [priv_member:private] => 23         ) )                    In our example above you see the \"1\" => new cr(4)    pair is present in both arrays and thus it is not in the output from the    function. Keep in mind that you have to supply 2 callback functions.           Notes   Note:          Please note that this function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using, for example,     array_udiff_uassoc($array1[0], $array2[0], \"data_compare_func\",     \"key_compare_func\");.               See Also            array_diff() - Computes the difference of arrays     array_diff_assoc() - Computes the difference of arrays with additional index check     array_udiff() - Computes the difference of arrays by using a callback function for data comparison     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_uintersect() - Computes the intersection of arrays, compares data by a callback function     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-uintersect-assoc.php","title":"array_uintersect_assoc","description":"array_uintersect_assoc   (PHP 5)array_uintersect_assoc \u2014 Computes the intersection of arrays with additional index check, compares data by a callback function        Description       array array_uintersect_assoc     ( array $array1    , array $array2    [, array $ ...    ], callback $data_compare_func    )        Computes the intersection of arrays with additional index check, compares    data by a callback function.          Note that the keys are used in the comparison unlike in    array_uintersect().    The data is compared by using a callback function.           Parameters                    array1                      The first array.                                array2                      The second array.                                data_compare_func                      For comparison is used the user supplied callback function.        It must return an integer less than, equal        to, or greater than zero if the first argument is considered to        be respectively less than, equal to, or greater than the        second.                                    Return Values       Returns an array containing all the values of    array1 that are present in all the arguments.           Examples            Example #1 array_uintersect_assoc() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");print_r(array_uintersect_assoc($array1,\u00a0$array2,\u00a0\"strcasecmp\"));?>             The above example will output:       Array (     [a] => green )                     See Also            array_uintersect() - Computes the intersection of arrays, compares data by a callback function     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-uintersect-uassoc.php","title":"array_uintersect_uassoc","description":"array_uintersect_uassoc   (PHP 5)array_uintersect_uassoc \u2014 Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions        Description       array array_uintersect_uassoc     ( array $array1    , array $array2    [, array $ ...    ], callback $data_compare_func    , callback $key_compare_func    )        Computes the intersection of arrays with additional index check, compares    data and indexes by a callback functions Note that the keys are used in    the comparison unlike in array_uintersect().    Both the data and the indexes are compared by using separate callback functions.           Parameters                    array1                      The first array.                                array2                      The second array.                                data_compare_func                      For comparison is used the user supplied callback function.        It must return an integer less than, equal        to, or greater than zero if the first argument is considered to        be respectively less than, equal to, or greater than the        second.                                key_compare_func                      Key comparison callback function.                                    Return Values       Returns an array containing all the values of    array1 that are present in all the arguments.           Examples            Example #1 array_uintersect_uassoc() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");print_r(array_uintersect_uassoc($array1,\u00a0$array2,\u00a0\"strcasecmp\",\u00a0\"strcasecmp\"));?>             The above example will output:       Array (     [a] => green     [b] => brown )                     See Also            array_uintersect() - Computes the intersection of arrays, compares data by a callback function     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-uintersect.php","title":"array_uintersect","description":"array_uintersect   (PHP 5)array_uintersect \u2014 Computes the intersection of arrays, compares data by a callback function        Description       array array_uintersect     ( array $array1    , array $array2    [, array $ ...    ], callback $data_compare_func    )        Computes the intersection of arrays, compares data by a callback function.           Parameters                    array1                      The first array.                                array2                      The second array.                                data_compare_func                      The callback comparison function.                      The user supplied callback function is used for comparison.        It must return an integer less than, equal to, or greater than zero if        the first argument is considered to be respectively less than, equal        to, or greater than the second.                                    Return Values       Returns an array containing all the values of array1    that are present in all the arguments.           Examples            Example #1 array_uintersect() example       <?php$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");print_r(array_uintersect($array1,\u00a0$array2,\u00a0\"strcasecmp\"));?>             The above example will output:       Array (     [a] => green     [b] => brown     [0] => red )                     See Also            array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-udiff.php","title":"array_udiff","description":"array_udiff   (PHP 5)array_udiff \u2014 Computes the difference of arrays by using a callback function for data comparison        Description       array array_udiff     ( array $array1    , array $array2    [, array $ ...    ], callback $data_compare_func    )        Computes the difference of arrays by using a callback function for data    comparison. This is unlike array_diff() which uses an    internal function for comparing the data.           Parameters                    array1                      The first array.                                array2                      The second array.                                data_compare_func                      The callback comparison function.                      The user supplied callback function is used for comparison.        It must return an integer less than, equal to, or greater than zero if        the first argument is considered to be respectively less than, equal        to, or greater than the second.                                    Return Values       Returns an array containing all the values of array1    that are not present in any of the other arguments.           Examples            Example #1 array_udiff() example       <?phpclass\u00a0cr\u00a0{\u00a0\u00a0\u00a0\u00a0private\u00a0$priv_member;\u00a0\u00a0\u00a0\u00a0function\u00a0cr($val)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_member\u00a0=\u00a0$val;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_cr($a,\u00a0$b)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a->priv_member\u00a0===\u00a0$b->priv_member)\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a->priv_member\u00a0>\u00a0$b->priv_member)?\u00a01:-1;\u00a0\u00a0\u00a0\u00a0}}$a\u00a0=\u00a0array(\"0.1\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(12),\u00a00\u00a0=>\u00a0new\u00a0cr(23),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);$b\u00a0=\u00a0array(\"0.2\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(22),\u00a00\u00a0=>\u00a0new\u00a0cr(3),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);$result\u00a0=\u00a0array_udiff($a,\u00a0$b,\u00a0array(\"cr\",\u00a0\"comp_func_cr\"));print_r($result);?>             The above example will output:       Array (     [0.5] => cr Object         (             [priv_member:private] => 12         )      [0] => cr Object         (             [priv_member:private] => 23         )  )                     Notes   Note:          Please note that this function only checks one dimension of a n-dimensional     array. Of course you can check deeper dimensions by using     array_udiff($array1[0], $array2[0], \"data_compare_func\");.               See Also            array_diff() - Computes the difference of arrays     array_diff_assoc() - Computes the difference of arrays with additional index check     array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function     array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function     array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function     array_intersect() - Computes the intersection of arrays     array_intersect_assoc() - Computes the intersection of arrays with additional index check     array_uintersect() - Computes the intersection of arrays, compares data by a callback function     array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function     array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-unshift.php","title":"array_unshift","description":"array_unshift   (PHP 4, PHP 5)array_unshift \u2014 Prepend one or more elements to the beginning of an array        Description       int array_unshift     ( array &$array    , mixed $var    [, mixed $...   ] )        array_unshift() prepends passed elements to the front    of the array. Note that the list of elements is    prepended as a whole, so that the prepended elements stay in the same    order.  All numerical array keys will be modified to start counting from    zero while literal keys won&#039;t be touched.           Parameters                    array                      The input array.                                var                      The prepended variable.                                    Return Values       Returns the new number of elements in the array.           Examples            Example #1 array_unshift() example       <?php$queue\u00a0=\u00a0array(\"orange\",\u00a0\"banana\");array_unshift($queue,\u00a0\"apple\",\u00a0\"raspberry\");print_r($queue);?>             The above example will output:       Array (     [0] => apple     [1] => raspberry     [2] => orange     [3] => banana )                     See Also            array_shift() - Shift an element off the beginning of array     array_push() - Push one or more elements onto the end of array     array_pop() - Pop the element off the end of array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-unique.php","title":"array_unique","description":"array_unique   (PHP 4 >= 4.0.1, PHP 5)array_unique \u2014 Removes duplicate values from an array         Description       array array_unique     ( array $array    [, int $sort_flags = SORT_STRING   ] )        Takes an input array and returns a new array    without duplicate values.          Note that keys are preserved. array_unique() sorts    the values treated as string at first, then will keep the first key    encountered for every value, and ignore all following keys. It does not    mean that the key of the first related value from the unsorted    array will be kept.      Note:          Two elements are considered equal if and only if     (string) $elem1 === (string) $elem2. In words:     when the string representation is the same.             The first element will be used.                Parameters                    array                      The input array.                                sort_flags                      The optional second parameter sort_flags        may be used to modify the sorting behavior using these values:                      Sorting type flags:                           SORT_REGULAR - compare items normally          (don&#039;t change types)                            SORT_NUMERIC - compare items numerically                            SORT_STRING - compare items as strings                            SORT_LOCALE_STRING - compare items as           strings, based on the current locale.                                                                           Return Values       Returns the filtered array.            Changelog                                 Version        Description                                    5.2.10                 Changed the default value of sort_flags back to         SORT_STRING.                               5.2.9                 Added the optional sort_flags defaulting         to SORT_REGULAR. Prior to 5.2.9, this function used to sort         the array with SORT_STRING internally.                                            Examples            Example #1 array_unique() example       <?php$input\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"red\",\u00a0\"b\"\u00a0=>\u00a0\"green\",\u00a0\"blue\",\u00a0\"red\");$result\u00a0=\u00a0array_unique($input);print_r($result);?>             The above example will output:       Array (     [a] => green     [0] => red     [1] => blue )                         Example #2 array_unique() and types       <?php$input\u00a0=\u00a0array(4,\u00a0\"4\",\u00a0\"3\",\u00a04,\u00a03,\u00a0\"3\");$result\u00a0=\u00a0array_unique($input);var_dump($result);?>             The above example will output:       array(2) {   [0] => int(4)   [2] => string(1) \"3\" }                       See Also            array_count_values() - Counts all the values of an array                Notes   Note:          Note that array_unique() is not intended to      work on multi dimensional arrays."},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-values.php","title":"array_values","description":"array_values   (PHP 4, PHP 5)array_values \u2014 Return all the values of an array        Description       array array_values     ( array $input    )        array_values() returns all the values from the    input array and indexes numerically the    array.           Parameters                    input                      The array.                                    Return Values       Returns an indexed array of values.           Examples            Example #1 array_values() example       <?php$array\u00a0=\u00a0array(\"size\"\u00a0=>\u00a0\"XL\",\u00a0\"color\"\u00a0=>\u00a0\"gold\");print_r(array_values($array));?>             The above example will output:       Array (     [0] => XL     [1] => gold )                     See Also            array_keys() - Return all the keys or a subset of the keys of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-walk-recursive.php","title":"array_walk_recursive","description":"array_walk_recursive   (PHP 5)array_walk_recursive \u2014 Apply a user function recursively to every member of an array        Description       bool array_walk_recursive     ( array &$input    , callback $funcname    [, mixed $userdata   ] )        Applies the user-defined function funcname to each    element of the input array. This function will recurse    into deeper arrays.           Parameters                    input                      The input array.                                funcname                      Typically, funcname takes on two parameters.        The input parameter&#039;s value being the first, and        the key\/index second.              Note:                  If funcname needs to be working with the         actual values of the array, specify the first parameter of         funcname as a         reference. Then,         any changes made to those elements will be made in the         original array itself.                                        userdata                      If the optional userdata parameter is supplied,        it will be passed as the third parameter to the callback        funcname.                                      Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 array_walk_recursive() example       <?php$sweet\u00a0=\u00a0array('a'\u00a0=>\u00a0'apple',\u00a0'b'\u00a0=>\u00a0'banana');$fruits\u00a0=\u00a0array('sweet'\u00a0=>\u00a0$sweet,\u00a0'sour'\u00a0=>\u00a0'lemon');function\u00a0test_print($item,\u00a0$key){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0holds\u00a0$item\\n\";}array_walk_recursive($fruits,\u00a0'test_print');?>             The above example will output:       a holds apple b holds banana sour holds lemon                 You may notice that the key &#039;sweet&#039; is never displayed. Any key that holds an      array will not be passed to the function.                    See Also            array_walk() - Apply a user function to every member of an array     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-walk.php","title":"array_walk","description":"array_walk   (PHP 4, PHP 5)array_walk \u2014 Apply a user function to every member of an array        Description       bool array_walk     ( array &$array    , callback $funcname    [, mixed $userdata   ] )        Applies the user-defined function funcname to each    element of the array array.          array_walk() is not affected by the internal array    pointer of array.  array_walk()    will walk through the entire array regardless of pointer position.           Parameters                    array                      The input array.                                funcname                      Typically, funcname takes on two parameters.        The array parameter&#039;s value being the first, and        the key\/index second.              Note:                  If funcname needs to be working with the         actual values of the array, specify the first parameter of         funcname as a         reference. Then,         any changes made to those elements will be made in the         original array itself.                      Note:                     Many internal functions (for example strtolower())           will throw a warning if more than the expected number of argument           are passed in and are not usable directly as           funcname.                               Only the values of the array may potentially be        changed; its structure cannot be altered, i.e., the programmer cannot        add, unset or reorder elements. If the callback does not respect this        requirement, the behavior of this function is undefined, and              unpredictable.                                userdata                      If the optional userdata parameter is supplied,        it will be passed as the third parameter to the callback        funcname.                                    Return Values       Returns TRUE on success or FALSE on failure.           Errors\/Exceptions       If function funcname requires more parameters than    given to it, an error of level     E_WARNING will be generated each time array_walk()    calls funcname. These warnings may be suppressed by    prepending the PHP error operator    @ to the    array_walk() call, or by using    error_reporting().           Examples            Example #1 array_walk() example       <?php$fruits\u00a0=\u00a0array(\"d\"\u00a0=>\u00a0\"lemon\",\u00a0\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\");function\u00a0test_alter(&$item1,\u00a0$key,\u00a0$prefix){\u00a0\u00a0\u00a0\u00a0$item1\u00a0=\u00a0\"$prefix:\u00a0$item1\";}function\u00a0test_print($item2,\u00a0$key){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key.\u00a0$item2<br\u00a0\/>\\n\";}echo\u00a0\"Before\u00a0...:\\n\";array_walk($fruits,\u00a0'test_print');array_walk($fruits,\u00a0'test_alter',\u00a0'fruit');echo\u00a0\"...\u00a0and\u00a0after:\\n\";array_walk($fruits,\u00a0'test_print');?>             The above example will output:       Before ...: d. lemon a. orange b. banana c. apple ... and after: d. fruit: lemon a. fruit: orange b. fruit: banana c. fruit: apple                     See Also            array_walk_recursive() - Apply a user function recursively to every member of an array     iterator_apply() - Call a function for every element in an iterator     create_function() - Create an anonymous (lambda-style) function     list() - Assign variables as if they were an array     each() - Return the current key and value pair from an array and advance the array cursor     call_user_func_array() - Call a user function given with an array of parameters     array_map() - Applies the callback to the elements of the given arrays     information about the callback type     foreach"},{"url":"http:\/\/www.php.net\/manual\/en\/function.arsort.php","title":"arsort","description":"arsort   (PHP 4, PHP 5)arsort \u2014 Sort an array in reverse order and maintain index association        Description       bool arsort     ( array &$array    [, int $sort_flags = SORT_REGULAR   ] )        This function sorts an array such that array indices maintain their    correlation with the array elements they are associated with.          This is used mainly when sorting associative arrays where the actual    element order is significant.           Parameters                    array                      The input array.                                sort_flags                      You may modify the behavior of the sort using the optional parameter        sort_flags, for details see        sort().                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 arsort() example       <?php$fruits\u00a0=\u00a0array(\"d\"\u00a0=>\u00a0\"lemon\",\u00a0\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\");arsort($fruits);foreach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";}?>             The above example will output:       a = orange d = lemon b = banana c = apple                 The fruits have been sorted in reverse alphabetical order, and      the index associated with each element has been maintained.                    See Also            asort() - Sort an array and maintain index association     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.compact.php","title":"compact","description":"compact   (PHP 4, PHP 5)compact \u2014 Create array containing variables and their values        Description       array compact     ( mixed $varname    [, mixed $...   ] )        Creates an array containing variables and their values.          For each of these, compact() looks for a    variable with that name in the current symbol table and adds it    to the output array such that the variable name becomes the key    and the contents of the variable become the value for that key.    In short, it does the opposite of extract().          Any strings that are not set will simply be skipped.           Parameters                    varname                      compact() takes a variable number of parameters.        Each parameter can be either a string containing the name of the        variable, or an array of variable names.  The array can contain other        arrays of variable names inside it; compact()        handles it recursively.                                    Return Values       Returns the output array with all the variables added to it.           Examples            Example #1 compact() example       <?php$city\u00a0\u00a0=\u00a0\"San\u00a0Francisco\";$state\u00a0=\u00a0\"CA\";$event\u00a0=\u00a0\"SIGGRAPH\";$location_vars\u00a0=\u00a0array(\"city\",\u00a0\"state\");$result\u00a0=\u00a0compact(\"event\",\u00a0\"nothing_here\",\u00a0$location_vars);print_r($result);?>             The above example will output:       Array (     [event] => SIGGRAPH     [city] => San Francisco     [state] => CA )                     Notes   Note:     Gotcha         Because variable     variables may not be used with PHP&#039;s     Superglobal     arrays within functions, the Superglobal arrays may not be passed     into compact().               See Also            extract() - Import variables into the current symbol table from an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array.php","title":"array","description":"array   (PHP 4, PHP 5)array \u2014 Create an array        Description       array array     ([ mixed $...   ] )        Creates an array. Read the section on the    array type for more information    on what an array is.           Parameters                    ...                      Syntax \"index => values\", separated by commas, define index        and values. index may be of type string or integer. When index is        omitted, an integer index is automatically generated, starting        at 0. If index is an integer, next generated index will        be the biggest integer index + 1. Note that when two identical        index are defined, the last overwrite the first.                      Having a trailing comma after the last defined array entry, while        unusual, is a valid syntax.                                    Return Values       Returns an array of the parameters.  The parameters can be given    an index with the => operator.  Read the section    on the array type for more    information on what an array is.           Examples       The following example demonstrates how to create a    two-dimensional array, how to specify keys for associative    arrays, and how to skip-and-continue numeric indices in normal    arrays.         Example #1 array() example       <?php$fruits\u00a0=\u00a0array\u00a0(\u00a0\u00a0\u00a0\u00a0\"fruits\"\u00a0\u00a0=>\u00a0array(\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\"),\u00a0\u00a0\u00a0\u00a0\"numbers\"\u00a0=>\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06),\u00a0\u00a0\u00a0\u00a0\"holes\"\u00a0\u00a0\u00a0=>\u00a0array(\"first\",\u00a05\u00a0=>\u00a0\"second\",\u00a0\"third\"));?>                           Example #2 Automatic index with array()       <?php$array\u00a0=\u00a0array(1,\u00a01,\u00a01,\u00a01,\u00a0\u00a01,\u00a08\u00a0=>\u00a01,\u00a0\u00a04\u00a0=>\u00a01,\u00a019,\u00a03\u00a0=>\u00a013);print_r($array);?>             The above example will output:       Array (     [0] => 1     [1] => 1     [2] => 1     [3] => 13     [4] => 1     [8] => 1     [9] => 19 )                    Note that index &#039;3&#039; is defined twice, and keep its final value of 13.    Index 4 is defined after index 8, and next generated index (value 19)    is 9, since biggest index was 8.          This example creates a 1-based array.         Example #3 1-based index with array()       <?php$firstquarter\u00a0=\u00a0array(1\u00a0=>\u00a0'January',\u00a0'February',\u00a0'March');print_r($firstquarter);?>             The above example will output:       Array (     [1] => January     [2] => February     [3] => March )                    As in Perl, you can access a value from the array inside double quotes.    However, with PHP you&#039;ll need to enclose your array between curly braces.         Example #4 Accessing an array inside double quotes       <?php$foo\u00a0=\u00a0array('bar'\u00a0=>\u00a0'baz');echo\u00a0\"Hello\u00a0{$foo['bar']}!\";\u00a0\/\/\u00a0Hello\u00a0baz!?>                       Notes       Note:            array() is a language construct used to      represent literal arrays, and not a regular function.                    See Also            array_pad() - Pad array to the specified length with a value     list() - Assign variables as if they were an array     count() - Count all elements in an array, or something in an object     range() - Create an array containing a range of elements     foreach     The array type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.asort.php","title":"asort","description":"asort   (PHP 4, PHP 5)asort \u2014 Sort an array and maintain index association        Description       bool asort     ( array &$array    [, int $sort_flags = SORT_REGULAR   ] )        This function sorts an array such that array indices maintain    their correlation with the array elements they are associated    with.  This is used mainly when sorting associative arrays where    the actual element order is significant.           Parameters                    array                      The input array.                                sort_flags                      You may modify the behavior of the sort using the optional        parameter sort_flags, for details        see sort().                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 asort() example       <?php$fruits\u00a0=\u00a0array(\"d\"\u00a0=>\u00a0\"lemon\",\u00a0\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\");asort($fruits);foreach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";}?>             The above example will output:       c = apple b = banana d = lemon a = orange                 The fruits have been sorted in alphabetical order, and the index      associated with each element has been maintained.                    See Also            arsort() - Sort an array in reverse order and maintain index association     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.current.php","title":"current","description":"current   (PHP 4, PHP 5)current \u2014 Return the current element in an array        Description       mixed current     ( array &$array    )        Every array has an internal pointer to its \"current\" element,    which is initialized to the first element inserted into the    array.           Parameters                    array                      The array.                                    Return Values       The current() function simply returns the    value of the array element that&#039;s currently being pointed to by the    internal pointer.  It does not move the pointer in any way.  If the    internal pointer points beyond the end of the elements list or the array is     empty, current() returns FALSE.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.        Examples            Example #1 Example use of current() and friends       <?php$transport\u00a0=\u00a0array('foot',\u00a0'bike',\u00a0'car',\u00a0'plane');$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';$mode\u00a0=\u00a0prev($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';$mode\u00a0=\u00a0end($transport);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';$arr\u00a0=\u00a0array();var_dump(current($arr));\u00a0\/\/\u00a0bool(false)$arr\u00a0=\u00a0array(array());var_dump(current($arr));\u00a0\/\/\u00a0array(0)\u00a0{\u00a0}?>                       Notes   Note:          You won&#039;t be able to distinguish the end of an array from a     boolean FALSE element. To properly traverse an array     which may contain FALSE elements, see the each()     function.               See Also            end() - Set the internal pointer of an array to its last element     key() - Fetch a key from an array     each() - Return the current key and value pair from an array and advance the array cursor     prev() - Rewind the internal array pointer     reset() - Set the internal pointer of an array to its first element     next() - Advance the internal array pointer of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.count.php","title":"count","description":"count   (PHP 4, PHP 5)count \u2014 Count all elements in an array, or something in an object        Description       int count     ( mixed $var    [, int $mode = COUNT_NORMAL   ] )        Counts all elements in an array, or something in an object.          For objects, if you have    SPL installed, you can hook into    count() by implementing interface    Countable. The interface has exactly one method,     Countable::count(), which returns the return value for the    count() function.          Please see the Array    section of the manual for a detailed explanation of how arrays    are implemented and used in PHP.           Parameters                    var                      The array or the object.                                mode                      If the optional mode parameter is set to        COUNT_RECURSIVE (or 1), count()        will recursively count the array.  This is particularly useful for        counting all the elements of a multidimensional array.        count() does not detect infinite recursion.                                    Return Values       Returns the number of elements in var.    If var is not an array or an object with    implemented Countable interface,    1 will be returned.    There is one exception, if var is NULL,    0 will be returned.      Caution         count() may return 0 for a variable that isn&#039;t set,     but it may also return 0 for a variable that has been initialized with an     empty array. Use isset() to test if a variable is set.               Changelog                                 Version        Description                                    4.2.0                 The optional mode parameter was added.                                           Examples            Example #1 count() example       <?php$a[0]\u00a0=\u00a01;$a[1]\u00a0=\u00a03;$a[2]\u00a0=\u00a05;$result\u00a0=\u00a0count($a);\/\/\u00a0$result\u00a0==\u00a03$b[0]\u00a0\u00a0=\u00a07;$b[5]\u00a0\u00a0=\u00a09;$b[10]\u00a0=\u00a011;$result\u00a0=\u00a0count($b);\/\/\u00a0$result\u00a0==\u00a03$result\u00a0=\u00a0count(null);\/\/\u00a0$result\u00a0==\u00a00$result\u00a0=\u00a0count(false);\/\/\u00a0$result\u00a0==\u00a01?>                           Example #2 Recursive count() example       <?php$food\u00a0=\u00a0array('fruits'\u00a0=>\u00a0array('orange',\u00a0'banana',\u00a0'apple'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'veggie'\u00a0=>\u00a0array('carrot',\u00a0'collard',\u00a0'pea'));\/\/\u00a0recursive\u00a0countecho\u00a0count($food,\u00a0COUNT_RECURSIVE);\u00a0\/\/\u00a0output\u00a08\/\/\u00a0normal\u00a0countecho\u00a0count($food);\u00a0\/\/\u00a0output\u00a02?>                       See Also            is_array() - Finds whether a variable is an array     isset() - Determine if a variable is set and is not NULL     strlen() - Get string length"},{"url":"http:\/\/www.php.net\/manual\/en\/function.end.php","title":"end","description":"end   (PHP 4, PHP 5)end \u2014 Set the internal pointer of an array to its last element        Description       mixed end     ( array &$array    )        end() advances array&#039;s    internal pointer to the last element, and returns its value.           Parameters                    array                      The array.  This array is passed by reference because it is modified by        the function.  This means you must pass it a real variable and not        a function returning an array because only actual variables may be        passed by reference.                                    Return Values       Returns the value of the last element or FALSE for empty array.           Examples            Example #1 end() example       <?php$fruits\u00a0=\u00a0array('apple',\u00a0'banana',\u00a0'cranberry');echo\u00a0end($fruits);\u00a0\/\/\u00a0cranberry?>                       See Also            current() - Return the current element in an array     each() - Return the current key and value pair from an array and advance the array cursor     prev() - Rewind the internal array pointer     reset() - Set the internal pointer of an array to its first element     next() - Advance the internal array pointer of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.each.php","title":"each","description":"each   (PHP 4, PHP 5)each \u2014 Return the current key and value pair from an array and advance the array cursor        Description       array each     ( array &$array    )        Return the current key and value pair from an array and advance the array    cursor.          After each() has executed, the array cursor    will be left on the next element of the array, or past the last    element if it hits the end of the array. You have to use    reset() if you want to traverse the array    again using each.           Parameters                    array                      The input array.                                    Return Values       Returns the current key and value pair from the array    array. This pair is returned in a four-element    array, with the keys 0, 1,    key, and value. Elements    0 and key contain the key name of    the array element, and 1 and value    contain the data.          If the internal pointer for the array points past the end of the    array contents, each() returns    FALSE.           Examples            Example #1 each() examples       <?php$foo\u00a0=\u00a0array(\"bob\",\u00a0\"fred\",\u00a0\"jussi\",\u00a0\"jouni\",\u00a0\"egon\",\u00a0\"marliese\");$bar\u00a0=\u00a0each($foo);print_r($bar);?>                   $bar now contains the following key\/value      pairs:            Array (     [1] => bob     [value] => bob     [0] => 0     [key] => 0 )                           <?php$foo\u00a0=\u00a0array(\"Robert\"\u00a0=>\u00a0\"Bob\",\u00a0\"Seppo\"\u00a0=>\u00a0\"Sepi\");$bar\u00a0=\u00a0each($foo);print_r($bar);?>                   $bar now contains the following key\/value      pairs:            Array (     [1] => Bob     [value] => Bob     [0] => Robert     [key] => Robert )                    each() is typically used in conjunction with    list() to traverse an array, here&#039;s an    example:         Example #2 Traversing an array with each()       <?php$fruit\u00a0=\u00a0array('a'\u00a0=>\u00a0'apple',\u00a0'b'\u00a0=>\u00a0'banana',\u00a0'c'\u00a0=>\u00a0'cranberry');reset($fruit);while\u00a0(list($key,\u00a0$val)\u00a0=\u00a0each($fruit))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=>\u00a0$val\\n\";}?>             The above example will output:       a => apple b => banana c => cranberry                Caution         Because assigning an array to another variable resets the original     arrays pointer, our example above would cause an endless loop had we     assigned $fruit to another variable inside the     loop.          Warning         each() will also accept objects, but may return unexpected      results. Its therefore not recommended to iterate though object properties      with each().               See Also            key() - Fetch a key from an array     list() - Assign variables as if they were an array     current() - Return the current element in an array     reset() - Set the internal pointer of an array to its first element     next() - Advance the internal array pointer of an array     prev() - Rewind the internal array pointer     foreach     Object Iteration"},{"url":"http:\/\/www.php.net\/manual\/en\/function.extract.php","title":"extract","description":"extract   (PHP 4, PHP 5)extract \u2014 Import variables into the current symbol table from an array        Description       int extract     ( array &$var_array    [, int $extract_type = EXTR_OVERWRITE    [, string $prefix   ]] )        Import variables from an array into the current symbol table.          Checks each key to see whether it has a valid variable name.     It also checks for collisions with existing variables in    the symbol table.           Parameters                    var_array                      An associative array. This function treats keys as variable names and        values as variable values.  For each key\/value pair it will create a        variable in the current symbol table, subject to        extract_type and        prefix parameters.                      You must use an associative array; a numerically indexed array        will not produce results unless you use EXTR_PREFIX_ALL or        EXTR_PREFIX_INVALID.                                extract_type                      The way invalid\/numeric keys and collisions are treated is determined        by the extract_type. It can be one of the        following values:                             EXTR_OVERWRITE                                  If there is a collision, overwrite the existing variable.                                                    EXTR_SKIP                                  If there is a collision, don&#039;t overwrite the existing            variable.                                                    EXTR_PREFIX_SAME                      If there is a collision, prefix the variable name with           prefix.                                                    EXTR_PREFIX_ALL                                  Prefix all variable names with            prefix.                                                    EXTR_PREFIX_INVALID                                  Only prefix invalid\/numeric variable names with            prefix.                                                    EXTR_IF_EXISTS                                  Only overwrite the variable if it already exists in the            current symbol table, otherwise do nothing.  This is useful            for defining a list of valid variables and then extracting            only those variables you have defined out of            $_REQUEST, for example.                                                    EXTR_PREFIX_IF_EXISTS                                  Only create prefixed variable names if the non-prefixed version            of the same variable exists in the current symbol table.                                                    EXTR_REFS                                  Extracts variables as references. This effectively means that the            values of the imported variables are still referencing the values of            the var_array parameter. You can use this flag            on its own or combine it with any other flag by OR&#039;ing the            extract_type.                                                               If extract_type is not specified, it is        assumed to be EXTR_OVERWRITE.                                prefix                      Note that prefix is only required if        extract_type is EXTR_PREFIX_SAME,        EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID        or EXTR_PREFIX_IF_EXISTS. If        the prefixed result is not a valid variable name, it is not        imported into the symbol table. Prefixes are automatically separated from        the array key by an underscore character.                                    Return Values       Returns the number of variables successfully imported into the symbol    table.           Changelog                                 Version        Description                                    4.3.0                 EXTR_REFS was added.                               4.2.0                 EXTR_IF_EXISTS and EXTR_PREFIX_IF_EXISTS         were added.                               4.0.5                 This function now returns the number of variables extracted.         EXTR_PREFIX_INVALID was added.         EXTR_PREFIX_ALL includes numeric variables as well.                                           Examples            Example #1 extract() example           A possible use for extract() is to import into the      symbol table variables contained in an associative array returned by      wddx_deserialize().            <?php\/*\u00a0Suppose\u00a0that\u00a0$var_array\u00a0is\u00a0an\u00a0array\u00a0returned\u00a0from\u00a0\u00a0\u00a0wddx_deserialize\u00a0*\/$size\u00a0=\u00a0\"large\";$var_array\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0\"blue\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"size\"\u00a0\u00a0=>\u00a0\"medium\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"shape\"\u00a0=>\u00a0\"sphere\");extract($var_array,\u00a0EXTR_PREFIX_SAME,\u00a0\"wddx\");echo\u00a0\"$color,\u00a0$size,\u00a0$shape,\u00a0$wddx_size\\n\";?>             The above example will output:       blue, large, sphere, medium                 The $size wasn&#039;t overwritten because we specified      EXTR_PREFIX_SAME, which resulted in      $wddx_size being created.  If EXTR_SKIP was      specified, then $wddx_size wouldn&#039;t even have been created.      EXTR_OVERWRITE would have caused $size to have      value \"medium\", and EXTR_PREFIX_ALL would result in new variables      being named $wddx_color,      $wddx_size, and      $wddx_shape.                    Notes   Warning         Do not use extract() on untrusted data, like     user input     (i.e. $_GET, $_FILES, etc.).     If you do, for example if you want to run old code that relies     on register_globals     temporarily, make sure you use one of the non-overwriting     extract_type values such as     EXTR_SKIP and be aware that you should extract     in the same order that&#039;s defined in     variables_order within the     php.ini.          Note:          If you     have register_globals     turned on and you use extract()     on $_FILES and     specify EXTR_SKIP, you may be surprised at     the results.        Warning           This is not recommended practice and is only documented here for      completeness. The use      of register_globals is      deprecated and calling extract() on untrusted      data such as $_FILES is, as noted above, a      potential security risk. If you encounter this issue, it means      that you are using at least two poor coding practices.               <?php\/*\u00a0Suppose\u00a0that\u00a0$testfile\u00a0is\u00a0the\u00a0name\u00a0of\u00a0a\u00a0file\u00a0upload\u00a0input\u00a0\u00a0\u00a0and\u00a0that\u00a0register_globals\u00a0is\u00a0turned\u00a0on.\u00a0*\/var_dump($testfile);extract($_FILES,\u00a0EXTR_SKIP);var_dump($testfile);var_dump($testfile['tmp_name']);?>                You might expect to see something like the following:          string(14) \"\/tmp\/phpgCCPX8\" array(5) {   [\"name\"]=>   string(10) \"somefile.txt\"   [\"type\"]=>   string(24) \"application\/octet-stream\"   [\"tmp_name\"]=>   string(14) \"\/tmp\/phpgCCPX8\"   [\"error\"]=>   int(0)   [\"size\"]=>   int(4208) } string(14) \"\/tmp\/phpgCCPX8\"              However, you would instead see something like this:          string(14) \"\/tmp\/phpgCCPX8\" string(14) \"\/tmp\/phpgCCPX8\" string(1) \"\/\"              This is due to the fact that     since register_globals is     turned on, $testfile already exists in the     global scope when extract() is called. And     since EXTR_SKIP is     specified, $testfile is not overwritten with     the contents of the $_FILES array     so $testfile remains a string.     Because strings may     be accessed using array syntax and the non-numeric string     tmp_name is interpreted     as 0, PHP     sees $testfile['tmp_name']     as $testfile[0].               See Also            compact() - Create array containing variables and their values     list() - Assign variables as if they were an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.krsort.php","title":"krsort","description":"krsort   (PHP 4, PHP 5)krsort \u2014 Sort an array by key in reverse order        Description       bool krsort     ( array &$array    [, int $sort_flags = SORT_REGULAR   ] )        Sorts an array by key in reverse order, maintaining key to data    correlations. This is useful mainly for associative arrays.           Parameters                    array                      The input array.                                sort_flags                      You may modify the behavior of the sort using the optional parameter        sort_flags, for details see        sort().                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 krsort() example       <?php$fruits\u00a0=\u00a0array(\"d\"=>\"lemon\",\u00a0\"a\"=>\"orange\",\u00a0\"b\"=>\"banana\",\u00a0\"c\"=>\"apple\");krsort($fruits);foreach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";}?>             The above example will output:       d = lemon c = apple b = banana a = orange                     See Also            arsort() - Sort an array in reverse order and maintain index association     ksort() - Sort an array by key     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.key.php","title":"key","description":"key   (PHP 4, PHP 5)key \u2014 Fetch a key from an array        Description       mixed key     ( array &$array    )        key() returns the index element of the current array    position.           Parameters                    array                      The array.                                    Return Values       The key() function simply returns the    key of the array element that&#039;s currently being pointed to by the    internal pointer.  It does not move the pointer in any way.  If the    internal pointer points beyond the end of the elements list or the array is     empty, key() returns NULL.           Examples            Example #1 key() example       <?php$array\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0'fruit1'\u00a0=>\u00a0'apple',\u00a0\u00a0\u00a0\u00a0'fruit2'\u00a0=>\u00a0'orange',\u00a0\u00a0\u00a0\u00a0'fruit3'\u00a0=>\u00a0'grape',\u00a0\u00a0\u00a0\u00a0'fruit4'\u00a0=>\u00a0'apple',\u00a0\u00a0\u00a0\u00a0'fruit5'\u00a0=>\u00a0'apple');\/\/\u00a0this\u00a0cycle\u00a0echoes\u00a0all\u00a0associative\u00a0array\/\/\u00a0key\u00a0where\u00a0value\u00a0equals\u00a0\"apple\"while\u00a0($fruit_name\u00a0=\u00a0current($array))\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($fruit_name\u00a0==\u00a0'apple')\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0key($array).'<br\u00a0\/>';\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0next($array);}?>             The above example will output:       fruit1<br \/> fruit4<br \/> fruit5<br \/>                     See Also            current() - Return the current element in an array     next() - Advance the internal array pointer of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.in-array.php","title":"in_array","description":"in_array   (PHP 4, PHP 5)in_array \u2014 Checks if a value exists in an array        Description       bool in_array     ( mixed $needle    , array $haystack    [, bool $strict = FALSE   ] )        Searches haystack for needle using loose comparison     unless strict is set.           Parameters                    needle                      The searched value.              Note:                  If needle is a string, the comparison is done         in a case-sensitive manner.                                        haystack                      The array.                                strict                      If the third parameter strict is set to TRUE        then the in_array() function will also check the        types of the        needle in the haystack.                                    Return Values       Returns TRUE if needle is found in the array,    FALSE otherwise.           Changelog                                 Version        Description                                    4.2.0                 needle may now be an array.                                           Examples            Example #1 in_array() example       <?php$os\u00a0=\u00a0array(\"Mac\",\u00a0\"NT\",\u00a0\"Irix\",\u00a0\"Linux\");if\u00a0(in_array(\"Irix\",\u00a0$os))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Got\u00a0Irix\";}if\u00a0(in_array(\"mac\",\u00a0$os))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Got\u00a0mac\";}?>                   The second condition fails because in_array()      is case-sensitive, so the program above will display:            Got Irix                         Example #2 in_array() with strict example       <?php$a\u00a0=\u00a0array('1.10',\u00a012.4,\u00a01.13);if\u00a0(in_array('12.4',\u00a0$a,\u00a0true))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'12.4'\u00a0found\u00a0with\u00a0strict\u00a0check\\n\";}if\u00a0(in_array(1.13,\u00a0$a,\u00a0true))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"1.13\u00a0found\u00a0with\u00a0strict\u00a0check\\n\";}?>             The above example will output:       1.13 found with strict check                         Example #3 in_array() with an array as needle       <?php$a\u00a0=\u00a0array(array('p',\u00a0'h'),\u00a0array('p',\u00a0'r'),\u00a0'o');if\u00a0(in_array(array('p',\u00a0'h'),\u00a0$a))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'ph'\u00a0was\u00a0found\\n\";}if\u00a0(in_array(array('f',\u00a0'i'),\u00a0$a))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'fi'\u00a0was\u00a0found\\n\";}if\u00a0(in_array('o',\u00a0$a))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'o'\u00a0was\u00a0found\\n\";}?>             The above example will output:         &#039;ph&#039; was found   &#039;o&#039; was found                     See Also            array_search() - Searches the array for a given value and returns the corresponding key if successful     isset() - Determine if a variable is set and is not NULL     array_key_exists() - Checks if the given key or index exists in the array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ksort.php","title":"ksort","description":"ksort   (PHP 4, PHP 5)ksort \u2014 Sort an array by key        Description       bool ksort     ( array &$array    [, int $sort_flags = SORT_REGULAR   ] )        Sorts an array by key, maintaining key to data correlations. This is    useful mainly for associative arrays.           Parameters                    array                      The input array.                                sort_flags                      You may modify the behavior of the sort using the optional        parameter sort_flags, for details        see sort().                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ksort() example       <?php$fruits\u00a0=\u00a0array(\"d\"=>\"lemon\",\u00a0\"a\"=>\"orange\",\u00a0\"b\"=>\"banana\",\u00a0\"c\"=>\"apple\");ksort($fruits);foreach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";}?>             The above example will output:       a = orange b = banana c = apple d = lemon                     See Also            asort() - Sort an array and maintain index association     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.list.php","title":"list","description":"list   (PHP 4, PHP 5)list \u2014 Assign variables as if they were an array        Description       array list     ( mixed $varname    [, mixed $...   ] )        Like array(), this is not really a function,    but a language construct.  list() is used to    assign a list of variables in one operation.           Parameters                    varname                      A variable.                                    Return Values       Returns the assigned array.           Examples            Example #1 list() examples       <?php$info\u00a0=\u00a0array('coffee',\u00a0'brown',\u00a0'caffeine');\/\/\u00a0Listing\u00a0all\u00a0the\u00a0variableslist($drink,\u00a0$color,\u00a0$power)\u00a0=\u00a0$info;echo\u00a0\"$drink\u00a0is\u00a0$color\u00a0and\u00a0$power\u00a0makes\u00a0it\u00a0special.\\n\";\/\/\u00a0Listing\u00a0some\u00a0of\u00a0themlist($drink,\u00a0,\u00a0$power)\u00a0=\u00a0$info;echo\u00a0\"$drink\u00a0has\u00a0$power.\\n\";\/\/\u00a0Or\u00a0let's\u00a0skip\u00a0to\u00a0only\u00a0the\u00a0third\u00a0onelist(\u00a0,\u00a0,\u00a0$power)\u00a0=\u00a0$info;echo\u00a0\"I\u00a0need\u00a0$power!\\n\";\/\/\u00a0list()\u00a0doesn't\u00a0work\u00a0with\u00a0stringslist($bar)\u00a0=\u00a0\"abcde\";var_dump($bar);\u00a0\/\/\u00a0NULL?>                           Example #2 An example use of list()       <table>\u00a0<tr>\u00a0\u00a0<th>Employee\u00a0name<\/th>\u00a0\u00a0<th>Salary<\/th>\u00a0<\/tr><?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,\u00a0name,\u00a0salary\u00a0FROM\u00a0employees\",\u00a0$conn);while\u00a0(list($id,\u00a0$name,\u00a0$salary)\u00a0=\u00a0mysql_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0<tr>\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0\u00a0<td><a\u00a0href=\\\"info.php?id=$id\\\">$name<\/a><\/td>\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0\u00a0<td>$salary<\/td>\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0<\/tr>\\n\";}?><\/table>                          Example #3 Using nested list()       <?phplist($a,\u00a0list($b,\u00a0$c))\u00a0=\u00a0array(1,\u00a0array(2,\u00a03));var_dump($a,\u00a0$b,\u00a0$c);?>               int(1) int(2) int(3)                         Example #4 Using list() with array indices       <?php$info\u00a0=\u00a0array('coffee',\u00a0'brown',\u00a0'caffeine');list($a[0],\u00a0$a[1],\u00a0$a[2])\u00a0=\u00a0$info;var_dump($a);?>                   Gives the following output (note the order of the elements compared in      which order they were written in the list() syntax):            array(3) {   [2]=>   string(8) \"caffeine\"   [1]=>   string(5) \"brown\"   [0]=>   string(6) \"coffee\" }                     Notes   Warning         list() assigns the values starting with the right-most     parameter. If you are using plain variables, you don&#039;t have to worry     about this. But if you are using arrays with indices you usually expect     the order of the indices in the array the same you wrote in the     list() from left to right; which it isn&#039;t. It&#039;s     assigned in the reverse order.          Warning         Modification of the array during list() execution (e.g.     using list($a, $b) = $b) results in undefined behavior.          Note:          list() only works on numerical arrays and assumes     the numerical indices start at 0.               See Also            each() - Return the current key and value pair from an array and advance the array cursor     array() - Create an array     extract() - Import variables into the current symbol table from an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.natcasesort.php","title":"natcasesort","description":"natcasesort   (PHP 4, PHP 5)natcasesort \u2014 Sort an array using a case insensitive \"natural order\" algorithm        Description       bool natcasesort     ( array &$array    )        natcasesort() is a case insensitive version of    natsort().          This function implements a sort algorithm that orders    alphanumeric strings in the way a human being would while maintaining    key\/value associations.  This is described as a \"natural ordering\".           Parameters                    array                      The input array.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 natcasesort() example       <?php$array1\u00a0=\u00a0$array2\u00a0=\u00a0array('IMG0.png',\u00a0'img12.png',\u00a0'img10.png',\u00a0'img2.png',\u00a0'img1.png',\u00a0'IMG3.png');sort($array1);echo\u00a0\"Standard\u00a0sorting\\n\";print_r($array1);natcasesort($array2);echo\u00a0\"\\nNatural\u00a0order\u00a0sorting\u00a0(case-insensitive)\\n\";print_r($array2);?>             The above example will output:       Standard sorting Array (     [0] => IMG0.png     [1] => IMG3.png     [2] => img1.png     [3] => img10.png     [4] => img12.png     [5] => img2.png )  Natural order sorting (case-insensitive) Array (     [0] => IMG0.png     [4] => img1.png     [3] => img2.png     [5] => IMG3.png     [2] => img10.png     [1] => img12.png )                 For more information see: Martin Pool&#039;s \u00bb\u00a0Natural Order String Comparison      page.                    See Also            natsort() - Sort an array using a \"natural order\" algorithm     The comparison of array sorting functions     strnatcmp() - String comparisons using a \"natural order\" algorithm     strnatcasecmp() - Case insensitive string comparisons using a \"natural order\" algorithm"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pos.php","title":"pos","description":"pos   (PHP 4, PHP 5)pos \u2014 Alias of current()         Description       This function is an alias of:     current()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.natsort.php","title":"natsort","description":"natsort   (PHP 4, PHP 5)natsort \u2014 Sort an array using a \"natural order\" algorithm        Description       bool natsort     ( array &$array    )        This function implements a sort algorithm that orders alphanumeric strings    in the way a human being would while maintaining key\/value associations.    This is described as a \"natural ordering\".  An example of the difference    between this algorithm and the regular computer string sorting algorithms    (used in sort()) can be seen in the example below.           Parameters                    array                      The input array.                                    Return Values       Returns TRUE on success or FALSE on failure.            Changelog                         Version       Description                               5.2.10               Zero padded numeric strings (e.g., &#039;00005&#039;) now essentially ignore the 0 padding.                                    Examples            Example #1 natsort() examples demonstrating basic usage       <?php$array1\u00a0=\u00a0$array2\u00a0=\u00a0array(\"img12.png\",\u00a0\"img10.png\",\u00a0\"img2.png\",\u00a0\"img1.png\");asort($array1);echo\u00a0\"Standard\u00a0sorting\\n\";print_r($array1);natsort($array2);echo\u00a0\"\\nNatural\u00a0order\u00a0sorting\\n\";print_r($array2);?>             The above example will output:       Standard sorting Array (     [3] => img1.png     [1] => img10.png     [0] => img12.png     [2] => img2.png )  Natural order sorting Array (     [3] => img1.png     [2] => img2.png     [1] => img10.png     [0] => img12.png )                 For more information see: Martin Pool&#039;s \u00bb\u00a0Natural Order String Comparison      page.                  Example #2 natsort() examples demonstrating potential gotchas       <?phpecho\u00a0\"Negative\u00a0numbers\\n\";$negative\u00a0=\u00a0array('-5','3','-2','0','-1000','9','1');print_r($negative);natsort($negative);print_r($negative);echo\u00a0\"Zero\u00a0padding\\n\";$zeros\u00a0=\u00a0array('09',\u00a0'8',\u00a0'10',\u00a0'009',\u00a0'011',\u00a0'0');\u00a0print_r($zeros);natsort($zeros);print_r($zeros);echo\u00a0\"Other\u00a0characters\u00a0interfering\\n\";$images_oops\u00a0=\u00a0array('image_1.jpg','image_12.jpg',\u00a0'image_21.jpg',\u00a0'image_4.jpg');print_r($images_oops);natsort($images_oops);print_r($images_oops);echo\u00a0\"Sort\u00a0by\u00a0keys\\n\";$smoothie\u00a0=\u00a0array('orange'\u00a0=>\u00a01,\u00a0'apple'\u00a0=>\u00a01,\u00a0'yogurt'\u00a0=>\u00a04,\u00a0'banana'\u00a0=>\u00a04);print_r($smoothie);uksort(\u00a0$smoothie,\u00a0'strnatcmp');print_r($smoothie);?>             The above example will output:       Negative numbers Array (     [0] => -5     [1] => 3     [2] => -2     [3] => 0     [4] => -1000     [5] => 9     [6] => 1 ) Array (     [2] => -2     [0] => -5     [4] => -1000     [3] => 0     [6] => 1     [1] => 3     [5] => 9 )  Zero padding Array (     [0] => 09     [1] => 8     [2] => 10     [3] => 009     [4] => 011     [5] => 0 ) Array (     [5] => 0     [1] => 8     [3] => 009     [0] => 09     [2] => 10     [4] => 011 )  Other characters interfering Array (     [0] => image_1.jpg     [1] => image_12.jpg     [2] => image_21.jpg     [3] => image_4.jpg ) Array (     [0] => image_1.jpg     [3] => image_4.jpg     [1] => image_12.jpg     [2] => image_21.jpg )  Sort by keys Array (     [orange] => 1     [apple]  => 1     [yogurt] => 4     [banana] => 4 ) Array (     [apple]  => 1     [banana] => 4     [orange] => 1     [yogurt] => 4 )                     See Also            natcasesort() - Sort an array using a case insensitive \"natural order\" algorithm     The comparison of array sorting functions     strnatcmp() - String comparisons using a \"natural order\" algorithm     strnatcasecmp() - Case insensitive string comparisons using a \"natural order\" algorithm"},{"url":"http:\/\/www.php.net\/manual\/en\/function.next.php","title":"next","description":"next   (PHP 4, PHP 5)next \u2014 Advance the internal array pointer of an array        Description       mixed next     ( array &$array    )        next() behaves like    current(), with one difference.  It advances    the internal array pointer one place forward before returning the    element value.  That means it returns the next array value and    advances the internal array pointer by one.            Parameters                    array                      The array being affected.                                     Return Values       Returns the array value in the next place that&#039;s pointed to by the    internal array pointer, or FALSE if there are no more elements.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples            Example #1 Example use of next() and friends       <?php$transport\u00a0=\u00a0array('foot',\u00a0'bike',\u00a0'car',\u00a0'plane');$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'car';$mode\u00a0=\u00a0prev($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';$mode\u00a0=\u00a0end($transport);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';?>                        Notes   Note:          You won&#039;t be able to distinguish the end of an array from a     boolean FALSE element. To properly traverse an array     which may contain FALSE elements, see the each()     function.                See Also            current() - Return the current element in an array     end() - Set the internal pointer of an array to its last element     prev() - Rewind the internal array pointer     reset() - Set the internal pointer of an array to its first element     each() - Return the current key and value pair from an array and advance the array cursor"},{"url":"http:\/\/www.php.net\/manual\/en\/function.prev.php","title":"prev","description":"prev   (PHP 4, PHP 5)prev \u2014 Rewind the internal array pointer        Description       mixed prev     ( array &$array    )        Rewind the internal array pointer.          prev() behaves just like next(),    except it rewinds the internal array pointer one place instead of advancing it.           Parameters                    array                      The input array.                                    Return Values       Returns the array value in the previous place that&#039;s pointed to by    the internal array pointer, or FALSE if there are no more    elements.           Examples            Example #1 Example use of prev() and friends       <?php$transport\u00a0=\u00a0array('foot',\u00a0'bike',\u00a0'car',\u00a0'plane');$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'car';$mode\u00a0=\u00a0prev($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';$mode\u00a0=\u00a0end($transport);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';?>                       Notes   WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.   Note:          You won&#039;t be able to distinguish the beginning of an array from a     boolean FALSE element. To properly traverse an array     which may contain FALSE elements, see the each()     function.               See Also            current() - Return the current element in an array     end() - Set the internal pointer of an array to its last element     next() - Advance the internal array pointer of an array     reset() - Set the internal pointer of an array to its first element     each() - Return the current key and value pair from an array and advance the array cursor"},{"url":"http:\/\/www.php.net\/manual\/en\/function.reset.php","title":"reset","description":"reset   (PHP 4, PHP 5)reset \u2014 Set the internal pointer of an array to its first element        Description       mixed reset     ( array &$array    )        reset() rewinds array&#039;s internal    pointer to the first element and returns the value of the first array    element.           Parameters                    array                      The input array.                                    Return Values       Returns the value of the first array element, or FALSE if the array is    empty.           Examples            Example #1 reset() example       <?php$array\u00a0=\u00a0array('step\u00a0one',\u00a0'step\u00a0two',\u00a0'step\u00a0three',\u00a0'step\u00a0four');\/\/\u00a0by\u00a0default,\u00a0the\u00a0pointer\u00a0is\u00a0on\u00a0the\u00a0first\u00a0elementecho\u00a0current($array)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\/\/\u00a0\"step\u00a0one\"\/\/\u00a0skip\u00a0two\u00a0stepsnext($array);next($array);echo\u00a0current($array)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\/\/\u00a0\"step\u00a0three\"\/\/\u00a0reset\u00a0pointer,\u00a0start\u00a0again\u00a0on\u00a0step\u00a0onereset($array);echo\u00a0current($array)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\/\/\u00a0\"step\u00a0one\"?>                       See Also            current() - Return the current element in an array     each() - Return the current key and value pair from an array and advance the array cursor     end() - Set the internal pointer of an array to its last element     next() - Advance the internal array pointer of an array     prev() - Rewind the internal array pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.range.php","title":"range","description":"range   (PHP 4, PHP 5)range \u2014 Create an array containing a range of elements        Description       array range     ( mixed $start    , mixed $limit    [, number $step = 1   ] )        Create an array containing a range of elements.           Parameters                    start                      First value of the sequence.                                limit                      The sequence is ended upon reaching the        limit value.                                step                      If a step value is given, it will be used as the        increment between elements in the sequence.  step        should be given as a positive number.  If not specified,        step will default to 1.                                    Return Values       Returns an array of elements from start to    limit, inclusive.           Changelog                                 Version        Description                                    5.0.0                 The optional step parameter was added.                               4.1.0 to 4.3.2                 In PHP versions 4.1.0 through 4.3.2, range() sees         numeric strings as strings and not integers.  Instead, they will be         used for character sequences.  For example, \"4242\"         is treated as \"4\".                               4.1.0                 Prior to PHP 4.1.0, range() only generated         incrementing integer arrays.  Support for character sequences and         decrementing arrays was added in 4.1.0.  Character sequence values         are limited to a length of one.  If a length greater than one is         entered, only the first character is used.                                           Examples            Example #1 range() examples       <?php\/\/\u00a0array(0,\u00a01,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07,\u00a08,\u00a09,\u00a010,\u00a011,\u00a012)foreach\u00a0(range(0,\u00a012)\u00a0as\u00a0$number)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$number;}\/\/\u00a0The\u00a0step\u00a0parameter\u00a0was\u00a0introduced\u00a0in\u00a05.0.0\/\/\u00a0array(0,\u00a010,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a080,\u00a090,\u00a0100)foreach\u00a0(range(0,\u00a0100,\u00a010)\u00a0as\u00a0$number)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$number;}\/\/\u00a0Use\u00a0of\u00a0character\u00a0sequences\u00a0introduced\u00a0in\u00a04.1.0\/\/\u00a0array('a',\u00a0'b',\u00a0'c',\u00a0'd',\u00a0'e',\u00a0'f',\u00a0'g',\u00a0'h',\u00a0'i');foreach\u00a0(range('a',\u00a0'i')\u00a0as\u00a0$letter)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$letter;}\/\/\u00a0array('c',\u00a0'b',\u00a0'a');foreach\u00a0(range('c',\u00a0'a')\u00a0as\u00a0$letter)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$letter;}?>                       See Also            shuffle() - Shuffle an array     array_fill() - Fill an array with values     foreach"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sizeof.php","title":"sizeof","description":"sizeof   (PHP 4, PHP 5)sizeof \u2014 Alias of count()         Description       This function is an alias of:     count()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.rsort.php","title":"rsort","description":"rsort   (PHP 4, PHP 5)rsort \u2014 Sort an array in reverse order        Description       bool rsort     ( array &$array    [, int $sort_flags = SORT_REGULAR   ] )        This function sorts an array in reverse order (highest to lowest).           Parameters                    array                      The input array.                                sort_flags                      You may modify the behavior of the sort using the optional        parameter sort_flags, for details see        sort().                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 rsort() example       <?php$fruits\u00a0=\u00a0array(\"lemon\",\u00a0\"orange\",\u00a0\"banana\",\u00a0\"apple\");rsort($fruits);foreach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";}?>             The above example will output:       0 = orange 1 = lemon 2 = banana 3 = apple                 The fruits have been sorted in reverse alphabetical order.                    Notes   Note: This function assigns new keys to the elements in array. It will remove any existing keys that may have been assigned, rather than just reordering the keys.        See Also            arsort() - Sort an array in reverse order and maintain index association     krsort() - Sort an array by key in reverse order     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.shuffle.php","title":"shuffle","description":"shuffle   (PHP 4, PHP 5)shuffle \u2014 Shuffle an array        Description       bool shuffle     ( array &$array    )        This function shuffles (randomizes the order of the elements in) an array.           Parameters                    array                      The array.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 shuffle() example       <?php$numbers\u00a0=\u00a0range(1,\u00a020);shuffle($numbers);foreach\u00a0($numbers\u00a0as\u00a0$number)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$number\u00a0\";}?>                       Changelog                                 Version        Description                            4.2.0The random number generator is seeded automatically.                            Notes   Note: This function assigns new keys to the elements in array. It will remove any existing keys that may have been assigned, rather than just reordering the keys.        See Also            The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.uasort.php","title":"uasort","description":"uasort   (PHP 4, PHP 5)uasort \u2014 Sort an array with a user-defined comparison function and maintain index association         Description       bool uasort     ( array &$array    , callback $cmp_function    )        This function sorts an array such that array indices maintain their    correlation with the array elements they are associated with, using a    user-defined comparison function.          This is used mainly when sorting associative arrays where the actual    element order is significant.            Parameters                    array                      The input array.                                cmp_function                      See usort() and uksort() for        examples of user-defined comparison functions.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Basic uasort() example       <?php\/\/\u00a0Comparison\u00a0functionfunction\u00a0cmp($a,\u00a0$b)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0==\u00a0$b)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0<\u00a0$b)\u00a0?\u00a0-1\u00a0:\u00a01;}\/\/\u00a0Array\u00a0to\u00a0be\u00a0sorted$array\u00a0=\u00a0array('a'\u00a0=>\u00a04,\u00a0'b'\u00a0=>\u00a08,\u00a0'c'\u00a0=>\u00a0-1,\u00a0'd'\u00a0=>\u00a0-9,\u00a0'e'\u00a0=>\u00a02,\u00a0'f'\u00a0=>\u00a05,\u00a0'g'\u00a0=>\u00a03,\u00a0'h'\u00a0=>\u00a0-4);print_r($array);\/\/\u00a0Sort\u00a0and\u00a0print\u00a0the\u00a0resulting\u00a0arrayuasort($array,\u00a0'cmp');print_r($array);?>             The above example will output:       Array (     [a] => 4     [b] => 8     [c] => -1     [d] => -9     [e] => 2     [f] => 5     [g] => 3     [h] => -4 ) Array (     [d] => -9     [h] => -4     [c] => -1     [e] => 2     [g] => 3     [a] => 4     [f] => 5     [b] => 8 )                      See Also            usort() - Sort an array by values using a user-defined comparison function     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sort.php","title":"sort","description":"sort   (PHP 4, PHP 5)sort \u2014 Sort an array        Description       bool sort     ( array &$array    [, int $sort_flags = SORT_REGULAR   ] )        This function sorts an array.  Elements will be arranged from    lowest to highest when this function has completed.           Parameters                    array                      The input array.                                sort_flags                      The optional second parameter sort_flags        may be used to modify the sorting behavior using these values:                      Sorting type flags:                           SORT_REGULAR - compare items normally          (don&#039;t change types)                            SORT_NUMERIC - compare items numerically                            SORT_STRING - compare items as strings                            SORT_LOCALE_STRING - compare items as           strings, based on the current locale. Added in PHP 4.4.0 and 5.0.2, it           uses the locale, which can be changed using setlocale().                                                                          Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 sort() example       <?php$fruits\u00a0=\u00a0array(\"lemon\",\u00a0\"orange\",\u00a0\"banana\",\u00a0\"apple\");sort($fruits);foreach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"fruits[\"\u00a0.\u00a0$key\u00a0.\u00a0\"]\u00a0=\u00a0\"\u00a0.\u00a0$val\u00a0.\u00a0\"\\n\";}?>             The above example will output:       fruits[0] = apple fruits[1] = banana fruits[2] = lemon fruits[3] = orange                    The fruits have been sorted in alphabetical order.           Notes   Note: This function assigns new keys to the elements in array. It will remove any existing keys that may have been assigned, rather than just reordering the keys.   Note:          Like most PHP sorting functions, sort() uses an     implementation of \u00bb\u00a0Quicksort.          Warning         Be careful when sorting arrays with mixed types values because     sort() can produce unpredictable results.               See Also            asort() - Sort an array and maintain index association     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.uksort.php","title":"uksort","description":"uksort   (PHP 4, PHP 5)uksort \u2014 Sort an array by keys using a user-defined comparison function        Description       bool uksort     ( array &$array    , callback $cmp_function    )        uksort() will sort the keys of an array using a    user-supplied comparison function.  If the array you wish to sort    needs to be sorted by some non-trivial criteria, you should use    this function.           Parameters                    array                      The input array.                                cmp_function                      The callback comparison function.                      Function cmp_function should accept two        parameters which will be filled by pairs of array keys.        The comparison function must return an integer less than, equal        to, or greater than zero if the first argument is considered to        be respectively less than, equal to, or greater than the        second.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 uksort() example       <?phpfunction\u00a0cmp($a,\u00a0$b){\u00a0\u00a0\u00a0\u00a0$a\u00a0=\u00a0preg_replace('@^(a|an|the)\u00a0@',\u00a0'',\u00a0$a);\u00a0\u00a0\u00a0\u00a0$b\u00a0=\u00a0preg_replace('@^(a|an|the)\u00a0@',\u00a0'',\u00a0$b);\u00a0\u00a0\u00a0\u00a0return\u00a0strcasecmp($a,\u00a0$b);}$a\u00a0=\u00a0array(\"John\"\u00a0=>\u00a01,\u00a0\"the\u00a0Earth\"\u00a0=>\u00a02,\u00a0\"an\u00a0apple\"\u00a0=>\u00a03,\u00a0\"a\u00a0banana\"\u00a0=>\u00a04);uksort($a,\u00a0\"cmp\");foreach\u00a0($a\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0$value\\n\";}?>             The above example will output:       an apple: 3 a banana: 4 the Earth: 2 John: 1                     See Also            usort() - Sort an array by values using a user-defined comparison function     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-close.php","title":"dba_close","description":"dba_close   (PHP 4, PHP 5)dba_close \u2014 Close a DBA database        Description       void dba_close     ( resource $handle    )        dba_close() closes the established database and frees    all resources of the specified database handle.           Parameters                    handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       No value is returned.           See Also            dba_open() - Open database     dba_popen() - Open database persistently"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-delete.php","title":"dba_delete","description":"dba_delete   (PHP 4, PHP 5)dba_delete \u2014 Delete DBA entry specified by key        Description       bool dba_delete     ( string $key    , resource $handle    )        dba_delete() deletes the specified entry from the database.           Parameters                    key                      The key of the entry which is deleted.                                handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            dba_exists() - Check whether key exists     dba_fetch() - Fetch data specified by key     dba_insert() - Insert entry     dba_replace() - Replace or insert entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.usort.php","title":"usort","description":"usort   (PHP 4, PHP 5)usort \u2014 Sort an array by values using a user-defined comparison function        Description       bool usort     ( array &$array    , callback $cmp_function    )        This function will sort an array by its values using a user-supplied    comparison function.  If the array you wish to sort needs to be sorted by    some non-trivial criteria, you should use this function.      Note:          If two members compare as equal, their order in the sorted array is undefined.          Note: This function assigns new keys to the elements in array. It will remove any existing keys that may have been assigned, rather than just reordering the keys.        Parameters                    array                      The input array.                                cmp_function                      The comparison function must return an integer less than, equal to, or        greater than zero if the first argument is considered to be        respectively less than, equal to, or greater than the second.                                    Return Values       Returns TRUE on success or FALSE on failure.           Changelog                                 Version        Description                                    4.1.0                 A new sort algorithm was introduced. The cmp_function         doesn&#039;t keep the original order for elements comparing as equal.                                           Examples            Example #1 usort() example       <?phpfunction\u00a0cmp($a,\u00a0$b){\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0==\u00a0$b)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0<\u00a0$b)\u00a0?\u00a0-1\u00a0:\u00a01;}$a\u00a0=\u00a0array(3,\u00a02,\u00a05,\u00a06,\u00a01);usort($a,\u00a0\"cmp\");foreach\u00a0($a\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0$value\\n\";}?>             The above example will output:       0: 1 1: 2 2: 3 3: 5 4: 6                Note:          Obviously in this trivial case the sort()     function would be more appropriate.                   Example #2       usort() example using multi-dimensional array            <?phpfunction\u00a0cmp($a,\u00a0$b){\u00a0\u00a0\u00a0\u00a0return\u00a0strcmp($a[\"fruit\"],\u00a0$b[\"fruit\"]);}$fruits[0][\"fruit\"]\u00a0=\u00a0\"lemons\";$fruits[1][\"fruit\"]\u00a0=\u00a0\"apples\";$fruits[2][\"fruit\"]\u00a0=\u00a0\"grapes\";usort($fruits,\u00a0\"cmp\");while\u00a0(list($key,\u00a0$value)\u00a0=\u00a0each($fruits))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\$fruits[$key]:\u00a0\"\u00a0.\u00a0$value[\"fruit\"]\u00a0.\u00a0\"\\n\";}?>                   When sorting a multi-dimensional array, $a and     $b contain references to the first index of the array.          The above example will output:       $fruits[0]: apples $fruits[1]: grapes $fruits[2]: lemons                         Example #3       usort() example using a member function of an object            <?phpclass\u00a0TestObj\u00a0{\u00a0\u00a0\u00a0\u00a0var\u00a0$name;\u00a0\u00a0\u00a0\u00a0function\u00a0TestObj($name)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name\u00a0=\u00a0$name;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/*\u00a0This\u00a0is\u00a0the\u00a0static\u00a0comparing\u00a0function:\u00a0*\/\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0cmp_obj($a,\u00a0$b)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$al\u00a0=\u00a0strtolower($a->name);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bl\u00a0=\u00a0strtolower($b->name);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($al\u00a0==\u00a0$bl)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($al\u00a0>\u00a0$bl)\u00a0?\u00a0+1\u00a0:\u00a0-1;\u00a0\u00a0\u00a0\u00a0}}$a[]\u00a0=\u00a0new\u00a0TestObj(\"c\");$a[]\u00a0=\u00a0new\u00a0TestObj(\"b\");$a[]\u00a0=\u00a0new\u00a0TestObj(\"d\");usort($a,\u00a0array(\"TestObj\",\u00a0\"cmp_obj\"));foreach\u00a0($a\u00a0as\u00a0$item)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$item->name\u00a0.\u00a0\"\\n\";}?>             The above example will output:       b c d                     See Also            uasort() - Sort an array with a user-defined comparison function and maintain index association     The comparison of array sorting functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-exists.php","title":"dba_exists","description":"dba_exists   (PHP 4, PHP 5)dba_exists \u2014 Check whether key exists        Description       bool dba_exists     ( string $key    , resource $handle    )        dba_exists() checks whether the specified    key exists in the database.           Parameters                    key                      The key the check is performed for.                                handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns TRUE if the key exists, FALSE otherwise.           See Also            dba_delete() - Delete DBA entry specified by key     dba_fetch() - Fetch data specified by key     dba_insert() - Insert entry     dba_replace() - Replace or insert entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-fetch.php","title":"dba_fetch","description":"dba_fetch   (PHP 4, PHP 5)dba_fetch \u2014 Fetch data specified by key        Description       string dba_fetch     ( string $key    , resource $handle    )          string dba_fetch      ( string $key     , int $skip     , resource $handle     )        dba_fetch() fetches the data specified by    key from the database specified with    handle.           Parameters                    key                      The key the data is specified by.              Note:                  When working with inifiles this function accepts arrays as keys         where index 0 is the group and index 1 is the value name. See:         dba_key_split().                                        skip                      The number of key-value pairs to ignore when using cdb databases.         This value is ignored for all other databases which do not support        multiple keys with the same name.                                handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns the associated string if the key\/data pair is found, FALSE     otherwise.           Changelog                                 Version        Description                                    4.3.0                 The skip parameter is available to support          cdb&#039;s capability of multiple keys having the same name.                                           See Also            dba_exists() - Check whether key exists     dba_delete() - Delete DBA entry specified by key     dba_insert() - Insert entry     dba_replace() - Replace or insert entry     dba_key_split() - Splits a key in string representation into array representation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-handlers.php","title":"dba_handlers","description":"dba_handlers   (PHP 4 >= 4.3.0, PHP 5)dba_handlers \u2014 List all the handlers available        Description       array dba_handlers     ([ bool $full_info = false   ] )        dba_handlers() list all the handlers supported by this    extension.           Parameters                    full_info                      Turns on\/off full information display in the result.                                    Return Values       Returns an array of database handlers. If full_info    is set to TRUE, the array will be associative with the handlers names as    keys, and their version information as value. Otherwise, the result will be    an indexed array of handlers names.        Note:          When the internal cdb library is used you will see      cdb and cdb_make.               Examples            Example #1 dba_handlers() Example       <?phpecho\u00a0\"Available\u00a0DBA\u00a0handlers:\\n\";foreach\u00a0(dba_handlers(true)\u00a0as\u00a0$handler_name\u00a0=>\u00a0$handler_version)\u00a0{\u00a0\u00a0\/\/\u00a0clean\u00a0the\u00a0versions\u00a0\u00a0$handler_version\u00a0=\u00a0str_replace('$',\u00a0'',\u00a0$handler_version);\u00a0\u00a0echo\u00a0\"\u00a0-\u00a0$handler_name:\u00a0$handler_version\\n\";}?>             The above example will output something similar to:       Available DBA handlers:  - cdb: 0.75, Revision: 1.3.2.3   - cdb_make: 0.75, Revision: 1.2.2.4   - db2: Sleepycat Software: Berkeley DB 2.7.7: (08\/20\/99)  - inifile: 1.0, Revision: 1.6.2.3   - flatfile: 1.0, Revision: 1.5.2.4"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-firstkey.php","title":"dba_firstkey","description":"dba_firstkey   (PHP 4, PHP 5)dba_firstkey \u2014 Fetch first key        Description       string dba_firstkey     ( resource $handle    )        dba_firstkey() returns the first key of the database    and resets the internal key pointer. This permits a linear search through    the whole database.           Parameters                    handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns the key on success or FALSE on failure.            See Also            dba_nextkey() - Fetch next key     dba_key_split() - Splits a key in string representation into array representation     Example 2 in the DBA examples"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-key-split.php","title":"dba_key_split","description":"dba_key_split   (PHP 5)dba_key_split \u2014     Splits a key in string representation into array representation           Description       mixed dba_key_split     ( mixed $key    )        dba_key_split() splits a key (string representation)    into an array representation.           Parameters                    key                      The key in string representation.                                    Return Values       Returns an array of the form array(0 => group, 1 =>     value_name). This function will return FALSE if     key is NULL or FALSE.           See Also            dba_firstkey() - Fetch first key     dba_nextkey() - Fetch next key     dba_fetch() - Fetch data specified by key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-insert.php","title":"dba_insert","description":"dba_insert   (PHP 4, PHP 5)dba_insert \u2014 Insert entry        Description       bool dba_insert     ( string $key    , string $value    , resource $handle    )        dba_insert() inserts the entry described with    key and value into the    database.           Parameters                    key                      The key of the entry to be inserted. If this key already exist in the         database, this function will fail. Use dba_replace()        if you need to replace an existent key.                                value                      The value to be inserted.                                handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            dba_exists() - Check whether key exists     dba_delete() - Delete DBA entry specified by key     dba_fetch() - Fetch data specified by key     dba_replace() - Replace or insert entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-list.php","title":"dba_list","description":"dba_list   (PHP 4 >= 4.3.0, PHP 5)dba_list \u2014 List all open database files        Description       array dba_list     ( void    )        dba_list() list all open database files.           Return Values       An associative array, in the form resourceid => filename."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-nextkey.php","title":"dba_nextkey","description":"dba_nextkey   (PHP 4, PHP 5)dba_nextkey \u2014 Fetch next key        Description       string dba_nextkey     ( resource $handle    )        dba_nextkey() returns the next key of the database    and advances the internal key pointer.            Parameters                    handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns the key on success or FALSE on failure.            See Also            dba_firstkey() - Fetch first key     dba_key_split() - Splits a key in string representation into array representation     Example 2 in the DBA examples"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-open.php","title":"dba_open","description":"dba_open   (PHP 4, PHP 5)dba_open \u2014 Open database        Description       resource dba_open     ( string $path    , string $mode    [, string $handler    [, mixed $...   ]] )        dba_open() establishes a database instance for    path with mode using    handler.           Parameters                    path                      Commonly a regular path in your filesystem.                                mode                      It is r for read access, w for        read\/write access to an already existing database, c        for read\/write access and database creation if it doesn&#039;t currently exist,        and n for create, truncate and read\/write access.        The database is created in BTree mode, other modes (like Hash or Queue)        are not supported.                      Additionally you can set the database lock method with the next char.         Use l to lock the database with a .lck        file or d to lock the databasefile itself. It is         important that all of your applications do this consistently.                      If you want to test the access and do not want to wait for the lock         you can add t as third character. When you are         absolutely sure that you do not require database locking you can do         so by using - instead of l or        d. When none of d,         l or - is used, dba will lock        on the database file as it would with d.              Note:                  There can only be one writer for one database file. When you use dba on          a web server and more than one request requires write operations they can         only be done one after another. Also read during write is not allowed.         The dba extension uses locks to prevent this. See the following table:                   DBA locking                                              already open             mode = \"rl\"             mode = \"rlt\"             mode = \"wl\"             mode = \"wlt\"             mode = \"rd\"             mode = \"rdt\"             mode = \"wd\"             mode = \"wdt\"                                                             not open             ok             ok             ok             ok             ok             ok             ok             ok                                      mode = \"rl\"             ok             ok             wait             false             illegal             illegal             illegal             illegal                                      mode = \"wl\"             wait             false             wait             false             illegal             illegal             illegal             illegal                                      mode = \"rd\"             illegal             illegal             illegal             illegal             ok             ok             wait             false                                      mode = \"wd\"             illegal             illegal             illegal             illegal             wait             false             wait             false                                                               ok: the second call will be successfull.          wait: the second call waits until dba_close() is called for the first.          false: the second call returns false.          illegal: you must not mix \"l\" and \"d\" modifiers for mode parameter.                                                 handler                      The name of the handler which        shall be used for accessing path. It is passed         all optional parameters given to dba_open() and         can act on behalf of them.                                    Return Values       Returns a positive handle on success or FALSE on failure.           Changelog                                 Version        Description                                    4.3.0                 It&#039;s possible to open database files over network connection. However         in cases a socket connection will be used (as with http or ftp) the         connection will be locked instead of the resource itself. This is important          to know since in such cases locking is simply ignored on the resource          and other solutions have to be found.                               4.3.0                 Locking and the mode modifiers \"l\", \"d\", \"-\"         and \"t\" were added.         In previous PHP versions, you must use semaphores to guard against         simultaneous database access for any database handler with the exception          of GDBM. See System V semaphore support.                               before 4.3.5                 open mode &#039;c&#039; is broken for several internal handlers and truncates         the database instead of appending data to an existent database.          Also dbm and ndbm fail on mode &#039;c&#039; in typical configurations (this          cannot be fixed).                                           See Also            dba_popen() - Open database persistently     dba_close() - Close a DBA database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-optimize.php","title":"dba_optimize","description":"dba_optimize   (PHP 4, PHP 5)dba_optimize \u2014 Optimize database        Description       bool dba_optimize     ( resource $handle    )        dba_optimize() optimizes the underlying database.           Parameters                    handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            dba_sync() - Synchronize database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-popen.php","title":"dba_popen","description":"dba_popen   (PHP 4, PHP 5)dba_popen \u2014 Open database persistently        Description       resource dba_popen     ( string $path    , string $mode    [, string $handler    [, mixed $...   ]] )        dba_popen() establishes a persistent database instance    for path with mode using    handler.           Parameters                    path                      Commonly a regular path in your filesystem.                               mode                      It is r for read access, w for        read\/write access to an already existing database, c        for read\/write access and database creation if it doesn&#039;t currently exist,        and n for create, truncate and read\/write access.                                handler                      The name of the handler which        shall be used for accessing path. It is passed         all optional parameters given to dba_popen() and         can act on behalf of them.                                    Return Values       Returns a positive handle on success or FALSE on failure.           See Also            dba_open() - Open database     dba_close() - Close a DBA database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-replace.php","title":"dba_replace","description":"dba_replace   (PHP 4, PHP 5)dba_replace \u2014 Replace or insert entry        Description       bool dba_replace     ( string $key    , string $value    , resource $handle    )        dba_replace() replaces or inserts the entry described    with key and value into the    database specified by handle.            Parameters                    key                      The key of the entry to be replaced.                                value                      The value to be replaced.                                handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            dba_exists() - Check whether key exists     dba_delete() - Delete DBA entry specified by key     dba_fetch() - Fetch data specified by key     dba_insert() - Insert entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-sync.php","title":"dba_sync","description":"dba_sync   (PHP 4, PHP 5)dba_sync \u2014 Synchronize database        Description       bool dba_sync     ( resource $handle    )        dba_sync() synchronizes the database. This will probably     trigger a physical write to the disk, if supported.           Parameters                    handle                      The database handler, returned by dba_open() or        dba_popen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            dba_optimize() - Optimize database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-addref.php","title":"com_addref","description":"com_addref   (PHP 4 >= 4.1.0)com_addref \u2014 Increases the components reference counter [deprecated]        Description        void com_addref      ( void    )        Increases the components reference counter.           Return Values       No value is returned.           Notes   Warning         You should never need to use this function."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-create-guid.php","title":"com_create_guid","description":"com_create_guid   (PHP 5)com_create_guid \u2014 Generate a globally unique identifier (GUID)        Description       string com_create_guid     ( void    )        Generates a Globally Unique Identifier (GUID).          A GUID is generated in the same way as DCE UUID&#039;s, except that the    Microsoft convention is to enclose a GUID in curly braces.           Return Values       Returns the GUID as a string.           See Also            uuid_create() in the PECL uuid extension"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-get-active-object.php","title":"com_get_active_object","description":"com_get_active_object   (PHP 5)com_get_active_object \u2014 Returns a handle to an already running instance of a COM object        Description       variant com_get_active_object     ( string $progid    [, int $code_page   ] )        com_get_active_object() is similar to creating a new    instance of a COM object, except that it will    only return an object to your script if the object is already running.    OLE applications use something known as the Running Object Table to    allow well-known applications to be launched only once; this function    exposes the COM library function GetActiveObject() to get a handle on a    running instance.           Parameters                    progid                      progid must be either the ProgID or CLSID for        the object that you want to access (for example        Word.Application).                                code_page                      Acts in precisely the same way that it does for the COM class.                                    Return Values       If the requested object is running, it will be returned to your script    just like any other COM object.           Errors\/Exceptions       There are a variety of reasons why this function might fail, the most    common being that the object is not already running.  In that situation,    the exception error code will be MK_E_UNAVAILABLE;    you can use the getCode method of the exception object    to check the exception code.           Notes   Warning         Using com_get_active_object() in a web server context     is not always a smart idea.  Most COM\/OLE applications are not designed     to handle more than one client concurrently, even (or especially!)     Microsoft Office.  You should read \u00bb\u00a0Considerations for Server-Side     Automation of Office for more information on the general issues     involved."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-event-sink.php","title":"com_event_sink","description":"com_event_sink   (PHP 4 >= 4.2.0, PHP 5)com_event_sink \u2014 Connect events from a COM object to a PHP object        Description       bool com_event_sink     ( variant $comobject    , object $sinkobject    [, mixed $sinkinterface   ] )        Instructs COM to sink events generated by    comobject into the PHP object    sinkobject.          Be careful how you use this feature; if you are doing something similar    to the example below, then it doesn&#039;t really make sense to run it in a    web server context.           Parameters                    comobject                                              sinkobject                      sinkobject should be an instance of a class with        methods named after those of the desired dispinterface; you may use        com_print_typeinfo() to help generate a template class        for this purpose.                                sinkinterface                      PHP will attempt to use the default dispinterface type specified by        the typelibrary associated with comobject, but        you may override this choice by setting        sinkinterface to the name of the dispinterface        that you want to use.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 COM event sink example       <?phpclass\u00a0IEEventSinker\u00a0{\u00a0\u00a0\u00a0\u00a0var\u00a0$terminated\u00a0=\u00a0false;\u00a0\u00a0\u00a0function\u00a0ProgressChange($progress,\u00a0$progressmax)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Download\u00a0progress:\u00a0$progress\u00a0\/\u00a0$progressmax\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0function\u00a0DocumentComplete(&$dom,\u00a0$url)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Document\u00a0$url\u00a0complete\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0function\u00a0OnQuit()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Quit!\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->terminated\u00a0=\u00a0true;\u00a0\u00a0\u00a0\u00a0}}$ie\u00a0=\u00a0new\u00a0COM(\"InternetExplorer.Application\");\/\/\u00a0note\u00a0that\u00a0you\u00a0don't\u00a0need\u00a0the\u00a0&\u00a0for\u00a0PHP\u00a05!$sink\u00a0=\u00a0new\u00a0IEEventSinker();com_event_sink($ie,\u00a0$sink,\u00a0\"DWebBrowserEvents2\");$ie->Visible\u00a0=\u00a0true;$ie->Navigate(\"http:\/\/www.example.org\");while(!$sink->terminated)\u00a0{\u00a0\u00a0com_message_pump(4000);}$ie\u00a0=\u00a0null;?>                       See Also            com_print_typeinfo() - Print out a PHP class definition for a dispatchable interface     com_message_pump() - Process COM messages, sleeping for up to timeoutms milliseconds"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-get.php","title":"com_get","description":"com_get   (PHP 4)com_get \u2014 Gets the value of a COM Component&#039;s property [deprecated]        Description       Deprecated, use the OO syntax instead.               Example #1 OO syntax       <?php\/\/\u00a0do\u00a0this$var\u00a0=\u00a0$obj->property;\/\/\u00a0instead\u00a0of\u00a0this:$var\u00a0=\u00a0com_get($obj,\u00a0'property');?>                       Notes   Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-invoke.php","title":"com_invoke","description":"com_invoke   (PHP 4)com_invoke \u2014 Calls a COM component&#039;s method [deprecated]        Description       mixed com_invoke     ( resource $com_object    , string $function_name    [, mixed $function_parameters   ] )        com_invoke() invokes the method    named function_name of the COM    component referenced by com_object.    com_invoke() returns FALSE on error,    returns the function_name&#039;s return    value on success. All the extra parameters    function_parameters are passed to    the method function_name.               Example #1 Don&#039;t use com_invoke(), use OO syntax instead       <?php\/\/\u00a0do\u00a0this$val\u00a0=\u00a0$obj->method($one,\u00a0$two);\/\/\u00a0instead\u00a0of\u00a0this:$val\u00a0=\u00a0com_invoke($obj,\u00a0'method',\u00a0$one,\u00a0$two);?>                   Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-isenum.php","title":"com_isenum","description":"com_isenum   (PHP 4 >= 4.1.0)com_isenum \u2014 Indicates if a COM object has an IEnumVariant interface for iteration [deprecated]        Description       bool com_isenum     ( variant $com_module    )        Checks to see if a COM object can be enumerated using the    Next()  method hack.    See COM class for more details on these    methods.           Parameters                    com_module                      The COM object.                                    Return Values       Returns TRUE if the object can be enumerated, FALSE otherwise.           Notes   Note:          This function does not exist in PHP 5; use the more natural     foreach statement to iterate over the contents of COM objects.     See For Each for more details."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-propget.php","title":"com_propget","description":"com_propget   (PHP 4)com_propget \u2014 Alias of com_get()         Description       This function is an alias of:     com_get().      Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-message-pump.php","title":"com_message_pump","description":"com_message_pump   (PHP 4 >= 4.2.0, PHP 5)com_message_pump \u2014 Process COM messages, sleeping for up to timeoutms milliseconds        Description       bool com_message_pump     ([ int $timeoutms = 0   ] )        This function will sleep for up to timeoutms    milliseconds, or until a message arrives in the queue.          The purpose of this function is to route COM calls between apartments and    handle various synchronization issues.  This allows your script to wait    efficiently for events to be triggered, while still handling other events    or running other code in the background.  You should use it in a loop, as    demonstrated by the example in the com_event_sink()    function, until you are finished using event bound COM objects.           Parameters                    timeoutms                      The timeout, in milliseconds.                      If you do not specify a value for timeoutms,        then 0 will be assumed.  A 0 value means that no waiting will be        performed; if there are messages pending they will be dispatched as        before; if there are no messages pending, the function will return        FALSE immediately without sleeping.                                    Return Values       If a message or messages arrives before the timeout, they will be    dispatched, and the function will return TRUE. If the timeout occurs and    no messages were processed, the return value will be FALSE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-load.php","title":"com_load","description":"com_load   (PHP 4)com_load \u2014 Creates a new reference to a COM component [deprecated]        Description       Deprecated, use the OO syntax instead.               Example #1 OO syntax       <?php\/\/\u00a0do\u00a0this$obj\u00a0=\u00a0new\u00a0COM($module);\/\/\u00a0instead\u00a0of\u00a0this:$obj\u00a0=\u00a0com_load($module);?>                       Notes   Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-print-typeinfo.php","title":"com_print_typeinfo","description":"com_print_typeinfo   (PHP 4 >= 4.2.0, PHP 5)com_print_typeinfo \u2014 Print out a PHP class definition for a dispatchable interface        Description       bool com_print_typeinfo     ( object $comobject    [, string $dispinterface    [, bool $wantsink = false   ]] )        The purpose of this function is to help generate a skeleton class for use    as an event sink.  You may also use it to generate a dump of any COM    object, provided that it supports enough of the introspection interfaces,    and that you know the name of the interface you want to display.           Parameters                    comobject                      comobject should be either an instance of a COM        object, or be the name of a typelibrary (which will be resolved according        to the rules set out in com_load_typelib()).                                dispinterface                      The name of an IDispatch descendant interface that you want to display.                                wantsink                      If set to TRUE, the corresponding sink interface will be displayed        instead.                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            com_event_sink() - Connect events from a COM object to a PHP object     com_load_typelib() - Loads a Typelib"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-load-typelib.php","title":"com_load_typelib","description":"com_load_typelib   (PHP 4 >= 4.1.0, PHP 5)com_load_typelib \u2014 Loads a Typelib        Description       bool com_load_typelib     ( string $typelib_name    [, bool $case_insensitive = true   ] )        Loads a type-library and registers its constants in the engine, as though    they were defined using define().          Note that it is much more efficient to use the  configuration setting to pre-load and    register the constants, although not so flexible.          If you have turned on , then    PHP will attempt to automatically register the constants associated with a    COM object when you instantiate it.  This depends on the interfaces    provided by the COM object itself, and may not always be possible.           Parameters                    typelib_name                      typelib_name can be one of the following:                                      The filename of a .tlb file or the executable module           that contains the type library.                                                 The type library GUID, followed by its version number, for example           {00000200-0000-0010-8000-00AA006D2EA4},2,0.                                                 The type library name, e.g. Microsoft OLE DB ActiveX Data           Objects 1.0 Library.                                   PHP will attempt to resolve the type library in this order, as the        process gets more and more expensive as you progress down the list;        searching for the type library by name is handled by physically        enumerating the registry until we find a match.                                case_insensitive                      The case_insensitive behaves in the same way as        the parameter with the same name in the define()        function.                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-propput.php","title":"com_propput","description":"com_propput   (PHP 4)com_propput \u2014 Alias of com_set()         Description       This function is an alias of:     com_set().          Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-propset.php","title":"com_propset","description":"com_propset   (PHP 4)com_propset \u2014 Alias of com_set()         Description       This function is an alias of:     com_set().      Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-release.php","title":"com_release","description":"com_release   (PHP 4 >= 4.1.0)com_release \u2014 Decreases the components reference counter [deprecated]        Description       void com_release     ( void    )        Decreases the components reference counter.           Return Values       No value is returned.           Changelog                                 Version        Description                                    5.0.0                 This function was removed.                                           Notes   Warning         You should never need to use this function."},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-set.php","title":"com_set","description":"com_set   (PHP 4)com_set \u2014 Assigns a value to a COM component&#039;s property        Description       Deprecated, use the OO syntax instead.               Example #1 OO syntax       <?php\/\/\u00a0do\u00a0this$obj->property\u00a0=\u00a0$value;\/\/\u00a0instead\u00a0of\u00a0this:com_set($obj,\u00a0'property',\u00a0$value);?>                       Notes   Note:      This function does not exist in PHP 5; instead, you should use the regular   and more natural OO syntax to access properties or call methods."},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-abs.php","title":"variant_abs","description":"variant_abs   (PHP 5)variant_abs \u2014 Returns the absolute value of a variant        Description       mixed variant_abs     ( mixed $val    )        Returns the absolute value of a variant.           Parameters                    val                      The variant.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values       Returns the absolute value of val.           See Also            abs() - Absolute value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-and.php","title":"variant_and","description":"variant_and   (PHP 5)variant_and \u2014 Performs a bitwise AND operation between two variants        Description       mixed variant_and     ( mixed $left    , mixed $right    )        Performs a bitwise AND operation.    Note that this is slightly different from a regular AND operation.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant AND Rules                          If left is        If right is        then the result is                            TRUETRUETRUE        TRUEFALSEFALSE        TRUENULLNULL        FALSETRUEFALSE        FALSEFALSEFALSE        FALSENULLFALSE        NULLTRUENULL        NULLFALSEFALSE        NULLNULLNULL                            See Also            variant_or() - Performs a logical disjunction on two variants"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-add.php","title":"variant_add","description":"variant_add   (PHP 5)variant_add \u2014 \"Adds\" two variant values together and returns the result        Description       mixed variant_add     ( mixed $left    , mixed $right    )        Adds left to right using    the following rules (taken from the MSDN library), which correspond to    those of Visual Basic:         Variant Addition Rules                       If       Then                               Both expressions are of the string type       Concatenation                    One expression is a string type and the other a       character       Addition                    One expression is numeric and the other is a string       Addition                    Both expressions are numeric       Addition                    Either expression is NULL       NULL is returned                    Both expressions are empty       Integer subtype is returned                              Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values       Returns the result.           See Also            variant_sub() - Subtracts the value of the right variant from the left variant value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-cast.php","title":"variant_cast","description":"variant_cast   (PHP 5)variant_cast \u2014 Convert a variant into a new variant object of another type        Description       variant variant_cast     ( variant $variant    , int $type    )        This function makes a copy of variant and then    performs a variant cast operation to force the copy to have the type    given by type.          This function wraps VariantChangeType() in the COM library; consult MSDN    for more information.           Parameters                    variant                      The variant.                                type                      type should be one of the        VT_XXX constants.                                    Return Values       Returns a VT_DATE variant.           See Also            variant_set_type() - Convert a variant into another type \"in-place\""},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-cat.php","title":"variant_cat","description":"variant_cat   (PHP 5)variant_cat \u2014 concatenates two variant values together and returns the result        Description       mixed variant_cat     ( mixed $left    , mixed $right    )        Concatenates left with    right and returns the result.          This function is notionally equivalent to    $left . $right.           Parameters                    left                      The left operand.                                right                      The right operand.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns the result of the concatenation.           See Also            String Operators for the string    concatenation operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-cmp.php","title":"variant_cmp","description":"variant_cmp   (PHP 5)variant_cmp \u2014 Compares two variants        Description       int variant_cmp     ( mixed $left    , mixed $right    [, int $lcid    [, int $flags   ]] )        Compares left with right.          This function will only compare scalar values, not arrays or variant records.           Parameters                    left                      The left operand.                                right                      The right operand.                                lcid                      A valid Locale Identifier to use when comparing strings (this affects        string collation).                                flags                      flags can be one or more of the following values        OR&#039;d together, and affects string comparisons:                 Variant Comparision Flags                                          value            meaning                                                        NORM_IGNORECASE            Compare case insensitively                                   NORM_IGNORENONSPACE            Ignore nonspacing characters                                   NORM_IGNORESYMBOLS            Ignore symbols                                   NORM_IGNOREWIDTH            Ignore string width                                   NORM_IGNOREKANATYPE            Ignore Kana type                                   NORM_IGNOREKASHIDA            Ignore Arabic kashida characters                                                                       Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns one of the following:         Variant Comparision Results                          value        meaning                                    VARCMP_LT        left is less than         right                               VARCMP_EQ        left is equal to         right                               VARCMP_GT        left is greater than         right                               VARCMP_NULL        Either left,         right or both are NULL"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-date-from-timestamp.php","title":"variant_date_from_timestamp","description":"variant_date_from_timestamp   (PHP 5)variant_date_from_timestamp \u2014 Returns a variant date representation of a Unix timestamp        Description       variant variant_date_from_timestamp     ( int $timestamp    )        Converts timestamp from a unix timestamp value    into a variant of type VT_DATE.  This allows easier    interopability between the unix-ish parts of PHP and COM.           Parameters                    timestamp                      A unix timestamp.                                    Return Values       Returns a VT_DATE variant.           See Also            variant_date_to_timestamp() - Converts a variant date\/time value to Unix timestamp     mktime() - Get Unix timestamp for a date     time() - Return current Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-div.php","title":"variant_div","description":"variant_div   (PHP 5)variant_div \u2014 Returns the result from dividing two variants        Description       mixed variant_div     ( mixed $left    , mixed $right    )        Divides left by right and    returns the result.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant Division Rules                          If        Then                                    Both expressions are of the string, date, character, boolean type        Double is returned                       One expression is a string type and the other a        character        Division and a double is returned                       One expression is numeric and the other is a string        Division and a double is returned.                       Both expressions are numeric        Division and a double is returned                       Either expression is NULL        NULL is returned                       right is empty and        left is anything but empty        A com_exception with code DISP_E_DIVBYZERO        is thrown                       left is empty and        right is anything but empty.        0 as type double is returned                       Both expressions are empty        A com_exception with code DISP_E_OVERFLOW        is thrown                                   See Also            variant_idiv() - Converts variants to integers and then returns the result from dividing them"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-date-to-timestamp.php","title":"variant_date_to_timestamp","description":"variant_date_to_timestamp   (PHP 5)variant_date_to_timestamp \u2014 Converts a variant date\/time value to Unix timestamp        Description       int variant_date_to_timestamp     ( variant $variant    )        Converts variant from a VT_DATE    (or similar) value into a Unix timestamp.  This allows easier    interopability between the Unix-ish parts of PHP and COM.           Parameters                    variant                      The variant.                                    Return Values       Returns a unix timestamp.           See Also            variant_date_from_timestamp() - Returns a variant date representation of a Unix timestamp     date() - Format a local time\/date     strftime() - Format a local time\/date according to locale settings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-eqv.php","title":"variant_eqv","description":"variant_eqv   (PHP 5)variant_eqv \u2014 Performs a bitwise equivalence on two variants        Description       mixed variant_eqv     ( mixed $left    , mixed $right    )        Performs a bitwise equivalence on two variants.           Parameters                    left                      The left operand.                                right                      The right operand.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       If each bit in left is equal to the corresponding    bit in right then TRUE is returned, otherwise    FALSE is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-fix.php","title":"variant_fix","description":"variant_fix   (PHP 5)variant_fix \u2014 Returns the integer portion of a variant        Description       mixed variant_fix     ( mixed $variant    )        Gets the integer portion of a variant.           Parameters                    variant                      The variant.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       If variant is negative, then the first negative    integer greater than or equal to the variant is returned, otherwise    returns the integer portion of the value of    variant.           Notes   Warning         This documentation is based on the MSDN documentation; it appears     that this function is either the same as     variant_int(), or that there is an error in the MSDN     documentation.               See Also            variant_int() - Returns the integer portion of a variant     variant_round() - Rounds a variant to the specified number of decimal places     floor() - Round fractions down     ceil() - Round fractions up     round() - Rounds a float"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-get-type.php","title":"variant_get_type","description":"variant_get_type   (PHP 5)variant_get_type \u2014 Returns the type of a variant object        Description       int variant_get_type     ( variant $variant    )        Returns the type of a variant object.           Parameters                    variant                      The variant object.                                    Return Values       This function returns an integer value that indicates the type of    variant, which can be an instance of    COM, DOTNET or    VARIANT classes.  The return value can be compared    to one of the VT_XXX constants.          The return value for COM and DOTNET objects will usually be    VT_DISPATCH; the only reason this function works for    those classes is because COM and DOTNET are descendants of VARIANT.          In PHP versions prior to 5, you could obtain this information from    instances of the VARIANT class ONLY, by reading a fake    type property.  See the VARIANT class for more information on    this."},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-idiv.php","title":"variant_idiv","description":"variant_idiv   (PHP 5)variant_idiv \u2014 Converts variants to integers and then returns the result from dividing them        Description       mixed variant_idiv     ( mixed $left    , mixed $right    )        Converts left and right to    integer values, and then performs integer division.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant Integer Division Rules                          If        Then                                    Both expressions are of the string, date, character, boolean type        Division and integer is returned                       One expression is a string type and the other a        character        Division                       One expression is numeric and the other is a string        Division                       Both expressions are numeric        Division                       Either expression is NULL        NULL is returned                       Both expressions are empty        A com_exception with code DISP_E_DIVBYZERO        is thrown                                   See Also            variant_div() - Returns the result from dividing two variants"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-int.php","title":"variant_int","description":"variant_int   (PHP 5)variant_int \u2014 Returns the integer portion of a variant        Description       mixed variant_int     ( mixed $variant    )        Gets the integer portion of a variant.           Parameters                    variant                      The variant.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       If variant is negative, then the first negative    integer greater than or equal to the variant is returned, otherwise    returns the integer portion of the value of    variant.           See Also            variant_fix() - Returns the integer portion of a variant     variant_round() - Rounds a variant to the specified number of decimal places     floor() - Round fractions down     ceil() - Round fractions up     round() - Rounds a float"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-imp.php","title":"variant_imp","description":"variant_imp   (PHP 5)variant_imp \u2014 Performs a bitwise implication on two variants        Description       mixed variant_imp     ( mixed $left    , mixed $right    )        Performs a bitwise implication operation.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant Implication Table                       If left is       If right is       then the result is                        TRUETRUETRUE       TRUEFALSETRUE       TRUENULLTRUE       FALSETRUETRUE       FALSEFALSETRUE       FALSENULLTRUE       NULLTRUETRUE       NULLFALSENULL       NULLNULLNULL"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-mod.php","title":"variant_mod","description":"variant_mod   (PHP 5)variant_mod \u2014 Divides two variants and returns only the remainder        Description       mixed variant_mod     ( mixed $left    , mixed $right    )        Divides left by right and    returns the remainder.           Parameters                    left                      The left operand.                                right                      The right operand.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns the remainder of the division.           See Also            variant_div() - Returns the result from dividing two variants     variant_idiv() - Converts variants to integers and then returns the result from dividing them"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-mul.php","title":"variant_mul","description":"variant_mul   (PHP 5)variant_mul \u2014 Multiplies the values of the two variants        Description       mixed variant_mul     ( mixed $left    , mixed $right    )        Multiplies left by right.           Parameters                    left                      The left operand.                                right                      The right operand.                             Boolean values are converted to -1 for FALSE and 0 for TRUE.    Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant Multiplication Rules                          If        Then                                    Both expressions are of the string, date, character, boolean type        Multiplication                       One expression is a string type and the other a        character        Multiplication                       One expression is numeric and the other is a string        Multiplication                       Both expressions are numeric        Multiplication                       Either expression is NULL        NULL is returned                       Both expressions are empty        Empty string is returned                                   See Also            variant_div() - Returns the result from dividing two variants     variant_idiv() - Converts variants to integers and then returns the result from dividing them"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-neg.php","title":"variant_neg","description":"variant_neg   (PHP 5)variant_neg \u2014 Performs logical negation on a variant        Description       mixed variant_neg     ( mixed $variant    )        Performs logical negation of variant.           Parameters                    variant                      The variant.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns the result of the logical negation."},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-or.php","title":"variant_or","description":"variant_or   (PHP 5)variant_or \u2014 Performs a logical disjunction on two variants        Description       mixed variant_or     ( mixed $left    , mixed $right    )        Performs a bitwise OR operation.    Note that this is slightly different from a regular OR operation.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant OR Rules                          If left is        If right is        then the result is                            TRUETRUETRUE        TRUEFALSETRUE        TRUENULLTRUE        FALSETRUETRUE        FALSEFALSEFALSE        FALSENULLNULL        NULLTRUETRUE        NULLFALSENULL        NULLNULLNULL                            See Also            variant_and() - Performs a bitwise AND operation between two variants     variant_xor() - Performs a logical exclusion on two variants"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-not.php","title":"variant_not","description":"variant_not   (PHP 5)variant_not \u2014 Performs bitwise not negation on a variant        Description       mixed variant_not     ( mixed $variant    )        Performs bitwise not negation on variant and    returns the result.           Parameters                    variant                      The variant.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns the bitwise not negation. If variant is    NULL, the result will also be NULL."},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-pow.php","title":"variant_pow","description":"variant_pow   (PHP 5)variant_pow \u2014 Returns the result of performing the power function with two variants        Description       mixed variant_pow     ( mixed $left    , mixed $right    )        Returns the result of left to the power of    right.           Parameters                    left                      The left operand.                                right                      The right operand.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns the result of left to the power of    right.           See Also            pow() - Exponential expression"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-round.php","title":"variant_round","description":"variant_round   (PHP 5)variant_round \u2014 Rounds a variant to the specified number of decimal places        Description       mixed variant_round     ( mixed $variant    , int $decimals    )        Returns the value of variant rounded to    decimals decimal places.           Parameters                    variant                      The variant.                                decimals                      Number of decimal places.                               Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.           Return Values       Returns the rounded value.           See Also            round() - Rounds a float"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-set-type.php","title":"variant_set_type","description":"variant_set_type   (PHP 5)variant_set_type \u2014 Convert a variant into another type \"in-place\"        Description       void variant_set_type     ( variant $variant    , int $type    )        This function is similar to variant_cast() except that    the variant is modified \"in-place\"; no new variant is created. The    parameters for this function have identical meaning to those of    variant_cast().           Parameters                    variant                      The variant.                                type                                                  Return Values       No value is returned.           See Also            variant_cast() - Convert a variant into a new variant object of another type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-sub.php","title":"variant_sub","description":"variant_sub   (PHP 5)variant_sub \u2014 Subtracts the value of the right variant from the left variant value        Description       mixed variant_sub     ( mixed $left    , mixed $right    )        Subtracts right from left.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant Subtraction Rules                          If        Then                                    Both expressions are of the string type        Subtraction                       One expression is a string type and the other a        character        Subtraction                       One expression is numeric and the other is a string        Subtraction.                       Both expressions are numeric        Subtraction                       Either expression is NULL        NULL is returned                       Both expressions are empty        Empty string is returned                                   See Also            variant_add() - \"Adds\" two variant values together and returns the result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-set.php","title":"variant_set","description":"variant_set   (PHP 5)variant_set \u2014 Assigns a new value for a variant object        Description       void variant_set     ( variant $variant    , mixed $value    )        Converts value to a variant and assigns it to the    variant object; no new variant object is created,    and the old value of variant is freed\/released.           Parameters                    variant                      The variant.                                value                                                  Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-xor.php","title":"variant_xor","description":"variant_xor   (PHP 5)variant_xor \u2014 Performs a logical exclusion on two variants        Description       mixed variant_xor     ( mixed $left    , mixed $right    )        Performs a logical exclusion.           Parameters                    left                      The left operand.                                right                      The right operand.                             Note:    As with all the variant arithmetic functions, the parameters for this function  can be either a PHP native type (integer, string, floating point, boolean or  NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types  will be converted to variants using the same rules as found in the constructor  for the VARIANT class.  COM and DOTNET objects  will have the value of their default property taken and used as the variant value.    The variant arithmetic functions are wrappers around the similarly named  functions in the COM library; for more information on these functions, consult  the MSDN library.  The PHP functions are named slightly differently; for example  variant_add() in PHP corresponds to VarAdd()   in the MSDN documentation.              Return Values            Variant XOR Rules                          If left is        If right is        then the result is                            TRUETRUEFALSE        TRUEFALSETRUE        FALSETRUETRUE        FALSEFALSEFALSE        NULLNULLNULL                            See Also            variant_or() - Performs a logical disjunction on two variants     variant_and() - Performs a bitwise AND operation between two variants"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-create-from-format.php","title":"date_create_from_format","description":"date_create_from_format   (PHP 5 >= 5.3.0)date_create_from_format \u2014 Alias of  DateTime::createFromFormat()         Description       This function is an alias of:   DateTime::createFromFormat()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-add.php","title":"date_add","description":"date_add   (PHP 5 >= 5.3.0)date_add \u2014 Alias of  DateTime::add()         Description       This function is an alias of:   DateTime::add()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-create.php","title":"date_create","description":"date_create   (PHP 5 >= 5.2.0)date_create \u2014 Alias of  DateTime::__construct()         Description       This function is an alias of:   DateTime::__construct()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.checkdate.php","title":"checkdate","description":"checkdate   (PHP 4, PHP 5)checkdate \u2014 Validate a Gregorian date         Description       bool checkdate     ( int $month    , int $day    , int $year    )        Checks the validity of the date formed by the arguments. A date    is considered valid if each parameter is properly defined.             Parameters                    month                      The month is between 1 and 12 inclusive.                                day                      The day is within the allowed number of days for the given         month.  Leap years         are taken into consideration.                                year                      The year is between 1 and 32767 inclusive.                                     Return Values       Returns TRUE if the date given is valid; otherwise returns FALSE.            Examples            Example #1 checkdate() example       <?phpvar_dump(checkdate(12,\u00a031,\u00a02000));var_dump(checkdate(2,\u00a029,\u00a02001));?>             The above example will output:       bool(true) bool(false)                      See Also            mktime() - Get Unix timestamp for a date     strtotime() - Parse about any English textual datetime description into a Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-date-set.php","title":"date_date_set","description":"date_date_set   (PHP 5 >= 5.2.0)date_date_set \u2014 Alias of  DateTime::setDate()         Description       This function is an alias of:   DateTime::setDate()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-default-timezone-get.php","title":"date_default_timezone_get","description":"date_default_timezone_get   (PHP 5 >= 5.1.0)date_default_timezone_get \u2014     Gets the default timezone used by all date\/time functions in a script           Description       string date_default_timezone_get     ( void    )        In order of preference, this function returns the default timezone by:                      Reading the timezone set using the       date_default_timezone_set() function (if any)                             Prior to PHP 5.4.0 only: Reading the TZ       environment variable (if non empty)                             Reading the value of the date.timezone ini option       (if set)                             Prior to PHP 5.4.0 only: Querying the host operating system (if supported       and allowed by the OS). This uses an algorithm       that has to guess the timezone. This is by no means going to work correctly for        every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed       correctly, and set date.timezone to the correct timezone       instead.                         If none of the above succeed,  date_default_timezone_get()    will return a default timezone of UTC.            Return Values       Returns a string.            Changelog                                 Version        Description                                    5.4.0                 The TZ environment variable is no longer used to         guess the timezone.                               5.4.0                 The timezone is no longer guessed from information available through the         operating system as the guessed timezone can not be relied on.                                            Examples            Example #1 Getting the default timezone       <?phpdate_default_timezone_set('Europe\/London');if\u00a0(date_default_timezone_get())\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'date_default_timezone_set:\u00a0'\u00a0.\u00a0date_default_timezone_get()\u00a0.\u00a0'<br\u00a0\/>';}if\u00a0(ini_get('date.timezone'))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'date.timezone:\u00a0'\u00a0.\u00a0ini_get('date.timezone');}?>             The above example will output something similar to:       date_default_timezone_set: Europe\/London date.timezone: Europe\/London                         Example #2 Getting the abbreviation of a timezone       <?phpdate_default_timezone_set('America\/Los_Angeles');echo\u00a0date_default_timezone_get()\u00a0.\u00a0'\u00a0=>\u00a0'\u00a0.\u00a0date('e')\u00a0.\u00a0'\u00a0=>\u00a0'\u00a0.\u00a0date('T');?>             The above example will output:       America\/Los_Angeles => America\/Los_Angeles => PST                      See Also            date_default_timezone_set() - Sets the default timezone used by all date\/time functions in a script     List of Supported Timezones"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-default-timezone-set.php","title":"date_default_timezone_set","description":"date_default_timezone_set   (PHP 5 >= 5.1.0)date_default_timezone_set \u2014     Sets the default timezone used by all date\/time functions in a script           Description       bool date_default_timezone_set     ( string $timezone_identifier    )        date_default_timezone_set() sets the default timezone    used by all date\/time functions.      Note:          Since PHP 5.1.0 (when the date\/time functions were rewritten), every call     to a date\/time function will generate a E_NOTICE if     the timezone isn&#039;t valid, and\/or a E_WARNING message     if using the system settings or the TZ environment     variable.              Instead of using this function to set the default timezone in your script,    you can also use the INI setting date.timezone to set the default    timezone.             Parameters                    timezone_identifier                      The timezone identifier, like UTC or        Europe\/Lisbon. The list of valid identifiers is        available in the List of Supported Timezones.                                     Return Values       This function returns FALSE if the    timezone_identifier isn&#039;t valid, or TRUE    otherwise.            Examples            Example #1 Getting the default timezone       <?phpdate_default_timezone_set('America\/Los_Angeles');$script_tz\u00a0=\u00a0date_default_timezone_get();if\u00a0(strcmp($script_tz,\u00a0ini_get('date.timezone'))){\u00a0\u00a0\u00a0\u00a0echo\u00a0'Script\u00a0timezone\u00a0differs\u00a0from\u00a0ini-set\u00a0timezone.';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Script\u00a0timezone\u00a0and\u00a0ini-set\u00a0timezone\u00a0match.';}?>                        Changelog                                 Version        Description                                    5.3.0                 Now throws E_WARNING rather than         E_STRICT.                               5.1.2                 The function started to validate the         timezone_identifier parameter.                                            See Also            date_default_timezone_get() - Gets the default timezone used by all date\/time functions in a script     List of Supported Timezones"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-diff.php","title":"date_diff","description":"date_diff   (PHP 5 >= 5.3.0)date_diff \u2014 Alias of  DateTime::diff()         Description       This function is an alias of:   DateTime::diff()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-format.php","title":"date_format","description":"date_format   (PHP 5 >= 5.2.0)date_format \u2014 Alias of  DateTime::format()         Description       This function is an alias of:   DateTime::format()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-get-last-errors.php","title":"date_get_last_errors","description":"date_get_last_errors   (PHP 5 >= 5.3.0)date_get_last_errors \u2014 Alias of  DateTime::getLastErrors()         Description       This function is an alias of:   DateTime::getLastErrors()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-interval-create-from-date-string.php","title":"date_interval_create_from_date_string","description":"date_interval_create_from_date_string   (PHP 5 >= 5.3.0)date_interval_create_from_date_string \u2014 Alias of  DateInterval::createFromDateString()         Description       This function is an alias of:   DateInterval::createFromDateString()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-interval-format.php","title":"date_interval_format","description":"date_interval_format   (PHP 5 >= 5.3.0)date_interval_format \u2014 Alias of  DateInterval::format()         Description       This function is an alias of:   DateInterval::format()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-isodate-set.php","title":"date_isodate_set","description":"date_isodate_set   (PHP 5 >= 5.2.0)date_isodate_set \u2014 Alias of  DateTime::setISODate()         Description       This function is an alias of:   DateTime::setISODate()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-offset-get.php","title":"date_offset_get","description":"date_offset_get   (PHP 5 >= 5.2.0)date_offset_get \u2014 Alias of  DateTime::getOffset()         Description       This function is an alias of:   DateTime::getOffset()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-modify.php","title":"date_modify","description":"date_modify   (PHP 5 >= 5.2.0)date_modify \u2014 Alias of  DateTime::modify()         Description       This function is an alias of:   DateTime::modify()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-parse-from-format.php","title":"date_parse_from_format","description":"date_parse_from_format   (PHP 5 >= 5.3.0)date_parse_from_format \u2014 Get info about given date formatted according to the specified format         Description       array date_parse_from_format     ( string $format    , string $date    )        Returns associative array with detailed info about given date.            Parameters                    format                      Format accepted by DateTime::createFromFormat().                                date                      String representing the date.                                     Return Values          Returns associative array with detailed info about given date.            Examples            Example #1 date_parse_from_format() example       <?php$date\u00a0=\u00a0\"6.1.2009\u00a013:00+01:00\";print_r(date_parse_from_format(\"j.n.Y\u00a0H:iP\",\u00a0$date));?>             The above example will output:       Array (     [year] => 2009     [month] => 1     [day] => 6     [hour] => 13     [minute] => 0     [second] => 0     [fraction] =>      [warning_count] => 0     [warnings] => Array         (         )      [error_count] => 0     [errors] => Array         (         )      [is_localtime] => 1     [zone_type] => 1     [zone] => -60     [is_dst] =>  )                     See Also            DateTime::createFromFormat() - Returns new DateTime object formatted according to the specified format     checkdate() - Validate a Gregorian date"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-parse.php","title":"date_parse","description":"date_parse   (PHP 5 >= 5.2.0)date_parse \u2014 Returns associative array with detailed info about given date        Description       array date_parse     ( string $date    )          Parameters                    date                      Date in format accepted by strtotime().                                     Return Values       Returns array with information about the parsed date    on success or FALSE on failure.            Errors\/Exceptions       In case the date format has an error, the element &#039;errors&#039; will     contains the error messages.             Examples            Example #1 A date_parse() example       <?phpprint_r(date_parse(\"2006-12-12\u00a010:00:00.5\"));?>             The above example will output:       Array (     [year] => 2006     [month] => 12     [day] => 12     [hour] => 10     [minute] => 0     [second] => 0     [fraction] => 0.5     [warning_count] => 0     [warnings] => Array()     [error_count] => 0     [errors] => Array()     [is_localtime] =>  )                      See Also            checkdate() - Validate a Gregorian date     getdate() - Get date\/time information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sub.php","title":"date_sub","description":"date_sub   (PHP 5 >= 5.3.0)date_sub \u2014 Alias of  DateTime::sub()         Description       This function is an alias of:   DateTime::sub()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sun-info.php","title":"date_sun_info","description":"date_sun_info   (PHP 5 >= 5.1.2)date_sun_info \u2014 Returns an array with information about sunset\/sunrise and twilight begin\/end        Description       array date_sun_info     ( int $time    , float $latitude    , float $longitude    )          Parameters                    time                      Timestamp.                                latitude                      Latitude in degrees.                                longitude                      Longitude in degrees.                                     Return Values       Returns array on success or FALSE on failure.            Examples            Example #1 A date_sun_info() example       <?php$sun_info\u00a0=\u00a0date_sun_info(strtotime(\"2006-12-12\"),\u00a031.7667,\u00a035.2333);foreach\u00a0($sun_info\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0\"\u00a0.\u00a0date(\"H:i:s\",\u00a0$val)\u00a0.\u00a0\"\\n\";}?>             The above example will output:       sunrise: 05:52:11 sunset: 15:41:21 transit: 10:46:46 civil_twilight_begin: 05:24:08 civil_twilight_end: 16:09:24 nautical_twilight_begin: 04:52:25 nautical_twilight_end: 16:41:06 astronomical_twilight_begin: 04:21:32 astronomical_twilight_end: 17:12:00                      See Also            date_sunrise() - Returns time of sunrise for a given day and location     date_sunset() - Returns time of sunset for a given day and location"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sunrise.php","title":"date_sunrise","description":"date_sunrise   (PHP 5)date_sunrise \u2014 Returns time of sunrise for a given day and location         Description       mixed date_sunrise     ( int $timestamp    [, int $format = SUNFUNCS_RET_STRING    [, float $latitude = ini_get(\"date.default_latitude\")    [, float $longitude = ini_get(\"date.default_longitude\")    [, float $zenith = ini_get(\"date.sunrise_zenith\")    [, float $gmt_offset = 0   ]]]]] )        date_sunrise() returns the sunrise time for a given    day (specified as a timestamp) and location.            Parameters                    timestamp                      The timestamp of the day from which the sunrise        time is taken.                                format                               format constants                                          constant            description            example                                                        SUNFUNCS_RET_STRING            returns the result as string            16:46                                   SUNFUNCS_RET_DOUBLE            returns the result as float            16.78243132                                   SUNFUNCS_RET_TIMESTAMP            returns the result as integer (timestamp)            1095034606                                                                        latitude                      Defaults to North, pass in a negative value for South.        See also: date.default_latitude                                longitude                      Defaults to East, pass in a negative value for West.        See also: date.default_longitude                                zenith                      Default: date.sunrise_zenith                                gmtoffset                      Specified in hours.                                     Return Values       Returns the sunrise time in a specified format on    success or FALSE on failure.            Errors\/Exceptions         Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()           Changelog                                 Version        Description                                   5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                                   Examples            Example #1 date_sunrise() example       <?php\/*\u00a0calculate\u00a0the\u00a0sunrise\u00a0time\u00a0for\u00a0Lisbon,\u00a0PortugalLatitude:\u00a038.4\u00a0NorthLongitude:\u00a09\u00a0WestZenith\u00a0~=\u00a090offset:\u00a0+1\u00a0GMT*\/echo\u00a0date(\"D\u00a0M\u00a0d\u00a0Y\").\u00a0',\u00a0sunrise\u00a0time\u00a0:\u00a0'\u00a0.date_sunrise(time(),\u00a0SUNFUNCS_RET_STRING,\u00a038.4,\u00a0-9,\u00a090,\u00a01);?>             The above example will output something similar to:       Mon Dec 20 2004, sunrise time : 08:54                      See Also            date_sunset() - Returns time of sunset for a given day and location"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-time-set.php","title":"date_time_set","description":"date_time_set   (PHP 5 >= 5.2.0)date_time_set \u2014 Alias of  DateTime::setTime()         Description       This function is an alias of:   DateTime::setTime()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sunset.php","title":"date_sunset","description":"date_sunset   (PHP 5)date_sunset \u2014     Returns time of sunset for a given day and location            Description       mixed date_sunset     ( int $timestamp    [, int $format = SUNFUNCS_RET_STRING    [, float $latitude = ini_get(\"date.default_latitude\")    [, float $longitude = ini_get(\"date.default_longitude\")    [, float $zenith = ini_get(\"date.sunset_zenith\")    [, float $gmt_offset = 0    ]]]]] )          date_sunset() returns the sunset time for a given     day (specified as a timestamp) and location.              Parameters                    timestamp                      The timestamp of the day from which the sunset        time is taken.                                format                               format constants                                          constant            description            example                                                        SUNFUNCS_RET_STRING            returns the result as string            16:46                                   SUNFUNCS_RET_DOUBLE            returns the result as float            16.78243132                                   SUNFUNCS_RET_TIMESTAMP            returns the result as integer (timestamp)            1095034606                                                                        latitude                      Defaults to North, pass in a negative value for South.        See also: date.default_latitude                                longitude                      Defaults to East, pass in a negative value for West.        See also: date.default_longitude                                zenith                      Default: date.sunset_zenith                                gmtoffset                      Specified in hours.                                     Errors\/Exceptions         Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()           Changelog                                 Version        Description                                   5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                                   Return Values       Returns the sunset time in a specified format on    success or FALSE on failure.             Examples            Example #1 date_sunset() example       <?php\/*\u00a0calculate\u00a0the\u00a0sunset\u00a0time\u00a0for\u00a0Lisbon,\u00a0PortugalLatitude:\u00a038.4\u00a0NorthLongitude:\u00a09\u00a0WestZenith\u00a0~=\u00a090offset:\u00a0+1\u00a0GMT*\/echo\u00a0date(\"D\u00a0M\u00a0d\u00a0Y\").\u00a0',\u00a0sunset\u00a0time\u00a0:\u00a0'\u00a0.date_sunset(time(),\u00a0SUNFUNCS_RET_STRING,\u00a038.4,\u00a0-9,\u00a090,\u00a01);?>             The above example will output something similar to:       Mon Dec 20 2004, sunset time : 18:13                      See Also            date_sunrise() - Returns time of sunrise for a given day and location"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timestamp-get.php","title":"date_timestamp_get","description":"date_timestamp_get   (PHP 5 >= 5.3.0)date_timestamp_get \u2014 Alias of  DateTime::getTimestamp()         Description       This function is an alias of:   DateTime::getTimestamp()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timestamp-set.php","title":"date_timestamp_set","description":"date_timestamp_set   (PHP 5 >= 5.3.0)date_timestamp_set \u2014 Alias of  DateTime::setTimestamp()         Description       This function is an alias of:   DateTime::setTimestamp()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timezone-get.php","title":"date_timezone_get","description":"date_timezone_get   (PHP 5 >= 5.2.0)date_timezone_get \u2014 Alias of  DateTime::getTimezone()         Description       This function is an alias of:   DateTime::getTimezone()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timezone-set.php","title":"date_timezone_set","description":"date_timezone_set   (PHP 5 >= 5.2.0)date_timezone_set \u2014 Alias of  DateTime::setTimezone()         Description       This function is an alias of:   DateTime::setTimezone()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gettimeofday.php","title":"gettimeofday","description":"gettimeofday   (PHP 4, PHP 5)gettimeofday \u2014 Get current time         Description       mixed gettimeofday     ([ bool $return_float = false   ] )        This is an interface to gettimeofday(2). It returns an    associative array containing the data returned from the system    call.            Parameters                    return_float                      When set to TRUE, a float instead of an array is returned.                                     Return Values       By default an array is returned. If return_float    is set, then a float is returned.          Array keys:                      \"sec\" - seconds since the Unix Epoch                             \"usec\" - microseconds                             \"minuteswest\" - minutes west of Greenwich                             \"dsttime\" - type of dst correction                           Changelog                                 Version        Description                                    5.1.0                 The return_float parameter was added.                                            Examples            Example #1 gettimeofday() example       <?phpprint_r(gettimeofday());echo\u00a0gettimeofday(true);?>             The above example will output something similar to:       Array (     [sec] => 1073504408     [usec] => 238215     [minuteswest] => 0     [dsttime] => 1 )  1073504408.23910"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getdate.php","title":"getdate","description":"getdate   (PHP 4, PHP 5)getdate \u2014 Get date\/time information         Description       array getdate     ([ int $timestamp = time()   ] )        Returns an associative array containing the date    information of the timestamp, or the current    local time if no timestamp is given.            Parameters                    timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                        Return Values       Returns an associative array of information related to    the timestamp. Elements from the returned     associative array are as follows:               Key elements of the returned associative array                          Key        Description        Example returned values                                    \"seconds\"        Numeric representation of seconds        0 to 59                       \"minutes\"        Numeric representation of minutes        0 to 59                       \"hours\"        Numeric representation of hours        0 to 23                       \"mday\"        Numeric representation of the day of the month        1 to 31                       \"wday\"        Numeric representation of the day of the week        0 (for Sunday) through 6 (for Saturday)                       \"mon\"        Numeric representation of a month        1 through 12                       \"year\"        A full numeric representation of a year, 4 digits        Examples: 1999 or 2003                       \"yday\"        Numeric representation of the day of the year        0 through 365                       \"weekday\"        A full textual representation of the day of the week        Sunday through Saturday                       \"month\"        A full textual representation of a month, such as January or March        January through December                       0                 Seconds since the Unix Epoch, similar to the values returned by         time() and used by date().                         System Dependent, typically -2147483648 through         2147483647.                                            Examples            Example #1 getdate() example       <?php$today\u00a0=\u00a0getdate();print_r($today);?>             The above example will output something similar to:       Array (     [seconds] => 40     [minutes] => 58     [hours]   => 21     [mday]    => 17     [wday]    => 2     [mon]     => 6     [year]    => 2003     [yday]    => 167     [weekday] => Tuesday     [month]   => June     [0]       => 1055901520 )                      See Also            date() - Format a local time\/date     idate() - Format a local time\/date as integer     localtime() - Get the local time     time() - Return current Unix timestamp     setlocale() - Set locale information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gmdate.php","title":"gmdate","description":"gmdate   (PHP 4, PHP 5)gmdate \u2014 Format a GMT\/UTC date\/time         Description       string gmdate     ( string $format    [, int $timestamp = time()   ] )        Identical to the date() function except that    the time returned is Greenwich Mean Time (GMT).              Parameters                    format                      The format of the outputted date string. See the formatting        options for the date() function.                                timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                           Return Values       Returns a formatted date string. If a non-numeric value is used for     timestamp, FALSE is returned and an     E_WARNING level error is emitted.               Changelog                                 Version        Description                                    5.1.0                 The valid range of a timestamp is typically from Fri, 13 Dec         1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are         the dates that correspond to the minimum and maximum values for         a 32-bit signed integer). However, before PHP 5.1.0 this range was limited         from 01-01-1970 to 19-01-2038 on some systems (e.g. Windows).                               5.1.1                 There are useful constants          of standard date\/time formats that can be used to specify the          format parameter.                                            Examples            Example #1 gmdate() example           When run in Finland (GMT +0200), the first line below prints \"Jan 01      1998 00:00:00\", while the second prints \"Dec 31 1997 22:00:00\".            <?phpecho\u00a0date(\"M\u00a0d\u00a0Y\u00a0H:i:s\",\u00a0mktime(0,\u00a00,\u00a00,\u00a01,\u00a01,\u00a01998));echo\u00a0gmdate(\"M\u00a0d\u00a0Y\u00a0H:i:s\",\u00a0mktime(0,\u00a00,\u00a00,\u00a01,\u00a01,\u00a01998));?>                        See Also            date() - Format a local time\/date     mktime() - Get Unix timestamp for a date     gmmktime() - Get Unix timestamp for a GMT date     strftime() - Format a local time\/date according to locale settings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gmstrftime.php","title":"gmstrftime","description":"gmstrftime   (PHP 4, PHP 5)gmstrftime \u2014 Format a GMT\/UTC time\/date according to locale settings         Description       string gmstrftime     ( string $format    [, int $timestamp = time()   ] )        Behaves the same as strftime() except that the    time returned is Greenwich Mean Time (GMT). For example, when run    in Eastern Standard Time (GMT -0500), the first line below prints    \"Dec 31 1998 20:00:00\", while the second prints \"Jan 01 1999    01:00:00\".            Parameters                    format                      See description in strftime().                           timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                    Return Values       Returns a string formatted according to the given format string    using the given timestamp or the current    local time if no timestamp is given.  Month and weekday names and    other language dependent strings respect the current locale set    with setlocale().            Examples            Example #1 gmstrftime() example       <?phpsetlocale(LC_TIME,\u00a0'en_US');echo\u00a0strftime(\"%b\u00a0%d\u00a0%Y\u00a0%H:%M:%S\",\u00a0mktime(20,\u00a00,\u00a00,\u00a012,\u00a031,\u00a098))\u00a0.\u00a0\"\\n\";echo\u00a0gmstrftime(\"%b\u00a0%d\u00a0%Y\u00a0%H:%M:%S\",\u00a0mktime(20,\u00a00,\u00a00,\u00a012,\u00a031,\u00a098))\u00a0.\u00a0\"\\n\";?>                        See Also            strftime() - Format a local time\/date according to locale settings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.idate.php","title":"idate","description":"idate   (PHP 5)idate \u2014 Format a local time\/date as integer         Description       int idate     ( string $format    [, int $timestamp = time()   ] )        Returns a number formatted according to the given format string using the    given integer timestamp or the current local time    if no timestamp is given. In other words, timestamp    is optional and defaults to the value of time().          Unlike the function date(), idate()    accepts just one char in the format parameter.            Parameters                    format                               The following characters are recognized in the         format parameter string                                          format character            Description                                                        B            Swatch Beat\/Internet Time                                   d            Day of the month                                   h            Hour (12 hour format)                                   H            Hour (24 hour format)                                   i            Minutes                                   I (uppercase i)            returns 1 if DST is activated,             0 otherwise                                   L (uppercase l)            returns 1 for leap year,             0 otherwise                                   m            Month number                                   s            Seconds                                   t            Days in current month                                   U            Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC -             this is the same as time()                                   w            Day of the week (0 on Sunday)                                   W            ISO-8601 week number of year, weeks starting on             Monday                                   y            Year (1 or 2 digits - check note below)                                   Y            Year (4 digits)                                   z            Day of the year                                   Z            Timezone offset in seconds                                                                        timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                           Return Values       Returns an integer.          As idate() always returns an integer and    as they can&#039;t start with a \"0\", idate() may return    fewer digits than you would expect. See the example below.            Errors\/Exceptions         Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()           Changelog                                 Version        Description                                   5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                                   Examples            Example #1 idate() example       <?php$timestamp\u00a0=\u00a0strtotime('1st\u00a0January\u00a02004');\u00a0\/\/1072915200\/\/\u00a0this\u00a0prints\u00a0the\u00a0year\u00a0in\u00a0a\u00a0two\u00a0digit\u00a0format\/\/\u00a0however,\u00a0as\u00a0this\u00a0would\u00a0start\u00a0with\u00a0a\u00a0\"0\",\u00a0it\/\/\u00a0only\u00a0prints\u00a0\"4\"echo\u00a0idate('y',\u00a0$timestamp);?>                        See Also            date() - Format a local time\/date     getdate() - Get date\/time information     time() - Return current Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date.php","title":"date","description":"date   (PHP 4, PHP 5)date \u2014 Format a local time\/date           Description       string date     ( string $format    [, int $timestamp = time()   ] )        Returns a string formatted according to the given format string using the    given integer timestamp or the current time    if no timestamp is given.  In other words, timestamp    is optional and defaults to the value of time().            Parameters                    format                      The format of the outputted date string. See the formatting        options below. There are also several        predefined date constants        that may be used instead, so for example DATE_RSS        contains the format string &#039;D, d M Y H:i:s&#039;.                               The following characters are recognized in the         format parameter string                                          format character            Description            Example returned values                                                        Day            ---            ---                                   d            Day of the month, 2 digits with leading zeros            01 to 31                                   D            A textual representation of a day, three letters            Mon through Sun                                   j            Day of the month without leading zeros            1 to 31                                   l (lowercase &#039;L&#039;)            A full textual representation of the day of the week            Sunday through Saturday                                   N            ISO-8601 numeric representation of the day of the week (added in            PHP 5.1.0)            1 (for Monday) through 7 (for Sunday)                                   S            English ordinal suffix for the day of the month, 2 characters                         st, nd, rd or             th.  Works well with j                                               w            Numeric representation of the day of the week            0 (for Sunday) through 6 (for Saturday)                                   z            The day of the year (starting from 0)            0 through 365                                   Week            ---            ---                                   W            ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)            Example: 42 (the 42nd week in the year)                                   Month            ---            ---                                   F            A full textual representation of a month, such as January or March            January through December                                   m            Numeric representation of a month, with leading zeros            01 through 12                                   M            A short textual representation of a month, three letters            Jan through Dec                                   n            Numeric representation of a month, without leading zeros            1 through 12                                   t            Number of days in the given month            28 through 31                                   Year            ---            ---                                   L            Whether it&#039;s a leap year            1 if it is a leap year, 0 otherwise.                                   o            ISO-8601 year number. This has the same value as             Y, except that if the ISO week number             (W) belongs to the previous or next year, that year             is used instead. (added in PHP 5.1.0)            Examples: 1999 or 2003                                   Y            A full numeric representation of a year, 4 digits            Examples: 1999 or 2003                                   y            A two digit representation of a year            Examples: 99 or 03                                   Time            ---            ---                                   a            Lowercase Ante meridiem and Post meridiem            am or pm                                   A            Uppercase Ante meridiem and Post meridiem            AM or PM                                   B            Swatch Internet time            000 through 999                                   g            12-hour format of an hour without leading zeros            1 through 12                                   G            24-hour format of an hour without leading zeros            0 through 23                                   h            12-hour format of an hour with leading zeros            01 through 12                                   H            24-hour format of an hour with leading zeros            00 through 23                                   i            Minutes with leading zeros            00 to 59                                   s            Seconds, with leading zeros            00 through 59                                   u            Microseconds (added in PHP 5.2.2)            Example: 654321                                   Timezone            ---            ---                                   e            Timezone identifier (added in PHP 5.1.0)            Examples: UTC, GMT, Atlantic\/Azores                                   I (capital i)            Whether or not the date is in daylight saving time            1 if Daylight Saving Time, 0 otherwise.                                   O            Difference to Greenwich time (GMT) in hours            Example: +0200                                   P            Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)            Example: +02:00                                   T            Timezone abbreviation            Examples: EST, MDT ...                                   Z            Timezone offset in seconds. The offset for timezones west of UTC is always            negative, and for those east of UTC is always positive.            -43200 through 50400                                   Full Date\/Time            ---            ---                                   c            ISO 8601 date (added in PHP 5)            2004-02-12T15:19:21+00:00                                   r            \u00bb\u00a0RFC 2822 formatted date            Example: Thu, 21 Dec 2000 16:01:07 +0200                                   U            Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            See also time()                                                              Unrecognized characters in the format string will be printed        as-is.  The Z format will always return        0 when using gmdate().                     Note:                  Since this function only accepts integer timestamps the         u format character is only useful when using the         date_format() function with user based timestamps         created with date_create().                                        timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                        Return Values       Returns a formatted date string. If a non-numeric value is used for     timestamp, FALSE is returned and an     E_WARNING level error is emitted.            Errors\/Exceptions         Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()           Changelog                                 Version        Description                                    5.1.0                 The valid range of a timestamp is typically from Fri, 13 Dec         1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are         the dates that correspond to the minimum and maximum values for         a 32-bit signed integer). However, before PHP 5.1.0 this range was limited         from 01-01-1970 to 19-01-2038 on some systems (e.g. Windows).                              5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                 5.1.1                 There are useful constants          of standard date\/time formats that can be used to specify the          format parameter.                                            Examples            Example #1 date() examples       <?php\/\/\u00a0set\u00a0the\u00a0default\u00a0timezone\u00a0to\u00a0use.\u00a0Available\u00a0since\u00a0PHP\u00a05.1date_default_timezone_set('UTC');\/\/\u00a0Prints\u00a0something\u00a0like:\u00a0Mondayecho\u00a0date(\"l\");\/\/\u00a0Prints\u00a0something\u00a0like:\u00a0Monday\u00a08th\u00a0of\u00a0August\u00a02005\u00a003:12:46\u00a0PMecho\u00a0date('l\u00a0jS\u00a0\\of\u00a0F\u00a0Y\u00a0h:i:s\u00a0A');\/\/\u00a0Prints:\u00a0July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0Saturdayecho\u00a0\"July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0\"\u00a0.\u00a0date(\"l\",\u00a0mktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));\/*\u00a0use\u00a0the\u00a0constants\u00a0in\u00a0the\u00a0format\u00a0parameter\u00a0*\/\/\/\u00a0prints\u00a0something\u00a0like:\u00a0Mon,\u00a015\u00a0Aug\u00a02005\u00a015:12:46\u00a0UTCecho\u00a0date(DATE_RFC822);\/\/\u00a0prints\u00a0something\u00a0like:\u00a02000-07-01T00:00:00+00:00echo\u00a0date(DATE_ATOM,\u00a0mktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));?>                      You can prevent a recognized character in the format string from being    expanded by escaping it with a preceding backslash. If the character with    a backslash is already a special sequence, you may need to also escape    the backslash.         Example #2 Escaping characters in date()       <?php\/\/\u00a0prints\u00a0something\u00a0like:\u00a0Wednesday\u00a0the\u00a015thecho\u00a0date('l\u00a0\\t\\h\\e\u00a0jS');?>                      It is possible to use date() and    mktime() together to find dates in the future    or the past.         Example #3 date() and mktime() example       <?php$tomorrow\u00a0\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a0date(\"m\")\u00a0\u00a0,\u00a0date(\"d\")+1,\u00a0date(\"Y\"));$lastmonth\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a0date(\"m\")-1,\u00a0date(\"d\"),\u00a0\u00a0\u00a0date(\"Y\"));$nextyear\u00a0\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a0date(\"m\"),\u00a0\u00a0\u00a0date(\"d\"),\u00a0\u00a0\u00a0date(\"Y\")+1);?>                Note:            This can be more reliable than simply adding or subtracting the number      of seconds in a day or month to a timestamp because of daylight saving      time.                   Some examples of date() formatting. Note that    you should escape any other characters, as any which currently    have a special meaning will produce undesirable results, and    other characters may be assigned meaning in future PHP versions.    When escaping, be sure to use single quotes to prevent characters    like \\n from becoming newlines.         Example #4 date() Formatting       <?php\/\/\u00a0Assuming\u00a0today\u00a0is\u00a0March\u00a010th,\u00a02001,\u00a05:16:18\u00a0pm,\u00a0and\u00a0that\u00a0we\u00a0are\u00a0in\u00a0the\/\/\u00a0Mountain\u00a0Standard\u00a0Time\u00a0(MST)\u00a0Time\u00a0Zone$today\u00a0=\u00a0date(\"F\u00a0j,\u00a0Y,\u00a0g:i\u00a0a\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0March\u00a010,\u00a02001,\u00a05:16\u00a0pm$today\u00a0=\u00a0date(\"m.d.y\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a003.10.01$today\u00a0=\u00a0date(\"j,\u00a0n,\u00a0Y\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a010,\u00a03,\u00a02001$today\u00a0=\u00a0date(\"Ymd\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a020010310$today\u00a0=\u00a0date('h-i-s,\u00a0j-m-y,\u00a0it\u00a0is\u00a0w\u00a0Day');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a005-16-18,\u00a010-03-01,\u00a01631\u00a01618\u00a06\u00a0Satpm01$today\u00a0=\u00a0date('\\i\\t\u00a0\\i\\s\u00a0\\t\\h\\e\u00a0jS\u00a0\\d\\a\\y.');\u00a0\u00a0\u00a0\/\/\u00a0it\u00a0is\u00a0the\u00a010th\u00a0day.$today\u00a0=\u00a0date(\"D\u00a0M\u00a0j\u00a0G:i:s\u00a0T\u00a0Y\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Sat\u00a0Mar\u00a010\u00a017:16:18\u00a0MST\u00a02001$today\u00a0=\u00a0date('H:m:s\u00a0\\m\u00a0\\i\\s\\\u00a0\\m\\o\\n\\t\\h');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a017:03:18\u00a0m\u00a0is\u00a0month$today\u00a0=\u00a0date(\"H:i:s\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a017:16:18?>                      To format dates in other languages, you should use the    setlocale() and strftime()    functions instead of date().            Notes   Note:          To generate a timestamp from a string representation of the date, you     may be able to use strtotime(). Additionally, some     databases have functions to convert their date formats into timestamps     (such as MySQL&#039;s \u00bb\u00a0UNIX_TIMESTAMP     function).          Tip         Timestamp of the start of the request is available in     $_SERVER['REQUEST_TIME'] since PHP 5.1.                See Also            gmdate() - Format a GMT\/UTC date\/time     idate() - Format a local time\/date as integer     getdate() - Get date\/time information     getlastmod() - Gets time of last page modification     mktime() - Get Unix timestamp for a date     strftime() - Format a local time\/date according to locale settings     time() - Return current Unix timestamp     strtotime() - Parse about any English textual datetime description into a Unix timestamp     Predefined DateTime Constants"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gmmktime.php","title":"gmmktime","description":"gmmktime   (PHP 4, PHP 5)gmmktime \u2014 Get Unix timestamp for a GMT date         Description       int gmmktime     ([ int $hour = gmdate(\"H\")    [, int $minute = gmdate(\"i\")    [, int $second = gmdate(\"s\")    [, int $month = gmdate(\"n\")    [, int $day = gmdate(\"j\")    [, int $year = gmdate(\"Y\")    [, int $is_dst = -1   ]]]]]]] )        Identical to mktime() except the passed parameters represents a     GMT date. gmmktime() internally uses mktime()    so only times valid in derived local time can be used.          Like mktime(), arguments may be left out in order    from right to left, with any omitted arguments being set to the    current corresponding GMT value.            Parameters                    hour                      The number of the hour relevant to the start of the day determined by        month, day and year.        Negative values reference the hour before midnight of the day in question.        Values greater than 23 reference the appropriate hour in the following day(s).                                minute                      The number of the minute relevant to the start of the hour.        Negative values reference the minute in the previous hour.        Values greater than 59 reference the appropriate minute in the following hour(s).                                second                      The number of seconds relevant to the start of the minute.        Negative values reference the second in the previous minute.        Values greater than 59 reference the appropriate second in the following minute(s).                                month                      The number of the month relevant to the end of the previous year.        Values 1 to 12 reference the normal calendar months of the year in question.        Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.        Values greater than 12 reference the appropriate month in the following year(s).                                day                      The number of the day relevant to the end of the previous month.        Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.        Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.        Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).                                year                      The year                                is_dst                      Parameters always represent a GMT date so is_dst        doesn&#039;t influence the result.                                     Return Values       Returns a integer Unix timestamp.            Changelog                                 Version        Description                                    5.1.0                 As of PHP 5.1.0, the is_dst parameter became         deprecated. As a result, the new timezone handling features should be used         instead.                                            Examples            Example #1 gmmktime() basic example       <?php\/\/\u00a0Prints:\u00a0July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0Fridayecho\u00a0\"July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0\"\u00a0.\u00a0date(\"l\",\u00a0gmmktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));?>                        See Also            mktime() - Get Unix timestamp for a date     date() - Format a local time\/date     time() - Return current Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.localtime.php","title":"localtime","description":"localtime   (PHP 4, PHP 5)localtime \u2014 Get the local time         Description       array localtime     ([ int $timestamp = time()    [, bool $is_associative = false   ]] )        The localtime() function returns an array    identical to that of the structure returned by the C function    call.             Parameters                    timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                   is_associative                      If set to FALSE or not supplied then the array is returned as a regular,         numerically indexed array.  If the argument is set to TRUE then        localtime() returns an associative array containing        all the different elements of the structure returned by the C        function call to localtime.  The names of the different keys of        the associative array are as follows:                                                    \"tm_sec\" - seconds, 0 to 59                                                 \"tm_min\" - minutes, 0 to 59                                                 \"tm_hour\" - hours, 0 to 23                                                 \"tm_mday\" - day of the month, 1 to 31                                                 \"tm_mon\" - month of the year, 0 (Jan) to 11 (Dec)                                                 \"tm_year\" - years since 1900                                                 \"tm_wday\" - day of the week, 0 (Sun) to 6 (Sat)                                                 \"tm_yday\" - day of the year, 0 to 365                                                 \"tm_isdst\" - is daylight savings time in effect?                                Positive if yes, 0 if not, negative if unknown.                                                                Errors\/Exceptions         Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()           Changelog                                 Version        Description                                   5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                                   Examples            Example #1 localtime() example       <?php$localtime\u00a0=\u00a0localtime();$localtime_assoc\u00a0=\u00a0localtime(time(),\u00a0true);print_r($localtime);print_r($localtime_assoc);?>             The above example will output something similar to:       Array (     [0] => 24     [1] => 3     [2] => 19     [3] => 3     [4] => 3     [5] => 105     [6] => 0     [7] => 92     [8] => 1 )  Array (     [tm_sec] => 24     [tm_min] => 3     [tm_hour] => 19     [tm_mday] => 3     [tm_mon] => 3     [tm_year] => 105     [tm_wday] => 0     [tm_yday] => 92     [tm_isdst] => 1 )                      See Also            getdate() - Get date\/time information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.microtime.php","title":"microtime","description":"microtime   (PHP 4, PHP 5)microtime \u2014 Return current Unix timestamp with microseconds         Description       mixed microtime     ([ bool $get_as_float = false   ] )        microtime() returns the current Unix timestamp with    microseconds. This function is only available on operating systems that    support the gettimeofday() system call.            Parameters                    get_as_float                      If used and set to TRUE, microtime() will return a        float instead of a string, as described in        the return values section below.                                     Return Values       By default, microtime() returns a string in    the form \"msec sec\", where sec is the current time    measured in the number of seconds since the Unix epoch (0:00:00 January 1,    1970 GMT), and msec is the number of microseconds that    have elapsed since sec expressed in seconds.          If get_as_float is set to TRUE, then    microtime() returns a float, which    represents the current time in seconds since the Unix epoch accurate to the    nearest microsecond.            Changelog                                 Version        Description                                    5.0.0                 The get_as_float parameter was added.                                            Examples            Example #1 Timing script execution with microtime()       <?php\/**\u00a0*\u00a0Simple\u00a0function\u00a0to\u00a0replicate\u00a0PHP\u00a05\u00a0behaviour\u00a0*\/function\u00a0microtime_float(){\u00a0\u00a0\u00a0\u00a0list($usec,\u00a0$sec)\u00a0=\u00a0explode(\"\u00a0\",\u00a0microtime());\u00a0\u00a0\u00a0\u00a0return\u00a0((float)$usec\u00a0+\u00a0(float)$sec);}$time_start\u00a0=\u00a0microtime_float();\/\/\u00a0Sleep\u00a0for\u00a0a\u00a0whileusleep(100);$time_end\u00a0=\u00a0microtime_float();$time\u00a0=\u00a0$time_end\u00a0-\u00a0$time_start;echo\u00a0\"Did\u00a0nothing\u00a0in\u00a0$time\u00a0seconds\\n\";?>                     Example #2 Timing script execution in PHP 5       <?php$time_start\u00a0=\u00a0microtime(true);\/\/\u00a0Sleep\u00a0for\u00a0a\u00a0whileusleep(100);$time_end\u00a0=\u00a0microtime(true);$time\u00a0=\u00a0$time_end\u00a0-\u00a0$time_start;echo\u00a0\"Did\u00a0nothing\u00a0in\u00a0$time\u00a0seconds\\n\";?>                        See Also            time() - Return current Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mktime.php","title":"mktime","description":"mktime   (PHP 4, PHP 5)mktime \u2014 Get Unix timestamp for a date         Description       int mktime     ([ int $hour = date(\"H\")    [, int $minute = date(\"i\")    [, int $second = date(\"s\")    [, int $month = date(\"n\")    [, int $day = date(\"j\")    [, int $year = date(\"Y\")    [, int $is_dst = -1   ]]]]]]] )        Returns the Unix timestamp corresponding to the arguments    given. This timestamp is a long integer containing the number of    seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time    specified.          Arguments may be left out in order from right to left; any    arguments thus omitted will be set to the current value according    to the local date and time.            Notes   Note:          As of PHP 5.1, when called with no arguments, mktime()     throws an E_STRICT notice: use the      time() function instead.                Parameters                    hour                      The number of the hour relevant to the start of the day determined by        month, day and year.        Negative values reference the hour before midnight of the day in question.        Values greater than 23 reference the appropriate hour in the following day(s).                                minute                      The number of the minute relevant to the start of the hour.        Negative values reference the minute in the previous hour.        Values greater than 59 reference the appropriate minute in the following hour(s).                                second                      The number of seconds relevant to the start of the minute.        Negative values reference the second in the previous minute.        Values greater than 59 reference the appropriate second in the following minute(s).                                month                      The number of the month relevant to the end of the previous year.        Values 1 to 12 reference the normal calendar months of the year in question.        Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.        Values greater than 12 reference the appropriate month in the following year(s).                                day                      The number of the day relevant to the end of the previous month.        Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.        Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.        Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).                                year                      The number of the year, may be a two or four digit value,        with values between 0-69 mapping to 2000-2069 and 70-100 to        1970-2000. On systems where time_t is a 32bit signed integer, as        most common today, the valid range for year         is somewhere between 1901 and 2038. However, before PHP 5.1.0 this        range was limited from 1970 to 2038 on some systems (e.g. Windows).                                is_dst                      This parameter can be set to 1 if the time is during daylight savings time (DST),         0 if it is not, or -1 (the default) if it is unknown whether the time is within         daylight savings time or not. If it&#039;s unknown, PHP tries to figure it out itself.        This can cause unexpected (but not incorrect) results.        Some times are invalid if DST is enabled on the system PHP is running on or         is_dst is set to 1. If DST is enabled in e.g. 2:00, all times         between 2:00 and 3:00 are invalid and mktime() returns an undefined         (usually negative) value.         Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST         is enabled is evaluated as 23:30 of the previous day.              Note:                  As of PHP 5.1.0, this parameter became deprecated. As a result, the         new timezone handling features should be used instead.                                                                                                                                                               Return Values        mktime() returns the Unix timestamp of the arguments    given.    If the arguments are invalid, the function returns FALSE (before PHP 5.1    it returned -1).            Errors\/Exceptions    Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()         Changelog                                 Version        Description                                    5.3.0                 mktime() now throws E_DEPRECATED notice          if the is_dst parameter is used.                               5.1.0                 The is_dst parameter became deprecated.         Made the function return FALSE on error, instead of         -1.         Fixed the function to accept the year, month and day to be all passed         as zero.                               5.1.0                 When called with no arguments, mktime() throws          E_STRICT notice. Use the          time() function instead.                        5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                              Examples            Example #1 mktime() basic example       <?php\/\/\u00a0Set\u00a0the\u00a0default\u00a0timezone\u00a0to\u00a0use.\u00a0Available\u00a0as\u00a0of\u00a0PHP\u00a05.1date_default_timezone_set('UTC');\/\/\u00a0Prints:\u00a0July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0Saturdayecho\u00a0\"July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0\"\u00a0.\u00a0date(\"l\",\u00a0mktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));\/\/\u00a0Prints\u00a0something\u00a0like:\u00a02006-04-05T01:02:03+00:00echo\u00a0date('c',\u00a0mktime(1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a02006));?>                           Example #2 mktime() example           mktime() is useful for doing date arithmetic      and validation, as it will automatically calculate the correct      value for out-of-range input. For example, each of the following      lines produces the string \"Jan-01-1998\".            <?phpecho\u00a0date(\"M-d-Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a012,\u00a032,\u00a01997));echo\u00a0date(\"M-d-Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a013,\u00a01,\u00a01997));echo\u00a0date(\"M-d-Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a01,\u00a01,\u00a01998));echo\u00a0date(\"M-d-Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a01,\u00a01,\u00a098));?>                           Example #3 Last day of a month           The last day of any given month can be expressed as the \"0\" day      of the next month, not the -1 day. Both of the following examples      will produce the string \"The last day in Feb 2000 is: 29\".            <?php$lastday\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a03,\u00a00,\u00a02000);echo\u00a0strftime(\"Last\u00a0day\u00a0in\u00a0Feb\u00a02000\u00a0is:\u00a0%d\",\u00a0$lastday);$lastday\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a04,\u00a0-31,\u00a02000);echo\u00a0strftime(\"Last\u00a0day\u00a0in\u00a0Feb\u00a02000\u00a0is:\u00a0%d\",\u00a0$lastday);?>                        Notes   Caution         Before PHP 5.1.0, negative timestamps were not supported under any known     version of Windows and some other systems as well. Therefore the range of     valid years was limited to 1970 through 2038.                See Also            checkdate() - Validate a Gregorian date     gmmktime() - Get Unix timestamp for a GMT date     date() - Format a local time\/date      time() - Return current Unix timestamp"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strptime.php","title":"strptime","description":"strptime     (PHP 5 >= 5.1.0)strptime \u2014       Parse a time\/date generated with strftime()                   Description           array strptime       ( string $date      , string $format      )            strptime() returns an array with the      date parsed, or FALSE on error.                Month and weekday names and other language dependent strings respect the      current locale set with setlocale() (LC_TIME).                   Parameters                        date (string)                         The string to parse (e.g. returned from strftime()).                                     format (string)                         The format used in date (e.g. the same as         used in strftime()). Note that some of the format         options available to strftime() may not have any         effect within strptime(); the exact subset that are         supported will vary based on the operating system and C library in         use.                         For more information about the format options, read the         strftime() page.                                             Return Values         Returns an array or FALSE on failure.                       The following parameters are returned in the array                                  parameters          Description                                              \"tm_sec\"          Seconds after the minute (0-61)                             \"tm_min\"          Minutes after the hour (0-59)                             \"tm_hour\"          Hour since midnight (0-23)                             \"tm_mday\"          Day of the month (1-31)                             \"tm_mon\"          Months since January (0-11)                             \"tm_year\"          Years since 1900                             \"tm_wday\"          Days since Sunday (0-6)                             \"tm_yday\"          Days since January 1 (0-365)                             \"unparsed\"          the date part which was not           recognized using the specified format                                                  Examples             Example #1 strptime() example       <?php$format\u00a0=\u00a0'%d\/%m\/%Y\u00a0%H:%M:%S';$strf\u00a0=\u00a0strftime($format);echo\u00a0\"$strf\\n\";print_r(strptime($strf,\u00a0$format));?>                 The above example will output something similar to:         03\/10\/2004 15:54:19  Array (     [tm_sec] => 19     [tm_min] => 54     [tm_hour] => 15     [tm_mday] => 3     [tm_mon] => 9     [tm_year] => 104     [tm_wday] => 0     [tm_yday] => 276     [unparsed] => )                                       Notes      Note: This function is not implemented on Windows platforms.      Note:                Internally, this function calls the strptime()        function provided by the system&#039;s C library. This function can exhibit        noticeably different behaviour across different operating systems. The        use of date_parse_from_format(), which does not        suffer from these issues, is recommended on PHP 5.3.0 and later.                   Note:                \"tm_sec\" includes any leap seconds (currently upto 2        a year). For more information on leap seconds, see the \u00bb\u00a0Wikipedia article        on leap seconds.                   Note:                Prior to PHP 5.2.0, this function could return undefined behaviour. Notably,        the \"tm_sec\", \"tm_min\" and \"tm_hour\"         entries would return undefined values.                              See Also                  checkdate() - Validate a Gregorian date       strftime() - Format a local time\/date according to locale settings       date_parse_from_format() - Get info about given date formatted according to the specified format       DateTime::createFromFormat() - Returns new DateTime object formatted according to the specified format"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-abbreviations-list.php","title":"timezone_abbreviations_list","description":"timezone_abbreviations_list   (PHP 5 >= 5.2.0)timezone_abbreviations_list \u2014 Alias of  DateTimeZone::listAbbreviations()         Description       This function is an alias of:   DateTimeZone::listAbbreviations()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strftime.php","title":"strftime","description":"strftime   (PHP 4, PHP 5)strftime \u2014 Format a local time\/date according to locale settings         Description       string strftime     ( string $format    [, int $timestamp = time()   ] )        Format the time and\/or date according to locale settings. Month and weekday    names and other language-dependent strings respect the current locale set    with setlocale().          Not all conversion specifiers may be supported by your C library, in which    case they will not be supported by PHP&#039;s strftime().    Additionally, not all platforms support negative timestamps, so your    date range may be limited to no earlier than the Unix epoch. This means that    %e, %T, %R and, %D (and possibly others) - as well as dates prior to    Jan 1, 1970 - will not work on Windows, some Linux    distributions, and a few other operating systems. For Windows systems, a    complete overview of supported conversion specifiers can be found at    \u00bb\u00a0MSDN.            Parameters                    format                               The following characters are recognized in the         format parameter string                                          format            Description            Example returned values                                                        Day            ---            ---                                   %a            An abbreviated textual representation of the day            Sun through Sat                                   %A            A full textual representation of the day            Sunday through Saturday                                   %d            Two-digit day of the month (with leading zeros)            01 to 31                                   %e                         Day of the month, with a space preceding single digits. Not              implemented as described on Windows. See below for more information.                         1 to 31                                   %j            Day of the year, 3 digits with leading zeros            001 to 366                                   %u            ISO-8601 numeric representation of the day of the week            1 (for Monday) though 7 (for Sunday)                                   %w            Numeric representation of the day of the week            0 (for Sunday) through 6 (for Saturday)                                   Week            ---            ---                                   %U            Week number of the given year, starting with the first            Sunday as the first week            13 (for the 13th full week of the year)                                   %V            ISO-8601:1988 week number of the given year, starting with            the first week of the year with at least 4 weekdays, with Monday            being the start of the week            01 through 53 (where 53            accounts for an overlapping week)                                   %W            A numeric representation of the week of the year, starting            with the first Monday as the first week            46 (for the 46th week of the year beginning            with a Monday)                                   Month            ---            ---                                   %b            Abbreviated month name, based on the locale            Jan through Dec                                   %B            Full month name, based on the locale            January through December                                   %h            Abbreviated month name, based on the locale (an alias of %b)            Jan through Dec                                   %m            Two digit representation of the month            01 (for January) through 12 (for December)                                   Year            ---            ---                                   %C            Two digit representation of the century (year divided by 100, truncated to an integer)            19 for the 20th Century                                   %g            Two digit representation of the year going by ISO-8601:1988 standards (see %V)            Example: 09 for the week of January 6, 2009                                   %G            The full four-digit version of %g            Example: 2008 for the week of January 3, 2009                                   %y            Two digit representation of the year            Example: 09 for 2009, 79 for 1979                                   %Y            Four digit representation for the year            Example: 2038                                   Time            ---            ---                                   %H            Two digit representation of the hour in 24-hour format            00 through 23                                   %I            Two digit representation of the hour in 12-hour format            01 through 12                                   %l (lower-case &#039;L&#039;)            Hour in 12-hour format, with a space preceeding single digits             1 through 12                                   %M            Two digit representation of the minute            00 through 59                                   %p            UPPER-CASE &#039;AM&#039; or &#039;PM&#039; based on the given time            Example: AM for 00:31, PM for 22:23                                   %P            lower-case &#039;am&#039; or &#039;pm&#039; based on the given time            Example: am for 00:31, pm for 22:23                                   %r            Same as \"%I:%M:%S %p\"            Example: 09:34:17 PM for 21:34:17                                   %R            Same as \"%H:%M\"            Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM                                   %S            Two digit representation of the second            00 through 59                                   %T            Same as \"%H:%M:%S\"            Example: 21:34:17 for 09:34:17 PM                                   %X            Preferred time representation based on locale, without the date            Example: 03:59:16 or 15:59:16                                   %z            Either the time zone offset from UTC or the abbreviation (depends            on operating system)            Example: -0500 or EST for Eastern Time                                   %Z            The time zone offset\/abbreviation option NOT given by %z (depends            on operating system)            Example: -0500 or EST for Eastern Time                                   Time and Date Stamps            ---            ---                                   %c            Preferred date and time stamp based on local            Example: Tue Feb  5 00:45:10 2009 for            February 5, 2009 at 12:45:10 AM                                   %D            Same as \"%m\/%d\/%y\"            Example: 02\/05\/09 for February 5, 2009                                   %F            Same as \"%Y-%m-%d\" (commonly used in database datestamps)            Example: 2009-02-05 for February 5, 2009                                   %s            Unix Epoch Time timestamp (same as the time()            function)            Example: 305815200 for September 10, 1979 08:40:00 AM                                   %x            Preferred date representation based on locale, without the time            Example: 02\/05\/09 for February 5, 2009                                   Miscellaneous            ---            ---                                   %n            A newline character (\"\\n\")            ---                                   %t            A Tab character (\"\\t\")            ---                                               A literal percentage character (\"%\")            ---                                                              Maximum length of this parameter is 1023 characters.              Warning                 Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1.         As a result, %u may not function as described in this manual.                      Warning                 Windows only: The %e modifier          is not supported in the Windows implementation of this function. To achieve          this value, the %#d modifier can be used instead. The          example below illustrates how to write a cross platform compatible function.                      Warning                 Mac OS X only: The %P modifier          is not supported in the Mac OS X implementation of this function.                                    timestamp  The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().                     Return Values       Returns a string formatted according format    using the given timestamp or the current    local time if no timestamp is given.  Month and weekday names and    other language-dependent strings respect the current locale set    with setlocale().            Errors\/Exceptions    Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()       As the output is dependent upon the underlying C library, some conversion    specifiers are not supported. On Windows, supplying unknown conversion    specifiers will result in 5 E_WARNING messages and    return FALSE. On other operating systems you may not get any    E_WARNING messages and the output may contain the    conversion specifiers unconverted.            Changelog                                 Version        Description                             5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                              Examples       This example will work if you have the respective locales installed    in your system.         Example #1 strftime() locale examples       <?phpsetlocale(LC_TIME,\u00a0\"C\");echo\u00a0strftime(\"%A\");setlocale(LC_TIME,\u00a0\"fi_FI\");echo\u00a0strftime(\"\u00a0in\u00a0Finnish\u00a0is\u00a0%A,\");setlocale(LC_TIME,\u00a0\"fr_FR\");echo\u00a0strftime(\"\u00a0in\u00a0French\u00a0%A\u00a0and\");setlocale(LC_TIME,\u00a0\"de_DE\");echo\u00a0strftime(\"\u00a0in\u00a0German\u00a0%A.\\n\");?>                           Example #2 ISO 8601:1988 week number example       <?php\/*\u00a0\u00a0\u00a0\u00a0\u00a0December\u00a02002\u00a0\/\u00a0January\u00a02003ISOWk\u00a0\u00a0M\u00a0\u00a0\u00a0Tu\u00a0\u00a0W\u00a0\u00a0\u00a0Thu\u00a0F\u00a0\u00a0\u00a0Sa\u00a0\u00a0Su-----\u00a0----------------------------51\u00a0\u00a0\u00a0\u00a0\u00a016\u00a0\u00a017\u00a0\u00a018\u00a0\u00a019\u00a0\u00a020\u00a0\u00a021\u00a0\u00a02252\u00a0\u00a0\u00a0\u00a0\u00a023\u00a0\u00a024\u00a0\u00a025\u00a0\u00a026\u00a0\u00a027\u00a0\u00a028\u00a0\u00a0291\u00a0\u00a0\u00a0\u00a0\u00a0\u00a030\u00a0\u00a031\u00a0\u00a0\u00a01\u00a0\u00a0\u00a02\u00a0\u00a0\u00a03\u00a0\u00a0\u00a04\u00a0\u00a0\u00a052\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06\u00a0\u00a0\u00a07\u00a0\u00a0\u00a08\u00a0\u00a0\u00a09\u00a0\u00a010\u00a0\u00a011\u00a0\u00a0123\u00a0\u00a0\u00a0\u00a0\u00a0\u00a013\u00a0\u00a014\u00a0\u00a015\u00a0\u00a016\u00a0\u00a017\u00a0\u00a018\u00a0\u00a019\u00a0\u00a0\u00a0*\/\/\/\u00a0Outputs:\u00a012\/28\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a052,2002,2002echo\u00a0\"12\/28\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",\u00a0strtotime(\"12\/28\/2002\"))\u00a0.\u00a0\"\\n\";\/\/\u00a0Outputs:\u00a012\/30\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a01,2003,2002echo\u00a0\"12\/30\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",\u00a0strtotime(\"12\/30\/2002\"))\u00a0.\u00a0\"\\n\";\/\/\u00a0Outputs:\u00a01\/3\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a01,2003,2003echo\u00a0\"1\/3\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2003\"))\u00a0.\u00a0\"\\n\";\/\/\u00a0Outputs:\u00a01\/10\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a02,2003,2003echo\u00a0\"1\/10\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/10\/2003\"))\u00a0.\u00a0\"\\n\";\/*\u00a0\u00a0\u00a0\u00a0\u00a0December\u00a02004\u00a0\/\u00a0January\u00a02005ISOWk\u00a0\u00a0M\u00a0\u00a0\u00a0Tu\u00a0\u00a0W\u00a0\u00a0\u00a0Thu\u00a0F\u00a0\u00a0\u00a0Sa\u00a0\u00a0Su-----\u00a0----------------------------51\u00a0\u00a0\u00a0\u00a0\u00a013\u00a0\u00a014\u00a0\u00a015\u00a0\u00a016\u00a0\u00a017\u00a0\u00a018\u00a0\u00a01952\u00a0\u00a0\u00a0\u00a0\u00a020\u00a0\u00a021\u00a0\u00a022\u00a0\u00a023\u00a0\u00a024\u00a0\u00a025\u00a0\u00a02653\u00a0\u00a0\u00a0\u00a0\u00a027\u00a0\u00a028\u00a0\u00a029\u00a0\u00a030\u00a0\u00a031\u00a0\u00a0\u00a01\u00a0\u00a0\u00a021\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a04\u00a0\u00a0\u00a05\u00a0\u00a0\u00a06\u00a0\u00a0\u00a07\u00a0\u00a0\u00a08\u00a0\u00a0\u00a092\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010\u00a0\u00a011\u00a0\u00a012\u00a0\u00a013\u00a0\u00a014\u00a0\u00a015\u00a0\u00a016\u00a0\u00a0\u00a0*\/\/\/\u00a0Outputs:\u00a012\/23\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a052,2004,2004echo\u00a0\"12\/23\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"12\/23\/2004\"))\u00a0.\u00a0\"\\n\";\/\/\u00a0Outputs:\u00a012\/31\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a053,2004,2004echo\u00a0\"12\/31\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"12\/31\/2004\"))\u00a0.\u00a0\"\\n\";\/\/\u00a0Outputs:\u00a01\/2\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a053,2004,2005echo\u00a0\"1\/2\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/2\/2005\"))\u00a0.\u00a0\"\\n\";\/\/\u00a0Outputs:\u00a01\/3\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a01,2005,2005echo\u00a0\"1\/3\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2005\"))\u00a0.\u00a0\"\\n\";?>                           Example #3 Cross platform compatible example using the %e modifier       <?php\/\/\u00a0Jan\u00a01:\u00a0results\u00a0in:\u00a0'%e%1%'\u00a0(%%,\u00a0e,\u00a0%%,\u00a0%e,\u00a0%%)$format\u00a0=\u00a0'%%e%%%e%%';\/\/\u00a0Check\u00a0for\u00a0Windows\u00a0to\u00a0find\u00a0and\u00a0replace\u00a0the\u00a0%e\u00a0\/\/\u00a0modifier\u00a0correctlyif\u00a0(strtoupper(substr(PHP_OS,\u00a00,\u00a03))\u00a0==\u00a0'WIN')\u00a0{\u00a0\u00a0\u00a0\u00a0$format\u00a0=\u00a0preg_replace('#(?<!%)((?:%%)*)%e#',\u00a0'\\1%#d',\u00a0$format);}echo\u00a0strftime($format);?>                           Example #4 Display all known and unknown formats.       <?php\/\/\u00a0Describe\u00a0the\u00a0formats.$strftimeFormats\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0'A'\u00a0=>\u00a0'A\u00a0full\u00a0textual\u00a0representation\u00a0of\u00a0the\u00a0day',\u00a0\u00a0\u00a0\u00a0'B'\u00a0=>\u00a0'Full\u00a0month\u00a0name,\u00a0based\u00a0on\u00a0the\u00a0locale',\u00a0\u00a0\u00a0\u00a0'C'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0century\u00a0(year\u00a0divided\u00a0by\u00a0100,\u00a0truncated\u00a0to\u00a0an\u00a0integer)',\u00a0\u00a0\u00a0\u00a0'D'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%m\/%d\/%y\"',\u00a0\u00a0\u00a0\u00a0'E'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'F'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%Y-%m-%d\"',\u00a0\u00a0\u00a0\u00a0'G'\u00a0=>\u00a0'The\u00a0full\u00a0four-digit\u00a0version\u00a0of\u00a0%g',\u00a0\u00a0\u00a0\u00a0'H'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0hour\u00a0in\u00a024-hour\u00a0format',\u00a0\u00a0\u00a0\u00a0'I'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0hour\u00a0in\u00a012-hour\u00a0format',\u00a0\u00a0\u00a0\u00a0'J'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'K'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'L'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'M'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0minute',\u00a0\u00a0\u00a0\u00a0'N'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'O'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'P'\u00a0=>\u00a0'lower-case\u00a0\"am\"\u00a0or\u00a0\"pm\"\u00a0based\u00a0on\u00a0the\u00a0given\u00a0time',\u00a0\u00a0\u00a0\u00a0'Q'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'R'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%H:%M\"',\u00a0\u00a0\u00a0\u00a0'S'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0second',\u00a0\u00a0\u00a0\u00a0'T'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%H:%M:%S\"',\u00a0\u00a0\u00a0\u00a0'U'\u00a0=>\u00a0'Week\u00a0number\u00a0of\u00a0the\u00a0given\u00a0year,\u00a0starting\u00a0with\u00a0the\u00a0first\u00a0Sunday\u00a0as\u00a0the\u00a0first\u00a0week',\u00a0\u00a0\u00a0\u00a0'V'\u00a0=>\u00a0'ISO-8601:1988\u00a0week\u00a0number\u00a0of\u00a0the\u00a0given\u00a0year,\u00a0starting\u00a0with\u00a0the\u00a0first\u00a0week\u00a0of\u00a0the\u00a0year\u00a0with\u00a0at\u00a0least\u00a04\u00a0weekdays,\u00a0with\u00a0Monday\u00a0being\u00a0the\u00a0start\u00a0of\u00a0the\u00a0week',\u00a0\u00a0\u00a0\u00a0'W'\u00a0=>\u00a0'A\u00a0numeric\u00a0representation\u00a0of\u00a0the\u00a0week\u00a0of\u00a0the\u00a0year,\u00a0starting\u00a0with\u00a0the\u00a0first\u00a0Monday\u00a0as\u00a0the\u00a0first\u00a0week',\u00a0\u00a0\u00a0\u00a0'X'\u00a0=>\u00a0'Preferred\u00a0time\u00a0representation\u00a0based\u00a0on\u00a0locale,\u00a0without\u00a0the\u00a0date',\u00a0\u00a0\u00a0\u00a0'Y'\u00a0=>\u00a0'Four\u00a0digit\u00a0representation\u00a0for\u00a0the\u00a0year',\u00a0\u00a0\u00a0\u00a0'Z'\u00a0=>\u00a0'The\u00a0time\u00a0zone\u00a0offset\/abbreviation\u00a0option\u00a0NOT\u00a0given\u00a0by\u00a0%z\u00a0(depends\u00a0on\u00a0operating\u00a0system)',\u00a0\u00a0\u00a0\u00a0'a'\u00a0=>\u00a0'An\u00a0abbreviated\u00a0textual\u00a0representation\u00a0of\u00a0the\u00a0day',\u00a0\u00a0\u00a0\u00a0'b'\u00a0=>\u00a0'Abbreviated\u00a0month\u00a0name,\u00a0based\u00a0on\u00a0the\u00a0locale',\u00a0\u00a0\u00a0\u00a0'c'\u00a0=>\u00a0'Preferred\u00a0date\u00a0and\u00a0time\u00a0stamp\u00a0based\u00a0on\u00a0local',\u00a0\u00a0\u00a0\u00a0'd'\u00a0=>\u00a0'Two-digit\u00a0day\u00a0of\u00a0the\u00a0month\u00a0(with\u00a0leading\u00a0zeros)',\u00a0\u00a0\u00a0\u00a0'e'\u00a0=>\u00a0'Day\u00a0of\u00a0the\u00a0month,\u00a0with\u00a0a\u00a0space\u00a0preceding\u00a0single\u00a0digits',\u00a0\u00a0\u00a0\u00a0'f'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'g'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0year\u00a0going\u00a0by\u00a0ISO-8601:1988\u00a0standards\u00a0(see\u00a0%V)',\u00a0\u00a0\u00a0\u00a0'h'\u00a0=>\u00a0'Abbreviated\u00a0month\u00a0name,\u00a0based\u00a0on\u00a0the\u00a0locale\u00a0(an\u00a0alias\u00a0of\u00a0%b)',\u00a0\u00a0\u00a0\u00a0'i'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'j'\u00a0=>\u00a0'Day\u00a0of\u00a0the\u00a0year,\u00a03\u00a0digits\u00a0with\u00a0leading\u00a0zeros',\u00a0\u00a0\u00a0\u00a0'k'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'l'\u00a0=>\u00a0'Hour\u00a0in\u00a012-hour\u00a0format,\u00a0with\u00a0a\u00a0space\u00a0preceeding\u00a0single\u00a0digits',\u00a0\u00a0\u00a0\u00a0'm'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0month',\u00a0\u00a0\u00a0\u00a0'n'\u00a0=>\u00a0'A\u00a0newline\u00a0character\u00a0(\"\\n\")',\u00a0\u00a0\u00a0\u00a0'o'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'p'\u00a0=>\u00a0'UPPER-CASE\u00a0\"AM\"\u00a0or\u00a0\"PM\"\u00a0based\u00a0on\u00a0the\u00a0given\u00a0time',\u00a0\u00a0\u00a0\u00a0'q'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'r'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%I:%M:%S\u00a0%p\"',\u00a0\u00a0\u00a0\u00a0's'\u00a0=>\u00a0'Unix\u00a0Epoch\u00a0Time\u00a0timestamp',\u00a0\u00a0\u00a0\u00a0't'\u00a0=>\u00a0'A\u00a0Tab\u00a0character\u00a0(\"\\t\")',\u00a0\u00a0\u00a0\u00a0'u'\u00a0=>\u00a0'ISO-8601\u00a0numeric\u00a0representation\u00a0of\u00a0the\u00a0day\u00a0of\u00a0the\u00a0week',\u00a0\u00a0\u00a0\u00a0'v'\u00a0=>\u00a0'',\u00a0\u00a0\u00a0\u00a0'w'\u00a0=>\u00a0'Numeric\u00a0representation\u00a0of\u00a0the\u00a0day\u00a0of\u00a0the\u00a0week',\u00a0\u00a0\u00a0\u00a0'x'\u00a0=>\u00a0'Preferred\u00a0date\u00a0representation\u00a0based\u00a0on\u00a0locale,\u00a0without\u00a0the\u00a0time',\u00a0\u00a0\u00a0\u00a0'y'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0year',\u00a0\u00a0\u00a0\u00a0'z'\u00a0=>\u00a0'Either\u00a0the\u00a0time\u00a0zone\u00a0offset\u00a0from\u00a0UTC\u00a0or\u00a0the\u00a0abbreviation\u00a0(depends\u00a0on\u00a0operating\u00a0system)',\u00a0\u00a0\u00a0\u00a0'%'\u00a0=>\u00a0'A\u00a0literal\u00a0percentage\u00a0character\u00a0(\"%\")',);\/\/\u00a0Results.$strftimeValues\u00a0=\u00a0array();\/\/\u00a0Evaluate\u00a0the\u00a0formats\u00a0whilst\u00a0suppressing\u00a0any\u00a0errors.foreach($strftimeFormats\u00a0as\u00a0$format\u00a0=>\u00a0$description){\u00a0\u00a0\u00a0\u00a0if\u00a0(False\u00a0!==\u00a0($value\u00a0=\u00a0@strftime(\"%{$format}\"))){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$strftimeValues[$format]\u00a0=\u00a0$value;\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Find\u00a0the\u00a0longest\u00a0value.$maxValueLength\u00a0=\u00a02\u00a0+\u00a0max(array_map('strlen',\u00a0$strftimeValues));\/\/\u00a0Report\u00a0known\u00a0formats.foreach($strftimeValues\u00a0as\u00a0$format\u00a0=>\u00a0$value){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Known\u00a0format\u00a0\u00a0\u00a0:\u00a0'{$format}'\u00a0=\u00a0\",\u00a0str_pad(\"'{$value}'\",\u00a0$maxValueLength),\u00a0\"\u00a0(\u00a0{$strftimeFormats[$format]}\u00a0)\\n\";}\/\/\u00a0Report\u00a0unknown\u00a0formats.foreach(array_diff_key($strftimeFormats,\u00a0$strftimeValues)\u00a0as\u00a0$format\u00a0=>\u00a0$description){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unknown\u00a0format\u00a0:\u00a0'{$format}'\u00a0\u00a0\u00a0\",\u00a0str_pad('\u00a0',\u00a0$maxValueLength),\u00a0($description\u00a0?\u00a0\"\u00a0(\u00a0{$description}\u00a0)\"\u00a0:\u00a0''),\u00a0\"\\n\";}             The above example will output something similar to:       Known format   : &#039;A&#039; = &#039;Friday&#039;            ( A full textual representation of the day ) Known format   : &#039;B&#039; = &#039;December&#039;          ( Full month name, based on the locale ) Known format   : &#039;H&#039; = &#039;11&#039;                ( Two digit representation of the hour in 24-hour format ) Known format   : &#039;I&#039; = &#039;11&#039;                ( Two digit representation of the hour in 12-hour format ) Known format   : &#039;M&#039; = &#039;24&#039;                ( Two digit representation of the minute ) Known format   : &#039;S&#039; = &#039;44&#039;                ( Two digit representation of the second ) Known format   : &#039;U&#039; = &#039;48&#039;                ( Week number of the given year, starting with the first Sunday as the first week ) Known format   : &#039;W&#039; = &#039;48&#039;                ( A numeric representation of the week of the year, starting with the first Monday as the first week ) Known format   : &#039;X&#039; = &#039;11:24:44&#039;          ( Preferred time representation based on locale, without the date ) Known format   : &#039;Y&#039; = &#039;2010&#039;              ( Four digit representation for the year ) Known format   : &#039;Z&#039; = &#039;GMT Standard Time&#039; ( The time zone offset\/abbreviation option NOT given by %z (depends on operating system) ) Known format   : &#039;a&#039; = &#039;Fri&#039;               ( An abbreviated textual representation of the day ) Known format   : &#039;b&#039; = &#039;Dec&#039;               ( Abbreviated month name, based on the locale ) Known format   : &#039;c&#039; = &#039;12\/03\/10 11:24:44&#039; ( Preferred date and time stamp based on local ) Known format   : &#039;d&#039; = &#039;03&#039;                ( Two-digit day of the month (with leading zeros) ) Known format   : &#039;j&#039; = &#039;337&#039;               ( Day of the year, 3 digits with leading zeros ) Known format   : &#039;m&#039; = &#039;12&#039;                ( Two digit representation of the month ) Known format   : &#039;p&#039; = &#039;AM&#039;                ( UPPER-CASE \"AM\" or \"PM\" based on the given time ) Known format   : &#039;w&#039; = &#039;5&#039;                 ( Numeric representation of the day of the week ) Known format   : &#039;x&#039; = &#039;12\/03\/10&#039;          ( Preferred date representation based on locale, without the time ) Known format   : &#039;y&#039; = &#039;10&#039;                ( Two digit representation of the year ) Known format   : &#039;z&#039; = &#039;GMT Standard Time&#039; ( Either the time zone offset from UTC or the abbreviation (depends on operating system) ) Known format   : &#039;%&#039; = &#039;%&#039;                 ( A literal percentage character (\"%\") ) Unknown format : &#039;C&#039;                       ( Two digit representation of the century (year divided by 100, truncated to an integer) ) Unknown format : &#039;D&#039;                       ( Same as \"%m\/%d\/%y\" ) Unknown format : &#039;E&#039; Unknown format : &#039;F&#039;                       ( Same as \"%Y-%m-%d\" ) Unknown format : &#039;G&#039;                       ( The full four-digit version of %g ) Unknown format : &#039;J&#039; Unknown format : &#039;K&#039; Unknown format : &#039;L&#039; Unknown format : &#039;N&#039; Unknown format : &#039;O&#039; Unknown format : &#039;P&#039;                       ( lower-case \"am\" or \"pm\" based on the given time ) Unknown format : &#039;Q&#039; Unknown format : &#039;R&#039;                       ( Same as \"%H:%M\" ) Unknown format : &#039;T&#039;                       ( Same as \"%H:%M:%S\" ) Unknown format : &#039;V&#039;                       ( ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week ) Unknown format : &#039;e&#039;                       ( Day of the month, with a space preceding single digits ) Unknown format : &#039;f&#039; Unknown format : &#039;g&#039;                       ( Two digit representation of the year going by ISO-8601:1988 standards (see %V) ) Unknown format : &#039;h&#039;                       ( Abbreviated month name, based on the locale (an alias of %b) ) Unknown format : &#039;i&#039; Unknown format : &#039;k&#039; Unknown format : &#039;l&#039;                       ( Hour in 12-hour format, with a space preceeding single digits ) Unknown format : &#039;n&#039;                       ( A newline character (\"\\n\") ) Unknown format : &#039;o&#039; Unknown format : &#039;q&#039; Unknown format : &#039;r&#039;                       ( Same as \"%I:%M:%S %p\" ) Unknown format : &#039;s&#039;                       ( Unix Epoch Time timestamp ) Unknown format : &#039;t&#039;                       ( A Tab character (\"\\t\") ) Unknown format : &#039;u&#039;                       ( ISO-8601 numeric representation of the day of the week ) Unknown format : &#039;v&#039;                      Notes   Note:          %G and %V, which are based on ISO 8601:1988 week numbers can     give unexpected (albeit correct) results if the numbering system     is not thoroughly understood.  See %V examples in this manual page.                See Also            \u00bb\u00a0Online strftime() format design tool     setlocale() - Set locale information     mktime() - Get Unix timestamp for a date     strptime() - Parse a time\/date generated with strftime     gmstrftime() - Format a GMT\/UTC time\/date according to locale settings     \u00bb\u00a0Open Group specification of strftime()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.time.php","title":"time","description":"time   (PHP 4, PHP 5)time \u2014 Return current Unix timestamp         Description       int time     ( void    )        Returns the current time measured in the number of seconds since    the Unix Epoch (January 1 1970 00:00:00 GMT).            Examples            Example #1 time() example       <?php$nextWeek\u00a0=\u00a0time()\u00a0+\u00a0(7\u00a0*\u00a024\u00a0*\u00a060\u00a0*\u00a060);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a07\u00a0days;\u00a024\u00a0hours;\u00a060\u00a0mins;\u00a060secsecho\u00a0'Now:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.\u00a0date('Y-m-d')\u00a0.\"\\n\";echo\u00a0'Next\u00a0Week:\u00a0'.\u00a0date('Y-m-d',\u00a0$nextWeek)\u00a0.\"\\n\";\/\/\u00a0or\u00a0using\u00a0strtotime():echo\u00a0'Next\u00a0Week:\u00a0'.\u00a0date('Y-m-d',\u00a0strtotime('+1\u00a0week'))\u00a0.\"\\n\";?>             The above example will output something similar to:       Now:       2005-03-30 Next Week: 2005-04-06 Next Week: 2005-04-06                      Notes   Tip         Timestamp of the start of the request is available in     $_SERVER['REQUEST_TIME'] since PHP 5.1.                See Also            date() - Format a local time\/date     microtime() - Return current Unix timestamp with microseconds"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtotime.php","title":"strtotime","description":"strtotime   (PHP 4, PHP 5)strtotime \u2014 Parse about any English textual datetime description into a Unix timestamp        Description       int strtotime     ( string $time    [, int $now = time()   ] )        The function expects to be given a string containing an English date format    and will try to parse that format into a Unix timestamp (the number of    seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given    in now, or the current time if    now is not supplied.          Each parameter of this function uses the default time zone unless a    time zone is specified in that parameter.  Be careful not to use    different time zones in each parameter unless that is intended.    See date_default_timezone_get() on the various    ways to define the default time zone.            Parameters                    time              A date\/time string. Valid formats are explained in Date and Time Formats.                         now                      The timestamp which is used as a base for the calculation of relative        dates.                                     Return Values       Returns a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0,    this function would return -1 on failure.            Errors\/Exceptions         Every call to a date\/time function will generate a E_NOTICE if the time zone is not valid, and\/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set()           Changelog                                 Version        Description                                    5.3.0                 Prior to PHP 5.3.0, 24:00 was not a valid format and         strtotime() returned FALSE.                               5.2.7                 In PHP 5 prior to 5.2.7, requesting a given occurrence of a         given weekday in a month where that weekday was the first day         of the month would incorrectly add one week to the returned         timestamp. This has been corrected in 5.2.7 and later         versions.                               5.1.0                 Now returns FALSE on failure, instead         of -1.                        5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.                 5.0.2                 In PHP 5 up to 5.0.2, \"now\" and other         relative times are wrongly computed from today&#039;s         midnight. This differs from other versions where it is         correctly computed from current time.                               5.0.0                 Microseconds began to be allowed, but they are ignored.                               4.4.0                 In PHP versions prior to 4.4.0, \"next\" is incorrectly         computed as +2. A typical solution to this is to use         \"+1\".                                            Examples            Example #1 A strtotime() example       <?phpecho\u00a0strtotime(\"now\"),\u00a0\"\\n\";echo\u00a0strtotime(\"10\u00a0September\u00a02000\"),\u00a0\"\\n\";echo\u00a0strtotime(\"+1\u00a0day\"),\u00a0\"\\n\";echo\u00a0strtotime(\"+1\u00a0week\"),\u00a0\"\\n\";echo\u00a0strtotime(\"+1\u00a0week\u00a02\u00a0days\u00a04\u00a0hours\u00a02\u00a0seconds\"),\u00a0\"\\n\";echo\u00a0strtotime(\"next\u00a0Thursday\"),\u00a0\"\\n\";echo\u00a0strtotime(\"last\u00a0Monday\"),\u00a0\"\\n\";?>                           Example #2 Checking for failure       <?php$str\u00a0=\u00a0'Not\u00a0Good';\/\/\u00a0previous\u00a0to\u00a0PHP\u00a05.1.0\u00a0you\u00a0would\u00a0compare\u00a0with\u00a0-1,\u00a0instead\u00a0of\u00a0falseif\u00a0(($timestamp\u00a0=\u00a0strtotime($str))\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0($str)\u00a0is\u00a0bogus\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$str\u00a0==\u00a0\"\u00a0.\u00a0date('l\u00a0dS\u00a0\\o\\f\u00a0F\u00a0Y\u00a0h:i:s\u00a0A',\u00a0$timestamp);}?>                        Notes   Note:          If the number of the year is specified in a two digit format, the values     between 00-69 are mapped to 2000-2069 and 70-99 to 1970-1999. See the notes     below for possible differences on 32bit systems (possible dates might end on      2038-01-19 03:14:07).          Note:          The valid range of a timestamp is typically from Fri, 13 Dec     1901 20:45:54 UTC to Tue, 19 Jan 2038 03:14:07 UTC. (These are     the dates that correspond to the minimum and maximum values for     a 32-bit signed integer.)     Additionally, not all platforms support negative timestamps, therefore     your date range may be limited to no earlier than the Unix epoch. This     means that e.g. dates prior to Jan 1, 1970 will not work on Windows,     some Linux distributions, and a few other operating systems. PHP 5.1.0 and     newer versions overcome this limitation though.             For 64-bit versions of PHP, the valid range of a timestamp is effectively     infinite, as 64 bits can represent approximately 293 billion years in either     direction.          Note:          Dates in the m\/d\/y or d-m-y formats     are disambiguated by looking at the separator between the various     components: if the separator is a slash (\/), then the     American m\/d\/y is assumed; whereas if the separator is a     dash (-) or a dot (.), then the     European d-m-y format is assumed.             To avoid potential ambiguity, it&#039;s best to use ISO 8601     (YYYY-MM-DD) dates or      DateTime::createFromFormat() when possible.          Note:          Using this function for mathematical operations is not advisable.     It is better to use  DateTime::add() and      DateTime::sub() in PHP 5.3 and later, or      DateTime::modify() in PHP 5.2.                See Also            Date and Time Formats      DateTime::createFromFormat() - Returns new DateTime object formatted according to the specified format     checkdate() - Validate a Gregorian date     strptime() - Parse a time\/date generated with strftime"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-identifiers-list.php","title":"timezone_identifiers_list","description":"timezone_identifiers_list   (PHP 5 >= 5.2.0)timezone_identifiers_list \u2014 Alias of  DateTimeZone::listIdentifiers()         Description       This function is an alias of:   DateTimeZone::listIdentifiers()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-location-get.php","title":"timezone_location_get","description":"timezone_location_get   (PHP 5 >= 5.3.0)timezone_location_get \u2014 Alias of  DateTimeZone::getLocation()         Description       This function is an alias of:   DateTimeZone::getLocation()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-name-from-abbr.php","title":"timezone_name_from_abbr","description":"timezone_name_from_abbr   (PHP 5 >= 5.1.3)timezone_name_from_abbr \u2014 Returns the timezone name from abbreviation        Description       string timezone_name_from_abbr     ( string $abbr    [, int $gmtOffset = -1    [, int $isdst = -1   ]] )          Parameters                    abbr                      Time zone abbreviation.                                gmtOffset                      Offset from GMT in seconds. Defaults to -1 which means that first found        time zone corresponding to abbr is returned.        Otherwise exact offset is searched and only if not found then the first        time zone with any offset is returned.                                isdst                      Daylight saving time indicator. Defaults to -1, which means that        whether the time zone has daylight saving or not is not taken into        consideration when searching. If this is set to 1, then the        gmtOffset is assumed to be an offset with        daylight saving in effect; if 0, then gmtOffset        is assumed to be an offset without daylight saving in effect. If        abbr doesn&#039;t exist then the time zone is        searched solely by the gmtOffset and        isdst.                                     Return Values       Returns time zone name on success or FALSE on failure.            Examples            Example #1 A timezone_name_from_abbr() example       <?phpecho\u00a0timezone_name_from_abbr(\"CET\")\u00a0.\u00a0\"\\n\";echo\u00a0timezone_name_from_abbr(\"\",\u00a03600,\u00a00)\u00a0.\u00a0\"\\n\";?>             The above example will output something similar to:       Europe\/Berlin Europe\/Paris                      See Also            timezone_abbreviations_list() - Alias of DateTimeZone::listAbbreviations"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-name-get.php","title":"timezone_name_get","description":"timezone_name_get   (PHP 5 >= 5.2.0)timezone_name_get \u2014 Alias of  DateTimeZone::getName()         Description       This function is an alias of:   DateTimeZone::getName()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-open.php","title":"timezone_open","description":"timezone_open   (PHP 5 >= 5.2.0)timezone_open \u2014 Alias of  DateTimeZone::__construct()         Description       This function is an alias of:   DateTimeZone::__construct()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-transitions-get.php","title":"timezone_transitions_get","description":"timezone_transitions_get   (PHP 5 >= 5.2.0)timezone_transitions_get \u2014 Alias of  DateTimeZone::getTransitions()         Description       This function is an alias of:   DateTimeZone::getTransitions()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-offset-get.php","title":"timezone_offset_get","description":"timezone_offset_get   (PHP 5 >= 5.2.0)timezone_offset_get \u2014 Alias of  DateTimeZone::getOffset()         Description       This function is an alias of:   DateTimeZone::getOffset()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-version-get.php","title":"timezone_version_get","description":"timezone_version_get   (PHP 5 >= 5.3.0)timezone_version_get \u2014     Gets the version of the timezonedb           Description       string timezone_version_get     ( void    )        Returns the current version of the timezonedb.            Return Values       Returns a string.            Examples            Example #1 Getting the timezonedb version       <?phpecho\u00a0timezone_version_get();?>             The above example will output something similar to:       2009.7                      See Also            List of Supported Timezones"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-add.php","title":"dbplus_add","description":"dbplus_add   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_add \u2014 Add a tuple to a relation          Description          int dbplus_add     ( resource $relation    , array $tuple    )        Adds a tuple to a relation.            Parameters                    relation                                              tuple                      An array of attribute\/value pairs to be inserted into the given        relation.                      After successful execution this array will contain the complete data        of the newly created tuple, including all implicitly set domain fields        like sequences.                                     Return Values       The function will return DBPLUS_ERR_NOERR on success    or a db++ error code on failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_errcode() - Get error string for given errorcode or last error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-chdir.php","title":"dbplus_chdir","description":"dbplus_chdir   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_chdir \u2014 Get\/Set database virtual current directory          Description       string dbplus_chdir     ([ string $newdir   ] )        Changes the virtual current directory where relation files will be looked    for by dbplus_open().            Parameters                    newdir                      The new directory for relation files. You can omit this parameter to        query the current working directory.                                     Return Values       Returns the absolute path of the current directory.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-aql.php","title":"dbplus_aql","description":"dbplus_aql   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_aql \u2014 Perform AQL query          Description       resource dbplus_aql     ( string $query    [, string $server    [, string $dbpath   ]] )        Executes an AQL query on the given    server and dbpath.            Parameters                    query                      The AQL query to be executed. Further information on the AQL (Algebraic        Query Language) is provided in the original db++ manual.                                server                                              dbpath                                                   Return Values       Returns a relation handle on success. The result data may be fetched from    this relation by calling dbplus_next() and    dbplus_curr(). Other relation access functions will    not work on a result relation.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-close.php","title":"dbplus_close","description":"dbplus_close   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_close \u2014 Close a relation          Description       mixed dbplus_close     ( resource $relation    )        Closes a relation previously opened by dbplus_open().            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values       Returns TRUE on success or DBPLUS_ERR_UNKNOWN on    failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-curr.php","title":"dbplus_curr","description":"dbplus_curr   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_curr \u2014 Get current tuple from relation          Description       int dbplus_curr     ( resource $relation    , array &$tuple    )        Reads the data for the current tuple for the given    relation.            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                      The data will be passed back in this parameter, as an associative        array.                                     Return Values       The function will return zero (aka. DBPLUS_ERR_NOERR) on success    or a db++ error code on failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_first() - Get first tuple from relation     dbplus_prev() - Get previous tuple from relation     dbplus_next() - Get next tuple from relation     dbplus_last() - Get last tuple from relation     dbplus_errcode() - Get error string for given errorcode or last error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-errcode.php","title":"dbplus_errcode","description":"dbplus_errcode   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_errcode \u2014 Get error string for given errorcode or last error          Description       string dbplus_errcode     ([ int $errno   ] )        Returns a clear error string for the given error code.            Parameters                    errno                      The error code. If not provided, the result code of the last db++        operation is assumed.                                     Return Values       Returns the error message.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-errno.php","title":"dbplus_errno","description":"dbplus_errno   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_errno \u2014 Get error code for last operation          Description       int dbplus_errno     ( void    )        Returns the error code returned by the last db++ operation.            Return Values       Returns the error code, as an integer.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_errcode() - Get error string for given errorcode or last error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-find.php","title":"dbplus_find","description":"dbplus_find   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_find \u2014 Set a constraint on a relation          Description       int dbplus_find     ( resource $relation    , array $constraints    , mixed $tuple    )        Places a constraint on the given relation.          Further calls to functions like dbplus_curr() or    dbplus_next() will only return tuples matching the    given constraints.            Parameters                    relation                      A relation opened by dbplus_open().                                constraints                      Constraints are triplets of strings containing of a domain name,        a comparison operator and a comparison value. The        constraints parameter array may consist of        a collection of string arrays, each of which contains a domain, an        operator and a value, or of a single string array containing a        multiple of three elements.                      The comparison operator may be one of the following strings:        &#039;==&#039;, &#039;>&#039;, &#039;>=&#039;, &#039;<&#039;, &#039;<=&#039;, &#039;!=&#039;, &#039;~&#039; for a regular        expression match and &#039;BAND&#039; or &#039;BOR&#039; for bitwise operations.                                tuple                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_unselect() - Remove a constraint from relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-first.php","title":"dbplus_first","description":"dbplus_first   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_first \u2014 Get first tuple from relation          Description       int dbplus_first     ( resource $relation    , array &$tuple    )        Reads the data for the first tuple for the given    relation, makes it the current tuple and pass it    back as an associative array in tuple.            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values       Returns DBPLUS_ERR_NOERR on success or a db++ error    code on failure.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_curr() - Get current tuple from relation     dbplus_prev() - Get previous tuple from relation     dbplus_next() - Get next tuple from relation     dbplus_last() - Get last tuple from relation     dbplus_errcode() - Get error string for given errorcode or last error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-flush.php","title":"dbplus_flush","description":"dbplus_flush   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_flush \u2014 Flush all changes made on a relation          Description       int dbplus_flush     ( resource $relation    )        Writes all changes applied to relation since the    last flush to disk.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values       Returns DBPLUS_ERR_NOERR on success or a db++ error    code on failure.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_errcode() - Get error string for given errorcode or last error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-freealllocks.php","title":"dbplus_freealllocks","description":"dbplus_freealllocks   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_freealllocks \u2014 Free all locks held by this client          Description       int dbplus_freealllocks     ( void    )        Frees all tuple locks held by this client.            Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_getlock() - Get a write lock on a tuple     dbplus_freelock() - Release write lock on tuple     dbplus_freerlocks() - Free all tuple locks on given relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-freelock.php","title":"dbplus_freelock","description":"dbplus_freelock   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_freelock \u2014 Release write lock on tuple          Description       int dbplus_freelock     ( resource $relation    , string $tuple    )        Releases a write lock on the given tuple previously    obtained by dbplus_getlock().            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_getlock() - Get a write lock on a tuple     dbplus_freerlocks() - Free all tuple locks on given relation     dbplus_freealllocks() - Free all locks held by this client"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-freerlocks.php","title":"dbplus_freerlocks","description":"dbplus_freerlocks   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_freerlocks \u2014 Free all tuple locks on given relation          Description       int dbplus_freerlocks     ( resource $relation    )        Frees all tuple locks held on the given relation.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_getlock() - Get a write lock on a tuple     dbplus_freelock() - Release write lock on tuple     dbplus_freealllocks() - Free all locks held by this client"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-getlock.php","title":"dbplus_getlock","description":"dbplus_getlock   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_getlock \u2014 Get a write lock on a tuple          Description       int dbplus_getlock     ( resource $relation    , string $tuple    )        Requests a write lock on the specified tuple.             Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values       Returns zero on success or a non-zero error code, especially     DBPLUS_ERR_WLOCKED on failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_freelock() - Release write lock on tuple     dbplus_freerlocks() - Free all tuple locks on given relation     dbplus_freealllocks() - Free all locks held by this client"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-getunique.php","title":"dbplus_getunique","description":"dbplus_getunique   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_getunique \u2014 Get an id number unique to a relation          Description       int dbplus_getunique     ( resource $relation    , int $uniqueid    )        Obtains a number guaranteed to be unique for the given    relation and will pass it back in the variable    given as uniqueid.            Parameters                    relation                      A relation opened by dbplus_open().                                uniqueid                                                   Return Values       Returns DBPLUS_ERR_NOERR on success or a db++ error    code on failure.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-info.php","title":"dbplus_info","description":"dbplus_info   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_info \u2014 Get information about a relation          Description       int dbplus_info     ( resource $relation    , string $key    , array &$result    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                key                                              result                                                   Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-last.php","title":"dbplus_last","description":"dbplus_last   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_last \u2014 Get last tuple from relation          Description       int dbplus_last     ( resource $relation    , array &$tuple    )        Reads the data for the last tuple for the given    relation, makes it the current tuple and pass it    back as an associative array in tuple.            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values       Returns DBPLUS_ERR_NOERR on success or a db++ error    code on failure.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_first() - Get first tuple from relation     dbplus_curr() - Get current tuple from relation     dbplus_prev() - Get previous tuple from relation     dbplus_next() - Get next tuple from relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-lockrel.php","title":"dbplus_lockrel","description":"dbplus_lockrel   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_lockrel \u2014 Request write lock on relation          Description       int dbplus_lockrel     ( resource $relation    )        Requests a write lock on the given relation.          Other clients may still query the relation, but can&#039;t alter it while it is    locked.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-next.php","title":"dbplus_next","description":"dbplus_next   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_next \u2014 Get next tuple from relation          Description       int dbplus_next     ( resource $relation    , array &$tuple    )        Reads the data for the next tuple for the given    relation, makes it the current tuple and will pass    it back as an associative array in tuple.            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values       Returns DBPLUS_ERR_NOERR on success or a db++ error    code on failure.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_first() - Get first tuple from relation     dbplus_curr() - Get current tuple from relation     dbplus_prev() - Get previous tuple from relation     dbplus_last() - Get last tuple from relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-open.php","title":"dbplus_open","description":"dbplus_open   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_open \u2014 Open relation file          Description       resource dbplus_open     ( string $name    )        Opens the given relation file.            Parameters                    name                      Can be either a file name or a relative or absolute path name. This        will be mapped in any case to an absolute relation file path on a        specific host machine and server.                                     Return Values       On success a relation file resource (cursor) is returned which must    be used in any subsequent commands referencing the relation.    Failure leads to a zero return value, the actual error code may    be asked for by calling dbplus_errno().            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-prev.php","title":"dbplus_prev","description":"dbplus_prev   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_prev \u2014 Get previous tuple from relation          Description       int dbplus_prev     ( resource $relation    , array &$tuple    )        Reads the data for the previous tuple for the given    relation, makes it the current tuple and will pass    it back as an associative array in tuple.            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values       Returns DBPLUS_ERR_NOERR on success or a db++ error    code on failure.             Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_first() - Get first tuple from relation     dbplus_curr() - Get current tuple from relation     dbplus_next() - Get next tuple from relation     dbplus_last() - Get last tuple from relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rchperm.php","title":"dbplus_rchperm","description":"dbplus_rchperm   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rchperm \u2014 Change relation permissions          Description       int dbplus_rchperm     ( resource $relation    , int $mask    , string $user    , string $group    )        Changes access permissions as specified by mask,    user and group. The    values for these are operating system specific.            Parameters                    relation                      A relation opened by dbplus_open().                                mask                                              user                                              group                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-resolve.php","title":"dbplus_resolve","description":"dbplus_resolve   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_resolve \u2014 Resolve host information for relation          Description       array dbplus_resolve     ( string $relation_name    )        dbplus_resolve() will try to resolve the given    relation_name and find out internal server    id, real hostname and the database path on this host.             Parameters                    relation_name                      The relation name.                                     Return Values       Returns an array containing these values under the keys    sid, host and    host_path or FALSE on error.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_tcl() - Execute TCL code on server side"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-restorepos.php","title":"dbplus_restorepos","description":"dbplus_restorepos   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_restorepos \u2014 Restore position          Description       int dbplus_restorepos     ( resource $relation    , array $tuple    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rcreate.php","title":"dbplus_rcreate","description":"dbplus_rcreate   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rcreate \u2014 Creates a new DB++ relation          Description       resource dbplus_rcreate     ( string $name    , mixed $domlist    [, bool $overwrite   ] )        Creates a new relation. Any existing relation sharing the same    name will be overwritten if the relation is    currently not in use and overwrite is set to TRUE.            Parameters                    name                                              domlist                      A combination of domains. May be passed as a single domain name string        or as an array of domain names.                      This parameter should contain the domain specification for the new        relation within an array of domain description strings. A domain        description string consists of a domain name unique to this        relation, a slash and a type specification character. See the        db++ documentation, especially the dbcreate(1) manpage, for a        description of available type specifiers and their meanings.              Note:                  This function will also accept a string with space delimited domain         description strings, but it is recommended to use an array                                        overwrite                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rcrtlike.php","title":"dbplus_rcrtlike","description":"dbplus_rcrtlike   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rcrtlike \u2014 Creates an empty copy of a relation with default indices          Description       mixed dbplus_rcrtlike     ( string $name    , resource $relation    [, int $overwrite   ] )        dbplus_rcrtexact() will create an  empty copy    of the given relation under a new    name, but with default indices.            Parameters                    name                                              relation                      The copied relation, opened by dbplus_open().                                overwrite                      An existing relation by the same name will only        be overwritten if this parameter is set to TRUE and no other process        is currently using the relation.                                     Return Values       Returns resource on success or DBPLUS_ERR_UNKNOWN on    failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rcrtexact.php","title":"dbplus_rcrtexact","description":"dbplus_rcrtexact   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rcrtexact \u2014 Creates an exact but empty copy of a relation including indices          Description       mixed dbplus_rcrtexact     ( string $name    , resource $relation    [, bool $overwrite   ] )        dbplus_rcrtexact() will create an exact but    empty copy of the given relation under a    new name.            Parameters                    name                                              relation                      The copied relation, opened by dbplus_open().                                overwrite                      An existing relation by the same name will only        be overwritten if this parameter is set to TRUE and no other process        is currently using the relation.                                     Return Values       Returns resource on success or DBPLUS_ERR_UNKNOWN on    failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rkeys.php","title":"dbplus_rkeys","description":"dbplus_rkeys   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rkeys \u2014 Specify new primary key for a relation          Description       mixed dbplus_rkeys     ( resource $relation    , mixed $domlist    )        dbplus_rkeys() will replace the current    primary key for relation with the    combination of domains specified by domlist.            Parameters                    relation                      A relation opened by dbplus_open().                                domlist                       A combination of domains. May be passed as a single domain name         string or as an array of domain names.                                     Return Values       Returns resource on success or DBPLUS_ERR_UNKNOWN on    failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-ropen.php","title":"dbplus_ropen","description":"dbplus_ropen   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_ropen \u2014 Open relation file local          Description       resource dbplus_ropen     ( string $name    )        dbplus_ropen() will open the relation    file locally for quick access without any    client\/server overhead. Access is read only and only    dbplus_curr() and    dbplus_next() may be applied to the returned    relation.            Parameters                    name                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rsecindex.php","title":"dbplus_rsecindex","description":"dbplus_rsecindex   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rsecindex \u2014 Create a new secondary index for a relation          Description       mixed dbplus_rsecindex     ( resource $relation    , mixed $domlist    , int $type    )        dbplus_rsecindex() will create a new secondary    index for relation with consists of the    domains specified by domlist and is of    type type            Parameters                    relation                      A relation opened by dbplus_open().                                domlist                      A combination of domains. May be passed as a single domain name        string or as an array of domain names.                                type                                                   Return Values       Returns resource on success or DBPLUS_ERR_UNKNOWN on    failure.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rquery.php","title":"dbplus_rquery","description":"dbplus_rquery   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rquery \u2014 Perform local (raw) AQL query          Description       resource dbplus_rquery     ( string $query    [, string $dbpath   ] )        dbplus_rquery() performs a local (raw) AQL    query using an AQL interpreter embedded into the db++ client    library. dbplus_rquery() is faster than    dbplus_aql() but will work on local data only.            Parameters                    query                                              dbpath                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rrename.php","title":"dbplus_rrename","description":"dbplus_rrename   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rrename \u2014 Rename a relation          Description       int dbplus_rrename     ( resource $relation    , string $name    )        dbplus_rrename() will change the name of    relation to name.            Parameters                    relation                      A relation opened by dbplus_open().                                name                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-runlink.php","title":"dbplus_runlink","description":"dbplus_runlink   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_runlink \u2014 Remove relation from filesystem          Description       int dbplus_runlink     ( resource $relation    )        dbplus_runlink() will close and remove the    relation.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rzap.php","title":"dbplus_rzap","description":"dbplus_rzap   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_rzap \u2014 Remove all tuples from relation          Description       int dbplus_rzap     ( resource $relation    )        dbplus_rzap() will remove all tuples from    relation.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-setindexbynumber.php","title":"dbplus_setindexbynumber","description":"dbplus_setindexbynumber   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_setindexbynumber \u2014 Set index by number          Description       int dbplus_setindexbynumber     ( resource $relation    , int $idx_number    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                idx_number                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-savepos.php","title":"dbplus_savepos","description":"dbplus_savepos   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_savepos \u2014 Save position          Description       int dbplus_savepos     ( resource $relation    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-setindex.php","title":"dbplus_setindex","description":"dbplus_setindex   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_setindex \u2014 Set index          Description       int dbplus_setindex     ( resource $relation    , string $idx_name    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                idx_name                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-sql.php","title":"dbplus_sql","description":"dbplus_sql   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_sql \u2014 Perform SQL query          Description       resource dbplus_sql     ( string $query    [, string $server    [, string $dbpath   ]] )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    query                                              server                                              dbpath                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-tcl.php","title":"dbplus_tcl","description":"dbplus_tcl   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_tcl \u2014 Execute TCL code on server side          Description       string dbplus_tcl     ( int $sid    , string $script    )        A db++ server will prepare a TCL interpreter for each client    connection. This interpreter will enable the server to execute    TCL code provided by the client as a sort of stored procedures to    improve the performance of database operations by avoiding    client\/server data transfers and context switches.          dbplus_tcl() needs to pass the client    connection id the TCL script code should    be executed by. dbplus_resolve() will provide    this connection id. The function will return whatever the TCL    code returns or a TCL error message if the TCL code fails.            Parameters                    sid                                              script                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_resolve() - Resolve host information for relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-tremove.php","title":"dbplus_tremove","description":"dbplus_tremove   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_tremove \u2014 Remove tuple and return new current tuple          Description       int dbplus_tremove     ( resource $relation    , array $tuple    [, array &$current   ] )        dbplus_tremove() removes    tuple from relation    if it perfectly matches a tuple within the    relation. current, if given, will contain    the data of the new current tuple after calling    dbplus_tremove().            Parameters                    relation                      A relation opened by dbplus_open().                                tuple                                              current                                                   Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-undo.php","title":"dbplus_undo","description":"dbplus_undo   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_undo \u2014 Undo          Description       int dbplus_undo     ( resource $relation    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-undoprepare.php","title":"dbplus_undoprepare","description":"dbplus_undoprepare   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_undoprepare \u2014 Prepare undo          Description       int dbplus_undoprepare     ( resource $relation    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-unlockrel.php","title":"dbplus_unlockrel","description":"dbplus_unlockrel   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_unlockrel \u2014 Give up write lock on relation          Description       int dbplus_unlockrel     ( resource $relation    )        Release a write lock previously obtained by    dbplus_lockrel().            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-unselect.php","title":"dbplus_unselect","description":"dbplus_unselect   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_unselect \u2014 Remove a constraint from relation          Description       int dbplus_unselect     ( resource $relation    )        Calling dbplus_unselect() will remove a    constraint previously set by dbplus_find() on    relation.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-update.php","title":"dbplus_update","description":"dbplus_update   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_update \u2014 Update specified tuple in relation          Description       int dbplus_update     ( resource $relation    , array $old    , array $new    )        dbplus_update() replaces the old    tuple with the data from the new one, only if the    old completely matches a tuple within    relation.            Parameters                    relation                      A relation opened by dbplus_open().                                old                      The old tuple.                                new                      The new tuple.                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-xunlockrel.php","title":"dbplus_xunlockrel","description":"dbplus_xunlockrel   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_xunlockrel \u2014 Free exclusive lock on relation          Description       int dbplus_xunlockrel     ( resource $relation    )        Releases an exclusive lock previously obtained by    dbplus_xlockrel().            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-xlockrel.php","title":"dbplus_xlockrel","description":"dbplus_xlockrel   (PHP 4 <= 4.1.0, PECL dbplus >= 0.9)dbplus_xlockrel \u2014 Request exclusive lock on relation          Description       int dbplus_xlockrel     ( resource $relation    )        Request an exclusive lock on relation preventing    even read access from other clients.            Parameters                    relation                      A relation opened by dbplus_open().                                     Return Values               Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            dbplus_xunlockrel() - Free exclusive lock on relation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-close.php","title":"curl_close","description":"curl_close   (PHP 4 >= 4.0.2, PHP 5)curl_close \u2014 Close a cURL session          Description       void curl_close     ( resource $ch    )        Closes a cURL session and frees all resources.  The cURL handle,    ch, is also deleted.            Parameters              ch  A cURL handle returned by curl_init().                   Return Values       No value is returned.            Examples            Example #1 Initializing a new cURL session and fetching a web page       <?php\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource$ch\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");curl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browsercurl_exec($ch);\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resourcescurl_close($ch);?>                        See Also            curl_init() - Initialize a cURL session     curl_multi_close() - Close a set of cURL handles"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-error.php","title":"curl_error","description":"curl_error   (PHP 4 >= 4.0.3, PHP 5)curl_error \u2014 Return a string containing the last error for the current session          Description       string curl_error     ( resource $ch    )        Returns a clear text error message for the last cURL operation.            Parameters              ch  A cURL handle returned by curl_init().                   Return Values       Returns the error message or &#039;&#039; (the empty string) if no    error occurred.            Examples            Example #1 curl_error() example       <?php\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\u00a0to\u00a0a\u00a0non-existing\u00a0location$ch\u00a0=\u00a0curl_init('http:\/\/404.php.net\/');curl_setopt($ch,\u00a0CURLOPT_RETURNTRANSFER,\u00a0true);if(curl_exec($ch)\u00a0===\u00a0false){\u00a0\u00a0\u00a0\u00a0echo\u00a0'Curl\u00a0error:\u00a0'\u00a0.\u00a0curl_error($ch);}else{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Operation\u00a0completed\u00a0without\u00a0any\u00a0errors';}\/\/\u00a0Close\u00a0handlecurl_close($ch);?>                         See Also            curl_errno() - Return the last error number     \u00bb\u00a0Curl error codes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-copy-handle.php","title":"curl_copy_handle","description":"curl_copy_handle   (PHP 5)curl_copy_handle \u2014 Copy a cURL handle along with all of its preferences          Description       resource curl_copy_handle     ( resource $ch    )        Copies a cURL handle keeping the same preferences.            Parameters              ch  A cURL handle returned by curl_init().                   Return Values       Returns a new cURL handle.            Examples            Example #1 Copying a cURL handle       <?php\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource$ch\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0'http:\/\/www.example.com\/');curl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\/\/\u00a0copy\u00a0the\u00a0handle$ch2\u00a0=\u00a0curl_copy_handle($ch);\/\/\u00a0grab\u00a0URL\u00a0(http:\/\/www.example.com\/)\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browsercurl_exec($ch2);\/\/\u00a0close\u00a0cURL\u00a0resources,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resourcescurl_close($ch2);curl_close($ch);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-errno.php","title":"curl_errno","description":"curl_errno   (PHP 4 >= 4.0.3, PHP 5)curl_errno \u2014 Return the last error number          Description       int curl_errno     ( resource $ch    )        Returns the error number for the last cURL operation.            Parameters              ch  A cURL handle returned by curl_init().                   Return Values       Returns the error number or 0 (zero) if no error    occurred.            Examples            Example #1 curl_errno() example       <?php\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\u00a0to\u00a0a\u00a0non-existing\u00a0location$ch\u00a0=\u00a0curl_init('http:\/\/404.php.net\/');\/\/\u00a0Executecurl_setopt($ch,\u00a0CURLOPT_RETURNTRANSFER,\u00a0true);curl_exec($ch);\/\/\u00a0Check\u00a0if\u00a0any\u00a0error\u00a0occuredif(curl_errno($ch)){\u00a0\u00a0\u00a0\u00a0echo\u00a0'Curl\u00a0error:\u00a0'\u00a0.\u00a0curl_error($ch);}\/\/\u00a0Close\u00a0handlecurl_close($ch);?>                         See Also            curl_error() - Return a string containing the last error for the current session     \u00bb\u00a0Curl error codes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-add-handle.php","title":"curl_multi_add_handle","description":"curl_multi_add_handle   (PHP 5)curl_multi_add_handle \u2014 Add a normal cURL handle to a cURL multi handle          Description       int curl_multi_add_handle     ( resource $mh    , resource $ch    )        Adds the ch handle to the multi handle     mh             Parameters              mh  A cURL multi handle returned by curl_multi_init().        ch  A cURL handle returned by curl_init().                   Return Values       Returns 0 on success, or one of the CURLM_XXX errors    code.             Examples            Example #1 curl_multi_add_handle() example           This example will create two cURL handles, add them to a multi      handle, and then run them in parallel.            <?php\/\/\u00a0create\u00a0both\u00a0cURL\u00a0resources$ch1\u00a0=\u00a0curl_init();$ch2\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch1,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");curl_setopt($ch1,\u00a0CURLOPT_HEADER,\u00a00);curl_setopt($ch2,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.php.net\/\");curl_setopt($ch2,\u00a0CURLOPT_HEADER,\u00a00);\/\/create\u00a0the\u00a0multiple\u00a0cURL\u00a0handle$mh\u00a0=\u00a0curl_multi_init();\/\/add\u00a0the\u00a0two\u00a0handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$running=null;\/\/execute\u00a0the\u00a0handlesdo\u00a0{\u00a0\u00a0\u00a0\u00a0curl_multi_exec($mh,$running);}\u00a0while($running\u00a0>\u00a00);\/\/close\u00a0all\u00a0the\u00a0handlescurl_multi_remove_handle($mh,\u00a0$ch1);curl_multi_remove_handle($mh,\u00a0$ch2);curl_multi_close($mh);?>                         See Also            curl_multi_remove_handle() - Remove a multi handle from a set of cURL handles     curl_multi_init() - Returns a new cURL multi handle     curl_init() - Initialize a cURL session"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-init.php","title":"curl_init","description":"curl_init   (PHP 4 >= 4.0.2, PHP 5)curl_init \u2014 Initialize a cURL session          Description       resource curl_init     ([ string $url = NULL   ] )        Initializes a new session and return a cURL handle for use with the    curl_setopt(), curl_exec(),    and curl_close() functions.              Parameters                    url                      If provided, the CURLOPT_URL option will be set        to its value. You can manually set this using the         curl_setopt() function.              Note:                  The file protocol is disabled by cURL if         open_basedir is set.                                             Return Values       Returns a cURL handle on success, FALSE on errors.             Examples            Example #1       Initializing a new cURL session and fetching a web page            <?php\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource$ch\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");curl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browsercurl_exec($ch);\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resourcescurl_close($ch);?>                        See Also            curl_close() - Close a cURL session     curl_multi_init() - Returns a new cURL multi handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-getinfo.php","title":"curl_getinfo","description":"curl_getinfo   (PHP 4 >= 4.0.4, PHP 5)curl_getinfo \u2014 Get information regarding a specific transfer          Description       mixed curl_getinfo     ( resource $ch    [, int $opt = 0   ] )        Gets information about the last transfer.             Parameters              ch  A cURL handle returned by curl_init().              opt                      This may be one of the following constants:                                      CURLINFO_EFFECTIVE_URL - Last effective URL                                                 CURLINFO_HTTP_CODE - Last received HTTP code                                                 CURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned the time of the document is unknown                                                 CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer                                                 CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete                                                 CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection                                                 CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins                                                 CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred                                                 CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started                                                 CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded                                                 CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded                                                 CURLINFO_SPEED_DOWNLOAD - Average download speed                                                 CURLINFO_SPEED_UPLOAD - Average upload speed                                                 CURLINFO_HEADER_SIZE - Total size of all headers received                                                 CURLINFO_HEADER_OUT - The request string sent. For this to            work, add the CURLINFO_HEADER_OUT option to the handle by calling            curl_setopt()                                               CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests                                                 CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER                                                 CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from Content-Length: field                                                 CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload                                                 CURLINFO_CONTENT_TYPE - Content-Type: of the requested document, NULL indicates server did not send valid Content-Type: header                                                                Return Values       If opt is given, returns its value as a string.    Otherwise, returns an associative array with the following elements     (which correspond to opt), or FALSE on failure:                      \"url\"                             \"content_type\"                             \"http_code\"                             \"header_size\"                             \"request_size\"                             \"filetime\"                             \"ssl_verify_result\"                             \"redirect_count\"                             \"total_time\"                             \"namelookup_time\"                             \"connect_time\"                             \"pretransfer_time\"                             \"size_upload\"                             \"size_download\"                             \"speed_download\"                             \"speed_upload\"                             \"download_content_length\"                             \"upload_content_length\"                             \"starttransfer_time\"                             \"redirect_time\"                             \"certinfo\"                             \"request_header\" (This is only set if the CURLINFO_HEADER_OUT        is set by a previous call to curl_setopt())                           Changelog                                 Version        Description                                    5.1.3                 Introduced CURLINFO_HEADER_OUT.                                             Examples            Example #1 curl_getinfo() example       <?php\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle$ch\u00a0=\u00a0curl_init('http:\/\/www.yahoo.com\/');\/\/\u00a0Executecurl_exec($ch);\/\/\u00a0Check\u00a0if\u00a0any\u00a0error\u00a0occuredif(!curl_errno($ch)){\u00a0$info\u00a0=\u00a0curl_getinfo($ch);\u00a0echo\u00a0'Took\u00a0'\u00a0.\u00a0$info['total_time']\u00a0.\u00a0'\u00a0seconds\u00a0to\u00a0send\u00a0a\u00a0request\u00a0to\u00a0'\u00a0.\u00a0$info['url'];}\/\/\u00a0Close\u00a0handlecurl_close($ch);?>                         Notes   Note:          Information gathered by this function is kept if the handle is re-used. This means      that unless a statistic is overridden internally by this function, the previous info      is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-close.php","title":"curl_multi_close","description":"curl_multi_close   (PHP 5)curl_multi_close \u2014 Close a set of cURL handles          Description       void curl_multi_close     ( resource $mh    )        Closes a set of cURL handles.            Parameters              mh  A cURL multi handle returned by curl_multi_init().                   Return Values       No value is returned.            Examples            Example #1 curl_multi_close() example           This example will create two cURL handles, add them to a multi      handle, and then run them in parallel.            <?php\/\/\u00a0create\u00a0both\u00a0cURL\u00a0resources$ch1\u00a0=\u00a0curl_init();$ch2\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch1,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");curl_setopt($ch1,\u00a0CURLOPT_HEADER,\u00a00);curl_setopt($ch2,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.php.net\/\");curl_setopt($ch2,\u00a0CURLOPT_HEADER,\u00a00);\/\/create\u00a0the\u00a0multiple\u00a0cURL\u00a0handle$mh\u00a0=\u00a0curl_multi_init();\/\/add\u00a0the\u00a0two\u00a0handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$running=null;\/\/execute\u00a0the\u00a0handlesdo\u00a0{\u00a0\u00a0\u00a0\u00a0curl_multi_exec($mh,$running);}\u00a0while\u00a0($running\u00a0>\u00a00);\/\/close\u00a0the\u00a0handlescurl_multi_remove_handle($mh,\u00a0$ch1);curl_multi_remove_handle($mh,\u00a0$ch2);curl_multi_close($mh);?>                         See Also            curl_multi_init() - Returns a new cURL multi handle     curl_close() - Close a cURL session"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-exec.php","title":"curl_exec","description":"curl_exec   (PHP 4 >= 4.0.2, PHP 5)curl_exec \u2014 Perform a cURL session         Description       mixed curl_exec     ( resource $ch    )        Execute the given cURL session.          This function should be called after initializing a cURL session and all    the options for the session are set.             Parameters              ch  A cURL handle returned by curl_init().                   Return Values       Returns TRUE on success or FALSE on failure. However, if the CURLOPT_RETURNTRANSFER    option is set, it will return    the result on success, FALSE on failure.               Examples            Example #1 Fetching a web page       <?php\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource$ch\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");curl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browsercurl_exec($ch);\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resourcescurl_close($ch);?>                         See Also            curl_multi_exec() - Run the sub-connections of the current cURL handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-getcontent.php","title":"curl_multi_getcontent","description":"curl_multi_getcontent   (PHP 5)curl_multi_getcontent \u2014 Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set          Description       string curl_multi_getcontent     ( resource $ch    )        If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle,     then this function will return the content of that cURL handle in the form    of a string.            Parameters              ch  A cURL handle returned by curl_init().                    Return Values       Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.            See Also            curl_multi_init() - Returns a new cURL multi handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-exec.php","title":"curl_multi_exec","description":"curl_multi_exec   (PHP 5)curl_multi_exec \u2014 Run the sub-connections of the current cURL handle          Description       int curl_multi_exec     ( resource $mh    , int &$still_running    )        Processes each of the handles in the stack.  This method can be called whether or not a handle    needs to read or write data.             Parameters              mh  A cURL multi handle returned by curl_multi_init().              still_running                      A reference to a flag to tell whether the operations are still running.                                     Return Values       A cURL code defined in the cURL Predefined Constants.      Note:          This only returns errors regarding the whole multi stack. There might still have      occurred problems on individual transfers even when this function returns      CURLM_OK.                 Examples            Example #1 curl_multi_exec() example           This example will create two cURL handles, add them to a multi      handle, and then run them in parallel.            <?php\/\/\u00a0create\u00a0both\u00a0cURL\u00a0resources$ch1\u00a0=\u00a0curl_init();$ch2\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch1,\u00a0CURLOPT_URL,\u00a0\"http:\/\/lxr.php.net\/\");curl_setopt($ch1,\u00a0CURLOPT_HEADER,\u00a00);curl_setopt($ch2,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.php.net\/\");curl_setopt($ch2,\u00a0CURLOPT_HEADER,\u00a00);\/\/create\u00a0the\u00a0multiple\u00a0cURL\u00a0handle$mh\u00a0=\u00a0curl_multi_init();\/\/add\u00a0the\u00a0two\u00a0handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$active\u00a0=\u00a0null;\/\/execute\u00a0the\u00a0handlesdo\u00a0{\u00a0\u00a0\u00a0\u00a0$mrc\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);}\u00a0while\u00a0($mrc\u00a0==\u00a0CURLM_CALL_MULTI_PERFORM);while\u00a0($active\u00a0&&\u00a0$mrc\u00a0==\u00a0CURLM_OK)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(curl_multi_select($mh)\u00a0!=\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$mrc\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0while\u00a0($mrc\u00a0==\u00a0CURLM_CALL_MULTI_PERFORM);\u00a0\u00a0\u00a0\u00a0}}\/\/close\u00a0the\u00a0handlescurl_multi_remove_handle($mh,\u00a0$ch1);curl_multi_remove_handle($mh,\u00a0$ch2);curl_multi_close($mh);?>                         See Also            curl_multi_init() - Returns a new cURL multi handle     curl_multi_select() - Wait for activity on any curl_multi connection     curl_exec() - Perform a cURL session"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-init.php","title":"curl_multi_init","description":"curl_multi_init   (PHP 5)curl_multi_init \u2014 Returns a new cURL multi handle          Description       resource curl_multi_init     ( void    )        Allows the processing of multiple cURL handles in parallel.            Parameters   This function has no parameters.         Return Values       Returns a cURL multi handle resource on success, FALSE on failure.             Examples            Example #1 curl_multi_init() example           This example will create two cURL handles, add them to a multi      handle, and then run them in parallel.            <?php\/\/\u00a0create\u00a0both\u00a0cURL\u00a0resources$ch1\u00a0=\u00a0curl_init();$ch2\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch1,\u00a0CURLOPT_URL,\u00a0\"http:\/\/lxr.php.net\/\");curl_setopt($ch1,\u00a0CURLOPT_HEADER,\u00a00);curl_setopt($ch2,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.php.net\/\");curl_setopt($ch2,\u00a0CURLOPT_HEADER,\u00a00);\/\/create\u00a0the\u00a0multiple\u00a0cURL\u00a0handle$mh\u00a0=\u00a0curl_multi_init();\/\/add\u00a0the\u00a0two\u00a0handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$active\u00a0=\u00a0null;\/\/execute\u00a0the\u00a0handlesdo\u00a0{\u00a0\u00a0\u00a0\u00a0$mrc\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);}\u00a0while\u00a0($mrc\u00a0==\u00a0CURLM_CALL_MULTI_PERFORM);while\u00a0($active\u00a0&&\u00a0$mrc\u00a0==\u00a0CURLM_OK)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(curl_multi_select($mh)\u00a0!=\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$mrc\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0while\u00a0($mrc\u00a0==\u00a0CURLM_CALL_MULTI_PERFORM);\u00a0\u00a0\u00a0\u00a0}}\/\/close\u00a0the\u00a0handlescurl_multi_remove_handle($mh,\u00a0$ch1);curl_multi_remove_handle($mh,\u00a0$ch2);curl_multi_close($mh);?>                         See Also            curl_init() - Initialize a cURL session     curl_multi_close() - Close a set of cURL handles"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-info-read.php","title":"curl_multi_info_read","description":"curl_multi_info_read   (PHP 5)curl_multi_info_read \u2014 Get information about the current transfers          Description       array curl_multi_info_read     ( resource $mh    [, int &$msgs_in_queue = NULL   ] )        Ask the multi handle if there are any messages or information from the individual transfers.     Messages may include information such as an error code from the transfer or just the fact     that a transfer is completed.             Repeated calls to this function will return a new result each time, until a FALSE is returned     as a signal that there is no more to get at this point. The integer pointed to with     msgs_in_queue will contain the number of remaining messages after this     function was called.      Warning         The data the returned resource points to will not survive calling      curl_multi_remove_handle().                 Parameters              mh  A cURL multi handle returned by curl_multi_init().              msgs_in_queue                      Number of messages that are still in the queue                                      Return Values       On success, returns an associative array for the message, FALSE on failure.               Contents of the returned array                          Key:        Value:                                    msg        The CURLMSG_DONE constant. Other return values        are currently not available.                       result        One of the CURLE_* constants. If everything is        OK, the CURLE_OK will be the result.                       handle        Resource of type curl indicates the handle which it concerns.                                    Examples            Example #1 A curl_multi_info_read() example       <?php$urls\u00a0=\u00a0array(\u00a0\u00a0\u00a0\"http:\/\/www.cnn.com\/\",\u00a0\u00a0\u00a0\"http:\/\/www.bbc.co.uk\/\",\u00a0\u00a0\u00a0\"http:\/\/www.yahoo.com\/\");$mh\u00a0=\u00a0curl_multi_init();foreach\u00a0($urls\u00a0as\u00a0$i\u00a0=>\u00a0$url)\u00a0{\u00a0\u00a0\u00a0\u00a0$conn[$i]\u00a0=\u00a0curl_init($url);\u00a0\u00a0\u00a0\u00a0curl_setopt($conn[$i],\u00a0CURLOPT_RETURNTRANSFER,\u00a01);\u00a0\u00a0\u00a0\u00a0curl_multi_add_handle($mh,\u00a0$conn[$i]);}do\u00a0{\u00a0\u00a0\u00a0\u00a0$status\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0curl_multi_info_read($mh);\u00a0\u00a0\u00a0\u00a0if\u00a0(false\u00a0!==\u00a0$info)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($info);\u00a0\u00a0\u00a0\u00a0}}\u00a0while\u00a0($status\u00a0===\u00a0CURLM_CALL_MULTI_PERFORM\u00a0||\u00a0$active);foreach\u00a0($urls\u00a0as\u00a0$i\u00a0=>\u00a0$url)\u00a0{\u00a0\u00a0\u00a0\u00a0$res[$i]\u00a0=\u00a0curl_multi_getcontent($conn[$i]);\u00a0\u00a0\u00a0\u00a0curl_close($conn[$i]);}var_dump(curl_multi_info_read($mh));?>             The above example will output something similar to:       array(3) {   [\"msg\"]=>   int(1)   [\"result\"]=>   int(0)   [\"handle\"]=>   resource(5) of type (curl) } array(3) {   [\"msg\"]=>   int(1)   [\"result\"]=>   int(0)   [\"handle\"]=>   resource(7) of type (curl) } array(3) {   [\"msg\"]=>   int(1)   [\"result\"]=>   int(0)   [\"handle\"]=>   resource(6) of type (curl) } bool(false)                       Changelog                                 Version        Description                                    5.2.0                 msgs_in_queue was added.                                             See Also            curl_multi_init() - Returns a new cURL multi handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-remove-handle.php","title":"curl_multi_remove_handle","description":"curl_multi_remove_handle   (PHP 5)curl_multi_remove_handle \u2014 Remove a multi handle from a set of cURL handles          Description       int curl_multi_remove_handle     ( resource $mh    , resource $ch    )        Removes a given ch handle from the given mh    handle. When the ch handle has been removed, it is again perfectly     legal to run curl_exec() on this handle.  Removing the ch handle while being     used, will effectively halt the transfer in progress involving that handle.            Parameters              mh  A cURL multi handle returned by curl_multi_init().        ch  A cURL handle returned by curl_init().                    Return Values       Returns 0 on success, or one of the CURLM_XXX error    codes.            See Also            curl_init() - Initialize a cURL session     curl_multi_init() - Returns a new cURL multi handle     curl_multi_add_handle() - Add a normal cURL handle to a cURL multi handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-version.php","title":"curl_version","description":"curl_version   (PHP 4 >= 4.0.2, PHP 5)curl_version \u2014 Gets cURL version information          Description       array curl_version     ([ int $age = CURLVERSION_NOW   ] )        Returns information about the cURL version.            Parameters                    age                                                   Return Values       Returns an associative array with the following elements:                               Indice        Value description                                    version_number        cURL 24 bit version number                       version        cURL version number, as a string                       ssl_version_number        OpenSSL 24 bit version number                       ssl_version        OpenSSL version number, as a string                       libz_version        zlib version number, as a string                       host        Information about the host where cURL was built                       age        \u00a0                       features        A bitmask of the CURL_VERSION_XXX constants                       protocols        An array of protocols names supported by cURL                                    Examples            Example #1 curl_version() example           This example will check which features that&#039;s available       in cURL build by using the &#039;features&#039; bitmask returned       by curl_version().            <?php\/\/\u00a0Get\u00a0curl\u00a0version\u00a0array$version\u00a0=\u00a0curl_version();\/\/\u00a0These\u00a0are\u00a0the\u00a0bitfields\u00a0that\u00a0can\u00a0be\u00a0used\u00a0\/\/\u00a0to\u00a0check\u00a0for\u00a0features\u00a0in\u00a0the\u00a0curl\u00a0build$bitfields\u00a0=\u00a0Array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'CURL_VERSION_IPV6',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'CURL_VERSION_KERBEROS4',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'CURL_VERSION_SSL',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'CURL_VERSION_LIBZ'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);foreach($bitfields\u00a0as\u00a0$feature){\u00a0\u00a0\u00a0\u00a0echo\u00a0$feature\u00a0.\u00a0($version['features']\u00a0&\u00a0constant($feature)\u00a0?\u00a0'\u00a0matches'\u00a0:\u00a0'\u00a0does\u00a0not\u00a0match');\u00a0\u00a0\u00a0\u00a0echo\u00a0PHP_EOL;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-setopt-array.php","title":"curl_setopt_array","description":"curl_setopt_array   (PHP 5 >= 5.1.3)curl_setopt_array \u2014 Set multiple options for a cURL transfer        Description       bool curl_setopt_array     ( resource $ch    , array $options    )        Sets multiple options for a cURL session. This function is    useful for setting a large amount of cURL options without repetitively    calling curl_setopt().            Parameters              ch  A cURL handle returned by curl_init().              options                      An array specifying which options to set and their values.        The keys should be valid curl_setopt() constants or        their integer equivalents.                                     Return Values       Returns TRUE if all options were successfully set. If an option could    not be successfully set, FALSE is immediately returned, ignoring any    future options in the options array.            Examples            Example #1       Initializing a new cURL session and fetching a web page            <?php\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource$ch\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options$options\u00a0=\u00a0array(CURLOPT_URL\u00a0=>\u00a0'http:\/\/www.example.com\/',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CURLOPT_HEADER\u00a0=>\u00a0false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);curl_setopt_array($ch,\u00a0$options);\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browsercurl_exec($ch);\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resourcescurl_close($ch);?>                      Prior to PHP 5.1.3 this function can be simulated with:               Example #2 Our own implementation of curl_setopt_array()       <?phpif\u00a0(!function_exists('curl_setopt_array'))\u00a0{\u00a0\u00a0\u00a0function\u00a0curl_setopt_array(&$ch,\u00a0$curl_options)\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach\u00a0($curl_options\u00a0as\u00a0$option\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!curl_setopt($ch,\u00a0$option,\u00a0$value))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0true;\u00a0\u00a0\u00a0}}?>                        Notes   Note:          As with curl_setopt(), passing an array to      CURLOPT_POST will encode the data as      multipart\/form-data, while passing a      URL-encoded string will encode the data as      application\/x-www-form-urlencoded.                See Also            curl_setopt() - Set an option for a cURL transfer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-select.php","title":"curl_multi_select","description":"curl_multi_select   (PHP 5)curl_multi_select \u2014 Wait for activity on any curl_multi connection          Description       int curl_multi_select     ( resource $mh    [, float $timeout = 1.0   ] )         Blocks until there is activity on any of the curl_multi connections.             Parameters              mh  A cURL multi handle returned by curl_multi_init().              timeout                      Time, in seconds, to wait for a response.                                      Return Values       On success, returns the number of descriptors contained in     the descriptor sets.  On failure, this function will return -1 on a select failure or timeout (from the underlying select system call).            See Also            curl_multi_init() - Returns a new cURL multi handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-fcntl.php","title":"dio_fcntl","description":"dio_fcntl   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_fcntl \u2014 Performs a c library fcntl on fd        Description       mixed dio_fcntl     ( resource $fd    , int $cmd    [, mixed $args   ] )        The dio_fcntl() function performs the    operation specified by cmd on the file    descriptor fd. Some commands require    additional arguments args to be supplied.           Parameters                    fd                      The file descriptor returned by dio_open().                                cmd                      Can be one of the following operations:                                      F_SETLK - Lock is set or cleared. If the lock           is held by someone else dio_fcntl() returns           -1.                                                 F_SETLKW - like F_SETLK,           but in case the lock is held by someone else,            dio_fcntl() waits until the lock is released.                                                 F_GETLK - dio_fcntl()            returns an associative array (as described above) if someone else           prevents lock. If there is no obstruction key \"type\" will set           to F_UNLCK.                                                 F_DUPFD - finds the lowest numbered available           file descriptor greater than or equal to args           and returns them.                                                 F_SETFL - Sets the file descriptors flags to            the value specified by args, which can be           O_APPEND, O_NONBLOCK or            O_ASYNC. To use O_ASYNC            you will need to use the PCNTL            extension.                                                           args                      args is an associative array, when        cmd is F_SETLK or        F_SETLLW, with the following keys:                                      \"start\" - offset where lock begins                                                 \"length\" - size of locked area. zero means to end of file                                                 \"wenth\" - Where l_start is relative to: can be            SEEK_SET,           SEEK_END and SEEK_CUR                                                 \"type\" - type of lock: can be F_RDLCK (read           lock), F_WRLCK (write lock) or            F_UNLCK (unlock)                                                               Return Values       Returns the result of the C call.           Examples            Example #1 Setting and clearing a lock       <?php$fd\u00a0=\u00a0dio_open('\/dev\/ttyS0',\u00a0O_RDWR);if\u00a0(dio_fcntl($fd,\u00a0F_SETLK,\u00a0Array(\"type\"=>F_WRLCK))\u00a0==\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\/\/\u00a0the\u00a0file\u00a0descriptor\u00a0appears\u00a0locked\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0lock\u00a0can\u00a0not\u00a0be\u00a0cleared.\u00a0It\u00a0is\u00a0held\u00a0by\u00a0someone\u00a0else.\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"Lock\u00a0succesfully\u00a0set\/cleared\";}dio_close($fd);?>                        Notes   Note: This function is not implemented on Windows platforms."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-close.php","title":"dio_close","description":"dio_close   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_close \u2014 Closes the file descriptor given by fd        Description       void dio_close     ( resource $fd    )        The function dio_close() closes the file descriptor    fd.           Parameters                    fd                      The file descriptor returned by dio_open().                                    Return Values       No value is returned.           Examples            Example #1 Closing an open file descriptor       <?php$fd\u00a0=\u00a0dio_open('\/dev\/ttyS0',\u00a0O_RDWR);dio_close($fd);?>                       See Also            dio_open() - Opens a file (creating it if necessary) at a lower level than the    C library input\/ouput stream functions allow."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-open.php","title":"dio_open","description":"dio_open   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_open \u2014     Opens a file (creating it if necessary) at a lower level than the    C library input\/ouput stream functions allow.           Description       resource dio_open     ( string $filename    , int $flags    [, int $mode = 0    ] )        dio_open() opens a file and returns a new file    descriptor for it.             Parameters                    filename                      The pathname of the file to open.                                flags                      The flags parameter is a bitwise-ORed        value comprising flags from the following list. This value        must include one of        O_RDONLY, O_WRONLY,        or O_RDWR. Additionally, it may include        any combination of the other flags from this list.                                      O_RDONLY - opens the file for read access.                                                 O_WRONLY - opens the file for write access.                                                 O_RDWR - opens the file for both reading and           writing.                                                 O_CREAT - creates the file, if it doesn&#039;t           already exist.                                                  O_EXCL - if both O_CREAT           and O_EXCL are set and the file already           exists, causes dio_open() to fail.                                                  O_TRUNC - if the file exists and is opened            for write access, the file will be truncated to zero length.                                                 O_APPEND - write operations write data at the           end of the file.                                                 O_NONBLOCK - sets non blocking mode.                                                 O_NOCTTY - prevent the OS from           assigning the opened file as the process&#039;s controlling           terminal when opening a TTY device file.                                                           mode                      If flags contains        O_CREAT, mode will        set the permissions of the file (creation        permissions). Mode is required for        correct operation when O_CREAT is        specified in mode and is ignored        otherwise.                      The actual permissions assigned to the created file will be        affected by the process&#039;s umask setting as        per usual.                                    Return Values       A file descriptor or FALSE on error.           Examples       Example #1 Opening a file descriptor      <?php$fd\u00a0=\u00a0dio_open('\/dev\/ttyS0',\u00a0O_RDWR\u00a0|\u00a0O_NOCTTY\u00a0|\u00a0O_NONBLOCK);dio_close($fd);?>                      See Also            dio_close() - Closes the file descriptor given by fd"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-read.php","title":"dio_read","description":"dio_read   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_read \u2014 Reads bytes from a file descriptor        Description       string dio_read     ( resource $fd    [, int $len = 1024   ] )        The function dio_read() reads and returns    len bytes from file with descriptor    fd.            Parameters                    fd                      The file descriptor returned by dio_open().                                len                      The number of bytes to read. If not specified,        dio_read() reads 1K sized block.                                    Return Values       The bytes read from fd.           See Also            dio_write() - Writes data to fd with optional truncation at length"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-setopt.php","title":"curl_setopt","description":"curl_setopt   (PHP 4 >= 4.0.2, PHP 5)curl_setopt \u2014 Set an option for a cURL transfer          Description       bool curl_setopt     ( resource $ch    , int $option    , mixed $value    )        Sets an option on the given cURL session handle.             Parameters              ch  A cURL handle returned by curl_init().              option                      The CURLOPT_XXX option to set.                                value                      The value to be set on option.                      value should be a bool for the        following values of the option parameter:                                                  Option            Set value to            Notes                                                        CURLOPT_AUTOREFERER                         TRUE to automatically set the Referer: field in             requests where it follows a Location: redirect.                                                                       CURLOPT_BINARYTRANSFER                         TRUE to return the raw output when             CURLOPT_RETURNTRANSFER is used.                                                                       CURLOPT_COOKIESESSION                         TRUE to mark this as a new cookie \"session\". It will force libcurl             to ignore all cookies it is about to load that are \"session cookies\"             from the previous session. By default, libcurl always stores and             loads all cookies, independent if they are session cookies or not.             Session cookies are cookies without expiry date and they are meant             to be alive and existing for this \"session\" only.                                                                       CURLOPT_CERTINFO                         TRUE to output SSL certification information to STDERR             on secure transfers.                                     Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be              on to have an effect.                                               CURLOPT_CRLF                         TRUE to convert Unix newlines to CRLF newlines             on transfers.                                                                       CURLOPT_DNS_USE_GLOBAL_CACHE                         TRUE to use a global DNS cache. This option is             not thread-safe and is enabled by default.                                                                       CURLOPT_FAILONERROR                         TRUE to fail silently if the HTTP code returned             is greater than or equal to 400. The default behavior is to return             the page normally, ignoring the code.                                                                       CURLOPT_FILETIME                         TRUE to attempt to retrieve the modification             date of the remote document. This value can be retrieved using             the CURLINFO_FILETIME option with             curl_getinfo().                                                                       CURLOPT_FOLLOWLOCATION                         TRUE to follow any             \"Location: \" header that the server sends as             part of the HTTP header (note this is recursive, PHP will follow as             many \"Location: \" headers that it is sent,             unless CURLOPT_MAXREDIRS is set).                                                                       CURLOPT_FORBID_REUSE                         TRUE to force the connection to explicitly             close when it has finished processing, and not be pooled for reuse.                                                                       CURLOPT_FRESH_CONNECT                         TRUE to force the use of a new connection             instead of a cached one.                                                                       CURLOPT_FTP_USE_EPRT                         TRUE to use EPRT (and LPRT) when doing active             FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT             only.                                                                       CURLOPT_FTP_USE_EPSV                         TRUE to first try an EPSV command for FTP             transfers before reverting back to PASV. Set to FALSE             to disable EPSV.                                                                       CURLOPT_FTPAPPEND                         TRUE to append to the remote file instead of             overwriting it.                                                                       CURLOPT_FTPASCII                         An alias of             CURLOPT_TRANSFERTEXT. Use that instead.                                                                       CURLOPT_FTPLISTONLY                         TRUE to only list the names of an FTP             directory.                                                                       CURLOPT_HEADER                         TRUE to include the header in the output.                                                                       CURLINFO_HEADER_OUT                         TRUE to track the handle&#039;s request string.                                     Available since PHP 5.1.3. The CURLINFO_             prefix is intentional.                                               CURLOPT_HTTPGET                         TRUE to reset the HTTP request method to GET.             Since GET is the default, this is only necessary if the request             method has been changed.                                                                       CURLOPT_HTTPPROXYTUNNEL                         TRUE to tunnel through a given HTTP proxy.                                                                       CURLOPT_MUTE                         TRUE to be completely silent with regards to             the cURL functions.                                                                       CURLOPT_NETRC                         TRUE to scan the ~\/.netrc             file to find a username and password for the remote site that             a connection is being established with.                                                                       CURLOPT_NOBODY                         TRUE to exclude the body from the output.             Request method is then set to HEAD. Changing this to FALSE does             not change it to GET.                                                                       CURLOPT_NOPROGRESS                         TRUE to disable the progress meter for cURL transfers.             Note:                              PHP automatically sets this option to TRUE, this should only be               changed for debugging purposes.                                                                                                   CURLOPT_NOSIGNAL                         TRUE to ignore any cURL function that causes a             signal to be sent to the PHP process. This is turned on by default             in multi-threaded SAPIs so timeout options can still be used.                                     Added in cURL 7.10.                                               CURLOPT_POST                         TRUE to do a regular HTTP POST. This POST is the             normal application\/x-www-form-urlencoded kind,             most commonly used by HTML forms.                                                                       CURLOPT_PUT                         TRUE to HTTP PUT a file. The file to PUT must             be set with CURLOPT_INFILE and             CURLOPT_INFILESIZE.                                                                       CURLOPT_RETURNTRANSFER                         TRUE to return the transfer as a string of the             return value of curl_exec() instead of outputting             it out directly.                                                                       CURLOPT_SSL_VERIFYPEER                         FALSE to stop cURL from verifying the peer&#039;s             certificate. Alternate certificates to verify against can be             specified with the CURLOPT_CAINFO option             or a certificate directory can be specified with the             CURLOPT_CAPATH option.                                     TRUE by default as of cURL 7.10. Default bundle installed as of             cURL 7.10.                                               CURLOPT_TRANSFERTEXT                         TRUE to use ASCII mode for FTP transfers.             For LDAP, it retrieves data in plain text instead of HTML. On             Windows systems, it will not set STDOUT to binary             mode.                                                                       CURLOPT_UNRESTRICTED_AUTH                         TRUE to keep sending the username and password             when following locations (using             CURLOPT_FOLLOWLOCATION), even when the             hostname has changed.                                                                       CURLOPT_UPLOAD                         TRUE to prepare for an upload.                                                                       CURLOPT_VERBOSE                         TRUE to output verbose information. Writes             output to STDERR, or the file specified using             CURLOPT_STDERR.                                                                                                  value should be an integer for the        following values of the option parameter:                                                  Option            Set value to            Notes                                                        CURLOPT_BUFFERSIZE                         The size of the buffer to use for each read. There is no guarantee             this request will be fulfilled, however.                                     Added in cURL 7.10.                                               CURLOPT_CLOSEPOLICY                         Either             CURLCLOSEPOLICY_LEAST_RECENTLY_USED or             CURLCLOSEPOLICY_OLDEST.             There are three other CURLCLOSEPOLICY_             constants, but cURL does not support them yet.                                                                       CURLOPT_CONNECTTIMEOUT                         The number of seconds to wait while trying to connect. Use 0 to             wait indefinitely.                                                                       CURLOPT_CONNECTTIMEOUT_MS                         The number of milliseconds to wait while trying to connect. Use 0 to             wait indefinitely.                          If libcurl is built to use the standard system name resolver, that             portion of the connect will still use full-second resolution for             timeouts with a minimum timeout allowed of one second.                                     Added in cURL 7.16.2. Available since PHP 5.2.3.                                               CURLOPT_DNS_CACHE_TIMEOUT                         The number of seconds to keep DNS entries in memory. This             option is set to 120 (2 minutes) by default.                                                                       CURLOPT_FTPSSLAUTH                         The FTP authentication method (when is activated):             CURLFTPAUTH_SSL (try SSL first),             CURLFTPAUTH_TLS (try TLS first), or             CURLFTPAUTH_DEFAULT (let cURL decide).                                     Added in cURL 7.12.2.                                               CURLOPT_HTTP_VERSION                         CURL_HTTP_VERSION_NONE (default, lets CURL             decide which version to use),             CURL_HTTP_VERSION_1_0 (forces HTTP\/1.0),             or CURL_HTTP_VERSION_1_1 (forces HTTP\/1.1).                                                                       CURLOPT_HTTPAUTH                                       The HTTP authentication method(s) to use. The options are:              CURLAUTH_BASIC,              CURLAUTH_DIGEST,              CURLAUTH_GSSNEGOTIATE,              CURLAUTH_NTLM,              CURLAUTH_ANY, and              CURLAUTH_ANYSAFE.                                        The bitwise | (or) operator can be used to combine              more than one method. If this is done, cURL will poll the server to see              what methods it supports and pick the best one.                                        CURLAUTH_ANY is an alias for              CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.                                        CURLAUTH_ANYSAFE is an alias for              CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.                                                                                    CURLOPT_INFILESIZE                         The expected size, in bytes, of the file when uploading a file to             a remote site. Note that using this option will not stop libcurl             from sending more data, as exactly what is sent depends on             CURLOPT_READFUNCTION.                                                                       CURLOPT_LOW_SPEED_LIMIT                         The transfer speed, in bytes per second, that the transfer should be             below during the count of CURLOPT_LOW_SPEED_TIME             seconds before PHP considers the transfer too slow and aborts.                                                                       CURLOPT_LOW_SPEED_TIME                         The number of seconds the transfer speed should be below             CURLOPT_LOW_SPEED_LIMIT before PHP considers             the transfer too slow and aborts.                                                                       CURLOPT_MAXCONNECTS                         The maximum amount of persistent connections that are allowed.             When the limit is reached,             CURLOPT_CLOSEPOLICY is used to determine             which connection to close.                                                                       CURLOPT_MAXREDIRS                         The maximum amount of HTTP redirections to follow. Use this option             alongside CURLOPT_FOLLOWLOCATION.                                                                       CURLOPT_PORT                         An alternative port number to connect to.                                                                       CURLOPT_PROTOCOLS                                       Bitmask of CURLPROTO_* values. If used, this bitmask               limits what protocols libcurl may use in the transfer. This allows you to have              a libcurl built to support a wide range of protocols but still limit specific              transfers to only be allowed to use a subset of them. By default libcurl will              accept all protocols it supports.               See also CURLOPT_REDIR_PROTOCOLS.                                        Valid protocol options are:               CURLPROTO_HTTP,              CURLPROTO_HTTPS,              CURLPROTO_FTP,              CURLPROTO_FTPS,              CURLPROTO_SCP,              CURLPROTO_SFTP,              CURLPROTO_TELNET,              CURLPROTO_LDAP,              CURLPROTO_LDAPS,              CURLPROTO_DICT,              CURLPROTO_FILE,              CURLPROTO_TFTP,              CURLPROTO_ALL                                                  Added in cURL 7.19.4.                                               CURLOPT_PROXYAUTH                         The HTTP authentication method(s) to use for the proxy connection.             Use the same bitmasks as described in             CURLOPT_HTTPAUTH. For proxy authentication,             only CURLAUTH_BASIC and             CURLAUTH_NTLM are currently supported.                                     Added in cURL 7.10.7.                                               CURLOPT_PROXYPORT                         The port number of the proxy to connect to. This port number can             also be set in CURLOPT_PROXY.                                                                       CURLOPT_PROXYTYPE                         Either CURLPROXY_HTTP (default) or             CURLPROXY_SOCKS5.                                     Added in cURL 7.10.                                               CURLOPT_REDIR_PROTOCOLS                         Bitmask of CURLPROTO_* values. If used, this bitmask             limits what protocols libcurl may use in a transfer that it follows to in             a redirect when CURLOPT_FOLLOWLOCATION is enabled.             This allows you to limit specific transfers to only be allowed to use a subset             of protocols in redirections. By default libcurl will allow all protocols             except for FILE and SCP. This is a difference compared to pre-7.19.4 versions             which unconditionally would follow to all protocols supported.              See also CURLOPT_PROTOCOLS for protocol constant values.                                     Added in cURL 7.19.4.                                               CURLOPT_RESUME_FROM                         The offset, in bytes, to resume a transfer from.                                                                       CURLOPT_SSL_VERIFYHOST                         1 to check the existence of a common name in the             SSL peer certificate. 2 to check the existence of             a common name and also verify that it matches the hostname             provided. In production environments the value of this option             should be kept at 2 (default value).                                                                       CURLOPT_SSLVERSION                         The SSL version (2 or 3) to use. By default PHP will try to determine             this itself, although in some cases this must be set manually.                                                                       CURLOPT_TIMECONDITION                         How CURLOPT_TIMEVALUE is treated.             Use CURL_TIMECOND_IFMODSINCE to return the             page only if it has been modified since the time specified in             CURLOPT_TIMEVALUE. If it hasn&#039;t been modified,             a \"304 Not Modified\" header will be returned             assuming CURLOPT_HEADER is TRUE.             Use CURL_TIMECOND_IFUNMODSINCE for the reverse             effect. CURL_TIMECOND_IFMODSINCE is the             default.                                                                       CURLOPT_TIMEOUT                         The maximum number of seconds to allow cURL functions to execute.                                                                       CURLOPT_TIMEOUT_MS                         The maximum number of milliseconds to allow cURL functions to             execute.                          If libcurl is built to use the standard system name resolver, that             portion of the connect will still use full-second resolution for             timeouts with a minimum timeout allowed of one second.                                     Added in cURL 7.16.2. Available since PHP 5.2.3.                                               CURLOPT_TIMEVALUE                         The time in seconds since January 1st, 1970. The time will be used             by CURLOPT_TIMECONDITION. By default,             CURL_TIMECOND_IFMODSINCE is used.                                                                       CURLOPT_MAX_RECV_SPEED_LARGE                         If a download exceeds this speed (counted in bytes per second) on             cumulative average during the transfer, the transfer will pause to             keep the average rate less than or equal to the parameter value.             Defaults to unlimited speed.                                     Added in cURL 7.15.5. Available since PHP 5.4.0.                                               CURLOPT_MAX_SEND_SPEED_LARGE                         If an upload exceeds this speed (counted in bytes per second) on             cumulative average during the transfer, the transfer will pause to             keep the average rate less than or equal to the parameter value.             Defaults to unlimited speed.                                     Added in cURL 7.15.5. Available since PHP 5.4.0.                                                                          value should be a string for the        following values of the option parameter:                                                  Option            Set value to            Notes                                                        CURLOPT_CAINFO                         The name of a file holding one or more certificates to verify the             peer with. This only makes sense when used in combination with             CURLOPT_SSL_VERIFYPEER.                                     Requires absolute path.                                               CURLOPT_CAPATH                         A directory that holds multiple CA certificates. Use this option             alongside CURLOPT_SSL_VERIFYPEER.                                                                       CURLOPT_COOKIE                         The contents of the \"Cookie: \" header to be             used in the HTTP request.             Note that multiple cookies are separated with a semicolon followed             by a space (e.g., \"fruit=apple; colour=red\")                                                                       CURLOPT_COOKIEFILE                         The name of the file containing the cookie data. The cookie file can             be in Netscape format, or just plain HTTP-style headers dumped into             a file.             If the name is an empty string, no cookies are loaded, but cookie             handling is still enabled.                                                                       CURLOPT_COOKIEJAR                         The name of a file to save all internal cookies to when the handle is closed,              e.g. after a call to curl_close.                                                                       CURLOPT_CUSTOMREQUEST                         A custom request method to use instead of             \"GET\" or \"HEAD\" when doing             a HTTP request. This is useful for doing             \"DELETE\" or other, more obscure HTTP requests.             Valid values are things like \"GET\",             \"POST\", \"CONNECT\" and so on;             i.e. Do not enter a whole HTTP request line here. For instance,             entering \"GET \/index.html HTTP\/1.0\\r\\n\\r\\n\"             would be incorrect.             Note:                              Don&#039;t do this without making sure the server supports the custom               request method first.                                                                                                   CURLOPT_EGDSOCKET                         Like CURLOPT_RANDOM_FILE, except a filename             to an Entropy Gathering Daemon socket.                                                                       CURLOPT_ENCODING                         The contents of the \"Accept-Encoding: \" header.             This enables decoding of the response. Supported encodings are             \"identity\", \"deflate\", and             \"gzip\". If an empty string, \"\",             is set, a header containing all supported encoding types is sent.                                     Added in cURL 7.10.                                               CURLOPT_FTPPORT                         The value which will be used to get the IP address to use             for the FTP \"POST\" instruction. The \"POST\" instruction tells             the remote server to connect to our specified IP address.  The             string may be a plain IP address, a hostname, a network             interface name (under Unix), or just a plain &#039;-&#039; to use the             systems default IP address.                                                                       CURLOPT_INTERFACE                         The name of the outgoing network interface to use. This can be an             interface name, an IP address or a host name.                                                                       CURLOPT_KRB4LEVEL                         The KRB4 (Kerberos 4) security level. Any of the following values             (in order from least to most powerful) are valid:             \"clear\",             \"safe\",             \"confidential\",             \"private\"..             If the string does not match one of these,             \"private\" is used. Setting this option to NULL             will disable KRB4 security. Currently KRB4 security only works             with FTP transactions.                                                                       CURLOPT_POSTFIELDS                                       The full data to post in a HTTP \"POST\" operation.              To post a file, prepend a filename with @ and              use the full path. The filetype can be explicitly specified by              following the filename with the type in the format              &#039;;type=mimetype&#039;. This parameter can either be              passed as a urlencoded string like &#039;para1=val1&para2=val2&...&#039;               or as an array with the field name as key and field data as value.              If value is an array, the              Content-Type header will be set to              multipart\/form-data.                                        As of PHP 5.2.0, value must be an array if              files are passed to this option with the @ prefix.                                                                                    CURLOPT_PROXY                         The HTTP proxy to tunnel requests through.                                                                       CURLOPT_PROXYUSERPWD                         A username and password formatted as             \"[username]:[password]\" to use for the             connection to the proxy.                                                                       CURLOPT_RANDOM_FILE                         A filename to be used to seed the random number generator for SSL.                                                                       CURLOPT_RANGE                         Range(s) of data to retrieve in the format             \"X-Y\" where X or Y are optional. HTTP transfers             also support several intervals, separated with commas in the format             \"X-Y,N-M\".                                                                       CURLOPT_REFERER                         The contents of the \"Referer: \" header to be used             in a HTTP request.                                                                       CURLOPT_SSL_CIPHER_LIST                         A list of ciphers to use for SSL. For example,             RC4-SHA and TLSv1 are valid             cipher lists.                                                                       CURLOPT_SSLCERT                         The name of a file containing a PEM formatted certificate.                                                                       CURLOPT_SSLCERTPASSWD                         The password required to use the             CURLOPT_SSLCERT certificate.                                                                       CURLOPT_SSLCERTTYPE                         The format of the certificate. Supported formats are             \"PEM\" (default), \"DER\",             and \"ENG\".                                     Added in cURL 7.9.3.                                               CURLOPT_SSLENGINE                         The identifier for the crypto engine of the private SSL key             specified in CURLOPT_SSLKEY.                                                                       CURLOPT_SSLENGINE_DEFAULT                         The identifier for the crypto engine used for asymmetric crypto             operations.                                                                       CURLOPT_SSLKEY                         The name of a file containing a private SSL key.                                                                       CURLOPT_SSLKEYPASSWD                         The secret password needed to use the private SSL key specified in             CURLOPT_SSLKEY.             Note:                              Since this option contains a sensitive password, remember to keep               the PHP script it is contained within safe.                                                                                                   CURLOPT_SSLKEYTYPE                         The key type of the private SSL key specified in             CURLOPT_SSLKEY. Supported key types are             \"PEM\" (default), \"DER\",             and \"ENG\".                                                                       CURLOPT_URL                         The URL to fetch. This can also be set when initializing a             session with curl_init().                                                                       CURLOPT_USERAGENT                         The contents of the \"User-Agent: \" header to be             used in a HTTP request.                                                                       CURLOPT_USERPWD                         A username and password formatted as             \"[username]:[password]\" to use for the             connection.                                                                                                  value should be an array for the        following values of the option parameter:                                                  Option            Set value to            Notes                                                        CURLOPT_HTTP200ALIASES                         An array of HTTP 200 responses that will be treated as valid             responses and not as errors.                                     Added in cURL 7.10.3.                                               CURLOPT_HTTPHEADER                         An array of HTTP header fields to set, in the format                           array(&#039;Content-type: text\/plain&#039;, &#039;Content-length: 100&#039;)                                                                                    CURLOPT_POSTQUOTE                         An array of FTP commands to execute on the server after the FTP             request has been performed.                                                                       CURLOPT_QUOTE                         An array of FTP commands to execute on the server prior to the FTP             request.                                                                                                  value should be a stream resource (using        fopen(), for example) for the following values of the        option parameter:                                                  Option            Set value to                                                        CURLOPT_FILE                         The file that the transfer should be written to. The default             is STDOUT (the browser window).                                               CURLOPT_INFILE                         The file that the transfer should be read from when uploading.                                               CURLOPT_STDERR                         An alternative location to output errors to instead of             STDERR.                                               CURLOPT_WRITEHEADER                         The file that the header part of the transfer is written to.                                                                          value should be a string that is the name of a valid        callback function for the following values of the        option parameter:                                                  Option            Set value to                                                        CURLOPT_HEADERFUNCTION                         The name of a callback function where the callback function takes             two parameters. The first is the cURL resource, the second is a             string with the header data to be written. The header data must             be written when using this callback function. Return the number of              bytes written.                                               CURLOPT_PASSWDFUNCTION                         The name of a callback function where the callback function takes             three parameters. The first is the cURL resource, the second is a             string containing a password prompt, and the third is the maximum             password length. Return the string containing the password.                                               CURLOPT_PROGRESSFUNCTION                         The name of a callback function where the callback function takes             three parameters. The first is the cURL resource, the second is a             file-descriptor resource, and the third is length. Return the             string containing the data.                                               CURLOPT_READFUNCTION                         The name of a callback function where the callback function takes             three parameters. The first is the cURL resource, the second is a             stream resource provided to cURL through the option             CURLOPT_INFILE, and the third is the maximum             amount of data to be read. The callback function must return a string             with a length equal or smaller than the amount of data requested,             typically by reading it from the passed stream resource. It should             return an empty string to signal EOF.                                               CURLOPT_WRITEFUNCTION                         The name of a callback function where the callback function takes             two parameters. The first is the cURL resource, and the second is a             string with the data to be written. The data must be saved by using             this callback function. It must return the exact number of bytes written              or the transfer will be aborted with an error.                                                                                          Return Values       Returns TRUE on success or FALSE on failure.             Changelog                                 Version        Description                                    5.2.10                 Introduced CURLOPT_PROTOCOLS, and         CURLOPT_REDIR_PROTOCOLS.                               5.1.0                 Introduced CURLOPT_AUTOREFERER,         CURLOPT_BINARYTRANSFER,         CURLOPT_FTPSSLAUTH,         CURLOPT_PROXYAUTH, and         CURLOPT_TIMECONDITION.                               5.0.0                 Introduced CURLOPT_FTP_USE_EPRT,         CURLOPT_NOSIGNAL,         CURLOPT_UNRESTRICTED_AUTH,         CURLOPT_BUFFERSIZE,         CURLOPT_HTTPAUTH,         CURLOPT_PROXYPORT,         CURLOPT_PROXYTYPE,         CURLOPT_SSLCERTTYPE, and         CURLOPT_HTTP200ALIASES.                                             Examples            Example #1 Initializing a new cURL session and fetching a web page       <?php\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource$ch\u00a0=\u00a0curl_init();\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0optionscurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");curl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a0false);\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browsercurl_exec($ch);\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resourcescurl_close($ch);?>                           Example #2 Uploading file       <?php\/*\u00a0http:\/\/localhost\/upload.php:print_r($_POST);print_r($_FILES);*\/$ch\u00a0=\u00a0curl_init();$data\u00a0=\u00a0array('name'\u00a0=>\u00a0'Foo',\u00a0'file'\u00a0=>\u00a0'@\/home\/user\/test.png');curl_setopt($ch,\u00a0CURLOPT_URL,\u00a0'http:\/\/localhost\/upload.php');curl_setopt($ch,\u00a0CURLOPT_POST,\u00a01);curl_setopt($ch,\u00a0CURLOPT_POSTFIELDS,\u00a0$data);curl_exec($ch);?>             The above example will output:       Array (     [name] => Foo ) Array (     [file] => Array         (             [name] => test.png             [type] => image\/png             [tmp_name] => \/tmp\/phpcpjNeQ             [error] => 0             [size] => 279         )  )                        Notes   Note:          Passing an array to CURLOPT_POSTFIELDS will      encode the data as multipart\/form-data,     while passing a URL-encoded string will encode the data as     application\/x-www-form-urlencoded.                 See Also            curl_setopt_array() - Set multiple options for a cURL transfer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-stat.php","title":"dio_stat","description":"dio_stat   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_stat \u2014     Gets stat information about the file descriptor fd           Description       array dio_stat     ( resource $fd    )        dio_stat() returns information about the given file    descriptor.           Parameters                    fd                      The file descriptor returned by dio_open().                                    Return Values       Returns an associative array with the following keys:                      \"device\" - device                             \"inode\" - inode                             \"mode\" - mode                             \"nlink\" - number of hard links                             \"uid\" - user id                             \"gid\" - group id                             \"device_type\" - device type (if inode device)                             \"size\" - total size in bytes                             \"blocksize\" - blocksize                             \"blocks\" - number of blocks allocated                             \"atime\" - time of last access                             \"mtime\" - time of last modification                             \"ctime\" - time of last change                   On error dio_stat() returns NULL."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-seek.php","title":"dio_seek","description":"dio_seek   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_seek \u2014 Seeks to pos on fd from whence        Description       int dio_seek     ( resource $fd    , int $pos    [, int $whence = SEEK_SET   ] )        The function dio_seek() is used to change the    file position of the given file descriptor.             Parameters                    fd                      The file descriptor returned by dio_open().                                pos                      The new position.                                whence                      Specifies how the position pos should be         interpreted:                                      SEEK_SET (default) - specifies that            pos is specified from the beginning of the            file.                                                 SEEK_CUR - Specifies that            pos is a count of characters from the current           file position. This count may be positive or negative.                                                 SEEK_END - Specifies that            pos is a count of characters from the end of           the file. A negative count specifies a position within the current            extent of the file; a positive count specifies a position past the            current end. If you set the position past the current end, and            actually write data, you will extend the file with zeros up to that           position.                                                               Return Values              Examples            Example #1 Positioning in a file       <?php$fd\u00a0=\u00a0dio_open('\/dev\/ttyS0',\u00a0O_RDWR);dio_seek($fd,\u00a010,\u00a0SEEK_SET);\/\/\u00a0position\u00a0is\u00a0now\u00a0at\u00a010\u00a0characters\u00a0from\u00a0the\u00a0start\u00a0of\u00a0the\u00a0filedio_seek($fd,\u00a0-2,\u00a0SEEK_CUR);\/\/\u00a0position\u00a0is\u00a0now\u00a0at\u00a08\u00a0characters\u00a0from\u00a0the\u00a0start\u00a0of\u00a0the\u00a0filedio_seek($fd,\u00a0-5,\u00a0SEEK_END);\/\/\u00a0position\u00a0is\u00a0now\u00a0at\u00a05\u00a0characters\u00a0from\u00a0the\u00a0end\u00a0of\u00a0the\u00a0filedio_seek($fd,\u00a010,\u00a0SEEK_END);\/\/\u00a0position\u00a0is\u00a0now\u00a0at\u00a010\u00a0characters\u00a0past\u00a0the\u00a0end\u00a0of\u00a0the\u00a0file.\u00a0\/\/\u00a0The\u00a010\u00a0characters\u00a0between\u00a0the\u00a0end\u00a0of\u00a0the\u00a0file\u00a0and\u00a0the\u00a0current\/\/\u00a0position\u00a0are\u00a0filled\u00a0with\u00a0zeros.dio_close($fd);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-truncate.php","title":"dio_truncate","description":"dio_truncate   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_truncate \u2014     Truncates file descriptor fd to offset bytes            Description       bool dio_truncate     ( resource $fd    , int $offset    )        dio_truncate() truncates a file to at most     offset bytes in size.          If the file previously was larger than this size, the extra data is     lost. If the file previously was shorter, it is unspecified whether the    file is left unchanged or is extended. In the latter case the extended     part reads as zero bytes.           Parameters                    fd                      The file descriptor returned by dio_open().                                offset                      The offset in bytes.                                    Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: This function is not implemented on Windows platforms."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-tcsetattr.php","title":"dio_tcsetattr","description":"dio_tcsetattr   (PHP 4 >= 4.3.0, PHP 5 <= 5.0.5)dio_tcsetattr \u2014     Sets terminal attributes and baud rate for a serial port           Description       bool dio_tcsetattr     ( resource $fd    , array $options    )        dio_tcsetattr() sets the terminal attributes and baud    rate of the open fd.           Parameters                    fd                      The file descriptor returned by dio_open().                                options                      The currently available options are:                                       &#039;baud&#039; - baud rate of the port - can be 38400,19200,9600,4800,2400,1800,           1200,600,300,200,150,134,110,75 or 50, default value is 9600.                                                 &#039;bits&#039; - data bits - can be 8,7,6 or 5. Default value is 8.                                                 &#039;stop&#039; - stop bits - can be 1 or 2. Default value is 1.                                                 &#039;parity&#039; - can be 0,1 or 2. Default value is 0.                                                               Return Values       No value is returned.           Examples            Example #1 Setting the baud rate on a serial port       <?php$fd\u00a0=\u00a0dio_open('\/dev\/ttyS0',\u00a0O_RDWR\u00a0|\u00a0O_NOCTTY\u00a0|\u00a0O_NONBLOCK);dio_fcntl($fd,\u00a0F_SETFL,\u00a0O_SYNC);dio_tcsetattr($fd,\u00a0array(\u00a0\u00a0'baud'\u00a0=>\u00a09600,\u00a0\u00a0'bits'\u00a0=>\u00a08,\u00a0\u00a0'stop'\u00a0\u00a0=>\u00a01,\u00a0\u00a0'parity'\u00a0=>\u00a00));\u00a0while\u00a0(1)\u00a0{\u00a0\u00a0$data\u00a0=\u00a0dio_read($fd,\u00a0256);\u00a0\u00a0if\u00a0($data)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$data;\u00a0\u00a0}}\u00a0?>                        Notes   Note: This function is not implemented on Windows platforms."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-write.php","title":"dio_write","description":"dio_write   (PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)dio_write \u2014     Writes data to fd with optional truncation at length            Description       int dio_write     ( resource $fd    , string $data    [, int $len = 0   ] )        dio_write() writes up to len     bytes from data to file fd.            Parameters                    fd                      The file descriptor returned by dio_open().                                data                      The written data.                                len                      The length of data to write in bytes. If not specified, the         function writes all the data to the specified file.                                    Return Values       Returns the number of bytes written to fd.           See Also            dio_read() - Reads bytes from a file descriptor"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chdir.php","title":"chdir","description":"chdir   (PHP 4, PHP 5)chdir \u2014 Change directory         Description       bool chdir     ( string $directory    )        Changes PHP&#039;s current directory to     directory.            Parameters                    directory                      The new current directory                                     Return Values       Returns TRUE on success or FALSE on failure.             Errors\/Exceptions       Throws an error of level E_WARNING on failure.             Examples            Example #1 chdir() example       <?php\/\/\u00a0current\u00a0directoryecho\u00a0getcwd()\u00a0.\u00a0\"\\n\";chdir('public_html');\/\/\u00a0current\u00a0directoryecho\u00a0getcwd()\u00a0.\u00a0\"\\n\";?>             The above example will output something similar to:       \/home\/vincent \/home\/vincent\/public_html                      Notes   Note: When safe mode is enabled, PHP checks whether the directory in which the script is operating has the same UID (owner) as the script that is being executed.         See Also            getcwd() - Gets the current working directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chroot.php","title":"chroot","description":"chroot   (PHP 4 >= 4.0.5, PHP 5)chroot \u2014 Change the root directory         Description       bool chroot     ( string $directory    )        Changes the root directory of the current process to    directory, and changes the current    working directory to \"\/\".          This function is only available to GNU and BSD systems, and    only when using the CLI, CGI or Embed SAPI. Also, this function    requires root privileges.            Parameters                    directory                      The path to change the root directory to.                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples       Example #1 chroot() example       <?phpchroot(\"\/path\/to\/your\/chroot\/\");echo\u00a0getcwd();?>             The above example will output:       \/                      Notes   Note: This function is not implemented on Windows platforms."},{"url":"http:\/\/www.php.net\/manual\/en\/function.closedir.php","title":"closedir","description":"closedir   (PHP 4, PHP 5)closedir \u2014 Close directory handle         Description       void closedir     ([ resource $dir_handle   ] )        Closes the directory stream indicated by    dir_handle. The stream must have previously    been opened by opendir().            Parameters                    dir_handle                      The directory handle resource previously opened        with opendir(). If the directory handle is         not specified, the last link opened by opendir()         is assumed.                                     Examples            Example #1 closedir() example       <?php$dir\u00a0=\u00a0\"\/etc\/php5\/\";\/\/\u00a0Open\u00a0a\u00a0known\u00a0directory,\u00a0read\u00a0directory\u00a0into\u00a0variable\u00a0and\u00a0then\u00a0closeif\u00a0(is_dir($dir))\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($dh\u00a0=\u00a0opendir($dir))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$directory\u00a0=\u00a0readdir($dh);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0closedir($dh);\u00a0\u00a0\u00a0\u00a0}}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rewinddir.php","title":"rewinddir","description":"rewinddir   (PHP 4, PHP 5)rewinddir \u2014 Rewind directory handle         Description       void rewinddir     ([ resource $dir_handle   ] )        Resets the directory stream indicated by    dir_handle to the beginning of the    directory.            Parameters                    dir_handle                      The directory handle resource previously opened        with opendir(). If the directory handle is         not specified, the last link opened by opendir()         is assumed."},{"url":"http:\/\/www.php.net\/manual\/en\/function.getcwd.php","title":"getcwd","description":"getcwd   (PHP 4, PHP 5)getcwd \u2014 Gets the current working directory         Description       string getcwd     ( void    )        Gets the current working directory.            Return Values       Returns the current working directory on success, or FALSE on    failure.           On some Unix variants, getcwd() will return    FALSE if any one of the parent directories does not have the    readable or search mode set, even if the current directory    does. See chmod() for more information on    modes and permissions.             Examples            Example #1 getcwd() example        <?php\/\/\u00a0current\u00a0directoryecho\u00a0getcwd()\u00a0.\u00a0\"\\n\";chdir('cvs');\/\/\u00a0current\u00a0directoryecho\u00a0getcwd()\u00a0.\u00a0\"\\n\";?>               The above example will output something similar to:        \/home\/didou \/home\/didou\/cvs                       See Also            chdir() - Change directory     chmod() - Changes file mode"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readdir.php","title":"readdir","description":"readdir   (PHP 4, PHP 5)readdir \u2014 Read entry from directory handle         Description       string readdir     ([ resource $dir_handle   ] )        Returns the name of the next entry in the directory. The    entries are returned in the order in which they are stored by    the filesystem.            Parameters                    dir_handle                      The directory handle resource previously opened        with opendir(). If the directory handle is         not specified, the last link opened by opendir()         is assumed.                                     Return Values       Returns the entry name on success or FALSE on failure.       WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples            Example #1 List all entries in a directory           Please note the fashion in which readdir()&#039;s      return value is checked in the examples below. We are explicitly      testing whether the return value is identical to (equal to and of      the same type as--see Comparison      Operators for more information) FALSE since otherwise,      any directory entry whose name evaluates to FALSE will stop the      loop (e.g. a directory named \"0\").            <?phpif\u00a0($handle\u00a0=\u00a0opendir('\/path\/to\/files'))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Directory\u00a0handle:\u00a0$handle\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Entries:\\n\";\u00a0\u00a0\u00a0\u00a0\/*\u00a0This\u00a0is\u00a0the\u00a0correct\u00a0way\u00a0to\u00a0loop\u00a0over\u00a0the\u00a0directory.\u00a0*\/\u00a0\u00a0\u00a0\u00a0while\u00a0(false\u00a0!==\u00a0($entry\u00a0=\u00a0readdir($handle)))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$entry\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/*\u00a0This\u00a0is\u00a0the\u00a0WRONG\u00a0way\u00a0to\u00a0loop\u00a0over\u00a0the\u00a0directory.\u00a0*\/\u00a0\u00a0\u00a0\u00a0while\u00a0($entry\u00a0=\u00a0readdir($handle))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$entry\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0closedir($handle);}?>                           Example #2       List all entries in the current directory and strip out .      and ..            <?phpif\u00a0($handle\u00a0=\u00a0opendir('.'))\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0(false\u00a0!==\u00a0($entry\u00a0=\u00a0readdir($handle)))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($entry\u00a0!=\u00a0\".\"\u00a0&&\u00a0$entry\u00a0!=\u00a0\"..\")\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$entry\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0closedir($handle);}?>                        See Also            is_dir() - Tells whether the filename is a directory     glob() - Find pathnames matching a pattern     opendir() - Open directory handle     scandir() - List files and directories inside the specified path"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dotnet-load.php","title":"dotnet_load","description":"dotnet_load   (PHP 4)dotnet_load \u2014 Loads a DOTNET module        Description       int dotnet_load     ( string $assembly_name    [, string $datatype_name    [, int $codepage   ]] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available.          Changelog                                 Version        Description                                    4.1.0                 The codepage parameter was added"},{"url":"http:\/\/www.php.net\/manual\/en\/function.opendir.php","title":"opendir","description":"opendir   (PHP 4, PHP 5)opendir \u2014 Open directory handle         Description       resource opendir     ( string $path    [, resource $context   ] )        Opens up a directory handle to be used in subsequent    closedir(), readdir(), and    rewinddir() calls.            Parameters                    path                      The directory path that is to be opened                                context                      For a description of the context parameter,         refer to the streams section of        the manual.                                      Return Values       Returns a directory handle resource on success, or    FALSE on failure.           If path is not a valid directory or the    directory can not be opened due to permission restrictions or    filesystem errors, opendir() returns FALSE and    generates a PHP error of level     E_WARNING.  You can suppress the error output of    opendir() by prepending    &#039;@&#039; to the    front of the function name.            Changelog                                 Version        Description                                    5.0.0                 path supports the ftp:\/\/          URL wrapper.                               4.3.0                 path can also be any URL which supports          directory listing, however only the file:\/\/         URL wrapper supports this in PHP 4                                            Examples            Example #1 opendir() example       <?php$dir\u00a0=\u00a0\"\/etc\/php5\/\";\/\/\u00a0Open\u00a0a\u00a0known\u00a0directory,\u00a0and\u00a0proceed\u00a0to\u00a0read\u00a0its\u00a0contentsif\u00a0(is_dir($dir))\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($dh\u00a0=\u00a0opendir($dir))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while\u00a0(($file\u00a0=\u00a0readdir($dh))\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"filename:\u00a0$file\u00a0:\u00a0filetype:\u00a0\"\u00a0.\u00a0filetype($dir\u00a0.\u00a0$file)\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0closedir($dh);\u00a0\u00a0\u00a0\u00a0}}?>             The above example will output something similar to:       filename: . : filetype: dir filename: .. : filetype: dir filename: apache : filetype: dir filename: cgi : filetype: dir filename: cli : filetype: dir                      See Also            is_dir() - Tells whether the filename is a directory     readdir() - Read entry from directory handle     Dir"},{"url":"http:\/\/www.php.net\/manual\/en\/function.scandir.php","title":"scandir","description":"scandir   (PHP 5)scandir \u2014 List files and directories inside the specified path         Description       array scandir     ( string $directory    [, int $sorting_order = SCANDIR_SORT_ASCENDING    [, resource $context   ]] )        Returns an array of files and directories from the    directory.             Parameters                    directory                      The directory that will be scanned.                                sorting_order                      By default, the sorted order is alphabetical in ascending order.  If        the optional sorting_order is set to        SCANDIR_SORT_DESCENDING, then the sort order is        alphabetical in descending order. If it is set to        SCANDIR_SORT_NONE then the result is unsorted.                                context                      For a description of the context parameter,         refer to the streams section of        the manual.                                      Return Values       Returns an array of filenames on success, or FALSE on     failure. If directory is not a directory, then     boolean FALSE is returned, and an error of level     E_WARNING is generated.             Changelog                                 Version        Description                                    5.4.0                 sorting_order now accepts constants. Any         nonzero value caused descending order in previous versions.                                            Examples            Example #1 A simple scandir() example       <?php$dir\u00a0\u00a0\u00a0\u00a0=\u00a0'\/tmp';$files1\u00a0=\u00a0scandir($dir);$files2\u00a0=\u00a0scandir($dir,\u00a01);print_r($files1);print_r($files2);?>             The above example will output something similar to:       Array (     [0] => .     [1] => ..     [2] => bar.php     [3] => foo.txt     [4] => somedir ) Array (     [0] => somedir     [1] => foo.txt     [2] => bar.php     [3] => ..     [4] => . )                         Example #2 PHP 4 alternatives to scandir()       <?php$dir\u00a0=\u00a0\"\/tmp\";$dh\u00a0\u00a0=\u00a0opendir($dir);while\u00a0(false\u00a0!==\u00a0($filename\u00a0=\u00a0readdir($dh)))\u00a0{\u00a0\u00a0\u00a0\u00a0$files[]\u00a0=\u00a0$filename;}sort($files);print_r($files);rsort($files);print_r($files);?>             The above example will output something similar to:       Array (     [0] => .     [1] => ..     [2] => bar.php     [3] => foo.txt     [4] => somedir ) Array (     [0] => somedir     [1] => foo.txt     [2] => bar.php     [3] => ..     [4] => . )                      Notes   TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.         See Also            opendir() - Open directory handle     readdir() - Read entry from directory handle     glob() - Find pathnames matching a pattern     is_dir() - Tells whether the filename is a directory     sort() - Sort an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.debug-print-backtrace.php","title":"debug_print_backtrace","description":"debug_print_backtrace     (PHP 5)debug_print_backtrace \u2014       Prints a backtrace                      Description           void debug_print_backtrace       ([ int $options = 0      [, int $limit = 0     ]] )            debug_print_backtrace() prints a PHP backtrace. It      prints the function calls, included\/required files and      eval()ed stuff.                Parameters                    options                      As of 5.3.6, this parameter is a bitmask for the following options:                 debug_print_backtrace() options                                          DEBUG_BACKTRACE_IGNORE_ARGS                         Whether or not to omit the \"args\" index, and thus all the function\/method arguments,             to save memory.                                                                                    limit                      As of 5.4.0, this parameter can be used to limit the number of stack frames printed.        By default (limit=0) it prints all stack frames.                                         Return Values           No value is returned.                Changelog                                 Version        Description                                    5.4.0                 Added the optional parameter limit.                               5.3.6                 Added the optional parameter options.                                                Examples                  Example #1 debug_print_backtrace() example         <?php\/\/\u00a0include.php\u00a0filefunction\u00a0a()\u00a0{\u00a0\u00a0\u00a0\u00a0b();}function\u00a0b()\u00a0{\u00a0\u00a0\u00a0\u00a0c();}function\u00a0c(){\u00a0\u00a0\u00a0\u00a0debug_print_backtrace();}a();?>                   <?php\/\/\u00a0test.php\u00a0file\/\/\u00a0this\u00a0is\u00a0the\u00a0file\u00a0you\u00a0should\u00a0runinclude\u00a0'include.php';?>               The above example will output something similar to:        #0  c() called at [\/tmp\/include.php:10] #1  b() called at [\/tmp\/include.php:6] #2  a() called at [\/tmp\/include.php:17] #3  include(\/tmp\/include.php) called at [\/tmp\/test.php:3]                            See Also               debug_backtrace() - Generates a backtrace"},{"url":"http:\/\/www.php.net\/manual\/en\/function.error-get-last.php","title":"error_get_last","description":"error_get_last   (PHP 5 >= 5.2.0)error_get_last \u2014 Get the last occurred error        Description       array error_get_last     ( void    )        Gets information about the last error that occurred.            Return Values       Returns an associative array describing the last error with keys \"type\",    \"message\", \"file\" and \"line\". If the error has been caused by a PHP    internal function then the \"message\" begins with its name.    Returns NULL if there hasn&#039;t been an error yet.            Examples            Example #1 An error_get_last() example       <?phpecho\u00a0$a;print_r(error_get_last());?>             The above example will output something similar to:       Array (     [type] => 8     [message] => Undefined variable: a     [file] => C:\\WWW\\index.php     [line] => 2 )                      See Also            Error constants     Variable $php_errormsg     Directive display_errors     Directive html_errors     Directive xmlrpc_errors"},{"url":"http:\/\/www.php.net\/manual\/en\/function.debug-backtrace.php","title":"debug_backtrace","description":"debug_backtrace   (PHP 4 >= 4.3.0, PHP 5)debug_backtrace \u2014 Generates a backtrace          Description       array debug_backtrace     ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT    [, int $limit = 0   ]] )        debug_backtrace() generates a PHP backtrace.             Parameters                    options                      As of 5.3.6, this parameter is a bitmask for the following options:                 debug_backtrace() options                                          DEBUG_BACKTRACE_PROVIDE_OBJECT                         Whether or not to populate the \"object\" index.                                               DEBUG_BACKTRACE_IGNORE_ARGS                         Whether or not to omit the \"args\" index, and thus all the function\/method arguments,             to save memory.                                                            Before 5.3.6, the only values recognized are TRUE or FALSE, which are the same as         setting or not setting the DEBUG_BACKTRACE_PROVIDE_OBJECT option respectively.                                limit                      As of 5.4.0, this parameter can be used to limit the number of stack frames returned.        By default (limit=0) it returns all stack frames.                                      Return Values       Returns an array of associative arrays. The possible returned elements    are as follows:               Possible returned elements from debug_backtrace()                          Name        Type        Description                                    function        string                 The current function name.  See also         __FUNCTION__.                               line        integer                 The current line number.  See also         __LINE__.                               file        string                 The current file name.  See also         __FILE__.                               class        string                 The current class name.  See also         __CLASS__                               object        object                 The current object.                               type        string                 The current call type. If a method call, \"->\" is returned. If a static         method call, \"::\" is returned. If a function call, nothing is returned.                               args        array                 If inside a function, this lists the functions arguments.  If         inside an included file, this lists the included file name(s).                                             Changelog                                 Version        Description                                    5.4.0                 Added the optional parameter limit.                               5.3.6                 The parameter provide_object changed to options and additional option         DEBUG_BACKTRACE_IGNORE_ARGS is added.                               5.2.5                 Added the optional parameter provide_object.                               5.1.1                 Added the current object as a possible return element.                                             Examples            Example #1 debug_backtrace() example       <?php\/\/\u00a0filename:\u00a0\/tmp\/a.phpfunction\u00a0a_test($str){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\nHi:\u00a0$str\";\u00a0\u00a0\u00a0\u00a0var_dump(debug_backtrace());}a_test('friend');?><?php\/\/\u00a0filename:\u00a0\/tmp\/b.phpinclude_once\u00a0'\/tmp\/a.php';?>                   Results similar to the following when executing      \/tmp\/b.php:            Hi: friend array(2) { [0]=> array(4) {     [\"file\"] => string(10) \"\/tmp\/a.php\"     [\"line\"] => int(10)     [\"function\"] => string(6) \"a_test\"     [\"args\"]=>     array(1) {       [0] => &string(6) \"friend\"     } } [1]=> array(4) {     [\"file\"] => string(10) \"\/tmp\/b.php\"     [\"line\"] => int(2)     [\"args\"] =>     array(1) {       [0] => string(10) \"\/tmp\/a.php\"     }     [\"function\"] => string(12) \"include_once\"   } }                       See Also            trigger_error() - Generates a user-level error\/warning\/notice message     debug_print_backtrace() - Prints a backtrace"},{"url":"http:\/\/www.php.net\/manual\/en\/function.error-log.php","title":"error_log","description":"error_log   (PHP 4, PHP 5)error_log \u2014 Send an error message somewhere         Description       bool error_log     ( string $message    [, int $message_type = 0    [, string $destination    [, string $extra_headers   ]]] )        Sends an error message to the web server&#039;s error log or to a file.            Parameters                    message                      The error message that should be logged.                                message_type                      Says where the error should go. The possible message types are as         follows:                               error_log() log types                                          0                         message is sent to PHP&#039;s system logger, using             the Operating System&#039;s system logging mechanism or a file, depending             on what the error_log             configuration directive is set to.  This is the default option.                                               1                         message is sent by email to the address in             the destination parameter.  This is the only             message type where the fourth parameter,             extra_headers is used.                                               2                         No longer an option.                                               3                         message is appended to the file             destination. A newline is not automatically              added to the end of the message string.                                               4                        message is sent directly to the SAPI logging            handler.                                                                                    destination                      The destination. Its meaning depends on the         message_type parameter as described above.                                extra_headers                      The extra headers. It&#039;s used when the message_type        parameter is set to 1.        This message type uses the same internal function as         mail() does.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                   5.2.7                 The possible value of 4 was added to message_type.                                            Examples            Example #1 error_log() examples       <?php\/\/\u00a0Send\u00a0notification\u00a0through\u00a0the\u00a0server\u00a0log\u00a0if\u00a0we\u00a0can\u00a0not\/\/\u00a0connect\u00a0to\u00a0the\u00a0database.if\u00a0(!Ora_Logon($username,\u00a0$password))\u00a0{\u00a0\u00a0\u00a0\u00a0error_log(\"Oracle\u00a0database\u00a0not\u00a0available!\",\u00a00);}\/\/\u00a0Notify\u00a0administrator\u00a0by\u00a0email\u00a0if\u00a0we\u00a0run\u00a0out\u00a0of\u00a0FOOif\u00a0(!($foo\u00a0=\u00a0allocate_new_foo()))\u00a0{\u00a0\u00a0\u00a0\u00a0error_log(\"Big\u00a0trouble,\u00a0we're\u00a0all\u00a0out\u00a0of\u00a0FOOs!\",\u00a01,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"operator@example.com\");}\/\/\u00a0another\u00a0way\u00a0to\u00a0call\u00a0error_log():error_log(\"You\u00a0messed\u00a0up!\",\u00a03,\u00a0\"\/var\/tmp\/my-errors.log\");?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.restore-error-handler.php","title":"restore_error_handler","description":"restore_error_handler   (PHP 4 >= 4.0.1, PHP 5)restore_error_handler \u2014 Restores the previous error handler function         Description       bool restore_error_handler     ( void    )        Used after changing the error handler function using    set_error_handler(), to revert to the previous error    handler (which could be the built-in or a user defined function).             Return Values       This function always returns TRUE.            Examples            Example #1 restore_error_handler() example           Decide if unserialize() caused an error, then      restore the original error handler.            <?phpfunction\u00a0unserialize_handler($errno,\u00a0$errstr){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Invalid\u00a0serialized\u00a0value.\\n\";}$serialized\u00a0=\u00a0'foo';set_error_handler('unserialize_handler');$original\u00a0=\u00a0unserialize($serialized);restore_error_handler();?>             The above example will output:       Invalid serialized value.                      Notes   Note:          Calling restore_error_handler() from the     error_handler function is ignored.                See Also            error_reporting() - Sets which PHP errors are reported     set_error_handler() - Sets a user-defined error handler function     restore_exception_handler() - Restores the previously defined exception handler function     trigger_error() - Generates a user-level error\/warning\/notice message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.error-reporting.php","title":"error_reporting","description":"error_reporting   (PHP 4, PHP 5)error_reporting \u2014 Sets which PHP errors are reported         Description       int error_reporting     ([ int $level   ] )        The error_reporting() function sets the    error_reporting    directive at runtime.  PHP has many levels of errors, using    this function sets that level for the duration (runtime) of    your script. If the optional level is    not set, error_reporting() will just return    the current error reporting level.            Parameters                    level                      The new error_reporting        level. It takes on either a bitmask, or named constants. Using named         constants is strongly encouraged to ensure compatibility for future         versions. As error levels are added, the range of integers increases,         so older integer-based error levels will not always behave as expected.                      The available error level constants and the actual        meanings of these error levels are described in the        predefined constants.                                     Return Values       Returns the old error_reporting    level or the current level if no level parameter is    given.            Changelog                                 Version        Description                                    5.4.0        E_STRICT became part of E_ALL.                       5.3.0        E_DEPRECATED and E_USER_DEPRECATED introduced.                       5.2.0        E_RECOVERABLE_ERROR introduced.                       5.0.0        E_STRICT introduced (not part of E_ALL).                                    Examples            Example #1 error_reporting() examples       <?php\/\/\u00a0Turn\u00a0off\u00a0all\u00a0error\u00a0reportingerror_reporting(0);\/\/\u00a0Report\u00a0simple\u00a0running\u00a0errorserror_reporting(E_ERROR\u00a0|\u00a0E_WARNING\u00a0|\u00a0E_PARSE);\/\/\u00a0Reporting\u00a0E_NOTICE\u00a0can\u00a0be\u00a0good\u00a0too\u00a0(to\u00a0report\u00a0uninitialized\/\/\u00a0variables\u00a0or\u00a0catch\u00a0variable\u00a0name\u00a0misspellings\u00a0...)error_reporting(E_ERROR\u00a0|\u00a0E_WARNING\u00a0|\u00a0E_PARSE\u00a0|\u00a0E_NOTICE);\/\/\u00a0Report\u00a0all\u00a0errors\u00a0except\u00a0E_NOTICE\/\/\u00a0This\u00a0is\u00a0the\u00a0default\u00a0value\u00a0set\u00a0in\u00a0php.inierror_reporting(E_ALL\u00a0^\u00a0E_NOTICE);\/\/\u00a0Report\u00a0all\u00a0PHP\u00a0errors\u00a0(see\u00a0changelog)error_reporting(E_ALL);\/\/\u00a0Report\u00a0all\u00a0PHP\u00a0errorserror_reporting(-1);\/\/\u00a0Same\u00a0as\u00a0error_reporting(E_ALL);ini_set('error_reporting',\u00a0E_ALL);?>                        Notes   Warning         Most of E_STRICT errors are evaluated at the     compile time thus such errors are not reported in the file where     error_reporting is enhanced     to include E_STRICT errors (and vice versa).          Tip         Passing in the value -1 will show every possible error,     even when new levels and constants are added in future PHP versions. The     E_ALL constant also behaves this way as of PHP 5.4.                See Also            The display_errors directive     The html_errors directive     The xmlrpc_errors directive     ini_set() - Sets the value of a configuration option"},{"url":"http:\/\/www.php.net\/manual\/en\/function.restore-exception-handler.php","title":"restore_exception_handler","description":"restore_exception_handler   (PHP 5)restore_exception_handler \u2014     Restores the previously defined exception handler function            Description       bool restore_exception_handler     ( void    )        Used after changing the exception handler function using    set_exception_handler(), to revert to the previous    exception handler (which could be the built-in or a user defined    function).            Return Values       This function always returns TRUE.            Examples            Example #1 restore_exception_handler() example       <?php\u00a0\u00a0\u00a0\u00a0function\u00a0exception_handler_1(Exception\u00a0$e)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'['\u00a0.\u00a0__FUNCTION__\u00a0.\u00a0']\u00a0'\u00a0.\u00a0$e->getMessage();\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0function\u00a0exception_handler_2(Exception\u00a0$e)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'['\u00a0.\u00a0__FUNCTION__\u00a0.\u00a0']\u00a0'\u00a0.\u00a0$e->getMessage();\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0set_exception_handler('exception_handler_1');\u00a0\u00a0\u00a0\u00a0set_exception_handler('exception_handler_2');\u00a0\u00a0\u00a0\u00a0restore_exception_handler();\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0Exception('This\u00a0triggers\u00a0the\u00a0first\u00a0exception\u00a0handler...');?>             The above example will output:       [exception_handler_1] This triggers the first exception handler...                       See Also            set_exception_handler() - Sets a user-defined exception handler function     set_error_handler() - Sets a user-defined error handler function     restore_error_handler() - Restores the previous error handler function     error_reporting() - Sets which PHP errors are reported"},{"url":"http:\/\/www.php.net\/manual\/en\/function.user-error.php","title":"user_error","description":"user_error   (PHP 4, PHP 5)user_error \u2014 Alias of trigger_error()         Description       This function is an alias of:  trigger_error()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-error-handler.php","title":"set_error_handler","description":"set_error_handler   (PHP 4 >= 4.0.1, PHP 5)set_error_handler \u2014 Sets a user-defined error handler function         Description       mixed set_error_handler     ( callback $error_handler    [, int $error_types = E_ALL | E_STRICT   ] )        Sets a user function (error_handler) to handle    errors in a script.          This function can be used for defining your own way of handling errors    during runtime, for example in applications in which you need to do    cleanup of data\/files when a critical error happens, or when you need    to trigger an error under certain conditions (using    trigger_error()).          It is important to remember that the standard PHP error handler is completely    bypassed for the error types specified by error_types     unless the callback function returns FALSE.    error_reporting() settings will have no effect and your    error handler will be called regardless - however you are still able to read     the current value of     error_reporting and act    appropriately. Of particular note is that this value will be 0 if the    statement that caused the error was prepended by the    @ error-control    operator.          Also note that it is your responsibility to die() if    necessary. If the error-handler function returns, script execution    will continue with the next statement after the one that caused an error.          The following error types cannot be handled with a user defined    function: E_ERROR, E_PARSE,    E_CORE_ERROR, E_CORE_WARNING,    E_COMPILE_ERROR,    E_COMPILE_WARNING, and    most of E_STRICT raised in the file where    set_error_handler() is called.          If errors occur before the script is executed (e.g. on file uploads) the     custom error handler cannot be called since it is not registered at that     time.            Parameters                    error_handler                      The user function needs to accept two parameters: the error code, and a        string describing the error. Then there are three optional parameters         that may be supplied: the filename in which the error occurred, the        line number in which the error occurred, and the context in which the        error occurred (an array that points to the active symbol table at the        point the error occurred).  The function can be shown as:                                handler          ( int $errno         , string $errstr         [, string $errfile         [, int $errline         [, array $errcontext        ]]] )                              errno                                  The first parameter, errno, contains the            level of the error raised, as an integer.                                                    errstr                                  The second parameter, errstr, contains the            error message, as a string.                                                    errfile                                  The third parameter is optional, errfile,            which contains the filename that the error was raised in, as a string.                                                    errline                                  The fourth parameter is optional, errline,            which contains the line number the error was raised at, as an integer.                                                    errcontext                                  The fifth parameter is optional, errcontext,            which is an array that points to the active symbol table at the point            the error occurred.  In other words, errcontext            will contain an array of every variable that existed in the scope the            error was triggered in.            User error handler must not modify error context.                                                               If the function returns FALSE then the normal error handler continues.                                error_types                      Can be used to mask the triggering of the        error_handler function just like the error_reporting ini setting         controls which errors are shown. Without this mask set the        error_handler will be called for every error        regardless to the setting of the error_reporting setting.                                     Return Values       Returns a string containing the previously defined error handler (if any). If    the built-in error handler is used NULL is returned. NULL is also returned    in case of an error such as an invalid callback. If the previous error handler    was a class method, this function will return an indexed array with the class    and the method name.            Changelog                                 Version        Description                                    5.2.0                 The error handler must return FALSE to populate         $php_errormsg.                               5.0.0                 The error_types parameter was introduced.                               4.3.0                 Instead of a function name, an array containing an object reference          and a method name can also be supplied as the         error_handler.                               4.0.2                 Three optional parameters for the error_handler         user function was introduced. These are the filename, the line number,          and the context.                                            Examples            Example #1 Error handling with set_error_handler() and trigger_error()           The example below shows the handling of internal exceptions by      triggering errors and handling them with a user defined function:            <?php\/\/\u00a0error\u00a0handler\u00a0functionfunction\u00a0myErrorHandler($errno,\u00a0$errstr,\u00a0$errfile,\u00a0$errline){\u00a0\u00a0\u00a0\u00a0if\u00a0(!(error_reporting()\u00a0&\u00a0$errno))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0This\u00a0error\u00a0code\u00a0is\u00a0not\u00a0included\u00a0in\u00a0error_reporting\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0switch\u00a0($errno)\u00a0{\u00a0\u00a0\u00a0\u00a0case\u00a0E_USER_ERROR:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<b>My\u00a0ERROR<\/b>\u00a0[$errno]\u00a0$errstr<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0\u00a0Fatal\u00a0error\u00a0on\u00a0line\u00a0$errline\u00a0in\u00a0file\u00a0$errfile\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\",\u00a0PHP\u00a0\"\u00a0.\u00a0PHP_VERSION\u00a0.\u00a0\"\u00a0(\"\u00a0.\u00a0PHP_OS\u00a0.\u00a0\")<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Aborting...<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0E_USER_WARNING:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<b>My\u00a0WARNING<\/b>\u00a0[$errno]\u00a0$errstr<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0E_USER_NOTICE:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<b>My\u00a0NOTICE<\/b>\u00a0[$errno]\u00a0$errstr<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0default:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unknown\u00a0error\u00a0type:\u00a0[$errno]\u00a0$errstr<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/*\u00a0Don't\u00a0execute\u00a0PHP\u00a0internal\u00a0error\u00a0handler\u00a0*\/\u00a0\u00a0\u00a0\u00a0return\u00a0true;}\/\/\u00a0function\u00a0to\u00a0test\u00a0the\u00a0error\u00a0handlingfunction\u00a0scale_by_log($vect,\u00a0$scale){\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_numeric($scale)\u00a0||\u00a0$scale\u00a0<=\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trigger_error(\"log(x)\u00a0for\u00a0x\u00a0<=\u00a00\u00a0is\u00a0undefined,\u00a0you\u00a0used:\u00a0scale\u00a0=\u00a0$scale\",\u00a0E_USER_ERROR);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_array($vect))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trigger_error(\"Incorrect\u00a0input\u00a0vector,\u00a0array\u00a0of\u00a0values\u00a0expected\",\u00a0E_USER_WARNING);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0null;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$temp\u00a0=\u00a0array();\u00a0\u00a0\u00a0\u00a0foreach($vect\u00a0as\u00a0$pos\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_numeric($value))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trigger_error(\"Value\u00a0at\u00a0position\u00a0$pos\u00a0is\u00a0not\u00a0a\u00a0number,\u00a0using\u00a00\u00a0(zero)\",\u00a0E_USER_NOTICE);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$temp[$pos]\u00a0=\u00a0log($scale)\u00a0*\u00a0$value;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0$temp;}\/\/\u00a0set\u00a0to\u00a0the\u00a0user\u00a0defined\u00a0error\u00a0handler$old_error_handler\u00a0=\u00a0set_error_handler(\"myErrorHandler\");\/\/\u00a0trigger\u00a0some\u00a0errors,\u00a0first\u00a0define\u00a0a\u00a0mixed\u00a0array\u00a0with\u00a0a\u00a0non-numeric\u00a0itemecho\u00a0\"vector\u00a0a\\n\";$a\u00a0=\u00a0array(2,\u00a03,\u00a0\"foo\",\u00a05.5,\u00a043.3,\u00a021.11);print_r($a);\/\/\u00a0now\u00a0generate\u00a0second\u00a0arrayecho\u00a0\"----\\nvector\u00a0b\u00a0-\u00a0a\u00a0notice\u00a0(b\u00a0=\u00a0log(PI)\u00a0*\u00a0a)\\n\";\/*\u00a0Value\u00a0at\u00a0position\u00a0$pos\u00a0is\u00a0not\u00a0a\u00a0number,\u00a0using\u00a00\u00a0(zero)\u00a0*\/$b\u00a0=\u00a0scale_by_log($a,\u00a0M_PI);print_r($b);\/\/\u00a0this\u00a0is\u00a0trouble,\u00a0we\u00a0pass\u00a0a\u00a0string\u00a0instead\u00a0of\u00a0an\u00a0arrayecho\u00a0\"----\\nvector\u00a0c\u00a0-\u00a0a\u00a0warning\\n\";\/*\u00a0Incorrect\u00a0input\u00a0vector,\u00a0array\u00a0of\u00a0values\u00a0expected\u00a0*\/$c\u00a0=\u00a0scale_by_log(\"not\u00a0array\",\u00a02.3);var_dump($c);\u00a0\/\/\u00a0NULL\/\/\u00a0this\u00a0is\u00a0a\u00a0critical\u00a0error,\u00a0log\u00a0of\u00a0zero\u00a0or\u00a0negative\u00a0number\u00a0is\u00a0undefinedecho\u00a0\"----\\nvector\u00a0d\u00a0-\u00a0fatal\u00a0error\\n\";\/*\u00a0log(x)\u00a0for\u00a0x\u00a0<=\u00a00\u00a0is\u00a0undefined,\u00a0you\u00a0used:\u00a0scale\u00a0=\u00a0$scale\"\u00a0*\/$d\u00a0=\u00a0scale_by_log($a,\u00a0-2.5);var_dump($d);\u00a0\/\/\u00a0Never\u00a0reached?>             The above example will output something similar to:       vector a Array (     [0] => 2     [1] => 3     [2] => foo     [3] => 5.5     [4] => 43.3     [5] => 21.11 ) ---- vector b - a notice (b = log(PI) * a) <b>My NOTICE<\/b> [1024] Value at position 2 is not a number, using 0 (zero)<br \/> Array (     [0] => 2.2894597716988     [1] => 3.4341896575482     [2] => 0     [3] => 6.2960143721717     [4] => 49.566804057279     [5] => 24.165247890281 ) ---- vector c - a warning <b>My WARNING<\/b> [512] Incorrect input vector, array of values expected<br \/> NULL ---- vector d - fatal error <b>My ERROR<\/b> [256] log(x) for x <= 0 is undefined, you used: scale = -2.5<br \/>   Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)<br \/> Aborting...<br \/>                      See Also            ErrorException     error_reporting() - Sets which PHP errors are reported     restore_error_handler() - Restores the previous error handler function     trigger_error() - Generates a user-level error\/warning\/notice message     error level constants     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.trigger-error.php","title":"trigger_error","description":"trigger_error   (PHP 4 >= 4.0.1, PHP 5)trigger_error \u2014 Generates a user-level error\/warning\/notice message         Description       bool trigger_error     ( string $error_msg    [, int $error_type = E_USER_NOTICE   ] )        Used to trigger a user error condition, it can be used by in conjunction    with the built-in error handler, or with a user defined function that has    been set as the new error handler    (set_error_handler()).           This function is useful when you need to generate a particular response to    an exception at runtime.            Parameters                    error_msg                      The designated error message for this error. It&#039;s limited to 1024         characters in length. Any additional characters beyond 1024 will be         truncated.                                error_type                      The designated error type for this error. It only works with the E_USER        family of constants, and will default to E_USER_NOTICE.                                     Return Values       This function returns FALSE if wrong error_type is    specified, TRUE otherwise.            Examples            Example #1 trigger_error() example           See set_error_handler() for a more extensive example.            <?phpif\u00a0($divisor\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0trigger_error(\"Cannot\u00a0divide\u00a0by\u00a0zero\",\u00a0E_USER_ERROR);}?>                        Notes   Warning          HTML entities in error_msg are not      escaped. Use htmlentities() on the message if      the error is to be displayed in a browser.                See Also            error_reporting() - Sets which PHP errors are reported     set_error_handler() - Sets a user-defined error handler function     restore_error_handler() - Restores the previous error handler function     The error level constants"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-exception-handler.php","title":"set_exception_handler","description":"set_exception_handler   (PHP 5)set_exception_handler \u2014     Sets a user-defined exception handler function             Description       callback set_exception_handler     ( callback $exception_handler    )        Sets the default exception handler if an exception is not caught within a    try\/catch block. Execution will stop after the    exception_handler is called.            Parameters                    exception_handler                      Name of the function to be called when an uncaught exception occurs.        This function must be defined before calling        set_exception_handler(). This handler function        needs to accept one parameter, which will be the exception object that        was thrown.                                     Return Values       Returns the name of the previously defined exception handler, or NULL on error. If    no previous handler was defined, NULL is also returned.            Examples            Example #1 set_exception_handler() example       <?phpfunction\u00a0exception_handler($exception)\u00a0{\u00a0\u00a0echo\u00a0\"Uncaught\u00a0exception:\u00a0\"\u00a0,\u00a0$exception->getMessage(),\u00a0\"\\n\";}set_exception_handler('exception_handler');throw\u00a0new\u00a0Exception('Uncaught\u00a0Exception');echo\u00a0\"Not\u00a0Executed\\n\";?>                        See Also            restore_exception_handler() - Restores the previously defined exception handler function     restore_error_handler() - Restores the previous error handler function     error_reporting() - Sets which PHP errors are reported     information about the callback type     PHP 5 Exceptions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-busy.php","title":"eio_busy","description":"eio_busy   (PECL eio >= 0.0.1dev)eio_busy \u2014 Artificially increase load. Could be useful in tests,   benchmarking.         Description       resource eio_busy     ( int $delay    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_busy() artificially increases load taking   delay seconds to execute. May be used for debugging,   or benchmarking.            Parameters              delay                  Delay in seconds                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback                This callback is called when all the group requests are done.                          data                  Arbitrary variable passed to callback.                             Return Values       eio_busy() returns request resource on success or FALSE on error.          See Also       eio_nop"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-chmod.php","title":"eio_chmod","description":"eio_chmod   (PECL eio >= 0.0.1dev)eio_chmod \u2014 Change file\/direcrory permissions.         Description       resource eio_chmod     ( string $path    , mixed $mode    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_chmod() changes file, or direcrory permissions. The   new permissions are specified by mode.             Parameters              path                  Path to the target file or directory      WarningAvoid relative paths                            mode                  The new permissions. E.g. 0644.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_chmod() returns request resource on success or FALSE on error.            See Also       eio_chown"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-chown.php","title":"eio_chown","description":"eio_chown   (PECL eio >= 0.0.1dev)eio_chown \u2014 Change file\/direcrory permissions.         Description       resource eio_chown     ( string $path    , int $uid    [, int $gid = -1    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]]] )       Changes file, or directory permissions.            Parameters              path                  Path to file or directory.      WarningAvoid relative paths                            uid                  User ID. Is ignored when equal to -1.                           gid                  Group ID. Is ignored when equal to -1.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_chown() returns request resource on success or FALSE on error.             See Also       eio_chmod"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-cancel.php","title":"eio_cancel","description":"eio_cancel   (PECL eio >= 0.0.1dev)eio_cancel \u2014 Cancels a request         Description       void eio_cancel     ( resource $req    )        eio_cancel() cancels a request specified by    req            Parameters              req                  The request resource                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values      No value is returned.            Examples       Example #1 eio_cancel() example      <?php\u00a0\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_nop()\u00a0finished\u00a0*\/\u00a0function\u00a0my_nop_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0echo\u00a0\"my_nop\u00a0\",\u00a0$data,\u00a0\"\\n\";\u00a0}\/\/\u00a0This\u00a0eio_nop()\u00a0call\u00a0will\u00a0be\u00a0cancelled$req\u00a0=\u00a0eio_nop(EIO_PRI_DEFAULT,\u00a0\"my_nop_cb\",\u00a0\"1\");var_dump($req);eio_cancel($req);\/\/\u00a0This\u00a0time\u00a0eio_nop()\u00a0will\u00a0be\u00a0processedeio_nop(EIO_PRI_DEFAULT,\u00a0\"my_nop_cb\",\u00a0\"2\");\/\/\u00a0Process\u00a0requestseio_event_loop();?>           The above example will output something similar to:      resource(4) of type (EIO Request Descriptor) my_nop 2                  See Also       eio_grp_cancel"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-close.php","title":"eio_close","description":"eio_close   (PECL eio >= 0.0.1dev)eio_close \u2014 Close file         Description       resource eio_close     ( int $fd    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_close() closes file specified by   fd.             Parameters              fd                   The file descriptor                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_close() returns request resource on success or FALSE on error.            See Also       eio_open"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-custom.php","title":"eio_custom","description":"eio_custom   (PECL eio >= 0.0.1dev)eio_custom \u2014 Execute custom request like any other eio_* call.         Description       resource eio_custom     ( mixed $execute    , int $pri    , mixed $callback    [, mixed $data = NULL   ] )        eio_custom() executes custom function specified by    execute processing it just like any other eio_* call.              Parameters              execute                   Specifies the request function that should match the following prototype:         mixed\u00a0execute(mixed\u00a0data);         callback is event completion callback that should match the following       prototype:        void\u00a0callback(mixed\u00a0data,\u00a0mixed\u00a0result);         data is the data passed to      execute via data argument       without modifications       result value returned by execute                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_custom() returns request resource on success or FALSE on error.              Examples       Example #1 eio_custom() example     <?php\/*\u00a0Callback\u00a0for\u00a0the\u00a0custom\u00a0callback\u00a0*\/function\u00a0my_custom_callback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0var_dump(count($result));\u00a0\u00a0\u00a0\u00a0var_dump($result['data_modified']);\u00a0\u00a0\u00a0\u00a0var_dump($result['result']);}\/*\u00a0The\u00a0custom\u00a0request\u00a0*\/function\u00a0my_custom($data)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0$result\u00a0\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'result'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a01001,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'data_modified'\u00a0=>\u00a0\"my\u00a0custom\u00a0data\",\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0return\u00a0$result;}$data\u00a0=\u00a0\"my_custom_data\";$req\u00a0=\u00a0eio_custom(\"my_custom\",\u00a0EIO_PRI_DEFAULT,\u00a0\"my_custom_callback\",\u00a0$data);var_dump($req);eio_event_loop();?>     The above example will output something similar to:    resource(4) of type (EIO Request Descriptor) string(14) \"my_custom_data\" string(14) \"my_custom_data\" int(2) string(14) \"my custom data\" int(1001)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-dup2.php","title":"eio_dup2","description":"eio_dup2   (PECL eio >= 0.0.1dev)eio_dup2 \u2014 Duplicate a file descriptor         Description       resource eio_dup2     ( int $fd    , int $fd2    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL    ]]] )       eio_dup2() duplicates file descriptor.             Parameters              fd                  Source file descriptor                           fd2                  Target file descriptor                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_dup2() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-event-loop.php","title":"eio_event_loop","description":"eio_event_loop   (PECL eio >= 0.0.1dev)eio_event_loop \u2014 Polls libeio until all requests proceeded         Description       bool eio_event_loop     ( void    )       eio_event_loop() polls libeio until all requests proceeded.             Parameters   This function has no parameters.         Return Values       eio_event_loop() returns TRUE on success or FALSE on error.            Examples    Example #1 eio_event_loop() example     <?php$temp_filename\u00a0=\u00a0\"eio-temp-file.tmp\";touch($temp_filename);\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_chmod()\u00a0finished\u00a0*\/function\u00a0my_chmod_callback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$temp_filename;\u00a0\u00a0\u00a0\u00a0if\u00a0($result\u00a0==\u00a00\u00a0&&\u00a0!is_readable($temp_filename)\u00a0&&\u00a0is_writable($temp_filename))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"eio_chmod_ok\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0@unlink($temp_filename);}eio_chmod($temp_filename,\u00a00200,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_chmod_callback\");eio_event_loop();?>     The above example will output something similar to:    eio_chmod_ok                 See Also       eio_poll"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fallocate.php","title":"eio_fallocate","description":"eio_fallocate   (PECL eio >= 0.0.1dev)eio_fallocate \u2014 Allows the caller to directly manipulate the allocated disk   space for a file         Description       resource eio_fallocate     ( int $fd    , int $mode    , int $offset    , int $length    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL    ]]] )        eio_fallocate() allows the caller to directly manipulate the allocated disk space for the   file specified by fd file descriptor for the byte   range starting at offset and continuing for   length bytes.       Note:    File should be opened for writing   EIO_O_CREAT should be logically       OR&#039;d with EIO_O_WRONLY, or       EIO_O_RDWR                Parameters              fd                  The file descriptor, e.g. returned by eio_open().                           mode            Currently only one flag is supported for mode:      EIO_FALLOC_FL_KEEP_SIZE (the same as POSIX constant        FALLOC_FL_KEEP_SIZE).                           offset                  Specifies start of the byte range.                           length                  Specifies length the byte range.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_fallocate() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fchmod.php","title":"eio_fchmod","description":"eio_fchmod   (PECL eio >= 0.0.1dev)eio_fchmod \u2014 Change file permissions.         Description       resource eio_fchmod     ( int $fd    , int $mode    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_fchmod() changes permissions for the file specified   by fd file descriptor.             Parameters              fd                  The file descriptor, e.g. returned by eio_open().                           mode                  The new permissions. E.g. 0644.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_fchmod() returns request resource on success or FALSE on error.            See Also       eio_fchown"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fchown.php","title":"eio_fchown","description":"eio_fchown   (PECL eio >= 0.0.1dev)eio_fchown \u2014 Change file ownership         Description       resource eio_fchown     ( int $fd    , int $uid    [, int $gid    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]]] )        eio_fchown() changes ownership of the file specified by    fd file descriptor.             Parameters              fd                  The file descriptor.                           uid                  User ID. Is ignored when equal to -1.                           gid                  Group ID. Is ignored when equal to -1.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              See Also       eio_fchmod"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fdatasync.php","title":"eio_fdatasync","description":"eio_fdatasync   (PECL eio >= 0.0.1dev)eio_fdatasync \u2014 Synchronize a file&#039;s in-core state with storage device.         Description       resource eio_fdatasync     ( int $fd    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_fdatasync() synchronizes a file&#039;s in-core state with storage device.             Parameters              fd                  The file descriptor, e.g. returned by eio_open().                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_fdatasync() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fstatvfs.php","title":"eio_fstatvfs","description":"eio_fstatvfs   (PECL eio >= 0.0.1dev)eio_fstatvfs \u2014 Get file system statistics         Description       resource eio_fstatvfs     ( int $fd    , int $pri    , mixed $callback    [, mixed $data   ] )       eio_fstatvfs() returns file system statistics in   result of callback.             Parameters              fd                  A file descriptor of a file within the mounted file system.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_fstatvfs() returns request resource on success or FALSE on error.            See Also       eio_statvfs"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fstat.php","title":"eio_fstat","description":"eio_fstat    (PECL eio >= 0.0.1dev)eio_fstat \u2014 Get file status         Description       resource eio_fstat     ( int $fd    , int $pri    , mixed $callback    [, mixed $data   ] )        eio_fstat() returns file status information in    result argument of callback             Parameters              fd                  The file descriptor.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_busy() returns request resource on success or FALSE on error.            Examples       Example #1 eio_lstat() example      <?php\/\/\u00a0Create\u00a0temporary\u00a0file$tmp_filename\u00a0=\u00a0dirname(__FILE__)\u00a0.\"\/eio-file.tmp\";touch($tmp_filename);\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_fstat()\u00a0done\u00a0*\/function\u00a0my_res_cb($data,\u00a0$result)\u00a0{\u00a0\/\/\u00a0Should\u00a0output\u00a0array\u00a0with\u00a0stat\u00a0info\u00a0var_dump($result);\u00a0if\u00a0($data['fd'])\u00a0{\u00a0\u00a0\/\/\u00a0Close\u00a0temporary\u00a0file\u00a0\u00a0eio_close($data['fd']);\u00a0\u00a0eio_event_loop();\u00a0}\u00a0\/\/\u00a0Remove\u00a0temporary\u00a0file\u00a0@unlink($data['file']);}\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_open()\u00a0done\u00a0*\/function\u00a0my_open_cb($data,\u00a0$result)\u00a0{\u00a0\/\/\u00a0Prepare\u00a0data\u00a0for\u00a0callback\u00a0$d\u00a0=\u00a0array(\u00a0\u00a0'fd'\u00a0\u00a0=>\u00a0$result,\u00a0\u00a0'file'=>\u00a0$data\u00a0);\u00a0\/\/\u00a0Request\u00a0stat\u00a0info\u00a0eio_fstat($result,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_res_cb\",\u00a0$d);\u00a0\/\/\u00a0Process\u00a0request(s)\u00a0eio_event_loop();}\/\/\u00a0Open\u00a0temporary\u00a0fileeio_open($tmp_filename,\u00a0EIO_O_RDONLY,\u00a0NULL,\u00a0EIO_PRI_DEFAULT,\u00a0\u00a0\"my_open_cb\",\u00a0$tmp_filename);eio_event_loop();?>           The above example will output something similar to:      array(12) {  [\"st_dev\"]=>   int(2050)   [\"st_ino\"]=>   int(2489159)   [\"st_mode\"]=>   int(33188)   [\"st_nlink\"]=>   int(1)   [\"st_uid\"]=>   int(1000)   [\"st_gid\"]=>   int(100)   [\"st_rdev\"]=>   int(0)   [\"st_blksize\"]=>   int(4096)   [\"st_blocks\"]=>   int(0)   [\"st_atime\"]=>   int(1318239506)   [\"st_mtime\"]=>   int(1318239506)   [\"st_ctime\"]=>   int(1318239506) }                  See Also       eio_lstat    eio_stat"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fsync.php","title":"eio_fsync","description":"eio_fsync   (PECL eio >= 0.0.1dev)eio_fsync \u2014 Synchronize a file&#039;s in-core state with storage device         Description       resource eio_fsync     ( int $fd    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       Synchronize a file&#039;s in-core state with storage device             Parameters              fd                  The file descriptor.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_fsync() returns request resource on success or FALSE on error.             See Also       eio_sync"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-ftruncate.php","title":"eio_ftruncate","description":"eio_ftruncate   (PECL eio >= 0.0.1dev)eio_ftruncate \u2014 Truncate a file         Description       resource eio_ftruncate     ( int $fd    , int $offset    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_ftruncate() causes a regular file referenced by   fd file descriptor to be truncated to precisely   length bytes.             Parameters              fd                  The file descriptor.                           offset                  Offset from beginning of the file                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_ftruncate() returns request resource on success or FALSE on error.             See Also       eio_truncate"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-futime.php","title":"eio_futime","description":"eio_futime   (PECL eio >= 0.0.1dev)eio_futime \u2014 Change file last access and modification times         Description       resource eio_futime     ( int $fd    , int $atime    , int $mtime    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL    ]]] )        eio_futime() changes file last access and modification    times.             Parameters              fd                  The file descriptor, e.g. returned by eio_open()                           atime                  Access time                           mtime                  Modification time                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_futime() returns request resource on success or FALSE on error.            See Also       eio_utime"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp-cancel.php","title":"eio_grp_cancel","description":"eio_grp_cancel   (PECL eio >= 0.0.1dev)eio_grp_cancel \u2014 Cancels a request group         Description       void eio_grp_cancel     ( resource $grp    )       eio_grp_cancel() cancels a group request specified by   grp request group resource.             Parameters              grp                  The request group resource returned by eio_grp().                              Return Values      No value is returned.            See Also       eio_grp    eio_grp_add"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp-add.php","title":"eio_grp_add","description":"eio_grp_add   (PECL eio >= 0.0.1dev)eio_grp_add \u2014 Adds a request to the request group.         Description       void eio_grp_add     ( resource $grp    , resource $req    )       eio_grp_add() adds a request to the request group.             Parameters              grp                  The request group resource returned by eio_grp()                           req                  The request resource                              Return Values      eio_grp_add() doesn&#039;t return a value.            Examples      Example #1 Grouping requests    <?php\/*\u00a0*\u00a0Create\u00a0a\u00a0group\u00a0request\u00a0to\u00a0open,\u00a0read\u00a0and\u00a0close\u00a0a\u00a0file\u00a0*\/\/\/\u00a0Create\u00a0temporary\u00a0file\u00a0and\u00a0write\u00a0some\u00a0bytes\u00a0to\u00a0it$temp_filename\u00a0=\u00a0dirname(__FILE__)\u00a0.\"\/eio-file.tmp\";$fp\u00a0=\u00a0fopen($temp_filename,\u00a0\"w\");fwrite($fp,\u00a0\"some\u00a0data\");fclose($fp);\/*\u00a0Is\u00a0called\u00a0when\u00a0the\u00a0group\u00a0requests\u00a0are\u00a0done\u00a0*\/function\u00a0my_grp_done($data,\u00a0$result)\u00a0{\u00a0var_dump($result\u00a0==\u00a00);\u00a0@unlink($data);}\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_open()\u00a0done\u00a0*\/function\u00a0my_grp_file_opened_callback($data,\u00a0$result)\u00a0{\u00a0global\u00a0$grp;\u00a0\/\/\u00a0$result\u00a0should\u00a0contain\u00a0the\u00a0file\u00a0descriptor\u00a0var_dump($result\u00a0>\u00a00);\u00a0\/\/\u00a0Create\u00a0eio_read()\u00a0request\u00a0and\u00a0add\u00a0it\u00a0to\u00a0the\u00a0group\u00a0\/\/\u00a0Pass\u00a0file\u00a0descriptor\u00a0to\u00a0the\u00a0callback\u00a0$req\u00a0=\u00a0eio_read($result,\u00a04,\u00a00,\u00a0\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_grp_file_read_callback\",\u00a0$result);\u00a0eio_grp_add($grp,\u00a0$req);}\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_read()\u00a0done\u00a0*\/function\u00a0my_grp_file_read_callback($data,\u00a0$result)\u00a0{\u00a0global\u00a0$grp;\u00a0\/\/\u00a0Read\u00a0bytes\u00a0var_dump($result);\u00a0\/\/\u00a0Create\u00a0eio_close()\u00a0request\u00a0and\u00a0add\u00a0it\u00a0to\u00a0the\u00a0group\u00a0\/\/\u00a0$data\u00a0should\u00a0contain\u00a0the\u00a0file\u00a0descriptor\u00a0$req\u00a0=\u00a0eio_close($data);\u00a0eio_grp_add($grp,\u00a0$req);}\/\/\u00a0Create\u00a0request\u00a0group$grp\u00a0=\u00a0eio_grp(\"my_grp_done\",\u00a0$temp_filename);var_dump($grp);\/\/\u00a0Create\u00a0eio_open()\u00a0request\u00a0and\u00a0add\u00a0it\u00a0to\u00a0the\u00a0group$req\u00a0=\u00a0eio_open($temp_filename,\u00a0EIO_O_RDWR\u00a0|\u00a0EIO_O_APPEND\u00a0,\u00a0NULL,\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_grp_file_opened_callback\",\u00a0NULL);eio_grp_add($grp,\u00a0$req);\/\/\u00a0Process\u00a0requestseio_event_loop();?>      The above example will output something similar to:   resource(6) of type (EIO Group Descriptor) bool(true) string(4) \"some\" bool(true)            See Also       eio_grp    eio_grp_cancel    eio_grp_limit"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp-limit.php","title":"eio_grp_limit","description":"eio_grp_limit   (PECL eio >= 0.0.1dev)eio_grp_limit \u2014 Set group limit         Description       void eio_grp_limit     ( resource $grp    , int $limit    )       Limit number of requests in the request group.             Parameters              grp                  The request group resource.                           limit                  Number of requests in the group.                              Return Values      No value is returned.            See Also       eio_grp_add"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-get-eventfd.php","title":"eio_get_event_stream","description":"eio_get_event_stream   (PECL eio >= 0.3.1b)eio_get_event_stream \u2014 Get stream representing a variable used in internal communications with libeio.         Description       mixed eio_get_event_stream     ( void    )        eio_get_event_stream() acquires stream representing a    variable used in internal communications with libeio. Could be used to bind    with some event loop provided by other PECL extension, for example    libevent.            Parameters   This function has no parameters.         Return Values       eio_get_event_stream() returns stream on success;    otherwise, NULL            Examples       Example #1 Using eio with libevent      <?phpfunction\u00a0my_eio_poll($fd,\u00a0$events,\u00a0$arg)\u00a0{\u00a0\u00a0\u00a0\u00a0\/*\u00a0Some\u00a0libevent\u00a0regulation\u00a0might\u00a0go\u00a0here\u00a0..\u00a0*\/\u00a0\u00a0\u00a0\u00a0if\u00a0(eio_nreqs())\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eio_poll();\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/*\u00a0..\u00a0and\u00a0here\u00a0*\/}function\u00a0my_res_cb($d,\u00a0$r)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($r);\u00a0var_dump($d);}$base\u00a0=\u00a0event_base_new();$event\u00a0=\u00a0event_new();$fd\u00a0=\u00a0eio_get_event_stream();var_dump($fd);eio_nop(EIO_PRI_DEFAULT,\u00a0\"my_res_cb\",\u00a0\"nop\u00a0data\");eio_mkdir(\"\/tmp\/abc-eio-temp\",\u00a00750,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_res_cb\",\u00a0\"mkdir\u00a0data\");\/*\u00a0some\u00a0other\u00a0eio_*\u00a0calls\u00a0here\u00a0...\u00a0*\/\/\/\u00a0set\u00a0event\u00a0flagsevent_set($event,\u00a0$fd,\u00a0EV_READ\u00a0\/*|\u00a0EV_PERSIST*\/,\u00a0\"my_eio_poll\",\u00a0array($event,\u00a0$base));\/\/\u00a0set\u00a0event\u00a0base\u00a0event_base_set($event,\u00a0$base);\/\/\u00a0enable\u00a0eventevent_add($event);\/\/\u00a0start\u00a0event\u00a0loopevent_base_loop($base);\/*\u00a0The\u00a0same\u00a0will\u00a0be\u00a0available\u00a0via\u00a0buffered\u00a0libevent\u00a0interface\u00a0*\/?>           The above example will output something similar to:      int(3) int(0) string(8) \"nop data\" int(0) string(10) \"mkdir data\""},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp.php","title":"eio_grp","description":"eio_grp   (PECL eio >= 0.0.1dev)eio_grp \u2014 Createsa request group.         Description       resource eio_grp     ( string $callback    [, string $data = NULL   ] )        eio_grp() creates a request group.             Parameters              callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_grp() returns request group resource on success or FALSE on error.            Examples       Example #1 eio_grp() example      <?php$temp_filename\u00a0=\u00a0dirname(__FILE__)\u00a0.\"\/eio-file.tmp\";$fp\u00a0=\u00a0fopen($temp_filename,\u00a0\"w\");fwrite($fp,\u00a0\"some\u00a0data\");fclose($fp);$my_file_fd\u00a0=\u00a0NULL;\/*\u00a0Is\u00a0called\u00a0when\u00a0the\u00a0group\u00a0requests\u00a0are\u00a0done\u00a0*\/function\u00a0my_grp_done($data,\u00a0$result)\u00a0{\u00a0\/\/\u00a0Remove\u00a0the\u00a0file,\u00a0if\u00a0it\u00a0still\u00a0exists\u00a0@unlink($data);}\/*\u00a0Is\u00a0called\u00a0when\u00a0the\u00a0temporary\u00a0file\u00a0is\u00a0opened\u00a0*\/function\u00a0my_grp_file_opened_callback($data,\u00a0$result)\u00a0{\u00a0global\u00a0$my_file_fd,\u00a0$grp;\u00a0$my_file_fd\u00a0=\u00a0$result;\u00a0$req\u00a0=\u00a0eio_read($my_file_fd,\u00a04,\u00a00,\u00a0\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_grp_file_read_callback\");\u00a0eio_grp_add($grp,\u00a0$req);}\/*\u00a0Is\u00a0called\u00a0when\u00a0the\u00a0file\u00a0is\u00a0read\u00a0*\/function\u00a0my_grp_file_read_callback($data,\u00a0$result)\u00a0{\u00a0global\u00a0$my_file_fd,\u00a0$grp;\u00a0var_dump($result);\u00a0\/\/\u00a0Create\u00a0request\u00a0to\u00a0close\u00a0the\u00a0file\u00a0$req\u00a0=\u00a0eio_close($my_file_fd);\u00a0\/\/\u00a0Add\u00a0request\u00a0to\u00a0the\u00a0group\u00a0eio_grp_add($grp,\u00a0$req);}\/\/\u00a0Create\u00a0request\u00a0group$grp\u00a0=\u00a0eio_grp(\"my_grp_done\",\u00a0$temp_filename);\/\/\u00a0Create\u00a0request$req\u00a0=\u00a0eio_open($temp_filename,\u00a0EIO_O_RDWR\u00a0|\u00a0EIO_O_APPEND\u00a0,\u00a0NULL,\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_grp_file_opened_callback\",\u00a0NULL);\/\/\u00a0Add\u00a0request\u00a0to\u00a0the\u00a0groupeio_grp_add($grp,\u00a0$req);\/\/\u00a0Process\u00a0requestseio_event_loop();?>           The above example will output something similar to:      string(4) \"some\"                 See Also       eio_grp_cancel    eio_grp_add"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-link.php","title":"eio_link","description":"eio_link   (PECL eio >= 0.0.1dev)eio_link \u2014 Create a hardlink for file         Description       resource eio_link     ( string $path    , string $new_path    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_link() creates a hardlink   new_path for a file specified by   path.             Parameters              path                  Source file path.                           new_path                  Target file path.                           pri            The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values                Examples       Example #1 eio_link() example      <?php$filename\u00a0=\u00a0dirname(__FILE__).\"\/symlink.dat\";touch($filename);$link\u00a0=\u00a0dirname(__FILE__).\"\/symlink.link\";$hardlink\u00a0=\u00a0dirname(__FILE__).\"\/hardlink.link\";function\u00a0my_hardlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$link,\u00a0$filename;\u00a0\u00a0\u00a0\u00a0var_dump(file_exists($data)\u00a0&&\u00a0!is_link($data));\u00a0\u00a0\u00a0\u00a0@unlink($data);\u00a0\u00a0\u00a0\u00a0eio_symlink($filename,\u00a0$link,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_symlink_cb\",\u00a0$link);}function\u00a0my_symlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$link,\u00a0$filename;\u00a0\u00a0\u00a0\u00a0var_dump(file_exists($data)\u00a0&&\u00a0is_link($data));\u00a0\u00a0\u00a0\u00a0if\u00a0(!eio_readlink($data,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_readlink_cb\",\u00a0NULL))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($link);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($filename);\u00a0\u00a0\u00a0\u00a0}}function\u00a0my_readlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$filename,\u00a0$link;\u00a0\u00a0\u00a0\u00a0var_dump($result);\u00a0\u00a0\u00a0\u00a0@unlink($link);\u00a0\u00a0\u00a0\u00a0@unlink($filename);}eio_link($filename,\u00a0$hardlink,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_hardlink_cb\",\u00a0$hardlink);eio_event_loop();?>           The above example will output something similar to:      bool(true) bool(true) string(%d) \"%ssymlink.dat\"                  See Also       eio_symlink"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-mkdir.php","title":"eio_mkdir","description":"eio_mkdir   (PECL eio >= 0.0.1dev)eio_mkdir \u2014 Create directory         Description       resource eio_mkdir     ( string $path    , int $mode    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_mkdir() creates directory with specified access   mode.             Parameters              path                  Path for the new directory.                           mode                  Access mode, e.g. 0755                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_mkdir() returns request resource on success or FALSE on error.            Examples       Example #1 eio_mkdir() example      <?php$temp_dirname\u00a0=\u00a0\"eio-temp-dir\";\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_mkdir()\u00a0finishes\u00a0*\/function\u00a0my_mkdir_callback($data,\u00a0$result)\u00a0{\u00a0if\u00a0($result\u00a0==\u00a00\u00a0&&\u00a0is_dir($temp_dirname)\u00a0\u00a0\u00a0&&\u00a0!is_readable($temp_dirname)\u00a0\u00a0\u00a0&&\u00a0is_writable($temp_dirname))\u00a0{\u00a0\u00a0echo\u00a0\"eio_mkdir_ok\";\u00a0}\u00a0\/\/\u00a0Remove\u00a0directory\u00a0\u00a0\u00a0\u00a0if\u00a0(file_exists($data))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rmdir($temp_dirname);}\/\/\u00a0Create\u00a0directory\u00a0with\u00a0access\u00a0mode\u00a00300eio_mkdir($temp_dirname,\u00a00300,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_mkdir_callback\",\u00a0$temp_dirname);eio_event_loop();?>           The above example will output something similar to:      eio_mkdir_ok                  See Also       eio_rmdir"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-lstat.php","title":"eio_lstat","description":"eio_lstat   (PECL eio >= 0.0.1dev)eio_lstat \u2014 Get file status         Description       resource eio_lstat     ( string $path    , int $pri    , mixed $callback    [, mixed $data = NULL   ] )        eio_lstat() returns file status information in    result argument of callback             Parameters              path                  The file path                           pri            The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_lstat() returns request resource on success or FALSE on error.            Examples       Example #1 eio_lstat() example      <?php$tmp_filename\u00a0=\u00a0dirname(__FILE__).\u00a0\"\/eio-file.tmp\";touch($tmp_filename);function\u00a0my_res_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0var_dump($result);}function\u00a0my_open_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0eio_close($result);\u00a0\u00a0\u00a0\u00a0eio_event_loop();\u00a0\u00a0\u00a0\u00a0@unlink($data);}eio_lstat($tmp_filename,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_res_cb\",\u00a0\"eio_lstat\");eio_open($tmp_filename,\u00a0EIO_O_RDONLY,\u00a0NULL,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_open_cb\",\u00a0$tmp_filename);eio_event_loop();?>           The above example will output something similar to:      string(9) \"eio_lstat\" array(12) {  [\"st_dev\"]=>   int(2050)   [\"st_ino\"]=>   int(2099197)   [\"st_mode\"]=>   int(33188)   [\"st_nlink\"]=>   int(1)   [\"st_uid\"]=>   int(1000)   [\"st_gid\"]=>   int(100)   [\"st_rdev\"]=>   int(0)   [\"st_blksize\"]=>   int(4096)   [\"st_blocks\"]=>   int(0)   [\"st_atime\"]=>   int(1318235777)   [\"st_mtime\"]=>   int(1318235777)   [\"st_ctime\"]=>   int(1318235777) }                  See Also       eio_stat    eio_fstat"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nop.php","title":"eio_nop","description":"eio_nop   (PECL eio >= 0.0.1dev)eio_nop \u2014 Does nothing, except go through the whole request cycle.         Description       resource eio_nop     ([ int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )        eio_nop() does nothing, except go through the whole    request cycle. Could be useful in debugging.             Parameters              pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_nop() returns request resource on success or FALSE on error.             See Also       eio_busy"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-mknod.php","title":"eio_mknod","description":"eio_mknod   (PECL eio >= 0.0.1dev)eio_mknod \u2014 Create a special or ordinary file.         Description       resource eio_mknod     ( string $path    , int $mode    , int $dev    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL    ]]] )       eio_mknod() creates ordinary or special(often) file.       WarningThis function is currently not documented; only its argument list is available.           Parameters              path                  Path for the new node(file).                           mode                   Specifies both the permissions to use and the type of node to be       created. It should be a combination (using bitwise OR) of one of the       file types listed below and the permissions for the new node(e.g. 0640).        Possible file types are: EIO_S_IFREG(regular file),       EIO_S_IFCHR(character file),       EIO_S_IFBLK(block special file),       EIO_S_IFIFO(FIFO - named pipe) and       EIO_S_IFSOCK(UNIX domain socket).        To specify permissions EIO_S_I* constants could be       used.                           dev                  If  the  file type is EIO_S_IFCHR or      EIO_S_IFBLK then dev specifies the major and minor      numbers of the newly created device special file. Otherwise      dev ignored. See mknod(2) man page for      details.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_mknod() returns request resource on success or FALSE on error.            Examples       Example #1 eio_mknod() example      <?php\/\/\u00a0FIFO\u00a0name$temp_filename\u00a0=\u00a0\"\/tmp\/eio-temp-fifo\";\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_mknod()\u00a0finishes\u00a0*\/function\u00a0my_mknod_callback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0$s\u00a0=\u00a0stat($data);\u00a0\u00a0\u00a0\u00a0var_dump($s);\u00a0\u00a0\u00a0\u00a0if\u00a0($result\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"eio_mknod_ok\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0@unlink($data);}eio_mknod($temp_filename,\u00a0EIO_S_IFIFO,\u00a00,\u00a0\u00a0\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_mknod_callback\",\u00a0$temp_filename);eio_event_loop();?>           The above example will output something similar to:      array(26) {   [0]=>   int(17)   [1]=>   int(2337608)   [2]=>   int(4096)   [3]=>   int(1)   [4]=>   int(1000)   [5]=>   int(100)   [6]=>   int(0)   [7]=>   int(0)   [8]=>   int(1318241261)   [9]=>   int(1318241261)   [10]=>   int(1318241261)   [11]=>   int(4096)   [12]=>   int(0)   [\"dev\"]=>   int(17)   [\"ino\"]=>   int(2337608)   [\"mode\"]=>   int(4096)   [\"nlink\"]=>   int(1)   [\"uid\"]=>   int(1000)   [\"gid\"]=>   int(100)   [\"rdev\"]=>   int(0)   [\"size\"]=>   int(0)   [\"atime\"]=>   int(1318241261)   [\"mtime\"]=>   int(1318241261)   [\"ctime\"]=>   int(1318241261)   [\"blksize\"]=>   int(4096)   [\"blocks\"]=>   int(0) } eio_mknod_ok                 See Also       eio_open"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nready.php","title":"eio_nready","description":"eio_nready   (PECL eio >= 0.0.1dev)eio_nready \u2014 Returns number of not-yet handled requests         Description       int eio_nready     ( void    )                  Parameters   This function has no parameters.         Return Values       eio_nready() returns number of not-yet handled requests             See Also       eio_nreqs    eio_nready    eio_nthreads"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-npending.php","title":"eio_npending","description":"eio_npending   (PECL eio >= 0.0.1dev)eio_npending \u2014 Returns number of finished, but unhandled requests         Description       int eio_npending     ( void    )       eio_npending() returns number of finished, but unhandled requests             Parameters   This function has no parameters.         Return Values       eio_npending() returns number of finished, but unhandled    requests.             See Also       eio_nreqs    eio_nready    eio_nthreads"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nreqs.php","title":"eio_nreqs","description":"eio_nreqs   (PECL eio >= 0.0.1dev)eio_nreqs \u2014 Returns number of requests to be processed         Description       ReturnType eio_nreqs     ( void    )        eio_nreqs() could be called in a custom loop calling    eio_poll().             Parameters   This function has no parameters.         Return Values       eio_nreqs() returns number of requests to be processed.            Examples       Example #1 eio_nreqs() example      <?phpfunction\u00a0res_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0var_dump($result);}eio_nop(EIO_PRI_DEFAULT,\u00a0\"res_cb\",\u00a0\"1\");eio_nop(EIO_PRI_DEFAULT,\u00a0\"res_cb\",\u00a0\"2\");eio_nop(EIO_PRI_DEFAULT,\u00a0\"res_cb\",\u00a0\"3\");while\u00a0(eio_nreqs())\u00a0{\u00a0\u00a0\u00a0\u00a0eio_poll();}?>           The above example will output something similar to:      string(1) \"1\" int(0) string(1) \"3\" int(0) string(1) \"2\" int(0)                  See Also       eio_poll    eio_nready"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nthreads.php","title":"eio_nthreads","description":"eio_nthreads   (PECL eio >= 0.0.1dev)eio_nthreads \u2014 Returns number of threads currently in use         Description       int eio_nthreads     ( void    )                  Parameters   This function has no parameters.         Return Values       eio_nthreads() returns number of threads currently in    use.             See Also       eio_npending    eio_nready    eio_nreqs"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-open.php","title":"eio_open","description":"eio_open   (PECL eio >= 0.0.1dev)eio_open \u2014 Opens a file         Description       resource eio_open     ( string $path    , int $flags    , int $mode    , int $pri    , mixed $callback    [, mixed $data = NULL   ] )       eio_open() opens file specified by   path in access mode mode with              Parameters              path                  Path of the file to be opened.      Warning      In some SAPIs(e.g. PHP-FPM) it could fail, if you      don&#039;t specify full path.                                 flags           One of EIO_O_* constants, or their     combinations. EIO_O_* constants have the same     meaning, as their corresponding O_* counterparts     defined in fnctl.h C header file. Default is     EIO_O_RDWR.                          mode           One of EIO_S_I* constants, or their combination     (via bitwise OR operator). The constants have the same meaning as their     S_I* counterparts defined in \u00bb\u00a0sys\/stat.h     C header file. Required, if a file is created. Otherwise ignored.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                   Arbitrary variable passed to callback.                              Return Values       eio_open() returns file descriptor in    result argument of callback    on success; otherwise, result is equal to -1.            Examples       Example #1 eio_open() example      <?php$temp_filename\u00a0=\u00a0\"eio-temp-file.tmp\";\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_close()\u00a0finishes\u00a0*\/function\u00a0my_close_cb($data,\u00a0$result)\u00a0{\u00a0\/\/\u00a0Zero\u00a0indicates\u00a0success\u00a0\u00a0\u00a0\u00a0var_dump($result\u00a0==\u00a00);\u00a0@unlink($data);}\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_open()\u00a0finishes\u00a0*\/function\u00a0my_file_opened_callback($data,\u00a0$result)\u00a0{\u00a0\/\/\u00a0$result\u00a0should\u00a0contain\u00a0the\u00a0file\u00a0descriptor\u00a0\u00a0\u00a0\u00a0var_dump($result\u00a0>\u00a00);\u00a0\u00a0\u00a0\u00a0if\u00a0($result\u00a0>\u00a00)\u00a0{\u00a0\u00a0\/\/\u00a0Close\u00a0the\u00a0file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eio_close($result,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_close_cb\",\u00a0$data);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eio_event_loop();\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Create\u00a0new\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing\/\/\u00a0Deny\u00a0group\u00a0and\u00a0others\u00a0to\u00a0do\u00a0anything\u00a0with\u00a0that\u00a0fileeio_open($temp_filename,\u00a0EIO_O_CREAT\u00a0|\u00a0EIO_O_RDWR,\u00a0EIO_S_IRUSR\u00a0|\u00a0EIO_S_IWUSR,\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_file_opened_callback\",\u00a0$temp_filename);eio_event_loop();?>           The above example will output something similar to:      bool(true) bool(true)                  See Also       eio_mknod"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-poll.php","title":"eio_poll","description":"eio_poll   (PECL eio >= 0.0.1dev)eio_poll \u2014 Can be to be called whenever there are pending requests that need finishing.         Description       int eio_poll     ( void    )       eio_poll() can be used to implement special event loop.   For this eio_nreqs() could be used to test if there are   unprocessed requests.       Note: Applicable only when implementing userspace event loop.          Parameters   This function has no parameters.         Return Values      If any request invocation returns a non-zero value, returns that value.   Otherwise, it returns 0.            Examples       Example #1 eio_poll() example      <?phpfunction\u00a0res_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0var_dump($result);}eio_nop(EIO_PRI_DEFAULT,\u00a0\"res_cb\",\u00a0\"1\");eio_nop(EIO_PRI_DEFAULT,\u00a0\"res_cb\",\u00a0\"2\");eio_nop(EIO_PRI_DEFAULT,\u00a0\"res_cb\",\u00a0\"3\");while\u00a0(eio_nreqs())\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Some\u00a0specific\u00a0IPC\u00a0or\u00a0so\u00a0\u00a0\u00a0\u00a0eio_poll();}?>           The above example will output something similar to:      string(1) \"1\" int(0) string(1) \"3\" int(0) string(1) \"2\" int(0)                 See Also       eio_nreqs"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-readahead.php","title":"eio_readahead","description":"eio_readahead   (PECL eio >= 0.0.1dev)eio_readahead \u2014 Perform file readahead into page cache         Description       resource eio_readahead     ( int $fd    , int $offset    , int $length    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_readahead() populates the page cache with data from a file so that subsequent reads from   that file will not block on disk I\/O. See READAHEAD(2) man page for details.             Parameters              fd                  The file descriptor                           offset                  Starting point from which data is to be read.                           length                  Number of bytes to be read.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_readahead() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-readlink.php","title":"eio_readlink","description":"eio_readlink   (PECL eio >= 0.0.1dev)eio_readlink \u2014 Read value of a symbolic link.         Description       resource eio_readlink     ( string $path    , int $pri    , mixed $callback    [, string $data = NULL   ] )                  Parameters              path                  Source symbolic link path                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_readlink() returns request resource on success or FALSE on error.            Examples       Example #1 eio_readlink() example      <?php$filename\u00a0=\u00a0dirname(__FILE__).\"\/symlink.dat\";touch($filename);$link\u00a0=\u00a0dirname(__FILE__).\"\/symlink.link\";$hardlink\u00a0=\u00a0dirname(__FILE__).\"\/hardlink.link\";function\u00a0my_hardlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$link,\u00a0$filename;\u00a0\u00a0\u00a0\u00a0var_dump(file_exists($data)\u00a0&&\u00a0!is_link($data));\u00a0\u00a0\u00a0\u00a0@unlink($data);\u00a0\u00a0\u00a0\u00a0eio_symlink($filename,\u00a0$link,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_symlink_cb\",\u00a0$link);}function\u00a0my_symlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$link,\u00a0$filename;\u00a0\u00a0\u00a0\u00a0var_dump(file_exists($data)\u00a0&&\u00a0is_link($data));\u00a0\u00a0\u00a0\u00a0if\u00a0(!eio_readlink($data,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_readlink_cb\",\u00a0NULL))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($link);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($filename);\u00a0\u00a0\u00a0\u00a0}}function\u00a0my_readlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$filename,\u00a0$link;\u00a0\u00a0\u00a0\u00a0var_dump($result);\u00a0\u00a0\u00a0\u00a0@unlink($link);\u00a0\u00a0\u00a0\u00a0@unlink($filename);}eio_link($filename,\u00a0$hardlink,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_hardlink_cb\",\u00a0$hardlink);eio_event_loop();?>           The above example will output something similar to:      bool(true) bool(true) string(16) \"\/tmp\/symlink.dat\"                  See Also       eio_symlink"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-readdir.php","title":"eio_readdir","description":"eio_readdir   (PECL eio >= 0.0.1dev)eio_readdir \u2014 Reads through a whole directory         Description       resource eio_readdir     ( string $path    , int $flags    , int $pri    , mixed $callback    [, string $data = NULL   ] )        Reads through a whole directory(via the opendir, readdir and    closedir system calls) and returns either the names or an array in    result argument of callback    function, depending on the flags argument.             Parameters              path                   Directory path.                           flags                   Combination of EIO_READDIR_* constants.                           pri            The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback              callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                   Arbitrary variable passed to callback.                              Return Values       eio_readdir() returns request resource on success, or    FALSE on error. Sets result argument of    callback function according to    flags:                                     EIO_READDIR_DENTS       (integer)                            eio_readdir() flag. If specified, the result argument of the callback        becomes an array with the following keys:        &#039;names&#039; - array of directory names        &#039;dents&#039; - array of struct        eio_dirent-like arrays having the following keys each:        &#039;name&#039; - the directory name;        &#039;type&#039; - one of EIO_DT_*        constants;        &#039;inode&#039; - the inode number, if available, otherwise        unspecified;                                       EIO_READDIR_DIRS_FIRST       (integer)                           When this flag is specified, the names will be returned in an order       where likely directories come first, in optimal stat order.                                       EIO_READDIR_STAT_ORDER       (integer)                           When this flag is specified, then the names will be returned in an order       suitable for stat&#039;ing each one. When planning to       stat() all files in the given directory, the       returned order will likely be       fastest.                                       EIO_READDIR_FOUND_UNKNOWN       (integer)                                                       Node types:                          EIO_DT_UNKNOWN       (integer)                           Unknown node type(very common). Further stat() needed.                                       EIO_DT_FIFO       (integer)                           FIFO node type                                       EIO_DT_CHR       (integer)                           Node type                                       EIO_DT_MPC       (integer)                           Multiplexed char device (v7+coherent) node type                                       EIO_DT_DIR       (integer)                           Directory node type                                       EIO_DT_NAM       (integer)                           Xenix special named file node type                                       EIO_DT_BLK       (integer)                           Node type                                       EIO_DT_MPB       (integer)                           Multiplexed block device (v7+coherent)                                       EIO_DT_REG       (integer)                           Node type                                       EIO_DT_NWK       (integer)                                                           EIO_DT_CMP       (integer)                           HP-UX network special node type                                       EIO_DT_LNK       (integer)                           Link node type                                       EIO_DT_SOCK       (integer)                           Socket node type                                       EIO_DT_DOOR       (integer)                           Solaris door node type                                       EIO_DT_WHT       (integer)                           Node type                                       EIO_DT_MAX       (integer)                           Highest node type value                                           Examples       Example #1 eio_readdir() example      <?php\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_readdir()\u00a0finishes\u00a0*\/function\u00a0my_readdir_callback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0__FUNCTION__,\u00a0\"\u00a0called\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"data:\u00a0\";\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"result:\u00a0\";\u00a0var_dump($result);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\n\";}eio_readdir(\"\/var\/spool\/news\",\u00a0EIO_READDIR_STAT_ORDER\u00a0|\u00a0EIO_READDIR_DIRS_FIRST,\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_readdir_callback\");eio_event_loop();?>           The above example will output something similar to:      my_readdir_callback called data: NULL result: array(2) {  [\"names\"]=>   array(7) {    [0]=>     string(7) \"archive\"     [1]=>     string(8) \"articles\"     [2]=>     string(8) \"incoming\"     [3]=>     string(7) \"innfeed\"     [4]=>     string(8) \"outgoing\"     [5]=>     string(8) \"overview\"     [6]=>     string(3) \"tmp\"   }  [\"dents\"]=>   array(7) {    [0]=>     array(3)     {      [\"name\"]=>       string(7)       \"archive\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393265)     }    [1]=>     array(3)     {      [\"name\"]=>       string(8)       \"articles\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393266)     }    [2]=>     array(3)     {      [\"name\"]=>       string(8)       \"incoming\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393267)     }    [3]=>     array(3)     {      [\"name\"]=>       string(7)       \"innfeed\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393269)     }    [4]=>     array(3)     {      [\"name\"]=>       string(8)       \"outgoing\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393270)     }    [5]=>     array(3)     {      [\"name\"]=>       string(8)       \"overview\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393271)     }    [6]=>     array(3)     {      [\"name\"]=>       string(3)       \"tmp\"       [\"type\"]=>       int(4)       [\"inode\"]=>       int(393272)     }   } }"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-read.php","title":"eio_read","description":"eio_read   (PECL eio >= 0.0.1dev)eio_read \u2014 Read from a file descriptor at given offset.         Description       resource eio_read     ( int $fd    , int $length    , int $offset    , int $pri    , mixed $callback    [, mixed $data = NULL   ] )        eio_read() reads up to length    bytes from fd file descriptor at    offset. The read bytes are stored in    result argument of callback.             Parameters              fd                  The file descriptor                           length                  Maximum number of bytes to read.                           offset                  Offset within the file.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values      eio_read() stores read bytes in   result argument of callback   function.            Examples       Example #1 eio_read() example      <?php\/\/\u00a0Open\u00a0a\u00a0temporary\u00a0file\u00a0and\u00a0write\u00a0some\u00a0bytes\u00a0there$temp_filename\u00a0=\u00a0\"eio-temp-file.tmp\";$fp\u00a0=\u00a0fopen($temp_filename,\u00a0\"w\");fwrite($fp,\u00a0\"1234567890\");fclose($fp);\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_read()\u00a0is\u00a0done\u00a0*\/function\u00a0my_read_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$temp_filename;\u00a0\/\/\u00a0Output\u00a0read\u00a0bytes\u00a0\u00a0\u00a0\u00a0var_dump($result);\u00a0\/\/\u00a0Close\u00a0file\u00a0\u00a0\u00a0\u00a0eio_close($data);\u00a0\u00a0\u00a0\u00a0eio_event_loop();\u00a0\/\/\u00a0Remove\u00a0temporary\u00a0file\u00a0\u00a0\u00a0\u00a0@unlink($temp_filename);}\/*\u00a0Is\u00a0called\u00a0when\u00a0eio_open()\u00a0is\u00a0done\u00a0*\/function\u00a0my_file_opened_callback($data,\u00a0$result)\u00a0{\u00a0\/\/\u00a0$result\u00a0should\u00a0contain\u00a0the\u00a0file\u00a0descriptor\u00a0\u00a0\u00a0\u00a0if\u00a0($result\u00a0>\u00a00)\u00a0{\u00a0\u00a0\/\/\u00a0Read\u00a05\u00a0bytes\u00a0starting\u00a0from\u00a0third\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eio_read($result,\u00a05,\u00a02,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_read_cb\",\u00a0$result);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eio_event_loop();\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\/\/\u00a0eio_open()\u00a0failed\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unlink($data);\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Open\u00a0the\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writingeio_open($temp_filename,\u00a0EIO_O_RDWR,\u00a0NULL,\u00a0\u00a0\u00a0\u00a0EIO_PRI_DEFAULT,\u00a0\"my_file_opened_callback\",\u00a0$temp_filename);eio_event_loop();?>           The above example will output something similar to:      string(5) \"34567\"                  See Also       eio_open    eio_write    eio_close    eio_event_loop"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-realpath.php","title":"eio_realpath","description":"eio_realpath   (PECL eio >= 0.0.1dev)eio_realpath \u2014 Get the canonicalized absolute pathname.         Description       resource eio_realpath     ( string $path    , int $pri    , mixed $callback    [, string $data = NULL   ] )       eio_realpath() returns the canonicalized absolute   pathname in result argument of   callback function.             Parameters              path                  Short pathname                            pri                                        callback                                        data                                           Return Values                Examples       Example #1 eio_realpath() example      <?phpvar_dump(getcwd());function\u00a0my_realpath_allback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($result);}eio_realpath(\"..\/\",\u00a0EIO_PRI_DEFAULT,\u00a0\"my_realpath_allback\");eio_event_loop();?>           The above example will output something similar to:      string(12) \"\/home\/ruslan\" string(5) \"\/home\""},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-rmdir.php","title":"eio_rmdir","description":"eio_rmdir   (PECL eio >= 0.0.1dev)eio_rmdir \u2014 Remove a directory         Description       ReturnType eio_rmdir     ( string $path    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )        eio_rmdir() removes a directory.             Parameters              path                  Directory path                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_rmdir() returns request resource on success or FALSE on error.            Examples       Example #1 eio_rmdir() example      <?php$temp_dirname\u00a0=\u00a0\"eio-temp-dir\";mkdir($temp_dirname);function\u00a0my_rmdir_callback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($result\u00a0==\u00a00\u00a0&&\u00a0!file_exists($data))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"eio_rmdir_ok\";\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0if\u00a0(file_exists($data))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rmdir($data);\u00a0\u00a0\u00a0\u00a0}}eio_rmdir($temp_dirname,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_rmdir_callback\",\u00a0$temp_dirname);eio_event_loop();?>           The above example will output something similar to:      eio_rmdir_ok                  See Also       eio_mkdir"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-rename.php","title":"eio_rename","description":"eio_rename   (PECL eio >= 0.0.1dev)eio_rename \u2014 Change the name or location of a file.         Description       resource eio_rename     ( string $path    , string $new_path    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )        eio_rename() renames or moves a file to new location.             Parameters              path                  Source path                           new_path                  Target path                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_rename() returns request resource on success or FALSE on error.            Examples       Example #1 eio_rename() example      <?php$filename\u00a0=\u00a0dirname(__FILE__).\"\/eio-temp-file.dat\";touch($filename);$new_filename\u00a0=\u00a0dirname(__FILE__).\"\/eio-temp-file-new.dat\";function\u00a0my_rename_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$filename,\u00a0$new_filename;\u00a0\u00a0\u00a0\u00a0if\u00a0($result\u00a0==\u00a00\u00a0&&\u00a0!file_exists($filename)\u00a0&&\u00a0file_exists($new_filename))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($new_filename);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"eio_rename_ok\";\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($filename);\u00a0\u00a0\u00a0\u00a0}}eio_rename($filename,\u00a0$new_filename,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_rename_cb\",\u00a0$filename);eio_event_loop();?>           The above example will output something similar to:      eio_rename_ok"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-idle.php","title":"eio_set_max_idle","description":"eio_set_max_idle   (PECL eio >= 0.0.1dev)eio_set_max_idle \u2014 Set maximum number of idle threads.         Description       void eio_set_max_idle     ( int $nthreads    )                  Parameters              nthreads                  Number of idle threads.                              Return Values      No value is returned.            See Also       eio_set_min_parallel    eio_set_max_parallel"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-sendfile.php","title":"eio_sendfile","description":"eio_sendfile   (PECL eio >= 0.0.1dev)eio_sendfile \u2014 Transfer data between file descriptors         Description       ReturnType eio_sendfile     ( string $out_fd    , string $in_fd    , string $offset    , string $length    [, string $pri    [, string $callback    [, string $data   ]]] )        eio_sendfile() copies  data between one file descriptor    and another. See SENDFILE(2) man page for details.             Parameters              out_fd                  Output file descriptor. Should be opened for writing.                           in_fd                  Input file descriptor. Should be opened for reading.                           offset                  Offset within the source file.                           length                  Number of bytes to copy.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_sendfile() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-parallel.php","title":"eio_set_max_parallel","description":"eio_set_max_parallel   (PECL eio >= 0.0.1dev)eio_set_max_parallel \u2014 Set maximum parallel threads         Description       void eio_set_max_parallel     ( int $nthreads    )                  Parameters              nthreads                  Number of parallel threads                              Return Values      No value is returned.            See Also       eio_set_min_parallel"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-poll-time.php","title":"eio_set_max_poll_time","description":"eio_set_max_poll_time   (PECL eio >= 0.0.1dev)eio_set_max_poll_time \u2014 Set maximum poll time         Description       void eio_set_max_poll_time     ( double $nseconds    )       Polling stops, if poll took longer than nseconds   seconds.             Parameters              nseconds                  Number of seconds                              Return Values      No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-poll-reqs.php","title":"eio_set_max_poll_reqs","description":"eio_set_max_poll_reqs   (PECL eio >= 0.0.1dev)eio_set_max_poll_reqs \u2014 Set maximum number of requests processed in a poll.         Description       void eio_set_max_poll_reqs     ( int $nreqs    )                  Parameters              nreqs                  Number of requests                              Return Values      No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-min-parallel.php","title":"eio_set_min_parallel","description":"eio_set_min_parallel   (PECL eio >= 0.0.1dev)eio_set_min_parallel \u2014 Set minimum parallel thread number         Description       void eio_set_min_parallel     ( string $nthreads    )                  Parameters              nthreads                  Number of parallel threads.                              Return Values      No value is returned.             See Also       eio_set_max_parallel"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-stat.php","title":"eio_stat","description":"eio_stat   (PECL eio >= 0.0.1dev)eio_stat \u2014 Get file status         Description       resource eio_stat     ( string $path    , int $pri    , mixed $callback    [, mixed $data = NULL   ] )        eio_stat() returns file status information in    result argument of callback             Parameters              path                  The file path                           pri            The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_stat() returns request resource on success or    FALSE on error. On success assigns result argument of    callback to an array.            Examples       Example #1 eio_stat() example      <?php$tmp_filename\u00a0=\u00a0\"eio-file.tmp\";touch($tmp_filename);function\u00a0my_res_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0var_dump($result);}function\u00a0my_open_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0eio_close($result);\u00a0\u00a0\u00a0\u00a0eio_event_loop();\u00a0\u00a0\u00a0\u00a0@unlink($data);}eio_stat($tmp_filename,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_res_cb\",\u00a0\"eio_stat\");eio_open($tmp_filename,\u00a0EIO_O_RDONLY,\u00a0NULL,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_open_cb\",\u00a0$tmp_filename);eio_event_loop();?>           The above example will output something similar to:      string(8) \"eio_stat\" array(12) {   [\"st_dev\"]=>   int(2050)   [\"st_ino\"]=>   int(2489173)   [\"st_mode\"]=>   int(33188)   [\"st_nlink\"]=>   int(1)   [\"st_uid\"]=>   int(1000)   [\"st_gid\"]=>   int(100)   [\"st_rdev\"]=>   int(0)   [\"st_blksize\"]=>   int(4096)   [\"st_blocks\"]=>   int(0)   [\"st_atime\"]=>   int(1318250380)   [\"st_mtime\"]=>   int(1318250380)   [\"st_ctime\"]=>   int(1318250380) }                  See Also       eio_lstat    eio_fstat"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-statvfs.php","title":"eio_statvfs","description":"eio_statvfs   (PECL eio >= 0.0.1dev)eio_statvfs \u2014 Get file system statistics         Description       resource eio_statvfs     ( string $path    , int $pri    , mixed $callback    [, mixed $data   ] )       eio_statvfs() returns file system statistics information in   result argument of callback            Parameters              path                  Pathname of any file within the mounted file system                           pri            The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values      eio_statvfs() returns request resource on success or   FALSE on error. On success assigns result argument of   callback to an array.            Examples       Example #1 eio_statvfs() example      <?php$tmp_filename\u00a0=\u00a0'\/tmp\/eio-file.tmp';touch($tmp_filename);function\u00a0my_statvfs_callback($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($data);\u00a0\u00a0\u00a0\u00a0var_dump($result);\u00a0@unlink($data);}eio_statvfs($tmp_filename,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_statvfs_callback\",\u00a0$tmp_filename);eio_event_loop();?>           The above example will output something similar to:      string(17) \"\/tmp\/eio-file.tmp\" array(11) {   [\"f_bsize\"]=>   int(4096)   [\"f_frsize\"]=>   int(4096)   [\"f_blocks\"]=>   int(262144)   [\"f_bfree\"]=>   int(262111)   [\"f_bavail\"]=>   int(262111)   [\"f_files\"]=>   int(1540815)   [\"f_ffree\"]=>   int(1540743)   [\"f_favail\"]=>   int(1540743)   [\"f_fsid\"]=>   int(0)   [\"f_flag\"]=>   int(4102)   [\"f_namemax\"]=>   int(255) }"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-syncfs.php","title":"eio_syncfs","description":"eio_syncfs   (PECL eio >= 0.0.1dev)eio_syncfs \u2014 Calls Linux&#039; syncfs syscall, if available         Description       resource eio_syncfs     ( string $fd    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )                  Parameters              fd                  File descriptor                            pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_syncfs() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-sync.php","title":"eio_sync","description":"eio_sync   (PECL eio >= 0.0.1dev)eio_sync \u2014 Commit buffer cache to disk         Description       resource eio_sync     ( void    )                  Parameters   This function has no parameters.         Return Values       eio_sync() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-sync-file-range.php","title":"eio_sync_file_range","description":"eio_sync_file_range   (PECL eio >= 0.0.1dev)eio_sync_file_range \u2014 Sync a file segment with disk         Description       resource eio_sync_file_range     ( int $fd    , int $offset    , int $nbytes    , int $flags    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )        eio_sync_file_range() permits fine control when synchronizing the open file referred to by the file  descriptor fd with disk.             Parameters              fd                  File descriptor                           offset                  The starting byte of the file range to be synchronized                           nbytes                  Specifies the length of the range to be synchronized, in bytes. If      nbytes is zero, then all bytes from offset through      to the end of file are synchronized.                           flags                  A bit-mask. Can include any of the following values:      EIO_SYNC_FILE_RANGE_WAIT_BEFORE,      EIO_SYNC_FILE_RANGE_WRITE,      EIO_SYNC_FILE_RANGE_WAIT_AFTER. These flags have      the same meaning as their SYNC_FILE_RANGE_*      counterparts(see SYNC_FILE_RANGE(2) man page).                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_sync_file_range() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-symlink.php","title":"eio_symlink","description":"eio_symlink   (PECL eio >= 0.0.1dev)eio_symlink \u2014 Create a symbolic link         Description       ReturnType eio_symlink     ( string $path    , string $new_path    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL    ]]] )       eio_symlink() creates a symbolic link   new_path to path.             Parameters              path                  Source path                           new_path                  Target path                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_symlink() returns request resource on success or FALSE on error.            Examples       Example #1 eio_symlink() example      <?php$filename\u00a0=\u00a0dirname(__FILE__).\"\/symlink.dat\";touch($filename);$link\u00a0=\u00a0dirname(__FILE__).\"\/symlink.link\";function\u00a0my_symlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$link,\u00a0$filename;\u00a0\u00a0\u00a0\u00a0var_dump(file_exists($data)\u00a0&&\u00a0is_link($data));\u00a0\u00a0\u00a0\u00a0if\u00a0(!eio_readlink($data,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_readlink_cb\",\u00a0NULL))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($link);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@unlink($filename);\u00a0\u00a0\u00a0\u00a0}}function\u00a0my_readlink_cb($data,\u00a0$result)\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$filename,\u00a0$link;\u00a0\u00a0\u00a0\u00a0var_dump($result);\u00a0\u00a0\u00a0\u00a0@unlink($link);\u00a0\u00a0\u00a0\u00a0@unlink($filename);}eio_symlink($filename,\u00a0$link,\u00a0EIO_PRI_DEFAULT,\u00a0\"my_symlink_cb\",\u00a0$link);eio_event_loop();?>           The above example will output something similar to:      bool(true) string(16) \"\/tmp\/symlink.dat\"                  See Also       eio_link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-truncate.php","title":"eio_truncate","description":"eio_truncate   (PECL eio >= 0.0.1dev)eio_truncate \u2014 Truncate a file         Description       resource eio_truncate     ( string $path    , int $offset    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_truncate() causes the regular file named by path to be truncated to   a size of precisely length bytes             Parameters              path                  File path                           offset                  Offset from beginning of the file.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_busy() returns request resource on success or FALSE on error.            See Also       eio_ftruncate"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-unlink.php","title":"eio_unlink","description":"eio_unlink   (PECL eio >= 0.0.1dev)eio_unlink \u2014 Delete a name and possibly the file it refers to         Description       ReturnType eio_unlink     ( string $path    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )       eio_unlink() deletes  a  name from the file system.             Parameters              path                  Path to file                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_unlink() returns request resource on success or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-utime.php","title":"eio_utime","description":"eio_utime   (PECL eio >= 0.0.1dev)eio_utime \u2014 Change file last access and modification times.         Description       resource eio_utime     ( string $path    , int $atime    , int $mtime    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]] )                  Parameters              path                  Path to the file.                           atime                  Access time                           mtime                  Modification time                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_utime() returns request resource on success or FALSE on error.            See Also       eio_futime"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-write.php","title":"eio_write","description":"eio_write   (PECL eio >= 0.0.1dev)eio_write \u2014 Write to file         Description       resource eio_write     ( int $fd    , string &$str    [, int $length    [, int $offset    [, int $pri = EIO_PRI_DEFAULT    [, mixed $callback = NULL    [, mixed $data = NULL   ]]]]] )       eio_write() writes up to length   bytes from str at offset   offset from the beginning of the file.             Parameters              fd                  The file descriptor, e.g. returned by eio_open()                           str                  Source string                           length                  Maximum number of bytes to write.                           offset                  Offset from the beginning of file.                           pri           The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If NULL passed, pri internally is set to EIO_PRI_DEFAULT.                       callback             callback function is called when the request is done.  It should match the following prototype:  void\u00a0callback($data,\u00a0$result);   $data is custom data passed to the request. $result contains request-specific result value; basically, the value returned by corresponding system call.                       data                  Arbitrary variable passed to callback.                              Return Values       eio_write() returns request resource on success or FALSE on error.            See Also       eio_open"},{"url":"http:\/\/www.php.net\/manual\/en\/function.escapeshellcmd.php","title":"escapeshellcmd","description":"escapeshellcmd   (PHP 4, PHP 5)escapeshellcmd \u2014 Escape shell metacharacters         Description       string escapeshellcmd     ( string $command    )        escapeshellcmd() escapes any characters in a    string that might be used to trick a shell command into executing    arbitrary commands.  This function should be used to make sure    that any data coming from user input is escaped before this data    is passed to the exec() or    system() functions, or to the backtick    operator.          Following characters are preceded by a backslash:    #&;`|*?~<>^()[]{}$\\, \\x0A    and \\xFF. &#039; and \"    are escaped only if they are not paired. In Windows, all these characters    plus  are replaced by a space instead.            Parameters                    command                      The command that will be escaped.                                     Return Values       The escaped string.            Examples            Example #1 escapeshellcmd() example       <?php\/\/\u00a0We\u00a0allow\u00a0arbitrary\u00a0number\u00a0of\u00a0arguments\u00a0intentionaly\u00a0here.$command\u00a0=\u00a0'.\/configure\u00a0'.$_POST['configure_options'];$escaped_command\u00a0=\u00a0escapeshellcmd($command);\u00a0system($escaped_command);?>                         Warning           escapeshellcmd() should be used on the whole      command string, and it still allows the attacker to pass      arbitrary number of arguments. For escaping a single argument       escapeshellarg() should be used instead.                  See Also            escapeshellarg() - Escape a string to be used as a shell argument     exec() - Execute an external program     popen() - Opens process file pointer     system() - Execute an external program and display the output     backtick operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.escapeshellarg.php","title":"escapeshellarg","description":"escapeshellarg   (PHP 4 >= 4.0.3, PHP 5)escapeshellarg \u2014 Escape a string to be used as a shell argument         Description       string escapeshellarg     ( string $arg    )        escapeshellarg() adds single quotes around a string    and quotes\/escapes any existing single quotes allowing you to pass a    string directly to a shell function and having it be treated as a single    safe argument.  This function should be used to escape individual    arguments to shell functions coming from user input.  The shell functions    include exec(), system() and the    backtick operator.            Parameters                    arg                      The argument that will be escaped.                                     Return Values       The escaped string.            Examples            Example #1 escapeshellarg() example       <?phpsystem('ls\u00a0'.escapeshellarg($dir));?>                        See Also            escapeshellcmd() - Escape shell metacharacters     exec() - Execute an external program     popen() - Opens process file pointer     system() - Execute an external program and display the output     backtick operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.passthru.php","title":"passthru","description":"passthru   (PHP 4, PHP 5)passthru \u2014 Execute an external program and display raw output         Description       void passthru     ( string $command    [, int &$return_var   ] )        The passthru() function is similar to the    exec() function in that it executes a    command. This function    should be used in place of exec() or    system() when the output from the Unix command    is binary data which needs to be passed directly back to the    browser.  A common use for this is to execute something like the    pbmplus utilities that can output an image stream directly.  By    setting the Content-type to image\/gif and    then calling a pbmplus program to output a gif, you can create    PHP scripts that output images directly.            Parameters                    command                      The command that will be executed.                                return_var                      If the return_var argument is present, the         return status of the Unix command will be placed here.                                     Return Values       No value is returned.            Notes   WarningWhen allowing user-supplied data to be passed to this function, use escapeshellarg() or escapeshellcmd() to ensure that users cannot trick the system into executing arbitrary commands.   Note: If a program is started with this function, in order for it to continue running in the background, the output of the program must be redirected to a file or another output stream. Failing to do so will cause PHP to hang until the execution of the program ends.   Note: When safe mode is enabled, you can only execute files within the safe_mode_exec_dir. For practical reasons, it is currently not allowed to have .. components in the path to the executable.   WarningWith safe mode enabled, the command string is escaped with escapeshellcmd(). Thus, echo y | echo x becomes echo y \\| echo x.         See Also            exec() - Execute an external program     system() - Execute an external program and display the output     popen() - Opens process file pointer     escapeshellcmd() - Escape shell metacharacters     backtick operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.exec.php","title":"exec","description":"exec   (PHP 4, PHP 5)exec \u2014 Execute an external program         Description       string exec     ( string $command    [, array &$output    [, int &$return_var   ]] )        exec() executes the given    command.            Parameters                    command                      The command that will be executed.                                output                      If the output argument is present, then the        specified array will be filled with every line of output from the        command.  Trailing whitespace, such as \\n, is not        included in this array.  Note that if the array already contains some        elements, exec() will append to the end of the array.        If you do not want the function to append elements, call        unset() on the array before passing it to        exec().                                return_var                      If the return_var argument is present        along with the output argument, then the        return status of the executed command will be written to this        variable.                                     Return Values       The last line from the result of the command.  If you need to execute a     command and have all the data from the command passed directly back without     any interference, use the passthru() function.          To get the output of the executed command, be sure to set and use the    output parameter.            Examples            Example #1 An exec() example       <?php\/\/\u00a0outputs\u00a0the\u00a0username\u00a0that\u00a0owns\u00a0the\u00a0running\u00a0php\/httpd\u00a0process\/\/\u00a0(on\u00a0a\u00a0system\u00a0with\u00a0the\u00a0\"whoami\"\u00a0executable\u00a0in\u00a0the\u00a0path)echo\u00a0exec('whoami');?>                        Notes   WarningWhen allowing user-supplied data to be passed to this function, use escapeshellarg() or escapeshellcmd() to ensure that users cannot trick the system into executing arbitrary commands.   Note: If a program is started with this function, in order for it to continue running in the background, the output of the program must be redirected to a file or another output stream. Failing to do so will cause PHP to hang until the execution of the program ends.   Note: When safe mode is enabled, you can only execute files within the safe_mode_exec_dir. For practical reasons, it is currently not allowed to have .. components in the path to the executable.   WarningWith safe mode enabled, the command string is escaped with escapeshellcmd(). Thus, echo y | echo x becomes echo y \\| echo x.         See Also            system() - Execute an external program and display the output     passthru() - Execute an external program and display raw output     escapeshellcmd() - Escape shell metacharacters     pcntl_exec() - Executes specified program in current process space     backtick operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-close.php","title":"proc_close","description":"proc_close   (PHP 4 >= 4.3.0, PHP 5)proc_close \u2014 Close a process opened by proc_open() and return the exit code of that process         Description       int proc_close     ( resource $process    )        proc_close() is similar to pclose()    except that it only works on processes opened by    proc_open().    proc_close() waits for the process to terminate, and    returns its exit code.  If you have open pipes to that process, you    should fclose() them prior to calling this function in    order to avoid a deadlock - the child process may not be able to exit    while the pipes are open.            Parameters                    process                      The proc_open() resource that will        be closed.                                     Return Values       Returns the termination status of the process that was run. In case of     an error then -1 is returned.            Notes   Note:     Unix Only:         proc_close() is internally implemented using the      waitpid(3) system call. To obtain the real exit      status code the pcntl_wexitstatus() function      should be used."},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-nice.php","title":"proc_nice","description":"proc_nice   (PHP 5)proc_nice \u2014 Change the priority of the current process         Description       bool proc_nice     ( int $increment    )        proc_nice() changes the priority of the current    process by the amount specified in increment. A    positive increment will lower the priority of the    current process, whereas a negative increment    will raise the priority.          proc_nice() is not related to    proc_open() and its associated functions in any way.            Parameters                    increment                      The increment value of the priority change.                                     Return Values       Returns TRUE on success or FALSE on failure.    If an error occurs, like the user lacks permission to change the priority,     an error of level E_WARNING is also generated.            Notes   Note:     Availability         proc_nice() will only exist if your system has &#039;nice&#039;     capabilities. &#039;nice&#039; conforms to: SVr4, SVID EXT, AT&T, X\/OPEN, BSD     4.3. This means that proc_nice() is not available     on Windows."},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-get-status.php","title":"proc_get_status","description":"proc_get_status   (PHP 5)proc_get_status \u2014 Get information about a process opened by proc_open()         Description       array proc_get_status     ( resource $process    )        proc_get_status() fetches data about a    process opened using proc_open().             Parameters                    process                      The proc_open() resource that will        be evaluated.                                     Return Values       An array of collected information on success, and FALSE    on failure. The returned array contains the following elements:                        elementtypedescription                         command       string               The command string that was passed to proc_open().                           pid       int       process id                    running       bool               TRUE if the process is still running, FALSE if it has        terminated.                           signaled       bool               TRUE if the child process has been terminated by        an uncaught signal. Always set to FALSE on Windows.                           stopped       bool               TRUE if the child process has been stopped by a        signal. Always set to FALSE on Windows.                           exitcode       int               The exit code returned by the process (which is only        meaningful if running is FALSE).        Only first call of this function return real value, next calls return        -1.                           termsig       int               The number of the signal that caused the child process to terminate        its execution (only meaningful if signaled is TRUE).                           stopsig       int               The number of the signal that caused the child process to stop its        execution (only meaningful if stopped is TRUE).                                       See Also            proc_open() - Execute a command and open file pointers for input\/output"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-terminate.php","title":"proc_terminate","description":"proc_terminate   (PHP 5)proc_terminate \u2014 Kills a process opened by proc_open         Description       bool proc_terminate     ( resource $process    [, int $signal = 15   ] )        Signals a process (created using    proc_open()) that it should terminate.    proc_terminate() returns immediately and does not wait    for the process to terminate.          proc_terminate() allows you terminate the process and    continue with other tasks.  You may poll the process (to see if it has    stopped yet) by using the proc_get_status() function.            Parameters                    process                      The proc_open() resource that will        be closed.                                signal                      This optional parameter is only useful on POSIX        operating systems; you may specify a signal to send to the process        using the kill(2) system call.  The default is        SIGTERM.                                     Return Values       Returns the termination status of the process that was run.            Changelog                                 Version        Description                                    5.2.2                 Previous versions used to destroy the given process         resource.                                            See Also            proc_open() - Execute a command and open file pointers for input\/output     proc_close() - Close a process opened by proc_open and return the exit code of that process     proc_get_status() - Get information about a process opened by proc_open"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-open.php","title":"proc_open","description":"proc_open     (PHP 4 >= 4.3.0, PHP 5)proc_open \u2014       Execute a command and open file pointers for input\/output                   Description             resource proc_open        ( string $cmd       , array $descriptorspec       , array &$pipes       [, string $cwd       [, array $env       [, array $other_options      ]]] )            proc_open() is similar to popen()      but provides a much greater degree of control over the program execution.                   Parameters                    cmd                      The command to execute                                descriptorspec                      An indexed array where the key represents the descriptor number and the        value represents how PHP will pass that descriptor to the child        process. 0 is stdin, 1 is stdout, while 2 is stderr.                      Each element can be:                 An array describing the pipe to pass to the process. The first          element is the descriptor type and the second element is an option for          the given type. Valid types are pipe (the second          element is either r to pass the read end of the pipe          to the process, or w to pass the write end) and          file (the second element is a filename).                            A stream resource representing a real file descriptor (e.g. opened file,          a socket, STDIN).                                       The file descriptor numbers are not limited to 0, 1 and 2 - you may        specify any valid file descriptor number and it will be passed to the        child process. This allows your script to interoperate with other        scripts that run as \"co-processes\". In particular, this is useful for        passing passphrases to programs like PGP, GPG and openssl in a more        secure manner. It is also useful for reading status information        provided by those programs on auxiliary file descriptors.                                pipes                      Will be set to an indexed array of file pointers that correspond to        PHP&#039;s end of any pipes that are created.                                cwd                      The initial working dir for the command. This must be an        absolute directory path, or NULL        if you want to use the default value (the working dir of the current        PHP process)                                env                      An array with the environment variables for the command that will be        run, or NULL to use the same environment as the current PHP process                                other_options                      Allows you to specify additional options. Currently supported options        include:                           suppress_errors (windows only): suppresses errors          generated by this function when it&#039;s set to TRUE                            bypass_shell (windows only): bypass          cmd.exe shell when set to TRUE                            context: stream context used when opening files          (created with stream_context_create())                                                               Return Values       Returns a resource representing the process, which should be freed using    proc_close() when you are finished with it. On failure    returns FALSE.            Changelog                                 Version        Description                                           5.2.1                 Added the bypass_shell option to the         other_options parameter.                               5.0.0                 Added the cwd, env and         other_options parameters.                                            Examples            Example #1 A proc_open() example       <?php$descriptorspec\u00a0=\u00a0array(\u00a0\u00a0\u00a00\u00a0=>\u00a0array(\"pipe\",\u00a0\"r\"),\u00a0\u00a0\/\/\u00a0stdin\u00a0is\u00a0a\u00a0pipe\u00a0that\u00a0the\u00a0child\u00a0will\u00a0read\u00a0from\u00a0\u00a0\u00a01\u00a0=>\u00a0array(\"pipe\",\u00a0\"w\"),\u00a0\u00a0\/\/\u00a0stdout\u00a0is\u00a0a\u00a0pipe\u00a0that\u00a0the\u00a0child\u00a0will\u00a0write\u00a0to\u00a0\u00a0\u00a02\u00a0=>\u00a0array(\"file\",\u00a0\"\/tmp\/error-output.txt\",\u00a0\"a\")\u00a0\/\/\u00a0stderr\u00a0is\u00a0a\u00a0file\u00a0to\u00a0write\u00a0to);$cwd\u00a0=\u00a0'\/tmp';$env\u00a0=\u00a0array('some_option'\u00a0=>\u00a0'aeiou');$process\u00a0=\u00a0proc_open('php',\u00a0$descriptorspec,\u00a0$pipes,\u00a0$cwd,\u00a0$env);if\u00a0(is_resource($process))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$pipes\u00a0now\u00a0looks\u00a0like\u00a0this:\u00a0\u00a0\u00a0\u00a0\/\/\u00a00\u00a0=>\u00a0writeable\u00a0handle\u00a0connected\u00a0to\u00a0child\u00a0stdin\u00a0\u00a0\u00a0\u00a0\/\/\u00a01\u00a0=>\u00a0readable\u00a0handle\u00a0connected\u00a0to\u00a0child\u00a0stdout\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Any\u00a0error\u00a0output\u00a0will\u00a0be\u00a0appended\u00a0to\u00a0\/tmp\/error-output.txt\u00a0\u00a0\u00a0\u00a0fwrite($pipes[0],\u00a0'<?php\u00a0print_r($_ENV);\u00a0?>');\u00a0\u00a0\u00a0\u00a0fclose($pipes[0]);\u00a0\u00a0\u00a0\u00a0echo\u00a0stream_get_contents($pipes[1]);\u00a0\u00a0\u00a0\u00a0fclose($pipes[1]);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0It\u00a0is\u00a0important\u00a0that\u00a0you\u00a0close\u00a0any\u00a0pipes\u00a0before\u00a0calling\u00a0\u00a0\u00a0\u00a0\/\/\u00a0proc_close\u00a0in\u00a0order\u00a0to\u00a0avoid\u00a0a\u00a0deadlock\u00a0\u00a0\u00a0\u00a0$return_value\u00a0=\u00a0proc_close($process);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"command\u00a0returned\u00a0$return_value\\n\";}?>             The above example will output something similar to:       Array (     [some_option] => aeiou     [PWD] => \/tmp     [SHLVL] => 1     [_] => \/usr\/local\/bin\/php ) command returned 0                         Notes   Note:          Windows compatibility: Descriptors beyond 2 (stderr) are made available to     the child process as inheritable handles, but since the Windows     architecture does not associate file descriptor numbers with low-level     handles, the child process does not (yet) have a means of accessing those     handles. Stdin, stdout and stderr work as expected.          Note:         If you only need a uni-directional (one-way) process pipe, use    popen() instead, as it is much easier to use.                 See Also            popen() - Opens process file pointer     exec() - Execute an external program     system() - Execute an external program and display the output     passthru() - Execute an external program and display raw output     stream_select() - Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec     The backtick operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.shell-exec.php","title":"shell_exec","description":"shell_exec   (PHP 4, PHP 5)shell_exec \u2014 Execute command via shell and return the complete output as a string         Description       string shell_exec     ( string $cmd    )        This function is identical to the backtick operator.            Parameters                    cmd                      The command that will be executed.                                     Return Values       The output from the executed command.            Examples            Example #1 A shell_exec() example       <?php$output\u00a0=\u00a0shell_exec('ls\u00a0-lart');echo\u00a0\"<pre>$output<\/pre>\";?>                        Notes   Note:          This function is disabled when PHP is running in safe mode.                See Also            exec() - Execute an external program     escapeshellcmd() - Escape shell metacharacters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.system.php","title":"system","description":"system   (PHP 4, PHP 5)system \u2014 Execute an external program and display the output         Description       string system     ( string $command    [, int &$return_var   ] )        system() is just like the C version of the    function in that it executes the given    command and outputs the result.          The system() call also tries to automatically    flush the web server&#039;s output buffer after each line of output if    PHP is running as a server module.          If you need to execute a command and have all the data from the    command passed directly back without any interference, use the    passthru() function.            Parameters                    command                      The command that will be executed.                                return_var                      If the return_var argument is present, then the        return status of the executed command will be written to this        variable.                                     Return Values       Returns the last line of the command output on success, and FALSE    on failure.            Examples            Example #1 system() example       <?phpecho\u00a0'<pre>';\/\/\u00a0Outputs\u00a0all\u00a0the\u00a0result\u00a0of\u00a0shellcommand\u00a0\"ls\",\u00a0and\u00a0returns\/\/\u00a0the\u00a0last\u00a0output\u00a0line\u00a0into\u00a0$last_line.\u00a0Stores\u00a0the\u00a0return\u00a0value\/\/\u00a0of\u00a0the\u00a0shell\u00a0command\u00a0in\u00a0$retval.$last_line\u00a0=\u00a0system('ls',\u00a0$retval);\/\/\u00a0Printing\u00a0additional\u00a0infoecho\u00a0'<\/pre><hr\u00a0\/>Last\u00a0line\u00a0of\u00a0the\u00a0output:\u00a0'\u00a0.\u00a0$last_line\u00a0.\u00a0'<hr\u00a0\/>Return\u00a0value:\u00a0'\u00a0.\u00a0$retval;?>                        Notes   WarningWhen allowing user-supplied data to be passed to this function, use escapeshellarg() or escapeshellcmd() to ensure that users cannot trick the system into executing arbitrary commands.   Note: If a program is started with this function, in order for it to continue running in the background, the output of the program must be redirected to a file or another output stream. Failing to do so will cause PHP to hang until the execution of the program ends.   Note: When safe mode is enabled, you can only execute files within the safe_mode_exec_dir. For practical reasons, it is currently not allowed to have .. components in the path to the executable.   WarningWith safe mode enabled, the command string is escaped with escapeshellcmd(). Thus, echo y | echo x becomes echo y \\| echo x.         See Also            exec() - Execute an external program     passthru() - Execute an external program and display raw output     popen() - Opens process file pointer     escapeshellcmd() - Escape shell metacharacters     pcntl_exec() - Executes specified program in current process space     backtick operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chgrp.php","title":"chgrp","description":"chgrp   (PHP 4, PHP 5)chgrp \u2014 Changes file group          Description       bool chgrp     ( string $filename    , mixed $group    )        Attempts to change the group of the file filename    to group.          Only the superuser may change the group of a file arbitrarily; other users    may change the group of a file to any group of which that user is a member.            Parameters                    filename                      Path to the file.                                group                      A group name or number.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Changing a file&#039;s group       <?php$filename\u00a0=\u00a0'shared_file.txt';$format\u00a0=\u00a0\"%s's\u00a0Group\u00a0ID\u00a0@\u00a0%s:\u00a0%d\\n\";printf($format,\u00a0$filename,\u00a0date('r'),\u00a0filegroup($filename));chgrp($filename,\u00a08);clearstatcache();\u00a0\/\/\u00a0do\u00a0not\u00a0cache\u00a0filegroup()\u00a0resultsprintf($format,\u00a0$filename,\u00a0date('r'),\u00a0filegroup($filename));?>                        Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.   Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.         See Also            chown() - Changes file owner     chmod() - Changes file mode"},{"url":"http:\/\/www.php.net\/manual\/en\/function.basename.php","title":"basename","description":"basename   (PHP 4, PHP 5)basename \u2014 Returns trailing name component of path          Description       string basename     ( string $path    [, string $suffix   ] )        Given a string containing the path to a file or directory, this function    will return the trailing name component.            Parameters                    path                      A path.                      On Windows, both slash (\/) and backslash        (\\) are used as directory separator character. In        other environments, it is the forward slash (\/).                                suffix                      If the name component ends in suffix this will also        be cut off.                                     Return Values       Returns the base name of the given path.            Changelog                                 Version        Description                                    4.1.0                 The suffix parameter was added                                            Examples            Example #1 basename() example       <?phpecho\u00a0\"1)\u00a0\".basename(\"\/etc\/sudoers.d\",\u00a0\".d\").PHP_EOL;echo\u00a0\"2)\u00a0\".basename(\"\/etc\/passwd\").PHP_EOL;echo\u00a0\"3)\u00a0\".basename(\"\/etc\/\").PHP_EOL;echo\u00a0\"4)\u00a0\".basename(\".\").PHP_EOL;echo\u00a0\"5)\u00a0\".basename(\"\/\");?>             The above example will output:       1) sudoers 2) passwd 3) etc 4) . 5)                        Notes   Note:          basename() operates naively on the input string,     and is not aware of the actual filesystem, or path components such     as \"..\".          Note:          basename() is locale aware, so for it to see the      correct basename with multibyte character paths, the matching locale must      be set using the setlocale() function.                See Also            dirname() - Returns parent directory's path     pathinfo() - Returns information about a file path"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chown.php","title":"chown","description":"chown   (PHP 4, PHP 5)chown \u2014 Changes file owner          Description       bool chown     ( string $filename    , mixed $user    )        Attempts to change the owner of the file filename    to user user. Only the superuser may change the    owner of a file.            Parameters                    filename                      Path to the file.                                user                      A user name or number.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Simple chown() usage       <?php\/\/\u00a0File\u00a0name\u00a0and\u00a0username\u00a0to\u00a0use$file_name=\u00a0\"foo.php\";$path\u00a0=\u00a0\"\/home\/sites\/php.net\/public_html\/sandbox\/\"\u00a0.\u00a0$file_name\u00a0;$user_name\u00a0=\u00a0\"root\";\/\/\u00a0Set\u00a0the\u00a0userchown($path,\u00a0$user_name);\/\/\u00a0Check\u00a0the\u00a0result$stat\u00a0=\u00a0stat($path);print_r(posix_getpwuid($stat['uid']));?>             The above example will output something similar to:       Array (     [name] => root     [passwd] => x     [uid] => 0     [gid] => 0     [gecos] => root     [dir] => \/root     [shell] => \/bin\/bash )                      Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.   Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.         See Also            chmod() - Changes file mode"},{"url":"http:\/\/www.php.net\/manual\/en\/function.clearstatcache.php","title":"clearstatcache","description":"clearstatcache   (PHP 4, PHP 5)clearstatcache \u2014 Clears file status cache          Description       void clearstatcache     ([ bool $clear_realpath_cache = false    [, string $filename   ]] )        When you use stat(), lstat(), or    any of the other functions listed in the affected functions list (below),    PHP caches the information those functions return in order to provide    faster performance. However, in certain cases, you may want to clear the    cached information. For instance, if the same file is being checked    multiple times within a single script, and that file is in danger of    being removed or changed during that script&#039;s operation, you may elect to    clear the status cache.  In these cases, you can use the    clearstatcache() function to clear the information    that PHP caches about a file.          You should also note that PHP doesn&#039;t cache information about non-existent    files. So, if you call file_exists() on a file that    doesn&#039;t exist, it will return FALSE until you create the file. If you    create the file, it will return TRUE even if you then delete the file.    However unlink() clears the cache automatically.      Note:          This function caches information about specific filenames, so you only     need to call clearstatcache() if you are performing     multiple operations on the same filename and require the information     about that particular file to not be cached.              Affected functions include stat(),    lstat(),    file_exists(),    is_writable(),    is_readable(),    is_executable(),    is_file(),    is_dir(),    is_link(),    filectime(),    fileatime(),    filemtime(),    fileinode(),    filegroup(),    fileowner(),    filesize(),    filetype(), and    fileperms().            Parameters                    clear_realpath_cache                      Whether to clear the realpath cache or not.                                filename                      Clear the realpath cache for a specific filename; only used if        clear_realpath_cache is TRUE.                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    5.3.0                 Added optional clear_realpath_cache          and filename parameters.                                            Examples            Example #1 clearstatcache() example       <?php$file\u00a0=\u00a0'output_log.txt';function\u00a0get_owner($file){\u00a0\u00a0\u00a0\u00a0$stat\u00a0=\u00a0stat($file);\u00a0\u00a0\u00a0\u00a0$user\u00a0=\u00a0posix_getpwuid($stat['uid']);\u00a0\u00a0\u00a0\u00a0return\u00a0$user['name'];}$format\u00a0=\u00a0\"UID\u00a0@\u00a0%s:\u00a0%s\\n\";printf($format,\u00a0date('r'),\u00a0get_owner($file));chown($file,\u00a0'ross');printf($format,\u00a0date('r'),\u00a0get_owner($file));clearstatcache();printf($format,\u00a0date('r'),\u00a0get_owner($file));?>             The above example will output something similar to:       UID @ Sun, 12 Oct 2008 20:48:28 +0100: root UID @ Sun, 12 Oct 2008 20:48:28 +0100: root UID @ Sun, 12 Oct 2008 20:48:28 +0100: ross"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chmod.php","title":"chmod","description":"chmod   (PHP 4, PHP 5)chmod \u2014 Changes file mode          Description       bool chmod     ( string $filename    , int $mode    )        Attempts to change the mode of the specified file to that given in    mode.            Parameters                    filename                      Path to the file.                                mode                      Note that mode is not automatically        assumed to be an octal value, so strings (such as \"g+w\") will        not work properly. To ensure the expected operation,        you need to prefix mode with a zero (0):                                 <?phpchmod(\"\/somedir\/somefile\",\u00a0755);\u00a0\u00a0\u00a0\/\/\u00a0decimal;\u00a0probably\u00a0incorrectchmod(\"\/somedir\/somefile\",\u00a0\"u+rwx,go+rx\");\u00a0\/\/\u00a0string;\u00a0incorrectchmod(\"\/somedir\/somefile\",\u00a00755);\u00a0\u00a0\/\/\u00a0octal;\u00a0correct\u00a0value\u00a0of\u00a0mode?>                                          The mode parameter consists of three octal        number components specifying access restrictions for the owner,        the user group in which the owner is in, and to everybody else in        this order. One component can be computed by adding up the needed        permissions for that target user base. Number 1 means that you        grant execute rights, number 2 means that you make the file        writeable, number 4 means that you make the file readable. Add        up these numbers to specify needed rights. You can also read more        about modes on Unix systems with &#039;man 1 chmod&#039;        and &#039;man 2 chmod&#039;.                                 <?php\/\/\u00a0Read\u00a0and\u00a0write\u00a0for\u00a0owner,\u00a0nothing\u00a0for\u00a0everybody\u00a0elsechmod(\"\/somedir\/somefile\",\u00a00600);\/\/\u00a0Read\u00a0and\u00a0write\u00a0for\u00a0owner,\u00a0read\u00a0for\u00a0everybody\u00a0elsechmod(\"\/somedir\/somefile\",\u00a00644);\/\/\u00a0Everything\u00a0for\u00a0owner,\u00a0read\u00a0and\u00a0execute\u00a0for\u00a0otherschmod(\"\/somedir\/somefile\",\u00a00755);\/\/\u00a0Everything\u00a0for\u00a0owner,\u00a0read\u00a0and\u00a0execute\u00a0for\u00a0owner's\u00a0groupchmod(\"\/somedir\/somefile\",\u00a00750);?>                                                         Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note:          The current user is the user under which PHP runs. It is probably not the     same user you use for normal shell or FTP access. The mode can be changed     only by user who owns the file on most systems.          Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.   Note:          When safe mode is enabled, PHP checks whether the files or directories     you are about to operate on have the same UID (owner) as the script that     is being executed. In addition, you cannot set the SUID, SGID and sticky     bits.                See Also            chown() - Changes file owner     chgrp() - Changes file group     fileperms() - Gets file permissions     stat() - Gives information about a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.delete.php","title":"delete","description":"delete   delete \u2014 See unlink() or unset()          Description       void delete     ( void    )        This is a dummy manual entry to satisfy those people who are looking for    unlink() or unset() in the wrong    place.            Return Values       No value is returned.            See Also            unlink() - Deletes a file     unset() - Unset a given variable"},{"url":"http:\/\/www.php.net\/manual\/en\/function.copy.php","title":"copy","description":"copy   (PHP 4, PHP 5)copy \u2014 Copies file          Description       bool copy     ( string $source    , string $dest    [, resource $context   ] )        Makes a copy of the file source to    dest.          If you wish to move a file, use the rename() function.            Parameters                    source                      Path to the source file.                                dest                      The destination path. If dest is a URL, the        copy operation may fail if the wrapper does not support overwriting of        existing files.              Warning                 If the destination file already exists, it will be overwritten.                                        context                      A valid context resource created with         stream_context_create().                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.3.0                 Added context support.                               4.3.0                 Both source and dest         may now be URLs if the \"fopen wrappers\" have been enabled.         See fopen() for more details.                                            Examples            Example #1 copy() example       <?php$file\u00a0=\u00a0'example.txt';$newfile\u00a0=\u00a0'example.txt.bak';if\u00a0(!copy($file,\u00a0$newfile))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0copy\u00a0$file...\\n\";}?>                        See Also            move_uploaded_file() - Moves an uploaded file to a new location     rename() - Renames a file or directory     The section of the manual about handling file uploads"},{"url":"http:\/\/www.php.net\/manual\/en\/function.diskfreespace.php","title":"diskfreespace","description":"diskfreespace   (PHP 4, PHP 5)diskfreespace \u2014 Alias of disk_free_space()         Description       This function is an alias of:     disk_free_space()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.disk-free-space.php","title":"disk_free_space","description":"disk_free_space   (PHP 4 >= 4.1.0, PHP 5)disk_free_space \u2014 Returns available space on filesystem or disk partition          Description       float disk_free_space     ( string $directory    )        Given a string containing a directory, this function will return the    number of bytes available on the corresponding filesystem or disk    partition.            Parameters                    directory                      A directory of the filesystem or disk partition.              Note:                  Given a file name instead of a directory, the behaviour of the         function is unspecified and may differ between operating systems and         PHP versions.                                             Return Values       Returns the number of available bytes as a float     or FALSE on failure.            Examples            Example #1 disk_free_space() example       <?php\/\/\u00a0$df\u00a0contains\u00a0the\u00a0number\u00a0of\u00a0bytes\u00a0available\u00a0on\u00a0\"\/\"$df\u00a0=\u00a0disk_free_space(\"\/\");\/\/\u00a0On\u00a0Windows:$df_c\u00a0=\u00a0disk_free_space(\"C:\");$df_d\u00a0=\u00a0disk_free_space(\"D:\");?>                        Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.         See Also            disk_total_space() - Returns the total size of a filesystem or disk partition"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dirname.php","title":"dirname","description":"dirname   (PHP 4, PHP 5)dirname \u2014 Returns parent directory&#039;s path          Description       string dirname     ( string $path    )        Given a string containing the path of a file or directory,    this function will return the parent directory&#039;s path.            Parameters                    path                      A path.                      On Windows, both slash (\/) and backslash        (\\) are used as directory separator character. In        other environments, it is the forward slash (\/).                                     Return Values       Returns the path of the parent directory. If there are no slashes in    path, a dot (&#039;.&#039;) is returned,    indicating the current directory. Otherwise, the returned string is    path with any trailing    \/component removed.            Changelog                                 Version        Description                                    5.0.0                 dirname() is now binary safe                               4.0.3                 dirname() was fixed to be POSIX-compliant.                                            Examples            Example #1 dirname() example       <?phpecho\u00a0\"1)\u00a0\"\u00a0.\u00a0dirname(\"\/etc\/passwd\")\u00a0.\u00a0PHP_EOL;\u00a0\/\/\u00a01)\u00a0\/etcecho\u00a0\"2)\u00a0\"\u00a0.\u00a0dirname(\"\/etc\/\")\u00a0.\u00a0PHP_EOL;\u00a0\/\/\u00a02)\u00a0\/\u00a0(or\u00a0\\\u00a0on\u00a0Windows)echo\u00a0\"3)\u00a0\"\u00a0.\u00a0dirname(\".\");\u00a0\/\/\u00a03)\u00a0.?>                        Notes   Note:          dirname() operates naively on the input string,     and is not aware of the actual filesystem, or path components such     as \"..\".          Note:          dirname() is locale aware, so for it to see the      correct directory name with multibyte character paths, the matching locale must      be set using the setlocale() function.          Note:          Since PHP 4.3.0, you will often get a slash or a dot back from     dirname() in situations where the older     functionality would have given you the empty string.              Check the following change example:           <?php\/\/before\u00a0PHP\u00a04.3.0dirname('c:\/');\u00a0\/\/\u00a0returned\u00a0'.'\/\/after\u00a0PHP\u00a04.3.0dirname('c:\/x');\u00a0\/\/\u00a0returns\u00a0'c:\\'dirname('c:\/Temp\/x');\u00a0\/\/\u00a0returns\u00a0'c:\/Temp'dirname('\/x');\u00a0\/\/\u00a0returns\u00a0'\\'?>                        See Also            basename() - Returns trailing name component of path     pathinfo() - Returns information about a file path     realpath() - Returns canonicalized absolute pathname"},{"url":"http:\/\/www.php.net\/manual\/en\/function.disk-total-space.php","title":"disk_total_space","description":"disk_total_space   (PHP 4 >= 4.1.0, PHP 5)disk_total_space \u2014 Returns the total size of a filesystem or disk partition          Description       float disk_total_space     ( string $directory    )        Given a string containing a directory, this function will return the total    number of bytes on the corresponding filesystem or disk partition.            Parameters                    directory                      A directory of the filesystem or disk partition.                                     Return Values       Returns the total number of bytes as a float     or FALSE on failure.            Examples            Example #1 disk_total_space() example       <?php\/\/\u00a0$ds\u00a0contains\u00a0the\u00a0total\u00a0number\u00a0of\u00a0bytes\u00a0available\u00a0on\u00a0\"\/\"$ds\u00a0=\u00a0disk_total_space(\"\/\");\/\/\u00a0On\u00a0Windows:$ds\u00a0=\u00a0disk_total_space(\"C:\");$ds\u00a0=\u00a0disk_total_space(\"D:\");?>                        Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.         See Also            disk_free_space() - Returns available space on filesystem or disk partition"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fclose.php","title":"fclose","description":"fclose   (PHP 4, PHP 5)fclose \u2014 Closes an open file pointer          Description       bool fclose     ( resource $handle    )        The file pointed to by handle is closed.            Parameters                    handle                      The file pointer must be valid, and must point to a file successfully        opened by fopen() or fsockopen().                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 A simple fclose() example       <?php$handle\u00a0=\u00a0fopen('somefile.txt',\u00a0'r');fclose($handle);?>                        See Also            fopen() - Opens file or URL     fsockopen() - Open Internet or Unix domain socket connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fflush.php","title":"fflush","description":"fflush   (PHP 4 >= 4.0.1, PHP 5)fflush \u2014 Flushes the output to a file          Description       bool fflush     ( resource $handle    )        This function forces a write of all buffered output to the resource    pointed to by the file handle.            Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                              Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 File write example using fflush()       <?php$filename\u00a0=\u00a0'bar.txt';$file\u00a0=\u00a0fopen($filename,\u00a0'r+');rewind($file);fwrite($file,\u00a0'Foo');fflush($file);ftruncate($file,\u00a0ftell($file));fclose($file);?>                         See Also            clearstatcache() - Clears file status cache     fwrite() - Binary-safe file write"},{"url":"http:\/\/www.php.net\/manual\/en\/function.feof.php","title":"feof","description":"feof   (PHP 4, PHP 5)feof \u2014 Tests for end-of-file on a file pointer          Description       bool feof     ( resource $handle    )        Tests for end-of-file on a file pointer.             Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                               Return Values       Returns TRUE if the file pointer is at EOF or an error occurs    (including socket timeout); otherwise returns FALSE.             Notes   Warning         If a connection opened by fsockopen() wasn&#039;t closed     by the server, feof() will hang. To workaround this, see      below example:           Example #1 Handling timeouts with feof()        <?phpfunction\u00a0safe_feof($fp,\u00a0&$start\u00a0=\u00a0NULL)\u00a0{\u00a0$start\u00a0=\u00a0microtime(true);\u00a0return\u00a0feof($fp);}\/*\u00a0Assuming\u00a0$fp\u00a0is\u00a0previously\u00a0opened\u00a0by\u00a0fsockopen()\u00a0*\/$start\u00a0=\u00a0NULL;$timeout\u00a0=\u00a0ini_get('default_socket_timeout');while(!safe_feof($fp,\u00a0$start)\u00a0&&\u00a0(microtime(true)\u00a0-\u00a0$start)\u00a0<\u00a0$timeout){\u00a0\/*\u00a0Handle\u00a0*\/}?>                        Warning         If the passed file pointer is not valid you may get an infinite loop, because     feof() fails to return TRUE.           Example #2 feof() example with an invalid file pointer        <?php\/\/\u00a0if\u00a0file\u00a0can\u00a0not\u00a0be\u00a0read\u00a0or\u00a0doesn't\u00a0exist\u00a0fopen\u00a0function\u00a0returns\u00a0FALSE$file\u00a0=\u00a0@fopen(\"no_such_file\",\u00a0\"r\");\/\/\u00a0FALSE\u00a0from\u00a0fopen\u00a0will\u00a0issue\u00a0warning\u00a0and\u00a0result\u00a0in\u00a0infinite\u00a0loop\u00a0herewhile\u00a0(!feof($file))\u00a0{}fclose($file);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgetc.php","title":"fgetc","description":"fgetc   (PHP 4, PHP 5)fgetc \u2014 Gets character from file pointer          Description       string fgetc     ( resource $handle    )        Gets a character from the given file pointer.            Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                              Return Values       Returns a string containing a single character read from the file pointed    to by handle. Returns FALSE on EOF.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples            Example #1 A fgetc() example       <?php$fp\u00a0=\u00a0fopen('somefile.txt',\u00a0'r');if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0open\u00a0file\u00a0somefile.txt';}while\u00a0(false\u00a0!==\u00a0($char\u00a0=\u00a0fgetc($fp)))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$char\\n\";}?>                        Notes   Note: This function is binary-safe.         See Also            fread() - Binary-safe file read     fopen() - Opens file or URL     popen() - Opens process file pointer     fsockopen() - Open Internet or Unix domain socket connection     fgets() - Gets line from file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgetss.php","title":"fgetss","description":"fgetss   (PHP 4, PHP 5)fgetss \u2014 Gets line from file pointer and strip HTML tags          Description       string fgetss     ( resource $handle    [, int $length    [, string $allowable_tags   ]] )        Identical to fgets(), except that    fgetss() attempts to strip any NUL bytes, HTML and PHP tags from    the text it reads.            Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                         length                      Length of the data to be retrieved.                                allowable_tags                      You can use the optional third parameter to specify tags which should        not be stripped.                                     Return Values       Returns a string of up to length - 1 bytes read from    the file pointed to by handle, with all HTML and PHP    code stripped.          If an error occurs, returns FALSE.            Changelog                                 Version        Description                                    5.0.0                 The length parameter is optional                                                     Example #1 Reading a PHP file line-by-line       <?php$str\u00a0=\u00a0<<<EOD<html><body>\u00a0<p>Welcome!\u00a0Today\u00a0is\u00a0the\u00a0<?php\u00a0echo(date('jS'));\u00a0?>\u00a0of\u00a0<?=\u00a0date('F');\u00a0?>.<\/p><\/body><\/html>Text\u00a0outside\u00a0of\u00a0the\u00a0HTML\u00a0block.EOD;file_put_contents('sample.php',\u00a0$str);$handle\u00a0=\u00a0@fopen(\"sample.php\",\u00a0\"r\");if\u00a0($handle)\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($handle))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$buffer\u00a0=\u00a0fgetss($handle,\u00a04096);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$buffer;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0fclose($handle);}?>             The above example will output something similar to:        Welcome! Today is the  of .  Text outside of the HTML block.                      Notes   Note: If PHP is not properly recognizing the line endings when reading files either on or created by a Macintosh computer, enabling the auto_detect_line_endings run-time configuration option may help resolve the problem.         See Also            fgets() - Gets line from file pointer     fopen() - Opens file or URL     popen() - Opens process file pointer     fsockopen() - Open Internet or Unix domain socket connection     strip_tags() - Strip HTML and PHP tags from a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgets.php","title":"fgets","description":"fgets   (PHP 4, PHP 5)fgets \u2014 Gets line from file pointer          Description       string fgets     ( resource $handle    [, int $length   ] )        Gets a line from file pointer.            Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                         length                      Reading ends when length - 1 bytes have been        read, on a newline (which is included in the return value), or on EOF        (whichever comes first). If no length is specified, it will keep        reading from the stream until it reaches the end of the line.              Note:                  Until PHP 4.3.0, omitting it would assume 1024 as the line length.         If the majority of the lines in the file are all larger than 8KB,         it is more resource efficient for your script to specify the maximum         line length.                                             Return Values       Returns a string of up to length - 1 bytes read from    the file pointed to by handle. If there is no more data     to read in the file pointer, then FALSE is returned.          If an error occurs, FALSE is returned.            Changelog                                 Version        Description                                    4.3.0                 fgets() is now binary safe                               4.2.0                 The length parameter became optional                                            Examples            Example #1 Reading a file line by line       <?php$handle\u00a0=\u00a0@fopen(\"\/tmp\/inputfile.txt\",\u00a0\"r\");if\u00a0($handle)\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0(($buffer\u00a0=\u00a0fgets($handle,\u00a04096))\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$buffer;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0if\u00a0(!feof($handle))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error:\u00a0unexpected\u00a0fgets()\u00a0fail\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0fclose($handle);}?>                        Notes   Note: If PHP is not properly recognizing the line endings when reading files either on or created by a Macintosh computer, enabling the auto_detect_line_endings run-time configuration option may help resolve the problem.   Note:          People used to the &#039;C&#039; semantics of fgets()     should note the difference in how EOF is returned.                See Also            fgetss() - Gets line from file pointer and strip HTML tags     fread() - Binary-safe file read     fgetc() - Gets character from file pointer     stream_get_line() - Gets line from stream resource up to a given delimiter     fopen() - Opens file or URL     popen() - Opens process file pointer     fsockopen() - Open Internet or Unix domain socket connection     stream_set_timeout() - Set timeout period on a stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file-put-contents.php","title":"file_put_contents","description":"file_put_contents    (PHP 5)file_put_contents \u2014 Write a string to a file         Description       int file_put_contents     ( string $filename    , mixed $data    [, int $flags = 0    [, resource $context   ]] )         This function is identical to calling fopen(),     fwrite() and fclose() successively    to write data to a file.          If filename does not exist, the file is created.    Otherwise, the existing file is overwritten, unless the     FILE_APPEND flag is set.            Parameters                    filename                      Path to the file where to write the data.                                data                      The data to write. Can be either a string, an        array or a stream resource.                      If data is a stream resource, the        remaining buffer of that stream will be copied to the specified file.        This is similar with using stream_copy_to_stream().                      You can also specify the data parameter as a single        dimension array. This is equivalent to        file_put_contents($filename, implode(&#039;&#039;, $array)).                                flags                      The value of flags can be any combination of         the following flags, joined with the binary OR (|)        operator.                               Available flags                                          Flag            Description                                                                     FILE_USE_INCLUDE_PATH                                     Search for filename in the include directory.             See include_path for more             information.                                                            FILE_APPEND                                     If file filename already exists, append              the data to the file instead of overwriting it.                                                            LOCK_EX                                     Acquire an exclusive lock on the file while proceeding to the              writing.                                                                                               context                      A valid context resource created with         stream_context_create().                                     Return Values       The function returns the number of bytes that were written to the file, or    FALSE on failure.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples            Example #1 Simple usage example       <?php$file\u00a0=\u00a0'people.txt';\/\/\u00a0Open\u00a0the\u00a0file\u00a0to\u00a0get\u00a0existing\u00a0content$current\u00a0=\u00a0file_get_contents($file);\/\/\u00a0Append\u00a0a\u00a0new\u00a0person\u00a0to\u00a0the\u00a0file$current\u00a0.=\u00a0\"John\u00a0Smith\\n\";\/\/\u00a0Write\u00a0the\u00a0contents\u00a0back\u00a0to\u00a0the\u00a0filefile_put_contents($file,\u00a0$current);?>                     Example #2 Using flags       <?php$file\u00a0=\u00a0'people.txt';\/\/\u00a0The\u00a0new\u00a0person\u00a0to\u00a0add\u00a0to\u00a0the\u00a0file$person\u00a0=\u00a0\"John\u00a0Smith\\n\";\/\/\u00a0Write\u00a0the\u00a0contents\u00a0to\u00a0the\u00a0file,\u00a0\/\/\u00a0using\u00a0the\u00a0FILE_APPEND\u00a0flag\u00a0to\u00a0append\u00a0the\u00a0content\u00a0to\u00a0the\u00a0end\u00a0of\u00a0the\u00a0file\/\/\u00a0and\u00a0the\u00a0LOCK_EX\u00a0flag\u00a0to\u00a0prevent\u00a0anyone\u00a0else\u00a0writing\u00a0to\u00a0the\u00a0file\u00a0at\u00a0the\u00a0same\u00a0timefile_put_contents($file,\u00a0$person,\u00a0FILE_APPEND\u00a0|\u00a0LOCK_EX);?>                        Changelog                                 Version        Description                                    5.0.0                 Added context support                               5.1.0                 Added support for LOCK_EX and the ability to pass         a stream resource to the data parameter                                                     Notes   Note: This function is binary-safe.   TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.         See Also            fopen() - Opens file or URL     fwrite() - Binary-safe file write     file_get_contents() - Reads entire file into a string     stream_context_create() - Create a streams context"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file-get-contents.php","title":"file_get_contents","description":"file_get_contents    (PHP 4 >= 4.3.0, PHP 5)file_get_contents \u2014 Reads entire file into a string         Description       string file_get_contents     ( string $filename    [, bool $use_include_path = false    [, resource $context    [, int $offset = -1    [, int $maxlen   ]]]] )         This function is similar to file(), except that    file_get_contents() returns the file in a     string, starting at the specified offset     up to maxlen bytes. On failure,     file_get_contents() will return FALSE.          file_get_contents() is the preferred way to read the    contents of a file into a string.  It will use memory mapping techniques if    supported by your OS to enhance performance.      Note:          If you&#039;re opening a URI with special characters, such as spaces, you     need to encode the URI with urlencode().                Parameters                    filename                      Name of the file to read.                                use_include_path              Note:                  As of PHP 5 the FILE_USE_INCLUDE_PATH can be used         to trigger include path         search.                                               context                      A valid context resource created with         stream_context_create(). If you don&#039;t need to use a        custom context, you can skip this parameter by NULL.                                offset                      The offset where the reading starts on the original stream.                      Seeking (offset) is not supported with remote files.        Attempting to seek on non-local files may work with small offsets, but this        is unpredictable because it works on the buffered stream.                                maxlen                      Maximum length of data read. The default is to read until end        of file is reached. Note that this parameter is applied to the         stream processed by the filters.                                     Return Values       The function returns the read data or FALSE on failure.            Errors\/Exceptions       An E_WARNING level error is generated if either maxlength    is less than zero, or if offset exceeds the length of the stream.            Examples            Example #1 Get and output the source of the homepage of a website       <?php$homepage\u00a0=\u00a0file_get_contents('http:\/\/www.example.com\/');echo\u00a0$homepage;?>                     Example #2 Searching within the include_path       <?php\/\/\u00a0<=\u00a0PHP\u00a05$file\u00a0=\u00a0file_get_contents('.\/people.txt',\u00a0true);\/\/\u00a0>\u00a0PHP\u00a05$file\u00a0=\u00a0file_get_contents('.\/people.txt',\u00a0FILE_USE_INCLUDE_PATH);?>                     Example #3 Reading a section of a file       <?php\/\/\u00a0Read\u00a014\u00a0characters\u00a0starting\u00a0from\u00a0the\u00a021st\u00a0character$section\u00a0=\u00a0file_get_contents('.\/people.txt',\u00a0NULL,\u00a0NULL,\u00a020,\u00a014);var_dump($section);?>             The above example will output something similar to:       string(14) \"lle Bjori Ro\"                    Example #4 Using stream contexts       <?php\/\/\u00a0Create\u00a0a\u00a0stream$opts\u00a0=\u00a0array(\u00a0\u00a0'http'=>array(\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\\r\\n\"\u00a0\u00a0));$context\u00a0=\u00a0stream_context_create($opts);\/\/\u00a0Open\u00a0the\u00a0file\u00a0using\u00a0the\u00a0HTTP\u00a0headers\u00a0set\u00a0above$file\u00a0=\u00a0file_get_contents('http:\/\/www.example.com\/',\u00a0false,\u00a0$context);?>                         Changelog                                 Version        Description                                           5.1.0                 Added the offset and         maxlen parameters.                               5.0.0                 Added context support.                                            Notes   Note: This function is binary-safe.   TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.   WarningWhen using SSL, Microsoft IIS will violate the protocol by closing the connection without sending a close_notify indicator. PHP will report this as \"SSL: Fatal Protocol Error\" when you reach the end of the data. To work around this, the value of error_reporting should be lowered to a level that does not include warnings. PHP 4.3.7 and higher can detect buggy IIS server software when you open the stream using the https:\/\/ wrapper and will suppress the warning. When using fsockopen() to create an ssl:\/\/ socket, the developer is responsible for detecting and suppressing this warning.         See Also            file() - Reads entire file into an array     fgets() - Gets line from file pointer     fread() - Binary-safe file read     readfile() - Outputs a file     file_put_contents() - Write a string to a file     stream_get_contents() - Reads remainder of a stream into a string     stream_context_create() - Create a streams context     $http_response_header"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file-exists.php","title":"file_exists","description":"file_exists   (PHP 4, PHP 5)file_exists \u2014 Checks whether a file or directory exists          Description       bool file_exists     ( string $filename    )        Checks whether a file or directory exists.            Parameters                    filename                      Path to the file or directory.                      On windows, use \/\/computername\/share\/filename or        \\\\computername\\share\\filename to check files on        network shares.                                     Return Values       Returns TRUE if the file or directory specified by    filename exists; FALSE otherwise.      Note:          This function will return FALSE for symlinks pointing to non-existing     files.          Warning         This function returns FALSE for files inaccessible due to safe mode restrictions. However these     files still can be included if     they are located in safe_mode_include_dir.          Note:          The check is done using the real UID\/GID instead of the effective one.          Note:      Because PHP&#039;s integer type is signed and many platforms use 32bit integers,     some filesystem functions may return unexpected results for files which     are larger than 2GB.             Examples            Example #1 Testing whether a file exists       <?php$filename\u00a0=\u00a0'\/path\/to\/foo.txt';if\u00a0(file_exists($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0file\u00a0$filename\u00a0exists\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0file\u00a0$filename\u00a0does\u00a0not\u00a0exist\";}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            is_readable() - Tells whether a file exists and is readable     is_writable() - Tells whether the filename is writable     is_file() - Tells whether the filename is a regular file     file() - Reads entire file into an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file.php","title":"file","description":"file   (PHP 4, PHP 5)file \u2014 Reads entire file into an array          Description       array file     ( string $filename    [, int $flags = 0    [, resource $context   ]] )        Reads an entire file into an array.      Note:          You can use file_get_contents() to return the contents     of a file as a string.                Parameters                    filename                      Path to the file.              TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.                         flags                      The optional parameter flags can be one, or        more, of the following constants:                                        FILE_USE_INCLUDE_PATH                                            Search for the file in the include_path.                                                               FILE_IGNORE_NEW_LINES                                            Do not add newline at the end of each array element                                                               FILE_SKIP_EMPTY_LINES                                            Skip empty lines                                                                                  context                      A context resource created with the         stream_context_create() function.                      Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.                                     Return Values       Returns the file in an array. Each element of the array corresponds to a    line in the file, with the newline still attached. Upon failure,    file() returns FALSE.      Note:          Each line in the resulting array will include the line ending, unless     FILE_IGNORE_NEW_LINES is used, so you still need to     use rtrim() if you do not want the line ending     present.          Note: If PHP is not properly recognizing the line endings when reading files either on or created by a Macintosh computer, enabling the auto_detect_line_endings run-time configuration option may help resolve the problem.         Changelog                                 Version        Description                                           5.0.0                 The context parameter was added                               5.0.0                 Prior to PHP 5.0.0 the flags parameter only         covered include_path and was         enabled with 1                               4.3.0                 file() became binary safe                                            Examples            Example #1 file() example       <?php\/\/\u00a0Get\u00a0a\u00a0file\u00a0into\u00a0an\u00a0array.\u00a0\u00a0In\u00a0this\u00a0example\u00a0we'll\u00a0go\u00a0through\u00a0HTTP\u00a0to\u00a0get\/\/\u00a0the\u00a0HTML\u00a0source\u00a0of\u00a0a\u00a0URL.$lines\u00a0=\u00a0file('http:\/\/www.example.com\/');\/\/\u00a0Loop\u00a0through\u00a0our\u00a0array,\u00a0show\u00a0HTML\u00a0source\u00a0as\u00a0HTML\u00a0source;\u00a0and\u00a0line\u00a0numbers\u00a0too.foreach\u00a0($lines\u00a0as\u00a0$line_num\u00a0=>\u00a0$line)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Line\u00a0#<b>{$line_num}<\/b>\u00a0:\u00a0\"\u00a0.\u00a0htmlspecialchars($line)\u00a0.\u00a0\"<br\u00a0\/>\\n\";}\/\/\u00a0Another\u00a0example,\u00a0let's\u00a0get\u00a0a\u00a0web\u00a0page\u00a0into\u00a0a\u00a0string.\u00a0\u00a0See\u00a0also\u00a0file_get_contents().$html\u00a0=\u00a0implode('',\u00a0file('http:\/\/www.example.com\/'));\/\/\u00a0Using\u00a0the\u00a0optional\u00a0flags\u00a0parameter\u00a0since\u00a0PHP\u00a05$trimmed\u00a0=\u00a0file('somefile.txt',\u00a0FILE_IGNORE_NEW_LINES\u00a0|\u00a0FILE_SKIP_EMPTY_LINES);?>                        Notes   WarningWhen using SSL, Microsoft IIS will violate the protocol by closing the connection without sending a close_notify indicator. PHP will report this as \"SSL: Fatal Protocol Error\" when you reach the end of the data. To work around this, the value of error_reporting should be lowered to a level that does not include warnings. PHP 4.3.7 and higher can detect buggy IIS server software when you open the stream using the https:\/\/ wrapper and will suppress the warning. When using fsockopen() to create an ssl:\/\/ socket, the developer is responsible for detecting and suppressing this warning.         See Also            readfile() - Outputs a file     fopen() - Opens file or URL     fsockopen() - Open Internet or Unix domain socket connection     popen() - Opens process file pointer     file_get_contents() - Reads entire file into a string     include() - include     stream_context_create() - Create a streams context"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgetcsv.php","title":"fgetcsv","description":"fgetcsv   (PHP 4, PHP 5)fgetcsv \u2014 Gets line from file pointer and parse for CSV fields          Description       array fgetcsv     ( resource $handle    [, int $length = 0    [, string $delimiter = &#039;,&#039;    [, string $enclosure = &#039;\"&#039;    [, string $escape = &#039;\\\\&#039;   ]]]] )        Similar to fgets() except that    fgetcsv() parses the line it reads for fields in    CSV format and returns an array containing the fields    read.            Parameters                    handle                      A valid file pointer to a file successfully opened by        fopen(), popen(), or        fsockopen().                                length                      Must be greater than the longest line (in characters) to be found in        the CSV file (allowing for trailing line-end characters). It became        optional in PHP 5. Omitting this parameter (or setting it to 0 in PHP        5.0.4 and later) the maximum line length is not limited, which is        slightly slower.                                delimiter                      Set the field delimiter (one character only).                                enclosure                      Set the field enclosure character (one character only).                                escape                      Set the escape character (one character only). Defaults as a backslash.                                     Return Values       Returns an indexed array containing the fields read.      Note:          A blank line in a CSV file will be returned as an array     comprising a single null field, and will not be treated     as an error.          Note: If PHP is not properly recognizing the line endings when reading files either on or created by a Macintosh computer, enabling the auto_detect_line_endings run-time configuration option may help resolve the problem.       fgetcsv() returns NULL if an invalid    handle is supplied or FALSE on other errors,    including end of file.            Changelog                                 Version        Description                                    5.3.0                 The escape parameter was added                               4.3.5                 fgetcsv() is now binary safe                               4.3.0                 The enclosure parameter was added                                            Examples            Example #1 Read and print the entire contents of a CSV file       <?php$row\u00a0=\u00a01;if\u00a0(($handle\u00a0=\u00a0fopen(\"test.csv\",\u00a0\"r\"))\u00a0!==\u00a0FALSE)\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0(($data\u00a0=\u00a0fgetcsv($handle,\u00a01000,\u00a0\",\"))\u00a0!==\u00a0FALSE)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$num\u00a0=\u00a0count($data);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<p>\u00a0$num\u00a0fields\u00a0in\u00a0line\u00a0$row:\u00a0<br\u00a0\/><\/p>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row++;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0($c=0;\u00a0$c\u00a0<\u00a0$num;\u00a0$c++)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$data[$c]\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0fclose($handle);}?>                        Notes   Note:          Locale setting is taken into account by this function. If     LANG is e.g. en_US.UTF-8, files in     one-byte encoding are read wrong by this function.                See Also            str_getcsv() - Parse a CSV string into an array     explode() - Split a string by string     file() - Reads entire file into an array     pack() - Pack data into binary string     fputcsv() - Format line as CSV and write to file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileatime.php","title":"fileatime","description":"fileatime   (PHP 4, PHP 5)fileatime \u2014 Gets last access time of file          Description       int fileatime     ( string $filename    )        Gets the last access time of the given file.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the time the file was last accessed,  or FALSE on failure.    The time is returned as a Unix timestamp.            Examples            Example #1 fileatime() example       <?php\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt\u00a0was\u00a0last\u00a0accessed:\u00a0December\u00a029\u00a02002\u00a022:16:23.$filename\u00a0=\u00a0'somefile.txt';if\u00a0(file_exists($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0was\u00a0last\u00a0accessed:\u00a0\"\u00a0.\u00a0date(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0fileatime($filename));}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note:          The atime of a file is supposed to change whenever the data blocks of a     file are being read. This can be costly performance-wise when an     application regularly accesses a very large number of files or     directories.             Some Unix filesystems can be mounted with atime updates disabled to     increase the performance of such applications; USENET news spools are a     common example. On such filesystems this function will be useless.          Note: Note that time resolution may differ from one file system to another.   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            filemtime() - Gets file modification time     fileinode() - Gets file inode     date() - Format a local time\/date"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filegroup.php","title":"filegroup","description":"filegroup   (PHP 4, PHP 5)filegroup \u2014 Gets file group          Description       int filegroup     ( string $filename    )        Gets the file group. The group ID is returned in numerical format, use    posix_getgrgid() to resolve it to a group name.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the group ID of the file, or FALSE if    an error occurs. The group ID is returned in numerical format, use    posix_getgrgid() to resolve it to a group name.    Upon failure, FALSE is returned.            Examples            Example #1 Finding the group of a file       <?php$filename\u00a0=\u00a0'index.php';print_r(posix_getgrgid(filegroup($filename)));?>                        Errors\/Exceptions       Upon failure, an E_WARNING is emitted.            Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            fileowner() - Gets file owner     posix_getgrgid() - Return info about a group by group id     safe_mode_gid"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileinode.php","title":"fileinode","description":"fileinode   (PHP 4, PHP 5)fileinode \u2014 Gets file inode          Description       int fileinode     ( string $filename    )        Gets the file inode.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the inode number of the file,  or FALSE on failure.            Examples            Example #1 Comparing the inode of a file with the current file       <?php$filename\u00a0=\u00a0'index.php';if\u00a0(getmyinode()\u00a0==\u00a0fileinode($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'You\u00a0are\u00a0checking\u00a0the\u00a0current\u00a0file.';}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            getmyinode() - Gets the inode of the current script     stat() - Gives information about a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filectime.php","title":"filectime","description":"filectime   (PHP 4, PHP 5)filectime \u2014 Gets inode change time of file          Description       int filectime     ( string $filename    )        Gets the inode change time of a file.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the time the file was last changed,  or FALSE on failure.    The time is returned as a Unix timestamp.            Examples            Example #1 A filectime() example       <?php\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt\u00a0was\u00a0last\u00a0changed:\u00a0December\u00a029\u00a02002\u00a022:16:23.$filename\u00a0=\u00a0'somefile.txt';if\u00a0(file_exists($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0was\u00a0last\u00a0changed:\u00a0\"\u00a0.\u00a0date(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0filectime($filename));}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note:          Note: In most Unix filesystems, a file is considered changed when its     inode data is changed; that is, when the permissions, owner, group, or     other metadata from the inode is updated. See also     filemtime() (which is what you want to use when you     want to create \"Last Modified\" footers on web pages) and     fileatime().          Note:          Note also that in some Unix texts the ctime of a file is referred to as     being the creation time of the file. This is wrong. There is no creation     time for Unix files in most Unix filesystems.          Note: Note that time resolution may differ from one file system to another.   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            filemtime() - Gets file modification time"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileowner.php","title":"fileowner","description":"fileowner   (PHP 4, PHP 5)fileowner \u2014 Gets file owner          Description       int fileowner     ( string $filename    )        Gets the file owner.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the user ID of the owner of the file,  or FALSE on failure.    The user ID is returned in numerical format, use    posix_getpwuid() to resolve it to a username.            Examples            Example #1 Finding the owner of a file       <?php$filename\u00a0=\u00a0'index.php';print_r(posix_getpwuid(fileowner($filename)));?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            filegroup() - Gets file group     stat() - Gives information about a file     posix_getpwuid() - Return info about a user by user id"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filetype.php","title":"filetype","description":"filetype   (PHP 4, PHP 5)filetype \u2014 Gets file type          Description       string filetype     ( string $filename    )        Returns the type of the given file.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the type of the file. Possible values are fifo, char,    dir, block, link, file, socket and unknown.          Returns FALSE if an error occurs. filetype() will also    produce an E_NOTICE message if the stat call fails    or if the file type is unknown.            Examples            Example #1 filetype() example       <?phpecho\u00a0filetype('\/etc\/passwd');\u00a0\u00a0\/\/\u00a0fileecho\u00a0filetype('\/etc\/');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0dir?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            is_dir() - Tells whether the filename is a directory     is_file() - Tells whether the filename is a regular file     is_link() - Tells whether the filename is a symbolic link     file_exists() - Checks whether a file or directory exists     stat() - Gives information about a file     mime_content_type() - Detect MIME Content-type for a file (deprecated)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filemtime.php","title":"filemtime","description":"filemtime   (PHP 4, PHP 5)filemtime \u2014 Gets file modification time          Description       int filemtime     ( string $filename    )        This function returns the time when the data blocks of a file were being    written to, that is, the time when the content of the file was changed.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the time the file was last modified,  or FALSE on failure.    The time is returned as a Unix timestamp, which is    suitable for the date() function.            Examples            Example #1 filemtime() example       <?php\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt\u00a0was\u00a0last\u00a0modified:\u00a0December\u00a029\u00a02002\u00a022:16:23.$filename\u00a0=\u00a0'somefile.txt';if\u00a0(file_exists($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0was\u00a0last\u00a0modified:\u00a0\"\u00a0.\u00a0date\u00a0(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0filemtime($filename));}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: Note that time resolution may differ from one file system to another.   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            filectime() - Gets inode change time of file     stat() - Gives information about a file     touch() - Sets access and modification time of file     getlastmod() - Gets time of last page modification"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileperms.php","title":"fileperms","description":"fileperms   (PHP 4, PHP 5)fileperms \u2014 Gets file permissions          Description       int fileperms     ( string $filename    )        Gets permissions for the given file.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the file&#039;s permissions as a numeric mode of the same format as that    expected by chmod(),  or FALSE on failure.            Examples            Example #1 Display permissions as an octal value       <?phpecho\u00a0substr(sprintf('%o',\u00a0fileperms('\/tmp')),\u00a0-4);echo\u00a0substr(sprintf('%o',\u00a0fileperms('\/etc\/passwd')),\u00a0-4);?>             The above example will output:       1777 0644                   Example #2 Display full permissions       <?php$perms\u00a0=\u00a0fileperms('\/etc\/passwd');if\u00a0(($perms\u00a0&\u00a00xC000)\u00a0==\u00a00xC000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Socket\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0's';}\u00a0elseif\u00a0(($perms\u00a0&\u00a00xA000)\u00a0==\u00a00xA000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Symbolic\u00a0Link\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'l';}\u00a0elseif\u00a0(($perms\u00a0&\u00a00x8000)\u00a0==\u00a00x8000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Regular\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'-';}\u00a0elseif\u00a0(($perms\u00a0&\u00a00x6000)\u00a0==\u00a00x6000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Block\u00a0special\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'b';}\u00a0elseif\u00a0(($perms\u00a0&\u00a00x4000)\u00a0==\u00a00x4000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Directory\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'd';}\u00a0elseif\u00a0(($perms\u00a0&\u00a00x2000)\u00a0==\u00a00x2000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Character\u00a0special\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'c';}\u00a0elseif\u00a0(($perms\u00a0&\u00a00x1000)\u00a0==\u00a00x1000)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0FIFO\u00a0pipe\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'p';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Unknown\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'u';}\/\/\u00a0Owner$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0100)\u00a0?\u00a0'r'\u00a0:\u00a0'-');$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0080)\u00a0?\u00a0'w'\u00a0:\u00a0'-');$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0040)\u00a0?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0800)\u00a0?\u00a0's'\u00a0:\u00a0'x'\u00a0)\u00a0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0800)\u00a0?\u00a0'S'\u00a0:\u00a0'-'));\/\/\u00a0Group$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0020)\u00a0?\u00a0'r'\u00a0:\u00a0'-');$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0010)\u00a0?\u00a0'w'\u00a0:\u00a0'-');$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0008)\u00a0?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0400)\u00a0?\u00a0's'\u00a0:\u00a0'x'\u00a0)\u00a0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0400)\u00a0?\u00a0'S'\u00a0:\u00a0'-'));\/\/\u00a0World$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0004)\u00a0?\u00a0'r'\u00a0:\u00a0'-');$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0002)\u00a0?\u00a0'w'\u00a0:\u00a0'-');$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0001)\u00a0?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0200)\u00a0?\u00a0't'\u00a0:\u00a0'x'\u00a0)\u00a0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0200)\u00a0?\u00a0'T'\u00a0:\u00a0'-'));echo\u00a0$info;?>             The above example will output:       -rw-r--r--                      Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            chmod() - Changes file mode     is_readable() - Tells whether a file exists and is readable     stat() - Gives information about a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filesize.php","title":"filesize","description":"filesize   (PHP 4, PHP 5)filesize \u2014 Gets file size          Description       int filesize     ( string $filename    )        Gets the size for the given file.            Parameters                    filename                      Path to the file.                                     Return Values       Returns the size of the file in bytes, or FALSE (and generates an error    of level E_WARNING) in case of an error.      Note:      Because PHP&#039;s integer type is signed and many platforms use 32bit integers,     some filesystem functions may return unexpected results for files which     are larger than 2GB.             Examples            Example #1 filesize() example       <?php\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt:\u00a01024\u00a0bytes$filename\u00a0=\u00a0'somefile.txt';echo\u00a0$filename\u00a0.\u00a0':\u00a0'\u00a0.\u00a0filesize($filename)\u00a0.\u00a0'\u00a0bytes';?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            file_exists() - Checks whether a file or directory exists"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fnmatch.php","title":"fnmatch","description":"fnmatch   (PHP 4 >= 4.3.0, PHP 5)fnmatch \u2014 Match filename against a pattern          Description       bool fnmatch     ( string $pattern    , string $string    [, int $flags = 0   ] )        fnmatch() checks if the passed string would    match the given shell wildcard pattern.            Parameters                    pattern                      The shell wildcard pattern.                                string                      The tested string. This function is especially useful for filenames,        but may also be used on regular strings.                      The average user may be used to shell patterns or at least in their        simplest form to &#039;?&#039; and &#039;*&#039;        wildcards so using fnmatch() instead of        preg_match() for        frontend search expression input may be way more convenient for        non-programming users.                                flags                      The value of flags can be any combination of         the following flags, joined with the        binary OR (|) operator.                           A list of possible flags for fnmatch()                                                   Flag            Description                                                        FNM_NOESCAPE                         Disable backslash escaping.                                               FNM_PATHNAME                         Slash in string only matches slash in the given pattern.                                               FNM_PERIOD                         Leading period in string must be exactly matched by period in the given pattern.                                               FNM_CASEFOLD                         Caseless match. Part of the GNU extension.                                                                                         Return Values       Returns TRUE if there is a match, FALSE otherwise.            Changelog                                 Version        Description                                    5.3.0                 This function is now available on Windows platforms.                                            Examples            Example #1 Checking a color name against a shell wildcard pattern       <?phpif\u00a0(fnmatch(\"*gr[ae]y\",\u00a0$color))\u00a0{\u00a0\u00a0echo\u00a0\"some\u00a0form\u00a0of\u00a0gray\u00a0...\";}?>                        Notes   Warning         For now this function is not available on non-POSIX compliant systems.                See Also            glob() - Find pathnames matching a pattern     preg_match() - Perform a regular expression match     sscanf() - Parses input from a string according to a format     printf() - Output a formatted string     sprintf() - Return a formatted string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.flock.php","title":"flock","description":"flock   (PHP 4, PHP 5)flock \u2014 Portable advisory file locking          Description       bool flock     ( resource $handle    , int $operation    [, int &$wouldblock   ] )        flock() allows you to perform a simple reader\/writer    model which can be used on virtually every platform (including most Unix    derivatives and even Windows).          On versions of PHP before 5.3.2, the lock is released also by    fclose() (which is also called automatically when script    finished).          PHP supports a portable way of locking complete files in an advisory way    (which means all accessing programs have to use the same way of locking    or it will not work). By default, this function will block until the    requested lock is acquired; this may be controlled (on non-Windows    platforms) with the LOCK_NB option documented below.             Parameters                    handle              A file system pointer resource that is typically created using fopen().                         operation                      operation is one of the following:                                      LOCK_SH to acquire a shared lock (reader).                                                 LOCK_EX to acquire an exclusive lock (writer).                                                 LOCK_UN to release a lock (shared or exclusive).                                                 It is also possible to add LOCK_NB as a bitmask to one         of the above operations if you don&#039;t want flock() to         block while locking. (not supported on Windows)                                wouldblock                      The optional third argument is set to TRUE if the lock would block        (EWOULDBLOCK errno condition). (not supported on Windows)                                      Return Values       Returns TRUE on success or FALSE on failure.             Changelog                                 Version        Description                                    5.3.2                 The automatic unlocking when the file&#039;s resource handle is closed was         removed. Unlocking now always has to be done manually.                               4.0.1                 The LOCK_XXX constants were added. Prior to that         you must use 1 for LOCK_SH, 2 for         LOCK_EX, 3 for LOCK_UN and         4 for LOCK_NB                                             Examples            Example #1 flock() example       <?php$fp\u00a0=\u00a0fopen(\"\/tmp\/lock.txt\",\u00a0\"r+\");if\u00a0(flock($fp,\u00a0LOCK_EX))\u00a0{\u00a0\/\/\u00a0do\u00a0an\u00a0exclusive\u00a0lock\u00a0\u00a0\u00a0\u00a0ftruncate($fp,\u00a00);\u00a0\/\/\u00a0truncate\u00a0file\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"Write\u00a0something\u00a0here\\n\");\u00a0\u00a0\u00a0\u00a0flock($fp,\u00a0LOCK_UN);\u00a0\/\/\u00a0release\u00a0the\u00a0lock}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0the\u00a0lock!\";}fclose($fp);?>                           Example #2 flock() using the LOCK_NB option       <?php$fp\u00a0=\u00a0fopen('\/tmp\/lock.txt',\u00a0'r+');\/*\u00a0Activate\u00a0the\u00a0LOCK_NB\u00a0option\u00a0on\u00a0an\u00a0LOCK_EX\u00a0operation\u00a0*\/if(!flock($fp,\u00a0LOCK_EX\u00a0|\u00a0LOCK_NB))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unable\u00a0to\u00a0obtain\u00a0lock';\u00a0\u00a0\u00a0\u00a0exit(-1);}\/*\u00a0...\u00a0*\/fclose($fp);?>                         Notes   Note:          flock() uses mandatory locking instead of advisory     locking on Windows. Mandatory locking is also supported on Linux and     System V based operating systems via the usual mechanism supported by the     fcntl() system call: that is, if the file in question has the setgid     permission bit set and the group execution bit cleared. On Linux, the file     system will also need to be mounted with the mand option for this to work.          Note:          Because flock() requires a file pointer, you may have     to use a special lock file to protect access to a file that you intend     to truncate by opening it in write mode (with a \"w\" or \"w+\" argument to     fopen()).          Note:          May only be used on file pointers returned by fopen()     for local files, or file pointers pointing to userspace streams that     implement the streamWrapper::stream_lock() method.          Warning         Assigning another value to handle argument in     subsequent code will release the lock.          Warning         On some operating systems flock() is implemented at     the process level. When using a multithreaded server API like ISAPI you     may not be able to rely on flock() to protect files     against other PHP scripts running in parallel threads of the same server     instance!             flock() is not supported on antiquated filesystems like     FAT and its derivates and will therefore always     return FALSE under this environments (this is especially true for     Windows 98 users)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.fputs.php","title":"fputs","description":"fputs   (PHP 4, PHP 5)fputs \u2014 Alias of fwrite()         Description       This function is an alias of:     fwrite()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.fpassthru.php","title":"fpassthru","description":"fpassthru   (PHP 4, PHP 5)fpassthru \u2014 Output all remaining data on a file pointer          Description       int fpassthru     ( resource $handle    )        Reads to EOF on the given file pointer from the current position and    writes the results to the output buffer.          You may need to call rewind() to reset the file    pointer to the beginning of the file if you have already written data    to the file.          If you just want to dump the contents of a file to the output buffer,    without first modifying it or seeking to a particular offset, you may    want to use the readfile(), which saves you    the fopen() call.            Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                              Return Values       If an error occurs, fpassthru() returns    FALSE.  Otherwise, fpassthru() returns    the number of characters read from handle    and passed through to the output.            Examples            Example #1 Using fpassthru() with binary files       <?php\/\/\u00a0open\u00a0the\u00a0file\u00a0in\u00a0a\u00a0binary\u00a0mode$name\u00a0=\u00a0'.\/img\/ok.png';$fp\u00a0=\u00a0fopen($name,\u00a0'rb');\/\/\u00a0send\u00a0the\u00a0right\u00a0headersheader(\"Content-Type:\u00a0image\/png\");header(\"Content-Length:\u00a0\"\u00a0.\u00a0filesize($name));\/\/\u00a0dump\u00a0the\u00a0picture\u00a0and\u00a0stop\u00a0the\u00a0scriptfpassthru($fp);exit;?>                        Notes   Note:          When using fpassthru() on a binary file on Windows     systems, you should make sure to open the file in binary mode by     appending a b to the mode used in the call to     fopen().             You are encouraged to use the b flag when dealing     with binary files, even if your system does not require it, so that     your scripts will be more portable.                See Also            readfile() - Outputs a file     fopen() - Opens file or URL     popen() - Opens process file pointer     fsockopen() - Open Internet or Unix domain socket connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fopen.php","title":"fopen","description":"fopen   (PHP 4, PHP 5)fopen \u2014 Opens file or URL          Description       resource fopen     ( string $filename    , string $mode    [, bool $use_include_path = false    [, resource $context   ]] )        fopen() binds a named resource, specified by    filename, to a stream.             Parameters                    filename                      If filename is of the form \"scheme:\/\/...\", it        is assumed to be a URL and PHP will search for a protocol handler        (also known as a wrapper) for that scheme. If no wrappers for that        protocol are registered, PHP will emit a notice to help you track        potential problems in your script and then continue as though        filename specifies a regular file.                      If PHP has decided that filename specifies        a local file, then it will try to open a stream on that file.        The file must be accessible to PHP, so you need to ensure that        the file access permissions allow this access.        If you have enabled safe mode,        or open_basedir further        restrictions may apply.                      If PHP has decided that filename specifies        a registered protocol, and that protocol is registered as a        network URL, PHP will check to make sure that        allow_url_fopen is        enabled. If it is switched off, PHP will emit a warning and        the fopen call will fail.              Note:                  The list of supported protocols can be found in Supported Protocols and Wrappers. Some protocols (also referred to as         wrappers) support context         and\/or php.ini options. Refer to the specific page for the         protocol in use for a list of options which can be set. (e.g.         php.ini value user_agent used by the         http wrapper).                              On the Windows platform, be careful to escape any backslashes        used in the path to the file, or use forward slashes.                   <?php$handle\u00a0=\u00a0fopen(\"c:\\\\folder\\\\resource.txt\",\u00a0\"r\");?>                                                    mode                      The mode parameter specifies the type of access        you require to the stream.  It may be any of the following:                           A list of possible modes for fopen()          using mode                                                   mode            Description                                                        &#039;r&#039;                         Open for reading only; place the file pointer at the             beginning of the file.                                               &#039;r+&#039;                         Open for reading and writing; place the file pointer at             the beginning of the file.                                               &#039;w&#039;                         Open for writing only; place the file pointer at the             beginning of the file and truncate the file to zero length.             If the file does not exist, attempt to create it.                                               &#039;w+&#039;                         Open for reading and writing; place the file pointer at             the beginning of the file and truncate the file to zero             length.  If the file does not exist, attempt to create it.                                               &#039;a&#039;                         Open for writing only; place the file pointer at the end of             the file. If the file does not exist, attempt to create it.                                               &#039;a+&#039;                         Open for reading and writing; place the file pointer at             the end of the file. If the file does not exist, attempt to             create it.                                               &#039;x&#039;                         Create and open for writing only; place the file pointer at the             beginning of the file.  If the file already exists, the             fopen() call will fail by returning FALSE and             generating an error of level E_WARNING.  If             the file does not exist, attempt to create it.  This is equivalent             to specifying O_EXCL|O_CREAT flags for the             underlying open(2) system call.                                                &#039;x+&#039;                         Create and open for reading and writing; otherwise it has the             same behavior as &#039;x&#039;.                                               &#039;c&#039;                         Open the file for writing only. If the file does not exist, it is             created. If it exists, it is neither truncated (as opposed to             &#039;w&#039;), nor the call to this function fails (as is             the case with &#039;x&#039;). The file pointer is             positioned on the beginning of the file. This may be useful if it&#039;s             desired to get an advisory lock (see flock())             before attempting to modify the file, as using             &#039;w&#039; could truncate the file before the lock             was obtained (if truncation is desired,             ftruncate() can be used after the lock is             requested).                                               &#039;c+&#039;                         Open the file for reading and writing; otherwise it has the same             behavior as &#039;c&#039;.                                                                  Note:                  Different operating system families have different line-ending         conventions.  When you write a text file and want to insert a line         break, you need to use the correct line-ending character(s) for your         operating system.  Unix based systems use \\n as the         line ending character, Windows based systems use \\r\\n         as the line ending characters and Macintosh based systems use         \\r as the line ending character.                         If you use the wrong line ending characters when writing your files, you         might find that other applications that open those files will \"look         funny\".                         Windows offers a text-mode translation flag (&#039;t&#039;)         which will transparently translate \\n to         \\r\\n when working with the file.  In contrast, you         can also use &#039;b&#039; to force binary mode, which will not         translate your data.  To use these flags, specify either         &#039;b&#039; or &#039;t&#039; as the last character         of the mode parameter.                         The default translation mode depends on the SAPI and version of PHP that         you are using, so you are encouraged to always specify the appropriate         flag for portability reasons.  You should use the &#039;t&#039;         mode if you are working with plain-text files and you use         \\n to delimit your line endings in your script, but         expect your files to be readable with applications such as notepad.  You         should use the &#039;b&#039; in all other cases.                         If you do not specify the &#039;b&#039; flag when working with binary files, you         may experience strange problems with your data, including broken image         files and strange problems with \\r\\n characters.                      Note:                  For portability, it is strongly recommended that you always         use the &#039;b&#039; flag when opening files with fopen().                      Note:                  Again, for portability, it is also strongly recommended that         you re-write code that uses or relies upon the &#039;t&#039;         mode so that it uses the correct line endings and         &#039;b&#039; mode instead.                                        use_include_path                      The optional third use_include_path parameter        can be set to &#039;1&#039; or TRUE if you want to search for the file in the        include_path, too.                                context              Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.                              Return Values       Returns a file pointer resource on success, or FALSE on error.            Errors\/Exceptions       If the open fails, an error of level    E_WARNING is generated.  You may use @ to suppress this    warning.            Changelog                                 Version        Description                                    4.3.2                 As of PHP 4.3.2, the default mode is set to binary for all platforms         that distinguish between binary and text mode.  If you are having         problems with your scripts after upgrading, try using the         &#039;t&#039; flag as a workaround until you have made your         script more portable as mentioned before                               4.3.2                 The &#039;x&#039; and &#039;x+&#039; options were         added                               5.2.6                 The &#039;c&#039; and &#039;c+&#039; options were         added                                            Examples            Example #1 fopen() examples       <?php$handle\u00a0=\u00a0fopen(\"\/home\/rasmus\/file.txt\",\u00a0\"r\");$handle\u00a0=\u00a0fopen(\"\/home\/rasmus\/file.gif\",\u00a0\"wb\");$handle\u00a0=\u00a0fopen(\"http:\/\/www.example.com\/\",\u00a0\"r\");$handle\u00a0=\u00a0fopen(\"ftp:\/\/user:password@example.com\/somefile.txt\",\u00a0\"w\");?>                        Notes   WarningWhen using SSL, Microsoft IIS will violate the protocol by closing the connection without sending a close_notify indicator. PHP will report this as \"SSL: Fatal Protocol Error\" when you reach the end of the data. To work around this, the value of error_reporting should be lowered to a level that does not include warnings. PHP 4.3.7 and higher can detect buggy IIS server software when you open the stream using the https:\/\/ wrapper and will suppress the warning. When using fsockopen() to create an ssl:\/\/ socket, the developer is responsible for detecting and suppressing this warning.   Note: When safe mode is enabled, PHP checks whether the directory in which the script is operating has the same UID (owner) as the script that is being executed.       If you are experiencing problems with reading and writing to files and    you&#039;re using the server module version of PHP, remember to make sure that    the files and directories you&#039;re using are accessible to the server    process.            See Also            Supported Protocols and Wrappers     fclose() - Closes an open file pointer     fgets() - Gets line from file pointer     fread() - Binary-safe file read     fwrite() - Binary-safe file write     fsockopen() - Open Internet or Unix domain socket connection     file() - Reads entire file into an array     file_exists() - Checks whether a file or directory exists     is_readable() - Tells whether a file exists and is readable     stream_set_timeout() - Set timeout period on a stream     popen() - Opens process file pointer     stream_context_create() - Create a streams context     umask() - Changes the current umask"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fscanf.php","title":"fscanf","description":"fscanf   (PHP 4 >= 4.0.1, PHP 5)fscanf \u2014 Parses input from a file according to a format          Description       mixed fscanf     ( resource $handle    , string $format    [, mixed &$...   ] )        The function fscanf() is similar to    sscanf(), but it takes its input from a file    associated with handle and interprets the    input according to the specified format, which is    described in the documentation for sprintf().           Any whitespace in the format string matches any whitespace in the input    stream. This means that even a tab \\t in the format    string can match a single space character in the input stream.          Each call to fscanf() reads one line from the file.            Parameters                    handle              A file system pointer resource that is typically created using fopen().                         format                      The specified format as described in the         sprintf() documentation.                                ...                      The optional assigned values.                                     Return Values       If only two parameters were passed to this function, the values parsed will be    returned as an array. Otherwise, if optional parameters are passed, the    function will return the number of assigned values. The optional    parameters must be passed by reference.              Changelog                                 Version        Description                                    4.3.0                 Before this time, the maximum number of characters read from         the file was 512 (or up to the first \\n, whichever came first).         But now, arbitrarily long lines will be read and scanned.                                            Examples            Example #1 fscanf() Example       <?php$handle\u00a0=\u00a0fopen(\"users.txt\",\u00a0\"r\");while\u00a0($userinfo\u00a0=\u00a0fscanf($handle,\u00a0\"%s\\t%s\\t%s\\n\"))\u00a0{\u00a0\u00a0\u00a0\u00a0list\u00a0($name,\u00a0$profession,\u00a0$countrycode)\u00a0=\u00a0$userinfo;\u00a0\u00a0\u00a0\u00a0\/\/...\u00a0do\u00a0something\u00a0with\u00a0the\u00a0values}fclose($handle);?>                           Example #2 Contents of users.txt      javier  argonaut        pe hiroshi sculptor        jp robert  slacker us luigi   florist it                       See Also            fread() - Binary-safe file read     fgets() - Gets line from file pointer     fgetss() - Gets line from file pointer and strip HTML tags     sscanf() - Parses input from a string according to a format     printf() - Output a formatted string     sprintf() - Return a formatted string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fputcsv.php","title":"fputcsv","description":"fputcsv   (PHP 5 >= 5.1.0)fputcsv \u2014 Format line as CSV and write to file pointer          Description       int fputcsv     ( resource $handle    , array $fields    [, string $delimiter = &#039;,&#039;    [, string $enclosure = &#039;\"&#039;   ]] )        fputcsv() formats a line (passed as a    fields array) as CSV and write it (terminated by a    newline) to the specified file handle.             Parameters                    handle              The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).                         fields                      An array of values.                                delimiter                      The optional delimiter parameter sets the field        delimiter (one character only).                                enclosure                      The optional enclosure parameter sets the field        enclosure (one character only).                                     Return Values       Returns the length of the written string or FALSE on failure.            Examples            Example #1 fputcsv() example       <?php$list\u00a0=\u00a0array\u00a0(\u00a0\u00a0\u00a0\u00a0array('aaa',\u00a0'bbb',\u00a0'ccc',\u00a0'dddd'),\u00a0\u00a0\u00a0\u00a0array('123',\u00a0'456',\u00a0'789'),\u00a0\u00a0\u00a0\u00a0array('\"aaa\"',\u00a0'\"bbb\"'));$fp\u00a0=\u00a0fopen('file.csv',\u00a0'w');foreach\u00a0($list\u00a0as\u00a0$fields)\u00a0{\u00a0\u00a0\u00a0\u00a0fputcsv($fp,\u00a0$fields);}fclose($fp);?>             The above example will write the following to file.csv:       aaa,bbb,ccc,dddd 123,456,789 \"\"\"aaa\"\"\",\"\"\"bbb\"\"\"                       Notes   Note: If PHP is not properly recognizing the line endings when reading files either on or created by a Macintosh computer, enabling the auto_detect_line_endings run-time configuration option may help resolve the problem.         See Also            fgetcsv() - Gets line from file pointer and parse for CSV fields"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fseek.php","title":"fseek","description":"fseek   (PHP 4, PHP 5)fseek \u2014 Seeks on a file pointer          Description       int fseek     ( resource $handle    , int $offset    [, int $whence = SEEK_SET   ] )        Sets the file position indicator for the file referenced by    handle. The new position, measured in bytes    from the beginning of the file, is obtained by adding    offset to the position specified by    whence.          In general, it is allowed to seek past the end-of-file; if data is then    written, reads in any unwritten region between the end-of-file and the    sought position will yield bytes with value 0. However, certain streams    may not support this behavior, especially when they have an underlying    fixed size storage.            Parameters                    handle              A file system pointer resource that is typically created using fopen().                         offset                      The offset.                      To move to a position before the end-of-file, you need to pass        a negative value in offset and        set whence        to SEEK_END.                                whence                      whence values are:                 SEEK_SET - Set position equal to offset bytes.         SEEK_CUR - Set position to current location plus offset.         SEEK_END - Set position to end-of-file plus offset.                                             Return Values       Upon success, returns 0; otherwise, returns -1.            Examples            Example #1 fseek() example       <?php$fp\u00a0=\u00a0fopen('somefile.txt',\u00a0'r');\/\/\u00a0read\u00a0some\u00a0data$data\u00a0=\u00a0fgets($fp,\u00a04096);\/\/\u00a0move\u00a0back\u00a0to\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0file\/\/\u00a0same\u00a0as\u00a0rewind($fp);fseek($fp,\u00a00);?>                        Notes   Note:          If you have opened the file in append (a or     a+) mode, any data you write to the file will always be     appended, regardless of the file position, and the result of calling     fseek() will be undefined.          Note:          Not all streams support seeking. For those that do not support seeking,     forward seeking from the current position is accomplished by reading     and discarding data; other forms of seeking will fail.                See Also            ftell() - Returns the current position of the file read\/write pointer     rewind() - Rewind the position of a file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fstat.php","title":"fstat","description":"fstat   (PHP 4, PHP 5)fstat \u2014 Gets information about a file using an open file pointer          Description       array fstat     ( resource $handle    )        Gathers the statistics of the file opened by the file    pointer handle. This function is similar to the    stat() function except that it operates    on an open file pointer instead of a filename.            Parameters                    handle              A file system pointer resource that is typically created using fopen().                              Return Values       Returns an array with the statistics of the file; the format of the array    is described in detail on the stat() manual page.            Examples            Example #1 fstat() example       <?php\/\/\u00a0open\u00a0a\u00a0file$fp\u00a0=\u00a0fopen(\"\/etc\/passwd\",\u00a0\"r\");\/\/\u00a0gather\u00a0statistics$fstat\u00a0=\u00a0fstat($fp);\/\/\u00a0close\u00a0the\u00a0filefclose($fp);\/\/\u00a0print\u00a0only\u00a0the\u00a0associative\u00a0partprint_r(array_slice($fstat,\u00a013));?>             The above example will output something similar to:       Array (     [dev] => 771     [ino] => 488704     [mode] => 33188     [nlink] => 1     [uid] => 0     [gid] => 0     [rdev] => 0     [size] => 1114     [atime] => 1061067181     [mtime] => 1056136526     [ctime] => 1056136526     [blksize] => 4096     [blocks] => 8 )                      Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftell.php","title":"ftell","description":"ftell   (PHP 4, PHP 5)ftell \u2014 Returns the current position of the file read\/write pointer          Description       int ftell     ( resource $handle    )        Returns the position of the file pointer referenced by handle.            Parameters                    handle                      The file pointer must be valid, and must point to a file successfully        opened by fopen() or popen().        ftell() gives undefined results for append-only streams        (opened with \"a\" flag).                                     Return Values       Returns the position of the file pointer referenced by    handle as an integer; i.e., its offset into the file stream.          If an error occurs, returns FALSE.            Examples            Example #1 ftell() example       <?php\/\/\u00a0opens\u00a0a\u00a0file\u00a0and\u00a0read\u00a0some\u00a0data$fp\u00a0=\u00a0fopen(\"\/etc\/passwd\",\u00a0\"r\");$data\u00a0=\u00a0fgets($fp,\u00a012);\/\/\u00a0where\u00a0are\u00a0we\u00a0?echo\u00a0ftell($fp);\u00a0\/\/\u00a011fclose($fp);?>                        See Also            fopen() - Opens file or URL     popen() - Opens process file pointer     fseek() - Seeks on a file pointer     rewind() - Rewind the position of a file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftruncate.php","title":"ftruncate","description":"ftruncate   (PHP 4, PHP 5)ftruncate \u2014 Truncates a file to a given length         Description       bool ftruncate     ( resource $handle    , int $size    )        Takes the filepointer, handle, and truncates the file to    length, size.            Parameters                    handle                      The file pointer.              Note:                  The handle must be open for writing.                                        size                      The size to truncate to.              Note:                  If size is larger than the file then the file         is extended with null bytes.                         If size is smaller than the file then the file         is truncated to that size.                                             Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    PHP 4.3.3                 Prior to this release ftruncate() returned an         integer value of 1 on success, instead of         boolean TRUE.                                            Examples            Example #1 File truncation example       <?php$filename\u00a0=\u00a0'lorem_ipsum.txt';$handle\u00a0=\u00a0fopen($filename,\u00a0'r+');ftruncate($handle,\u00a0rand(1,\u00a0filesize($filename)));rewind($handle);echo\u00a0fread($handle,\u00a0filesize($filename));fclose($handle);?>                        Notes   Note:          The file pointer is not changed.                 See Also            fopen() - Opens file or URL     fseek() - Seeks on a file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fread.php","title":"fread","description":"fread   (PHP 4, PHP 5)fread \u2014 Binary-safe file read          Description       string fread     ( resource $handle    , int $length    )        fread() reads up to    length bytes from the file pointer    referenced by handle. Reading stops as soon as one    of the following conditions is met:                      length bytes have been read                             EOF (end of file) is reached                             a packet becomes available or the        socket timeout occurs (for network streams)                             if the stream is read buffered and it does not represent a plain file, at       most one read of up to a number of bytes equal to the chunk size (usually       8192) is made; depending on the previously buffered data, the size of the       returned data may be larger than the chunk size.                           Parameters                    handle              A file system pointer resource that is typically created using fopen().                         length                      Up to length number of bytes read.                                     Return Values       Returns the read string  or FALSE on failure.            Examples            Example #1 A simple fread() example       <?php\/\/\u00a0get\u00a0contents\u00a0of\u00a0a\u00a0file\u00a0into\u00a0a\u00a0string$filename\u00a0=\u00a0\"\/usr\/local\/something.txt\";$handle\u00a0=\u00a0fopen($filename,\u00a0\"r\");$contents\u00a0=\u00a0fread($handle,\u00a0filesize($filename));fclose($handle);?>                           Example #2 Binary fread() example     Warning             On systems which differentiate between binary and text files       (i.e. Windows) the file must be opened with &#039;b&#039; included in       fopen() mode parameter.                  <?php$filename\u00a0=\u00a0\"c:\\\\files\\\\somepic.gif\";$handle\u00a0=\u00a0fopen($filename,\u00a0\"rb\");$contents\u00a0=\u00a0fread($handle,\u00a0filesize($filename));fclose($handle);?>                           Example #3 Remote fread() examples     Warning             When reading from anything that is not a regular local file, such as       streams returned when       reading remote files or from       popen() and fsockopen(), reading       will stop after a packet is available.  This means that you should       collect the data together in chunks as shown in the examples below.                  <?php\/\/\u00a0For\u00a0PHP\u00a05\u00a0and\u00a0up$handle\u00a0=\u00a0fopen(\"http:\/\/www.example.com\/\",\u00a0\"rb\");$contents\u00a0=\u00a0stream_get_contents($handle);fclose($handle);?>               <?php$handle\u00a0=\u00a0fopen(\"http:\/\/www.example.com\/\",\u00a0\"rb\");$contents\u00a0=\u00a0'';while\u00a0(!feof($handle))\u00a0{\u00a0\u00a0$contents\u00a0.=\u00a0fread($handle,\u00a08192);}fclose($handle);?>                       Notes   Note:          If you just want to get the contents of a file into a string, use     file_get_contents() as it has much better performance     than the code above.          Note:          Note that fread() reads from the current position of      the file pointer. Use ftell() to find the current      position of the pointer and rewind() to rewind the      pointer position.                See Also            fwrite() - Binary-safe file write     fopen() - Opens file or URL     fsockopen() - Open Internet or Unix domain socket connection     popen() - Opens process file pointer     fgets() - Gets line from file pointer     fgetss() - Gets line from file pointer and strip HTML tags     fscanf() - Parses input from a file according to a format     file() - Reads entire file into an array     fpassthru() - Output all remaining data on a file pointer     ftell() - Returns the current position of the file read\/write pointer     rewind() - Rewind the position of a file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-executable.php","title":"is_executable","description":"is_executable   (PHP 4, PHP 5)is_executable \u2014 Tells whether the filename is executable          Description       bool is_executable     ( string $filename    )        Tells whether the filename is executable.            Parameters                    filename                      Path to the file.                                     Return Values       Returns TRUE if the filename exists and is executable, or FALSE on    error.            Changelog                                 Version        Description                                    5.0.0                 is_executable() became available with         Windows                                            Examples            Example #1 is_executable() example       <?php$file\u00a0=\u00a0'\/home\/vincent\/somefile.sh';if\u00a0(is_executable($file))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$file.'\u00a0is\u00a0executable';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$file.'\u00a0is\u00a0not\u00a0executable';}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            is_file() - Tells whether the filename is a regular file     is_link() - Tells whether the filename is a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fwrite.php","title":"fwrite","description":"fwrite   (PHP 4, PHP 5)fwrite \u2014 Binary-safe file write          Description       int fwrite     ( resource $handle    , string $string    [, int $length   ] )        fwrite() writes the contents of    string to the file stream pointed to by    handle.             Parameters                    handle              A file system pointer resource that is typically created using fopen().                         string                      The string that is to be written.                                length                      If the length argument is given, writing will        stop after length bytes have been written or        the end of string is reached, whichever comes        first.                      Note that if the length argument is given,        then the magic_quotes_runtime        configuration option will be ignored and no slashes will be        stripped from string.                                     Return Values       fwrite() returns the number of bytes    written, or FALSE on error.            Notes   Note:          Writing to a network stream may end before the whole string is written.     Return value of fwrite() may be checked:       <?phpfunction\u00a0fwrite_stream($fp,\u00a0$string)\u00a0{\u00a0\u00a0\u00a0\u00a0for\u00a0($written\u00a0=\u00a00;\u00a0$written\u00a0<\u00a0strlen($string);\u00a0$written\u00a0+=\u00a0$fwrite)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fwrite\u00a0=\u00a0fwrite($fp,\u00a0substr($string,\u00a0$written));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($fwrite\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$written;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0$written;}?>                     Note:          On systems which differentiate between binary and text files     (i.e. Windows) the file must be opened with &#039;b&#039; included in     fopen() mode parameter.          Note:          If handle was fopen()ed in     append mode, fwrite()s are atomic (unless the size of     string exceeds the filesystem&#039;s block size, on some     platforms, and as long as the file is on a local filesystem). That is,     there is no need to flock() a resource before calling     fwrite(); all of the data will be written without     interruption.          Note:          If writing twice to the file pointer, then the data will be appended to      the end of the file content:           <?php$fp\u00a0=\u00a0fopen('data.txt',\u00a0'w');fwrite($fp,\u00a0'1');fwrite($fp,\u00a0'23');fclose($fp);\/\/\u00a0the\u00a0content\u00a0of\u00a0'data.txt'\u00a0is\u00a0now\u00a0123\u00a0and\u00a0not\u00a023!?>                            Examples            Example #1 A simple fwrite() example       <?php$filename\u00a0=\u00a0'test.txt';$somecontent\u00a0=\u00a0\"Add\u00a0this\u00a0to\u00a0the\u00a0file\\n\";\/\/\u00a0Let's\u00a0make\u00a0sure\u00a0the\u00a0file\u00a0exists\u00a0and\u00a0is\u00a0writable\u00a0first.if\u00a0(is_writable($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0In\u00a0our\u00a0example\u00a0we're\u00a0opening\u00a0$filename\u00a0in\u00a0append\u00a0mode.\u00a0\u00a0\u00a0\u00a0\/\/\u00a0The\u00a0file\u00a0pointer\u00a0is\u00a0at\u00a0the\u00a0bottom\u00a0of\u00a0the\u00a0file\u00a0hence\u00a0\u00a0\u00a0\u00a0\/\/\u00a0that's\u00a0where\u00a0$somecontent\u00a0will\u00a0go\u00a0when\u00a0we\u00a0fwrite()\u00a0it.\u00a0\u00a0\u00a0\u00a0if\u00a0(!$handle\u00a0=\u00a0fopen($filename,\u00a0'a'))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Cannot\u00a0open\u00a0file\u00a0($filename)\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Write\u00a0$somecontent\u00a0to\u00a0our\u00a0opened\u00a0file.\u00a0\u00a0\u00a0\u00a0if\u00a0(fwrite($handle,\u00a0$somecontent)\u00a0===\u00a0FALSE)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Cannot\u00a0write\u00a0to\u00a0file\u00a0($filename)\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Success,\u00a0wrote\u00a0($somecontent)\u00a0to\u00a0file\u00a0($filename)\";\u00a0\u00a0\u00a0\u00a0fclose($handle);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0file\u00a0$filename\u00a0is\u00a0not\u00a0writable\";}?>                        See Also            fread() - Binary-safe file read     fopen() - Opens file or URL     fsockopen() - Open Internet or Unix domain socket connection     popen() - Opens process file pointer     file_get_contents() - Reads entire file into a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-dir.php","title":"is_dir","description":"is_dir   (PHP 4, PHP 5)is_dir \u2014 Tells whether the filename is a directory          Description       bool is_dir     ( string $filename    )        Tells whether the given filename is a directory.            Parameters                    filename                      Path to the file. If filename is a relative        filename, it will be checked relative to the current working        directory. If filename is a symbolic or hard link         then the link will be resolved and checked. If you have enabled safe mode,        or open_basedir further        restrictions may apply.                                     Return Values       Returns TRUE if the filename exists and is a directory, FALSE    otherwise.            Examples            Example #1 is_dir() example       <?phpvar_dump(is_dir('a_file.txt'));var_dump(is_dir('bogus_dir\/abc'));var_dump(is_dir('..'));\u00a0\/\/one\u00a0dir\u00a0up?>             The above example will output:       bool(false) bool(false) bool(true)                      Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            chdir() - Change directory     dir     opendir() - Open directory handle     is_file() - Tells whether the filename is a regular file     is_link() - Tells whether the filename is a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-file.php","title":"is_file","description":"is_file   (PHP 4, PHP 5)is_file \u2014 Tells whether the filename is a regular file          Description       bool is_file     ( string $filename    )        Tells whether the given file is a regular file.            Parameters                    filename                      Path to the file.                                     Return Values       Returns TRUE if the filename exists and is a regular file, FALSE    otherwise.      Note:      Because PHP&#039;s integer type is signed and many platforms use 32bit integers,     some filesystem functions may return unexpected results for files which     are larger than 2GB.             Examples            Example #1 is_file() example       <?phpvar_dump(is_file('a_file.txt'))\u00a0.\u00a0\"\\n\";var_dump(is_file('\/usr\/bin\/'))\u00a0.\u00a0\"\\n\";?>             The above example will output:       bool(true) bool(false)                      Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            is_dir() - Tells whether the filename is a directory     is_link() - Tells whether the filename is a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-readable.php","title":"is_readable","description":"is_readable   (PHP 4, PHP 5)is_readable \u2014 Tells whether a file exists and is readable          Description       bool is_readable     ( string $filename    )        Tells whether a file exists and is readable.            Parameters                    filename                      Path to the file.                                     Return Values       Returns TRUE if the file or directory specified by    filename exists and is readable, FALSE otherwise.            Examples            Example #1 is_readable() example       <?php$filename\u00a0=\u00a0'test.txt';if\u00a0(is_readable($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0readable';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0not\u00a0readable';}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes       Keep in mind that PHP may be accessing the file as the user    id that the web server runs as (often &#039;nobody&#039;). Safe mode    limitations are not taken into account before PHP 5.1.5.      Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.   Note:          The check is done using the real UID\/GID instead of the effective one.                See Also            is_writable() - Tells whether the filename is writable     file_exists() - Checks whether a file or directory exists     fgets() - Gets line from file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.glob.php","title":"glob","description":"glob   (PHP 4 >= 4.3.0, PHP 5)glob \u2014 Find pathnames matching a pattern          Description       array glob     ( string $pattern    [, int $flags = 0   ] )        The glob() function searches for all the pathnames    matching pattern according to the rules used by    the libc glob() function, which is similar to the rules used by common    shells.            Parameters                    pattern                      The pattern. No tilde expansion or parameter substitution is done.                                flags                      Valid flags:                                      GLOB_MARK - Adds a slash to each directory returned                                                 GLOB_NOSORT - Return files as they appear in the           directory (no sorting)                                                 GLOB_NOCHECK - Return the search pattern if no           files matching it were found                                                 GLOB_NOESCAPE - Backslashes do not quote           metacharacters                                                 GLOB_BRACE - Expands {a,b,c} to match &#039;a&#039;, &#039;b&#039;,           or &#039;c&#039;                                                 GLOB_ONLYDIR - Return only directory entries           which match the pattern                                                 GLOB_ERR - Stop on read errors (like unreadable           directories), by default errors are ignored.                                                                Return Values       Returns an array containing the matched files\/directories, an empty array    if no file matched or FALSE on error.      Note:          On some systems it is impossible to distinguish between empty match and an     error.                Changelog                                 Version        Description                                    5.1.0                 GLOB_ERR was added                               4.3.3                 GLOB_ONLYDIR became available on Windows and         other systems not using the GNU C library                                            Examples            Example #1       Convenient way how glob() can replace      opendir() and friends.            <?phpforeach\u00a0(glob(\"*.txt\")\u00a0as\u00a0$filename)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0size\u00a0\"\u00a0.\u00a0filesize($filename)\u00a0.\u00a0\"\\n\";}?>             The above example will output something similar to:       funclist.txt size 44686 funcsummary.txt size 267625 quickref.txt size 137820                      Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.   Note:          This function isn&#039;t available on some systems (e.g. old Sun OS).          Note:          The GLOB_BRACE flag is not available on some non GNU     systems, like Solaris.                See Also            opendir() - Open directory handle     readdir() - Read entry from directory handle     closedir() - Close directory handle     fnmatch() - Match filename against a pattern"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-link.php","title":"is_link","description":"is_link   (PHP 4, PHP 5)is_link \u2014 Tells whether the filename is a symbolic link          Description       bool is_link     ( string $filename    )        Tells whether the given file is a symbolic link.            Parameters                    filename                      Path to the file.                                      Return Values       Returns TRUE if the filename exists and is a symbolic link, FALSE    otherwise.            Examples            Example #1 Create and confirm if a file is a symbolic link       <?php$link\u00a0=\u00a0'uploads';if\u00a0(is_link($link))\u00a0{\u00a0\u00a0\u00a0\u00a0echo(readlink($link));}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0symlink('uploads.php',\u00a0$link);}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            is_dir() - Tells whether the filename is a directory     is_file() - Tells whether the filename is a regular file     readlink() - Returns the target of a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-writeable.php","title":"is_writeable","description":"is_writeable   (PHP 4, PHP 5)is_writeable \u2014 Alias of is_writable()         Description       This function is an alias of:     is_writable()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-uploaded-file.php","title":"is_uploaded_file","description":"is_uploaded_file   (PHP 4 >= 4.0.3, PHP 5)is_uploaded_file \u2014 Tells whether the file was uploaded via HTTP POST          Description       bool is_uploaded_file     ( string $filename    )        Returns TRUE if the file named by filename was    uploaded via HTTP POST. This is useful to help ensure that a    malicious user hasn&#039;t tried to trick the script into working on    files upon which it should not be working--for instance,    \/etc\/passwd.          This sort of check is especially important if there is any chance    that anything done with uploaded files could reveal their    contents to the user, or even to other users on the same    system.          For proper working, the function is_uploaded_file() needs    an argument like $_FILES['userfile']['tmp_name'], - the name of the uploaded    file on the client&#039;s machine $_FILES['userfile']['name'] does not work.            Parameters                    filename                      The filename being checked.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 is_uploaded_file() example       <?phpif\u00a0(is_uploaded_file($_FILES['userfile']['tmp_name']))\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"File\u00a0\".\u00a0$_FILES['userfile']['name']\u00a0.\"\u00a0uploaded\u00a0successfully.\\n\";\u00a0\u00a0\u00a0echo\u00a0\"Displaying\u00a0contents\\n\";\u00a0\u00a0\u00a0readfile($_FILES['userfile']['tmp_name']);}\u00a0else\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"Possible\u00a0file\u00a0upload\u00a0attack:\u00a0\";\u00a0\u00a0\u00a0echo\u00a0\"filename\u00a0'\".\u00a0$_FILES['userfile']['tmp_name']\u00a0.\u00a0\"'.\";}?>                        See Also            move_uploaded_file() - Moves an uploaded file to a new location     $_FILES     See Handling file uploads for a simple usage example."},{"url":"http:\/\/www.php.net\/manual\/en\/function.lchgrp.php","title":"lchgrp","description":"lchgrp   (PHP 5 >= 5.1.2)lchgrp \u2014 Changes group ownership of symlink          Description       bool lchgrp     ( string $filename    , mixed $group    )        Attempts to change the group of the symlink filename    to group.          Only the superuser may change the group of a symlink arbitrarily; other    users may change the group of a symlink to any group of which that user is    a member.            Parameters                    filename                      Path to the symlink.                                group                      The group specified by name or number.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Changing the group of a symbolic link       <?php$target\u00a0=\u00a0'output.php';$link\u00a0=\u00a0'output.html';symlink($target,\u00a0$link);lchgrp($link,\u00a08);?>                        Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.   Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.   Note: This function is not implemented on Windows platforms.         See Also            chgrp() - Changes file group     lchown() - Changes user ownership of symlink     chown() - Changes file owner     chmod() - Changes file mode"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lchown.php","title":"lchown","description":"lchown   (PHP 5 >= 5.1.2)lchown \u2014 Changes user ownership of symlink          Description       bool lchown     ( string $filename    , mixed $user    )        Attempts to change the owner of the symlink filename    to user user.          Only the superuser may change the owner of a symlink.            Parameters                    filename                      Path to the file.                                user                      User name or number.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Changing the owner of a symbolic link       <?php$target\u00a0=\u00a0'output.php';$link\u00a0=\u00a0'output.html';symlink($target,\u00a0$link);lchown($link,\u00a08);?>                        Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.   Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.   Note: This function is not implemented on Windows platforms.         See Also            chown() - Changes file owner     lchgrp() - Changes group ownership of symlink     chgrp() - Changes file group     chmod() - Changes file mode"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-writable.php","title":"is_writable","description":"is_writable   (PHP 4, PHP 5)is_writable \u2014 Tells whether the filename is writable          Description       bool is_writable     ( string $filename    )        Returns TRUE if the filename exists and is    writable.  The filename argument may be a directory name allowing you    to check if a directory is writable.          Keep in mind that PHP may be accessing the file as the user id    that the web server runs as (often &#039;nobody&#039;). Safe mode    limitations are not taken into account.            Parameters                    filename                      The filename being checked.                                      Return Values       Returns TRUE if the filename exists and is    writable.              Examples            Example #1 is_writable() example       <?php$filename\u00a0=\u00a0'test.txt';if\u00a0(is_writable($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0writable';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0not\u00a0writable';}?>                        Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes      Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.          See Also            is_readable() - Tells whether a file exists and is readable     file_exists() - Checks whether a file or directory exists     fwrite() - Binary-safe file write"},{"url":"http:\/\/www.php.net\/manual\/en\/function.linkinfo.php","title":"linkinfo","description":"linkinfo   (PHP 4, PHP 5)linkinfo \u2014 Gets information about a link          Description       int linkinfo     ( string $path    )        Gets information about a link.            This function is used to verify if a link (pointed to by    path) really exists (using the same method as the    S_ISLNK macro defined in stat.h).            Parameters                    path                      Path to the link.                                     Return Values       linkinfo() returns the st_dev field    of the Unix C stat structure returned by the lstat    system call. Returns 0 or FALSE in case of error.            Changelog                                 Version        Description                                    5.3.0                 This function is now available on Windows platforms  (Vista, Server          2008 or greater).                                            Examples            Example #1 linkinfo() example       <?phpecho\u00a0linkinfo('\/vmlinuz');\u00a0\/\/\u00a0835?>                        See Also            symlink() - Creates a symbolic link     link() - Create a hard link     readlink() - Returns the target of a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.link.php","title":"link","description":"link   (PHP 4, PHP 5)link \u2014 Create a hard link          Description       bool link     ( string $target    , string $link    )        link() creates a hard link.            Parameters                    target                      Target of the link.                                link                      The link name.                                     Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note:          For Windows only: This function requires PHP to run in an elevated     mode or with the UAC disabled.                Changelog                                 Version        Description                                    5.3.0                 This function is now available on Windows platforms  (Vista, Server          2008 or greater).                                            Examples            Example #1 Creating a simple hard link       <?php$target\u00a0=\u00a0'source.ext';\u00a0\/\/\u00a0This\u00a0is\u00a0the\u00a0file\u00a0that\u00a0already\u00a0exists$link\u00a0=\u00a0'newfile.ext';\u00a0\/\/\u00a0This\u00a0the\u00a0filename\u00a0that\u00a0you\u00a0want\u00a0to\u00a0link\u00a0it\u00a0tolink($target,\u00a0$link);?>                        Notes   Note: This function will not work on remote files as the file to be examined must be accessible via the server&#039;s filesystem.         See Also            symlink() - Creates a symbolic link     readlink() - Returns the target of a symbolic link     linkinfo() - Gets information about a link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lstat.php","title":"lstat","description":"lstat   (PHP 4, PHP 5)lstat \u2014 Gives information about a file or symbolic link          Description       array lstat     ( string $filename    )        Gathers the statistics of the file or symbolic link named by    filename.              Parameters                    filename                      Path to a file or a symbolic link.                                     Return Values       See the manual page for stat() for information on    the structure of the array that lstat() returns.    This function is identical to the stat() function    except that if the filename parameter is a symbolic    link, the status of the symbolic link is returned, not the status of the    file pointed to by the symbolic link.            Examples            Example #1 Comparison of stat() and lstat()       <?phpsymlink('uploads.php',\u00a0'uploads');\/\/\u00a0Contrast\u00a0information\u00a0for\u00a0uploads.php\u00a0and\u00a0uploadsarray_diff(stat('uploads'),\u00a0lstat('uploads'));?>             The above example will output something similar to:           Information that differs between the two files.            Array (     [ino] => 97236376     [mode] => 33188     [size] => 34     [atime] => 1223580003     [mtime] => 1223581848     [ctime] => 1223581848     [blocks] => 8 )                      Errors\/Exceptions    Upon failure, an E_WARNING is emitted.          Notes   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            stat() - Gives information about a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-ini-string.php","title":"parse_ini_string","description":"parse_ini_string   (PHP 5 >= 5.3.0)parse_ini_string \u2014 Parse a configuration string          Description       array parse_ini_string     ( string $ini    [, bool $process_sections = false    [, int $scanner_mode = INI_SCANNER_NORMAL   ]] )        parse_ini_string() returns the settings in string    ini in an associative array.          The structure of the ini string is the same as the php.ini&#039;s.            Parameters                    ini                      The contents of the ini file being parsed.                                process_sections                      By setting the process_sections        parameter to TRUE, you get a multidimensional array, with        the section names and settings included. The default        for process_sections is FALSE                                      scanner_mode                      Can either be INI_SCANNER_NORMAL (default) or         INI_SCANNER_RAW. If INI_SCANNER_RAW         is supplied, then option values will not be parsed.                                      Return Values       The settings are returned as an associative array on success,    and FALSE on failure.            Notes   Note:          There are reserved words which must not be used as keys for     ini files.  These include: null, yes, no, true, false, on, off, none.     Values null, no and false results in \"\", yes and true results in \"1\".     Characters ?{}|&~![()^\" must not be used anywhere in     the key and have a special meaning in the value.                 See Also            parse_ini_file() - Parse a configuration file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mkdir.php","title":"mkdir","description":"mkdir   (PHP 4, PHP 5)mkdir \u2014 Makes directory          Description       bool mkdir     ( string $pathname    [, int $mode = 0777    [, bool $recursive = false    [, resource $context   ]]] )        Attempts to create the directory specified by pathname.            Parameters                    pathname                      The directory path.                                mode                      The mode is 0777 by default, which means the widest possible        access. For more information on modes, read the details        on the chmod() page.              Note:                  mode is ignored on Windows.                              Note that you probably want to specify the mode as an octal number,        which means it should have a leading zero. The mode is also modified        by the current umask, which you can change using        umask().                                recursive                      Allows the creation of nested directories specified in the         pathname. Defaults to FALSE.                                context              Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.                              Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.0.0                 The recursive parameter was added                               5.0.0                 As of PHP 5.0.0 mkdir() can also be used with         some URL wrappers.  Refer to Supported Protocols and Wrappers for a listing of which wrappers support         mkdir()                               4.2.0                 The mode parameter became optional.                                            Examples            Example #1 mkdir() example       <?phpmkdir(\"\/path\/to\/my\/dir\",\u00a00700);?>                           Example #2 mkdir() using the recursive parameter       <?php\/\/\u00a0Desired\u00a0folder\u00a0structure$structure\u00a0=\u00a0'.\/depth1\/depth2\/depth3\/';\/\/\u00a0To\u00a0create\u00a0the\u00a0nested\u00a0structure,\u00a0the\u00a0$recursive\u00a0parameter\u00a0\/\/\u00a0to\u00a0mkdir()\u00a0must\u00a0be\u00a0specified.if\u00a0(!mkdir($structure,\u00a00,\u00a0true))\u00a0{\u00a0\u00a0\u00a0\u00a0die('Failed\u00a0to\u00a0create\u00a0folders...');}\/\/\u00a0...?>                        Notes   Note: When safe mode is enabled, PHP checks whether the directory in which the script is operating has the same UID (owner) as the script that is being executed.         See Also            is_dir() - Tells whether the filename is a directory         rmdir() - Removes directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.move-uploaded-file.php","title":"move_uploaded_file","description":"move_uploaded_file   (PHP 4 >= 4.0.3, PHP 5)move_uploaded_file \u2014 Moves an uploaded file to a new location          Description       bool move_uploaded_file     ( string $filename    , string $destination    )        This function checks to ensure that the file designated by    filename is a valid upload file (meaning    that it was uploaded via PHP&#039;s HTTP POST upload mechanism). If    the file is valid, it will be moved to the filename given by    destination.          This sort of check is especially important if there is any chance    that anything done with uploaded files could reveal their    contents to the user, or even to other users on the same    system.            Parameters                    filename                      The filename of the uploaded file.                                destination                      The destination of the moved file.                                      Return Values       Returns TRUE on success.          If filename is not a valid upload file,    then no action will occur, and    move_uploaded_file() will return    FALSE.          If filename is a valid upload file, but    cannot be moved for some reason, no action will occur, and    move_uploaded_file() will return    FALSE. Additionally, a warning will be issued.            Examples            Example #1 Uploading multiple files       <?php$uploads_dir\u00a0=\u00a0'\/uploads';foreach\u00a0($_FILES[\"pictures\"][\"error\"]\u00a0as\u00a0$key\u00a0=>\u00a0$error)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($error\u00a0==\u00a0UPLOAD_ERR_OK)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$tmp_name\u00a0=\u00a0$_FILES[\"pictures\"][\"tmp_name\"][$key];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$name\u00a0=\u00a0$_FILES[\"pictures\"][\"name\"][$key];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0move_uploaded_file($tmp_name,\u00a0\"$uploads_dir\/$name\");\u00a0\u00a0\u00a0\u00a0}}?>                        Notes   Note:          move_uploaded_file() is both safe mode     and open_basedir     aware. However, restrictions are placed only on the     destination path as to allow the moving     of uploaded files in which filename may conflict     with such restrictions. move_uploaded_file() ensures     the safety of this operation by allowing only those files uploaded     through PHP to be moved.          Warning         If the destination file already exists, it will be overwritten.                 See Also            is_uploaded_file() - Tells whether the file was uploaded via HTTP POST     rename() - Renames a file or directory     See Handling file uploads for a simple usage example"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pathinfo.php","title":"pathinfo","description":"pathinfo   (PHP 4 >= 4.0.3, PHP 5)pathinfo \u2014 Returns information about a file path          Description       mixed pathinfo     ( string $path    [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME   ] )        pathinfo() returns information about    path: either an associative array or a string,    depending on options.            Parameters                    path                      The path to be parsed.                                options                      If present, specifies a specific element to be returned; one of        PATHINFO_DIRNAME,        PATHINFO_BASENAME,        PATHINFO_EXTENSION or        PATHINFO_FILENAME.              If options is not specified, returns all        available elements.                                     Return Values       If the options parameter is not passed, an    associative array containing the following elements is    returned:    dirname, basename,    extension (if any), and filename.      Note:          If the path does not have an extension, no     extension element will be returned     (see second example below).              If options is present, returns a     string containing the requested element.            Changelog                                 Version        Description                                    5.2.0                 The PATHINFO_FILENAME constant was added.                                            Examples            Example #1 pathinfo() Example       <?php$path_parts\u00a0=\u00a0pathinfo('\/www\/htdocs\/inc\/lib.inc.php');echo\u00a0$path_parts['dirname'],\u00a0\"\\n\";echo\u00a0$path_parts['basename'],\u00a0\"\\n\";echo\u00a0$path_parts['extension'],\u00a0\"\\n\";echo\u00a0$path_parts['filename'],\u00a0\"\\n\";\u00a0\/\/\u00a0since\u00a0PHP\u00a05.2.0?>             The above example will output:       \/www\/htdocs\/inc lib.inc.php php lib.inc                         Example #2 pathinfo() example showing difference between null and no extension       <?php$path_parts\u00a0=\u00a0pathinfo('\/path\/emptyextension.');var_dump($path_parts['extension']);$path_parts\u00a0=\u00a0pathinfo('\/path\/noextension');var_dump($path_parts['extension']);?>             The above example will output something similar to:       string(0) \"\"  Notice: Undefined index: extension in test.php on line 6 NULL                      Notes   Note:          For information on retrieving the current path info, read     the section on      predefined reserved variables.          Note:          pathinfo() is locale aware, so for it to parse a path      containing multibyte characters correctly, the matching locale must be set using      the setlocale() function.                 See Also            dirname() - Returns parent directory's path     basename() - Returns trailing name component of path     parse_url() - Parse a URL and return its components     realpath() - Returns canonicalized absolute pathname"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readlink.php","title":"readlink","description":"readlink   (PHP 4, PHP 5)readlink \u2014 Returns the target of a symbolic link          Description       string readlink     ( string $path    )        readlink() does the same as the readlink C function.            Parameters                    path                      The symbolic link path.                                     Changelog                                 Version        Description                                    5.3.0                 This function is now available on Windows platforms  (Vista, Server          2008 or greater).                                            Return Values       Returns the contents of the symbolic link path or FALSE on error.            Examples            Example #1 readlink() example       <?php\/\/\u00a0output\u00a0e.g.\u00a0\/boot\/vmlinux-2.4.20-xfsecho\u00a0readlink('\/vmlinuz');?>                        See Also            is_link() - Tells whether the filename is a symbolic link     symlink() - Creates a symbolic link     linkinfo() - Gets information about a link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pclose.php","title":"pclose","description":"pclose   (PHP 4, PHP 5)pclose \u2014 Closes process file pointer          Description       int pclose     ( resource $handle    )        Closes a file pointer to a pipe opened by popen().            Parameters                    handle                      The file pointer must be valid, and must have been returned by a        successful call to popen().                                     Return Values       Returns the termination status of the process that was run. In case of     an error then -1 is returned.            Examples            Example #1 pclose() example       <?php$handle\u00a0=\u00a0popen('\/bin\/ls',\u00a0'r');pclose($handle);?>                        Notes   Note:     Unix Only:         proc_close() is internally implemented using the      waitpid(3) system call. To obtain the real exit      status code the pcntl_wexitstatus() function      should be used.                See Also            popen() - Opens process file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-ini-file.php","title":"parse_ini_file","description":"parse_ini_file   (PHP 4, PHP 5)parse_ini_file \u2014 Parse a configuration file          Description       array parse_ini_file     ( string $filename    [, bool $process_sections = false    [, int $scanner_mode = INI_SCANNER_NORMAL   ]] )        parse_ini_file() loads in the    ini file specified in filename,    and returns the settings in it in an associative array.          The structure of the ini file is the same as the php.ini&#039;s.            Parameters                    filename                      The filename of the ini file being parsed.                                process_sections                      By setting the process_sections        parameter to TRUE, you get a multidimensional array, with        the section names and settings included. The default        for process_sections is FALSE                                      scanner_mode                      Can either be INI_SCANNER_NORMAL (default) or         INI_SCANNER_RAW. If INI_SCANNER_RAW         is supplied, then option values will not be parsed.                                      Return Values       The settings are returned as an associative array on success,    and FALSE on failure.              Changelog                                 Version        Description                                    5.3.0                  Added optional scanner_mode parameter.          Single quotes may now be used around variable assignments.          Hash marks (#) may no longer be used as comments          and will throw a deprecation warning if used.                               5.2.7                 On syntax error this function will return FALSE rather than an empty         array.                               5.2.4                 Keys and section names consisting of numbers are now evaluated as PHP         integers thus numbers         starting by 0 are evaluated as octals and numbers starting by 0x are         evaluated as hexadecimals.                               5.0.0                 Values enclosed in double quotes can contain new lines.                               4.2.1                 This function is now affected by safe mode         and open_basedir.                                            Examples            Example #1 Contents of sample.ini       ; This is a sample configuration file ; Comments start with &#039;;&#039;, as in php.ini  [first_section] one = 1 five = 5 animal = BIRD  [second_section] path = \"\/usr\/local\/bin\" URL = \"http:\/\/www.example.com\/~username\"  [third_section] phpversion[] = \"5.0\" phpversion[] = \"5.1\" phpversion[] = \"5.2\" phpversion[] = \"5.3\"                    Example #2 parse_ini_file() example           Constants may also be parsed      in the ini file so if you define a constant as an ini value before      running parse_ini_file(), it will be integrated into      the results.  Only ini values are evaluated.  For example:            <?phpdefine('BIRD',\u00a0'Dodo\u00a0bird');\/\/\u00a0Parse\u00a0without\u00a0sections$ini_array\u00a0=\u00a0parse_ini_file(\"sample.ini\");print_r($ini_array);\/\/\u00a0Parse\u00a0with\u00a0sections$ini_array\u00a0=\u00a0parse_ini_file(\"sample.ini\",\u00a0true);print_r($ini_array);?>             The above example will output something similar to:       Array (     [one] => 1     [five] => 5     [animal] => Dodo bird     [path] => \/usr\/local\/bin     [URL] => http:\/\/www.example.com\/~username     [phpversion] => Array         (             [0] => 5.0             [1] => 5.1             [2] => 5.2             [3] => 5.3         )  ) Array (     [first_section] => Array         (             [one] => 1             [five] => 5             [animal] => Dodo bird         )      [second_section] => Array         (             [path] => \/usr\/local\/bin             [URL] => http:\/\/www.example.com\/~username         )      [third_section] => Array         (             [phpversion] => Array                 (                     [0] => 5.0                     [1] => 5.1                     [2] => 5.2                     [3] => 5.3                 )          )  )                         Example #3 parse_ini_file() parsing a php.ini file       <?php\/\/\u00a0A\u00a0simple\u00a0function\u00a0used\u00a0for\u00a0comparing\u00a0the\u00a0results\u00a0belowfunction\u00a0yesno($expression){\u00a0\u00a0\u00a0\u00a0return($expression\u00a0?\u00a0'Yes'\u00a0:\u00a0'No');}\/\/\u00a0Get\u00a0the\u00a0path\u00a0to\u00a0php.ini\u00a0using\u00a0the\u00a0php_ini_loaded_file()\u00a0\/\/\u00a0function\u00a0available\u00a0as\u00a0of\u00a0PHP\u00a05.2.4$ini_path\u00a0=\u00a0php_ini_loaded_file();\/\/\u00a0Parse\u00a0php.ini$ini\u00a0=\u00a0parse_ini_file($ini_path);\/\/\u00a0Print\u00a0and\u00a0compare\u00a0the\u00a0values,\u00a0note\u00a0that\u00a0using\u00a0get_cfg_var()\/\/\u00a0will\u00a0give\u00a0the\u00a0same\u00a0results\u00a0for\u00a0parsed\u00a0and\u00a0loaded\u00a0hereecho\u00a0'(parsed)\u00a0magic_quotes_gpc\u00a0=\u00a0'\u00a0.\u00a0yesno($ini['magic_quotes_gpc'])\u00a0.\u00a0PHP_EOL;echo\u00a0'(loaded)\u00a0magic_quotes_gpc\u00a0=\u00a0'\u00a0.\u00a0yesno(get_cfg_var('magic_quotes_gpc'))\u00a0.\u00a0PHP_EOL;?>             The above example will output something similar to:       (parsed) magic_quotes_gpc = Yes (loaded) magic_quotes_gpc = Yes                      Notes   Note:          This function has nothing to do with the     php.ini file. It is already processed by     the time you run your script. This function can be used to     read in your own application&#039;s configuration files.          Note:          If a value in the ini file contains any non-alphanumeric     characters it needs to be enclosed in double-quotes (\").          Note:          There are reserved words which must not be used as keys for     ini files.  These include: null, yes, no, true, false, on, off, none.     Values null, no and false results in \"\", yes and true results in \"1\".     Characters ?{}|&~![()^\" must not be used anywhere in     the key and have a special meaning in the value.                 See Also            parse_ini_string() - Parse a configuration string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.realpath_cache_get.php","title":"realpath_cache_get","description":"realpath_cache_get   (PHP 5 >= 5.3.2)realpath_cache_get \u2014 Get realpath cache entries          Description       array realpath_cache_get     ( void    )        Get the contents of the realpath cache.            Return Values       Returns an array of realpath cache entries. The keys are original path    entries, and the values are arrays of data items, containing the resolved    path, expiration date, and other options kept in the cache.             Examples            Example #1 realpath_cache_get() example       <?phpvar_dump(realpath_cache_get());?>             The above example will output something similar to:       array(2) {   [\"\/test\"]=>   array(4) {     [\"key\"]=>     int(123456789)     [\"is_dir\"]=>     bool(true)     [\"realpath\"]=>     string(5) \"\/test\"     [\"expires\"]=>     int(1260318939)   }   [\"\/test\/test.php\"]=>   array(4) {     [\"key\"]=>     int(987654321)     [\"is_dir\"]=>     bool(false)     [\"realpath\"]=>     string(12) \"\/root\/test.php\"     [\"expires\"]=>     int(1260318939)   } }                      See Also            realpath_cache_size() - Get realpath cache size"},{"url":"http:\/\/www.php.net\/manual\/en\/function.popen.php","title":"popen","description":"popen   (PHP 4, PHP 5)popen \u2014 Opens process file pointer          Description       resource popen     ( string $command    , string $mode    )        Opens a pipe to a process executed by forking the command given    by command.            Parameters                    command                      The command                                mode                      The mode                                      Return Values       Returns a file pointer identical to that returned by    fopen(), except that it is unidirectional (may    only be used for reading or writing) and must be closed with    pclose(). This pointer may be used with    fgets(), fgetss(), and    fwrite(). When the mode is &#039;r&#039;, the returned    file pointer equals to the STDOUT of the command, when the mode    is &#039;w&#039;, the returned file pointer equals to the STDIN of the    command.          If an error occurs, returns FALSE.            Examples            Example #1 popen() example       <?php$handle\u00a0=\u00a0popen(\"\/bin\/ls\",\u00a0\"r\");?>                      If the command to be executed could not be found, a valid    resource is returned. This may seem odd, but makes sense; it    allows you to access any error message returned by the shell:         Example #2 popen() example       <?phperror_reporting(E_ALL);\/*\u00a0Add\u00a0redirection\u00a0so\u00a0we\u00a0can\u00a0get\u00a0stderr.\u00a0*\/$handle\u00a0=\u00a0popen('\/path\/to\/executable\u00a02>&1',\u00a0'r');echo\u00a0\"'$handle';\u00a0\"\u00a0.\u00a0gettype($handle)\u00a0.\u00a0\"\\n\";$read\u00a0=\u00a0fread($handle,\u00a02096);echo\u00a0$read;pclose($handle);?>                         Notes   Note:          If you&#039;re looking for bi-directional support (two-way), use     proc_open().          Note: When safe mode is enabled, you can only execute files within the safe_mode_exec_dir. For practical reasons, it is currently not allowed to have .. components in the path to the executable.   WarningWith safe mode enabled, the command string is escaped with escapeshellcmd(). Thus, echo y | echo x becomes echo y \\| echo x.          See Also            pclose() - Closes process file pointer     fopen() - Opens file or URL     proc_open() - Execute a command and open file pointers for input\/output"},{"url":"http:\/\/www.php.net\/manual\/en\/function.realpath_cache_size.php","title":"realpath_cache_size","description":"realpath_cache_size   (PHP 5 >= 5.3.2)realpath_cache_size \u2014 Get realpath cache size          Description       int realpath_cache_size     ( void    )        Get the amount of memory used by the realpath cache.            Return Values       Returns how much memory realpath cache is using.            Examples            Example #1 realpath_cache_size() example       <?phpvar_dump(realpath_cache_size());?>             The above example will output something similar to:       int(412)                      See Also            realpath_cache_get() - Get realpath cache entries"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readfile.php","title":"readfile","description":"readfile   (PHP 4, PHP 5)readfile \u2014 Outputs a file          Description       int readfile     ( string $filename    [, bool $use_include_path = false    [, resource $context   ]] )        Reads a file and writes it to the output buffer.            Parameters                    filename                      The filename being read.                                use_include_path                      You can use the optional second parameter and set it to TRUE, if        you want to search for the file in the include_path, too.                                context                      A context stream resource.                                      Return Values       Returns the number of bytes read from the file. If an error    occurs, FALSE is returned and unless the function was called as    @readfile(), an error message is printed.            Examples            Example #1 Forcing a download using readfile()       <?php$file\u00a0=\u00a0'monkey.gif';if\u00a0(file_exists($file))\u00a0{\u00a0\u00a0\u00a0\u00a0header('Content-Description:\u00a0File\u00a0Transfer');\u00a0\u00a0\u00a0\u00a0header('Content-Type:\u00a0application\/octet-stream');\u00a0\u00a0\u00a0\u00a0header('Content-Disposition:\u00a0attachment;\u00a0filename='.basename($file));\u00a0\u00a0\u00a0\u00a0header('Content-Transfer-Encoding:\u00a0binary');\u00a0\u00a0\u00a0\u00a0header('Expires:\u00a00');\u00a0\u00a0\u00a0\u00a0header('Cache-Control:\u00a0must-revalidate,\u00a0post-check=0,\u00a0pre-check=0');\u00a0\u00a0\u00a0\u00a0header('Pragma:\u00a0public');\u00a0\u00a0\u00a0\u00a0header('Content-Length:\u00a0'\u00a0.\u00a0filesize($file));\u00a0\u00a0\u00a0\u00a0ob_clean();\u00a0\u00a0\u00a0\u00a0flush();\u00a0\u00a0\u00a0\u00a0readfile($file);\u00a0\u00a0\u00a0\u00a0exit;}?>             The above example will output something similar to:                                                   Notes    TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.   Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.          See Also            fpassthru() - Output all remaining data on a file pointer     file() - Reads entire file into an array     fopen() - Opens file or URL     include() - include     require() - require     virtual() - Perform an Apache sub-request     file_get_contents() - Reads entire file into a string     Supported Protocols and Wrappers"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rewind.php","title":"rewind","description":"rewind   (PHP 4, PHP 5)rewind \u2014 Rewind the position of a file pointer          Description       bool rewind     ( resource $handle    )        Sets the file position indicator for handle    to the beginning of the file stream.      Note:          If you have opened the file in append (\"a\" or \"a+\") mode, any data you     write to the file will always be appended, regardless of the file     position.                Parameters                    handle                      The file pointer must be valid, and must point to a file        successfully opened by fopen().                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 rewind() overwriting example       <?php$handle\u00a0=\u00a0fopen('output.txt',\u00a0'r+');fwrite($handle,\u00a0'Really\u00a0long\u00a0sentence.');rewind($handle);fwrite($handle,\u00a0'Foo');rewind($handle);echo\u00a0fread($handle,\u00a0filesize('output.txt'));fclose($handle);?>             The above example will output something similar to:       Foolly long sentence.                      See Also            fread() - Binary-safe file read     fseek() - Seeks on a file pointer     ftell() - Returns the current position of the file read\/write pointer     fwrite() - Binary-safe file write"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-file-buffer.php","title":"set_file_buffer","description":"set_file_buffer   (PHP 4, PHP 5)set_file_buffer \u2014 Alias of stream_set_write_buffer()         Description       This function is an alias of:     stream_set_write_buffer()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.rmdir.php","title":"rmdir","description":"rmdir   (PHP 4, PHP 5)rmdir \u2014 Removes directory          Description       bool rmdir     ( string $dirname    [, resource $context   ] )        Attempts to remove the directory named by dirname.    The directory must be empty, and the relevant permissions must permit this.    A E_WARNING level error will be generated on failure.            Parameters                    dirname                      Path to the directory.                                context              Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.                              Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.0.0                 As of PHP 5.0.0 rmdir() can also be used with         some URL wrappers.  Refer to Supported Protocols and Wrappers for a listing of which wrappers support         rmdir().                                            Examples            Example #1 rmdir() example       <?phpif\u00a0(!is_dir('examples'))\u00a0{\u00a0\u00a0\u00a0\u00a0mkdir('examples');}rmdir('examples');?>                         Notes   Note: When safe mode is enabled, PHP checks whether the directory in which the script is operating has the same UID (owner) as the script that is being executed.         See Also            is_dir() - Tells whether the filename is a directory     mkdir() - Makes directory     unlink() - Deletes a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rename.php","title":"rename","description":"rename   (PHP 4, PHP 5)rename \u2014 Renames a file or directory          Description       bool rename     ( string $oldname    , string $newname    [, resource $context   ] )        Attempts to rename oldname to    newname.            Parameters                    oldname                            Note:                  The old name. The wrapper used in oldname         must match the wrapper used in         newname.                                        newname                      The new name.                                context              Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.                              Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.3.1                 rename() can now rename files across drives in         Windows.                               5.0.0                 rename() can now also be used with         some URL wrappers.  Refer to Supported Protocols and Wrappers for a listing of which wrappers         support rename().                               4.3.3                 rename() may now be able to rename files across         partitions on *nix based systems, provided the appropriate permissions         are held. Warnings may be generated if the destination filesystem         doesn&#039;t permit chown() or         chmod() system calls to be made on files \u2014         for example, if the destination filesystem is a FAT filesystem.                                            Examples            Example #1 Example with rename()       <?phprename(\"\/tmp\/tmp_file.txt\",\u00a0\"\/home\/user\/login\/docs\/my_file.txt\");?>                        See Also            copy() - Copies file     unlink() - Deletes a file     move_uploaded_file() - Moves an uploaded file to a new location"},{"url":"http:\/\/www.php.net\/manual\/en\/function.realpath.php","title":"realpath","description":"realpath   (PHP 4, PHP 5)realpath \u2014 Returns canonicalized absolute pathname          Description       string realpath     ( string $path    )        realpath() expands all symbolic links and    resolves references to &#039;\/.\/&#039;, &#039;\/..\/&#039; and extra &#039;\/&#039; characters in    the input path and return the canonicalized    absolute pathname.              Parameters                    path                      The path being checked.        Note:                    Whilst a path must be supplied, the value can be blank or NULL          In these cases, the value is interpreted as the current directory.                                                       Return Values       Returns the canonicalized absolute pathname on success. The resulting path     will have no symbolic link, &#039;\/.\/&#039; or &#039;\/..\/&#039; components.          realpath() returns FALSE on failure, e.g. if    the file does not exist.      Note:          The running script must have executable permissions on all directories in     the hierarchy, otherwise realpath() will return     FALSE.          Note:      Because PHP&#039;s integer type is signed and many platforms use 32bit integers,     some filesystem functions may return unexpected results for files which     are larger than 2GB.             Changelog                                 Version        Description                                    5.3.0                 Prior to this release, if only the last path         component did not exist, realpath() would not fail on         *BSD systems. realpath() now fails in this case.                               5.0.0                 Prior to this release, a blank or NULL path would         cause realpath() to return the directory name of the script.                                             Examples            Example #1 realpath() example       <?phpchdir('\/var\/www\/');echo\u00a0realpath('.\/..\/..\/etc\/passwd');?>             The above example will output:       \/etc\/passwd                   Example #2 realpath() on Windows           On windows realpath() will change unix style paths to      windows style.            <?phpecho\u00a0realpath('\/windows\/system32');?>             The above example will output:       C:\\WINDOWS\\System32                      See Also            basename() - Returns trailing name component of path     dirname() - Returns parent directory's path     pathinfo() - Returns information about a file path"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stat.php","title":"stat","description":"stat   (PHP 4, PHP 5)stat \u2014 Gives information about a file          Description       array stat     ( string $filename    )        Gathers the statistics of the file named by    filename.  If filename is a    symbolic link, statistics are from the file itself, not the symlink.          lstat() is identical to stat()    except it would instead be based off the symlinks status.            Parameters                    filename                      Path to the file.                                     Return Values            stat() and fstat() result      format                          Numeric        Associative (since PHP 4.0.6)        Description                                    0        dev        device number                       1        ino        inode number *                       2        mode        inode protection mode                       3        nlink        number of links                       4        uid        userid of owner *                       5        gid        groupid of owner *                       6        rdev        device type, if inode device                       7        size        size in bytes                       8        atime        time of last access (Unix timestamp)                       9        mtime        time of last modification (Unix timestamp)                       10        ctime        time of last inode change (Unix timestamp)                       11        blksize        blocksize of filesystem IO **                       12        blocks        number of 512-byte blocks allocated **                            * On Windows this will always be 0.          ** Only valid on systems supporting the st_blksize type - other    systems (e.g. Windows) return -1.          In case of error, stat() returns FALSE.      Note:      Because PHP&#039;s integer type is signed and many platforms use 32bit integers,     some filesystem functions may return unexpected results for files which     are larger than 2GB.             Errors\/Exceptions       Upon failure, an E_WARNING is emitted.            Changelog                                 Version        Description                                    4.0.6                 In addition to returning these attributes in a numeric array, they         can be accessed with associative indices, as noted next to each         parameter                                            Examples            Example #1 stat() example       <?php\/*\u00a0Get\u00a0file\u00a0stat\u00a0*\/$stat\u00a0=\u00a0stat('C:\\php\\php.exe');\/*\u00a0*\u00a0Print\u00a0file\u00a0access\u00a0time,\u00a0this\u00a0is\u00a0the\u00a0same\u00a0\u00a0*\u00a0as\u00a0calling\u00a0fileatime()\u00a0*\/echo\u00a0'Access\u00a0time:\u00a0'\u00a0.\u00a0$stat['atime'];\/*\u00a0*\u00a0Print\u00a0file\u00a0modification\u00a0time,\u00a0this\u00a0is\u00a0the\u00a0\u00a0*\u00a0same\u00a0as\u00a0calling\u00a0filemtime()\u00a0*\/echo\u00a0'Modification\u00a0time:\u00a0'\u00a0.\u00a0$stat['mtime'];\/*\u00a0Print\u00a0the\u00a0device\u00a0number\u00a0*\/echo\u00a0'Device\u00a0number:\u00a0'\u00a0.\u00a0$stat['dev'];?>                           Example #2 Using stat() information together with touch()       <?php\/*\u00a0Get\u00a0file\u00a0stat\u00a0*\/$stat\u00a0=\u00a0stat('C:\\php\\php.exe');\/*\u00a0Did\u00a0we\u00a0failed\u00a0to\u00a0get\u00a0stat\u00a0information?\u00a0*\/if\u00a0(!$stat)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'stat()\u00a0call\u00a0failed...';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\/*\u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0We\u00a0want\u00a0the\u00a0access\u00a0time\u00a0to\u00a0be\u00a01\u00a0week\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0after\u00a0the\u00a0current\u00a0access\u00a0time.\u00a0\u00a0\u00a0\u00a0\u00a0*\/\u00a0\u00a0\u00a0\u00a0$atime\u00a0=\u00a0$stat['atime']\u00a0+\u00a0604800;\u00a0\u00a0\u00a0\u00a0\/*\u00a0Touch\u00a0the\u00a0file\u00a0*\/\u00a0\u00a0\u00a0\u00a0if\u00a0(!touch('some_file.txt',\u00a0time(),\u00a0$atime))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Failed\u00a0to\u00a0touch\u00a0file...';\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'touch()\u00a0returned\u00a0success...';\u00a0\u00a0\u00a0\u00a0}}?>                        Notes   Note: Note that time resolution may differ from one file system to another.   Note: The results of this function are cached. See clearstatcache() for more details.   TipAs of PHP 5.0.0, this function can also be used with some URL wrappers.  Refer to Supported Protocols and Wrappers to determine which wrappers support stat() family of functionality.         See Also            lstat() - Gives information about a file or symbolic link     fstat() - Gets information about a file using an open file pointer     filemtime() - Gets file modification time     filegroup() - Gets file group"},{"url":"http:\/\/www.php.net\/manual\/en\/function.symlink.php","title":"symlink","description":"symlink   (PHP 4, PHP 5)symlink \u2014 Creates a symbolic link          Description       bool symlink     ( string $target    , string $link    )        symlink() creates a symbolic link to the existing    target with the specified name    link.            Parameters                    target                      Target of the link.                                link                      The link name.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.3.0                 This function is now available on Windows platforms  (Vista, Server          2008 or greater).                                            Examples            Example #1 Create a symbolic link       <?php$target\u00a0=\u00a0'uploads.php';$link\u00a0=\u00a0'uploads';symlink($target,\u00a0$link);echo\u00a0readlink($link);?>                        Notes   Note:          For Windows only: This function will only function if the      system you run PHP from is Windows Vista\/Windows Server 2008      or greater. Windows versions prior to that does not support      symbolic links.                See Also            link() - Create a hard link     readlink() - Returns the target of a symbolic link     linkinfo() - Gets information about a link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tmpfile.php","title":"tmpfile","description":"tmpfile   (PHP 4, PHP 5)tmpfile \u2014 Creates a temporary file          Description       resource tmpfile     ( void    )        Creates a temporary file with a unique name in read-write (w+) mode and    returns a file handle .          The file is automatically removed when closed (using    fclose()), or when the script ends.          For details, consult your system documentation on the    tmpfile(3) function, as well as the    stdio.h header file.            Return Values       Returns a file handle, similar to the one returned by    fopen(), for the new file or FALSE on failure.            Examples            Example #1 tmpfile() example       <?php$temp\u00a0=\u00a0tmpfile();fwrite($temp,\u00a0\"writing\u00a0to\u00a0tempfile\");fseek($temp,\u00a00);echo\u00a0fread($temp,\u00a01024);fclose($temp);\u00a0\/\/\u00a0this\u00a0removes\u00a0the\u00a0file?>             The above example will output:       writing to tempfile                      See Also            tempnam() - Create file with unique file name     sys_get_temp_dir() - Returns directory path used for temporary files"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tempnam.php","title":"tempnam","description":"tempnam   (PHP 4, PHP 5)tempnam \u2014 Create file with unique file name          Description       string tempnam     ( string $dir    , string $prefix    )        Creates a file with a unique filename, with access permission set to 0600, in the specified directory.    If the directory does not exist, tempnam() may    generate a file in the system&#039;s temporary directory, and return    the name of that.            Parameters                    dir                      The directory where the temporary filename will be created.                                prefix                      The prefix of the generated temporary filename.              Note:                  Windows uses only the first three characters of prefix.                                              Return Values       Returns the new temporary filename, or FALSE on    failure.            Changelog                                 Version        Description                                    4.0.6                 Prior to PHP 4.0.6, the behaviour of the         tempnam() function was system dependent. On         Windows the TMP environment variable will override the         dir parameter, on Linux the TMPDIR         environment variable has precedence, while SVR4 will always use         your dir parameter if the directory it         points to exists. Consult your system documentation on the         tempnam(3) function if in doubt.                               4.0.3                 This function&#039;s behavior changed in 4.0.3. The temporary file is also         created to avoid a race condition where the file might appear in the         filesystem between the time the string was generated and before         the script gets around to creating the file. Note, that you need         to remove the file in case you need it no more, it is not done         automatically.                                            Examples            Example #1 tempnam() example       <?php$tmpfname\u00a0=\u00a0tempnam(\"\/tmp\",\u00a0\"FOO\");$handle\u00a0=\u00a0fopen($tmpfname,\u00a0\"w\");fwrite($handle,\u00a0\"writing\u00a0to\u00a0tempfile\");fclose($handle);\/\/\u00a0do\u00a0here\u00a0somethingunlink($tmpfname);?>                        Notes   Note:          If PHP cannot create a file in the specified dir     parameter, it falls back on the system default. On NTFS this also happens     if the specified dir contains more than 65534 files.                 See Also            tmpfile() - Creates a temporary file     sys_get_temp_dir() - Returns directory path used for temporary files     unlink() - Deletes a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.touch.php","title":"touch","description":"touch   (PHP 4, PHP 5)touch \u2014 Sets access and modification time of file          Description       bool touch     ( string $filename    [, int $time = time()    [, int $atime   ]] )        Attempts to set the access and modification times of the file named in the    filename parameter to the value given in    time.     Note that the access time is always modified, regardless of the number    of parameters.          If the file does not exist, it will be created.             Parameters                    filename                      The name of the file being touched.                                time                      The touch time. If time is not supplied,         the current system time is used.                                atime                      If present, the access time of the given filename is set to         the value of atime. Otherwise, it is set to        the value passed to the time parameter.        If neither are present, the current system time is used.                                      Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.3.0                 It became possible to change the modification time of a directory          under Windows.                                            Examples            Example #1 touch() example       <?phpif\u00a0(touch($filename))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$filename\u00a0.\u00a0'\u00a0modification\u00a0time\u00a0has\u00a0been\u00a0changed\u00a0to\u00a0present\u00a0time';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Sorry,\u00a0could\u00a0not\u00a0change\u00a0modification\u00a0time\u00a0of\u00a0'\u00a0.\u00a0$filename;}?>                           Example #2 touch() using the time parameter       <?php\/\/\u00a0This\u00a0is\u00a0the\u00a0touch\u00a0time,\u00a0we'll\u00a0set\u00a0it\u00a0to\u00a0one\u00a0hour\u00a0in\u00a0the\u00a0past.$time\u00a0=\u00a0time()\u00a0-\u00a03600;\/\/\u00a0Touch\u00a0the\u00a0fileif\u00a0(!touch('some_file.txt',\u00a0$time))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Whoops,\u00a0something\u00a0went\u00a0wrong...';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Touched\u00a0file\u00a0with\u00a0success';}?>                        Notes   Note: Note that time resolution may differ from one file system to another.   Warning         Prior to PHP 5.3.0 it was not possible to change the modification time      of a directory with this function under Windows."},{"url":"http:\/\/www.php.net\/manual\/en\/function.umask.php","title":"umask","description":"umask   (PHP 4, PHP 5)umask \u2014 Changes the current umask          Description       int umask     ([ int $mask   ] )        umask() sets PHP&#039;s umask to    mask & 0777 and returns the old    umask. When PHP is being used as a server module, the umask    is restored when each request is finished.            Parameters                    mask                      The new umask.                                      Return Values       umask() without arguments simply returns the    current umask otherwise the old umask is returned.            Examples            Example #1 umask() example       <?php$old\u00a0=\u00a0umask(0);chmod(\"\/path\/some_dir\/some_file.txt\",\u00a00755);umask($old);\/\/\u00a0Checkingif\u00a0($old\u00a0!=\u00a0umask())\u00a0{\u00a0\u00a0\u00a0\u00a0die('An\u00a0error\u00a0occured\u00a0while\u00a0changing\u00a0back\u00a0the\u00a0umask');}?>                        Notes   Note:          Avoid using this function in multithreaded webservers. It is better to     change the file permissions with chmod() after     creating the file. Using umask() can lead to     unexpected behavior of concurrently running scripts and the webserver     itself because they all use the same umask."},{"url":"http:\/\/www.php.net\/manual\/en\/function.unlink.php","title":"unlink","description":"unlink   (PHP 4, PHP 5)unlink \u2014 Deletes a file          Description       bool unlink     ( string $filename    [, resource $context   ] )        Deletes filename.  Similar to the Unix C unlink()    function. A E_WARNING level error will be generated on    failure.            Parameters                    filename                      Path to the file.                                context              Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Stream Functions.                              Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.0.0                 As of PHP 5.0.0 unlink() can also be used with         some URL wrappers. Refer to Supported Protocols and Wrappers for a listing of which wrappers support         unlink().                                            Examples            Example #1 Basic unlink() usage       <?php$fh\u00a0=\u00a0fopen('test.html',\u00a0'a');fwrite($fh,\u00a0'<h1>Hello\u00a0world!<\/h1>');fclose($fh);unlink('test.html');?>                        See Also            rmdir() - Removes directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dom-import-simplexml.php","title":"dom_import_simplexml","description":"dom_import_simplexml   (PHP 5)dom_import_simplexml \u2014     Gets a DOMElement object from a    SimpleXMLElement object           Description       DOMElement dom_import_simplexml     ( SimpleXMLElement $node    )        This function takes the node node of class    SimpleXML and makes it into a    DOMElement node. This new object can then be used    as a native DOMElement node.            Parameters                    node                      The SimpleXMLElement node.                                    Return Values       The DOMElement node added or FALSE if any errors occur.           Examples       Example #1 Import SimpleXML into DOM with dom_import_simplexml()      <?php$sxe\u00a0=\u00a0simplexml_load_string('<books><book><title>blah<\/title><\/book><\/books>');if\u00a0($sxe\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0while\u00a0parsing\u00a0the\u00a0document';\u00a0\u00a0\u00a0\u00a0exit;}$dom_sxe\u00a0=\u00a0dom_import_simplexml($sxe);if\u00a0(!$dom_sxe)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0while\u00a0converting\u00a0XML';\u00a0\u00a0\u00a0\u00a0exit;}$dom\u00a0=\u00a0new\u00a0DOMDocument('1.0');$dom_sxe\u00a0=\u00a0$dom->importNode($dom_sxe,\u00a0true);$dom_sxe\u00a0=\u00a0$dom->appendChild($dom_sxe);echo\u00a0$dom->saveXML();?>                  See Also            simplexml_import_dom() - Get a SimpleXMLElement object from a DOM node."},{"url":"http:\/\/www.php.net\/manual\/en\/function.forward-static-call-array.php","title":"forward_static_call_array","description":"forward_static_call_array   (PHP 5 >= 5.3.0)forward_static_call_array \u2014 Call a static method and pass the arguments as array         Description       mixed forward_static_call_array     ( callback $function    , array $parameters    )        Calls a user defined function or method given by the function    parameter. This function must be called within a method context, it can&#039;t be     used outside a class.    It uses the late static    binding.    All arguments of the forwarded method are passed as values,    and as an array, similarly to call_user_func_array().            Parameters                    function                      The function or method to be called. This parameter may be an array,        with the name of the class, and the method, or a string, with a function        name.                                parameter                      One parameter, gathering all the method parameter in one array.              Note:                  Note that the parameters for forward_static_call_array() are         not passed by reference.                                             Return Values       Returns the function result, or FALSE on error.            Examples            Example #1 forward_static_call_array() example       <?phpclass\u00a0A{\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'A';\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0static::NAME,\u00a0\"\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\u00a0\u00a0\u00a0\u00a0}}class\u00a0B\u00a0extends\u00a0A{\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'B';\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0self::NAME,\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call_array(array('A',\u00a0'test'),\u00a0array('more',\u00a0'args'));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call_array(\u00a0'test',\u00a0array('other',\u00a0'args'));\u00a0\u00a0\u00a0\u00a0}}B::test('foo');function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"C\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\u00a0\u00a0\u00a0\u00a0}?>             The above example will output:       B B more,args  C other,args                       See Also            forward_static_call() - Call a static method     call_user_func() - Call a user function given by the first parameter     call_user_func_array() - Call a user function given with an array of parameters     is_callable() - Verify that the contents of a variable can be called as a function     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.forward-static-call.php","title":"forward_static_call","description":"forward_static_call   (PHP 5 >= 5.3.0)forward_static_call \u2014 Call a static method         Description       mixed forward_static_call     ( callback $function    [, mixed $parameter    [, mixed $...   ]] )        Calls a user defined function or method given by the function    parameter, with the following arguments. This function must be called within a method    context, it can&#039;t be used outside a class.    It uses the late static    binding.            Parameters                    function                      The function or method to be called. This parameter may be an array,        with the name of the class, and the method, or a string, with a function        name.                                parameter                      Zero or more parameters to be passed to the function.                                     Return Values       Returns the function result, or FALSE on error.            Examples            Example #1 forward_static_call() example       <?phpclass\u00a0A{\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'A';\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0static::NAME,\u00a0\"\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\u00a0\u00a0\u00a0\u00a0}}class\u00a0B\u00a0extends\u00a0A{\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'B';\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0self::NAME,\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call(array('A',\u00a0'test'),\u00a0'more',\u00a0'args');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call(\u00a0'test',\u00a0'other',\u00a0'args');\u00a0\u00a0\u00a0\u00a0}}B::test('foo');function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"C\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\u00a0\u00a0\u00a0\u00a0}?>             The above example will output:       B B more,args  C other,args                      See Also            forward_static_call_array() - Call a static method and pass the arguments as array     call_user_func_array() - Call a user function given with an array of parameters     call_user_func() - Call a user function given by the first parameter     is_callable() - Verify that the contents of a variable can be called as a function     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.call-user-func-array.php","title":"call_user_func_array","description":"call_user_func_array   (PHP 4 >= 4.0.4, PHP 5)call_user_func_array \u2014 Call a user function given with an array of parameters          Description       mixed call_user_func_array     ( callback $function    , array $param_arr    )        Call a user defined function with the parameters in    param_arr.            Parameters                    function                      The function to be called.                                param_arr                      The parameters to be passed to the function, as an indexed array.                                     Return Values       Returns the function result, or FALSE on error.            Changelog                                 Version        Description                                    5.3.0                 The interpretation of object oriented keywords like parent          and self has changed. Previously, calling them using the          double colon syntax would emit an E_STRICT warning because          they were interpreted as static.                                            Examples            Example #1 call_user_func_array() example       <?phpfunction\u00a0foobar($arg,\u00a0$arg2)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0__FUNCTION__,\u00a0\"\u00a0got\u00a0$arg\u00a0and\u00a0$arg2\\n\";}class\u00a0foo\u00a0{\u00a0\u00a0\u00a0\u00a0function\u00a0bar($arg,\u00a0$arg2)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0__METHOD__,\u00a0\"\u00a0got\u00a0$arg\u00a0and\u00a0$arg2\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Call\u00a0the\u00a0foobar()\u00a0function\u00a0with\u00a02\u00a0argumentscall_user_func_array(\"foobar\",\u00a0array(\"one\",\u00a0\"two\"));\/\/\u00a0Call\u00a0the\u00a0$foo->bar()\u00a0method\u00a0with\u00a02\u00a0arguments$foo\u00a0=\u00a0new\u00a0foo;call_user_func_array(array($foo,\u00a0\"bar\"),\u00a0array(\"three\",\u00a0\"four\"));?>             The above example will output something similar to:       foobar got one and two foo::bar got three and four                   Example #2 call_user_func_array() using namespace name       <?phpnamespace\u00a0Foobar;class\u00a0Foo\u00a0{\u00a0\u00a0\u00a0\u00a0static\u00a0public\u00a0function\u00a0test($name)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print\u00a0\"Hello\u00a0{$name}!\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0call_user_func_array(__NAMESPACE__\u00a0.'\\Foo::test',\u00a0array('Hannes'));\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0call_user_func_array(array(__NAMESPACE__\u00a0.'\\Foo',\u00a0'test'),\u00a0array('Philip'));?>             The above example will output something similar to:       Hello Hannes! Hello Philip!                   Example #3 Using lambda function       <?php$func\u00a0=\u00a0function($arg1,\u00a0$arg2)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0$arg1\u00a0*\u00a0$arg2;};var_dump(call_user_func_array($func,\u00a0array(2,\u00a04)));\u00a0\/*\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\u00a0*\/?>             The above example will output:       int(8)                      Notes   Note:          Referenced variables in param_arr are passed to the     function by reference, regardless of whether the function expects the     respective parameter to be passed by reference. This form of call-time     pass by reference does not emit a deprecation notice, but it is nonetheless     deprecated, and will most likely be removed in the next version of PHP.     Furthermore, this does not apply to internal functions, for which     the function signature is honored. Passing by value when the function expects     a parameter by reference results in a warning and having     call_user_func() return FALSE (does not apply if the      passed value has a reference count = 1).          Note: Callbacks registered with functions such as call_user_func() and call_user_func_array() will not be called if there is an uncaught exception thrown in a previous callback.         See Also            call_user_func() - Call a user function given by the first parameter     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.call-user-func.php","title":"call_user_func","description":"call_user_func   (PHP 4, PHP 5)call_user_func \u2014 Call a user function given by the first parameter         Description       mixed call_user_func     ( callback $function    [, mixed $parameter    [, mixed $...   ]] )        Call a user defined function given by the function    parameter.            Parameters                    function                      The function to be called. Class methods may also be invoked        statically using this function by passing        array($classname, $methodname) to this parameter.        Additionally class methods of an object instance may be called by passing        array($objectinstance, $methodname) to this parameter.                                parameter                      Zero or more parameters to be passed to the function.              Note:                  Note that the parameters for call_user_func() are         not passed by reference.                   Example #1 call_user_func() example and references            <?phperror_reporting(E_ALL);function\u00a0increment(&$var){\u00a0\u00a0\u00a0\u00a0$var++;}$a\u00a0=\u00a00;call_user_func('increment',\u00a0$a);echo\u00a0$a.\"\\n\";call_user_func_array('increment',\u00a0array(&$a));\u00a0\/\/\u00a0You\u00a0can\u00a0use\u00a0this\u00a0instead\u00a0before\u00a0PHP\u00a05.3echo\u00a0$a.\"\\n\";?>                       The above example will output:            0 1                                                                 Return Values       Returns the function result, or FALSE on error.            Changelog                                 Version        Description                                    5.3.0                 The interpretation of object oriented keywords like parent          and self has changed. Previously, calling them using the          double colon syntax would emit an E_STRICT warning because          they were interpreted as static.                                            Examples            Example #2 call_user_func() example       <?phpfunction\u00a0barber($type){\u00a0\u00a0\u00a0\u00a0echo\u00a0\"You\u00a0wanted\u00a0a\u00a0$type\u00a0haircut,\u00a0no\u00a0problem\\n\";}call_user_func('barber',\u00a0\"mushroom\");call_user_func('barber',\u00a0\"shave\");?>             The above example will output:       You wanted a mushroom haircut, no problem You wanted a shave haircut, no problem                   Example #3 call_user_func() using namespace name       <?phpnamespace\u00a0Foobar;class\u00a0Foo\u00a0{\u00a0\u00a0\u00a0\u00a0static\u00a0public\u00a0function\u00a0test()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print\u00a0\"Hello\u00a0world!\\n\";\u00a0\u00a0\u00a0\u00a0}}call_user_func(__NAMESPACE__\u00a0.'\\Foo::test');\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0call_user_func(array(__NAMESPACE__\u00a0.'\\Foo',\u00a0'test'));\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0?>             The above example will output:       Hello world! Hello world!                   Example #4 Using a class method with call_user_func()       <?phpclass\u00a0myclass\u00a0{\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0say_hello()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Hello!\\n\";\u00a0\u00a0\u00a0\u00a0}}$classname\u00a0=\u00a0\"myclass\";call_user_func(array($classname,\u00a0'say_hello'));call_user_func($classname\u00a0.'::say_hello');\u00a0\/\/\u00a0As\u00a0of\u00a05.2.3$myobject\u00a0=\u00a0new\u00a0myclass();call_user_func(array($myobject,\u00a0'say_hello'));?>             The above example will output:       Hello! Hello! Hello!                      Example #5 Using lambda function with call_user_func()       <?phpcall_user_func(function($arg)\u00a0{\u00a0print\u00a0\"[$arg]\\n\";\u00a0},\u00a0'test');\u00a0\/*\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\u00a0*\/?>             The above example will output:       [test]                         Notes   Note: Callbacks registered with functions such as call_user_func() and call_user_func_array() will not be called if there is an uncaught exception thrown in a previous callback.         See Also            call_user_func_array() - Call a user function given with an array of parameters     is_callable() - Verify that the contents of a variable can be called as a function     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.create-function.php","title":"create_function","description":"create_function   (PHP 4 >= 4.0.1, PHP 5)create_function \u2014 Create an anonymous (lambda-style) function         Description       string create_function     ( string $args    , string $code    )        Creates an anonymous function from the parameters passed, and    returns a unique name for it.           Parameters       Usually these parameters will be passed as single quote delimited strings.    The reason for using single quoted strings, is to protect the variable    names from parsing, otherwise, if you use double quotes there will be a    need to escape the variable names, e.g. \\$avar.                 args                      The function arguments.                                code                      The function code.                                     Return Values       Returns a unique function name as a string, or FALSE on error.            Examples            Example #1       Creating an anonymous function with create_function()                You can use this function, to (for example) create a function from      information gathered at run time:            <?php$newfunc\u00a0=\u00a0create_function('$a,$b',\u00a0'return\u00a0\"ln($a)\u00a0+\u00a0ln($b)\u00a0=\u00a0\"\u00a0.\u00a0log($a\u00a0*\u00a0$b);');echo\u00a0\"New\u00a0anonymous\u00a0function:\u00a0$newfunc\\n\";echo\u00a0$newfunc(2,\u00a0M_E)\u00a0.\u00a0\"\\n\";\/\/\u00a0outputs\/\/\u00a0New\u00a0anonymous\u00a0function:\u00a0lambda_1\/\/\u00a0ln(2)\u00a0+\u00a0ln(2.718281828459)\u00a0=\u00a01.6931471805599?>                      Or, perhaps to have general handler function that can apply a set    of operations to a list of parameters:               Example #2       Making a general processing function with      create_function()            <?phpfunction\u00a0process($var1,\u00a0$var2,\u00a0$farr){\u00a0\u00a0\u00a0\u00a0foreach\u00a0($farr\u00a0as\u00a0$f)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$f($var1,\u00a0$var2)\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0create\u00a0a\u00a0bunch\u00a0of\u00a0math\u00a0functions$f1\u00a0=\u00a0'if\u00a0($a\u00a0>=0)\u00a0{return\u00a0\"b*a^2\u00a0=\u00a0\".$b*sqrt($a);}\u00a0else\u00a0{return\u00a0false;}';$f2\u00a0=\u00a0\"return\u00a0\\\"min(b^2+a,\u00a0a^2,b)\u00a0=\u00a0\\\".min(\\$a*\\$a+\\$b,\\$b*\\$b+\\$a);\";$f3\u00a0=\u00a0'if\u00a0($a\u00a0>\u00a00\u00a0&&\u00a0$b\u00a0!=\u00a00)\u00a0{return\u00a0\"ln(a)\/b\u00a0=\u00a0\".log($a)\/$b;\u00a0}\u00a0else\u00a0{\u00a0return\u00a0false;\u00a0}';$farr\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0create_function('$x,$y',\u00a0'return\u00a0\"some\u00a0trig:\u00a0\".(sin($x)\u00a0+\u00a0$x*cos($y));'),\u00a0\u00a0\u00a0\u00a0create_function('$x,$y',\u00a0'return\u00a0\"a\u00a0hypotenuse:\u00a0\".sqrt($x*$x\u00a0+\u00a0$y*$y);'),\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0$f1),\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0$f2),\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0$f3)\u00a0\u00a0\u00a0\u00a0);echo\u00a0\"\\nUsing\u00a0the\u00a0first\u00a0array\u00a0of\u00a0anonymous\u00a0functions\\n\";echo\u00a0\"parameters:\u00a02.3445,\u00a0M_PI\\n\";process(2.3445,\u00a0M_PI,\u00a0$farr);\/\/\u00a0now\u00a0make\u00a0a\u00a0bunch\u00a0of\u00a0string\u00a0processing\u00a0functions$garr\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0create_function('$b,$a',\u00a0'if\u00a0(strncmp($a,\u00a0$b,\u00a03)\u00a0==\u00a00)\u00a0return\u00a0\"**\u00a0\\\"$a\\\"\u00a0'.\u00a0\u00a0\u00a0\u00a0'and\u00a0\\\"$b\\\"\\n**\u00a0Look\u00a0the\u00a0same\u00a0to\u00a0me!\u00a0(looking\u00a0at\u00a0the\u00a0first\u00a03\u00a0chars)\";'),\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0';\u00a0return\u00a0\"CRCs:\u00a0\"\u00a0.\u00a0crc32($a)\u00a0.\u00a0\",\u00a0\".crc32($b);'),\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0';\u00a0return\u00a0\"similar(a,b)\u00a0=\u00a0\"\u00a0.\u00a0similar_text($a,\u00a0$b,\u00a0&$p)\u00a0.\u00a0\"($p%)\";')\u00a0\u00a0\u00a0\u00a0);echo\u00a0\"\\nUsing\u00a0the\u00a0second\u00a0array\u00a0of\u00a0anonymous\u00a0functions\\n\";process(\"Twas\u00a0brilling\u00a0and\u00a0the\u00a0slithy\u00a0toves\",\u00a0\"Twas\u00a0the\u00a0night\",\u00a0$garr);?>             The above example will output:       Using the first array of anonymous functions parameters: 2.3445, M_PI some trig: -1.6291725057799 a hypotenuse: 3.9199852871011 b*a^2 = 4.8103313314525 min(b^2+a, a^2,b) = 8.6382729035898 ln(a)\/b = 0.27122299212594  Using the second array of anonymous functions ** \"Twas the night\" and \"Twas brilling and the slithy toves\" ** Look the same to me! (looking at the first 3 chars) CRCs: -725381282, 342550513 similar(a,b) = 11(45.833333333333%)                    But perhaps the most common use for of lambda-style (anonymous) functions    is to create callback functions, for example when using    array_walk() or usort()               Example #3 Using anonymous functions as callback functions       <?php$av\u00a0=\u00a0array(\"the\u00a0\",\u00a0\"a\u00a0\",\u00a0\"that\u00a0\",\u00a0\"this\u00a0\");array_walk($av,\u00a0create_function('&$v,$k',\u00a0'$v\u00a0=\u00a0$v\u00a0.\u00a0\"mango\";'));print_r($av);?>             The above example will output:       Array (   [0] => the mango   [1] => a mango   [2] => that mango   [3] => this mango )                 an array of strings ordered from shorter to longer            <?php$sv\u00a0=\u00a0array(\"small\",\u00a0\"larger\",\u00a0\"a\u00a0big\u00a0string\",\u00a0\"it\u00a0is\u00a0a\u00a0string\u00a0thing\");print_r($sv);?>             The above example will output:       Array (   [0] => small   [1] => larger   [2] => a big string   [3] => it is a string thing )                 sort it from longer to shorter            <?phpusort($sv,\u00a0create_function('$a,$b','return\u00a0strlen($b)\u00a0-\u00a0strlen($a);'));print_r($sv);?>             The above example will output:       Array (   [0] => it is a string thing   [1] => a big string   [2] => larger   [3] => small )                      See Also            Anonymous functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.func-get-arg.php","title":"func_get_arg","description":"func_get_arg   (PHP 4, PHP 5)func_get_arg \u2014 Return an item from the argument list          Description       mixed func_get_arg     ( int $arg_num    )        Gets the specified argument from a user-defined function&#039;s argument list.          This function may be used in conjunction with     func_get_args() and func_num_args()    to allow user-defined functions to accept variable-length argument lists.            Parameters                    arg_num                      The argument offset. Function arguments are counted starting from        zero.                                     Return Values       Returns the specified argument, or FALSE on error.            Changelog                                 Version        Description                                    5.3.0                 This function can now be used in parameter lists.                               5.3.0                 If this function is called from the outermost scope of a file         which has been included by calling include()         or require() from within a function in the         calling file, it now generates a warning and returns FALSE.                                            Errors\/Exceptions       Generates a warning if called from outside of a user-defined function, or    if arg_num is greater than the number of arguments    actually passed.            Examples            Example #1 func_get_arg() example       <?phpfunction\u00a0foo(){\u00a0\u00a0\u00a0\u00a0\u00a0$numargs\u00a0=\u00a0func_num_args();\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Number\u00a0of\u00a0arguments:\u00a0$numargs<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($numargs\u00a0>=\u00a02)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Second\u00a0argument\u00a0is:\u00a0\"\u00a0.\u00a0func_get_arg(1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0}}foo\u00a0(1,\u00a02,\u00a03);?>                           Example #2 func_get_arg() example before and     after PHP 5.3       test.php<?phpfunction\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0include\u00a0'.\/fga.inc';}foo('First\u00a0arg',\u00a0'Second\u00a0arg');?>fga.php<?php$arg\u00a0=\u00a0func_get_arg(1);var_export($arg);?>                   Output previous to PHP 5.3:            &#039;Second arg&#039;                 Output in PHP 5.3 and later:            Warning: func_get_arg():  Called from the global scope - no function context in \/home\/torben\/Desktop\/code\/ml\/fga.inc on line 3 false                          Example #3 func_get_arg() example of byref and byval arguments       <?phpfunction\u00a0byVal($arg)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;}function\u00a0byRef(&$arg)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;}$arg\u00a0=\u00a0'bar';byVal($arg);byRef($arg);?>              The above example will output:      As passed     : &#039;bar&#039; After change  : &#039;bar&#039; As passed     : &#039;bar&#039; After change  : &#039;baz&#039;                      Notes   Note: Because this function depends on the current scope to determine parameter details, it cannot be used as a function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned to a variable, and that variable should be passed.   Note: If the arguments are passed by reference, any changes to the arguments will be reflected in the values returned by this function.   Note:          This function returns a copy of the passed arguments only, and does not     account for default (non-passed) arguments.                See Also            func_get_args() - Returns an array comprising a function's argument list     func_num_args() - Returns the number of arguments passed to the function"},{"url":"http:\/\/www.php.net\/manual\/en\/function.func-num-args.php","title":"func_num_args","description":"func_num_args   (PHP 4, PHP 5)func_num_args \u2014 Returns the number of arguments passed to the function          Description       int func_num_args     ( void    )        Gets the number of arguments passed to the function.          This function may be used in conjunction with     func_get_arg() and func_get_args()    to allow user-defined functions to accept variable-length argument lists.            Return Values       Returns the number of arguments passed into the current user-defined    function.            Changelog                                 Version        Description                                    5.3.0                 This function can now be used in parameter lists.                               5.3.0                 If this function is called from the outermost scope of a file         which has been included by calling include()         or require() from within a function in the         calling file, it now generates a warning and returns -1.                                            Errors\/Exceptions       Generates a warning if called from outside of a user-defined function.            Examples            Example #1 func_num_args() example       <?phpfunction\u00a0foo(){\u00a0\u00a0\u00a0\u00a0$numargs\u00a0=\u00a0func_num_args();\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Number\u00a0of\u00a0arguments:\u00a0$numargs\\n\";}foo(1,\u00a02,\u00a03);\u00a0\u00a0\u00a0?>             The above example will output:       Number of arguments: 3                         Example #2 func_num_args() example before and     after PHP 5.3       test.php<?phpfunction\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0include\u00a0'.\/fna.php';}foo('First\u00a0arg',\u00a0'Second\u00a0arg');?>fna.php<?php$num_args\u00a0=\u00a0func_num_args();var_export($num_args);?>                   Output previous to PHP 5.3:            2                 Output in PHP 5.3 and later will be something similar to:            Warning: func_num_args():  Called from the global scope - no function context in \/home\/torben\/Desktop\/code\/ml\/fna.php on line 3 -1                      Notes   Note: Because this function depends on the current scope to determine parameter details, it cannot be used as a function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned to a variable, and that variable should be passed.         See Also            func_get_arg() - Return an item from the argument list     func_get_args() - Returns an array comprising a function's argument list"},{"url":"http:\/\/www.php.net\/manual\/en\/function.func-get-args.php","title":"func_get_args","description":"func_get_args   (PHP 4, PHP 5)func_get_args \u2014 Returns an array comprising a function&#039;s argument list          Description       array func_get_args     ( void    )        Gets an array of the function&#039;s argument list.          This function may be used in conjunction with     func_get_arg() and func_num_args()    to allow user-defined functions to accept variable-length argument lists.            Return Values       Returns an array in which each element is a copy of the corresponding    member of the current user-defined function&#039;s argument list.             Changelog                                 Version        Description                                    5.3.0                 This function can now be used in parameter lists.                               5.3.0                 If this function is called from the outermost scope of a file         which has been included by calling include()         or require() from within a function in the         calling file, it now generates a warning and returns FALSE.                                            Errors\/Exceptions       Generates a warning if called from outside of a user-defined function.            Examples            Example #1 func_get_args() example       <?phpfunction\u00a0foo(){\u00a0\u00a0\u00a0\u00a0$numargs\u00a0=\u00a0func_num_args();\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Number\u00a0of\u00a0arguments:\u00a0$numargs<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0if\u00a0($numargs\u00a0>=\u00a02)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Second\u00a0argument\u00a0is:\u00a0\"\u00a0.\u00a0func_get_arg(1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$arg_list\u00a0=\u00a0func_get_args();\u00a0\u00a0\u00a0\u00a0for\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0$numargs;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Argument\u00a0$i\u00a0is:\u00a0\"\u00a0.\u00a0$arg_list[$i]\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}}foo(1,\u00a02,\u00a03);?>             The above example will output:       Number of arguments: 3<br \/> Second argument is: 2<br \/> Argument 0 is: 1<br \/> Argument 1 is: 2<br \/> Argument 2 is: 3<br \/>                         Example #2 func_get_args() example before and     after PHP 5.3       test.php<?phpfunction\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0include\u00a0'.\/fga.inc';}foo('First\u00a0arg',\u00a0'Second\u00a0arg');?>fga.inc<?php$args\u00a0=\u00a0func_get_args();var_export($args);?>                   Output previous to PHP 5.3:            array (   0 => &#039;First arg&#039;,   1 => &#039;Second arg&#039;, )                 Output in PHP 5.3 and later:            Warning: func_get_args():  Called from the global scope - no function context in \/home\/torben\/Desktop\/code\/ml\/fga.inc on line 3 false                         Example #3 func_get_args() example of byref and byval arguments       <?phpfunction\u00a0byVal($arg)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;}function\u00a0byRef(&$arg)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;}$arg\u00a0=\u00a0'bar';byVal($arg);byRef($arg);?>              The above example will output:      As passed     : array (   0 => &#039;bar&#039;, ) After change  : array (   0 => &#039;bar&#039;, ) As passed     : array (   0 => &#039;bar&#039;, ) After change  : array (   0 => &#039;baz&#039;, )                      Notes   Note: Because this function depends on the current scope to determine parameter details, it cannot be used as a function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned to a variable, and that variable should be passed.   Note: If the arguments are passed by reference, any changes to the arguments will be reflected in the values returned by this function.   Note:          This function returns a copy of the passed arguments only, and does not     account for default (non-passed) arguments.                See Also            func_get_arg() - Return an item from the argument list     func_num_args() - Returns the number of arguments passed to the function"},{"url":"http:\/\/www.php.net\/manual\/en\/function.function-exists.php","title":"function_exists","description":"function_exists   (PHP 4, PHP 5)function_exists \u2014 Return TRUE if the given function has been defined          Description       bool function_exists     ( string $function_name    )        Checks the list of defined functions, both built-in (internal) and    user-defined, for function_name.             Parameters                    function_name                      The function name, as a string.                                     Return Values       Returns TRUE if function_name exists and is a    function, FALSE otherwise.      Note:          This function will return FALSE for constructs, such as      include_once() and echo().                Examples            Example #1 function_exists() example       <?phpif\u00a0(function_exists('imap_open'))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"IMAP\u00a0functions\u00a0are\u00a0available.<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"IMAP\u00a0functions\u00a0are\u00a0not\u00a0available.<br\u00a0\/>\\n\";}?>                        Notes   Note:          A function name may exist even if the function itself is unusable due to     configuration or compiling options (with the image functions being an example).                See Also            method_exists() - Checks if the class method exists     is_callable() - Verify that the contents of a variable can be called as a function     get_defined_functions() - Returns an array of all defined functions     class_exists() - Checks if the class has been defined     extension_loaded() - Find out whether an extension is loaded"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-defined-functions.php","title":"get_defined_functions","description":"get_defined_functions   (PHP 4 >= 4.0.4, PHP 5)get_defined_functions \u2014 Returns an array of all defined functions          Description       array get_defined_functions     ( void    )        Gets an array of all defined functions.            Return Values       Returns an multidimensional array containing a list of all defined    functions, both built-in (internal) and user-defined. The internal    functions will be accessible via $arr[\"internal\"], and    the user defined ones using $arr[\"user\"] (see example    below).            Examples            Example #1 get_defined_functions() example       <?phpfunction\u00a0myrow($id,\u00a0$data){\u00a0\u00a0\u00a0\u00a0return\u00a0\"<tr><th>$id<\/th><td>$data<\/td><\/tr>\\n\";}$arr\u00a0=\u00a0get_defined_functions();print_r($arr);?>             The above example will output something similar to:       Array (     [internal] => Array         (             [0] => zend_version             [1] => func_num_args             [2] => func_get_arg             [3] => func_get_args             [4] => strlen             [5] => strcmp             [6] => strncmp             ...             [750] => bcscale             [751] => bccomp         )      [user] => Array         (             [0] => myrow         )  )                      See Also            function_exists() - Return TRUE if the given function has been defined     get_defined_vars() - Returns an array of all defined variables     get_defined_constants() - Returns an associative array with the names of all the constants and their values     get_declared_classes() - Returns an array with the name of the defined classes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.register-tick-function.php","title":"register_tick_function","description":"register_tick_function   (PHP 4 >= 4.0.3, PHP 5)register_tick_function \u2014 Register a function for execution on each tick          Description       bool register_tick_function     ( callback $function    [, mixed $arg    [, mixed $...   ]] )        Registers the given function to be executed when a    tick is called.            Parameters                    function                      The function name as a string, or an array consisting of an object and        a method.                                arg                                              ...                                                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 register_tick_function() example       <?phpdeclare(ticks=1);\/\/\u00a0using\u00a0a\u00a0function\u00a0as\u00a0the\u00a0callbackregister_tick_function('my_function',\u00a0true);\/\/\u00a0using\u00a0an\u00a0object->method$object\u00a0=\u00a0new\u00a0my_class();register_tick_function(array(&$object,\u00a0'my_method'),\u00a0true);?>                        Changelog                                 Version        Description                                    5.3.0                 Ticks are now supported on threaded web server modules.                                            Notes   Warning         register_tick_function() should not be used with     threaded web server modules with PHP 5.2 or lower.                See Also            declare     unregister_tick_function() - De-register a function for execution on each tick"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unregister-tick-function.php","title":"unregister_tick_function","description":"unregister_tick_function   (PHP 4 >= 4.0.3, PHP 5)unregister_tick_function \u2014 De-register a function for execution on each tick          Description       void unregister_tick_function     ( string $function_name    )        De-registers the function named by function_name so it is    no longer executed when a tick is    called.            Parameters                    function_name                      The function name, as a string.                                     Return Values       No value is returned.            See Also            register_tick_function() - Register a function for execution on each tick"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-alloc.php","title":"ftp_alloc","description":"ftp_alloc   (PHP 5)ftp_alloc \u2014 Allocates space for a file to be uploaded        Description       bool ftp_alloc     ( resource $ftp_stream    , int $filesize    [, string &$result   ] )        Sends an ALLO command to the remote FTP server to     allocate space for a file to be uploaded.      Note:          Many FTP servers do not support this command.  These servers may return a failure      code (FALSE) indicating the command is not supported or a success code (TRUE)     to indicate that pre-allocation is not necessary and the client should continue     as though the operation were successful.  Because of this, it may be best to reserve     this function for servers which explicitly require preallocation.                     Parameters                    ftp_stream                      The link identifier of the FTP connection.                                filesize                      The number of bytes to allocate.                                result                      A textual representation of the servers response will be returned by         reference in result if a variable is provided.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_alloc() example       <?php$file\u00a0=\u00a0\"\/home\/user\/myfile\";\/\/\u00a0connect\u00a0to\u00a0the\u00a0server$conn_id\u00a0=\u00a0ftp_connect('ftp.example.com');$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0'anonymous',\u00a0'user@example.com');if\u00a0(ftp_alloc($conn_id,\u00a0filesize($file),\u00a0$result))\u00a0{\u00a0\u00a0echo\u00a0\"Space\u00a0successfully\u00a0allocated\u00a0on\u00a0server.\u00a0\u00a0Sending\u00a0$file.\\n\";\u00a0\u00a0ftp_put($conn_id,\u00a0'\/incomming\/myfile',\u00a0$file,\u00a0FTP_BINARY);}\u00a0else\u00a0{\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0allocate\u00a0space\u00a0on\u00a0server.\u00a0\u00a0Server\u00a0said:\u00a0$result\\n\";}ftp_close($conn_id);?>                       See Also            ftp_put() - Uploads a file to the FTP server     ftp_fput() - Uploads from an open file to the FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-cdup.php","title":"ftp_cdup","description":"ftp_cdup   (PHP 4, PHP 5)ftp_cdup \u2014 Changes to the parent directory        Description       bool ftp_cdup     ( resource $ftp_stream    )         Changes to the parent directory.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_cdup() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0change\u00a0the\u00a0current\u00a0directory\u00a0to\u00a0htmlftp_chdir($conn_id,\u00a0'html');echo\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/html\u00a0\/\/\u00a0return\u00a0to\u00a0the\u00a0parent\u00a0directoryif\u00a0(ftp_cdup($conn_id))\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"cdup\u00a0successful\\n\";}\u00a0else\u00a0{\u00a0\u00a0echo\u00a0\"cdup\u00a0not\u00a0successful\\n\";}echo\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/ftp_close($conn_id);?>                       See Also            ftp_chdir() - Changes the current directory on a FTP server     ftp_pwd() - Returns the current directory name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.register-shutdown-function.php","title":"register_shutdown_function","description":"register_shutdown_function   (PHP 4, PHP 5)register_shutdown_function \u2014 Register a function for execution on shutdown          Description       void register_shutdown_function     ( callback $callback    [, mixed $parameter    [, mixed $...   ]] )        Registers a callback to be executed after script    execution finishes or exit() is called.          Multiple calls to register_shutdown_function() can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.            Parameters                    callback                      The shutdown callback to register.                      The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.                                parameter                      It is possible to pass parameters to the shutdown function by passing        additional parameters.                                ...                                                   Return Values       No value is returned.             Errors\/Exceptions       If the passed callback is not callable a E_WARNING    level error will be generated.            Changelog                                 Version        Description                                    4.1.0                 The shutdown functions are now called as a part of the request.         In earlier versions under Apache, the registered shutdown functions         were called after the request has been completed (including sending         any output buffers), so it was not possible to send output to the         browser using echo() or         print(), or retrieve the contents of any output         buffers using ob_get_contents().         Headers were also always already sent.                                            Examples            Example #1 register_shutdown_function() example       <?phpfunction\u00a0shutdown(){\u00a0\u00a0\u00a0\u00a0\/\/\u00a0This\u00a0is\u00a0our\u00a0shutdown\u00a0function,\u00a0in\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0here\u00a0we\u00a0can\u00a0do\u00a0any\u00a0last\u00a0operations\u00a0\u00a0\u00a0\u00a0\/\/\u00a0before\u00a0the\u00a0script\u00a0is\u00a0complete.\u00a0\u00a0\u00a0\u00a0echo\u00a0'Script\u00a0executed\u00a0with\u00a0success',\u00a0PHP_EOL;}register_shutdown_function('shutdown');?>                        Notes   Note:          Working directory of the script can change inside the shutdown function     under some web servers, e.g. Apache.                See Also            auto_append_file     exit() - Output a message and terminate the current script     The section on connection handling"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-chdir.php","title":"ftp_chdir","description":"ftp_chdir   (PHP 4, PHP 5)ftp_chdir \u2014 Changes the current directory on a FTP server        Description       bool ftp_chdir     ( resource $ftp_stream    , string $directory    )         Changes the current directory to the specified one.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                directory                      The target directory.                                    Return Values       Returns TRUE on success or FALSE on failure.    If changing directory fails, PHP will also throw a warning.           Examples            Example #1 ftp_chdir() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\u00a0\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\u00a0\/\/\u00a0check\u00a0connectionif\u00a0((!$conn_id)\u00a0||\u00a0(!$login_result))\u00a0{\u00a0\u00a0\u00a0\u00a0die(\"FTP\u00a0connection\u00a0has\u00a0failed\u00a0!\");}echo\u00a0\"Current\u00a0directory:\u00a0\"\u00a0.\u00a0ftp_pwd($conn_id)\u00a0.\u00a0\"\\n\";\/\/\u00a0try\u00a0to\u00a0change\u00a0the\u00a0directory\u00a0to\u00a0somedirif\u00a0(ftp_chdir($conn_id,\u00a0\"somedir\"))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Current\u00a0directory\u00a0is\u00a0now:\u00a0\"\u00a0.\u00a0ftp_pwd($conn_id)\u00a0.\u00a0\"\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0change\u00a0directory\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_cdup() - Changes to the parent directory     ftp_pwd() - Returns the current directory name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-chmod.php","title":"ftp_chmod","description":"ftp_chmod   (PHP 5)ftp_chmod \u2014 Set permissions on a file via FTP        Description       int ftp_chmod     ( resource $ftp_stream    , int $mode    , string $filename    )         Sets the permissions on the specified remote file to     mode.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                mode                      The new permissions, given as an octal value.                                filename                      The remote file.                                    Return Values       Returns the new file permissions on success or FALSE on error.           Examples            Example #1 ftp_chmod() example       <?php$file\u00a0=\u00a0'public_html\/index.php';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0chmod\u00a0$file\u00a0to\u00a0644if\u00a0(ftp_chmod($conn_id,\u00a00644,\u00a0$file)\u00a0!==\u00a0false)\u00a0{\u00a0echo\u00a0\"$file\u00a0chmoded\u00a0successfully\u00a0to\u00a0644\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"could\u00a0not\u00a0chmod\u00a0$file\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       See Also            chmod() - Changes file mode"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-close.php","title":"ftp_close","description":"ftp_close   (PHP 4 >= 4.2.0, PHP 5)ftp_close \u2014 Closes an FTP connection        Description       bool ftp_close     ( resource $ftp_stream    )        ftp_close() closes the given link identifier    and releases the resource.      Note:          After calling this function, you can no longer use the FTP connection and     must create a new one with ftp_connect().               Parameters                    ftp_stream                      The link identifier of the FTP connection.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_close() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0print\u00a0the\u00a0current\u00a0directoryecho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/\/\/\u00a0close\u00a0this\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_connect() - Opens an FTP connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-delete.php","title":"ftp_delete","description":"ftp_delete   (PHP 4, PHP 5)ftp_delete \u2014 Deletes a file on the FTP server        Description       bool ftp_delete     ( resource $ftp_stream    , string $path    )        ftp_delete() deletes the file specified by    path from the FTP server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                path                      The file to delete.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_delete() example       <?php$file\u00a0=\u00a0'public_html\/old.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0delete\u00a0$fileif\u00a0(ftp_delete($conn_id,\u00a0$file))\u00a0{\u00a0echo\u00a0\"$file\u00a0deleted\u00a0successful\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"could\u00a0not\u00a0delete\u00a0$file\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-connect.php","title":"ftp_connect","description":"ftp_connect   (PHP 4, PHP 5)ftp_connect \u2014 Opens an FTP connection        Description       resource ftp_connect     ( string $host    [, int $port = 21    [, int $timeout = 90   ]] )        ftp_connect() opens an FTP connection to the    specified host.             Parameters                    host                      The FTP server address. This parameter shouldn&#039;t have any trailing         slashes and shouldn&#039;t be prefixed with ftp:\/\/.                                port                      This parameter specifies an alternate port to connect to. If it is        omitted or set to zero, then the default FTP port, 21, will be used.                                timeout                      This parameter specifies the timeout for all subsequent network operations.        If omitted, the default value is 90 seconds. The timeout can be changed and        queried at any time with ftp_set_option() and        ftp_get_option().                                    Return Values       Returns a FTP stream on success or FALSE on error.           Examples            Example #1 ftp_connect() example       <?php$ftp_server\u00a0=\u00a0\"ftp.example.com\";\/\/\u00a0set\u00a0up\u00a0a\u00a0connection\u00a0or\u00a0die$conn_id\u00a0=\u00a0ftp_connect($ftp_server)\u00a0or\u00a0die(\"Couldn't\u00a0connect\u00a0to\u00a0$ftp_server\");\u00a0?>                         Changelog                                 Version        Description                                    4.2.0                 timeout was added.                                           See Also            ftp_close() - Closes an FTP connection     ftp_ssl_connect() - Opens an Secure SSL-FTP connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-get-option.php","title":"ftp_get_option","description":"ftp_get_option   (PHP 4 >= 4.2.0, PHP 5)ftp_get_option \u2014 Retrieves various runtime behaviours of the current FTP stream        Description       mixed ftp_get_option     ( resource $ftp_stream    , int $option    )        This function returns the value for the requested     option from the specified FTP connection.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                option                      Currently, the following options are supported:                 Supported runtime FTP options                                          FTP_TIMEOUT_SEC                         Returns the current timeout used for network related operations.                                               FTP_AUTOSEEK                         Returns TRUE if this option is on, FALSE otherwise.                                                                                         Return Values       Returns the value on success or FALSE if the given     option is not supported. In the latter case, a    warning message is also thrown.           Examples            Example #1 ftp_get_option() example       <?php\/\/\u00a0Get\u00a0the\u00a0timeout\u00a0of\u00a0the\u00a0given\u00a0FTP\u00a0stream$timeout\u00a0=\u00a0ftp_get_option($conn_id,\u00a0FTP_TIMEOUT_SEC);?>                       See Also            ftp_set_option() - Set miscellaneous runtime FTP options"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-exec.php","title":"ftp_exec","description":"ftp_exec   (PHP 4 >= 4.0.3, PHP 5)ftp_exec \u2014 Requests execution of a command on the FTP server        Description       bool ftp_exec     ( resource $ftp_stream    , string $command    )        Sends a SITE EXEC command request to the FTP    server.            Parameters                    ftp_stream                      The link identifier of the FTP connection.                                command                      The command to execute.                                    Return Values       Returns TRUE if the command was successful (server sent response code:    200); otherwise returns FALSE.           Examples            Example #1 ftp_exec() example       <?php\/\/\u00a0variable\u00a0initialization$command\u00a0=\u00a0'ls\u00a0-al\u00a0>files.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0execute\u00a0commandif\u00a0(ftp_exec($conn_id,\u00a0$command))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$command\u00a0executed\u00a0successfully\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"could\u00a0not\u00a0execute\u00a0$command\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_raw() - Sends an arbitrary command to an FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-fput.php","title":"ftp_fput","description":"ftp_fput   (PHP 4, PHP 5)ftp_fput \u2014 Uploads from an open file to the FTP server        Description       bool ftp_fput     ( resource $ftp_stream    , string $remote_file    , resource $handle    , int $mode    [, int $startpos = 0   ] )        ftp_fput() uploads the data from a file pointer    to a remote file on the FTP server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                remote_file                      The remote file path.                                handle                      An open file pointer on the local file. Reading stops at end of file.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                startpos              The position in the remote file to start uploading to.                             Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_fput() example       <?php\/\/\u00a0open\u00a0some\u00a0file\u00a0for\u00a0reading$file\u00a0=\u00a0'somefile.txt';$fp\u00a0=\u00a0fopen($file,\u00a0'r');\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0upload\u00a0$fileif\u00a0(ftp_fput($conn_id,\u00a0$file,\u00a0$fp,\u00a0FTP_ASCII))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Successfully\u00a0uploaded\u00a0$file\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0uploading\u00a0$file\\n\";}\/\/\u00a0close\u00a0the\u00a0connection\u00a0and\u00a0the\u00a0file\u00a0handlerftp_close($conn_id);fclose($fp);?>                       Changelog                                 Version        Description                                    4.3.0                 startpos was added.                                           See Also            ftp_put() - Uploads a file to the FTP server     ftp_nb_fput() - Stores a file from an open file to the FTP server (non-blocking)     ftp_nb_put() - Stores a file on the FTP server (non-blocking)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-fget.php","title":"ftp_fget","description":"ftp_fget   (PHP 4, PHP 5)ftp_fget \u2014 Downloads a file from the FTP server and saves to an open file        Description       bool ftp_fget     ( resource $ftp_stream    , resource $handle    , string $remote_file    , int $mode    [, int $resumepos = 0   ] )        ftp_fget() retrieves remote_file    from the FTP server, and writes it to the given file pointer.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                handle                      An open file pointer in which we store the data.                                remote_file                      The remote file path.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                resumepos                      The position in the remote file to start downloading from.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_fget() example       <?php\/\/\u00a0path\u00a0to\u00a0remote\u00a0file$remote_file\u00a0=\u00a0'somefile.txt';$local_file\u00a0=\u00a0'localfile.txt';\/\/\u00a0open\u00a0some\u00a0file\u00a0to\u00a0write\u00a0to$handle\u00a0=\u00a0fopen($local_file,\u00a0'w');\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0download\u00a0$remote_file\u00a0and\u00a0save\u00a0it\u00a0to\u00a0$handleif\u00a0(ftp_fget($conn_id,\u00a0$handle,\u00a0$remote_file,\u00a0FTP_ASCII,\u00a00))\u00a0{\u00a0echo\u00a0\"successfully\u00a0written\u00a0to\u00a0$local_file\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0downloading\u00a0$remote_file\u00a0to\u00a0$local_file\\n\";}\/\/\u00a0close\u00a0the\u00a0connection\u00a0and\u00a0the\u00a0file\u00a0handlerftp_close($conn_id);fclose($handle);?>                       Changelog                                 Version        Description                                    4.3.0                 resumepos was added.                                           See Also            ftp_get() - Downloads a file from the FTP server     ftp_nb_get() - Retrieves a file from the FTP server and writes it to a local file (non-blocking)     ftp_nb_fget() - Retrieves a file from the FTP server and writes it to an open file (non-blocking)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-login.php","title":"ftp_login","description":"ftp_login   (PHP 4, PHP 5)ftp_login \u2014 Logs in to an FTP connection        Description       bool ftp_login     ( resource $ftp_stream    , string $username    , string $password    )         Logs in to the given FTP stream.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                username                      The username (USER).                                password                      The password (PASS).                                    Return Values       Returns TRUE on success or FALSE on failure.    If login fails, PHP will also throw a warning.           Examples            Example #1 ftp_login() example       <?php\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ftp_server\u00a0=\u00a0\"ftp.example.com\";$ftp_user\u00a0=\u00a0\"foo\";$ftp_pass\u00a0=\u00a0\"bar\";\/\/\u00a0set\u00a0up\u00a0a\u00a0connection\u00a0or\u00a0die$conn_id\u00a0=\u00a0ftp_connect($ftp_server)\u00a0or\u00a0die(\"Couldn't\u00a0connect\u00a0to\u00a0$ftp_server\");\u00a0\/\/\u00a0try\u00a0to\u00a0loginif\u00a0(@ftp_login($conn_id,\u00a0$ftp_user,\u00a0$ftp_pass))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connected\u00a0as\u00a0$ftp_user@$ftp_server\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0connect\u00a0as\u00a0$ftp_user\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);\u00a0\u00a0?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-get.php","title":"ftp_get","description":"ftp_get   (PHP 4, PHP 5)ftp_get \u2014 Downloads a file from the FTP server        Description       bool ftp_get     ( resource $ftp_stream    , string $local_file    , string $remote_file    , int $mode    [, int $resumepos = 0   ] )        ftp_get() retrieves a remote file from the FTP server,    and saves it into a local file.            Parameters                    ftp_stream                      The link identifier of the FTP connection.                                local_file                      The local file path (will be overwritten if the file already exists).                                remote_file                      The remote file path.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                resumepos                      The position in the remote file to start downloading from.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_get() example       <?php\/\/\u00a0define\u00a0some\u00a0variables$local_file\u00a0=\u00a0'local.zip';$server_file\u00a0=\u00a0'server.zip';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0download\u00a0$server_file\u00a0and\u00a0save\u00a0to\u00a0$local_fileif\u00a0(ftp_get($conn_id,\u00a0$local_file,\u00a0$server_file,\u00a0FTP_BINARY))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Successfully\u00a0written\u00a0to\u00a0$local_file\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       Changelog                                 Version        Description                                    4.3.0                 resumepos was added.                                           See Also            ftp_pasv() - Turns passive mode on or off     ftp_fget() - Downloads a file from the FTP server and saves to an open file     ftp_nb_get() - Retrieves a file from the FTP server and writes it to a local file (non-blocking)     ftp_nb_fget() - Retrieves a file from the FTP server and writes it to an open file (non-blocking)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-mkdir.php","title":"ftp_mkdir","description":"ftp_mkdir   (PHP 4, PHP 5)ftp_mkdir \u2014 Creates a directory        Description       string ftp_mkdir     ( resource $ftp_stream    , string $directory    )         Creates the specified directory on the FTP server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                directory                      The name of the directory that will be created.                                    Return Values       Returns the newly created directory name on success or FALSE on error.           Examples            Example #1 ftp_mkdir() example       <?php$dir\u00a0=\u00a0'www';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0create\u00a0the\u00a0directory\u00a0$dirif\u00a0(ftp_mkdir($conn_id,\u00a0$dir))\u00a0{\u00a0echo\u00a0\"successfully\u00a0created\u00a0$dir\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0creating\u00a0$dir\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_rmdir() - Removes a directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-mdtm.php","title":"ftp_mdtm","description":"ftp_mdtm   (PHP 4, PHP 5)ftp_mdtm \u2014 Returns the last modified time of the given file        Description       int ftp_mdtm     ( resource $ftp_stream    , string $remote_file    )        ftp_mdtm() gets the last modified time for a remote    file.      Note:          Not all servers support this feature!          Note:          ftp_mdtm() does not work with directories.               Parameters                    ftp_stream                      The link identifier of the FTP connection.                                remote_file                      The file from which to extract the last modification time.                                    Return Values       Returns the last modified time as a Unix timestamp on success, or -1 on     error.           Examples            Example #1 ftp_mdtm() example       <?php$file\u00a0=\u00a0'somefile.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0\u00a0get\u00a0the\u00a0last\u00a0modified\u00a0time$buff\u00a0=\u00a0ftp_mdtm($conn_id,\u00a0$file);if\u00a0($buff\u00a0!=\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0somefile.txt\u00a0was\u00a0last\u00a0modified\u00a0on:\u00a0March\u00a026\u00a02003\u00a014:16:41.\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$file\u00a0was\u00a0last\u00a0modified\u00a0on\u00a0:\u00a0\"\u00a0.\u00a0date(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0$buff);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0mdtime\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-continue.php","title":"ftp_nb_continue","description":"ftp_nb_continue   (PHP 4 >= 4.3.0, PHP 5)ftp_nb_continue \u2014 Continues retrieving\/sending a file (non-blocking)        Description       int ftp_nb_continue     ( resource $ftp_stream    )         Continues retrieving\/sending a file non-blocking.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                    Return Values       Returns FTP_FAILED or FTP_FINISHED    or FTP_MOREDATA.           Examples            Example #1 ftp_nb_continue() example       <?php\/\/\u00a0Initate\u00a0the\u00a0download$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0FTP_BINARY);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-fget.php","title":"ftp_nb_fget","description":"ftp_nb_fget   (PHP 4 >= 4.3.0, PHP 5)ftp_nb_fget \u2014 Retrieves a file from the FTP server and writes it to an open file (non-blocking)        Description       int ftp_nb_fget     ( resource $ftp_stream    , resource $handle    , string $remote_file    , int $mode    [, int $resumepos = 0   ] )        ftp_nb_fget() retrieves a remote file from the FTP     server.          The difference between this function and ftp_fget() is     that this function retrieves the file asynchronously, so your program can     perform other operations while the file is being downloaded.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                handle                      An open file pointer in which we store the data.                                remote_file                      The remote file path.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                resumepos              The position in the remote file to start downloading from.                             Return Values       Returns FTP_FAILED or FTP_FINISHED    or FTP_MOREDATA.           Examples            Example #1 ftp_nb_fget() example       <?php\/\/\u00a0open\u00a0some\u00a0file\u00a0for\u00a0reading$file\u00a0=\u00a0'index.php';$fp\u00a0=\u00a0fopen($file,\u00a0'w');$conn_id\u00a0=\u00a0ftp_connect($ftp_server);$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0Initate\u00a0the\u00a0download$ret\u00a0=\u00a0ftp_nb_fget($conn_id,\u00a0$fp,\u00a0$file,\u00a0FTP_BINARY);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\u00a0\u00a0\u00a0echo\u00a0\".\";\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($conn_id);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}\/\/\u00a0close\u00a0filepointerfclose($fp);?>                       See Also            ftp_nb_get() - Retrieves a file from the FTP server and writes it to a local file (non-blocking)     ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)     ftp_fget() - Downloads a file from the FTP server and saves to an open file     ftp_get() - Downloads a file from the FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-get.php","title":"ftp_nb_get","description":"ftp_nb_get   (PHP 4 >= 4.3.0, PHP 5)ftp_nb_get \u2014 Retrieves a file from the FTP server and writes it to a local file (non-blocking)        Description       int ftp_nb_get     ( resource $ftp_stream    , string $local_file    , string $remote_file    , int $mode    [, int $resumepos = 0   ] )        ftp_nb_get() retrieves a remote file from the FTP server,    and saves it into a local file.           The difference between this function and ftp_get() is that    this function retrieves the file asynchronously, so your program can perform     other operations while the file is being downloaded.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                local_file                      The local file path (will be overwritten if the file already exists).                                remote_file                      The remote file path.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                resumepos              The position in the remote file to start downloading from.                             Return Values       Returns FTP_FAILED or FTP_FINISHED    or FTP_MOREDATA.           Examples            Example #1 ftp_nb_get() example       <?php\/\/\u00a0Initate\u00a0the\u00a0download$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0FTP_BINARY);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\u00a0\u00a0\u00a0echo\u00a0\".\";\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}?>                     Example #2 Resuming a download with ftp_nb_get()       <?php\/\/\u00a0Initate\u00a0$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0FTP_BINARY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filesize(\"test\"));\/\/\u00a0OR:\u00a0$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FTP_BINARY,\u00a0FTP_AUTORESUME);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\u00a0\u00a0\u00a0echo\u00a0\".\";\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}?>                     Example #3       Resuming a download at position 100 to a new      file with ftp_nb_get()            <?php\/\/\u00a0Disable\u00a0Autoseekftp_set_option($my_connection,\u00a0FTP_AUTOSEEK,\u00a0false);\/\/\u00a0Initiate$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"newfile\",\u00a0\"README\",\u00a0FTP_BINARY,\u00a0100);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\/*\u00a0...\u00a0*\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);}?>                      In the example above, newfile is 100 bytes smaller    than README on the FTP server because we started    reading at offset 100. If we didn&#039;t disable     FTP_AUTOSEEK, the first 100 bytes of    newfile would be &#039;\\0&#039;.           See Also            ftp_nb_fget() - Retrieves a file from the FTP server and writes it to an open file (non-blocking)     ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)     ftp_fget() - Downloads a file from the FTP server and saves to an open file     ftp_get() - Downloads a file from the FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-put.php","title":"ftp_nb_put","description":"ftp_nb_put   (PHP 4 >= 4.3.0, PHP 5)ftp_nb_put \u2014 Stores a file on the FTP server (non-blocking)        Description       int ftp_nb_put     ( resource $ftp_stream    , string $remote_file    , string $local_file    , int $mode    [, int $startpos = 0   ] )        ftp_nb_put() stores a local file on the FTP server.          The difference between this function and the ftp_put()    is that this function uploads the file asynchronously, so your program can    perform other operations while the file is being uploaded.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                remote_file                      The remote file path.                                local_file                      The local file path.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                startpos              The position in the remote file to start uploading to.                             Return Values       Returns FTP_FAILED or FTP_FINISHED    or FTP_MOREDATA.           Examples            Example #1 ftp_nb_put() example       <?php\/\/\u00a0Initiate\u00a0the\u00a0Upload$ret\u00a0=\u00a0ftp_nb_put($my_connection,\u00a0\"test.remote\",\u00a0\"test.local\",\u00a0FTP_BINARY);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\u00a0\u00a0\u00a0echo\u00a0\".\";\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0uploading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0uploading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}?>                     Example #2 Resuming an upload with ftp_nb_put()       <?php\/\/\u00a0Initiate$ret\u00a0=\u00a0ftp_nb_put($my_connection,\u00a0\"test.remote\",\u00a0\"test.local\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FTP_BINARY,\u00a0ftp_size(\"test.remote\"));\/\/\u00a0OR:\u00a0$ret\u00a0=\u00a0ftp_nb_put($my_connection,\u00a0\"test.remote\",\u00a0\"test.local\",\u00a0\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FTP_BINARY,\u00a0FTP_AUTORESUME);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\u00a0\u00a0\u00a0echo\u00a0\".\";\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0uploading...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0uploading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}?>                       See Also            ftp_nb_fput() - Stores a file from an open file to the FTP server (non-blocking)     ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)     ftp_put() - Uploads a file to the FTP server     ftp_fput() - Uploads from an open file to the FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-fput.php","title":"ftp_nb_fput","description":"ftp_nb_fput   (PHP 4 >= 4.3.0, PHP 5)ftp_nb_fput \u2014 Stores a file from an open file to the FTP server (non-blocking)        Description       int ftp_nb_fput     ( resource $ftp_stream    , string $remote_file    , resource $handle    , int $mode    [, int $startpos = 0   ] )        ftp_nb_fput() uploads the data from a file pointer to    a remote file on the FTP server.          The difference between this function and the ftp_fput()     is that this function uploads the file asynchronously, so your program can    perform other operations while the file is being uploaded.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                remote_file                      The remote file path.                                handle                      An open file pointer on the local file. Reading stops at end of file.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                startpos              The position in the remote file to start uploading to.                             Return Values       Returns FTP_FAILED or FTP_FINISHED    or FTP_MOREDATA.           Examples            Example #1 ftp_nb_fput() example       <?php$file\u00a0=\u00a0'index.php';$fp\u00a0=\u00a0fopen($file,\u00a0'r');$conn_id\u00a0=\u00a0ftp_connect($ftp_server);$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0Initate\u00a0the\u00a0upload$ret\u00a0=\u00a0ftp_nb_fput($conn_id,\u00a0$file,\u00a0$fp,\u00a0FTP_BINARY);while\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\u00a0\u00a0\u00a0echo\u00a0\".\";\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0upload...\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($conn_id);}if\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0uploading\u00a0the\u00a0file...\";\u00a0\u00a0\u00a0exit(1);}fclose($fp);?>                       See Also            ftp_nb_put() - Stores a file on the FTP server (non-blocking)     ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)     ftp_put() - Uploads a file to the FTP server     ftp_fput() - Uploads from an open file to the FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-pasv.php","title":"ftp_pasv","description":"ftp_pasv   (PHP 4, PHP 5)ftp_pasv \u2014 Turns passive mode on or off        Description       bool ftp_pasv     ( resource $ftp_stream    , bool $pasv    )        ftp_pasv() turns on or off passive mode. In    passive mode, data connections are initiated by the client,    rather than by the server.    It may be needed if the client is behind firewall.          Please note that ftp_pasv() can only be called after a    successfull login or otherwise it will fail.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                pasv                      If TRUE, the passive mode is turned on, else it&#039;s turned off.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_pasv() example       <?php$file\u00a0=\u00a0'somefile.txt';$remote_file\u00a0=\u00a0'readme.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0turn\u00a0passive\u00a0mode\u00a0onftp_pasv($conn_id,\u00a0true);\/\/\u00a0upload\u00a0a\u00a0fileif\u00a0(ftp_put($conn_id,\u00a0$remote_file,\u00a0$file,\u00a0FTP_ASCII))\u00a0{\u00a0echo\u00a0\"successfully\u00a0uploaded\u00a0$file\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0uploading\u00a0$file\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-pwd.php","title":"ftp_pwd","description":"ftp_pwd   (PHP 4, PHP 5)ftp_pwd \u2014 Returns the current directory name        Description       string ftp_pwd     ( resource $ftp_stream    )               Parameters                    ftp_stream                      The link identifier of the FTP connection.                                    Return Values       Returns the current directory name or FALSE on error.           Examples            Example #1 ftp_pwd() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0change\u00a0directory\u00a0to\u00a0public_htmlftp_chdir($conn_id,\u00a0'public_html');\/\/\u00a0print\u00a0current\u00a0directoryecho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/public_html\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_chdir() - Changes the current directory on a FTP server     ftp_cdup() - Changes to the parent directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-quit.php","title":"ftp_quit","description":"ftp_quit   (PHP 4, PHP 5)ftp_quit \u2014 Alias of ftp_close()         Description       This function is an alias of:     ftp_close()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nlist.php","title":"ftp_nlist","description":"ftp_nlist   (PHP 4, PHP 5)ftp_nlist \u2014 Returns a list of files in the given directory        Description       array ftp_nlist     ( resource $ftp_stream    , string $directory    )         Parameters                    ftp_stream                      The link identifier of the FTP connection.                                directory                      The directory to be listed. This parameter can also include arguments, eg.        ftp_nlist($conn_id, \"-la \/your\/dir\");        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.                                     Return Values       Returns an array of filenames from the specified directory on success or    FALSE on error.           Examples            Example #1 ftp_nlist() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0get\u00a0contents\u00a0of\u00a0the\u00a0current\u00a0directory$contents\u00a0=\u00a0ftp_nlist($conn_id,\u00a0\".\");\/\/\u00a0output\u00a0$contentsvar_dump($contents);?>               The above example will output something similar to:       array(3) {   [0]=>   string(11) \"public_html\"   [1]=>   string(10) \"public_ftp\"   [2]=>   string(3) \"www\"                     See Also            ftp_rawlist() - Returns a detailed list of files in the given directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-raw.php","title":"ftp_raw","description":"ftp_raw   (PHP 5)ftp_raw \u2014 Sends an arbitrary command to an FTP server        Description       array ftp_raw     ( resource $ftp_stream    , string $command    )        Sends an arbitrary command to the FTP server.            Parameters                    ftp_stream                      The link identifier of the FTP connection.                                command                      The command to execute.                                    Return Values       Returns the server&#039;s response as an array of strings.    No parsing is performed on the response string, nor does     ftp_raw() determine if the command succeeded.             Examples            Example #1 Using ftp_raw() to login to an FTP server manually.       <?php$fp\u00a0=\u00a0ftp_connect(\"ftp.example.com\");\/*\u00a0This\u00a0is\u00a0the\u00a0same\u00a0as:\u00a0\u00a0\u00a0\u00a0ftp_login($fp,\u00a0\"joeblow\",\u00a0\"secret\");\u00a0*\/ftp_raw($fp,\u00a0\"USER\u00a0joeblow\");ftp_raw($fp,\u00a0\"PASS\u00a0secret\");?>                       See Also            ftp_exec() - Requests execution of a command on the FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-put.php","title":"ftp_put","description":"ftp_put   (PHP 4, PHP 5)ftp_put \u2014 Uploads a file to the FTP server        Description       bool ftp_put     ( resource $ftp_stream    , string $remote_file    , string $local_file    , int $mode    [, int $startpos = 0   ] )        ftp_put() stores a local file on the FTP server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                remote_file                      The remote file path.                                local_file                      The local file path.                                mode                      The transfer mode. Must be either FTP_ASCII or        FTP_BINARY.                                startpos              The position in the remote file to start uploading to.                             Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_put() example       <?php$file\u00a0=\u00a0'somefile.txt';$remote_file\u00a0=\u00a0'readme.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0upload\u00a0a\u00a0fileif\u00a0(ftp_put($conn_id,\u00a0$remote_file,\u00a0$file,\u00a0FTP_ASCII))\u00a0{\u00a0echo\u00a0\"successfully\u00a0uploaded\u00a0$file\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0uploading\u00a0$file\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       Changelog                                 Version        Description                                    4.3.0                 startpos was added.                                           See Also            ftp_pasv() - Turns passive mode on or off     ftp_fput() - Uploads from an open file to the FTP server     ftp_nb_fput() - Stores a file from an open file to the FTP server (non-blocking)     ftp_nb_put() - Stores a file on the FTP server (non-blocking)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-rename.php","title":"ftp_rename","description":"ftp_rename   (PHP 4, PHP 5)ftp_rename \u2014 Renames a file or a directory on the FTP server        Description       bool ftp_rename     ( resource $ftp_stream    , string $oldname    , string $newname    )        ftp_rename() renames a file or a directory on the FTP    server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                oldname                      The old file\/directory name.                                newname                      The new name.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_rename() example       <?php$old_file\u00a0=\u00a0'somefile.txt.bak';$new_file\u00a0=\u00a0'somefile.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0rename\u00a0$old_file\u00a0to\u00a0$new_fileif\u00a0(ftp_rename($conn_id,\u00a0$old_file,\u00a0$new_file))\u00a0{\u00a0echo\u00a0\"successfully\u00a0renamed\u00a0$old_file\u00a0to\u00a0$new_file\\n\";}\u00a0else\u00a0{\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0renaming\u00a0$old_file\u00a0to\u00a0$new_file\\n\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-rmdir.php","title":"ftp_rmdir","description":"ftp_rmdir   (PHP 4, PHP 5)ftp_rmdir \u2014 Removes a directory        Description       bool ftp_rmdir     ( resource $ftp_stream    , string $directory    )         Removes the specified directory on the FTP server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                directory                      The directory to delete. This must be either an absolute or relative        path to an empty directory.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 ftp_rmdir() example       <?php$dir\u00a0=\u00a0'www\/';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0try\u00a0to\u00a0delete\u00a0the\u00a0directory\u00a0$dirif\u00a0(ftp_rmdir($conn_id,\u00a0$dir))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Successfully\u00a0deleted\u00a0$dir\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0deleting\u00a0$dir\\n\";}ftp_close($conn_id);?>                       See Also            ftp_mkdir() - Creates a directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-set-option.php","title":"ftp_set_option","description":"ftp_set_option   (PHP 4 >= 4.2.0, PHP 5)ftp_set_option \u2014 Set miscellaneous runtime FTP options        Description       bool ftp_set_option     ( resource $ftp_stream    , int $option    , mixed $value    )        This function controls various runtime options for the specified FTP     stream.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                option                      Currently, the following options are supported:                 Supported runtime FTP options                                          FTP_TIMEOUT_SEC                         Changes the timeout in seconds used for all network related              functions. value must be an integer that             is greater than 0. The default timeout is 90 seconds.                                               FTP_AUTOSEEK                         When enabled, GET or PUT requests with a              resumepos or startpos             parameter will first seek to the requested position within the file.             This is enabled by default.                                                                                    value                      This parameter depends on which option is chosen        to be altered.                                    Return Values       Returns TRUE if the option could be set; FALSE if not. A warning    message will be thrown if the option is not    supported or the passed value doesn&#039;t match the    expected value for the given option.           Examples            Example #1 ftp_set_option() example       <?php\/\/\u00a0Set\u00a0the\u00a0network\u00a0timeout\u00a0to\u00a010\u00a0secondsftp_set_option($conn_id,\u00a0FTP_TIMEOUT_SEC,\u00a010);?>                       See Also            ftp_get_option() - Retrieves various runtime behaviours of the current FTP stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-site.php","title":"ftp_site","description":"ftp_site   (PHP 4, PHP 5)ftp_site \u2014 Sends a SITE command to the server        Description       bool ftp_site     ( resource $ftp_stream    , string $command    )        ftp_site() sends the given SITE     command to the FTP server.          SITE commands are not standardized, and vary from server    to server. They are useful for handling such things as file permissions and     group membership.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                command                      The SITE command. Note that this parameter isn&#039;t escaped so there may        be some issues with filenames containing spaces and other characters.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 Sending a SITE command to an ftp server       <?php\/\/\u00a0Connect\u00a0to\u00a0FTP\u00a0server$conn\u00a0=\u00a0ftp_connect('ftp.example.com');if\u00a0(!$conn)\u00a0die('Unable\u00a0to\u00a0connect\u00a0to\u00a0ftp.example.com');\/\/\u00a0Login\u00a0as\u00a0\"user\"\u00a0with\u00a0password\u00a0\"pass\"if\u00a0(!ftp_login($conn,\u00a0'user',\u00a0'pass'))\u00a0die('Error\u00a0logging\u00a0into\u00a0ftp.example.com');\/\/\u00a0Issue:\u00a0\"SITE\u00a0CHMOD\u00a00600\u00a0\/home\/user\/privatefile\"\u00a0command\u00a0to\u00a0ftp\u00a0serverif\u00a0(ftp_site($conn,\u00a0'CHMOD\u00a00600\u00a0\/home\/user\/privatefile'))\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"Command\u00a0executed\u00a0successfully.\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0die('Command\u00a0failed.');}?>                       See Also            ftp_raw() - Sends an arbitrary command to an FTP server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-ssl-connect.php","title":"ftp_ssl_connect","description":"ftp_ssl_connect   (PHP 4 >= 4.3.0, PHP 5)ftp_ssl_connect \u2014 Opens an Secure SSL-FTP connection        Description       resource ftp_ssl_connect     ( string $host    [, int $port = 21    [, int $timeout = 90   ]] )        ftp_ssl_connect() opens an explicit SSL-FTP connection to the    specified host.      Note:     Why this function may not exist         ftp_ssl_connect() is only available if both     the ftp module and the OpenSSL     support is built statically into php, this means that on Windows this     function will be undefined in the official PHP builds. To make this     function available on Windows you must compile your own PHP binaries.          Note:          ftp_ssl_connect() is not intended for use with sFTP.     To use sFTP with PHP, please see ssh2_sftp().               Parameters                    host                      The FTP server address. This parameter shouldn&#039;t have any trailing         slashes and shouldn&#039;t be prefixed with ftp:\/\/.                                port                      This parameter specifies an alternate port to connect to. If it is        omitted or set to zero, then the default FTP port, 21, will be used.                                timeout                      This parameter specifies the timeout for all subsequent network operations.        If omitted, the default value is 90 seconds. The timeout can be changed and        queried at any time with ftp_set_option() and        ftp_get_option().                                    Return Values       Returns a SSL-FTP stream on success or FALSE on error.            Changelog                                 Version        Description                                    5.2.2                 The function was changed to return FALSE when it can&#039;t use an SSL         connection, instead of fallbacking to a non-SSL one as previously.                                            Examples            Example #1 ftp_ssl_connect() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0ssl\u00a0connection$conn_id\u00a0=\u00a0ftp_ssl_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);echo\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/\/\/\u00a0close\u00a0the\u00a0ssl\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_connect() - Opens an FTP connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-size.php","title":"ftp_size","description":"ftp_size   (PHP 4, PHP 5)ftp_size \u2014 Returns the size of the given file        Description       int ftp_size     ( resource $ftp_stream    , string $remote_file    )        ftp_size() returns the size of the given file in    bytes.      Note:          Not all servers support this feature.               Parameters                    ftp_stream                      The link identifier of the FTP connection.                                remote_file                      The remote file.                                    Return Values       Returns the file size on success, or -1 on error.           Examples            Example #1 ftp_size() example       <?php$file\u00a0=\u00a0'somefile.txt';\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0get\u00a0the\u00a0size\u00a0of\u00a0$file$res\u00a0=\u00a0ftp_size($conn_id,\u00a0$file);if\u00a0($res\u00a0!=\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"size\u00a0of\u00a0$file\u00a0is\u00a0$res\u00a0bytes\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"couldn't\u00a0get\u00a0the\u00a0size\";}\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);?>                       See Also            ftp_rawlist() - Returns a detailed list of files in the given directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-systype.php","title":"ftp_systype","description":"ftp_systype   (PHP 4, PHP 5)ftp_systype \u2014 Returns the system type identifier of the remote FTP server        Description       string ftp_systype     ( resource $ftp_stream    )        Returns the system type identifier of the remote FTP server.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                    Return Values       Returns the remote system type, or FALSE on error.           Examples            Example #1 ftp_systype() example       <?php\/\/\u00a0ftp\u00a0connection$ftp\u00a0=\u00a0ftp_connect('ftp.example.com');ftp_login($ftp,\u00a0'user',\u00a0'password');\/\/\u00a0get\u00a0the\u00a0system\u00a0typeif\u00a0($type\u00a0=\u00a0ftp_systype($ftp))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Example.com\u00a0is\u00a0powered\u00a0by\u00a0$type\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0the\u00a0systype\";}?>             The above example will output something similar to:       Example.com is powered by UNIX"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-continent-code-by-name.php","title":"geoip_continent_code_by_name","description":"geoip_continent_code_by_name   (PECL geoip >= 1.0.3)geoip_continent_code_by_name \u2014 Get the two letter continent code        Description       string geoip_continent_code_by_name     ( string $hostname    )         The geoip_continent_code_by_name() function will return    the two letter continent code corresponding to a hostname or an IP address.            Parameters                    hostname                      The hostname or IP address whose location is to be looked-up.                                    Return Values       Returns the two letter continent code on success, or FALSE if the    address cannot be found in the database.            Examples            Example #1 A geoip_continent_code_by_name() example           This will print where the host example.com is located.            <?php$continent\u00a0=\u00a0geoip_continent_code_by_name('www.example.com');if\u00a0($continent)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0host\u00a0is\u00a0located\u00a0in:\u00a0'\u00a0.\u00a0$continent;}?>             The above example will output:        This host is located in: NA                      See Also            geoip_country_code_by_name() - Get the two letter country code"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-country-code3-by-name.php","title":"geoip_country_code3_by_name","description":"geoip_country_code3_by_name   (PECL geoip >= 0.2.0)geoip_country_code3_by_name \u2014 Get the three letter country code        Description       string geoip_country_code3_by_name     ( string $hostname    )         The geoip_country_code3_by_name() function will return the    three letter country code corresponding to a hostname or an IP address.            Parameters                    hostname                      The hostname or IP address whose location is to be looked-up.                                    Return Values       Returns the three letter country code on success, or FALSE     if the address cannot be found in the database.            Examples            Example #1 A geoip_country_code3_by_name() example           This will print where the host example.com is located.            <?php$country\u00a0=\u00a0geoip_country_code3_by_name('www.example.com');if\u00a0($country)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0host\u00a0is\u00a0located\u00a0in:\u00a0'\u00a0.\u00a0$country;}?>             The above example will output:       This host is located in: USA                      See Also            geoip_country_code_by_name() - Get the two letter country code     geoip_country_name_by_name() - Get the full country name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-country-code-by-name.php","title":"geoip_country_code_by_name","description":"geoip_country_code_by_name   (PECL geoip >= 0.2.0)geoip_country_code_by_name \u2014 Get the two letter country code        Description       string geoip_country_code_by_name     ( string $hostname    )          The geoip_country_code_by_name() function will return     the two letter country code corresponding to a hostname or an IP address.            Parameters                    hostname                      The hostname or IP address whose location is to be looked-up.                                    Return Values       Returns the two letter ISO country code on success, or FALSE     if the address cannot be found in the database.            Examples            Example #1 A geoip_country_code_by_name() example           This will print where the host example.com is located.            <?php$country\u00a0=\u00a0geoip_country_code_by_name('www.example.com');if\u00a0($country)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0host\u00a0is\u00a0located\u00a0in:\u00a0'\u00a0.\u00a0$country;}?>             The above example will output:       This host is located in: US                      See Also            geoip_country_code3_by_name() - Get the three letter country code     geoip_country_name_by_name() - Get the full country name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-rawlist.php","title":"ftp_rawlist","description":"ftp_rawlist   (PHP 4, PHP 5)ftp_rawlist \u2014 Returns a detailed list of files in the given directory        Description       array ftp_rawlist     ( resource $ftp_stream    , string $directory    [, bool $recursive = false   ] )        ftp_rawlist() executes the FTP     LIST command, and returns the result as an array.           Parameters                    ftp_stream                      The link identifier of the FTP connection.                                directory                      The directory path. May include arguments for the LIST        command.                                recursive                      If set to TRUE, the issued command will be LIST -R.                                    Return Values       Returns an array where each element corresponds to one line of text.          The output is not parsed in any way. The system type identifier returned by    ftp_systype() can be used to determine how the results     should be interpreted.           Examples            Example #1 ftp_rawlist() example       <?php\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\/\/\u00a0get\u00a0the\u00a0file\u00a0list\u00a0for\u00a0\/$buff\u00a0=\u00a0ftp_rawlist($conn_id,\u00a0'\/');\/\/\u00a0close\u00a0the\u00a0connectionftp_close($conn_id);\/\/\u00a0output\u00a0the\u00a0buffervar_dump($buff);?>             The above example will output something similar to:       array(3) {   [0]=>   string(65) \"drwxr-x---   3 vincent  vincent      4096 Jul 12 12:16 public_ftp\"   [1]=>   string(66) \"drwxr-x---  15 vincent  vincent      4096 Nov  3 21:31 public_html\"   [2]=>   string(73) \"lrwxrwxrwx   1 vincent  vincent        11 Jul 12 12:16 www -> public_html\" }                     Changelog                                 Version        Description                                    4.3.0                 recursive was added.                                           See Also            ftp_nlist() - Returns a list of files in the given directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-country-name-by-name.php","title":"geoip_country_name_by_name","description":"geoip_country_name_by_name   (PECL geoip >= 0.2.0)geoip_country_name_by_name \u2014 Get the full country name        Description       string geoip_country_name_by_name     ( string $hostname    )         The geoip_country_name_by_name() function will return the    full country name corresponding to a hostname or an IP address.            Parameters                    hostname                      The hostname or IP address whose location is to be looked-up.                                    Return Values       Returns the country name on success, or FALSE if the address cannot     be found in the database.            Examples            Example #1 A geoip_country_name_by_name() example           This will print where the host example.com is located.            <?php$country\u00a0=\u00a0geoip_country_name_by_name('www.example.com');if\u00a0($country)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0host\u00a0is\u00a0located\u00a0in:\u00a0'\u00a0.\u00a0$country;}?>             The above example will output:        This host is located in: United States                      See Also            geoip_country_code_by_name() - Get the two letter country code     geoip_country_code3_by_name() - Get the three letter country code"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-db-avail.php","title":"geoip_db_avail","description":"geoip_db_avail   (PECL geoip >= 1.0.1)geoip_db_avail \u2014 Determine if GeoIP Database is available        Description       bool geoip_db_avail     ( int $database    )         The geoip_db_avail() function returns if the corresponding    GeoIP Database is available and can be opened on disk.           It does not indicate if the file is a proper database, only if it is readable.            Parameters                    database                      The database type as an integer. You can use the        various constants defined with        this extension (ie: GEOIP_*_EDITION).                                     Return Values       Returns TRUE is database exists, FALSE if not found, or NULL on error.            Examples            Example #1 A geoip_db_avail() example           This will output the current database version string.            <?phpif\u00a0(geoip_db_avail(GEOIP_COUNTRY_EDITION))\u00a0\u00a0\u00a0\u00a0print\u00a0geoip_database_info(GEOIP_COUNTRY_EDITION);?>             The above example will output:       GEO-106FREE 20080801 Build 1 Copyright (c) 2006 MaxMind LLC All Rights Reserved"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-db-filename.php","title":"geoip_db_filename","description":"geoip_db_filename   (PECL geoip >= 1.0.1)geoip_db_filename \u2014 Returns the filename of the corresponding GeoIP Database        Description       string geoip_db_filename     ( int $database    )         The geoip_db_filename() function returns the filename of    the corresponding GeoIP Database.           It does not indicate if the file exists or not on disk, only where the library    is looking for the database.            Parameters                    database                      The database type as an integer. You can use the        various constants defined with        this extension (ie: GEOIP_*_EDITION).                                     Return Values       Returns the filename of the corresponding database, or NULL on error.            Examples            Example #1 A geoip_db_filename() example           This will output the filename of the corresponding database.            <?phpprint\u00a0geoip_db_filename(GEOIP_COUNTRY_EDITION);?>             The above example will output:       \/usr\/share\/GeoIP\/GeoIP.dat"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-database-info.php","title":"geoip_database_info","description":"geoip_database_info   (PECL geoip >= 0.2.0)geoip_database_info \u2014 Get GeoIP Database information        Description       string geoip_database_info     ([ int $database = GEOIP_COUNTRY_EDITION   ] )         The geoip_database_info() function returns the corresponding    GeoIP Database version as it is defined inside the binary file.             If this function is called without arguments, it returns the version    of the GeoIP Free Country Edition.            Parameters                    database                      The database type as an integer. You can use the        various constants defined with        this extension (ie: GEOIP_*_EDITION).                                     Return Values       Returns the corresponding database version, or NULL on error.            Examples            Example #1 A geoip_region_by_name() example           This will output the current database version string.            <?phpprint\u00a0geoip_database_info(GEOIP_COUNTRY_EDITION);?>             The above example will output:       GEO-106FREE 20060801 Build 1 Copyright (c) 2006 MaxMind LLC All Rights Reserved"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-db-get-all-info.php","title":"geoip_db_get_all_info","description":"geoip_db_get_all_info   (PECL geoip >= 1.0.1)geoip_db_get_all_info \u2014 Returns detailed information about all GeoIP database types        Description       array geoip_db_get_all_info     ( void    )         The geoip_db_get_all_info() function will return     detailed information as a multi-dimensional array about all the     GeoIP database types.          This function is available even if no databases are installed. It    will simply list them as non-available.          The names of the different keys of the returning associative array are as follows:                            \"available\" -- Boolean, indicate if DB is available (see       geoip_db_avail())                             \"description\" -- The database description                             \"filename\" -- The database filename on disk (see       geoip_db_filename())                           Return Values       Returns the associative array.            Examples            Example #1 A geoip_db_get_all_info() example           This will print the array containing all the information.            <?php$infos\u00a0=\u00a0geoip_db_get_all_info();if\u00a0(is_array($infos))\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($infos);}?>             The above example will output:       array(11) {   [1]=>   array(3) {     [\"available\"]=>     bool(true)     [\"description\"]=>     string(21) \"GeoIP Country Edition\"     [\"filename\"]=>     string(32) \"\/usr\/share\/GeoIP\/GeoIP.dat\"   }  [ ... ]    [11]=>   array(3) {     [\"available\"]=>     bool(false)     [\"description\"]=>     string(25) \"GeoIP Domain Name Edition\"     [\"filename\"]=>     string(38) \"\/usr\/share\/GeoIP\/GeoIPDomain.dat\"   } }                        Example #2 A geoip_db_get_all_info() example           You can use the various constants as keys to get only parts of the information.            <?php$infos\u00a0=\u00a0geoip_db_get_all_info();if\u00a0($infos[GEOIP_COUNTRY_EDITION]['available'])\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$infos[GEOIP_COUNTRY_EDITION]['description'];}?>             The above example will output:       GeoIP Country Edition"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-id-by-name.php","title":"geoip_id_by_name","description":"geoip_id_by_name   (PECL geoip >= 0.2.0)geoip_id_by_name \u2014 Get the Internet connection type        Description       int geoip_id_by_name     ( string $hostname    )         The geoip_id_by_name() function will return the Internet     connection type corresponding to a hostname or an IP address.          The return value is numeric and can be compared to the following constants:                            GEOIP_UNKNOWN_SPEED                             GEOIP_DIALUP_SPEED                             GEOIP_CABLEDSL_SPEED                             GEOIP_CORPORATE_SPEED                             Parameters                    hostname                      The hostname or IP address whose connection type is to be looked-up.                                    Return Values       Returns the connection type.            Examples            Example #1 A geoip_id_by_name() example           This will output the connection type of the host example.com.            <?php$netspeed\u00a0=\u00a0geoip_id_by_name('www.example.com');echo\u00a0'The\u00a0connection\u00a0type\u00a0is\u00a0';switch\u00a0($netspeed)\u00a0{\u00a0\u00a0\u00a0\u00a0case\u00a0GEOIP_DIALUP_SPEED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'dial-up';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0GEOIP_CABLEDSL_SPEED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'cable\u00a0or\u00a0DSL';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0GEOIP_CORPORATE_SPEED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'corporate';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0GEOIP_UNKNOWN_SPEED:\u00a0\u00a0\u00a0\u00a0default:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'unknown';}?>             The above example will output:       The connection type is corporate"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-isp-by-name.php","title":"geoip_isp_by_name","description":"geoip_isp_by_name   (PECL geoip >= 1.0.2)geoip_isp_by_name \u2014 Get the Internet Service Provider (ISP) name        Description       string geoip_isp_by_name     ( string $hostname    )         The geoip_isp_by_name() function will return the name of    the Internet Service Provider (ISP) that an IP is assigned to.          This function is currently only available to users who have bought a commercial    GeoIP ISP Edition. A warning will be issued if the proper database cannot be     located.              Parameters                    hostname                      The hostname or IP address.                                    Return Values       Returns the ISP name on success, or FALSE if the address    cannot be found in the database.            Examples            Example #1 A geoip_isp_by_name() example           This will print the ISP name of host example.com.            <?php$isp\u00a0=\u00a0geoip_isp_by_name('www.example.com');if\u00a0($isp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0host\u00a0IP\u00a0is\u00a0from\u00a0ISP:\u00a0'\u00a0.\u00a0$isp;}?>             The above example will output:       This host IP is from ISP: ICANN c\/o Internet Assigned Numbers Authority"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-org-by-name.php","title":"geoip_org_by_name","description":"geoip_org_by_name   (PECL geoip >= 0.2.0)geoip_org_by_name \u2014 Get the organization name        Description       string geoip_org_by_name     ( string $hostname    )         The geoip_org_by_name() function will return the name of    the organization that an IP is assigned to.          This function is currently only available to users who have bought a commercial    GeoIP Organization, ISP or AS Edition. A warning will be issued if the proper     database cannot be located.              Parameters                    hostname                      The hostname or IP address.                                    Return Values       Returns the organization name on success, or FALSE if the address    cannot be found in the database.            Examples            Example #1 A geoip_org_by_name() example           This will print to whom the host example.com IP is allocated.            <?php$org\u00a0=\u00a0geoip_org_by_name('www.example.com');if\u00a0($org)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0host\u00a0IP\u00a0is\u00a0allocated\u00a0to:\u00a0'\u00a0.\u00a0$org;}?>             The above example will output:       This host IP is allocated to: ICANN c\/o Internet Assigned Numbers Authority"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-region-by-name.php","title":"geoip_region_by_name","description":"geoip_region_by_name   (PECL geoip >= 0.2.0)geoip_region_by_name \u2014 Get the country code and region        Description       array geoip_region_by_name     ( string $hostname    )         The geoip_region_by_name() function will return the country    and region corresponding to a hostname or an IP address.          This function is currently only available to users who have bought a commercial    GeoIP Region Edition. A warning will be issued if the proper database cannot be    located.          The names of the different keys of the returning associative array are as follows:                            \"country_code\" -- Two letter country code (see       geoip_country_code_by_name())                             \"region\" -- The region code (ex: CA for California)                          Parameters                    hostname                      The hostname or IP address whose region is to be looked-up.                                    Return Values       Returns the associative array on success, or FALSE if the address     cannot be found in the database.            Examples            Example #1 A geoip_region_by_name() example           This will print the array containing the country code and region      of the host example.com.            <?php$region\u00a0=\u00a0geoip_region_by_name('www.example.com');if\u00a0($region)\u00a0{\u00a0\u00a0\u00a0\u00a0print_r($region);}?>             The above example will output:       Array (     [country_code] => US     [region] => CA )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-record-by-name.php","title":"geoip_record_by_name","description":"geoip_record_by_name   (PECL geoip >= 0.2.0)geoip_record_by_name \u2014 Returns the detailed City information found in the GeoIP Database        Description       array geoip_record_by_name     ( string $hostname    )         The geoip_record_by_name() function will return the    record information corresponding to a hostname or an IP address.          This function is available for both GeoLite City Edition and commercial GeoIP    City Edition. A warning will be issued if the proper database cannot be    located.          The names of the different keys of the returning associative array are as follows:                            \"continent_code\" -- Two letter continent code (as of version 1.0.4 with        libgeoip 1.4.3 or newer)                             \"country_code\" -- Two letter country code (see       geoip_country_code_by_name())                             \"country_code3\" -- Three letter country code (see       geoip_country_code3_by_name())                             \"country_name\" -- The country name (see       geoip_country_name_by_name())                             \"region\" -- The region code (ex: CA for California)                             \"city\" -- The city.                             \"postal_code\" -- The Postal Code, FSA or Zip Code.                             \"latitude\" -- The Latitude as signed double.                             \"longitude\" -- The Longitude as signed double.                             \"dma_code\" -- Designated Market Area code (USA and Canada only)                             \"area_code\" -- The PSTN area code (ex: 212)                           Parameters                    hostname                      The hostname or IP address whose record is to be looked-up.                                    Return Values       Returns the associative array on success, or FALSE if the address     cannot be found in the database.            Changelog                                 Version        Description                                    1.0.4                 Adding the continent_code with GeoIP Library 1.4.3 or newer only                               1.0.3                 Adding country_code3 and country_name                                            Examples            Example #1 A geoip_record_by_name() example           This will print the array containing the record of host example.com.            <?php$record\u00a0=\u00a0geoip_record_by_name('www.example.com');if\u00a0($record)\u00a0{\u00a0\u00a0\u00a0\u00a0print_r($record);}?>             The above example will output:       Array (     [continent_code] => NA     [country_code] => US     [country_code3] => USA     [country_name] => United States     [region] => CA     [city] => Marina Del Rey     [postal_code] =>      [latitude] => 33.9776992798     [longitude] => -118.435096741     [dma_code] => 803     [area_code] => 310 )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-region-name-by-code.php","title":"geoip_region_name_by_code","description":"geoip_region_name_by_code   (PECL geoip >= 1.0.4)geoip_region_name_by_code \u2014 Returns the region name for some country and region code combo        Description       string geoip_region_name_by_code     ( string $country_code    , string $region_code    )         The geoip_region_name_by_code() function will return the region    name corresponding to a country and region code combo.          In the United States, the region code corresponds to the two-letter abbreviation    of each state. In Canada, the region code corresponds to the two-letter province or    territory code as attributed by Canada Post.          For the rest of the world, GeoIP uses FIPS 10-4 codes to represent regions.    You can check \u00bb\u00a0http:\/\/www.maxmind.com\/app\/fips10_4    for a detailed list of FIPS 10-4 codes.          This function is always available if using GeoIP Library version 1.4.1 or newer. The    data is taken directly from the GeoIP Library and not from any database.           Parameters                    country_code                      The two-letter country code (see        geoip_country_code_by_name())                                region_code                      The two-letter (or digit) region code (see         geoip_region_by_name())                                    Return Values       Returns the region name on success, or FALSE if the country and region code    combo cannot be found.            Examples            Example #1 A geoip_region_name_by_code() example using region code for US\/Canada           This will print the region name for country CA (Canada), region QC (Quebec).            <?php$region\u00a0=\u00a0geoip_region_name_by_code('CA',\u00a0'QC');if\u00a0($region)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Region\u00a0name\u00a0for\u00a0CA\/QC\u00a0is:\u00a0'\u00a0.\u00a0$region;}?>             The above example will output:       Region name for CA\/QC is: Quebec                   Example #2 A geoip_region_name_by_code() example using FIPS codes           This will print the region name for country JP (Japan), region 01.            <?php$region\u00a0=\u00a0geoip_region_name_by_code('JP',\u00a0'01');if\u00a0($region)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Region\u00a0name\u00a0for\u00a0JP\/01\u00a0is:\u00a0'\u00a0.\u00a0$region;}?>             The above example will output:       Region name for JP\/01 is: Aichi"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-time-zone-by-country-and-region.php","title":"geoip_time_zone_by_country_and_region","description":"geoip_time_zone_by_country_and_region   (PECL geoip >= 1.0.4)geoip_time_zone_by_country_and_region \u2014 Returns the time zone for some country and region code combo        Description       string geoip_time_zone_by_country_and_region     ( string $country_code    [, string $region_code   ] )         The geoip_time_zone_by_country_and_region() function will return the    time zone corresponding to a country and region code combo.          In the United States, the region code corresponds to the two-letter abbreviation    of each state. In Canada, the region code corresponds to the two-letter province or    territory code as attributed by Canada Post.          For the rest of the world, GeoIP uses FIPS 10-4 codes to represent regions.    You can check \u00bb\u00a0http:\/\/www.maxmind.com\/app\/fips10_4    for a detailed list of FIPS 10-4 codes.          This function is always available if using GeoIP Library version 1.4.1 or newer. The    data is taken directly from the GeoIP Library and not from any database.           Parameters                    country_code                      The two-letter country code (see        geoip_country_code_by_name())                                region_code                      The two-letter (or digit) region code (see         geoip_region_by_name())                                    Return Values       Returns the time zone on success, or FALSE if the country and region code    combo cannot be found.            Examples            Example #1 A geoip_time_zone_by_country_and_region() example using region code for US\/Canada           This will print the time zone for country CA (Canada), region QC (Quebec).            <?php$timezone\u00a0=\u00a0geoip_time_zone_by_country_and_region('CA',\u00a0'QC');if\u00a0($timezone)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Time\u00a0zone\u00a0for\u00a0CA\/QC\u00a0is:\u00a0'\u00a0.\u00a0$timezone;}?>             The above example will output:       Time zone for CA\/QC is: America\/Montreal                   Example #2 A geoip_time_zone_by_country_and_region() example using FIPS codes           This will print the time zone for country JP (Japan), region 01 (Aichi).            <?php$timezone\u00a0=\u00a0geoip_time_zone_by_country_and_region('JP',\u00a0'01');if\u00a0($timezone)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Time\u00a0zone\u00a0for\u00a0JP\/01\u00a0is:\u00a0'\u00a0.\u00a0$timezone;}?>             The above example will output:       Time zone for JP\/01 is: Asia\/Tokyo"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-frame-long-name.php","title":"id3_get_frame_long_name","description":"id3_get_frame_long_name   (PECL id3 >= 0.2)id3_get_frame_long_name \u2014 Get the long name of an ID3v2 frame        Description       string id3_get_frame_long_name     ( string $frameId    )        id3_get_frame_long_name() returns the long name for an    ID3v2 frame.           Parameters                    frameId                      An ID3v2 frame                                    Return Values       Returns the frame long name or FALSE on errors.           Examples            Example #1 id3_get_frame_long_name() example       <?php$longName\u00a0=\u00a0id3_get_frame_long_name(\"TOLY\");echo\u00a0$longName;?>             The above example will output:       Original lyricist(s)\/text writer(s)                     See Also            id3_get_frame_short_name() - Get the short name of an ID3v2 frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-frame-short-name.php","title":"id3_get_frame_short_name","description":"id3_get_frame_short_name   (PECL id3 >= 0.2)id3_get_frame_short_name \u2014 Get the short name of an ID3v2 frame        Description       string id3_get_frame_short_name     ( string $frameId    )        id3_get_frame_short_name() returns the short name for an    ID3v2 frame.           Parameters                    frameId                      An ID3v2 frame                                    Return Values       Returns the frame short name or FALSE on errors.          The values returned by id3_get_frame_short_name() are used in the    array returned by id3_get_tag().           Examples            Example #1 id3_get_frame_short_name() example       <?php$shortName\u00a0=\u00a0id3_get_frame_short_name(\"TOLY\");echo\u00a0$shortName;?>             The above example will output:       originalLyricist                     See Also            id3_get_frame_long_name() - Get the long name of an ID3v2 frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-genre-id.php","title":"id3_get_genre_id","description":"id3_get_genre_id   (PECL id3 >= 0.1)id3_get_genre_id \u2014 Get the id for a genre        Description       int id3_get_genre_id     ( string $genre    )        id3_get_genre_id() returns the id for a genre.           Parameters                    genre                      Genre name as string.                                    Return Values       The genre id or FALSE on errors.           Examples            Example #1 id3_get_genre_id() example       <?php$id\u00a0=\u00a0id3_get_genre_id(\"Alternative\");echo\u00a0$id;?>             The above example will output:       20                     See Also            id3_get_genre_name() - Get the name for a genre id     id3_get_genre_list() - Get all possible genre values"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-genre-list.php","title":"id3_get_genre_list","description":"id3_get_genre_list   (PECL id3 >= 0.1)id3_get_genre_list \u2014 Get all possible genre values        Description       array id3_get_genre_list     ( void    )        id3_get_genre_list() returns an array containing all    possible genres that may be stored in an ID3 tag. This list has been created    by Eric Kemp and later extended by WinAmp.          This function is useful to provide you users a list of genres from which    they may choose one. When updating the ID3 tag you will always have to    specify the genre as an integer ranging from 0 to 147.           Return Values       Returns an array containing all possible genres that may be stored in an    ID3 tag.           Examples            Example #1 id3_get_genre_list() example       <?php$genres\u00a0=\u00a0id3_get_genre_list();print_r($genres);?>             The above example will output:       Array (     [0] => Blues     [1] => Classic Rock     [2] => Country     [3] => Dance     [4] => Disco     [5] => Funk     [6] => Grunge     [7] => Hip-Hop     [8] => Jazz     [9] => Metal     [10] => New Age     [11] => Oldies     [12] => Other     [13] => Pop     [14] => R&B     [15] => Rap     [16] => Reggae     [17] => Rock     [18] => Techno     [19] => Industrial     [20] => Alternative     [21] => Ska     [22] => Death Metal     [23] => Pranks     [24] => Soundtrack     [25] => Euro-Techno     [26] => Ambient     [27] => Trip-Hop     [28] => Vocal     [29] => Jazz+Funk     [30] => Fusion     [31] => Trance     [32] => Classical     [33] => Instrumental     [34] => Acid     [35] => House     [36] => Game     [37] => Sound Clip     [38] => Gospel     [39] => Noise     [40] => Alternative Rock     [41] => Bass     [42] => Soul     [43] => Punk     [44] => Space     [45] => Meditative     [46] => Instrumental Pop     [47] => Instrumental Rock     [48] => Ethnic     [49] => Gothic     [50] => Darkwave     [51] => Techno-Industrial     [52] => Electronic     [53] => Pop-Folk     [54] => Eurodance     [55] => Dream     [56] => Southern Rock     [57] => Comedy     [58] => Cult     [59] => Gangsta     [60] => Top 40     [61] => Christian Rap     [62] => Pop\/Funk     [63] => Jungle     [64] => Native US     [65] => Cabaret     [66] => New Wave     [67] => Psychadelic     [68] => Rave     [69] => Showtunes     [70] => Trailer     [71] => Lo-Fi     [72] => Tribal     [73] => Acid Punk     [74] => Acid Jazz     [75] => Polka     [76] => Retro     [77] => Musical     [78] => Rock & Roll     [79] => Hard Rock     [80] => Folk     [81] => Folk-Rock     [82] => National Folk     [83] => Swing     [84] => Fast Fusion     [85] => Bebob     [86] => Latin     [87] => Revival     [88] => Celtic     [89] => Bluegrass     [90] => Avantgarde     [91] => Gothic Rock     [92] => Progressive Rock     [93] => Psychedelic Rock     [94] => Symphonic Rock     [95] => Slow Rock     [96] => Big Band     [97] => Chorus     [98] => Easy Listening     [99] => Acoustic     [100] => Humour     [101] => Speech     [102] => Chanson     [103] => Opera     [104] => Chamber Music     [105] => Sonata     [106] => Symphony     [107] => Booty Bass     [108] => Primus     [109] => Porn Groove     [110] => Satire     [111] => Slow Jam     [112] => Club     [113] => Tango     [114] => Samba     [115] => Folklore     [116] => Ballad     [117] => Power Ballad     [118] => Rhytmic Soul     [119] => Freestyle     [120] => Duet     [121] => Punk Rock     [122] => Drum Solo     [123] => Acapella     [124] => Euro-House     [125] => Dance Hall     [126] => Goa     [127] => Drum & Bass     [128] => Club-House     [129] => Hardcore     [130] => Terror     [131] => Indie     [132] => BritPop     [133] => Negerpunk     [134] => Polsk Punk     [135] => Beat     [136] => Christian Gangsta     [137] => Heavy Metal     [138] => Black Metal     [139] => Crossover     [140] => Contemporary C     [141] => Christian Rock     [142] => Merengue     [143] => Salsa     [144] => Thrash Metal     [145] => Anime     [146] => JPop     [147] => SynthPop )                     See Also            id3_get_genre_name() - Get the name for a genre id     id3_get_genre_id() - Get the id for a genre"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-genre-name.php","title":"id3_get_genre_name","description":"id3_get_genre_name   (PECL id3 >= 0.1)id3_get_genre_name \u2014 Get the name for a genre id        Description       string id3_get_genre_name     ( int $genre_id    )        id3_get_genre_name() returns the name for a genre id.           Parameters                    genre_id                      An integer ranging from 0 to 147                                    Return Values       Returns the name as a string.           Examples            Example #1 id3_get_genre_name() example       <?php$genre\u00a0=\u00a0id3_get_genre_name(20);echo\u00a0$genre;?>             The above example will output:       Alternative                     See Also            id3_get_genre_list() - Get all possible genre values     id3_get_genre_id() - Get the id for a genre"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-version.php","title":"id3_get_version","description":"id3_get_version   (PECL id3 >= 0.1)id3_get_version \u2014 Get version of an ID3 tag        Description       int id3_get_version     ( string $filename    )        id3_get_version() retrieves the version(s) of the     ID3 tag(s) in the MP3 file.          If a file contains an ID3 v1.1 tag, it always contains    a 1.0 tag, as version 1.1 is just an extension of 1.0.           Parameters                    filename                      The path to the MP3 file                      Instead of a filename you may also pass a valid stream resource                                    Return Values       Returns the version number of the ID3 tag of the file.    As a tag can contain ID3 v1.x and v2.x tags, the return value of this    function should be bitwise compared with the predefined constants     ID3_V1_0, ID3_V1_1 and      ID3_V2.           Examples            Example #1 id3_get_version() example       <?php$version\u00a0=\u00a0id3_get_version(\u00a0\"path\/to\/example.mp3\"\u00a0);if\u00a0($version\u00a0&\u00a0ID3_V1_0)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Contains\u00a0a\u00a01.x\u00a0tag\\n\";}if\u00a0($version\u00a0&\u00a0ID3_V1_1)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Contains\u00a0a\u00a01.1\u00a0tag\\n\";}if\u00a0($version\u00a0&\u00a0ID3_V2)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Contains\u00a0a\u00a02.x\u00a0tag\\n\";}?>             The above example will output something similar to:       Contains a 1.x tag Contains a 1.1 tag                     See Also            id3_set_tag() - Update information stored in an ID3 tag     id3_get_tag() - Get all information stored in an ID3 tag     id3_remove_tag() - Remove an existing ID3 tag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-tag.php","title":"id3_get_tag","description":"id3_get_tag   (PECL id3 >= 0.1)id3_get_tag \u2014 Get all information stored in an ID3 tag        Description       array id3_get_tag     ( string $filename    [, int $version = ID3_BEST   ] )        id3_get_tag() is used to get all information stored    in the id3 tag of the specified file.           Parameters                    filename                      The path to the MP3 file                      Instead of a filename you may also pass a valid stream resource                                version                      Allows you to specify the version of the tag as MP3 files may contain        both, version 1.x and version 2.x tags                      Since version 0.2 id3_get_tag() also supports ID3        tags of version 2.2, 2.3 and 2.4. To extract information from these        tags, pass one of the constants ID3_V2_2, ID3_V2_3 or ID3_V2_4 as the        second parameter.        ID3 v2.x tags can contain a lot more information about the MP3 file        than ID3 v1.x tags.                                    Return Values       Returns an associative array with various keys like:     title, artist, ..          The key genre will contain an integer between 0 and    147. You may use id3_get_genre_name() to convert it to    a human readable string.           Examples            Example #1 id3_get_tag() example       <?php$tag\u00a0=\u00a0id3_get_tag(\u00a0\"path\/to\/example.mp3\"\u00a0);print_r($tag);?>             The above example will output something similar to:       Array (     [title] => DN-38416     [artist] => Re:\\Legion     [album] => Reflections     [year] => 2004     [genre] => 19 )                   Example #2 id3_get_tag() example       <?php$tag\u00a0=\u00a0id3_get_tag(\u00a0\"path\/to\/example2.mp3\",\u00a0ID3_V2_3\u00a0);print_r($tag);?>             The above example will output something similar to:       Array (     [copyright] => Dirty Mac     [originalArtist] => Dirty Mac     [composer] => Marcus G\u00f6tze     [artist] => Dirty Mac     [title] => Little Big Man     [album] => Demo-Tape     [track] => 5\/12     [genre] => (17)Rock     [year] => 2001 )                     See Also            id3_set_tag() - Update information stored in an ID3 tag     id3_remove_tag() - Remove an existing ID3 tag     id3_get_version() - Get version of an ID3 tag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-remove-tag.php","title":"id3_remove_tag","description":"id3_remove_tag   (PECL id3 >= 0.1)id3_remove_tag \u2014 Remove an existing ID3 tag        Description       bool id3_remove_tag     ( string $filename    [, int $version = ID3_V1_0   ] )        id3_remove_tag() is used to remove the information stored    of an ID3 tag.           Parameters                    filename                      The path to the MP3 file                      Instead of a filename you may also pass a valid stream resource                                version                      Allows you to specify the version of the tag as MP3 files may contain        both, version 1.x and version 2.x tags.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 id3_remove_tag() example       <?php$result\u00a0=\u00a0id3_remove_tag(\u00a0\"path\/to\/example.mp3\",\u00a0ID3_V1_0\u00a0);if\u00a0($result\u00a0===\u00a0true)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Tag\u00a0succesfully\u00a0removed\\n\";}?>                   If the file is writable and contained a 1.0 tag, this will output:            Tag succesfully removed                     Notes   Note:          Currently id3_remove_tag() only supports version 1.0     and 1.1. If you choose to remove a 1.0 tag and the file contains a 1.1     tag, this tag will be removed, as v1.1 is only an extension of 1.0.               See Also            id3_set_tag() - Update information stored in an ID3 tag     id3_get_tag() - Get all information stored in an ID3 tag     id3_get_version() - Get version of an ID3 tag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-set-tag.php","title":"id3_set_tag","description":"id3_set_tag   (PECL id3 >= 0.1)id3_set_tag \u2014 Update information stored in an ID3 tag        Description       bool id3_set_tag     ( string $filename    , array $tag    [, int $version = ID3_V1_0   ] )        id3_set_tag() is used to change the information stored    of an ID3 tag. If no tag has been present, it will be added to the file.           Parameters                    filename                      The path to the MP3 file                      Instead of a filename you may also pass a valid stream resource                                tag                      An associative array of tag keys and values                      The following keys may be used in the associative array:                               Keys in the associative array                                          key            possible value            available in version                                                        title            string with maximum of 30 characters            v1.0, v1.1                                   artist            string with maximum of 30 characters            v1.0, v1.1                                   album            string with maximum of 30 characters            v1.0, v1.1                                   year            4 digits            v1.0, v1.1                                   genre            integer value between 0 and 147            v1.0, v1.1                                   comment            string with maximum of 30 characters (28 in v1.1)            v1.0, v1.1                                   track            integer between 0 and 255            v1.1                                                                        version                      Allows you to specify the version of the tag as MP3 files may contain        both, version 1.x and version 2.x tags                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 id3_set_tag() example       <?php$data\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"title\"\u00a0=>\u00a0\"Re:Start\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"artist\"\u00a0=>\u00a0\"Re:\\Legion\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"comment\"\u00a0=>\u00a0\"A\u00a0nice\u00a0track\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);$result\u00a0=\u00a0id3_set_tag(\u00a0\"path\/to\/example.mp3\",\u00a0$data,\u00a0ID3_V1_0\u00a0);if\u00a0($result\u00a0===\u00a0true)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Tag\u00a0succesfully\u00a0updated\\n\";}?>                   If the file is writable, this will output:            Tag succesfully updated                     Notes   Note:          Currently id3_set_tag() only supports version 1.0     and 1.1.                See Also            id3_remove_tag() - Remove an existing ID3 tag     id3_get_tag() - Get all information stored in an ID3 tag     id3_get_version() - Get version of an ID3 tag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-copy.php","title":"hash_copy","description":"hash_copy   (PHP 5 >= 5.3.0)hash_copy \u2014 Copy hashing context        Description       resource hash_copy     ( resource $context    )          Parameters                    context                      Hashing context returned by hash_init().                                     Return Values       Returns a copy of Hashing Context resource.            Examples            Example #1 hash_copy() example       <?php$context\u00a0=\u00a0hash_init(\"md5\");hash_update($context,\u00a0\"data\");\/*\u00a0copy\u00a0context\u00a0to\u00a0be\u00a0able\u00a0to\u00a0continue\u00a0using\u00a0it\u00a0*\/$copy_context\u00a0=\u00a0hash_copy($context);echo\u00a0hash_final($context),\u00a0\"\\n\";hash_update($copy_context,\u00a0\"data\");echo\u00a0hash_final($copy_context),\u00a0\"\\n\";?>             The above example will output:       8d777f385d3dfec8815d20f7496026dc 511ae0b1c13f95e5f08f1a0dd3da3d93"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-algos.php","title":"hash_algos","description":"hash_algos   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_algos \u2014 Return a list of registered hashing algorithms        Description       array hash_algos     ( void    )          Return Values       Returns a numerically indexed array containing the list of supported    hashing algorithms.            Changelog                                 Version        Description                                    5.4.0        Support for joaat, fnv132 and fnv164 was added                       5.3.0        Support for md2, ripemd256, ripemd320, salsa10, salsa20, snefru256 and sha224 was added                                     Examples            Example #1 hash_algos() example           As of PHP 5.3.0, hash_algos() will return the      following list of algorithm names.            <?phpprint_r(hash_algos());?>             The above example will output:       Array (     [0] => md2     [1] => md4     [2] => md5     [3] => sha1     [4] => sha224     [5] => sha256     [6] => sha384     [7] => sha512     [8] => ripemd128     [9] => ripemd160     [10] => ripemd256     [11] => ripemd320     [12] => whirlpool     [13] => tiger128,3     [14] => tiger160,3     [15] => tiger192,3     [16] => tiger128,4     [17] => tiger160,4     [18] => tiger192,4     [19] => snefru     [20] => snefru256     [21] => gost     [22] => adler32     [23] => crc32     [24] => crc32b     [25] => salsa10     [26] => salsa20     [27] => haval128,3     [28] => haval160,3     [29] => haval192,3     [30] => haval224,3     [31] => haval256,3     [32] => haval128,4     [33] => haval160,4     [34] => haval192,4     [35] => haval224,4     [36] => haval256,4     [37] => haval128,5     [38] => haval160,5     [39] => haval192,5     [40] => haval224,5     [41] => haval256,5 )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-file.php","title":"hash_file","description":"hash_file   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_file \u2014 Generate a hash value using the contents of a given file        Description       string hash_file     ( string $algo    , string $filename    [, bool $raw_output = false   ] )          Parameters                    algo                      Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)                                filename                      URL describing location of file to be hashed; Supports fopen wrappers.                                raw_output                      When set to TRUE, outputs raw binary data.        FALSE outputs lowercase hexits.                                     Return Values       Returns a string containing the calculated message digest as lowercase hexits    unless raw_output is set to true in which case the raw    binary representation of the message digest is returned.            Examples            Example #1 Using hash_file()       <?php\/*\u00a0Create\u00a0a\u00a0file\u00a0to\u00a0calculate\u00a0hash\u00a0of\u00a0*\/file_put_contents('example.txt',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');echo\u00a0hash_file('md5',\u00a0'example.txt');?>             The above example will output:       5c6ffbdd40d9556b73a21e63c3e0e904                      See Also            hash() - Generate a hash value (message digest)     hash_hmac_file() - Generate a keyed hash value using the HMAC method and the contents of a given file     hash_update_file() - Pump data into an active hashing context from a file     md5_file() - Calculates the md5 hash of a given file     sha1_file() - Calculate the sha1 hash of a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-final.php","title":"hash_final","description":"hash_final   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_final \u2014 Finalize an incremental hash and return resulting digest        Description       string hash_final     ( resource $context    [, bool $raw_output = false   ] )          Parameters                    context                      Hashing context returned by hash_init().                                raw_output                      When set to TRUE, outputs raw binary data.        FALSE outputs lowercase hexits.                                     Return Values       Returns a string containing the calculated message digest as lowercase hexits    unless raw_output is set to true in which case the raw    binary representation of the message digest is returned.            Examples            Example #1 hash_final() example       <?php$ctx\u00a0=\u00a0hash_init('sha1');hash_update($ctx,\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');echo\u00a0hash_final($ctx);?>             The above example will output:       c0854fb9fb03c41cce3802cb0d220529e6eef94e                      See Also            hash_init() - Initialize an incremental hashing context     hash_update() - Pump data into an active hashing context     hash_update_stream() - Pump data into an active hashing context from an open stream     hash_update_file() - Pump data into an active hashing context from a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-hmac-file.php","title":"hash_hmac_file","description":"hash_hmac_file   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_hmac_file \u2014 Generate a keyed hash value using the HMAC method and the contents of a given file        Description       string hash_hmac_file     ( string $algo    , string $filename    , string $key    [, bool $raw_output = false   ] )          Parameters                    algo                      Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms.                                filename                      URL describing location of file to be hashed; Supports fopen wrappers.                                key                      Shared secret key used for generating the HMAC variant of the message digest.                                raw_output                      When set to TRUE, outputs raw binary data.        FALSE outputs lowercase hexits.                                     Return Values       Returns a string containing the calculated message digest as lowercase hexits    unless raw_output is set to true in which case the raw    binary representation of the message digest is returned.            Examples            Example #1 hash_hmac_file() example       <?php\/*\u00a0Create\u00a0a\u00a0file\u00a0to\u00a0calculate\u00a0hash\u00a0of\u00a0*\/file_put_contents('example.txt',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');echo\u00a0hash_hmac_file('md5',\u00a0'example.txt',\u00a0'secret');?>             The above example will output:       7eb2b5c37443418fc77c136dd20e859c                      See Also            hash_algos() - Return a list of registered hashing algorithms     hash_hmac() - Generate a keyed hash value using the HMAC method     hash_file() - Generate a hash value using the contents of a given file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-init.php","title":"hash_init","description":"hash_init   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_init \u2014 Initialize an incremental hashing context        Description       resource hash_init     ( string $algo    [, int $options = 0    [, string $key = NULL   ]] )          Parameters                    algo                      Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)                                options                      Optional settings for hash generation, currently supports only one option:        HASH_HMAC.  When specified, the key        must be specified.                                key                      When HASH_HMAC is specified for options,        a shared secret key to be used with the HMAC hashing method must be supplied in this        parameter.                                     Return Values       Returns a Hashing Context resource for use with hash_update(),    hash_update_stream(), hash_update_file(),    and hash_final().            Examples            Example #1 Incremental hashing example       <?php$ctx\u00a0=\u00a0hash_init('md5');hash_update($ctx,\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0');hash_update($ctx,\u00a0'jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');echo\u00a0hash_final($ctx);?>             The above example will output:       5c6ffbdd40d9556b73a21e63c3e0e904                      See Also            hash() - Generate a hash value (message digest)     hash_file() - Generate a hash value using the contents of a given file     hash_hmac() - Generate a keyed hash value using the HMAC method     hash_hmac_file() - Generate a keyed hash value using the HMAC method and the contents of a given file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-update-file.php","title":"hash_update_file","description":"hash_update_file   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_update_file \u2014 Pump data into an active hashing context from a file        Description       bool hash_update_file     ( resource $context    , string $filename    [, resource $context = NULL   ] )          Parameters                    context                      Hashing context returned by hash_init().                                filename                      URL describing location of file to be hashed; Supports fopen wrappers.                                context                      Stream context as returned by stream_context_create().                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            hash_init() - Initialize an incremental hashing context     hash_update() - Pump data into an active hashing context     hash_update_stream() - Pump data into an active hashing context from an open stream     hash_final() - Finalize an incremental hash and return resulting digest     hash() - Generate a hash value (message digest)     hash_file() - Generate a hash value using the contents of a given file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-update.php","title":"hash_update","description":"hash_update   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_update \u2014 Pump data into an active hashing context        Description       bool hash_update     ( resource $context    , string $data    )          Parameters                    context                      Hashing context returned by hash_init().                                data                      Message to be included in the hash digest.                                     Return Values       Returns TRUE.            See Also            hash_init() - Initialize an incremental hashing context     hash_update_file() - Pump data into an active hashing context from a file     hash_update_stream() - Pump data into an active hashing context from an open stream     hash_final() - Finalize an incremental hash and return resulting digest"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-update-stream.php","title":"hash_update_stream","description":"hash_update_stream   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_update_stream \u2014 Pump data into an active hashing context from an open stream        Description       int hash_update_stream     ( resource $context    , resource $handle    [, int $length = -1   ] )          Parameters                    context                      Hashing context returned by hash_init().                                handle                      Open file handle as returned by any stream creation function.                                length                      Maximum number of characters to copy from handle        into the hashing context.                                     Return Values       Actual number of bytes added to the hashing context from handle.            Examples            Example #1 hash_update_stream() example       <?php$fp\u00a0=\u00a0tmpfile();fwrite($fp,\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');rewind($fp);$ctx\u00a0=\u00a0hash_init('md5');hash_update_stream($ctx,\u00a0$fp);echo\u00a0hash_final($ctx);?>             The above example will output:       5c6ffbdd40d9556b73a21e63c3e0e904                      See Also            hash_init() - Initialize an incremental hashing context     hash_update() - Pump data into an active hashing context     hash_final() - Finalize an incremental hash and return resulting digest     hash() - Generate a hash value (message digest)     hash_file() - Generate a hash value using the contents of a given file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-hmac.php","title":"hash_hmac","description":"hash_hmac   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash_hmac \u2014 Generate a keyed hash value using the HMAC method        Description       string hash_hmac     ( string $algo    , string $data    , string $key    [, bool $raw_output = false   ] )          Parameters                    algo                      Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms.                                data                      Message to be hashed.                                key                      Shared secret key used for generating the HMAC variant of the message digest.                                raw_output                      When set to TRUE, outputs raw binary data.        FALSE outputs lowercase hexits.                                     Return Values       Returns a string containing the calculated message digest as lowercase hexits    unless raw_output is set to true in which case the raw    binary representation of the message digest is returned.            Examples            Example #1 hash_hmac() example       <?phpecho\u00a0hash_hmac('ripemd160',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.',\u00a0'secret');?>             The above example will output:       b8e7ae12510bdfb1812e463a7f086122cf37e4f7                      See Also            hash() - Generate a hash value (message digest)     hash_algos() - Return a list of registered hashing algorithms     hash_init() - Initialize an incremental hashing context     hash_hmac_file() - Generate a keyed hash value using the HMAC method and the contents of a given file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-dir-security.php","title":"iis_get_dir_security","description":"iis_get_dir_security   (PECL iisfunc SVN)iis_get_dir_security \u2014 Gets Directory Security        Description       int iis_get_dir_security     ( int $server_instance    , string $virtual_path    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-add-server.php","title":"iis_add_server","description":"iis_add_server   (PECL iisfunc SVN)iis_add_server \u2014 Creates a new virtual web server        Description       int iis_add_server     ( string $path    , string $comment    , string $server_ip    , int $port    , string $host_name    , int $rights    , int $start_server    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-script-map.php","title":"iis_get_script_map","description":"iis_get_script_map   (PECL iisfunc SVN)iis_get_script_map \u2014 Gets script mapping on a virtual directory for a specific extension        Description       string iis_get_script_map     ( int $server_instance    , string $virtual_path    , string $script_extension    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-server-by-comment.php","title":"iis_get_server_by_comment","description":"iis_get_server_by_comment   (PECL iisfunc SVN)iis_get_server_by_comment \u2014 Return the instance number associated with the Comment        Description       int iis_get_server_by_comment     ( string $comment    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash.php","title":"hash","description":"hash   (PHP 5 >= 5.1.2, PECL hash >= 1.1)hash \u2014 Generate a hash value (message digest)        Description       string hash     ( string $algo    , string $data    [, bool $raw_output = false   ] )          Parameters                    algo                      Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)                                data                      Message to be hashed.                                raw_output                      When set to TRUE, outputs raw binary data.        FALSE outputs lowercase hexits.                                     Return Values       Returns a string containing the calculated message digest as lowercase hexits    unless raw_output is set to true in which case the raw    binary representation of the message digest is returned.            Examples            Example #1 A hash() example       <?phpecho\u00a0hash('ripemd160',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');?>             The above example will output:       ec457d0a974c48d5685a7efa03d137dc8bbde7e3                      See Also            hash_file() - Generate a hash value using the contents of a given file     hash_hmac() - Generate a keyed hash value using the HMAC method     hash_init() - Initialize an incremental hashing context     md5() - Calculate the md5 hash of a string     sha1() - Calculate the sha1 hash of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-server-by-path.php","title":"iis_get_server_by_path","description":"iis_get_server_by_path   (PECL iisfunc SVN)iis_get_server_by_path \u2014 Return the instance number associated with the Path        Description       int iis_get_server_by_path     ( string $path    )        Each virtual server in IIS is associated with an instance number.    iis_get_server_by_path() finds the instance number    from the actual path to the root directory.           Parameters                    path                      The path to the root directory                                    Return Values       Returns the server instance number."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-server-rights.php","title":"iis_get_server_rights","description":"iis_get_server_rights   (PECL iisfunc SVN)iis_get_server_rights \u2014 Gets server rights        Description       int iis_get_server_rights     ( int $server_instance    , string $virtual_path    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-remove-server.php","title":"iis_remove_server","description":"iis_remove_server   (PECL iisfunc SVN)iis_remove_server \u2014 Removes the virtual web server indicated by ServerInstance        Description       int iis_remove_server     ( int $server_instance    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-app-settings.php","title":"iis_set_app_settings","description":"iis_set_app_settings   (PECL iisfunc SVN)iis_set_app_settings \u2014 Creates application scope for a virtual directory        Description       int iis_set_app_settings     ( int $server_instance    , string $virtual_path    , string $application_scope    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-service-state.php","title":"iis_get_service_state","description":"iis_get_service_state   (PECL iisfunc SVN)iis_get_service_state \u2014 Returns the state for the service defined by ServiceId        Description       int iis_get_service_state     ( string $service_id    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-dir-security.php","title":"iis_set_dir_security","description":"iis_set_dir_security   (PECL iisfunc SVN)iis_set_dir_security \u2014 Sets Directory Security        Description       int iis_set_dir_security     ( int $server_instance    , string $virtual_path    , int $directory_flags    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-script-map.php","title":"iis_set_script_map","description":"iis_set_script_map   (PECL iisfunc SVN)iis_set_script_map \u2014 Sets script mapping on a virtual directory        Description       int iis_set_script_map     ( int $server_instance    , string $virtual_path    , string $script_extension    , string $engine_path    , int $allow_scripting    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-start-server.php","title":"iis_start_server","description":"iis_start_server   (PECL iisfunc SVN)iis_start_server \u2014 Starts the virtual web server        Description       int iis_start_server     ( int $server_instance    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-start-service.php","title":"iis_start_service","description":"iis_start_service   (PECL iisfunc SVN)iis_start_service \u2014 Starts the service defined by ServiceId        Description       int iis_start_service     ( string $service_id    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-server-rights.php","title":"iis_set_server_rights","description":"iis_set_server_rights   (PECL iisfunc SVN)iis_set_server_rights \u2014 Sets server rights        Description       int iis_set_server_rights     ( int $server_instance    , string $virtual_path    , int $directory_flags    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-stop-service.php","title":"iis_stop_service","description":"iis_stop_service   (PECL iisfunc SVN)iis_stop_service \u2014 Stops the service defined by ServiceId        Description       int iis_stop_service     ( string $service_id    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-construct.php","title":"HttpDeflateStream::__construct","description":"HttpDeflateStream::__construct   (PECL pecl_http >= 0.21.0)HttpDeflateStream::__construct \u2014 HttpDeflateStream class constructor        Description       public    void HttpDeflateStream::__construct     ([ int $flags = 0   ] )        Creates a new HttpDeflateStream object instance.          See the deflate stream constants table for possible flags.           Parameters                    flags                      initialization flags                                                 See Also             HttpDeflateStream::factory() - HttpDeflateStream class factory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-factory.php","title":"HttpDeflateStream::factory","description":"HttpDeflateStream::factory   (PECL pecl_http >= 1.4.0)HttpDeflateStream::factory \u2014 HttpDeflateStream class factory        Description       public    HttpDeflateStream     HttpDeflateStream::factory     ([ int $flags = 0    [, string $class_name = \"HttpDeflateStream\"   ]] )        Creates a new HttpDeflateStream object instance.          See the deflate stream constants table for possible flags.           Parameters                    flags                      initialization flags                                class_name                      name of a subclass of HttpDeflateStream                                                 See Also             HttpDeflateStream::__construct() - HttpDeflateStream class constructor"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-finish.php","title":"HttpDeflateStream::finish","description":"HttpDeflateStream::finish   (PECL pecl_http >= 0.21.0)HttpDeflateStream::finish \u2014 Finalize deflate stream        Description       public    string HttpDeflateStream::finish     ([ string $data   ] )        Finalizes the deflate stream. The deflate stream can be reused after finalizing.           Parameters                    data                      data to deflate                                    Return Values       Returns the final part of deflated data."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-flush.php","title":"HttpDeflateStream::flush","description":"HttpDeflateStream::flush   (PECL pecl_http >= 0.21.0)HttpDeflateStream::flush \u2014 Flush deflate stream        Description       public    string HttpDeflateStream::flush     ([ string $data   ] )        Flushes the deflate stream.           Parameters                    data                      more data to deflate                                    Return Values       Returns some deflated data as string on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-construct.php","title":"HttpInflateStream::__construct","description":"HttpInflateStream::__construct   (PECL pecl_http >= 1.0.0)HttpInflateStream::__construct \u2014 HttpInflateStream class constructor        Description       public    void HttpInflateStream::__construct     ([ int $flags = 0   ] )        Creates a new HttpInflateStream object instance.          See the inflate constants table for possible flags.           Parameters                    flags                      initialization flags                                                 See Also             HttpInflateStream::factory() - HttpInflateStream class factory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-update.php","title":"HttpDeflateStream::update","description":"HttpDeflateStream::update   (PECL pecl_http >= 0.21.0)HttpDeflateStream::update \u2014 Update deflate stream        Description       public    string HttpDeflateStream::update     ( string $data    )        Passes more data through the deflate stream.           Parameters                    data                      data to deflate                                    Return Values       Returns deflated data on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-stop-server.php","title":"iis_stop_server","description":"iis_stop_server   (PECL iisfunc SVN)iis_stop_server \u2014 Stops the virtual web server        Description       int iis_stop_server     ( int $server_instance    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-factory.php","title":"HttpInflateStream::factory","description":"HttpInflateStream::factory   (PECL pecl_http >= 1.4.0)HttpInflateStream::factory \u2014 HttpInflateStream class factory        Description       public    HttpInflateStream     HttpInflateStream::factory     ([ int $flags = 0    [, string $class_name = \"HttpInflateStream\"   ]] )        Creates a new HttpInflateStream object instance.          See the inflate constants table for possible flags.           Parameters                    flags                      initialization flags                                class_name                      name of a subclass of HttpInflateStream                                                 See Also             HttpInflateStream::__construct() - HttpInflateStream class constructor"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-finish.php","title":"HttpInflateStream::finish","description":"HttpInflateStream::finish   (PECL pecl_http >= 0.21.0)HttpInflateStream::finish \u2014 Finalize inflate stream        Description       public    string HttpInflateStream::finish     ([ string $data   ] )        Finalizes the inflate stream. The inflate stream can be reused after finalizing.           Parameters                    data                      data to inflate                                    Return Values       Returns the final part of inflated data."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-flush.php","title":"HttpInflateStream::flush","description":"HttpInflateStream::flush   (PECL pecl_http >= 0.21.0)HttpInflateStream::flush \u2014 Flush inflate stream        Description       public    string HttpInflateStream::flush     ([ string $data   ] )        Flushes the inflate stream.      Note:          Flushing usually has no effect on inflate streams.               Parameters                    data                      more data to inflate                                    Return Values       Returns some inflated data as string on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-update.php","title":"HttpInflateStream::update","description":"HttpInflateStream::update   (PECL pecl_http >= 0.21.0)HttpInflateStream::update \u2014 Update inflate stream        Description       public    string HttpInflateStream::update     ( string $data    )        Passes more data through the inflate stream.           Parameters                    data                      data to inflate                                    Return Values       Returns inflated data on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-addheaders.php","title":"HttpMessage::addHeaders","description":"HttpMessage::addHeaders   (PECL pecl_http >= 0.10.0)HttpMessage::addHeaders \u2014 Add headers        Description       public    void HttpMessage::addHeaders     ( array $headers    [, bool $append = false   ] )         Add headers. If append is true, headers with the same name will be separated, else overwritten.            Parameters                    headers                      associative array containing the additional HTTP headers to add to the messages existing headers                                append                      if true, and a header with the same name of one to add exists already, this respective        header will be converted to an array containing both header values, otherwise        it will be overwritten with the new header value                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-construct.php","title":"HttpMessage::__construct","description":"HttpMessage::__construct   (PECL pecl_http >= 0.10.0)HttpMessage::__construct \u2014 HttpMessage constructor        Description       public    void HttpMessage::__construct     ([ string $message   ] )         Instantiate a new HttpMessage object.          The constructed object will actually represent the last message of the passed string. If there were    prior messages, those can be accessed by HttpMessage::getParentMessage().            Parameters                    message                      a single or several consecutive HTTP messages                                     Errors\/Exceptions       Throws HttpMalformedHeaderException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-detach.php","title":"HttpMessage::detach","description":"HttpMessage::detach   (PECL pecl_http >= 0.22.0)HttpMessage::detach \u2014 Detach HttpMessage        Description       public    HttpMessage HttpMessage::detach     ( void    )         Returns a clone of an HttpMessage object detached from any parent messages.            Parameters              Return Values       Returns detached HttpMessage object copy."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-factory.php","title":"HttpMessage::factory","description":"HttpMessage::factory   (PECL pecl_http >= 1.4.0)HttpMessage::factory \u2014 Create HttpMessage from string        Description       static public    HttpMessage HttpMessage::factory     ([ string $raw_message    [, string $class_name = \"HttpMessage\"   ]] )         Create an HttpMessage object from a string.            Parameters                    raw_message                      a single or several consecutive HTTP messages                                class_name                      a class extending HttpMessage                                    Return Values       Returns an HttpMessage object on success or NULL on failure.            Errors\/Exceptions       Throws HttpMalformedHeadersException.                    See Also            HttpMessage::fromEnv() - Create HttpMessage from environment."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-fromenv.php","title":"HttpMessage::fromEnv","description":"HttpMessage::fromEnv   (PECL pecl_http >= 1.5.0)HttpMessage::fromEnv \u2014 Create HttpMessage from environment        Description       static public    HttpMessage HttpMessage::fromEnv     ( int $message_type    [, string $class_name = \"HttpMessage\"   ] )         Create an HttpMessage object from script environment.            Parameters                    message_type                      The message type. See HttpMessage type constants.                                class_name                      a class extending HttpMessage                                    Return Values       Returns an HttpMessage object on success or NULL on failure.                       See Also            HttpMessage::factory() - Create HttpMessage from string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-fromstring.php","title":"HttpMessage::fromString","description":"HttpMessage::fromString   (PECL pecl_http 0.10.0-1.3.3)HttpMessage::fromString \u2014 Create HttpMessage from string        Description       static public    HttpMessage HttpMessage::fromString     ([ string $raw_message    [, string $class_name = \"HttpMessage\"   ]] )         Create an HttpMessage object from a string.      This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future.          Parameters                    raw_message                      a single or several consecutive HTTP messages                                class_name                      a class extending HttpMessage                                    Return Values       Returns an HttpMessage object on success or NULL on failure.            Errors\/Exceptions       Throws HttpMalformedHeadersException.                     See Also            HttpMessage::factory() - Create HttpMessage from string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getbody.php","title":"HttpMessage::getBody","description":"HttpMessage::getBody   (PECL pecl_http >= 0.10.0)HttpMessage::getBody \u2014 Get message body        Description       public    string HttpMessage::getBody     ( void    )         Get the body of the parsed HttpMessage.            Return Values       Returns the message body as string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getheaders.php","title":"HttpMessage::getHeaders","description":"HttpMessage::getHeaders   (PECL pecl_http >= 0.10.0)HttpMessage::getHeaders \u2014 Get message headers        Description       public    array HttpMessage::getHeaders     ( void    )         Get message headers.            Return Values       Returns an associative array containing the messages HTTP headers."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-gethttpversion.php","title":"HttpMessage::getHttpVersion","description":"HttpMessage::getHttpVersion   (PECL pecl_http >= 0.10.0)HttpMessage::getHttpVersion \u2014 Get HTTP version        Description       public    string HttpMessage::getHttpVersion     ( void    )         Get the HTTP Protocol Version of the Message.            Return Values       Returns the HTTP protocol version as string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getheader.php","title":"HttpMessage::getHeader","description":"HttpMessage::getHeader   (PECL pecl_http >= 1.1.0)HttpMessage::getHeader \u2014 Get header        Description       public    string HttpMessage::getHeader     ( string $header    )         Get message header.            Parameters                    header                      header name                                    Return Values       Returns the header value on success or NULL if the header does not exist."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getparentmessage.php","title":"HttpMessage::getParentMessage","description":"HttpMessage::getParentMessage   (PECL pecl_http >= 0.10.0)HttpMessage::getParentMessage \u2014 Get parent message        Description       public    HttpMessage HttpMessage::getParentMessage     ( void    )         Get parent Message.            Return Values       Returns the parent HttpMessage object.            Errors\/Exceptions       Throws HttpRuntimeException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getrequestmethod.php","title":"HttpMessage::getRequestMethod","description":"HttpMessage::getRequestMethod   (PECL pecl_http >= 0.10.0)HttpMessage::getRequestMethod \u2014 Get request method        Description       public    string HttpMessage::getRequestMethod     ( void    )         Get the Request Method of the Message.            Return Values       Returns the request method name on success, or FALSE if the message is    not of type HttpMessage::TYPE_REQUEST."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getrequesturl.php","title":"HttpMessage::getRequestUrl","description":"HttpMessage::getRequestUrl   (PECL pecl_http >= 0.21.0)HttpMessage::getRequestUrl \u2014 Get request URL        Description       public    string HttpMessage::getRequestUrl     ( void    )         Get the Request URL of the Message.            Parameters              Return Values       Returns the request URL as string on success, or FALSE if the message    is not of type HttpMessage::TYPE_REQUEST."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getresponsecode.php","title":"HttpMessage::getResponseCode","description":"HttpMessage::getResponseCode   (PECL pecl_http >= 0.10.0)HttpMessage::getResponseCode \u2014 Get response code        Description       public    int HttpMessage::getResponseCode     ( void    )         Get the Response Code of the Message.            Return Values       Returns the HTTP response code if the message is of type HttpMessage::TYPE_RESPONSE, else FALSE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getresponsestatus.php","title":"HttpMessage::getResponseStatus","description":"HttpMessage::getResponseStatus   (PECL pecl_http >= 0.23.0)HttpMessage::getResponseStatus \u2014 Get response status        Description       public    string HttpMessage::getResponseStatus     ( void    )         Get the Response Status of the message (i.e. the string following the response code).            Return Values       Returns the HTTP response status string if the message is of type     HttpMessage::TYPE_RESPONSE, else FALSE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-guesscontenttype.php","title":"HttpMessage::guessContentType","description":"HttpMessage::guessContentType   (PECL pecl_http >= 1.0.0)HttpMessage::guessContentType \u2014 Guess content type        Description       public    string HttpMessage::guessContentType     ( string $magic_file    [, int $magic_mode = MAGIC_MIME   ] )         Attempts to guess the content type of the message body through libmagic.            Parameters                    magic_file                      the magic.mime database to use                                magic_mode                      flags for libmagic                                    Return Values       Returns the guessed content type on success or FALSE on failure.            Errors\/Exceptions       Throws HttpRuntimeException, HttpInvalidParamException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-gettype.php","title":"HttpMessage::getType","description":"HttpMessage::getType   (PECL pecl_http >= 0.10.0)HttpMessage::getType \u2014 Get message type        Description       public    int HttpMessage::getType     ( void    )         Get Message Type.    Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.            Return Values       Returns the HttpMessage::TYPE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-prepend.php","title":"HttpMessage::prepend","description":"HttpMessage::prepend   (PECL pecl_http >= 0.22.0)HttpMessage::prepend \u2014 Prepend message(s)        Description       public    void HttpMessage::prepend     ( HttpMessage $message    [, bool $top = true   ] )         Prepends message(s) to the HTTP message.            Parameters                    message                      HttpMessage object to prepend                                top                      whether to prepend to the top most or right this message                                     Errors\/Exceptions       Throws HttpInvalidParamException if the message is located within the same message chain."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-reverse.php","title":"HttpMessage::reverse","description":"HttpMessage::reverse   (PECL pecl_http >= 0.23.0)HttpMessage::reverse \u2014 Reverse message chain        Description       public    HttpMessage HttpMessage::reverse     ( void    )         Reorders the message chain in reverse order.            Return Values       Returns the most parent HttpMessage object."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setheaders.php","title":"HttpMessage::setHeaders","description":"HttpMessage::setHeaders   (PECL pecl_http >= 0.10.0)HttpMessage::setHeaders \u2014 Set headers        Description       public    void HttpMessage::setHeaders     ( array $headers    )         Sets new headers.            Parameters                    headers                      associative array containing the new HTTP headers, which will replace all previous HTTP headers of the message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-send.php","title":"HttpMessage::send","description":"HttpMessage::send   (PECL pecl_http >= 0.10.0)HttpMessage::send \u2014 Send message        Description       public    bool HttpMessage::send     ( void    )         Send the Message according to its type as Response or Request.          This provides limited functionality compared to HttpRequest and HttpResponse.            Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setbody.php","title":"HttpMessage::setBody","description":"HttpMessage::setBody   (PECL pecl_http >= 0.14.0)HttpMessage::setBody \u2014 Set message body        Description       public    void HttpMessage::setBody     ( string $body    )         Set the body of the HttpMessage.      Note:          Don&#039;t forget to update any headers accordingly.                 Parameters                    body                      the new body of the message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setrequestmethod.php","title":"HttpMessage::setRequestMethod","description":"HttpMessage::setRequestMethod   (PECL pecl_http >= 0.10.0)HttpMessage::setRequestMethod \u2014 Set request method        Description       public    bool HttpMessage::setRequestMethod     ( string $method    )         Set the Request Method of the HTTP Message.            Parameters                    method                      the request method name                                    Return Values       Returns TRUE on success, or FALSE if the message is not of type    HttpMessage::TYPE_REQUEST or an invalid request method was supplied."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-sethttpversion.php","title":"HttpMessage::setHttpVersion","description":"HttpMessage::setHttpVersion   (PECL pecl_http >= 0.10.0)HttpMessage::setHttpVersion \u2014 Set HTTP version        Description       public    bool HttpMessage::setHttpVersion     ( string $version    )         Set the HTTP Protocol version of the Message.            Parameters                    version                      the HTTP protocol version                                    Return Values       Returns TRUE on success, or FALSE if supplied version is out of range (1.0\/1.1)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setrequesturl.php","title":"HttpMessage::setRequestUrl","description":"HttpMessage::setRequestUrl   (PECL pecl_http >= 0.21.0)HttpMessage::setRequestUrl \u2014 Set request URL        Description       public    bool HttpMessage::setRequestUrl     ( string $url    )         Set the Request URL of the HTTP Message.            Parameters                    url                      the request URL                                    Return Values       Returns TRUE on success, or FALSE if the message is not of type    HttpMessage::TYPE_REQUEST or supplied URL was empty."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setresponsecode.php","title":"HttpMessage::setResponseCode","description":"HttpMessage::setResponseCode   (PECL pecl_http >= 0.10.0)HttpMessage::setResponseCode \u2014 Set response code        Description       public    bool HttpMessage::setResponseCode     ( int $code    )         Set the response code of an HTTP Response Message.            Parameters                    code                      HTTP response code                                    Return Values       Returns TRUE on success, or FALSE if the message is not of type    HttpMessage::TYPE_RESPONSE or the response code is out of range (100-510)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setresponsestatus.php","title":"HttpMessage::setResponseStatus","description":"HttpMessage::setResponseStatus   (PECL pecl_http >= 0.23.0)HttpMessage::setResponseStatus \u2014 Set response status        Description       public    bool HttpMessage::setResponseStatus     ( string $status    )         Set the Response Status of the HTTP message (i.e. the string following the response code).            Parameters                    status                      the response status text                                    Return Values       Returns TRUE on success or FALSE if the message is not of type    HttpMessage::TYPE_RESPONSE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-settype.php","title":"HttpMessage::setType","description":"HttpMessage::setType   (PECL pecl_http >= 0.10.0)HttpMessage::setType \u2014 Set message type        Description       public    void HttpMessage::setType     ( int $type    )         Set Message Type.    Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.            Parameters                    type                      the HttpMessage::TYPE"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-tomessagetypeobject.php","title":"HttpMessage::toMessageTypeObject","description":"HttpMessage::toMessageTypeObject   (PECL pecl_http >= 0.22.0)HttpMessage::toMessageTypeObject \u2014 Create HTTP object regarding message type        Description       public    HttpRequest|HttpResponse HttpMessage::toMessageTypeObject     ( void    )         Creates an object regarding to the type of the message.            Parameters              Return Values       Returns either an HttpRequest or HttpResponse object on success, or NULL on failure.            Errors\/Exceptions       Throws HttpRuntimeException, HttpMessageTypeException, HttpHeaderException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-tostring.php","title":"HttpMessage::toString","description":"HttpMessage::toString   (PECL pecl_http >= 0.10.0)HttpMessage::toString \u2014 Get string representation        Description       public    string HttpMessage::toString     ([ bool $include_parent = false   ] )         Get the string representation of the Message.            Parameters                    include_parent                      specifies whether the returned string should also contain any parent messages                                    Return Values       Returns the message as string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-construct.php","title":"HttpQueryString::__construct","description":"HttpQueryString::__construct   (PECL pecl_http >= 0.22.0)HttpQueryString::__construct \u2014 HttpQueryString constructor        Description       final public    void HttpQueryString::__construct     ([ bool $global = true    [, mixed $add   ]] )         Creates a new HttpQueryString object instance.          Operates on and modifies $_GET and    $_SERVER['QUERY_STRING'] if global is TRUE.            Parameters                    global                      whether to operate on $_GET and        $_SERVER['QUERY_STRING']                                add                      additional\/initial query string parameters                                     Errors\/Exceptions       Throws HttpRuntimeException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-get.php","title":"HttpQueryString::get","description":"HttpQueryString::get   (PECL pecl_http >= 0.22.0)HttpQueryString::get \u2014 Get (part of) query string        Description       public    mixed HttpQueryString::get     ([ string $key    [, mixed $type = 0    [, mixed $defval = NULL    [, bool $delete = false   ]]]] )         Get (part of) the query string.          The type parameter is either one of the HttpQueryString::TYPE_* constants or a type abbreviation like    \"b\" for bool, \"i\" for int, \"f\" for float, \"s\" for string, \"a\"     for array and \"o\" for a stdClass object.            Parameters                    key                      key of the query string param to retrieve                                type                      which variable type to enforce                                defval                      default value if key does not exist                                delete                      whether to remove the key\/value pair from the query string                                    Return Values       Returns the value of the query string param or the whole query string if no key was specified on success or defval if key does not exist."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-set.php","title":"HttpQueryString::set","description":"HttpQueryString::set   (PECL pecl_http >= 0.22.0)HttpQueryString::set \u2014 Set query string params        Description       public    string HttpQueryString::set     ( mixed $params    )         Set query string entry\/entries. NULL values will unset the variable.            Parameters                    params                      query string params to add                                    Return Values       Returns the current query string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-mod.php","title":"HttpQueryString::mod","description":"HttpQueryString::mod   (PECL pecl_http >= 1.1.0)HttpQueryString::mod \u2014 Modifiy query string copy        Description       public    HttpQueryString HttpQueryString::mod     ( mixed $params    )         Copies the query string object and sets provided params at the clone.            Parameters                    params                      query string params to add                                    Return Values       Returns a new HttpQueryString object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-singleton.php","title":"HttpQueryString::singleton","description":"HttpQueryString::singleton   (PECL pecl_http >= 0.25.0)HttpQueryString::singleton \u2014 HttpQueryString singleton        Description       static public    HttpQueryString HttpQueryString::singleton     ([ bool $global = true   ] )         Get a single instance (differentiates between the global setting).            Parameters                    global                      whether to operate on $_GET and        $_SERVER['QUERY_STRING']                                    Return Values       Returns always the same HttpQueryString instance regarding the global setting.            Errors\/Exceptions       Throws HttpRuntimeException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-toarray.php","title":"HttpQueryString::toArray","description":"HttpQueryString::toArray   (PECL pecl_http >= 0.22.0)HttpQueryString::toArray \u2014 Get query string as array        Description       public    array HttpQueryString::toArray     ( void    )         Get the query string represented as associative array.            Return Values       Returns the array representation of the query string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-tostring.php","title":"HttpQueryString::toString","description":"HttpQueryString::toString   (PECL pecl_http >= 0.22.0)HttpQueryString::toString \u2014 Get query string        Description       public    string HttpQueryString::toString     ( void    )         Get the query string.            Parameters              Return Values       Returns the string representation of the query string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-xlate.php","title":"HttpQueryString::xlate","description":"HttpQueryString::xlate   (PECL pecl_http >= 0.25.0)HttpQueryString::xlate \u2014 Change query strings charset        Description       public    bool HttpQueryString::xlate     ( string $ie    , string $oe    )         Converts the query string from the source encoding ie to the target encoding oe.      Warning         Don&#039;t use any character set that can contain NUL bytes like UTF-16.          Note:          This method requires ext\/iconv to be enabled and loaded.                Parameters                    ie                      input encoding                                oe                      output encoding                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addcookies.php","title":"HttpRequest::addCookies","description":"HttpRequest::addCookies   (PECL pecl_http >= 0.10.0)HttpRequest::addCookies \u2014 Add cookies        Description       public    bool HttpRequest::addCookies     ( array $cookies    )         Add custom cookies.      Note: The request option encodecookies controls    whether the cookie values should be urlencode()d.   Note: Affects any request method.         Parameters                    cookies                      an associative array containing any cookie name\/value pairs to add                                    Return Values       Returns TRUE on success or FALSE on failure.                    Examples            Example #1 A HttpRequest::addCookies() example       <?php$r\u00a0=\u00a0new\u00a0HttpRequest;$r->addCookies(\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"cookie_name\"\u00a0=>\u00a0\"cookie\u00a0value\",\u00a0\u00a0\u00a0\u00a0));?>                        See Also            HttpRequest::setCookies() - Set cookies"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addpostfields.php","title":"HttpRequest::addPostFields","description":"HttpRequest::addPostFields   (PECL pecl_http >= 0.10.0)HttpRequest::addPostFields \u2014 Add post fields        Description       public    bool HttpRequest::addPostFields     ( array $post_data    )         Adds POST data entries, leaving previously set unchanged, unless a    post entry with the same name already exists.          Affects only POST and custom requests.            Parameters                    post_data                      an associative array as parameter containing the post fields                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addputdata.php","title":"HttpRequest::addPutData","description":"HttpRequest::addPutData   (PECL pecl_http >= 0.25.0)HttpRequest::addPutData \u2014 Add put data        Description       public    bool HttpRequest::addPutData     ( string $put_data    )         Add PUT data, leaving previously set PUT data unchanged.          Affects only PUT requests.            Parameters                    put_data                      the data to concatenate                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addheaders.php","title":"HttpRequest::addHeaders","description":"HttpRequest::addHeaders   (PECL pecl_http >= 0.10.0)HttpRequest::addHeaders \u2014 Add headers        Description       public    bool HttpRequest::addHeaders     ( array $headers    )         Add request header name\/value pairs.            Parameters                    headers                      an associative array as parameter containing additional header name\/value pairs                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addpostfile.php","title":"HttpRequest::addPostFile","description":"HttpRequest::addPostFile   (PECL pecl_http >= 0.10.0)HttpRequest::addPostFile \u2014 Add post file        Description       public    bool HttpRequest::addPostFile     ( string $name    , string $file    [, string $content_type = \"application\/x-octetstream\"   ] )         Add a file to the POST request, leaving previously set files unchanged.          Affects only POST and custom requests. Cannot be used with raw post data.            Parameters                    name                      the form element name                                file                      the path to the file                                content_type                      the content type of the file                                    Return Values       Returns TRUE on success, or FALSE if the content type seems not to contain a     primary and a secondary content type part."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addquerydata.php","title":"HttpRequest::addQueryData","description":"HttpRequest::addQueryData   (PECL pecl_http >= 0.10.0)HttpRequest::addQueryData \u2014 Add query data        Description       public    bool HttpRequest::addQueryData     ( array $query_params    )         Add parameters to the query parameter list, leaving previously set unchanged.          Affects any request type.            Parameters                    query_params                      an associative array as parameter containing the query fields to add                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addssloptions.php","title":"HttpRequest::addSslOptions","description":"HttpRequest::addSslOptions   (PECL pecl_http >= 0.12.0)HttpRequest::addSslOptions \u2014 Add ssl options        Description       public    bool HttpRequest::addSslOptions     ( array $options    )         Set additional SSL options.            Parameters                    options                      an associative array as parameter containing additional SSL specific options                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-clearhistory.php","title":"HttpRequest::clearHistory","description":"HttpRequest::clearHistory   (PECL pecl_http >= 0.15.0)HttpRequest::clearHistory \u2014 Clear history        Description       public    void HttpRequest::clearHistory     ( void    )         Clears all history messages.      Note:          History is only logged if recordHistory was enabled."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addrawpostdata.php","title":"HttpRequest::addRawPostData","description":"HttpRequest::addRawPostData   (PECL pecl_http 0.14.0-1.4.1)HttpRequest::addRawPostData \u2014 Add raw post data        Description       public    bool HttpRequest::addRawPostData     ( string $raw_post_data    )         Add raw post data, leaving previously set raw post data unchanged.          Affects only POST and custom requests.            Parameters                    raw_post_data                      the raw post data to concatenate                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-construct.php","title":"HttpRequest::__construct","description":"HttpRequest::__construct   (PECL pecl_http >= 0.10.0)HttpRequest::__construct \u2014 HttpRequest constructor        Description       public    void HttpRequest::__construct     ([ string $url    [, int $request_method = HTTP_METH_GET    [, array $options   ]]] )         Instantiate a new HttpRequest object.            Parameters                    url                      the target request url                                request_method                      the request method to use                                options                      an associative array with request options                                     Errors\/Exceptions       Throws HttpException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-enablecookies.php","title":"HttpRequest::enableCookies","description":"HttpRequest::enableCookies   (PECL pecl_http >= 1.0.0)HttpRequest::enableCookies \u2014 Enable cookies        Description       public    bool HttpRequest::enableCookies     ( void    )         Enable automatic sending of received cookies.      Note:          Note that custom set cookies will be sent anyway.                Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getcontenttype.php","title":"HttpRequest::getContentType","description":"HttpRequest::getContentType   (PECL pecl_http >= 0.10.0)HttpRequest::getContentType \u2014 Get content type        Description       public    string HttpRequest::getContentType     ( void    )         Get the previously set content type.            Return Values       Returns the previously set content type as string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getheaders.php","title":"HttpRequest::getHeaders","description":"HttpRequest::getHeaders   (PECL pecl_http >= 0.10.0)HttpRequest::getHeaders \u2014 Get headers        Description       public    array HttpRequest::getHeaders     ( void    )         Get previously set request headers.            Return Values       Returns an associative array containing all currently set headers."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getcookies.php","title":"HttpRequest::getCookies","description":"HttpRequest::getCookies   (PECL pecl_http >= 0.10.0)HttpRequest::getCookies \u2014 Get cookies        Description       public    array HttpRequest::getCookies     ( void    )         Get previously set cookies.            Return Values       Returns an associative array containing any previously set cookies."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getmethod.php","title":"HttpRequest::getMethod","description":"HttpRequest::getMethod   (PECL pecl_http >= 0.10.0)HttpRequest::getMethod \u2014 Get method        Description       public    int HttpRequest::getMethod     ( void    )         Get the previously set request method.            Return Values       Returns the currently set request method."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-gethistory.php","title":"HttpRequest::getHistory","description":"HttpRequest::getHistory   (PECL pecl_http >= 0.15.0)HttpRequest::getHistory \u2014 Get history        Description       public    HttpMessage HttpRequest::getHistory     ( void    )         Get all sent requests and received responses as an HttpMessage object.          If you want to record history, set the instance variable    HttpRequest::recordHistory to TRUE.          The returned object references the last received response, use HttpMessage::getParentMessage()     to access the data of previously sent requests and received responses.            Return Values       Returns an HttpMessage object representing the complete request\/response history.            Errors\/Exceptions       Throws HttpRuntimeException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getoptions.php","title":"HttpRequest::getOptions","description":"HttpRequest::getOptions   (PECL pecl_http >= 0.10.0)HttpRequest::getOptions \u2014 Get options        Description       public    array HttpRequest::getOptions     ( void    )         Get currently set options.            Return Values       Returns an associative array containing currently set options."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getpostfields.php","title":"HttpRequest::getPostFields","description":"HttpRequest::getPostFields   (PECL pecl_http >= 0.10.0)HttpRequest::getPostFields \u2014 Get post fields        Description       public    array HttpRequest::getPostFields     ( void    )         Get previously set POST data.            Parameters              Return Values       Returns the currently set post fields as associative array."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getpostfiles.php","title":"HttpRequest::getPostFiles","description":"HttpRequest::getPostFiles   (PECL pecl_http >= 0.10.0)HttpRequest::getPostFiles \u2014 Get post files        Description       public    array HttpRequest::getPostFiles     ( void    )         Get all previously added POST files.            Return Values       Returns an array containing currently set post files."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getputdata.php","title":"HttpRequest::getPutData","description":"HttpRequest::getPutData   (PECL pecl_http >= 0.25.0)HttpRequest::getPutData \u2014 Get put data        Description       public    string HttpRequest::getPutData     ( void    )         Get previously set PUT data.            Return Values       Returns a string containing the currently set PUT data."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getputfile.php","title":"HttpRequest::getPutFile","description":"HttpRequest::getPutFile   (PECL pecl_http >= 0.10.0)HttpRequest::getPutFile \u2014 Get put file        Description       public    string HttpRequest::getPutFile     ( void    )         Get previously set put file.            Return Values       Returns a string containing the path to the currently set put file."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getquerydata.php","title":"HttpRequest::getQueryData","description":"HttpRequest::getQueryData   (PECL pecl_http >= 0.10.0)HttpRequest::getQueryData \u2014 Get query data        Description       public    string HttpRequest::getQueryData     ( void    )         Get the current query data in form of an urlencoded query string.            Return Values       Returns a string containing the urlencoded query."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrawpostdata.php","title":"HttpRequest::getRawPostData","description":"HttpRequest::getRawPostData   (PECL pecl_http 0.14.0-1.4.1)HttpRequest::getRawPostData \u2014 Get raw post data        Description       public    string HttpRequest::getRawPostData     ( void    )         Get previously set raw post data.            Parameters              Return Values       Returns a string containing the currently set raw post data."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrawrequestmessage.php","title":"HttpRequest::getRawRequestMessage","description":"HttpRequest::getRawRequestMessage   (PECL pecl_http >= 0.21.0)HttpRequest::getRawRequestMessage \u2014 Get raw request message        Description       public    string HttpRequest::getRawRequestMessage     ( void    )         Get sent HTTP message.            Parameters              Return Values       Returns an HttpMessage in a form of a string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrawresponsemessage.php","title":"HttpRequest::getRawResponseMessage","description":"HttpRequest::getRawResponseMessage   (PECL pecl_http >= 0.21.0)HttpRequest::getRawResponseMessage \u2014 Get raw response message        Description       public    string HttpRequest::getRawResponseMessage     ( void    )         Get the entire HTTP response.            Parameters              Return Values       Returns the complete web server response, including the headers in a form of a string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsebody.php","title":"HttpRequest::getResponseBody","description":"HttpRequest::getResponseBody   (PECL pecl_http >= 0.10.0)HttpRequest::getResponseBody \u2014 Get response body        Description       public    string HttpRequest::getResponseBody     ( void    )         Get the response body after the request has been sent.          If redirects were allowed and several responses were received, the data     references the last received response.            Parameters              Return Values       Returns a string containing the response body."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsecookies.php","title":"HttpRequest::getResponseCookies","description":"HttpRequest::getResponseCookies   (PECL pecl_http >= 0.23.0)HttpRequest::getResponseCookies \u2014 Get response cookie(s)        Description       public    array HttpRequest::getResponseCookies     ([ int $flags = 0    [, array $allowed_extras   ]] )         Get response cookie(s) after the request has been sent.          If redirects were allowed and several responses were received, the data     references the last received response.            Parameters                    flags                      http_parse_cookie() flags                                allowed_extras                      allowed keys treated as extra information instead of cookie names                                    Return Values       Returns an array of stdClass objects like http_parse_cookie() would return."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsecode.php","title":"HttpRequest::getResponseCode","description":"HttpRequest::getResponseCode   (PECL pecl_http >= 0.10.0)HttpRequest::getResponseCode \u2014 Get response code        Description       public    int HttpRequest::getResponseCode     ( void    )         Get the response code after the request has been sent.          If redirects were allowed and several responses were received, the data     references the last received response.            Return Values       Returns an int representing the response code."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrequestmessage.php","title":"HttpRequest::getRequestMessage","description":"HttpRequest::getRequestMessage   (PECL pecl_http >= 0.11.0)HttpRequest::getRequestMessage \u2014 Get request message        Description       public    HttpMessage HttpRequest::getRequestMessage     ( void    )         Get sent HTTP message.          If redirects were allowed and several responses were received, the data     references the last received response. Use HttpMessage::getParentMessage()    to access the data of previously sent requests within this request cycle.      Note:          Note that the internal request message is immutable, that means that the     request message received through HttpRequest::getRequestMessage() will     always look the same for the same request, regardless of any changes you     may have made to the returned object.                Return Values       Returns an HttpMessage object representing the sent request.            Errors\/Exceptions       Throws HttpMalformedHeadersException, HttpEncodingException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsedata.php","title":"HttpRequest::getResponseData","description":"HttpRequest::getResponseData   (PECL pecl_http >= 0.10.0)HttpRequest::getResponseData \u2014 Get response data        Description       public    array HttpRequest::getResponseData     ( void    )         * Get all response data after the request has been sent.          If redirects were allowed and several responses were received, the data     references the last received response.            Return Values       Returns an associative array with the key \"headers\" containing an associative    array holding all response headers, as well as the key \"body\" containing a    string with the response body."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponseinfo.php","title":"HttpRequest::getResponseInfo","description":"HttpRequest::getResponseInfo   (PECL pecl_http >= 0.10.0)HttpRequest::getResponseInfo \u2014 Get response info        Description       public    mixed HttpRequest::getResponseInfo     ([ string $name   ] )         Get response info after the request has been sent.          See http_get() for a full list of returned info.          If redirects were allowed and several responses were received, the data     references the last received response.            Parameters                    name                      the info to read; if empty or omitted, an associative array containing        all available info will be returned                                    Return Values       Returns either a scalar containing the value of the info matching name if    requested, FALSE on failure, or an associative array containing all    available info."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponseheader.php","title":"HttpRequest::getResponseHeader","description":"HttpRequest::getResponseHeader   (PECL pecl_http >= 0.10.0)HttpRequest::getResponseHeader \u2014 Get response header(s)        Description       public    mixed HttpRequest::getResponseHeader     ([ string $name   ] )         Get response header(s) after the request has been sent.          If redirects were allowed and several responses were received, the data     references the last received response.            Parameters                    name                      header to read; if empty, all response headers will be returned                                    Return Values       Returns either a string with the value of the header matching name if requested,     FALSE on failure, or an associative array containing all response headers."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsestatus.php","title":"HttpRequest::getResponseStatus","description":"HttpRequest::getResponseStatus   (PECL pecl_http >= 0.23.0)HttpRequest::getResponseStatus \u2014 Get response status        Description       public    string HttpRequest::getResponseStatus     ( void    )         Get the response status (i.e. the string after the response code) after the message has been sent.            Return Values       Returns a string containing the response status text."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsemessage.php","title":"HttpRequest::getResponseMessage","description":"HttpRequest::getResponseMessage   (PECL pecl_http >= 0.10.0)HttpRequest::getResponseMessage \u2014 Get response message        Description       public    HttpMessage HttpRequest::getResponseMessage     ( void    )         Get the full response as HttpMessage object after the request has been sent.          If redirects were allowed and several responses were received, the data     references the last received response. Use HttpMessage::getParentMessage()    to access the data of previously received responses within this request    cycle.            Return Values       Returns an HttpMessage object of the response.            Errors\/Exceptions       Throws HttpException, HttpRuntimeException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getssloptions.php","title":"HttpRequest::getSslOptions","description":"HttpRequest::getSslOptions   (PECL pecl_http >= 0.10.0)HttpRequest::getSslOptions \u2014 Get ssl options        Description       public    array HttpRequest::getSslOptions     ( void    )         Get previously set SSL options.            Return Values       Returns an associative array containing any previously set SSL options."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-geturl.php","title":"HttpRequest::getUrl","description":"HttpRequest::getUrl   (PECL pecl_http >= 0.10.0)HttpRequest::getUrl \u2014 Get url        Description       public    string HttpRequest::getUrl     ( void    )         Get the previously set request URL.            Return Values       Returns the currently set request url as string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-resetcookies.php","title":"HttpRequest::resetCookies","description":"HttpRequest::resetCookies   (PECL pecl_http >= 1.0.0)HttpRequest::resetCookies \u2014 Reset cookies        Description       public    bool HttpRequest::resetCookies     ([ bool $session_only = false   ] )         Reset all automatically received\/sent cookies.      Note:          Note that custom set cookies are not affected.                Parameters                    session_only                      whether only session cookies should be reset (needs libcurl >= v7.15.4, else libcurl >= v7.14.1)                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setcontenttype.php","title":"HttpRequest::setContentType","description":"HttpRequest::setContentType   (PECL pecl_http >= 0.10.0)HttpRequest::setContentType \u2014 Set content type        Description       public    bool HttpRequest::setContentType     ( string $content_type    )         Set the content type the post request should have.            Parameters                    content_type                      the content type of the request (primary\/secondary)                                    Return Values       Returns TRUE on success, or FALSE if the content type does not seem to    contain a primary and a secondary part."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-send.php","title":"HttpRequest::send","description":"HttpRequest::send   (PECL pecl_http >= 0.10.0)HttpRequest::send \u2014 Send request        Description       public    HttpMessage HttpRequest::send     ( void    )         Send the HTTP request.      Note:          While an exception may be thrown, the transfer could have succeeded      at least partially, so you might want to check the return values of various     HttpRequest::getResponse*() methods.                Return Values       Returns the received response as HttpMessage object.            Errors\/Exceptions       Throws HttpRuntimeException, HttpRequestException, HttpMalformedHeaderException, HttpEncodingException.                 Examples            Example #1 GET example       <?php$r\u00a0=\u00a0new\u00a0HttpRequest('http:\/\/example.com\/feed.rss',\u00a0HttpRequest::METH_GET);$r->setOptions(array('lastmodified'\u00a0=>\u00a0filemtime('local.rss')));$r->addQueryData(array('category'\u00a0=>\u00a03));try\u00a0{\u00a0\u00a0\u00a0\u00a0$r->send();\u00a0\u00a0\u00a0\u00a0if\u00a0($r->getResponseCode()\u00a0==\u00a0200)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file_put_contents('local.rss',\u00a0$r->getResponseBody());\u00a0\u00a0\u00a0\u00a0}}\u00a0catch\u00a0(HttpException\u00a0$ex)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$ex;}?>                     Example #2 POST example       <?php$r\u00a0=\u00a0new\u00a0HttpRequest('http:\/\/example.com\/form.php',\u00a0HttpRequest::METH_POST);$r->setOptions(array('cookies'\u00a0=>\u00a0array('lang'\u00a0=>\u00a0'de')));$r->addPostFields(array('user'\u00a0=>\u00a0'mike',\u00a0'pass'\u00a0=>\u00a0's3c|r3t'));$r->addPostFile('image',\u00a0'profile.jpg',\u00a0'image\/jpeg');try\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$r->send()->getBody();}\u00a0catch\u00a0(HttpException\u00a0$ex)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$ex;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setcookies.php","title":"HttpRequest::setCookies","description":"HttpRequest::setCookies   (PECL pecl_http >= 0.12.0)HttpRequest::setCookies \u2014 Set cookies        Description       public    bool HttpRequest::setCookies     ([ array $cookies   ] )         Set custom cookies.            Parameters                    cookies                      an associative array as parameter containing cookie name\/value pairs;        if empty or omitted, all previously set cookies will be unset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setoptions.php","title":"HttpRequest::setOptions","description":"HttpRequest::setOptions   (PECL pecl_http >= 0.10.0)HttpRequest::setOptions \u2014 Set options        Description       public    bool HttpRequest::setOptions     ([ array $options   ] )         Set the request options to use.      See the full list of request options.         Parameters                    options                      an associative array, which values will overwrite the         currently set request options;        if empty or omitted, the options of the HttpRequest object will be reset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setmethod.php","title":"HttpRequest::setMethod","description":"HttpRequest::setMethod   (PECL pecl_http >= 0.10.0)HttpRequest::setMethod \u2014 Set method        Description       public    bool HttpRequest::setMethod     ( int $request_method    )         Set the request method.            Parameters                    request_method                      the request method to use                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setheaders.php","title":"HttpRequest::setHeaders","description":"HttpRequest::setHeaders   (PECL pecl_http >= 0.12.0)HttpRequest::setHeaders \u2014 Set headers        Description       public    bool HttpRequest::setHeaders     ([ array $headers   ] )         Set request header name\/value pairs.            Parameters                    headers                      an associative array as parameter containing header name\/value pairs;        if empty or omitted, all previously set headers will be unset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setpostfields.php","title":"HttpRequest::setPostFields","description":"HttpRequest::setPostFields   (PECL pecl_http >= 0.10.0)HttpRequest::setPostFields \u2014 Set post fields        Description       public    bool HttpRequest::setPostFields     ( array $post_data    )         Set the POST data entries, overwriting previously set POST data.          Affects only POST and custom requests.            Parameters                    post_data                      an associative array containing the post fields;        if empty, the post data will be unset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setpostfiles.php","title":"HttpRequest::setPostFiles","description":"HttpRequest::setPostFiles   (PECL pecl_http >= 0.10.0)HttpRequest::setPostFiles \u2014 Set post files        Description       public    bool HttpRequest::setPostFiles     ( array $post_files    )         Set files to post, overwriting previously set post files.          Affects only POST and requests. Cannot be used with raw post data.            Parameters                    post_files                      an array containing the files to post;        if empty, the post files will be unset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setputdata.php","title":"HttpRequest::setPutData","description":"HttpRequest::setPutData   (PECL pecl_http >= 0.25.0)HttpRequest::setPutData \u2014 Set put data        Description       public    bool HttpRequest::setPutData     ([ string $put_data   ] )         Set PUT data to send, overwriting previously set PUT data.          Affects only PUT requests.          Only either PUT data or PUT file can be used for each request.    PUT data has higher precedence and will be used even if a PUT    file is set.            Parameters                    put_data                      the data to upload                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setquerydata.php","title":"HttpRequest::setQueryData","description":"HttpRequest::setQueryData   (PECL pecl_http >= 0.10.0)HttpRequest::setQueryData \u2014 Set query data        Description       public    bool HttpRequest::setQueryData     ( mixed $query_data    )         Set the URL query parameters to use, overwriting previously set query parameters.          Affects any request types.            Parameters                    query_data                      a string or associative array parameter containing the pre-encoded         query string or to be encoded query fields;        if empty, the query data will be unset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setssloptions.php","title":"HttpRequest::setSslOptions","description":"HttpRequest::setSslOptions   (PECL pecl_http >= 0.10.0)HttpRequest::setSslOptions \u2014 Set ssl options        Description       public    bool HttpRequest::setSslOptions     ([ array $options   ] )         Set SSL options.            Parameters                    options                      an associative array containing any SSL specific options;        if empty or omitted, the SSL options will be reset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setrawpostdata.php","title":"HttpRequest::setRawPostData","description":"HttpRequest::setRawPostData   (PECL pecl_http 0.14.0-1.4.1)HttpRequest::setRawPostData \u2014 Set raw post data        Description       public    bool HttpRequest::setRawPostData     ([ string $raw_post_data   ] )         Set raw post data to send, overwriting previously set raw post data. Don&#039;t     forget to specify a content type. Affects only POST and custom requests.          Only either post fields or raw post data can be used for each request.    Raw post data has higher precedence and will be used even if post fields    are set.            Parameters                    raw_post_data                      raw post data                                    Return Values      Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setputfile.php","title":"HttpRequest::setPutFile","description":"HttpRequest::setPutFile   (PECL pecl_http >= 0.10.0)HttpRequest::setPutFile \u2014 Set put file        Description       public    bool HttpRequest::setPutFile     ([ string $file = \"\"   ] )         Set file to put. Affects only PUT requests.            Parameters                    file                      the path to the file to send;        if empty or omitted the put file will be unset                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-seturl.php","title":"HttpRequest::setUrl","description":"HttpRequest::setUrl   (PECL pecl_http >= 0.10.0)HttpRequest::setUrl \u2014 Set URL        Description       public    bool HttpRequest::setUrl     ( string $url    )         Set the request URL.            Parameters                    url                      the request url                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-attach.php","title":"HttpRequestPool::attach","description":"HttpRequestPool::attach   (PECL pecl_http >= 0.10.0)HttpRequestPool::attach \u2014 Attach HttpRequest        Description       public    bool HttpRequestPool::attach     ( HttpRequest $request    )         Attach an HttpRequest object to this HttpRequestPool.      Warning         Set all options prior attaching!                Parameters                    request                      an HttpRequest object not already attached to any HttpRequestPool object                                    Return Values       Returns TRUE on success or FALSE on failure.            Errors\/Exceptions       Throws HttpInvalidParamException, HttpRequestException,     HttpRequestPoolException, HttpEncodingException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-destruct.php","title":"HttpRequestPool::__destruct","description":"HttpRequestPool::__destruct   (PECL pecl_http >= 0.10.0)HttpRequestPool::__destruct \u2014 HttpRequestPool destructor        Description       void HttpRequestPool::__destruct     ( void    )         Clean up HttpRequestPool object."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-detach.php","title":"HttpRequestPool::detach","description":"HttpRequestPool::detach   (PECL pecl_http >= 0.10.0)HttpRequestPool::detach \u2014 Detach HttpRequest        Description       bool HttpRequestPool::detach     ( HttpRequest $request    )         Detach an HttpRequest object from this HttpRequestPool.            Parameters                    request                      an HttpRequest object attached to this HttpRequestPool object                                    Return Values       Returns TRUE on success or FALSE on failure.            Errors\/Exceptions       Throws HttpInvalidParamException, HttpRequestPoolException."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-construct.php","title":"HttpRequestPool::__construct","description":"HttpRequestPool::__construct   (PECL pecl_http >= 0.10.0)HttpRequestPool::__construct \u2014 HttpRequestPool constructor        Description       void HttpRequestPool::__construct     ([ HttpRequest $request    [, HttpRequest $...   ]] )         Instantiate a new HttpRequestPool object. An HttpRequestPool is    able to send several HttpRequests in parallel.          Accepts virtually infinite optional parameters each referencing an HttpRequest object.            Parameters                    request                      HttpRequest object to attach                                ...                                                   Errors\/Exceptions       Throws HttpRequestPoolException (HttpRequestException, HttpInvalidParamException).                 Examples            Example #1 A HttpRequestPool example       <?phptry\u00a0{\u00a0\u00a0\u00a0\u00a0$pool\u00a0=\u00a0new\u00a0HttpRequestPool(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new\u00a0HttpRequest('http:\/\/www.google.com\/',\u00a0HttpRequest::METH_HEAD),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new\u00a0HttpRequest('http:\/\/www.php.net\/',\u00a0HttpRequest::METH_HEAD)\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0$pool->send();\u00a0\u00a0\u00a0\u00a0foreach($pool\u00a0as\u00a0$request)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%s\u00a0is\u00a0%s\u00a0(%d)\\n\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$request->getUrl(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$request->getResponseCode()\u00a0?\u00a0'alive'\u00a0:\u00a0'not\u00a0alive',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$request->getResponseCode()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0}}\u00a0catch\u00a0(HttpException\u00a0$e)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$e;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-getattachedrequests.php","title":"HttpRequestPool::getAttachedRequests","description":"HttpRequestPool::getAttachedRequests   (PECL pecl_http >= 0.16.0)HttpRequestPool::getAttachedRequests \u2014 Get attached requests        Description       array HttpRequestPool::getAttachedRequests     ( void    )         Get attached HttpRequest objects.            Parameters              Return Values       Returns an array containing all currently attached HttpRequest objects."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-getfinishedrequests.php","title":"HttpRequestPool::getFinishedRequests","description":"HttpRequestPool::getFinishedRequests   (PECL pecl_http >= 0.16.0)HttpRequestPool::getFinishedRequests \u2014 Get finished requests        Description       array HttpRequestPool::getFinishedRequests     ( void    )         Get attached HttpRequest objects that already have finished their work.            Parameters              Return Values       Returns an array containing all attached HttpRequest objects that already have finished their work."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-reset.php","title":"HttpRequestPool::reset","description":"HttpRequestPool::reset   (PECL pecl_http >= 0.10.0)HttpRequestPool::reset \u2014 Reset request pool        Description       void HttpRequestPool::reset     ( void    )         Detach all attached HttpRequest objects."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-send.php","title":"HttpRequestPool::send","description":"HttpRequestPool::send   (PECL pecl_http >= 0.10.0)HttpRequestPool::send \u2014 Send all requests        Description       bool HttpRequestPool::send     ( void    )         Send all attached HttpRequest objects in parallel.            Parameters              Return Values       Returns TRUE on success or FALSE on failure.            Errors\/Exceptions       Throws HttpRequestPoolException (HttpSocketException, HttpRequestException, HttpMalformedHeaderException)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-socketperform.php","title":"HttpRequestPool::socketPerform","description":"HttpRequestPool::socketPerform   (PECL pecl_http >= 0.15.0)HttpRequestPool::socketPerform \u2014 Perform socket actions        Description       protected    bool HttpRequestPool::socketPerform     ( void    )         Returns TRUE until each request has finished its transaction.            Return Values       Returns TRUE until each request has finished its transaction.                    Examples            Example #1 A HttpRequestPool::socketPerform() example       <?phpclass\u00a0MyPool\u00a0extends\u00a0HttpRequestPool{\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0send()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while\u00a0($this->socketPerform())\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!$this->socketSelect())\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0HttpSocketExcpetion;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0protected\u00a0final\u00a0function\u00a0socketPerform()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$result\u00a0=\u00a0parent::socketPerform();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach\u00a0($this->getFinishedRequests()\u00a0as\u00a0$r)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->detach($r);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0response\u00a0of\u00a0finished\u00a0request\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$result;\u00a0\u00a0\u00a0\u00a0}}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-socketselect.php","title":"HttpRequestPool::socketSelect","description":"HttpRequestPool::socketSelect   (PECL pecl_http >= 0.10.0)HttpRequestPool::socketSelect \u2014 Perform socket select        Description       protected    bool HttpRequestPool::socketSelect     ([ float $timeout = 0   ] )          Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-capture.php","title":"HttpResponse::capture","description":"HttpResponse::capture   (PECL pecl_http >= 0.10.0)HttpResponse::capture \u2014 Capture script output        Description       static    void HttpResponse::capture     ( void    )        Capture script output.                    Examples            Example #1 A HttpResponse::capture() example       <?phpHttpResponse::setCache(true);HttpResponse::capture();\/\/\u00a0script\u00a0follows?>                         See Also             HttpResponse::send() - Send response"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getbuffersize.php","title":"HttpResponse::getBufferSize","description":"HttpResponse::getBufferSize   (PECL pecl_http >= 0.10.0)HttpResponse::getBufferSize \u2014 Get buffer size        Description       static    int HttpResponse::getBufferSize     ( void    )        Get current buffer size.           Return Values       Returns an int representing the current buffer size in bytes.                        See Also             HttpResponse::setBufferSize() - Set buffer size      HttpResponse::getThrottleDelay() - Get throttle delay      HttpResponse::setThrottleDelay() - Set throttle delay"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcache.php","title":"HttpResponse::getCache","description":"HttpResponse::getCache   (PECL pecl_http >= 0.10.0)HttpResponse::getCache \u2014 Get cache        Description       static    bool HttpResponse::getCache     ( void    )        Get current caching setting.           Return Values       Returns TRUE if caching should be attempted, else FALSE.                        See Also             HttpResponse::setCacheControl() - Set cache control      HttpResponse::getCacheControl() - Get cache control      HttpResponse::setCache() - Set cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcontenttype.php","title":"HttpResponse::getContentType","description":"HttpResponse::getContentType   (PECL pecl_http >= 0.10.0)HttpResponse::getContentType \u2014 Get content type        Description       static    string HttpResponse::getContentType     ( void    )        Get current Content-Type header setting.           Return Values       Returns the currently set content type as string.                        See Also             HttpResponse::getContentDisposition() - Get content disposition      HttpResponse::setContentDisposition() - Set content disposition      HttpResponse::setContentType() - Set content type      HttpResponse::guessContentType() - Guess content type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcachecontrol.php","title":"HttpResponse::getCacheControl","description":"HttpResponse::getCacheControl   (PECL pecl_http >= 0.10.0)HttpResponse::getCacheControl \u2014 Get cache control        Description       static    string HttpResponse::getCacheControl     ( void    )        Get current Cache-Control header setting.           Return Values       Returns the current cache control setting as a string like sent in a header.                        See Also             HttpResponse::setCacheControl() - Set cache control      HttpResponse::setCache() - Set cache      HttpResponse::getCache() - Get cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcontentdisposition.php","title":"HttpResponse::getContentDisposition","description":"HttpResponse::getContentDisposition   (PECL pecl_http >= 0.10.0)HttpResponse::getContentDisposition \u2014 Get content disposition        Description       static    string HttpResponse::getContentDisposition     ( void    )        Get current Content-Disposition setting.           Return Values       Returns the current content disposition as string like sent in a header.                        See Also             HttpResponse::setContentDisposition() - Set content disposition      HttpResponse::getContentType() - Get content type      HttpResponse::setContentType() - Set content type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getdata.php","title":"HttpResponse::getData","description":"HttpResponse::getData   (PECL pecl_http >= 0.10.0)HttpResponse::getData \u2014 Get data        Description       static    string HttpResponse::getData     ( void    )        Get the previously set data to be sent.           Return Values       Returns a string containing the previously set data to send.                        See Also             HttpResponse::setData() - Set data      HttpResponse::getFile() - Get file      HttpResponse::setFile() - Set file      HttpResponse::getStream() - Get Stream      HttpResponse::setStream() - Set stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getetag.php","title":"HttpResponse::getETag","description":"HttpResponse::getETag   (PECL pecl_http >= 0.10.0)HttpResponse::getETag \u2014 Get ETag        Description       static    string HttpResponse::getETag     ( void    )        Get calculated or previously set custom ETag.           Return Values       Returns the calculated or previously set ETag as unquoted string.                        See Also             HttpResponse::getLastModified() - Get last modified      HttpResponse::setLastModified() - Set last modified      HttpResponse::setETag() - Set ETag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getfile.php","title":"HttpResponse::getFile","description":"HttpResponse::getFile   (PECL pecl_http >= 0.10.0)HttpResponse::getFile \u2014 Get file        Description       static    string HttpResponse::getFile     ( void    )        Get the previously set file to be sent.           Return Values       Returns the previously set path to the file to send as string.                        See Also             HttpResponse::getData() - Get data      HttpResponse::setData() - Set data      HttpResponse::setFile() - Set file      HttpResponse::getStream() - Get Stream      HttpResponse::setStream() - Set stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getgzip.php","title":"HttpResponse::getGzip","description":"HttpResponse::getGzip   (PECL pecl_http >= 0.10.0)HttpResponse::getGzip \u2014 Get gzip        Description       static    bool HttpResponse::getGzip     ( void    )        Get current gzip&#039;ing setting.           Return Values       Returns TRUE if GZip compression is enabled, else FALSE.                        See Also             HttpResponse::setGzip() - Set gzip"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getlastmodified.php","title":"HttpResponse::getLastModified","description":"HttpResponse::getLastModified   (PECL pecl_http >= 0.12.0)HttpResponse::getLastModified \u2014 Get last modified        Description       static    int HttpResponse::getLastModified     ( void    )        Get calculated or previously set custom Last-Modified date.           Return Values       Returns the calculated or previously set Unix timestamp.                        See Also             HttpResponse::setLastModified() - Set last modified      HttpResponse::getETag() - Get ETag      HttpResponse::setETag() - Set ETag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getheader.php","title":"HttpResponse::getHeader","description":"HttpResponse::getHeader   (PECL pecl_http >= 0.12.0)HttpResponse::getHeader \u2014 Get header        Description       static    mixed HttpResponse::getHeader     ([ string $name   ] )        Get header(s) about to be sent.      Note:          This may not work as expected with the following SAPI(s): Apache2 w\/PHP < 5.1.3.               Parameters                    name                      specifies the name of the header to read;        if empty or omitted, an associative array with all headers will be returned                                    Return Values       Returns either a string containing the value of the header matching name,    FALSE on failure, or an associative array with all headers.                        See Also             HttpResponse::setHeader() - Set header"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getrequestbody.php","title":"HttpResponse::getRequestBody","description":"HttpResponse::getRequestBody   (PECL pecl_http >= 0.10.0)HttpResponse::getRequestBody \u2014 Get request body        Description       static    string HttpResponse::getRequestBody     ( void    )        This function is an alias of:  http_get_request_body()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getrequestbodystream.php","title":"HttpResponse::getRequestBodyStream","description":"HttpResponse::getRequestBodyStream   (PECL pecl_http >= 0.10.0)HttpResponse::getRequestBodyStream \u2014 Get request body stream        Description       static    resource HttpResponse::getRequestBodyStream     ( void    )        This function is an alias of:  http_get_request_body_stream()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getstream.php","title":"HttpResponse::getStream","description":"HttpResponse::getStream   (PECL pecl_http >= 0.10.0)HttpResponse::getStream \u2014 Get Stream        Description       static    resource HttpResponse::getStream     ( void    )        Get the previously set resource to be sent.           Parameters              Return Values       Returns the previously set resource.                        See Also             HttpResponse::getData() - Get data      HttpResponse::setData() - Set data      HttpResponse::getFile() - Get file      HttpResponse::setFile() - Set file      HttpResponse::setStream() - Set stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getthrottledelay.php","title":"HttpResponse::getThrottleDelay","description":"HttpResponse::getThrottleDelay   (PECL pecl_http >= 0.10.0)HttpResponse::getThrottleDelay \u2014 Get throttle delay        Description       static    double HttpResponse::getThrottleDelay     ( void    )        Get the current throttle delay.           Return Values       Returns a double representing the throttle delay in seconds.                        See Also             HttpResponse::getBufferSize() - Get buffer size      HttpResponse::setBufferSize() - Set buffer size      HttpResponse::setThrottleDelay() - Set throttle delay"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getrequestheaders.php","title":"HttpResponse::getRequestHeaders","description":"HttpResponse::getRequestHeaders   (PECL pecl_http >= 0.10.0)HttpResponse::getRequestHeaders \u2014 Get request headers        Description       static    array HttpResponse::getRequestHeaders     ( void    )        This function is an alias of:  http_get_request_headers()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-guesscontenttype.php","title":"HttpResponse::guessContentType","description":"HttpResponse::guessContentType   (PECL pecl_http >= 0.13.0)HttpResponse::guessContentType \u2014 Guess content type        Description       static    string HttpResponse::guessContentType     ( string $magic_file    [, int $magic_mode = MAGIC_MIME   ] )        Attempts to guess the content type of supplied payload through libmagic.          If the attempt is successful, the guessed Content-Type will automatically    be set as response Content-Type.           Parameters                    magic_file                      specifies the magic.mime database to use                                magic_mode                      flags for libmagic                                    Return Values       Returns the guessed content type on success or FALSE on failure.            Errors\/Exceptions       Throws HttpRuntimeException, HttpInvalidParamException.                     See Also             HttpResponse::getContentType() - Get content type      HttpResponse::setContentType() - Set content type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-redirect.php","title":"HttpResponse::redirect","description":"HttpResponse::redirect   (PECL pecl_http >= 0.10.0)HttpResponse::redirect \u2014 Redirect        Description       static    void HttpResponse::redirect     ([ string $url    [, array $params    [, bool $session = false    [, int $status   ]]]] )        This function is an alias of:  http_redirect()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setbuffersize.php","title":"HttpResponse::setBufferSize","description":"HttpResponse::setBufferSize   (PECL pecl_http >= 0.10.0)HttpResponse::setBufferSize \u2014 Set buffer size        Description       static    bool HttpResponse::setBufferSize     ( int $bytes    )        Sets the send buffer size of the throttling mechanism.      Note: Provides a basic throttling mechanism, which will yield    the current process or thread until the entity has been completely sent.   Note:          This may not work as expected with the following SAPI(s): FastCGI.               Parameters                    bytes                      the chunk size in bytes                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getBufferSize() - Get buffer size      HttpResponse::getThrottleDelay() - Get throttle delay      HttpResponse::setThrottleDelay() - Set throttle delay"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcache.php","title":"HttpResponse::setCache","description":"HttpResponse::setCache   (PECL pecl_http >= 0.10.0)HttpResponse::setCache \u2014 Set cache        Description       static    bool HttpResponse::setCache     ( bool $cache    )        Whether it should be attempted to cache the entity.          This will result in necessary caching headers and checks of clients    If-Modified-Since and If-None-Match headers. If one of those headers    matches a 304 Not Modified status code will be issued.      Note:          If you&#039;re using sessions, be sure that you set session.cache_limiter     to something more appropriate than \"no-cache\"!               Parameters                    cache                      whether caching should be attempted                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::setCacheControl() - Set cache control      HttpResponse::getCacheControl() - Get cache control      HttpResponse::getCachel()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-send.php","title":"HttpResponse::send","description":"HttpResponse::send   (PECL pecl_http >= 0.10.0)HttpResponse::send \u2014 Send response        Description       static    bool HttpResponse::send     ([ bool $clean_ob = true   ] )        Finally send the entity.          A successful caching attempt will exit PHP, and write a log entry if the INI setting    http.log.cache is set.    See the INI setting  http.force_exit for what \"exits\" means.           Parameters                    clean_ob                      whether to destroy all previously started output handlers and their buffers                                    Return Values       Returns TRUE on success or FALSE on failure.                   Examples            Example #1 A HttpResponse::send() example       <?phpHttpResponse::setCache(true);HttpResponse::setContentType('application\/pdf');HttpResponse::setContentDisposition(\"$user.pdf\",\u00a0false);HttpResponse::setFile('sheet.pdf');HttpResponse::send();?>                         See Also             HttpResponse::capture() - Capture script output"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcachecontrol.php","title":"HttpResponse::setCacheControl","description":"HttpResponse::setCacheControl   (PECL pecl_http >= 0.10.0)HttpResponse::setCacheControl \u2014 Set cache control        Description       static    bool HttpResponse::setCacheControl     ( string $control    [, int $max_age = 0    [, bool $must_revalidate = true   ]] )        Define a custom Cache-Control header, usually being private or public;           Parameters                    control                      the primary cache control setting                                max_age                      the max-age in seconds, suggesting how long the cache entry is valid on the client side                                must_revalidate                      whether the cached entity should be revalidated by the client for every request                                    Return Values       Returns TRUE on success, or FALSE if control does not match one of public, private or no-cache.                      See Also            HttpResponse::getCacheControl() - Get cache control     HttpResponse::setCache() - Set cache     HttpResponse::getCache() - Get cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcontentdisposition.php","title":"HttpResponse::setContentDisposition","description":"HttpResponse::setContentDisposition   (PECL pecl_http >= 0.10.0)HttpResponse::setContentDisposition \u2014 Set content disposition        Description       static    bool HttpResponse::setContentDisposition     ( string $filename    [, bool $inline = false   ] )        Set the Content-Disposition.    The Content-Disposition header is very useful if the data actually being sent came from a file or something similar, that should be \"saved\" by the client\/user (i.e. by the browser&#039;s \"Save as...\" popup window).           Parameters                    filename                      the file name the \"Save as...\" dialog should display                                inline                      if set to true and the user agent knows how to handle the content type,        it will probably not cause the popup window to be shown                                     Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getContentDisposition() - Get content disposition      HttpResponse::getContentType() - Get content type      HttpResponse::setContentType() - Set content type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcontenttype.php","title":"HttpResponse::setContentType","description":"HttpResponse::setContentType   (PECL pecl_http >= 0.10.0)HttpResponse::setContentType \u2014 Set content type        Description       static    bool HttpResponse::setContentType     ( string $content_type    )        Set the Content-Type of the sent entity.           Parameters                    content_type                      the content type of the sent entity (primary\/secondary)                                    Return Values       Returns TRUE on success, or FALSE if the content type does not seem to    contain a primary and secondary content type part.                       See Also             HttpResponse::getContentDisposition() - Get content disposition      HttpResponse::setContentDisposition() - Set content disposition      HttpResponse::getContentType() - Get content type      HttpResponse::guessContentType() - Guess content type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setdata.php","title":"HttpResponse::setData","description":"HttpResponse::setData   (PECL pecl_http >= 0.10.0)HttpResponse::setData \u2014 Set data        Description       static    bool HttpResponse::setData     ( mixed $data    )        Set the data to be sent.      Note: Previously calculated or defined ETag    and Last-Modified will be recalculated and redefined.        Parameters                    data                      data to send                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getData() - Get data      HttpResponse::getFile() - Get file      HttpResponse::setFile() - Set file      HttpResponse::getStream() - Get Stream      HttpResponse::setStream() - Set stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setetag.php","title":"HttpResponse::setETag","description":"HttpResponse::setETag   (PECL pecl_http >= 0.10.0)HttpResponse::setETag \u2014 Set ETag        Description       static    bool HttpResponse::setETag     ( string $etag    )        Set a custom ETag. Use this only if you know what you&#039;re doing.           Parameters                    etag                      unquoted string as parameter containing the ETag                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getLastModified() - Get last modified      HttpResponse::setLastModified() - Set last modified      HttpResponse::getETag() - Get ETag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setfile.php","title":"HttpResponse::setFile","description":"HttpResponse::setFile   (PECL pecl_http >= 0.10.0)HttpResponse::setFile \u2014 Set file        Description       static    bool HttpResponse::setFile     ( string $file    )        Set the file to be sent.      Note: Previously calculated or defined ETag    and Last-Modified will be recalculated and redefined.        Parameters                    file                      the path to the file to send                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getData() - Get data      HttpResponse::setData() - Set data      HttpResponse::getFile() - Get file      HttpResponse::getStream() - Get Stream      HttpResponse::setStream() - Set stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setgzip.php","title":"HttpResponse::setGzip","description":"HttpResponse::setGzip   (PECL pecl_http >= 0.10.0)HttpResponse::setGzip \u2014 Set gzip        Description       static    bool HttpResponse::setGzip     ( bool $gzip    )        Enable on-thy-fly gzip&#039;ing of the sent entity.           Parameters                    gzip                      whether GZip compression should be enabled                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getGzip() - Get gzip"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setheader.php","title":"HttpResponse::setHeader","description":"HttpResponse::setHeader   (PECL pecl_http >= 0.12.0)HttpResponse::setHeader \u2014 Set header        Description       static    bool HttpResponse::setHeader     ( string $name    [, mixed $value    [, bool $replace = true   ]] )        Send an HTTP header.           Parameters                    name                      the name of the header                                value                      the value of the header;        if not set, no header with this name will be sent                                replace                      whether an existing header should be replaced                                    Return Values       Returns TRUE on success or FALSE on failure.                       See Also             HttpResponse::getHeader() - Get header"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setlastmodified.php","title":"HttpResponse::setLastModified","description":"HttpResponse::setLastModified   (PECL pecl_http >= 0.12.0)HttpResponse::setLastModified \u2014 Set last modified        Description       static    bool HttpResponse::setLastModified     ( int $timestamp    )        Set a custom Last-Modified date.           Parameters                    timestamp                      Unix timestamp representing the last modification time of the sent entity                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getLastModified() - Get last modified      HttpResponse::getETag() - Get ETag      HttpResponse::setETag() - Set ETag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setstream.php","title":"HttpResponse::setStream","description":"HttpResponse::setStream   (PECL pecl_http >= 0.10.0)HttpResponse::setStream \u2014 Set stream        Description       static    bool HttpResponse::setStream     ( resource $stream    )        Set the resource to be sent.      Note: Previously calculated or defined ETag    and Last-Modified will be recalculated and redefined.        Parameters                    stream                      already opened stream from which the data to send will be read                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getData() - Get data      HttpResponse::setData() - Set data      HttpResponse::getFile() - Get file      HttpResponse::setFile() - Set file      HttpResponse::getStream() - Get Stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setthrottledelay.php","title":"HttpResponse::setThrottleDelay","description":"HttpResponse::setThrottleDelay   (PECL pecl_http >= 0.10.0)HttpResponse::setThrottleDelay \u2014 Set throttle delay        Description       static    bool HttpResponse::setThrottleDelay     ( float $seconds    )        Sets the throttle delay.      Note: Provides a basic throttling mechanism, which will yield    the current process or thread until the entity has been completely sent.   Note:          This may not work as expected with the following SAPI(s): FastCGI.               Parameters                    seconds                      seconds to sleep after each chunk sent                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also             HttpResponse::getBufferSize() - Get buffer size      HttpResponse::setBufferSize() - Set buffer size      HttpResponse::getThrottleDelay() - Get throttle delay"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-status.php","title":"HttpResponse::status","description":"HttpResponse::status   (PECL pecl_http >= 0.12.0)HttpResponse::status \u2014 Send HTTP response status        Description       static    bool HttpResponse::status     ( int $status    )        This function is an alias of:  http_send_status()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-cache-etag.php","title":"http_cache_etag","description":"http_cache_etag   (PECL pecl_http >= 0.1.0)http_cache_etag \u2014 Caching by ETag        Description       bool http_cache_etag     ([ string $etag   ] )        Attempts to cache the sent entity by its ETag, either supplied or generated     by the hash algorithm specified by the INI setting    http.etag.mode.          If the clients If-None-Match header matches the supplied\/calculated    ETag, the body is considered cached on the clients side and    a 304 Not Modified status code is issued.          A log entry is written to the cache log if the INI setting    http.log.cache is set    and the cache attempt was successful.      Note: This function may be used in conjunction with    http_send_data(), http_send_file()  and http_send_stream().       If this function is used outside the http_send_*() API, it facilitates the ob_etaghandler().           Parameters                    etag                      custom ETag                                    Return Values       Returns FALSE or exits on success with 304 Not Modified if the entity is cached.    See the INI setting  http.force_exit for what \"exits\" means.                    Examples            Example #1 A http_cache_etag() example       <?phphttp_cache_etag();http_send_data(\"data\");?>                         See Also            http_cache_last_modified() - Caching by last modification     ob_etaghandler() - ETag output handler     http_match_etag() - Match ETag     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-cache-last-modified.php","title":"http_cache_last_modified","description":"http_cache_last_modified   (PECL pecl_http >= 0.1.0)http_cache_last_modified \u2014 Caching by last modification        Description       bool http_cache_last_modified     ([ int $timestamp_or_expires   ] )        Attempts to cache the sent entity by its last modification date.          If the supplied argument is greater than 0, it is handled as timestamp    and will be sent as date of last modification. If it is 0 or omitted,    the current time will be sent as Last-Modified date.    If it&#039;s negative, it is handled as expiration time in seconds, which means     that if the requested last modification date is not between the calculated timespan,    the Last-Modified header is updated and the actual body will be sent.          A log entry will be written to the cache log if the INI setting    http.log.cache is set    and the cache attempt was successful.      Note: This function may be used in conjunction with    http_send_data(), http_send_file()  and http_send_stream().        Parameters                    timestamp_or_expires                      Unix timestamp                                    Return Values       Returns FALSE or exits on success with 304 Not Modified if the entity is cached.    See the INI setting  http.force_exit for what \"exits\" means.                    Examples            Example #1 A http_cache_last_modified() example           Caching for 5 seconds.            <?phphttp_cache_last_modified(-5);printf(\"%s\\n\",\u00a0http_date());?>                         See Also            http_cache_etag() - Caching by ETag     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-deflate.php","title":"http_deflate","description":"http_deflate   (PECL pecl_http >= 0.15.0)http_deflate \u2014 Deflate data        Description       string http_deflate     ( string $data    [, int $flags = 0   ] )        Compress data with gzip, zlib AKA deflate or raw deflate encoding.          See the deflate constants table for possible values for the flags parameter.           Parameters                    data                      String containing the data that should be encoded                                flags                      deflate options                                    Return Values       Returns the encoded string on success, or NULL on failure.                        See Also            http_inflate() - Inflate data     HttpDeflateStream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-chunked-decode.php","title":"http_chunked_decode","description":"http_chunked_decode   (PECL pecl_http >= 0.1.0)http_chunked_decode \u2014 Decode chunked-encoded data        Description       string http_chunked_decode     ( string $encoded    )        Decodes a string which is HTTP-chunked encoded.           Parameters                    encoded                      chunked encoded string                                    Return Values       Returns the decoded string on success or FALSE on failure.                    Examples            Example #1 A http_chunked_decode() example       <?php$string\u00a0=\u00a0\"\".\u00a0\u00a0\u00a0\u00a0\"05\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"this\u00a0\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"07\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"string\u00a0\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"12\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"is\u00a0chunked\u00a0encoded\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"01\\n\\r\\n\".\u00a0\u00a0\u00a0\u00a0\"00\";echo\u00a0http_chunked_decode($string);?>             The above example will output:       this string is chunked encoded"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-inflate.php","title":"http_inflate","description":"http_inflate   (PECL pecl_http >= 0.15.0)http_inflate \u2014 Inflate data        Description       string http_inflate     ( string $data    )        Decompress data compressed with either gzip, deflate AKA zlib or raw    deflate encoding.           Parameters                    data                      string containing the compressed data                                    Return Values       Returns the decoded string on success, or NULL on failure.                        See Also            http_deflate() - Deflate data     HttpInflateStream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-cookie.php","title":"http_build_cookie","description":"http_build_cookie   (PECL pecl_http >= 1.2.0)http_build_cookie \u2014 Build cookie string        Description       string http_build_cookie     ( array $cookie    )         Build a cookie string from an array\/object like returned by http_parse_cookie().            Parameters                    cookie                      a cookie list like returned from http_parse_cookie()                                    Return Values       Returns the cookie(s) as string.                        See Also            http_parse_cookie() - Parse HTTP cookie"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-date.php","title":"http_date","description":"http_date   (PECL pecl_http >= 0.1.0)http_date \u2014 Compose HTTP RFC compliant date        Description       string http_date     ([ int $timestamp   ] )        Compose a valid HTTP date regarding RFC 1123    looking like: Wed, 22 Dec 2004 11:34:47 GMT.           Parameters                    timestamp                      Unix timestamp; current time if omitted                                    Return Values       Returns the HTTP date as string.                        See Also            date() - Format a local time\/date"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get-request-body-stream.php","title":"http_get_request_body_stream","description":"http_get_request_body_stream   (PECL pecl_http >= 0.22.0)http_get_request_body_stream \u2014 Get request body as stream        Description       resource http_get_request_body_stream     ( void    )        Create a stream to read the raw request body (e.g. POST or PUT data).          This function can only be used once if the request method was another than POST.           Parameters              Return Values       Returns the raw request body as stream on success or NULL on failure.                        See Also            http_get_request_body() - Get request body as string     http_get_request_headers() - Get request headers as array     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get-request-headers.php","title":"http_get_request_headers","description":"http_get_request_headers   (PECL pecl_http >= 0.10.0)http_get_request_headers \u2014 Get request headers as array        Description       array http_get_request_headers     ( void    )        Get a list of incoming HTTP headers.           Parameters              Return Values       Returns an associative array of incoming request headers.                        See Also            http_get_request_body() - Get request body as string     http_get_request_body_stream() - Get request body as stream     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-match-modified.php","title":"http_match_modified","description":"http_match_modified   (PECL pecl_http >= 0.1.0)http_match_modified \u2014 Match last modification        Description       bool http_match_modified     ([ int $timestamp = -1    [, bool $for_range = false   ]] )        Matches the given Unix timestamp against the clients If-Modified-Since    resp. If-Unmodified-Since HTTP headers.           Parameters                    timestamp                      Unix timestamp; current time, if omitted                                for_range                      if set to TRUE, the header usually used to validate HTTP ranges will be checked                                    Return Values       Returns TRUE if timestamp represents an earlier date than the header, else FALSE.                        See Also            http_match_etag() - Match ETag     http_match_request_header() - Match any header     http_cache_etag() - Caching by ETag     http_cache_last_modified() - Caching by last modification"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-match-etag.php","title":"http_match_etag","description":"http_match_etag   (PECL pecl_http >= 0.1.0)http_match_etag \u2014 Match ETag        Description       bool http_match_etag     ( string $etag    [, bool $for_range = false   ] )        Matches the given ETag against the clients If-Match resp.     If-None-Match HTTP headers.           Parameters                    etag                      the ETag to match                                for_range                      if set to TRUE, the header usually used to validate HTTP ranges will be checked                                    Return Values       Returns TRUE if ETag matches or the header contained the asterisk (\"*\"), else FALSE.                        See Also            http_match_last_modified()     http_match_request_header() - Match any header     http_cache_etag() - Caching by ETag     http_cache_last_modified() - Caching by last modification     ob_etaghandler() - ETag output handler"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-match-request-header.php","title":"http_match_request_header","description":"http_match_request_header   (PECL pecl_http >= 0.10.0)http_match_request_header \u2014 Match any header        Description       bool http_match_request_header     ( string $header    , string $value    [, bool $match_case = false   ] )        Match an incoming HTTP header.           Parameters                    header                      the header name (case-insensitive)                                value                      the header value that should be compared                                match_case                      whether the value should be compared case sensitively                                    Return Values       Returns TRUE if header value matches, else FALSE.                        See Also            http_match_etag() - Match ETag     http_match_last_modified()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get-request-body.php","title":"http_get_request_body","description":"http_get_request_body   (PECL pecl_http >= 0.10.0)http_get_request_body \u2014 Get request body as string        Description       string http_get_request_body     ( void    )        Get the raw request body (e.g. POST or PUT data).          This function can not be used after     http_get_request_body_stream()    if the request method was another than POST.           Parameters              Return Values       Returns the raw request body as string on success or NULL on failure.                        See Also            http_get_request_body_stream() - Get request body as stream     http_get_request_headers() - Get request headers as array     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-support.php","title":"http_support","description":"http_support   (PECL pecl_http >= 0.15.0)http_support \u2014 Check built-in HTTP support        Description       int http_support     ([ int $feature = 0   ] )        Check for features that require external libraries.          See the feature support constants table    for possible values for the feature argument.           Parameters                    feature                      feature to probe for                                    Return Values       Returns integer, whether requested feature is supported,    or a bitmask with all supported features if feature was omitted.                    Examples            Example #1 A http_support() example       <?phpif\u00a0(!http_support(HTTP_SUPPORT_REQUESTS))\u00a0{\u00a0\u00a0\u00a0\u00a0die(\"Need\u00a0HTTP\u00a0request\u00a0support!\\n\");}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-negotiate-charset.php","title":"http_negotiate_charset","description":"http_negotiate_charset   (PECL pecl_http >= 0.1.0)http_negotiate_charset \u2014 Negotiate clients preferred character set        Description       string http_negotiate_charset     ( array $supported    [, array &$result   ] )        This function negotiates the clients preferred charset based on its    Accept-Charset HTTP header. The qualifier is recognized and charsets     without qualifier are rated highest.           Parameters                    supported                      array containing the supported charsets as values                                result                      will be filled with an array containing the negotiation results                                    Return Values       Returns the negotiated charset or the default charset (i.e. first array entry) if none match.                    Examples            Example #1 Using http_negotiate_charset()       <?php$charsets\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'iso-8859-1',\u00a0\/\/\u00a0default\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'iso-8859-2',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'iso-8859-15',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'utf-8');$pref\u00a0=\u00a0http_negotiate_charset($charsets,\u00a0$result);if\u00a0(strcmp($pref,\u00a0'iso-8859-1'))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iconv_set_encoding('internal_encoding',\u00a0'iso-8859-1');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iconv_set_encoding('output_encoding',\u00a0$pref);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob_start('ob_iconv_handler');}print_r($result);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-negotiate-content-type.php","title":"http_negotiate_content_type","description":"http_negotiate_content_type   (PECL pecl_http >= 0.19.0)http_negotiate_content_type \u2014 Negotiate clients preferred content type        Description       string http_negotiate_content_type     ( array $supported    [, array &$result   ] )        This function negotiates the clients preferred content type based on its    Accept HTTP header. The qualifier is recognized and content types     without qualifier are rated highest.           Parameters                    supported                      array containing the supported content types as values                                result                      will be filled with an array containing the negotiation results                                    Return Values       Returns the negotiated content type or the default content type (i.e. first array entry) if none match.                    Examples            Example #1 Using http_negotiate_content_type()       <?php$content_types\u00a0=\u00a0array('application\/xhtml+xml',\u00a0'text\/html');http_send_content_type(http_negotiate_content_type($content_types));?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-deflatehandler.php","title":"ob_deflatehandler","description":"ob_deflatehandler   (PECL pecl_http >= 0.21.0)ob_deflatehandler \u2014 Deflate output handler        Description       string ob_deflatehandler     ( string $data    , int $mode    )        For use with ob_start().      Note: This output handler can only be used once.       The deflate output buffer handler can only be used once.          It conflicts with ob_gzhandler() and     zlib.output_compression as well and should    not be used after mbstring extension&#039;s mb_output_handler() and     session extension&#039;s URL-Rewriter (AKA session.use_trans_sid).                        See Also            ob_inflatehandler() - Inflate output handler     ob_start() - Turn on output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-negotiate-language.php","title":"http_negotiate_language","description":"http_negotiate_language   (PECL pecl_http >= 0.1.0)http_negotiate_language \u2014 Negotiate clients preferred language        Description       string http_negotiate_language     ( array $supported    [, array &$result   ] )        This function negotiates the clients preferred language based on its    Accept-Language HTTP header. The qualifier is recognized and languages     without qualifier are rated highest. The qualifier will be decreased by    10% for partial matches (i.e. matching primary language).           Parameters                    supported                      array containing the supported languages as values                                result                      will be filled with an array containing the negotiation results                                    Return Values       Returns the negotiated language or the default language (i.e. first array entry) if none match.                    Examples            Example #1 Using http_negotiate_language()       <?php$langs\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'en-US',\/\/\u00a0default\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'fr',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'fr-FR',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'de',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'de-DE',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'de-AT',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'de-CH',);include\u00a0'.\/langs\/'.\u00a0http_negotiate_language($langs,\u00a0$result)\u00a0.'.php';print_r($result);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-etaghandler.php","title":"ob_etaghandler","description":"ob_etaghandler   (PECL pecl_http >= 0.10.0)ob_etaghandler \u2014 ETag output handler        Description       string ob_etaghandler     ( string $data    , int $mode    )        For use with ob_start().          Output buffer handler generating an ETag with the hash algorithm     specified with the INI setting http.etag.mode.          This output handler is used by http_cache_etag().                        See Also            http_cache_etag() - Caching by ETag     http_match_etag() - Match ETag"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-inflatehandler.php","title":"ob_inflatehandler","description":"ob_inflatehandler   (PECL pecl_http >= 0.21.0)ob_inflatehandler \u2014 Inflate output handler        Description       string ob_inflatehandler     ( string $data    , int $mode    )        For use with ob_start().          Same restrictions as with ob_deflatehandler() apply.                        See Also            ob_deflatehandler() - Deflate output handler     ob_start() - Turn on output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-message.php","title":"http_parse_message","description":"http_parse_message   (PECL pecl_http >= 0.12.0)http_parse_message \u2014 Parse HTTP messages        Description       object http_parse_message     ( string $message    )        Parses the HTTP message into a simple     recursive object.           Parameters                    message                      string containing a single HTTP message or several consecutive HTTP messages                                    Return Values       Returns a hierarchical object structure of the parsed messages.                    Examples            Example #1 Using http_parse_message()       <?phpdefine\u00a0('URL',\u00a0'http:\/\/www.example.com\/');print_r(http_parse_message(http_get(URL,\u00a0array('redirect'\u00a0=>\u00a03))));?>             The above example will output something similar to:       stdClass object (   [type] => 2   [httpVersion] => 1.1   [responseCode] => 200   [headers] => Array    (     [Content-Length] => 3     [Server] => Apache   )   [body] => Hi!   [parentMessage] => stdClass object   (     [type] => 2     [httpVersion] => 1.1     [responseCode] => 302     [headers] => Array      (       [Content-Length] => 0       [Location] => ...     )     [body] =>      [parentMessage] => ...   ) )                       See Also            http_parse_headers() - Parse HTTP headers     the HttpMessage class"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-params.php","title":"http_parse_params","description":"http_parse_params   (PECL pecl_http >= 1.0.0)http_parse_params \u2014 Parse parameter list        Description       object http_parse_params     ( string $param    [, int $flags = HTTP_PARAMS_DEFAULT   ] )        Parse parameter list.          See the params parsing constants table for possible     values of the flags argument.           Parameters                    param                      Parameters                                flags                      Parse flags                                    Return Values       Returns parameter list as stdClass object.                    Examples            Example #1 A http_parse_params() example       <?phpvar_dump(http_parse_params(\"text\/html;\u00a0charset=\\\"utf8\\\"\"));?>             The above example will output:       object(stdClass)#1 (1) {   [\"params\"]=>   array(2) {     [0]=>     string(9) \"text\/html\"     [1]=>     array(1) {       [\"charset\"]=>       string(4) \"utf8\"     }   } }                       See Also            http_parse_headers() - Parse HTTP headers     http_parse_cookie() - Parse HTTP cookie     http_parse_message() - Parse HTTP messages"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-headers.php","title":"http_parse_headers","description":"http_parse_headers   (PECL pecl_http >= 0.10.0)http_parse_headers \u2014 Parse HTTP headers        Description       array http_parse_headers     ( string $header    )        Parses HTTP headers into an associative array.           Parameters                    header                      string containing HTTP headers                                    Return Values       Returns an array on success or FALSE on failure.                    Examples            Example #1 Using http_parse_headers()       <?php$headers\u00a0=\u00a0\"content-type:\u00a0text\/html;\u00a0charset=UTF-8\\r\\n\".\u00a0\u00a0\"Server:\u00a0Funky\/1.0\\r\\n\".\u00a0\u00a0\"Set-Cookie:\u00a0foo=bar\\r\\n\".\u00a0\u00a0\"Set-Cookie:\u00a0baz=quux\\r\\n\".\u00a0\u00a0\"Folded:\u00a0works\\r\\n\\ttoo\\r\\n\";print_r(http_parse_headers($headers));?>             The above example will output:       Array (   [Content-Type] => text\/html; chatset=UTF-8   [Server] => Funky\/1.0   [Set-Cookie] => Array   (     [0] => foo=bar     [1] => baz=quux   )   [Folded] => works     too )                       See Also            http_parse_message() - Parse HTTP messages     http_parse_cookie() - Parse HTTP cookie"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-cookie.php","title":"http_parse_cookie","description":"http_parse_cookie   (PECL pecl_http >= 0.20.0)http_parse_cookie \u2014 Parse HTTP cookie        Description       object http_parse_cookie     ( string $cookie    [, int $flags    [, array $allowed_extras   ]] )        Parses HTTP cookies like sent in a response into a struct.           Parameters                    cookie                      string containing the value of a Set-Cookie response header                                flags                      parse flags (HTTP_COOKIE_PARSE_RAW)                                allowed_extras                      array containing recognized extra keys;        by default all unknown keys will be treated as cookie names                                    Return Values       Returns a stdClass object on success or FALSE on failure.                    Examples            Example #1 Using http_parse_cookie()       <?phpprint_r(http_parse_cookie(\"foo=bar;\u00a0bar=baz;\u00a0path=\/;\u00a0domain=example.com;\u00a0comment=;\u00a0secure\",\u00a00,\u00a0array(\"comment\")));?>             The above example will output:       stdClass Object (   [cookies] => Array   (     [foo] => bar     [bar] => baz   )    [extras] => Array   (     [comment] =>   )    [flags] => 16   [expires] => 0   [path] => \/   [domain] => example.com )                       See Also            http_parse_headers() - Parse HTTP headers     http_parse_message() - Parse HTTP messages     http_build_cookie() - Build cookie string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-persistent-handles-clean.php","title":"http_persistent_handles_clean","description":"http_persistent_handles_clean   (PECL pecl_http >= 1.5.0)http_persistent_handles_clean \u2014 Clean up persistent handles        Description       string http_persistent_handles_clean     ([ string $ident   ] )        Clean up (close) persistent handles, optionally identified with ident.           Parameters                    clean                      the identification string                                    Return Values       No value is returned.            See Also            http_persistent_handles_ident() - Get\/set ident of persistent handles     http_persistent_handles_count() - Stat persistent handles"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-persistent-handles-count.php","title":"http_persistent_handles_count","description":"http_persistent_handles_count   (PECL pecl_http >= 1.5.0)http_persistent_handles_count \u2014 Stat persistent handles        Description       object http_persistent_handles_count     ( void    )        List statistics about persistent handles usage.           Parameters              Return Values       Returns persistent handles statistics as stdClass object on success or FALSE on failure.                    Examples            Example #1 A http_persistent_handles_count() example       <?phpprint_r(http_persistent_handles_count());?>             The above example will output:       stdClass Object (     [http_request] => Array         (             [GLOBAL] => Array                 (                     [used] => 0                     [free] => 1                 )          )      [http_request_datashare] => Array         (             [GLOBAL] => Array                 (                     [used] => 1                     [free] => 0                 )          )      [http_request_pool] => Array         (         )  )                       See Also            http_persistent_handles_ident() - Get\/set ident of persistent handles     http_persistent_handles_clean() - Clean up persistent handles"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-persistent-handles-ident.php","title":"http_persistent_handles_ident","description":"http_persistent_handles_ident   (PECL pecl_http >= 1.5.0)http_persistent_handles_ident \u2014 Get\/set ident of persistent handles        Description       string http_persistent_handles_ident     ([ string $ident   ] )        Query or define the ident of persistent handles.           Parameters                    ident                      the identification string                                    Return Values       Returns the prior ident as string on success or FALSE on failure.                   Examples            Example #1 A http_persistent_handles_ident() example       <?phpecho\u00a0http_persistent_handles_ident(\"CUSTOM\"),\u00a0\"\\n\";echo\u00a0http_persistent_handles_ident(\"MyApp1\"),\u00a0\"\\n\";http_get(\"http:\/\/www.example.com\/\");print_r(http_persistent_handles_count());?>             The above example will output:      GLOBAL CUSTOM stdClass Object (     [http_request] => Array         (             [MyApp1] => Array                 (                     [used] => 0                     [free] => 1                 )          )      [http_request_datashare] => Array         (             [GLOBAL] => Array                 (                     [used] => 1                     [free] => 0                 )          )      [http_request_pool] => Array         (         )  )                     See Also            http_persistent_handles_count() - Stat persistent handles     http_persistent_handles_clean() - Clean up persistent handles"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-head.php","title":"http_head","description":"http_head   (PECL pecl_http >= 0.1.0)http_head \u2014 Perform HEAD request        Description       string http_head     ( string $url    [, array $options    [, array &$info   ]] )        Performs an HTTP HEAD request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get.php","title":"http_get","description":"http_get   (PECL pecl_http >= 0.1.0)http_get \u2014 Perform GET request        Description       string http_get     ( string $url    [, array $options    [, array &$info   ]] )        Performs an HTTP GET request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                options                      request options                                info                      Will be filled with request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure.                    Examples            Example #1 A http_get() example       <?php$response\u00a0=\u00a0http_get(\"http:\/\/www.example.com\/\",\u00a0array(\"timeout\"=>1),\u00a0$info);print_r($info);?>             The above example will output:      array (   &#039;effective_url&#039; => &#039;http:\/\/www.example.com\/&#039;,   &#039;response_code&#039; => 302,   &#039;connect_code&#039; => 0,   &#039;filetime&#039; => -1,   &#039;total_time&#039; => 0.212348,   &#039;namelookup_time&#039; => 0.038296,   &#039;connect_time&#039; => 0.104144,   &#039;pretransfer_time&#039; => 0.104307,   &#039;starttransfer_time&#039; => 0.212077,   &#039;redirect_time&#039; => 0,   &#039;redirect_count&#039; => 0,   &#039;size_upload&#039; => 0,   &#039;size_download&#039; => 218,   &#039;speed_download&#039; => 1026,   &#039;speed_upload&#039; => 0,   &#039;header_size&#039; => 307,   &#039;request_size&#039; => 103,   &#039;ssl_verifyresult&#039; => 0,   &#039;ssl_engines&#039; =>   array (     0 => &#039;dynamic&#039;,     1 => &#039;cswift&#039;,     2 => &#039;chil&#039;,     3 => &#039;atalla&#039;,     4 => &#039;nuron&#039;,     5 => &#039;ubsec&#039;,     6 => &#039;aep&#039;,     7 => &#039;sureware&#039;,     8 => &#039;4758cca&#039;,   ),   &#039;content_length_download&#039; => 218,   &#039;content_length_upload&#039; => 0,   &#039;content_type&#039; => &#039;text\/html&#039;,   &#039;httpauth_avail&#039; => 0,   &#039;proxyauth_avail&#039; => 0,   &#039;num_connects&#039; => 1,   &#039;os_errno&#039; => 0,   &#039;error&#039; => &#039;&#039;, )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-post-data.php","title":"http_post_data","description":"http_post_data   (PECL pecl_http >= 0.1.0)http_post_data \u2014 Perform POST request with pre-encoded data        Description       string http_post_data     ( string $url    , string $data    [, array $options    [, array &$info   ]] )        Performs an HTTP POST request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                data                      String containing the pre-encoded post data                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-put-data.php","title":"http_put_data","description":"http_put_data   (PECL pecl_http >= 0.25.0)http_put_data \u2014 Perform PUT request with data        Description       string http_put_data     ( string $url    , string $data    [, array $options    [, array &$info   ]] )        Performs an HTTP PUT request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                data                      PUT request body                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-post-fields.php","title":"http_post_fields","description":"http_post_fields   (PECL pecl_http >= 0.10.0)http_post_fields \u2014 Perform POST request with data to be encoded        Description       string http_post_fields     ( string $url    , array $data    [, array $files    [, array $options    [, array &$info   ]]] )        Performs an HTTP POST request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                data                      Associative array of POST values                                files                      Array of files to post                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure.                    Examples            Example #1 A http_post_fields() example       <?php$fields\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0'name'\u00a0=>\u00a0'mike',\u00a0\u00a0\u00a0\u00a0'pass'\u00a0=>\u00a0'se_ret');$files\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'name'\u00a0=>\u00a0'uimg',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'type'\u00a0=>\u00a0'image\/jpeg',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'file'\u00a0=>\u00a0'.\/profile.jpg',\u00a0\u00a0\u00a0\u00a0));$response\u00a0=\u00a0http_post_fields(\"http:\/\/www.example.com\/\",\u00a0$fields,\u00a0$files);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-put-stream.php","title":"http_put_stream","description":"http_put_stream   (PECL pecl_http >= 0.10.0)http_put_stream \u2014 Perform PUT request with stream        Description       string http_put_stream     ( string $url    , resource $stream    [, array $options    [, array &$info   ]] )        Performs an HTTP PUT request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                stream                      The stream to read the PUT request body from                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-put-file.php","title":"http_put_file","description":"http_put_file   (PECL pecl_http >= 0.10.0)http_put_file \u2014 Perform PUT request with file        Description       string http_put_file     ( string $url    , string $file    [, array $options    [, array &$info   ]] )        Performs an HTTP PUT request on the supplied url.      See the full list of request options.        Parameters                    url                      URL                                file                      The file to put                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-body-encode.php","title":"http_request_body_encode","description":"http_request_body_encode   (PECL pecl_http >= 1.0.0)http_request_body_encode \u2014 Encode request body        Description       string http_request_body_encode     ( array $fields    , array $files    )         Generate x-www-form-urlencoded resp. form-data encoded request body.            Parameters                    fields                      POST fields                                files                      POST files                                    Return Values       Returns encoded string on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-exists.php","title":"http_request_method_exists","description":"http_request_method_exists   (PECL pecl_http >= 0.10.0)http_request_method_exists \u2014 Check whether request method exists        Description       int http_request_method_exists     ( mixed $method    )        Check if a request method is registered (or available by default).           Parameters                    method                      request method name or ID                                    Return Values       Returns TRUE if the request method is known, else FALSE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-name.php","title":"http_request_method_name","description":"http_request_method_name   (PECL pecl_http >= 0.10.0)http_request_method_name \u2014 Get request method name        Description       string http_request_method_name     ( int $method    )        Get the literal string representation of a standard or registered request method.           Parameters                    method                      request method ID                                    Return Values       Returns the request method name as string on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-register.php","title":"http_request_method_register","description":"http_request_method_register   (PECL pecl_http >= 0.10.0)http_request_method_register \u2014 Register request method        Description       int http_request_method_register     ( string $method    )        Register a custom request method.           Parameters                    method                      the request method name to register                                    Return Values       Returns the ID of the request method on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-unregister.php","title":"http_request_method_unregister","description":"http_request_method_unregister   (PECL pecl_http >= 0.10.0)http_request_method_unregister \u2014 Unregister request method        Description       bool http_request_method_unregister     ( mixed $method    )         Unregister a previously registered custom request method.            Parameters                    method                      The request method name or ID                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-redirect.php","title":"http_redirect","description":"http_redirect   (PECL pecl_http >= 0.1.0)http_redirect \u2014 Issue HTTP redirect        Description       bool http_redirect     ([ string $url    [, array $params    [, bool $session = false    [, int $status = 0   ]]]] )        Redirect to the given url.          The supplied url will be expanded with http_build_url(), the params array will    be treated with http_build_str() and the session identification will be appended    if session is true. The HTTP response code will be set according to status.    You can use one of the redirect constants for convenience.    Please see \u00bb\u00a0RFC 2616    for which redirect response code to use in which situation. By default PHP will decide which response status fits best.          To be RFC compliant, \"Redirecting to <a>URL<\/a>.\" will be displayed,    if the client doesn&#039;t redirect immediately, and the request method was another one than HEAD.          A log entry will be written to the redirect log, if the INI setting    http.log.redirect is set and the redirect attempt was successful.            Parameters                    url                      the URL to redirect to                                params                      associative array of query parameters                                session                      whether to append session information                                status                      custom response status code                                    Return Values       Returns FALSE or exits on success with the specified redirection status code.    See the INI setting  http.force_exit for what \"exits\" means.                    Examples            Example #1 A http_redirect() example       <?phphttp_redirect(\"relpath\",\u00a0array(\"name\"\u00a0=>\u00a0\"value\"),\u00a0true,\u00a0HTTP_REDIRECT_PERM);?>             The above example will output:       HTTP\/1.1 301 Moved Permanently X-Powered-By: PHP\/5.2.2 Content-Type: text\/html Location: http:\/\/www.example.com\/curdir\/relpath?name=value&PHPSESSID=abc  Redirecting to <a href=\"http:\/\/www.example.com\/curdir\/relpath?name=value&PHPSESSID=abc\">http:\/\/www.example.com\/curdir\/relpath?name=value&PHPSESSID=abc<\/a>.                       See Also            the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request.php","title":"http_request","description":"http_request   (PECL pecl_http >= 1.0.0)http_request \u2014 Perform custom request        Description       string http_request     ( int $method    , string $url    [, string $body    [, array $options    [, array &$info   ]]] )        Performs a custom HTTP request on the supplied url.      See the full list of request options.         Parameters                    method                      Request method                                url                      URL                                body                      Request body                                options                      request options                                info                      Request\/response information                                    Return Values       Returns the HTTP response(s) as string on success, or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-content-disposition.php","title":"http_send_content_disposition","description":"http_send_content_disposition   (PECL pecl_http >= 0.10.0)http_send_content_disposition \u2014 Send Content-Disposition        Description       bool http_send_content_disposition     ( string $filename    [, bool $inline = false   ] )        Send the Content-Disposition.    The Content-Disposition header is very useful if the data actually being sent came from a file or something similar, that should be \"saved\" by the client\/user (i.e. by the browser&#039;s \"Save as...\" popup window).      Note: This function should be used in conjunction with    http_send_data(), http_send_file()  and http_send_stream().        Parameters                    filename                      the file name the \"Save as...\" dialog should display                                inline                      if set to TRUE and the user agent knows how to handle the content type,        it will probably not cause the popup window to be shown                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also            http_send_data() - Send arbitrary data     http_send_file() - Send file     http_send_stream() - Send stream     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-data.php","title":"http_send_data","description":"http_send_data   (PECL pecl_http >= 0.1.0)http_send_data \u2014 Send arbitrary data        Description       bool http_send_data     ( string $data    )        Sends raw data with support for (multiple) range requests.           Parameters                    data                      data to send                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also            http_send_file() - Send file     http_send_stream() - Send stream     http_throttle() - HTTP throttling     http_send_content_type() - Send Content-Type     http_send_content_disposition() - Send Content-Disposition     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-content-type.php","title":"http_send_content_type","description":"http_send_content_type   (PECL pecl_http >= 0.10.0)http_send_content_type \u2014 Send Content-Type        Description       bool http_send_content_type     ([ string $content_type = \"application\/x-octetstream\"   ] )        Send the Content-Type of the sent entity.      Note: This function should be used in conjunction with    http_send_data(), http_send_file()  and http_send_stream().        Parameters                    content_type                      the desired content type  (primary\/secondary)                                    Return Values       Returns TRUE on success or FALSE on failure.            Errors\/Exceptions       Raises an E_WARNING when the content_type     doesn&#039;t seem to contain a primary and a secondary part.                     See Also            http_send_data() - Send arbitrary data     http_send_file() - Send file     http_send_stream() - Send stream     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-status.php","title":"http_send_status","description":"http_send_status   (PECL pecl_http >= 0.1.0)http_send_status \u2014 Send HTTP response status        Description       bool http_send_status     ( int $status    )        Send HTTP status code.           Parameters                    status                      HTTP status code (100-599)                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also            the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-throttle.php","title":"http_throttle","description":"http_throttle   (PECL pecl_http >= 0.10.0)http_throttle \u2014 HTTP throttling        Description       void http_throttle     ( float $sec    [, int $bytes = 40960   ] )        Sets the throttle delay and send buffer size.      Note: This function should be used in conjunction with    http_send_data(), http_send_file()  and http_send_stream().   Note: Provides a basic throttling mechanism, which will yield    the current process or thread until the entity has been completely sent.   Note:          This may not work as expected with the following SAPI(s): FastCGI.               Parameters                    sec                      seconds to sleep after each chunk sent                                bytes                      the chunk size in bytes                                             Examples            Example #1 A http_throttle() example           Send file with approximately 20 kbyte\/s.            <?php\/\/\u00a0~\u00a020\u00a0kbyte\/s#\u00a0http_throttle(1,\u00a020000);#\u00a0http_throttle(0.5,\u00a010000);http_throttle(0.1,\u00a02000);http_send_file('document.pdf');?>                         See Also            http_send_data() - Send arbitrary data     http_send_file() - Send file     http_send_stream() - Send stream     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-last-modified.php","title":"http_send_last_modified","description":"http_send_last_modified   (PECL pecl_http >= 0.1.0)http_send_last_modified \u2014 Send Last-Modified        Description       bool http_send_last_modified     ([ int $timestamp = time()   ] )        Send a Last-Modified header with a valid HTTP date.      Note: This function should be used in conjunction with    http_send_data(), http_send_file()  and http_send_stream().        Parameters                    timestamp                      a Unix timestamp, converted to a valid HTTP date;        if omitted, the current time will be sent                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also            the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-file.php","title":"http_send_file","description":"http_send_file   (PECL pecl_http >= 0.1.0)http_send_file \u2014 Send file        Description       bool http_send_file     ( string $file    )        Sends a file with support for (multiple) range requests.          This functions behaviour and further action is dependent on the following    INI settings:    http.send.not_found_404     and http.log.not_found.          If the INI setting http.send.not_found_404    is enabled and the INI setting http.log.not_found    points to a writable file, a log message is written when the file was not found.           Parameters                    file                      the file to send                                    Return Values       Returns TRUE on success or FALSE on failure.                    Examples            Example #1 A http_send_file() example       <?phphttp_send_content_disposition(\"document.pdf\",\u00a0true);http_send_content_type(\"application\/pdf\");http_throttle(0.1,\u00a02048);http_send_file(\"..\/report.pdf\");?>             The above example will output:       HTTP\/1.1 206 Partial Content X-Powered-By: PHP\/5.2.2 Accept-Ranges: bytes Content-Length: 12345 Content-Range: bytes 0-12344 Content-Type: application\/pdf Content-Disposition: inline; filename=\"document.pdf\"  %PDF...                       See Also            http_send_data() - Send arbitrary data     http_send_stream() - Send stream     http_throttle() - HTTP throttling     http_send_content_type() - Send Content-Type     http_send_content_disposition() - Send Content-Disposition     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-stream.php","title":"http_send_stream","description":"http_send_stream   (PECL pecl_http >= 0.1.0)http_send_stream \u2014 Send stream        Description       bool http_send_stream     ( resource $stream    )        Sends an already opened stream with support for (multiple) range requests.           Parameters                    stream                      stream to read from (must be seekable)                                    Return Values       Returns TRUE on success or FALSE on failure.                        See Also            http_send_data() - Send arbitrary data     http_send_file() - Send file     http_throttle() - HTTP throttling     http_send_content_type() - Send Content-Type     http_send_content_disposition() - Send Content-Disposition     the  HttpResponse class if you are using PHP 5.1.0 and above"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-str.php","title":"http_build_str","description":"http_build_str   (PECL pecl_http >= 0.23.0)http_build_str \u2014 Build query string        Description       string http_build_str     ( array $query    [, string $prefix    [, string $arg_separator = ini_get(\"arg_separator.output\")   ]] )        Opponent to parse_str().           Parameters                    query                      associative array of query string parameters                                prefix                      top level prefix                                arg_separator                      argument separator to use (by default the INI setting arg_separator.output will be used, or \"&\" if neither is set                                    Return Values       Returns the built query as string on success or FALSE on failure.                        See Also            standard http_build_query() - Generate URL-encoded query string     http_build_url() - Build a URL"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-url.php","title":"http_build_url","description":"http_build_url   (PECL pecl_http >= 0.21.0)http_build_url \u2014 Build a URL        Description       string http_build_url     ([ mixed $url    [, mixed $parts    [, int $flags = HTTP_URL_REPLACE    [, array &$new_url   ]]]] )         Build a URL.          The parts of the second URL will be merged into the first according to the flags argument.            Parameters                    url                      (part(s) of) an URL in form of a string or associative array like parse_url() returns                                parts                      same as the first argument                                flags                      a bitmask of binary or&#039;ed HTTP_URL constants;        HTTP_URL_REPLACE is the default                                new_url                      if set, it will be filled with the parts of the composed url like parse_url() would return                                    Return Values       Returns the new URL as string on success or FALSE on failure.                    Examples            Example #1 A http_build_url() example       <?phpecho\u00a0http_build_url(\"http:\/\/user@www.example.com\/pub\/index.php?a=b#files\",\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"scheme\"\u00a0=>\u00a0\"ftp\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"host\"\u00a0=>\u00a0\"ftp.example.com\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"path\"\u00a0=>\u00a0\"files\/current\/\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"query\"\u00a0=>\u00a0\"a=c\"\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0\u00a0\u00a0HTTP_URL_STRIP_AUTH\u00a0|\u00a0HTTP_URL_JOIN_PATH\u00a0|\u00a0HTTP_URL_JOIN_QUERY\u00a0|\u00a0HTTP_URL_STRIP_FRAGMENT);?>             The above example will output:       ftp:\/\/ftp.example.com\/pub\/files\/current\/?a=c                       See Also            parse_url() - Parse a URL and return its components     http_build_str() - Build query string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.java-last-exception-get.php","title":"java_last_exception_get","description":"java_last_exception_get   (PHP 4 >= 4.0.2)java_last_exception_get \u2014 Get last Java exception          Description       object java_last_exception_get     ( void    )        Gets last Java exception.            Return Values       Returns an exception object.            Examples       The following example demonstrates the usage of Java&#039;s exception    handler from within PHP:         Example #1 Java exception handler       <?php$stack\u00a0=\u00a0new\u00a0Java('java.util.Stack');$stack->push(1);\/\/\u00a0This\u00a0should\u00a0succeed$result\u00a0=\u00a0$stack->pop();$ex\u00a0=\u00a0java_last_exception_get();if\u00a0(!$ex)\u00a0{\u00a0\u00a0echo\u00a0\"$result\\n\";}\/\/\u00a0This\u00a0should\u00a0fail\u00a0(error\u00a0suppressed\u00a0by\u00a0@)$result\u00a0=\u00a0@$stack->pop();$ex\u00a0=\u00a0java_last_exception_get();if\u00a0($ex)\u00a0{\u00a0\u00a0echo\u00a0$ex->toString();}\/\/\u00a0Clear\u00a0last\u00a0exceptionjava_last_exception_clear();?>                        Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.java-last-exception-clear.php","title":"java_last_exception_clear","description":"java_last_exception_clear   (PHP 4 >= 4.0.2)java_last_exception_clear \u2014 Clear last Java exception          Description       void java_last_exception_clear     ( void    )        Clears last Java exception.            Return Values       No value is returned.            Examples       See java_last_exception_get() for an example.            Notes   WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-autocommit-state.php","title":"ingres_autocommit_state","description":"ingres_autocommit_state   (PECL ingres >= 2.0.0)ingres_autocommit_state \u2014 Test if the connection is using autocommit          Description       bool ingres_autocommit_state     ( resource $link    )        ingres_autocommit_state() is called to determine whether    the current link has autocommit enabled or not.             Parameters                    link                      The connection link identifier                                     Return Values       Returns TRUE if autocommit is enabled or FALSE when autocommit is    disabled            See Also            ingres_autocommit() - Switch autocommit on or off     ingres_query() - Send an SQL query to Ingres"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-autocommit.php","title":"ingres_autocommit","description":"ingres_autocommit   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_autocommit \u2014 Switch autocommit on or off          Description       bool ingres_autocommit     ( resource $link    )        ingres_autocommit() is called before opening a    transaction (before the first call to    ingres_query() or just after a call to    ingres_rollback() or    ingres_commit()) to switch the    autocommit mode of the server on or off (when the script begins    the autocommit mode is off).          When autocommit mode is on, every query is automatically    committed by the server, as if ingres_commit()    was called after every call to ingres_query().    To see if autocommit is enabled use,     ingres_autocommit_state().          By default Ingres will rollback any uncommitted transactions at the end of    a request. Use this function or ingres_commit() to    ensure your data is committed to the database.            Parameters                    link                      The connection link identifier                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            ingres_autocommit_state() - Test if the connection is using autocommit     ingres_query() - Send an SQL query to Ingres     ingres_rollback() - Roll back a transaction     ingres_commit() - Commit a transaction"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-charset.php","title":"ingres_charset","description":"ingres_charset   (PECL ingres >= 2.1.0)ingres_charset \u2014 Returns the installation character set          Description       string ingres_charset     ( resource $link    )        ingres_charset() is called to determine the character    set being used by the Ingres client, from II_CHARSETxx (where xx is the    installation code).       Note:            You can override the value returned by using the function      putenv(). Changing the value of II_CHARSETxx in a      running Ingres installation can cause data corruption.                 Parameters                    link                      The connection link identifier                                     Return Values       Returns a string with the value for II_CHARSETxx or returns NULL if the value    could not be determined.            Examples            Example #1 ingres_charset() - Get the installation character set       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);echo\u00a0ingres_charset($link)\u00a0.\u00a0\"\\n\";ingres_close($link);?>                        See Also            ingres_connect() - Open a connection to an Ingres database     ingres_query() - Send an SQL query to Ingres"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-close.php","title":"ingres_close","description":"ingres_close   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_close \u2014 Close an Ingres database connection          Description       bool ingres_close     ( resource $link    )        ingres_close() closes the connection to    the Ingres server that is associated with the specified link.          ingres_close() is usually unnecessary, as it    will not close persistent connections and all non-persistent connections    are automatically closed at the end of the script.            Parameters                    link                      The connection link identifier                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            ingres_connect() - Open a connection to an Ingres database     ingres_pconnect() - Open a persistent connection to an Ingres database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-commit.php","title":"ingres_commit","description":"ingres_commit   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_commit \u2014 Commit a transaction          Description       bool ingres_commit     ( resource $link    )        ingres_commit() commits the currently open    transaction, making all changes made to the database permanent.          This closes the transaction. A new transaction can be opened by sending a    query with ingres_query().          You can also have the server commit automatically after every    query by calling ingres_autocommit() before    opening the transaction.          By default Ingres will roll back any uncommitted transactions at the end of    a request. Use this function or ingres_autocommit() to    ensure your that data is committed to the database.            Parameters                    link                      The connection link identifier                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            ingres_query() - Send an SQL query to Ingres     ingres_rollback() - Roll back a transaction     ingres_autocommit() - Switch autocommit on or off"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-cursor.php","title":"ingres_cursor","description":"ingres_cursor   (PECL ingres >= 1.1.0)ingres_cursor \u2014 Get a cursor name for a given result resource          Description       string ingres_cursor     ( resource $result    )        Returns a string with the active cursor name. If no cursor is active then     NULL is returned.            Parameters                    result                      The query result identifier                                     Return Values       Returns a string containing the active cursor name. If no cursor is    active then NULL is returned.             Examples            Example #1 Get cursor name for a query resource       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_prepare($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");$cursor_name\u00a0=\u00a0ingres_cursor($result);echo\u00a0$cursor_name;?>                        See Also            ingres_prepare() - Prepare a query for later execution     ingres_execute() - Execute a prepared query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-errno.php","title":"ingres_errno","description":"ingres_errno   (PECL ingres >= 1.1.0)ingres_errno \u2014 Get the last Ingres error number generated          Description       int ingres_errno     ([ resource $link   ] )        Returns an integer containing the last error number. If no error was    reported 0 is returned.          If a link resource is passed to    ingres_errno() it returns the last error recorded for    the link. If no link is passed, then ingres_errno()    returns the last error reported using the default link.          The function, ingres_errno(), should always be called    after executing a database query.  Calling another function before    ingres_errno() is called will reset or change any    error code from the last Ingres function call.            Parameters                    link                      The connection link identifier                                     Return Values       Returns an integer containing the last error number. If no error was    reported, 0 is returned.             Examples            Example #1 Get the last Ingres error number generated       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");$error_code\u00a0=\u00a0ingres_errno($link);if\u00a0(\u00a0$error_code\u00a0!=\u00a00\u00a0)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured\u00a0-\u00a0\"\u00a0.\u00a0$error_code;}?>                        See Also            ingres_error() - Get a meaningful error message for the last error generated     ingres_errsqlstate() - Get the last SQLSTATE error code generated     ingres_next_error() - Get the next Ingres error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-connect.php","title":"ingres_connect","description":"ingres_connect   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_connect \u2014 Open a connection to an Ingres database          Description       resource ingres_connect     ([ string $database    [, string $username    [, string $password    [, array $options   ]]]] )        ingres_connect() opens a connection with the    given Ingres database.          The connection is closed when the script ends or when    ingres_close() is called on this link.            Parameters       If some parameters are missing, ingres_connect()    uses the values in php.ini for    ingres.default_database,    ingres.default_user and    ingres.default_password.                       database                      The database name. Must follow the syntax:                      [vnode::]dbname[\/svr_class]                                username                      The Ingres user name                                password                      The password associated with username                               options                      ingres_connect() options                                                  Option name            Option type            Description            Example                                                        date_century_boundary            integer            The threshold by which a 2-digit year is determined to be in            the current century or in the next century. Equivalent to II_DATE_CENTURY_BOUNDARY.             50                                   group            string            Specifies the group ID of the user, equivalent to the \"-G\"            flag            payroll                                   role            string            The role ID of the application. If a role password is            required, the parameter value should be specified as \"role\/password\"                                   effective_user            string            The ingres user account being impersonated, equivalent to the \"-u\" flag            another_user                                   dbms_password            string            The internal database password for the user connecting to Ingres            s3cr3t                                   table_structure            string                          The default structure for new tables.              Valid values for table_structure are:                           INGRES_STRUCTURE_BTREE              INGRES_STRUCTURE_HASH              INGRES_STRUCTURE_HEAP              INGRES_STRUCTURE_ISAM              INGRES_STRUCTURE_CBTREE              INGRES_STRUCTURE_CISAM              INGRES_STRUCTURE_CHASH              INGRES_STRUCTURE_CHEAP                                                  INGRES_STRUCTURE_BTREE                                   index_structure            string                          The default structure for new secondary indexes. Valid values            for index_structure are:                           INGRES_STRUCTURE_CBTREE              INGRES_STRUCTURE_CISAM              INGRES_STRUCTURE_CHASH              INGRES_STRUCTURE_BTREE              INGRES_STRUCTURE_HASH              INGRES_STRUCTURE_ISAM                                                  INGRES_STRUCTURE_HASH                                   login_local            boolean            Determines how the connection user ID and password are            used when a VNODE is included in the target database string.            If set to TRUE, the user ID and password are used to locally access            the VNODE, and the VNODE login information is used to establish the DBMS            connection. If set to FALSE, the process user ID is used to access            the VNODE, and the connection user ID and password are used in place            of the VNODE login information to establish the DBMS connection.            This parameter is ignored if no VNODE is included in the target            database string. The default is FALSE.            TRUE                                   timezone            string            Controls the timezone of the session. If not set it will            default to the value defined by II_TIMEZONE_NAME. If            II_TIMEZONE_NAME is not defined, NA-PACIFIC (GMT-8 with Daylight            Savings) is used.                                   date_format            integer            Sets the allowable input and output format for Ingres dates.            Defaults to the value defined by II_DATE_FORMAT. If II_DATE_FORMAT is            not set the default date format is US, e.g. mm\/dd\/yy. Valid values            for date_format are:                           INGRES_DATE_DMY              INGRES_DATE_FINISH              INGRES_DATE_GERMAN              INGRES_DATE_ISO              INGRES_DATE_ISO4              INGRES_DATE_MDY              INGRES_DATE_MULTINATIONAL              INGRES_DATE_MULTINATIONAL4              INGRES_DATE_YMD              INGRES_DATE_US                                                  INGRES_DATE_MULTINATIONAL4                                   decimal_separator            string            The character identifier for decimal data            \",\"                                   money_lort            integer            Leading or trailing currency sign. Valid values for money_lort            are:                           INGRES_MONEY_LEADING              INGRES_MONEY_TRAILING                                                  INGRES_MONEY_TRAILING                                   money_sign            string            The currency symbol to be used with the MONEY datatype            \u20ac                                   money_precision            integer            The precision of the MONEY datatype            3                                   float4_precision            integer            Precision of the FLOAT4 datatype            10                                   float8_precision            integer            Precision of the FLOAT8 data            10                                   blob_segment_length            integer            The amount of data in bytes to fetch at a time when retrieving            BLOB or CLOB data, defaults to 4096 bytes when not explicitly set            8192                                                                             Return Values       Returns a Ingres link resource on success or FALSE on failure            Examples            Example #1 Open a connection to an Ingres database       <?php$link\u00a0=\u00a0ingres_connect(\"mydb\",\u00a0\"user\",\u00a0\"pass\")\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");echo\u00a0\"Connected\u00a0successfully\";ingres_close($link);?>                        See Also            ingres_pconnect() - Open a persistent connection to an Ingres database     ingres_close() - Close an Ingres database connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-error.php","title":"ingres_error","description":"ingres_error   (PECL ingres >= 1.1.0)ingres_error \u2014 Get a meaningful error message for the last error generated          Description       string ingres_error     ([ resource $link   ] )        Returns a string containing the last error, or NULL if no error has    occurred.          If a link resource is passed to    ingres_error(), it returns the last error recorded for    the link. If no link is passed then ingres_error()    returns the last error reported using the default link.          The function, ingres_error(), should always be called    after executing any database query.  Calling another function before    ingres_error() is called will reset or change any    error message from the last Ingres function call.            Parameters                    link                      The connection link identifier                                     Return Values       Returns a string containing the last error, or NULL if no error has    occurred.             Examples            Example #1 Get a message for the last error generated       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");$error_text\u00a0=\u00a0ingres_error();if\u00a0(!is_null($error_text))\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured\u00a0-\u00a0\"\u00a0.\u00a0$error_text;}?>                        See Also            ingres_errno() - Get the last Ingres error number generated     ingres_errsqlstate() - Get the last SQLSTATE error code generated     ingres_next_error() - Get the next Ingres error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-escape-string.php","title":"ingres_escape_string","description":"ingres_escape_string   (PECL ingres >= 2.1.0)ingres_escape_string \u2014 Escape special characters for use in a query          Description       string ingres_escape_string     ( resource $link    , string $source_string    )        ingres_escape_string() is used to escape certain    characters within a string before it is sent to the database server.            Parameters                    link                      The connection link identifier                                source_string                      The source string to be parsed                                     Return Values       Returns a string containing the escaped data.            Examples            Example #1 Escape special characters for use in a query       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$last_name\u00a0=\u00a0\"O'Connor\";$sql\u00a0=\u00a0sprintf(\"select\u00a0*\u00a0from\u00a0user_profile\u00a0where\u00a0up_last\u00a0=\u00a0'%s'\",\u00a0ingres_escape_string(\u00a0$link,\u00a0$last_name));$result\u00a0=\u00a0ingres_query($link,\u00a0$sql);while\u00a0($user\u00a0=\u00a0ingres_fetch_object($result)){\u00a0\u00a0echo\u00a0$user->up_first\u00a0.\u00a0'<BR\/>';}ingres_commit($link);ingres_close($link);?>                        See Also            ingres_query() - Send an SQL query to Ingres"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-errsqlstate.php","title":"ingres_errsqlstate","description":"ingres_errsqlstate   (PECL ingres >= 1.1.0)ingres_errsqlstate \u2014 Get the last SQLSTATE error code generated          Description       string ingres_errsqlstate     ([ resource $link   ] )        Returns a string containing the last SQLSTATE, or NULL if no error has    occurred.          If a link resource is passed to    ingres_errsqlstate(), it returns the last error    recorded for the link. If no link is passed, then    ingres_errsqlstate() returns the last error reported    using the default link.          The function, ingres_errsqlstate(), should always be    called after executing any database query.  Calling another function    before ingres_errsqlstate() is called will reset or    change any error message from the last Ingres function call.            Parameters                    link                      The connection link identifier                                     Return Values       Returns a string containing the last SQLSTATE, or NULL if no error has    occurred.             Examples            Example #1 Get the last SQLSTATE error code generated       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");$error_sqlstate\u00a0=\u00a0ingres_errsqlstate($link);if\u00a0(!is_null($error_sqlstate))\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured\u00a0-\u00a0\"\u00a0.\u00a0$error_sqlstate;}?>                        See Also            ingres_errno() - Get the last Ingres error number generated     ingres_error() - Get a meaningful error message for the last error generated     ingres_next_error() - Get the next Ingres error"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-execute.php","title":"ingres_execute","description":"ingres_execute   (PECL ingres >= 1.1.0)ingres_execute \u2014 Execute a prepared query          Description       bool ingres_execute     ( resource $result    [, array $params    [, string $types   ]] )        Execute a query prepared using ingres_prepare().       Note:     Related Configurations         See also the ingres.describe,     ingres.scrollable and     ingres.utf8 directives in      Runtime Configuration.                Parameters                    result                      The result query identifier                                params                      An array of parameter values to be used with the query                                types                      A string containing a sequence of types for the parameter values        passed. See the types parameter in        ingres_query() for the list of type codes.                                     Return Values      Returns TRUE on success or FALSE on failure.              See Also            ingres_unbuffered_query() - Send an unbuffered  SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array     ingres_commit() - Commit a transaction     ingres_rollback() - Roll back a transaction     ingres_autocommit() - Switch autocommit on or off     ingres_set_environment() - Set environment features controlling output options     ingres_errno() - Get the last Ingres error number generated     ingres_error() - Get a meaningful error message for the last error generated"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-array.php","title":"ingres_fetch_array","description":"ingres_fetch_array   ( PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_fetch_array \u2014 Fetch a row of result into an array          Description       array ingres_fetch_array     ( resource $result    [, int $result_type   ] )        This function is an extended version of    ingres_fetch_row().  In addition to storing    the data in the numeric indices of the result array, it also    stores the data in associative indices, using the field names as    keys.          If two or more columns of the result have the same field names,    the last column will take precedence. To access the another    column or columns of the same name, you must use the numeric index of the    column or make an alias for the column. For example:           <?php$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0ap_place\u00a0as\u00a0city,\u00a0ap_ccode\u00a0as\u00a0country\u00a0from\u00a0airport\u00a0where\u00a0ap_iatacode\u00a0=\u00a0'VLL'\");\u00a0$result\u00a0=\u00a0ingres_fetch_array($result);$foo\u00a0=\u00a0$result[\"city\"];$bar\u00a0=\u00a0$result[\"country\"];?>                      With regard to speed, the function is identical to    ingres_fetch_object(), and almost as quick as    ingres_fetch_row() (the difference is    insignificant).          By default, arrays created by ingres_fetch_array() start    from position 1 and not 0 as with other DBMS extensions. The starting position    can be adjusted to 0 using the configuration parameter ingres.array_index_start.      Note:     Related Configurations         See also the ingres.array_index_start, ingres.fetch_buffer_size     and ingres.utf8     directives in Runtime     Configuration.                Parameters                    result                      The query result identifier                                result_type                      The result type. This result_type can be INGRES_NUM for        enumerated array, INGRES_ASSOC for associative array, or        INGRES_BOTH (default).                                     Return Values       Returns an array that corresponds to the fetched row,    or FALSE if there are no more rows            Examples            Example #1 Fetch a row of result into an array       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\"select\u00a0*\u00a0from\u00a0table\");while\u00a0($row\u00a0=\u00a0ingres_fetch_array($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"user_id\"];\u00a0\u00a0\/\/\u00a0using\u00a0associative\u00a0array\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"fullname\"];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0using\u00a0enumerated\u00a0array\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}?>                        See Also            ingres_query() - Send an SQL query to Ingres     ingres_num_fields() - Get the number of fields returned by the last query     ingres_field_name() - Get the name of a field in a query result     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-assoc.php","title":"ingres_fetch_assoc","description":"ingres_fetch_assoc   (PECL ingres >= 2.2.2)ingres_fetch_assoc \u2014 Fetch a row of result into an associative array          Description       array ingres_fetch_assoc     ( resource $result    )        This function is stores the data fetched from a query executed using    ingres_query() in an associative array, using the    field names as keys.          With regard to speed, the function is identical to    ingres_fetch_object(), and almost as quick as    ingres_fetch_row() (the difference is    insignificant).          By default, arrays created by ingres_fetch_assoc() start    from position 1 and not 0 as with other DBMS extensions. The starting position    can be adjusted to 0 using the configuration parameter ingres.array_index_start.      Note:     Related Configurations         See also the ingres.array_index_start, ingres.fetch_buffer_size     and ingres.utf8     directives in Runtime     Configuration.                Parameters                    result                      The query result identifier                                     Return Values       Returns an associative array that corresponds to the fetched row,    or FALSE if there are no more rows            Examples            Example #1 Fetch a row into an associative array       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\"select\u00a0*\u00a0from\u00a0table\");while\u00a0($row\u00a0=\u00a0ingres_fetch_assoc($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"user_id\"];\u00a0\u00a0\/\/\u00a0using\u00a0associative\u00a0array\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"fullname\"];}?>                        See Also            ingres_query() - Send an SQL query to Ingres     ingres_num_fields() - Get the number of fields returned by the last query     ingres_field_name() - Get the name of a field in a query result     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-object.php","title":"ingres_fetch_object","description":"ingres_fetch_object   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_fetch_object \u2014 Fetch a row of result into an object          Description       object ingres_fetch_object     ( resource $result    [, int $result_type   ] )        This function is similar to    ingres_fetch_array(), with one difference - an    object is returned instead of an array.  Indirectly, this means    that you can access the data only by the field names and not by    their offsets (numbers are illegal property names).          With regard to speed, the function is identical to    ingres_fetch_array(), and almost as quick as    ingres_fetch_row() (the difference is    insignificant).      Note:     Related Configurations         See also the ingres.fetch_buffer_size     and ingres.utf8     directives in Runtime     Configuration.                Parameters                    link                      The query result identifier                                result_type                      (Optional argument.) result_type is a        constant and can take the following values: INGRES_ASSOC,        INGRES_NUM, and INGRES_BOTH.                                     Return Values       Returns an object that corresponds to the fetched row,    or FALSE if there are no more rows            Examples            Example #1 Fetch a row into an object       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");while\u00a0($row\u00a0=\u00a0ingres_fetch_object($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row->user_id;\u00a0\u00a0\u00a0\u00a0echo\u00a0$row->fullname;}?>                        See Also            ingres_query() - Send an SQL query to Ingres     ingres_num_fields() - Get the number of fields returned by the last query     ingres_field_name() - Get the name of a field in a query result     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-row.php","title":"ingres_fetch_row","description":"ingres_fetch_row   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_fetch_row \u2014 Fetch a row of result into an enumerated array         Description       array ingres_fetch_row     ( resource $result    )        ingres_fetch_row() returns an array that    corresponds to the fetched row, or FALSE if there are no more    rows. Each result column is stored in an array offset, starting    at offset 1.          Subsequent calls to ingres_fetch_row()    return the next row in the result set, or FALSE if there are no    more rows.          By default, arrays created by ingres_fetch_row() start    from position 1 and not 0 as with other DBMS extensions. The starting position    can be adjusted to 0 using the configuration parameter ingres.array_index_start.      Note:     Related Configurations         See also the ingres.array_index_start, ingres.fetch_buffer_size     and ingres.utf8     directives in Runtime     Configuration.                Parameters                    result                      The query result identifier                                     Return Values       Returns an array that corresponds to the fetched row,    or FALSE if there are no more rows            Examples            Example #1 Fetch a row of result into an enumerated array       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");while\u00a0($row\u00a0=\u00a0ingres_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}?>                        See Also            ingres_num_fields() - Get the number of fields returned by the last query     ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-name.php","title":"ingres_field_name","description":"ingres_field_name   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_field_name \u2014 Get the name of a field in a query result          Description       string ingres_field_name     ( resource $result    , int $index    )        ingres_field_name() returns the name of a field    in a query result.      Note:     Related Configurations         See ingres.array_index_start     in Runtime Configuration                Parameters                    result                      The query result identifier                                index                      index is the field whose name will be        retrieved.                      The possible values of index depend upon        the value        of ingres.array_index_start.        If ingres.array_index_start        is 1 (the default)        then index must be        between 1 and the value returned        by ingres_num_fields(). If ingres.array_index_start        is 0 then index must        be between 0        and ingres_num_fields() -        1.                                     Return Values       Returns the name of a field    in a query result or FALSE on failure            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-length.php","title":"ingres_field_length","description":"ingres_field_length   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_field_length \u2014 Get the length of a field          Description       int ingres_field_length     ( resource $result    , int $index    )        ingres_field_length() returns the length of a    field.  This is the number of bytes the server uses to store    the field.  For detailed information, see the Ingres OpenAPI User    Guide, Appendix \"Data Types\" in the Ingres documentation.      Note:     Related Configurations         See ingres.array_index_start     in Runtime Configuration                Parameters                    result                      The query result identifier                                index                      index is the column number whose length        will be retrieved.                      The possible values of index depend upon        the value        of ingres.array_index_start.        If ingres.array_index_start        is 1 (the default)        then index must be        between 1 and the value returned        by ingres_num_fields(). If ingres.array_index_start        is 0 then index must        be between 0        and ingres_num_fields() -        1.                                     Return Values       Returns the length of a field.            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-nullable.php","title":"ingres_field_nullable","description":"ingres_field_nullable   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_field_nullable \u2014 Test if a field is nullable          Description       bool ingres_field_nullable     ( resource $result    , int $index    )        Test if a field is nullable.      Note:     Related Configurations         See ingres.array_index_start     in Runtime Configuration                Parameters                    result                      The query result identifier                                index                      index is the field whose nullability will be        retrieved.                      The possible values of index depend upon        the value        of ingres.array_index_start.        If ingres.array_index_start        is 1 (the default)        then index must be        between 1 and the value returned        by ingres_num_fields(). If ingres.array_index_start        is 0 then index must        be between 0        and ingres_num_fields() -        1.                                     Return Values       ingres_field_nullable() returns TRUE if the    field can be set to the NULL value and FALSE if it cannot            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-proc-return.php","title":"ingres_fetch_proc_return","description":"ingres_fetch_proc_return   (PECL ingres >= 1.4.0)ingres_fetch_proc_return \u2014 Get the return value from a procedure call          Description       int ingres_fetch_proc_return     ( resource $result    )        This function is used to retrieve the return value following the execution    of an Ingres database procedure (stored procedure).       Note:          If used with a row-producing procedure, this function should be called after all the     rows from the procedure have been fetched using     ingres_fetch_array(),     ingres_fetch_object() or     ingres_fetch_row(). This function will eliminate any     rows yet to be fetched should there be any left over.                Parameters                    result                      The result identifier for a query                                     Return Values       Returns an integer if there is a return value otherwise it will    return NULL.            Examples            Example #1 Get the return value from a procedure call       <?php$link\u00a0=\u00a0ingres_connect($database);if\u00a0(\u00a0ingres_errno()\u00a0!=\u00a00\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0$error_text\u00a0=\u00a0ingres_error();\u00a0\u00a0\u00a0\u00a0die($error_text);}$result\u00a0=\u00a0ingres_query($link,\u00a0\"execute\u00a0procedure\u00a0php_proc\u00a0(value\u00a0=\u00a01000)\");if\u00a0(\u00a0ingres_errno()\u00a0!=\u00a00\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0$error_text\u00a0=\u00a0ingres_error();\u00a0\u00a0\u00a0\u00a0die($error_text);}echo\u00a0\"return\u00a0value\u00a0-\u00a0\"\u00a0.\u00a0ingres_fetch_proc_return($result)\u00a0.\u00a0\"\\n\";ingres_close($link);?>                         See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-precision.php","title":"ingres_field_precision","description":"ingres_field_precision   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_field_precision \u2014 Get the precision of a field          Description       int ingres_field_precision     ( resource $result    , int $index    )        ingres_field_precision() returns the precision    of a field. This value is used only for decimal, float, and money    SQL data types. For detailed information, see the Ingres OpenAPI    User Guide, Appendix \"Data Types\" in the Ingres documentation.      Note:     Related Configurations         See ingres.array_index_start     in Runtime Configuration                Parameters                    result                      The query result identifier                                index                      index is the field whose precision will be        retrieved.                      The possible values of index depend upon        the value        of ingres.array_index_start.        If ingres.array_index_start        is 1 (the default)        then index must be        between 1 and the value returned        by ingres_num_fields(). If ingres.array_index_start        is 0 then index must        be between 0        and ingres_num_fields() -        1.                                     Return Values       Returns the field precision as an integer            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-scale.php","title":"ingres_field_scale","description":"ingres_field_scale   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_field_scale \u2014 Get the scale of a field          Description       int ingres_field_scale     ( resource $result    , int $index    )        ingres_field_scale() returns the scale of a    field.  This value is used only for the decimal SQL data    type. For detailed information, see the Ingres OpenAPI User    Guide, Appendix \"Data Types\" in the Ingres documentation.      Note:     Related Configurations         See ingres.array_index_start     in Runtime Configuration                Parameters                    result                      The query result identifier                                index                      index is the field whose scale will be        retrieved.                      The possible values of index depend upon        the value        of ingres.array_index_start.        If ingres.array_index_start        is 1 (the default)        then index must be        between 1 and the value returned        by ingres_num_fields(). If ingres.array_index_start        is 0 then index must        be between 0        and ingres_num_fields() -        1.                                    Return Values       Returns the scale of the field, as an integer            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-type.php","title":"ingres_field_type","description":"ingres_field_type   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_field_type \u2014 Get the type of a field in a query result          Description       string ingres_field_type     ( resource $result    , int $index    )        Get the type of a field in a query result.      Note:     Related Configurations         See ingres.array_index_start     in Runtime Configuration                Parameters                    result                      The query result identifier                                index                      index is the field whose type will be        retrieved.                      The possible values of index depend upon        the value        of ingres.array_index_start.        If ingres.array_index_start        is 1 (the default)        then index must be        between 1 and the value returned        by ingres_num_fields(). If ingres.array_index_start        is 0 then index must        be between 0        and ingres_num_fields() -        1.                                     Return Values       ingres_field_type() returns the type of a    field in a query result or FALSE on failure.  Examples of    types returned are IIAPI_BYTE_TYPE,    IIAPI_CHA_TYPE, IIAPI_DTE_TYPE,    IIAPI_FLT_TYPE, IIAPI_INT_TYPE,    IIAPI_VCH_TYPE. Some of these types can map to more    than one SQL type depending on the length of the field (see    ingres_field_length()). For example    IIAPI_FLT_TYPE can be a float4 or a float8. For detailed    information, see the Ingres OpenAPI User Guide, Appendix     \"Data Types\" in the Ingres documentation.            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-next-error.php","title":"ingres_next_error","description":"ingres_next_error   (PECL ingres >= 2.0.0)ingres_next_error \u2014 Get the next Ingres error          Description       bool ingres_next_error     ([ resource $link   ] )        Get the next Ingres error for the last executed query. Each call to    ingres_next_error() can be followed by a call to    ingres_errno(), ingres_error()     or ingres_errsqlstate() to get the respective error    number, error text, or SQL STATE. While    ingres_next_error() returns TRUE, there are more errors    to fetch.            Parameters                    link                      The connection link identifier                                    Return Values       ingres_next_error() returns TRUE if there is another    error to retrieve or FALSE when there are no more errors            See Also            ingres_errno() - Get the last Ingres error number generated     ingres_error() - Get a meaningful error message for the last error generated     ingres_errsqlstate() - Get the last SQLSTATE error code generated"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-free-result.php","title":"ingres_free_result","description":"ingres_free_result   (PECL ingres >= 2.0.0)ingres_free_result \u2014 Free the resources associated with a result identifier          Description       bool ingres_free_result     ( resource $result    )                Parameters                    result                      The query result identifier                                    Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 Free a result resource       <?php$link\u00a0=\u00a0ingres_connect($database,\u00a0$user,\u00a0$password);$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0table\");while\u00a0($row\u00a0=\u00a0ingres_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}ingres_free_result($result);ingres_close($link)?>                        See Also            ingres_query() - Send an SQL query to Ingres"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-num-fields.php","title":"ingres_num_fields","description":"ingres_num_fields   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_num_fields \u2014 Get the number of fields returned by the last query          Description       int ingres_num_fields     ( resource $result    )        ingres_num_fields() returns the number of    fields in the results returned by the Ingres server after a call    to ingres_query().            Parameters                    result                      The query result identifier                                     Return Values       Returns the number of fields            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-num-rows.php","title":"ingres_num_rows","description":"ingres_num_rows   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_num_rows \u2014 Get the number of rows affected or returned by a query          Description       int ingres_num_rows     ( resource $result    )        This function primarily is meant to get the number of rows    modified in the database. However, it can be used to retrieve the number of    rows to fetch for a SELECT statement.      Note:          If scrollable cursors are disabled and     this function is called before     using ingres_fetch_array(),     ingres_fetch_object(), or     ingres_fetch_row(), the server will delete     the result&#039;s data and the script will be unable to get them.             Instead, you should retrieve the result&#039;s data using one of     these fetch functions in a loop until it returns FALSE,     indicating that no more results are available.                Parameters                    result                      The result identifier for a query                                     Return Values       For delete, insert, or update queries,    ingres_num_rows() returns the number of rows    affected by the query. For other queries,    ingres_num_rows() returns the number of rows    in the query&#039;s result.            See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-pconnect.php","title":"ingres_pconnect","description":"ingres_pconnect   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_pconnect \u2014 Open a persistent connection to an Ingres database          Description       resource ingres_pconnect     ([ string $database    [, string $username    [, string $password    [, array $options   ]]]] )        Open a persistent connection to an Ingres database.          There are only two differences between this function and     ingres_connect(): First, when connecting, the    function will initially try to find a (persistent) link that is    already opened with the same parameters.  If one is found, an    identifier for it will be returned instead of opening a new    connection. Second, the connection to the Ingres server will not    be closed when the execution of the script ends.  Instead, the    link will remain open for future use    (ingres_close() will not close links    established by ingres_pconnect()). This type    of link is therefore called \"persistent\".            Parameters                    database                      The database name. Must follow the syntax:                      [vnode::]dbname[\/svr_class]                                username                      The Ingres user name                                password                      The password associated with username                                options                      See ingres_connect() for the list of options that        can be passed                                     Return Values       Returns an Ingres link resource on success or FALSE on failure            See Also            ingres_connect() - Open a connection to an Ingres database     ingres_close() - Close an Ingres database connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-prepare.php","title":"ingres_prepare","description":"ingres_prepare   (PECL ingres >= 1.1.0)ingres_prepare \u2014 Prepare a query for later execution          Description       mixed ingres_prepare     ( resource $link    , string $query    )        Prepares a query for execution by ingres_execute().          The query becomes part of the currently open transaction.  If    there is no open transaction, ingres_query()    opens a new transaction. To close the transaction, you can     call either ingres_commit() to commit the changes    made to the database or ingres_rollback() to    cancel these changes. When the script ends, any open transaction    is rolled back (by calling    ingres_rollback()). You can also use    ingres_autocommit() before opening a new    transaction to have every SQL query immediately committed.       Note:     Related Configurations         See also the ingres.describe,     ingres.scrollable and     ingres.utf8 directives in      Runtime Configuration.                Parameters                    link                      The connection link identifier                                query                      A valid SQL query (see the Ingres SQL reference        guide) in the Ingres documentation.        See the query        parameter in ingres_query() for a list of SQL        statements which cannot be executed using        ingres_prepare()                                     Return Values       ingres_prepare() returns a query result identifier that    is used with ingres_execute() to execute the query. To see     if an error occurred, use ingres_errno(),     ingres_error(), or     ingres_errsqlstate().              See Also            ingres_unbuffered_query() - Send an unbuffered  SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array     ingres_commit() - Commit a transaction     ingres_rollback() - Roll back a transaction     ingres_autocommit() - Switch autocommit on or off     ingres_set_environment() - Set environment features controlling output options     ingres_errno() - Get the last Ingres error number generated     ingres_error() - Get a meaningful error message for the last error generated"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-rollback.php","title":"ingres_rollback","description":"ingres_rollback   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_rollback \u2014 Roll back a transaction          Description       bool ingres_rollback     ( resource $link    )        ingres_rollback() rolls back the currently    open transaction, actually cancelling all changes made to the    database during the transaction.          This closes the transaction. A new transaction can be opened by sending a    query with ingres_query().            Parameters                    link                      The connection link identifier                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            ingres_query() - Send an SQL query to Ingres     ingres_commit() - Commit a transaction     ingres_autocommit() - Switch autocommit on or off"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-result-seek.php","title":"ingres_result_seek","description":"ingres_result_seek   (PECL ingres >= 2.1.0)ingres_result_seek \u2014 Set the row position before fetching data          Description       bool ingres_result_seek     ( resource $result    , int $position    )        This function is used to position the cursor associated with the result    resource before issuing a fetch.  If ingres.array_index_start    is set to 0 then the first row is 0 else it is 1.    ingres_result_seek() can be used only with queries that    make use of scrollable    cursors. It cannot be used with    ingres_unbuffered_query().       Note:     Related Configurations         See also the ingres.scrollable     and ingres.array_index_start directives in      Runtime Configuration.                Parameters                    result                      The result identifier for a query                                position                      The row to position the cursor on. If ingres.array_index_start        is set to 0, then the first row is 0, else it is 1                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Position the cursor on the 3rd row       <?php$result=ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0airport\u00a0where\u00a0ap_ccode\u00a0=\u00a0'ES'\u00a0order\u00a0by\u00a0ap_place\u00a0asc\");\/*\u00a0goto\u00a0row\u00a03\u00a0*\/if\u00a0(!ingres_result_seek($result,\u00a03)){\u00a0\u00a0\u00a0\u00a0echo\u00a0ingres_errno()\u00a0.\u00a0\"\u00a0-\u00a0\"\u00a0.\u00a0ingres_error\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0die(\"i\u00a0died\");}else{\u00a0\u00a0\u00a0\u00a0$airport\u00a0=\u00a0ingres_fetch_object\u00a0($result);\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$airport->ap_iatacode\u00a0.\u00a0\"\u00a0-\u00a0\"\u00a0.\u00a0\u00a0$airport->ap_name\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0}}ingres_commit($link);?>                       See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-query.php","title":"ingres_query","description":"ingres_query   (PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres >= 1.0.0)ingres_query \u2014 Send an SQL query to Ingres          Description       mixed ingres_query     ( resource $link    , string $query    [, array $params    [, string $types   ]] )        ingres_query() sends the given    query to the Ingres server.           The query becomes part of the currently open transaction.  If    there is no open transaction, ingres_query()    opens a new transaction. To close the transaction, you can     call either ingres_commit() to commit the changes    made to the database or ingres_rollback() to    cancel these changes. When the script ends, any open transaction    is rolled back (by calling    ingres_rollback()). You can also use    ingres_autocommit() before opening a new    transaction to have every SQL query immediately committed.      Note:     Related Configurations         See also the ingres.describe,     ingres.scrollable and     ingres.utf8 directives in      Runtime Configuration                Parameters                    link                      The connection link identifier.                               query                      A valid SQL query (see the Ingres SQL reference        guide) in the Ingres documentation.                      Data inside the query should be properly escaped.                      The following types of SQL queries cannot be sent with this function:                                      close (see ingres_close())                                                commit (see ingres_commit())                                                 connect (see ingres_connect())                                                 disconnect (see ingres_close())                                      get dbevent                            prepare to commit                                       rollback (see ingres_rollback())                            savepoint                              set autocommit (see ingres_autocommit())                                      all cursor-related queries are unsupported                                                 params                      An array of parameter values to be used with the query                               types                      A string containing a sequence of types for the parameter values        passed. When ingres.describe        is enabled, this parameter can be ignored as the driver automatically        fetches the expected parameter types from the server.                                                    Type code           Ingres type                                                   a           BOOLEAN                                b           BYTE                                B           LONG BYTE\/BLOB                                c           CHAR                                d           DATE\/ANSIDATE\/TIMESTAMP\/TIME                                f           FLOAT                                i           INTEGER                                L           LONG TEXT                                m           MONEY                                M           LONG NVARCHAR                                n           NCHAR                                N           NVARCHAR                                t           TEXT                                v           VARCHAR                                V           LONG VARCHAR                                                                  Return Values       ingres_query() returns a query result identifier on    success else it returns FALSE. To see if an error    occurred use ingres_errno(),     ingres_error() or     ingres_errsqlstate().            Examples            Example #1 Send a simple select       <?php$link\u00a0=\u00a0ingres_connect(\"demodb\");$result\u00a0=\u00a0ingres_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0user_profile\");while\u00a0($row\u00a0=\u00a0ingres_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}?>                     Example #2 Passing query parameters to ingres_query()       <?php$link\u00a0=\u00a0ingres_connect(\"demodb\");$params[]\u00a0=\u00a0\"Emma\";$query\u00a0=\u00a0\"select\u00a0*\u00a0from\u00a0user_profile\u00a0where\u00a0up_first\u00a0=\u00a0?\";$result\u00a0=\u00a0ingres_query($link,\u00a0$query,\u00a0$params);while\u00a0($row\u00a0=\u00a0ingres_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}?>                     Example #3 Inserting a BLOB with parameter types       <?php$link\u00a0=\u00a0ingres_connect(\"demodb\");\/\/Open\u00a0a\u00a0photo$fh\u00a0=\u00a0fopen(\"photo.jpg\",\"r\");$blob_data\u00a0=\u00a0stream_get_contents($fh);fclose($fh);\/\/Prepare\u00a0parameters$params[]\u00a0=\u00a0$blob_data;$params[]\u00a0=\u00a01201;\/\/Define\u00a0parameter\u00a0types$param_types\u00a0=\u00a0\"Bi\";$query\u00a0=\u00a0\"update\u00a0user_profile\u00a0set\u00a0up_image\u00a0=\u00a0?\u00a0where\u00a0up_id\u00a0=\u00a0?\";$result\u00a0=\u00a0ingres_query($link,\u00a0$query\u00a0,\u00a0$params,\u00a0$param_types);if\u00a0(ingres_errno()){\u00a0\u00a0\u00a0\u00a0echo\u00a0ingres_errno()\u00a0.\u00a0\"-\"\u00a0.\u00a0ingres_error()\u00a0.\u00a0\"\\n\";}ingres_commit($link);ingres_close($link);?>                        See Also            ingres_unbuffered_query() - Send an unbuffered  SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array     ingres_commit() - Commit a transaction     ingres_rollback() - Roll back a transaction     ingres_autocommit() - Switch autocommit on or off     ingres_set_environment() - Set environment features controlling output options     ingres_errno() - Get the last Ingres error number generated     ingres_error() - Get a meaningful error message for the last error generated"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-set-environment.php","title":"ingres_set_environment","description":"ingres_set_environment   (PECL ingres >= 1.2.0)ingres_set_environment \u2014 Set environment features controlling output options          Description       bool ingres_set_environment     ( resource $link    , array $options    )        ingres_set_environment() is called to set environmental    options that affect the output of certain values from Ingres, such as the    timezone, date format, decimal character separator, and float precision.            Parameters                    link                      The connection link identifier                               options                      An enumerated array of option name\/value pairs. The following table        lists the option name and the expected type                                                                Option name            Option type            Description            Example                                                        date_century_boundary            integer            The threshold by which a 2-digit year is determined to be in            the current century or in the next century. Equivalent to II_DATE_CENTURY_BOUNDARY            50                                   timezone            string            Controls the timezone of the session. If not set, it will            default the value defined by II_TIMEZONE_NAME. If            II_TIMEZONE_NAME is not defined, NA-PACIFIC (GMT-8 with Daylight            Savings) is used.            UNITED-KINGDOM                                   date_format            integer            Sets the allowable input and output format for Ingres dates.            Defaults to the value defined by II_DATE_FORMAT. If II_DATE_FORMAT is            not set, the default date format is US, for example mm\/dd\/yy. Valid values            for date_format are:                           INGRES_DATE_DMY              INGRES_DATE_FINISH              INGRES_DATE_GERMAN              INGRES_DATE_ISO              INGRES_DATE_ISO4              INGRES_DATE_MDY              INGRES_DATE_MULTINATIONAL              INGRES_DATE_MULTINATIONAL4              INGRES_DATE_YMD              INGRES_DATE_US                                                  INGRES_DATE_ISO4                                   decimal_separator            string            The character identifier for decimal data            \",\"                                   money_lort            integer            Leading or trailing currency sign. Valid values for money_lort            are:                           INGRES_MONEY_LEADING              INGRES_MONEY_TRAILING                                                  INGRES_MONEY_LEADING                                   money_sign            string            The currency symbol to be used with the MONEY datatype            \u20ac                                   money_precision            integer            The precision of the MONEY datatype            2                                   float4_precision            integer            Precision of the FLOAT4 datatype            10                                   float8_precision            integer            Precision of the FLOAT8 data            10                                   blob_segment_length            integer            The amount of data in bytes to fetch at a time when retrieving            BLOB or CLOB data. Defaults to 4096 bytes when not set explicitly            8192                                                                             Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 Set date_format to ISO4       <?php$options\u00a0=\u00a0array(\u00a0\"date_format\"\u00a0=>\u00a0INGRES_DATE_ISO4\u00a0);if\u00a0(ingres_set_environment($link,\u00a0$options)){\u00a0\u00a0\u00a0\u00a0$result=ingres_query($link,\"select\u00a0date('now')\u00a0as\u00a0date\");\u00a0\u00a0\u00a0\u00a0while\u00a0(\u00a0$object\u00a0=\u00a0ingres_fetch_object\u00a0($result)\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$object->date.\"\\n\";\u00a0\u00a0\u00a0\u00a0}}?>                     Example #2 Set timezone to HONG-KONG       <?php$options\u00a0=\u00a0array(\u00a0\"timezone\"\u00a0=>\u00a0\"HONG-KONG\");if\u00a0(ingres_set_environment($link,\u00a0$options)){\u00a0\u00a0\u00a0\u00a0$result=ingres_query($link,\"select\u00a0date('now')\u00a0as\u00a0date\");\u00a0\u00a0\u00a0\u00a0while\u00a0(\u00a0$object\u00a0=\u00a0ingres_fetch_object\u00a0($result)\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$object->date.\"\\n\";\u00a0\u00a0\u00a0\u00a0}}?>                         See Also            ingres_connect() - Open a connection to an Ingres database     ingres_query() - Send an SQL query to Ingres"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-unbuffered-query.php","title":"ingres_unbuffered_query","description":"ingres_unbuffered_query   (No version information available, might only be in SVN)ingres_unbuffered_query \u2014 Send an unbuffered  SQL query to Ingres          Description       mixed ingres_unbuffered_query     ( resource $link    , string $query    [, array $params    [, string $types   ]] )        ingres_unbuffered_query() sends the given    query to the Ingres server.           The query becomes part of the currently open transaction.  If    there is no open transaction, ingres_unbuffered_query()    opens a new transaction. To close the transaction, you can     call either ingres_commit() to commit the changes    made to the database or ingres_rollback() to    cancel these changes. When the script ends, any open transaction    is rolled back (by calling    ingres_rollback()). You can also use    ingres_autocommit() before opening a new    transaction to have every SQL query immediately committed.    Ingres allows only a single unbuffered statement to be active at any    one time. The extension will close any active unbuffered statements before    executing any SQL. In addition you cannot use    ingres_result_seek() to position the row before    fetching.       Note:     Related Configurations         See also the ingres.describe     and ingres.utf8 directives in      Runtime Configuration.                Parameters                    link                      The connection link identifier                                query                      A valid SQL query (see the Ingres SQL reference        guide) in the Ingres documentation.        See the query        parameter in ingres_query() for a list of SQL        statements that cannot be executed via        ingres_unbuffered_query().                      Data inside the query should be properly escaped.                                params                      An array of parameter values to be used with the query                                types                      A string containing a sequence of types for the parameter values        passed. See the types parameter in        ingres_query() for the list of type codes.                                     Return Values       ingres_unbuffered_query() returns a query result identifier when    there are rows to fetch; else it returns FALSE when there are no rows, as    is the case of an INSERT, UPDATE, or DELETE statement. To see if an error    occurred, use ingres_errno(),     ingres_error(), or     ingres_errsqlstate().            Examples            Example #1 Issue a simple un-buffered select       <?php$link\u00a0=\u00a0ingres_connect(\"demodb\");$result\u00a0=\u00a0ingres_unbuffered_query($link,\u00a0\"select\u00a0*\u00a0from\u00a0user_profile\");while\u00a0($row\u00a0=\u00a0ingres_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}?>                     Example #2 Passing query parameters to ingres_unbuffered_query()       <?php$link\u00a0=\u00a0ingres_connect(\"demodb\");$params[]\u00a0=\u00a0\"Emma\";$query\u00a0=\u00a0\"select\u00a0*\u00a0from\u00a0user_profile\u00a0where\u00a0up_first\u00a0=\u00a0?\";$result\u00a0=\u00a0ingres_unbuffered_query($link,\u00a0$query,\u00a0$params);while\u00a0($row\u00a0=\u00a0ingres_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[2];}?>                     Example #3 Inserting a BLOB with parameter types       <?php$link\u00a0=\u00a0ingres_connect(\"demodb\");\/\/Open\u00a0a\u00a0photo$fh\u00a0=\u00a0fopen(\"photo.jpg\",\"r\");$blob_data\u00a0=\u00a0stream_get_contents($fh);fclose($fh);\/\/Prepare\u00a0parameters$params[]\u00a0=\u00a0$blob_data;$params[]\u00a0=\u00a01201;\/\/Define\u00a0parameter\u00a0types$param_types\u00a0=\u00a0\"Bi\";$query\u00a0=\u00a0\"update\u00a0user_profile\u00a0set\u00a0up_image\u00a0=\u00a0?\u00a0where\u00a0up_id\u00a0=\u00a0?\";$result\u00a0=\u00a0ingres_unbuffered_query($link,\u00a0$query\u00a0,\u00a0$params,\u00a0$param_types);if\u00a0(ingres_errno()){\u00a0\u00a0\u00a0\u00a0echo\u00a0ingres_errno()\u00a0.\u00a0\"-\"\u00a0.\u00a0ingres_error()\u00a0.\u00a0\"\\n\";}?>                        See Also            ingres_query() - Send an SQL query to Ingres     ingres_fetch_array() - Fetch a row of result into an array     ingres_fetch_assoc() - Fetch a row of result into an associative array     ingres_fetch_object() - Fetch a row of result into an object     ingres_fetch_row() - Fetch a row of result into an enumerated array     ingres_commit() - Commit a transaction     ingres_rollback() - Roll back a transaction     ingres_autocommit() - Switch autocommit on or off     ingres_set_environment() - Set environment features controlling output options     ingres_errno() - Get the last Ingres error number generated     ingres_error() - Get a meaningful error message for the last error generated"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-alerts.php","title":"imap_alerts","description":"imap_alerts   (PHP 4, PHP 5)imap_alerts \u2014 Returns all IMAP alert messages that have occurred        Description       array imap_alerts     ( void    )        Returns all of the IMAP alert messages generated since the last    imap_alerts() call, or the beginning of the page.           When imap_alerts() is called, the alert stack is    subsequently cleared. The IMAP specification requires that these messages    be passed to the user.           Return Values       Returns an array of all of the IMAP alert messages generated or FALSE if    no alert messages are available.           See Also            imap_errors() - Returns all of the IMAP errors that have occured"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-base64.php","title":"imap_base64","description":"imap_base64   (PHP 4, PHP 5)imap_base64 \u2014 Decode BASE64 encoded text        Description       string imap_base64     ( string $text    )        Decodes the given BASE-64 encoded text.            Parameters                    text                      The encoded text                                    Return Values       Returns the decoded message as a string.           See Also            imap_binary() - Convert an 8bit string to a base64 string     base64_encode() - Encodes data with MIME base64     base64_decode() - Decodes data encoded with MIME base64     \u00bb\u00a0RFC2045, Section 6.8"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-8bit.php","title":"imap_8bit","description":"imap_8bit   (PHP 4, PHP 5)imap_8bit \u2014 Convert an 8bit string to a quoted-printable string        Description       string imap_8bit     ( string $string    )        Convert an 8bit string to a quoted-printable string (according to    \u00bb\u00a0RFC2045, section 6.7).           Parameters                    string                      The 8bit string to convert                                    Return Values       Returns a quoted-printable string.           See Also            imap_qprint() - Convert a quoted-printable string to an 8 bit string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-append.php","title":"imap_append","description":"imap_append   (PHP 4, PHP 5)imap_append \u2014 Append a string message to a specified mailbox        Description       bool imap_append     ( resource $imap_stream    , string $mailbox    , string $message    [, string $options = NULL    [, string $internal_date = NULL   ]] )        Appends a string message to the specified mailbox.            Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                message                      The message to be append, as a string                      When talking to the Cyrus IMAP server, you must use \"\\r\\n\" as        your end-of-line terminator instead of \"\\n\" or the operation will        fail                                options                      If provided, the options will also be written        to the mailbox                                internal_date                      If this parameter is set, it will set the INTERNALDATE on the appended message.  The parameter should be a date string that conforms to the rfc2060 specifications for a date_time value.                                    Return Values       Returns TRUE on success or FALSE on failure.             Changelog                                 Version        Description                                    5.3.2                 Added INTERNALDATE support to imap_append.                                             Examples            Example #1 imap_append() example       <?php$stream\u00a0=\u00a0imap_open(\"{imap.example.org}INBOX.Drafts\",\u00a0\"username\",\u00a0\"password\");$check\u00a0=\u00a0imap_check($stream);echo\u00a0\"Msg\u00a0Count\u00a0before\u00a0append:\u00a0\".\u00a0$check->Nmsgs\u00a0.\u00a0\"\\n\";imap_append($stream,\u00a0\"{imap.example.org}INBOX.Drafts\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0,\u00a0\"From:\u00a0me@example.com\\r\\n\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"To:\u00a0you@example.com\\r\\n\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"Subject:\u00a0test\\r\\n\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"\\r\\n\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"this\u00a0is\u00a0a\u00a0test\u00a0message,\u00a0please\u00a0ignore\\r\\n\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);$check\u00a0=\u00a0imap_check($stream);echo\u00a0\"Msg\u00a0Count\u00a0after\u00a0append\u00a0:\u00a0\".\u00a0$check->Nmsgs\u00a0.\u00a0\"\\n\";imap_close($stream);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-binary.php","title":"imap_binary","description":"imap_binary   (PHP 4, PHP 5)imap_binary \u2014 Convert an 8bit string to a base64 string        Description       string imap_binary     ( string $string    )        Convert an 8bit string to a base64 string according to \u00bb\u00a0RFC2045, Section 6.8.           Parameters                    string                      The 8bit string                                    Return Values       Returns a base64 encoded string.           See Also            imap_base64() - Decode BASE64 encoded text"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-body.php","title":"imap_body","description":"imap_body   (PHP 4, PHP 5)imap_body \u2014 Read the message body        Description       string imap_body     ( resource $imap_stream    , int $msg_number    [, int $options = 0   ] )        imap_body() returns the body of the message,    numbered msg_number in the current    mailbox.          imap_body() will only return a verbatim copy of the    message body. To extract single parts of a multipart MIME-encoded    message you have to use imap_fetchstructure() to    analyze its structure and imap_fetchbody() to    extract a copy of a single body component.           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                options                      The optional options are a bit mask        with one or more of the following:                                      FT_UID - The msg_number is a UID                                                 FT_PEEK - Do not set the \\Seen flag if not already set                                                 FT_INTERNAL - The return string is in internal format, will           not canonicalize to CRLF.                                                               Return Values       Returns the body of the specified message, as a string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-bodystruct.php","title":"imap_bodystruct","description":"imap_bodystruct   (PHP 4, PHP 5)imap_bodystruct \u2014 Read the structure of a specified body section of a specific message        Description       object imap_bodystruct     ( resource $imap_stream    , int $msg_number    , string $section    )        Read the structure of a specified body section of a specific message.           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                section                      The body section to read                                    Return Values       Returns the information in an object, for a detailed description    of the object structure and properties see     imap_fetchstructure().           See Also            imap_fetchstructure() - Read the structure of a particular message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-check.php","title":"imap_check","description":"imap_check   (PHP 4, PHP 5)imap_check \u2014 Check current mailbox        Description       object imap_check     ( resource $imap_stream    )        Checks information about the current mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Returns the information in an object with following properties:                      Date - current system time formatted according to \u00bb\u00a0RFC2822                             Driver - protocol used to access this mailbox:       POP3, IMAP, NNTP                             Mailbox - the mailbox name                             Nmsgs - number of messages in the mailbox                             Recent - number of recent messages in the mailbox                         Returns FALSE on failure.           Examples            Example #1 imap_check() example       <?php$imap_obj\u00a0=\u00a0imap_check($imap_stream);var_dump($imap_obj);?>             The above example will output something similar to:       object(stdClass)(5) {   [\"Date\"]=>   string(37) \"Wed, 10 Dec 2003 17:56:54 +0100 (CET)\"   [\"Driver\"]=>   string(4) \"imap\"   [\"Mailbox\"]=>   string(54)   \"{www.example.com:143\/imap\/user=\"foo@example.com\"}INBOX\"   [\"Nmsgs\"]=>   int(1)   [\"Recent\"]=>   int(0) }"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-close.php","title":"imap_close","description":"imap_close   (PHP 4, PHP 5)imap_close \u2014 Close an IMAP stream        Description       bool imap_close     ( resource $imap_stream    [, int $flag = 0   ] )        Closes the imap stream.           Parameters               imap_stream An IMAP stream returned by imap_open().              flag                      If set to CL_EXPUNGE, the function will silently        expunge the mailbox before closing, removing all messages marked for        deletion. You can achieve the same thing by using        imap_expunge()                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_open() - Open an IMAP stream to a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-clearflag-full.php","title":"imap_clearflag_full","description":"imap_clearflag_full   (PHP 4, PHP 5)imap_clearflag_full \u2014 Clears flags on messages        Description       bool imap_clearflag_full     ( resource $imap_stream    , string $sequence    , string $flag    [, int $options = 0   ] )        This function causes a store to delete the specified    flag to the flags set for the    messages in the specified sequence.           Parameters               imap_stream An IMAP stream returned by imap_open().              sequence                      A sequence of message numbers. You can enumerate desired messages        with the X,Y syntax, or retrieve all messages         within an interval with the X:Y syntax                                flag                      The flags which you can unset are \"\\\\Seen\", \"\\\\Answered\", \"\\\\Flagged\",        \"\\\\Deleted\", and \"\\\\Draft\" (as defined by \u00bb\u00a0RFC2060)                                options                      options are a bit mask and may contain        the single option:                                      ST_UID - The sequence argument contains UIDs           instead of sequence numbers                                                               Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_setflag_full() - Sets flags on messages"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-create.php","title":"imap_create","description":"imap_create   (PHP 4, PHP 5)imap_create \u2014 Alias of imap_createmailbox()         Description       This function is an alias of:     imap_createmailbox()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-errors.php","title":"imap_errors","description":"imap_errors   (PHP 4, PHP 5)imap_errors \u2014 Returns all of the IMAP errors that have occured        Description       array imap_errors     ( void    )        Gets all of the IMAP errors (if any) that have occurred    during this page request or since the error stack was reset.          When imap_errors() is called, the error stack is    subsequently cleared.           Return Values       This function returns an array of all of the IMAP error messages    generated since the last imap_errors() call,    or the beginning of the page. Returns FALSE if no error messages are    available.            See Also            imap_last_error() - Gets the last IMAP error that occurred during this page request     imap_alerts() - Returns all IMAP alert messages that have occurred"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-delete.php","title":"imap_delete","description":"imap_delete   (PHP 4, PHP 5)imap_delete \u2014 Mark a message for deletion from current mailbox        Description       bool imap_delete     ( resource $imap_stream    , int $msg_number    [, int $options = 0   ] )        Marks messages listed in msg_number for deletion.    Messages marked for deletion will stay in the mailbox until either    imap_expunge() is called or    imap_close() is called with the optional parameter    CL_EXPUNGE.           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                options                      You can set the FT_UID which tells the function        to treat the msg_number argument as an        UID.                                    Return Values       Returns TRUE.           Examples            Example #1 imap_delete() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}INBOX\",\u00a0\"username\",\u00a0\"password\")\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$check\u00a0=\u00a0imap_mailboxmsginfo($mbox);echo\u00a0\"Messages\u00a0before\u00a0delete:\u00a0\"\u00a0.\u00a0$check->Nmsgs\u00a0.\u00a0\"<br\u00a0\/>\\n\";imap_delete($mbox,\u00a01);$check\u00a0=\u00a0imap_mailboxmsginfo($mbox);echo\u00a0\"Messages\u00a0after\u00a0\u00a0delete:\u00a0\"\u00a0.\u00a0$check->Nmsgs\u00a0.\u00a0\"<br\u00a0\/>\\n\";imap_expunge($mbox);$check\u00a0=\u00a0imap_mailboxmsginfo($mbox);echo\u00a0\"Messages\u00a0after\u00a0expunge:\u00a0\"\u00a0.\u00a0$check->Nmsgs\u00a0.\u00a0\"<br\u00a0\/>\\n\";imap_close($mbox);?>                       Notes   Note:          IMAP mailboxes do not have their message flags saved between     connections, so imap_expunge() must be called during     the same connection in order for messages marked for deletion to     actually be purged.               See Also            imap_undelete() - Unmark the message which is marked deleted     imap_expunge() - Delete all messages marked for deletion     imap_close() - Close an IMAP stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-createmailbox.php","title":"imap_createmailbox","description":"imap_createmailbox   (PHP 4, PHP 5)imap_createmailbox \u2014 Create a new mailbox        Description       bool imap_createmailbox     ( resource $imap_stream    , string $mailbox    )        Creates a new mailbox specified by mailbox.            Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information. Names containing international characters should be        encoded by imap_utf7_encode()                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 imap_createmailbox() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"username\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$name1\u00a0=\u00a0\"phpnewbox\";$name2\u00a0=\u00a0imap_utf7_encode(\"phpnewb\u00f6x\");\u00a0\/\/\u00a0phpnewb&w7Y-x$newname\u00a0=\u00a0$name1;echo\u00a0\"Newname\u00a0will\u00a0be\u00a0'$name1'<br\u00a0\/>\\n\";\/\/\u00a0we\u00a0will\u00a0now\u00a0create\u00a0a\u00a0new\u00a0mailbox\u00a0\"phptestbox\"\u00a0in\u00a0your\u00a0inbox\u00a0folder,\/\/\u00a0check\u00a0its\u00a0status\u00a0after\u00a0creation\u00a0and\u00a0finaly\u00a0remove\u00a0it\u00a0to\u00a0restore\/\/\u00a0your\u00a0inbox\u00a0to\u00a0its\u00a0initial\u00a0stateif\u00a0(@imap_createmailbox($mbox,\u00a0imap_utf7_encode(\"{imap.example.org}INBOX.$newname\")))\u00a0{\u00a0\u00a0\u00a0\u00a0$status\u00a0=\u00a0@imap_status($mbox,\u00a0\"{imap.example.org}INBOX.$newname\",\u00a0SA_ALL);\u00a0\u00a0\u00a0\u00a0if\u00a0($status)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"your\u00a0new\u00a0mailbox\u00a0'$name1'\u00a0has\u00a0the\u00a0following\u00a0status:<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Messages:\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->messages\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Recent:\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->recent\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unseen:\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->unseen\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"UIDnext:\u00a0\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->uidnext\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"UIDvalidity:\"\u00a0.\u00a0$status->uidvalidity\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(imap_renamemailbox($mbox,\u00a0\"{imap.example.org}INBOX.$newname\",\u00a0\"{imap.example.org}INBOX.$name2\"))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"renamed\u00a0new\u00a0mailbox\u00a0from\u00a0'$name1'\u00a0to\u00a0'$name2'<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$newname\u00a0=\u00a0$name2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"imap_renamemailbox\u00a0on\u00a0new\u00a0mailbox\u00a0failed:\u00a0\"\u00a0.\u00a0imap_last_error()\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"imap_status\u00a0on\u00a0new\u00a0mailbox\u00a0failed:\u00a0\"\u00a0.\u00a0imap_last_error()\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0if\u00a0(@imap_deletemailbox($mbox,\u00a0\"{imap.example.org}INBOX.$newname\"))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"new\u00a0mailbox\u00a0removed\u00a0to\u00a0restore\u00a0initial\u00a0state<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"imap_deletemailbox\u00a0on\u00a0new\u00a0mailbox\u00a0failed:\u00a0\"\u00a0.\u00a0implode(\"<br\u00a0\/>\\n\",\u00a0imap_errors())\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"could\u00a0not\u00a0create\u00a0new\u00a0mailbox:\u00a0\"\u00a0.\u00a0implode(\"<br\u00a0\/>\\n\",\u00a0imap_errors())\u00a0.\u00a0\"<br\u00a0\/>\\n\";}imap_close($mbox);?>                       See Also            imap_renamemailbox() - Rename an old mailbox to new mailbox     imap_deletemailbox() - Delete a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-deletemailbox.php","title":"imap_deletemailbox","description":"imap_deletemailbox   (PHP 4, PHP 5)imap_deletemailbox \u2014 Delete a mailbox        Description       bool imap_deletemailbox     ( resource $imap_stream    , string $mailbox    )        Deletes the specified mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_createmailbox() - Create a new mailbox     imap_renamemailbox() - Rename an old mailbox to new mailbox           imap_open() - Open an IMAP stream to a mailbox for the format of      mbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-expunge.php","title":"imap_expunge","description":"imap_expunge   (PHP 4, PHP 5)imap_expunge \u2014 Delete all messages marked for deletion        Description       bool imap_expunge     ( resource $imap_stream    )        Deletes all the messages marked for deletion by     imap_delete(), imap_mail_move(), or    imap_setflag_full().           Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Returns TRUE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchmime.php","title":"imap_fetchmime","description":"imap_fetchmime   (PHP 5 >= 5.3.6)imap_fetchmime \u2014 Fetch MIME headers for a particular section of the message        Description       string imap_fetchmime     ( resource $imap_stream    , int $msg_number    , string $section    [, int $options = 0   ] )        Fetch the MIME headers of a particular section of the body of the specified messages.            Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                section                      The part number. It is a string of integers delimited by period which        index into a body part list as per the IMAP4 specification                                options                      A bitmask with one or more of the following:                                      FT_UID - The msg_number is a UID                                                 FT_PEEK - Do not set the \\Seen flag if           not already set                                                 FT_INTERNAL - The return string is in           internal format, will not canonicalize to CRLF.                                                               Return Values       Returns the MIME headers of a particular section of the body of the specified messages as a    text string.           See Also            imap_fetchbody() - Fetch a particular section of the body of the message     imap_fetchstructure() - Read the structure of a particular message     imap_fetchheader() - Returns header for a message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchheader.php","title":"imap_fetchheader","description":"imap_fetchheader   (PHP 4, PHP 5)imap_fetchheader \u2014 Returns header for a message        Description       string imap_fetchheader     ( resource $imap_stream    , int $msg_number    [, int $options = 0   ] )        This function causes a fetch of the complete, unfiltered \u00bb\u00a0RFC2822 format header of the specified    message.           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                options                      The possible options are:                                      FT_UID - The msgno           argument is a UID                                                 FT_INTERNAL - The return string           is in \"internal\" format, without any attempt to           canonicalize to CRLF newlines                                                 FT_PREFETCHTEXT - The RFC822.TEXT           should be pre-fetched at the same time.  This avoids an           extra RTT on an IMAP connection if a full message text is           desired (e.g. in a \"save to local file\" operation)                                                               Return Values       Returns the header of the specified message as a text string.           See Also            imap_fetch_overview() - Read an overview of the information in the headers of the given message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetch-overview.php","title":"imap_fetch_overview","description":"imap_fetch_overview   (PHP 4, PHP 5)imap_fetch_overview \u2014 Read an overview of the information in the headers of the given message        Description       array imap_fetch_overview     ( resource $imap_stream    , string $sequence    [, int $options = 0   ] )        This function fetches mail headers for the given    sequence and returns an overview of their    contents.           Parameters               imap_stream An IMAP stream returned by imap_open().              sequence                      A message sequence description. You can enumerate desired messages        with the X,Y syntax, or retrieve all messages         within an interval with the X:Y syntax                                options                      sequence will contain a sequence of message        indices or UIDs, if this parameter is set to         FT_UID.                                     Return Values       Returns an array of objects describing one message header each.    The object will only define a property if it exists. The possible    properties are:                      subject - the messages subject                             from - who sent it                             to - recipient                             date - when was it sent                             message_id - Message-ID                             references - is a reference to this message id                             in_reply_to - is a reply to this message id                             size - size in bytes                             uid - UID the message has in the mailbox                             msgno - message sequence number in the mailbox                             recent - this message is flagged as recent                             flagged -  this message is flagged                             answered -  this message is flagged as answered                             deleted -  this message is flagged for deletion                             seen -  this message is flagged as already read                             draft -  this message is flagged as being a draft                          Examples            Example #1 imap_fetch_overview() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org:143}INBOX\",\u00a0\"username\",\u00a0\"password\")\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$MC\u00a0=\u00a0imap_check($mbox);\/\/\u00a0Fetch\u00a0an\u00a0overview\u00a0for\u00a0all\u00a0messages\u00a0in\u00a0INBOX$result\u00a0=\u00a0imap_fetch_overview($mbox,\"1:{$MC->Nmsgs}\",0);foreach\u00a0($result\u00a0as\u00a0$overview)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"#{$overview->msgno}\u00a0({$overview->date})\u00a0-\u00a0From:\u00a0{$overview->from}\u00a0\u00a0\u00a0\u00a0{$overview->subject}\\n\";}imap_close($mbox);?>                       See Also            imap_fetchheader() - Returns header for a message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchtext.php","title":"imap_fetchtext","description":"imap_fetchtext   (PHP 4, PHP 5)imap_fetchtext \u2014 Alias of imap_body()         Description       This function is an alias of:     imap_body()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchbody.php","title":"imap_fetchbody","description":"imap_fetchbody   (PHP 4, PHP 5)imap_fetchbody \u2014 Fetch a particular section of the body of the message        Description       string imap_fetchbody     ( resource $imap_stream    , int $msg_number    , string $section    [, int $options = 0   ] )        Fetch of a particular section of the body of the specified messages.     Body parts are not decoded by this function.           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                section                      The part number. It is a string of integers delimited by period which        index into a body part list as per the IMAP4 specification                                options                      A bitmask with one or more of the following:                                      FT_UID - The msg_number is a UID                                                 FT_PEEK - Do not set the \\Seen flag if           not already set                                                 FT_INTERNAL - The return string is in           internal format, will not canonicalize to CRLF.                                                               Return Values       Returns a particular section of the body of the specified messages as a    text string.           See Also            imap_savebody() - Save a specific body section to a file     imap_fetchstructure() - Read the structure of a particular message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-gc.php","title":"imap_gc","description":"imap_gc   (PHP 5 >= 5.3.0)imap_gc \u2014 Clears IMAP cache        Description       bool imap_gc     ( resource $imap_stream    , int $caches    )        Purges the cache of entries of a specific type.           Parameters                imap_stream An IMAP stream returned by imap_open().              caches                      Specifies the cache to purge. It may one or a combination        of the following constants:         IMAP_GC_ELT (message cache elements),         IMAP_GC_ENV (enveloppe and bodies),        IMAP_GC_TEXTS (texts).                                    Return Values      Returns TRUE on success or FALSE on failure.           Examples            Example #1 imap_gc() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org:143}\",\u00a0\"username\",\u00a0\"password\");imap_gc($mbox,\u00a0IMAP_GC_ELT);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchstructure.php","title":"imap_fetchstructure","description":"imap_fetchstructure   (PHP 4, PHP 5)imap_fetchstructure \u2014 Read the structure of a particular message        Description       object imap_fetchstructure     ( resource $imap_stream    , int $msg_number    [, int $options = 0   ] )        Fetches all the structured information for a given message.            Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                options                      This optional parameter only has a single option,         FT_UID, which tells the function to treat the        msg_number argument as a         UID.                                    Return Values       Returns an object includes the envelope, internal date, size, flags and    body structure along with a similar object for each mime attachment. The    structure of the returned objects is as follows:                     Returned Objects for imap_fetchstructure()                               type        Primary body type                       encoding        Body transfer encoding                       ifsubtype        TRUE if there is a subtype string                       subtype        MIME subtype                       ifdescription        TRUE if there is a description string                       description        Content description string                       ifid        TRUE if there is an identification string                       id        Identification string                       lines        Number of lines                       bytes        Number of bytes                       ifdisposition        TRUE if there is a disposition string                       disposition        Disposition string                       ifdparameters        TRUE if the dparameters array exists                       dparameters        An array of objects where each object has an         \"attribute\" and a \"value\"         property corresponding to the parameters on the         Content-disposition MIME         header.                       ifparameters        TRUE if the parameters array exists                       parameters        An array of objects where each object has an         \"attribute\" and a \"value\"         property.                       parts        An array of objects identical in structure to the top-level        object, each of which corresponds to a MIME body        part.                                        Primary body type (may vary with used library)                    0text        1multipart        2message        3application        4audio        5image        6video        7other                                   Transfer encodings (may vary with used library)                    07BIT        18BIT        2BINARY        3BASE64        4QUOTED-PRINTABLE        5OTHER                            See Also            imap_fetchbody() - Fetch a particular section of the body of the message     imap_bodystruct() - Read the structure of a specified body section of a specific message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-get-quotaroot.php","title":"imap_get_quotaroot","description":"imap_get_quotaroot   (PHP 4 >= 4.3.0, PHP 5)imap_get_quotaroot \u2014 Retrieve the quota settings per user        Description       array imap_get_quotaroot     ( resource $imap_stream    , string $quota_root    )        Retrieve the quota settings per user. The limit value represents the total    amount of space allowed for this user&#039;s total mailbox usage.  The usage    value represents the user&#039;s current total mailbox capacity.             Parameters               imap_stream An IMAP stream returned by imap_open().              quota_root                      quota_root should normally be in the form of        which mailbox (i.e. INBOX).                                    Return Values       Returns an array of integer values pertaining to the specified user    mailbox.  All values contain a key based upon the resource name, and a    corresponding array with the usage and limit values within.          This function will return FALSE in the case of call failure, and an    array of information about the connection upon an un-parsable response    from the server.           Examples            Example #1 imap_get_quotaroot() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"kalowsky\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$quota\u00a0=\u00a0imap_get_quotaroot($mbox,\u00a0\"INBOX\");if\u00a0(is_array($quota))\u00a0{\u00a0\u00a0\u00a0$storage\u00a0=\u00a0$quota_values['STORAGE'];\u00a0\u00a0\u00a0echo\u00a0\"STORAGE\u00a0usage\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$storage['usage'];\u00a0\u00a0\u00a0echo\u00a0\"STORAGE\u00a0limit\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$storage['limit'];\u00a0\u00a0\u00a0$message\u00a0=\u00a0$quota_values['MESSAGE'];\u00a0\u00a0\u00a0echo\u00a0\"MESSAGE\u00a0usage\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$message['usage'];\u00a0\u00a0\u00a0echo\u00a0\"MESSAGE\u00a0limit\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$message['limit'];\u00a0\u00a0\u00a0\/*\u00a0...\u00a0\u00a0*\/}imap_close($mbox);?>                       Notes       This function is currently only available to users of the c-client2000    or greater library.          The imap_stream should be opened as the user whose    mailbox you wish to check.           See Also            imap_open() - Open an IMAP stream to a mailbox     imap_set_quota() - Sets a quota for a given mailbox     imap_get_quota() - Retrieve the quota level settings, and usage statics per mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-getacl.php","title":"imap_getacl","description":"imap_getacl   (PHP 5)imap_getacl \u2014 Gets the ACL for a given mailbox        Description       array imap_getacl     ( resource $imap_stream    , string $mailbox    )        Gets the ACL for a given mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                    Return Values       Returns an associative array of \"folder\" => \"acl\" pairs.           Examples            Example #1 imap_getacl() example       <?phpprint_r(imap_getacl($conn_id,\u00a0'user.joecool'));?>             The above example will output something similar to:       Array (     [asubfolder] => lrswipcda     [anothersubfolder] => lrswipcda )                     Notes       This function is currently only available to users of the c-client2000    or greater library.           See Also            imap_setacl() - Sets the ACL for a giving mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-get-quota.php","title":"imap_get_quota","description":"imap_get_quota   (PHP 4 >= 4.0.5, PHP 5)imap_get_quota \u2014 Retrieve the quota level settings, and usage statics per mailbox        Description       array imap_get_quota     ( resource $imap_stream    , string $quota_root    )        Retrieve the quota level settings, and usage statics per mailbox.          For a non-admin user version of this function,    please see the imap_get_quotaroot() function of PHP.           Parameters               imap_stream An IMAP stream returned by imap_open().              quota_root                      quota_root should normally be in the form of        user.name where name is the mailbox you wish to        retrieve information about.                                    Return Values       Returns an array with integer values limit and usage for the given    mailbox.  The value of limit represents the total amount of space    allowed for this mailbox.  The usage value represents the mailboxes    current level of capacity.  Will return FALSE in the case of failure.          As of PHP 4.3, the function more properly reflects the    functionality as dictated by the \u00bb\u00a0RFC2087.    The array return value has changed to support an unlimited number of returned     resources (i.e.  messages, or sub-folders) with each named resource receiving    an individual array key.  Each key value then contains an another array with    the usage and limit values within it.          For backwards compatibility reasons, the original access methods are    still available for use, although it is suggested to update.           Examples            Example #1 imap_get_quota() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"mailadmin\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$quota_value\u00a0=\u00a0imap_get_quota($mbox,\u00a0\"user.kalowsky\");if\u00a0(is_array($quota_value))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Usage\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0$quota_value['usage'];\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Limit\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0$quota_value['limit'];}imap_close($mbox);?>                           Example #2 imap_get_quota() 4.3 or greater example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"mailadmin\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$quota_values\u00a0=\u00a0imap_get_quota($mbox,\u00a0\"user.kalowsky\");if\u00a0(is_array($quota_values))\u00a0{\u00a0\u00a0\u00a0$storage\u00a0=\u00a0$quota_values['STORAGE'];\u00a0\u00a0\u00a0echo\u00a0\"STORAGE\u00a0usage\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$storage['usage'];\u00a0\u00a0\u00a0echo\u00a0\"STORAGE\u00a0limit\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$storage['limit'];\u00a0\u00a0\u00a0$message\u00a0=\u00a0$quota_values['MESSAGE'];\u00a0\u00a0\u00a0echo\u00a0\"MESSAGE\u00a0usage\u00a0level\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$message['usage'];\u00a0\u00a0\u00a0echo\u00a0\"MESSAGE\u00a0limit\u00a0is:\u00a0\"\u00a0.\u00a0\u00a0$message['limit'];\u00a0\u00a0\u00a0\/*\u00a0...\u00a0\u00a0*\/}imap_close($mbox);?>                       Notes       This function is currently only available to users of the c-client2000    or greater library.          The given imap_stream must be opened as the mail    administrator, otherwise this function will fail.           See Also            imap_open() - Open an IMAP stream to a mailbox     imap_set_quota() - Sets a quota for a given mailbox     imap_get_quotaroot() - Retrieve the quota settings per user"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-getsubscribed.php","title":"imap_getsubscribed","description":"imap_getsubscribed   (PHP 4, PHP 5)imap_getsubscribed \u2014 List all the subscribed mailboxes        Description       array imap_getsubscribed     ( resource $imap_stream    , string $ref    , string $pattern    )        Gets information about the subscribed mailboxes.          Identical to imap_getmailboxes(), except that it only    returns mailboxes that the user is subscribed to.           Parameters               imap_stream An IMAP stream returned by imap_open().              ref                      ref should normally be just the server        specification as described in imap_open()                                pattern              Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: &#039;*&#039; and &#039;&#039;. &#039;*&#039; means to return all mailboxes. If you pass pattern as &#039;*&#039;, you will get a list of the entire mailbox hierarchy. &#039;&#039; means to return the current level only. &#039;&#039; as the pattern parameter will return only the top level mailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.                             Return Values       Returns an array of objects containing mailbox information. Each    object has the attributes name, specifying    the full name of the mailbox; delimiter,    which is the hierarchy delimiter for the part of the hierarchy    this mailbox is in; and    attributes. Attributes    is a bitmask that can be tested against:                      LATT_NOINFERIORS - This mailbox has no       \"children\" (there are no mailboxes below this one).                            LATT_NOSELECT - This is only a container,       not a mailbox - you cannot open it.                             LATT_MARKED - This mailbox is marked.       Only used by UW-IMAPD.                             LATT_UNMARKED - This mailbox is not marked.       Only used by UW-IMAPD."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-headers.php","title":"imap_headers","description":"imap_headers   (PHP 4, PHP 5)imap_headers \u2014 Returns headers for all messages in a mailbox        Description       array imap_headers     ( resource $imap_stream    )        Returns headers for all messages in a mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Returns an array of string formatted with header info. One    element per mail message."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-getmailboxes.php","title":"imap_getmailboxes","description":"imap_getmailboxes   (PHP 4, PHP 5)imap_getmailboxes \u2014 Read the list of mailboxes, returning detailed information on each one        Description       array imap_getmailboxes     ( resource $imap_stream    , string $ref    , string $pattern    )        Gets information on the mailboxes.           Parameters               imap_stream An IMAP stream returned by imap_open().              ref                      ref should normally be just the server        specification as described in imap_open()                                pattern              Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: &#039;*&#039; and &#039;&#039;. &#039;*&#039; means to return all mailboxes. If you pass pattern as &#039;*&#039;, you will get a list of the entire mailbox hierarchy. &#039;&#039; means to return the current level only. &#039;&#039; as the pattern parameter will return only the top level mailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.                             Return Values       Returns an array of objects containing mailbox information. Each    object has the attributes name, specifying    the full name of the mailbox; delimiter,    which is the hierarchy delimiter for the part of the hierarchy    this mailbox is in; and    attributes. Attributes    is a bitmask that can be tested against:                      LATT_NOINFERIORS - This mailbox contains, and may not contain any       \"children\" (there are no mailboxes below this one). Calling        imap_createmailbox() will not work on this mailbox.                            LATT_NOSELECT - This is only a container,       not a mailbox - you cannot open it.                             LATT_MARKED - This mailbox is marked. This means that it may        contain new messages since the last time it was checked. Not provided by all IMAP       servers.                             LATT_UNMARKED - This mailbox is not marked, does not contain new       messages.  If either MARKED or UNMARKED is       provided, you can assume the IMAP server  supports this feature for this mailbox.                          Examples            Example #1 imap_getmailboxes() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"username\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$list\u00a0=\u00a0imap_getmailboxes($mbox,\u00a0\"{imap.example.org}\",\u00a0\"*\");if\u00a0(is_array($list))\u00a0{\u00a0\u00a0\u00a0\u00a0foreach\u00a0($list\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"($key)\u00a0\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0imap_utf7_decode($val->name)\u00a0.\u00a0\",\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'\"\u00a0.\u00a0$val->delimiter\u00a0.\u00a0\"',\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$val->attributes\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"imap_getmailboxes\u00a0failed:\u00a0\"\u00a0.\u00a0imap_last_error()\u00a0.\u00a0\"\\n\";}imap_close($mbox);?>                       See Also            imap_getsubscribed() - List all the subscribed mailboxes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-header.php","title":"imap_header","description":"imap_header   (PHP 4, PHP 5)imap_header \u2014 Alias of imap_headerinfo()         Description       This function is an alias of:     imap_headerinfo()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-headerinfo.php","title":"imap_headerinfo","description":"imap_headerinfo   (PHP 4, PHP 5)imap_headerinfo \u2014 Read the header of the message        Description       object imap_headerinfo     ( resource $imap_stream    , int $msg_number    [, int $fromlength = 0    [, int $subjectlength = 0    [, string $defaulthost = NULL   ]]] )        Gets information about the given message number by reading its headers.           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                fromlength                      Number of characters for the fetchfrom property.        Must be greater than or equal to zero.                                subjectlength                      Number of characters for the fetchsubject property        Must be greater than or equal to zero.                                defaulthost                                                  Return Values       Returns the information in an object with following properties:                      toaddress - full to: line, up to 1024 characters                             to - an array of objects from the To: line, with the following        properties: personal, adl,       mailbox, and host                             fromaddress - full from: line, up to 1024 characters                             from - an array of objects from the From: line, with the following        properties: personal, adl,       mailbox, and host                             ccaddress - full cc: line, up to 1024 characters                             cc - an array of objects from the Cc: line, with the following        properties: personal, adl,       mailbox, and host                             bccaddress - full bcc: line, up to 1024 characters                             bcc - an array of objects from the Bcc: line, with the following        properties: personal, adl,       mailbox, and host                             reply_toaddress - full Reply-To: line, up to 1024 characters                             reply_to - an array of objects from the Reply-To: line, with the following       properties: personal, adl,       mailbox, and host                             senderaddress - full sender: line, up to 1024 characters                             sender - an array of objects from the Sender: line, with the following        properties: personal, adl,       mailbox, and host                             return_pathaddress - full Return-Path: line, up to 1024 characters                             return_path - an array of objects from the Return-Path: line, with the       following properties: personal,        adl, mailbox, and        host                             remail -                              date - The message date as found in its headers                             Date - Same as date                             subject - The message subject                             Subject - Same a subject                              in_reply_to -                              message_id -                              newsgroups -                              followup_to -                              references -                              Recent - R if recent and seen, N       if recent and not seen, &#039; &#039; if not recent.                             Unseen - U if not seen AND not recent, &#039; &#039; if seen       OR not seen and recent                             Flagged - F if flagged, &#039; &#039; if not flagged                             Answered - A if answered, &#039; &#039; if unanswered                             Deleted - D if deleted, &#039; &#039; if not deleted                             Draft - X if draft, &#039; &#039; if not draft                             Msgno - The message number                             MailDate -                              Size - The message size                             udate - mail message date in Unix time                             fetchfrom - from line formatted to fit fromlength       characters                             fetchsubject - subject line formatted to fit        subjectlength characters                          See Also            imap_fetch_overview() - Read an overview of the information in the headers of the given message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-last-error.php","title":"imap_last_error","description":"imap_last_error   (PHP 4, PHP 5)imap_last_error \u2014 Gets the last IMAP error that occurred during this page request        Description       string imap_last_error     ( void    )        Gets the full text of the last IMAP error message    that occurred on the current page. The error stack is untouched; calling     imap_last_error() subsequently, with no intervening    errors, will return the same error.            Return Values       Returns the full text of the last IMAP error message that occurred on the    current page. Returns FALSE if no error messages are available.           See Also            imap_errors() - Returns all of the IMAP errors that have occured"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-listmailbox.php","title":"imap_listmailbox","description":"imap_listmailbox   (PHP 4, PHP 5)imap_listmailbox \u2014 Alias of imap_list()         Description       This function is an alias of:     imap_list()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-list.php","title":"imap_list","description":"imap_list   (PHP 4, PHP 5)imap_list \u2014 Read the list of mailboxes        Description       array imap_list     ( resource $imap_stream    , string $ref    , string $pattern    )        Read the list of mailboxes.           Parameters               imap_stream An IMAP stream returned by imap_open().              ref                      ref should normally be just the server        specification as described in imap_open().                                pattern              Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: &#039;*&#039; and &#039;&#039;. &#039;*&#039; means to return all mailboxes. If you pass pattern as &#039;*&#039;, you will get a list of the entire mailbox hierarchy. &#039;&#039; means to return the current level only. &#039;&#039; as the pattern parameter will return only the top level mailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.                             Return Values       Returns an array containing the names of the mailboxes.           Examples            Example #1 imap_list() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"username\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$list\u00a0=\u00a0imap_list($mbox,\u00a0\"{imap.example.org}\",\u00a0\"*\");if\u00a0(is_array($list))\u00a0{\u00a0\u00a0\u00a0\u00a0foreach\u00a0($list\u00a0as\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0imap_utf7_decode($val)\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0}}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"imap_list\u00a0failed:\u00a0\"\u00a0.\u00a0imap_last_error()\u00a0.\u00a0\"\\n\";}imap_close($mbox);?>                       See Also            imap_getmailboxes() - Read the list of mailboxes, returning detailed information on each one     imap_lsub() - List all the subscribed mailboxes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-listsubscribed.php","title":"imap_listsubscribed","description":"imap_listsubscribed   (PHP 4, PHP 5)imap_listsubscribed \u2014 Alias of imap_lsub()         Description       This function is an alias of:     imap_lsub()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-listscan.php","title":"imap_listscan","description":"imap_listscan   (PHP 4, PHP 5)imap_listscan \u2014 Returns the list of mailboxes that matches the given text        Description       array imap_listscan     ( resource $imap_stream    , string $ref    , string $pattern    , string $content    )        Returns an array containing the names of the mailboxes that have    content in the text of the mailbox.          This function is similar to imap_listmailbox(),    but it will additionally check for the presence of the string    content inside the mailbox data.           Parameters               imap_stream An IMAP stream returned by imap_open().              ref                      ref should normally be just the server         specification as described in imap_open()                                pattern              Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: &#039;*&#039; and &#039;&#039;. &#039;*&#039; means to return all mailboxes. If you pass pattern as &#039;*&#039;, you will get a list of the entire mailbox hierarchy. &#039;&#039; means to return the current level only. &#039;&#039; as the pattern parameter will return only the top level mailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.                         content                      The searched string                                    Return Values       Returns an array containing the names of the mailboxes that have    content in the text of the mailbox.           See Also            imap_listmailbox() - Alias of imap_list     imap_search() - This function returns an array of messages matching the given search criteria"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-lsub.php","title":"imap_lsub","description":"imap_lsub   (PHP 4, PHP 5)imap_lsub \u2014 List all the subscribed mailboxes        Description       array imap_lsub     ( resource $imap_stream    , string $ref    , string $pattern    )        Gets an array of all the mailboxes that you have subscribed.           Parameters               imap_stream An IMAP stream returned by imap_open().              ref                      ref should normally be just the server         specification as described in imap_open()                                pattern              Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: &#039;*&#039; and &#039;&#039;. &#039;*&#039; means to return all mailboxes. If you pass pattern as &#039;*&#039;, you will get a list of the entire mailbox hierarchy. &#039;&#039; means to return the current level only. &#039;&#039; as the pattern parameter will return only the top level mailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.                             Return Values       Returns an array of all the subscribed mailboxes.           See Also            imap_list() - Read the list of mailboxes     imap_getmailboxes() - Read the list of mailboxes, returning detailed information on each one"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail-copy.php","title":"imap_mail_copy","description":"imap_mail_copy   (PHP 4, PHP 5)imap_mail_copy \u2014 Copy specified messages to a mailbox        Description       bool imap_mail_copy     ( resource $imap_stream    , string $msglist    , string $mailbox    [, int $options = 0   ] )        Copies mail messages specified by msglist    to specified mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              msglist                      msglist is a range not just message        numbers (as described in \u00bb\u00a0RFC2060).                                mailbox                      The mailbox name, see imap_open() for more        information                                options                      options is a bitmask of one or more of                                      CP_UID - the sequence numbers contain UIDS                                                 CP_MOVE - Delete the messages from           the current mailbox after copying                                                               Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_mail_move() - Move specified messages to a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail-compose.php","title":"imap_mail_compose","description":"imap_mail_compose   (PHP 4, PHP 5)imap_mail_compose \u2014 Create a MIME message based on given envelope and body sections        Description       string imap_mail_compose     ( array $envelope    , array $body    )        Create a MIME message based on the given envelope    and body sections.           Parameters                    envelope                      An associative array of headers fields. Valid keys are: \"remail\",        \"return_path\", \"date\", \"from\", \"reply_to\", \"in_reply_to\", \"subject\",        \"to\", \"cc\", \"bcc\", \"message_id\" and \"custom_headers\" (which contains        associative array of other headers).                                body                      An indexed array of bodies                      A body is an associative array which can consist of the following keys:        \"type\", \"encoding\", \"charset\", \"type.parameters\", \"subtype\", \"id\",        \"description\", \"disposition.type\", \"disposition\", \"contents.data\",        \"lines\", \"bytes\" and \"md5\".                                    Return Values       Returns the MIME message.           Examples            Example #1 imap_mail_compose() example       <?php$envelope[\"from\"]=\u00a0\"joe@example.com\";$envelope[\"to\"]\u00a0\u00a0=\u00a0\"foo@example.com\";$envelope[\"cc\"]\u00a0\u00a0=\u00a0\"bar@example.com\";$part1[\"type\"]\u00a0=\u00a0TYPEMULTIPART;$part1[\"subtype\"]\u00a0=\u00a0\"mixed\";$filename\u00a0=\u00a0\"\/tmp\/imap.c.gz\";$fp\u00a0=\u00a0fopen($filename,\u00a0\"r\");$contents\u00a0=\u00a0fread($fp,\u00a0filesize($filename));fclose($fp);$part2[\"type\"]\u00a0=\u00a0TYPEAPPLICATION;$part2[\"encoding\"]\u00a0=\u00a0ENCBINARY;$part2[\"subtype\"]\u00a0=\u00a0\"octet-stream\";$part2[\"description\"]\u00a0=\u00a0basename($filename);$part2[\"contents.data\"]\u00a0=\u00a0$contents;$part3[\"type\"]\u00a0=\u00a0TYPETEXT;$part3[\"subtype\"]\u00a0=\u00a0\"plain\";$part3[\"description\"]\u00a0=\u00a0\"description3\";$part3[\"contents.data\"]\u00a0=\u00a0\"contents.data3\\n\\n\\n\\t\";$body[1]\u00a0=\u00a0$part1;$body[2]\u00a0=\u00a0$part2;$body[3]\u00a0=\u00a0$part3;echo\u00a0nl2br(imap_mail_compose($envelope,\u00a0$body));?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail.php","title":"imap_mail","description":"imap_mail   (PHP 4, PHP 5)imap_mail \u2014 Send an email message        Description       bool imap_mail     ( string $to    , string $subject    , string $message    [, string $additional_headers = NULL    [, string $cc = NULL    [, string $bcc = NULL    [, string $rpath = NULL   ]]]] )        This function allows sending of emails with correct handling of    Cc and Bcc receivers.           The parameters to, cc    and bcc are all strings and are all parsed    as \u00bb\u00a0RFC822 address lists.           Parameters                    to                      The receiver                                subject                      The mail subject                                message                      The mail body                                additional_headers                      As string with additional headers to be set on the mail                                cc                                              bcc                      The receivers specified in bcc will get the        mail, but are excluded from the headers.                                rpath                      Use this parameter to specify return path upon mail delivery failure.        This is useful when using PHP as a mail client for multiple users.                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            mail() - Send mail"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mailboxmsginfo.php","title":"imap_mailboxmsginfo","description":"imap_mailboxmsginfo   (PHP 4, PHP 5)imap_mailboxmsginfo \u2014 Get information about the current mailbox        Description       object imap_mailboxmsginfo     ( resource $imap_stream    )        Checks the current mailbox status on the server. It is similar to    imap_status(), but will additionally sum up the size of    all messages in the mailbox, which will take some additional time to     execute.            Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Returns the information in an object with following properties:         Mailbox properties                          Date        date of last change (current datetime)                       Driver        driver                       Mailbox        name of the mailbox                       Nmsgs        number of messages                       Recent        number of recent messages                       Unread        number of unread messages                       Deleted        number of deleted messages                       Size        mailbox size                                  Returns FALSE on failure.           Examples            Example #1 imap_mailboxmsginfo() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org}INBOX\",\u00a0\"username\",\u00a0\"password\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$check\u00a0=\u00a0imap_mailboxmsginfo($mbox);if\u00a0($check)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Date:\u00a0\"\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0$check->Date\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Driver:\u00a0\"\u00a0\u00a0\u00a0.\u00a0$check->Driver\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Mailbox:\u00a0\"\u00a0\u00a0.\u00a0$check->Mailbox\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Messages:\u00a0\"\u00a0.\u00a0$check->Nmsgs\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Recent:\u00a0\"\u00a0\u00a0\u00a0.\u00a0$check->Recent\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unread:\u00a0\"\u00a0\u00a0\u00a0.\u00a0$check->Unread\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Deleted:\u00a0\"\u00a0\u00a0.\u00a0$check->Deleted\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Size:\u00a0\"\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0$check->Size\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\"\u00a0;}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"imap_check()\u00a0failed:\u00a0\"\u00a0.\u00a0imap_last_error()\u00a0.\u00a0\"<br\u00a0\/>\\n\";}imap_close($mbox);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail-move.php","title":"imap_mail_move","description":"imap_mail_move   (PHP 4, PHP 5)imap_mail_move \u2014 Move specified messages to a mailbox        Description       bool imap_mail_move     ( resource $imap_stream    , string $msglist    , string $mailbox    [, int $options = 0   ] )        Moves mail messages specified by msglist to the    specified mailbox.            Parameters               imap_stream An IMAP stream returned by imap_open().              msglist                      msglist is a range not just message numbers        (as described in \u00bb\u00a0RFC2060).                                mailbox                      The mailbox name, see imap_open() for more        information                                options                      options is a bitmask and may contain the single option:                                      CP_UID - the sequence numbers contain UIDS                                                                Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note:          imap_mail_move() will flag the original      mail with a delete flag, to successfully delete it a call to      the imap_expunge() function must be made.                See Also            imap_mail_copy() - Copy specified messages to a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-num-msg.php","title":"imap_num_msg","description":"imap_num_msg   (PHP 4, PHP 5)imap_num_msg \u2014 Gets the number of messages in the current mailbox        Description       int imap_num_msg     ( resource $imap_stream    )        Gets the number of messages in the current mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Return the number of messages in the current mailbox, as an integer.           See Also            imap_num_recent() - Gets the number of recent messages in current mailbox     imap_status() - Returns status information on a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-msgno.php","title":"imap_msgno","description":"imap_msgno   (PHP 4, PHP 5)imap_msgno \u2014 Gets the message sequence number for the given UID        Description       int imap_msgno     ( resource $imap_stream    , int $uid    )        Returns the message sequence number for the given     uid.          This function is the inverse of imap_uid().           Parameters               imap_stream An IMAP stream returned by imap_open().              uid                      The message UID                                    Return Values       Returns the message sequence number for the given     uid.           See Also            imap_uid() - This function returns the UID for the given message sequence number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mime-header-decode.php","title":"imap_mime_header_decode","description":"imap_mime_header_decode   (PHP 4, PHP 5)imap_mime_header_decode \u2014 Decode MIME header elements        Description       array imap_mime_header_decode     ( string $text    )        Decodes MIME message header extensions that are non ASCII text (see \u00bb\u00a0RFC2047).           Parameters                    text                      The MIME text                                    Return Values       The decoded elements are returned in an array of objects, where each    object has two properties, charset and     text.          If the element hasn&#039;t been encoded, and in other words is in    plain US-ASCII, the charset property of that element is    set to default.           Examples            Example #1 imap_mime_header_decode() example       <?php$text\u00a0=\u00a0\"=?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?=\u00a0<keld@example.com>\";$elements\u00a0=\u00a0imap_mime_header_decode($text);for\u00a0($i=0;\u00a0$i<count($elements);\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Charset:\u00a0{$elements[$i]->charset}\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Text:\u00a0{$elements[$i]->text}\\n\\n\";}?>             The above example will output:       Charset: ISO-8859-1 Text: Keld J\u00f8rn Simonsen  Charset: default Text:  <keld@example.com>                    In the above example we would have two elements, whereas the first    element had previously been encoded with ISO-8859-1, and the second    element would be plain US-ASCII.           See Also            imap_utf8() - Converts MIME-encoded text to UTF-8"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-num-recent.php","title":"imap_num_recent","description":"imap_num_recent   (PHP 4, PHP 5)imap_num_recent \u2014 Gets the number of recent messages in current mailbox        Description       int imap_num_recent     ( resource $imap_stream    )        Gets the number of recent messages in the current mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Returns the number of recent messages in the current mailbox, as an    integer.           See Also            imap_num_msg() - Gets the number of messages in the current mailbox     imap_status() - Returns status information on a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rename.php","title":"imap_rename","description":"imap_rename   (PHP 4, PHP 5)imap_rename \u2014 Alias of imap_renamemailbox()         Description       This function is an alias of:     imap_renamemailbox()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-ping.php","title":"imap_ping","description":"imap_ping   (PHP 4, PHP 5)imap_ping \u2014 Check if the IMAP stream is still active        Description       bool imap_ping     ( resource $imap_stream    )        imap_ping() pings the stream to see if it&#039;s still    active. It may discover new mail; this is the preferred method for a    periodic \"new mail check\" as well as a \"keep alive\" for servers which    have inactivity timeout.           Parameters               imap_stream An IMAP stream returned by imap_open().                  Return Values       Returns TRUE if the stream is still alive, FALSE otherwise.           Examples            Example #1 imap_ping() Example       <?php$imap\u00a0=\u00a0imap_open(\"{imap.example.org}\",\u00a0\"mailadmin\",\u00a0\"password\");\/\/\u00a0after\u00a0some\u00a0sleepingif\u00a0(!imap_ping($imap))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0do\u00a0some\u00a0stuff\u00a0to\u00a0reconnect}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-renamemailbox.php","title":"imap_renamemailbox","description":"imap_renamemailbox   (PHP 4, PHP 5)imap_renamemailbox \u2014 Rename an old mailbox to new mailbox        Description       bool imap_renamemailbox     ( resource $imap_stream    , string $old_mbox    , string $new_mbox    )        This function renames on old mailbox to new mailbox (see    imap_open() for the format of    mbox names).           Parameters               imap_stream An IMAP stream returned by imap_open().              old_mbox                      The old mailbox name, see imap_open() for more        information                                new_mbox                      The new mailbox name, see imap_open() for more        information                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_createmailbox() - Create a new mailbox     imap_deletemailbox() - Delete a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-qprint.php","title":"imap_qprint","description":"imap_qprint   (PHP 4, PHP 5)imap_qprint \u2014 Convert a quoted-printable string to an 8 bit string        Description       string imap_qprint     ( string $string    )        Convert a quoted-printable string to an 8 bit string according to \u00bb\u00a0RFC2045, section 6.7.           Parameters                    string                      A quoted-printable string                                    Return Values       Returns an 8 bits string.           See Also            imap_8bit() - Convert an 8bit string to a quoted-printable string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-open.php","title":"imap_open","description":"imap_open   (PHP 4, PHP 5)imap_open \u2014 Open an IMAP stream to a mailbox        Description       resource imap_open     ( string $mailbox    , string $username    , string $password    [, int $options = NIL    [, int $n_retries = 0    [, array $params = NULL   ]]] )        Opens an IMAP stream to a mailbox.          This function can also be used to open streams to POP3 and    NNTP servers, but some functions and features are only    available on IMAP servers.           Parameters                    mailbox                      A mailbox name consists of a server and a mailbox path on this server.        The special name INBOX stands for the current users        personal mailbox. Mailbox names that contain international characters        besides those in the printable ASCII space have to be encoded width        imap_utf7_encode().                      The server part, which is enclosed in &#039;{&#039; and &#039;}&#039;, consists of the servers        name or ip address, an optional port (prefixed by &#039;:&#039;), and an optional        protocol specification (prefixed by &#039;\/&#039;).                       The server part is mandatory in all mailbox        parameters.                       All names which start with { are remote names, and are        in the form \"{\" remote_system_name [\":\" port] [flags] \"}\"        [mailbox_name] where:                                      remote_system_name - Internet domain name or           bracketed IP address of server.                                                 port - optional TCP port number, default is the           default port for that service                                                 flags - optional flags, see following table.                                                 mailbox_name - remote mailbox name, default is INBOX                                                          Optional flags for names                                          Flag            Description                                                        \/service=service            mailbox access service, default is \"imap\"                                   \/user=user            remote user name for login on the server                                   \/authuser=user            remote authentication user; if specified this is the user name             whose password is used (e.g. administrator)                                   \/anonymous            remote access as anonymous user                                   \/debug            record protocol telemetry in application&#039;s debug log                                   \/secure            do not transmit a plaintext password over the network                                   \/imap, \/imap2,             \/imap2bis, \/imap4,             \/imap4rev1            equivalent to \/service=imap                                   \/pop3            equivalent to \/service=pop3                                   \/nntp            equivalent to \/service=nntp                                   \/norsh            do not use rsh or ssh to establish a preauthenticated IMAP             session                                   \/ssl            use the Secure Socket Layer to encrypt the session                                   \/validate-cert            validate certificates from TLS\/SSL server (this is the default             behavior)                                   \/novalidate-cert            do not validate certificates from TLS\/SSL server, needed if             server uses self-signed certificates                                   \/tls            force use of start-TLS to encrypt the session, and reject             connection to servers that do not support it                                   \/notls            do not do start-TLS to encrypt the session, even with servers             that support it                                   \/readonly            request read-only mailbox open (IMAP only; ignored on NNTP, and             an error with SMTP and POP3)                                                                        username                      The user name                                password                      The password associated with the username                                options                      The options are a bit mask with one or more of        the following:                                      OP_READONLY - Open mailbox read-only                                                 OP_ANONYMOUS - Don&#039;t use or update a           .newsrc for news (NNTP only)                                                 OP_HALFOPEN - For IMAP           and NNTP names, open a connection but           don&#039;t open a mailbox.                                                 CL_EXPUNGE - Expunge mailbox automatically upon mailbox close           (see also imap_delete() and           imap_expunge())                                                 OP_DEBUG - Debug protocol negotiations                                                 OP_SHORTCACHE - Short (elt-only) caching                                                 OP_SILENT - Don&#039;t pass up events (internal use)                                                 OP_PROTOTYPE - Return driver prototype                                                 OP_SECURE - Don&#039;t do non-secure authentication                                                           n_retries                      Number of maximum connect attempts                                params                      Connection parameters, the following (string) keys maybe used         to set one or more connection parameters:                                      DISABLE_AUTHENTICATOR - Disable authentication properties                                                               Return Values       Returns an IMAP stream on success or FALSE on error.            Changelog                                 Version        Description                                    5.3.2        params added                       5.2.0        n_retries added                                    Examples            Example #1 Different use of imap_open()       <?php\/\/\u00a0To\u00a0connect\u00a0to\u00a0an\u00a0IMAP\u00a0server\u00a0running\u00a0on\u00a0port\u00a0143\u00a0on\u00a0the\u00a0local\u00a0machine,\/\/\u00a0do\u00a0the\u00a0following:$mbox\u00a0=\u00a0imap_open(\"{localhost:143}INBOX\",\u00a0\"user_id\",\u00a0\"password\");\/\/\u00a0To\u00a0connect\u00a0to\u00a0a\u00a0POP3\u00a0server\u00a0on\u00a0port\u00a0110\u00a0on\u00a0the\u00a0local\u00a0server,\u00a0use:$mbox\u00a0=\u00a0imap_open\u00a0(\"{localhost:110\/pop3}INBOX\",\u00a0\"user_id\",\u00a0\"password\");\/\/\u00a0To\u00a0connect\u00a0to\u00a0an\u00a0SSL\u00a0IMAP\u00a0or\u00a0POP3\u00a0server,\u00a0add\u00a0\/ssl\u00a0after\u00a0the\u00a0protocol\/\/\u00a0specification:$mbox\u00a0=\u00a0imap_open\u00a0(\"{localhost:993\/imap\/ssl}INBOX\",\u00a0\"user_id\",\u00a0\"password\");\/\/\u00a0To\u00a0connect\u00a0to\u00a0an\u00a0SSL\u00a0IMAP\u00a0or\u00a0POP3\u00a0server\u00a0with\u00a0a\u00a0self-signed\u00a0certificate,\/\/\u00a0add\u00a0\/ssl\/novalidate-cert\u00a0after\u00a0the\u00a0protocol\u00a0specification:$mbox\u00a0=\u00a0imap_open\u00a0(\"{localhost:995\/pop3\/ssl\/novalidate-cert}\",\u00a0\"user_id\",\u00a0\"password\");\/\/\u00a0To\u00a0connect\u00a0to\u00a0an\u00a0NNTP\u00a0server\u00a0on\u00a0port\u00a0119\u00a0on\u00a0the\u00a0local\u00a0server,\u00a0use:$nntp\u00a0=\u00a0imap_open\u00a0(\"{localhost:119\/nntp}comp.test\",\u00a0\"\",\u00a0\"\");\/\/\u00a0To\u00a0connect\u00a0to\u00a0a\u00a0remote\u00a0server\u00a0replace\u00a0\"localhost\"\u00a0with\u00a0the\u00a0name\u00a0or\u00a0the\/\/\u00a0IP\u00a0address\u00a0of\u00a0the\u00a0server\u00a0you\u00a0want\u00a0to\u00a0connect\u00a0to.?>                     Example #2 imap_open() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org:143}\",\u00a0\"username\",\u00a0\"password\");echo\u00a0\"<h1>Mailboxes<\/h1>\\n\";$folders\u00a0=\u00a0imap_listmailbox($mbox,\u00a0\"{imap.example.org:143}\",\u00a0\"*\");if\u00a0($folders\u00a0==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Call\u00a0failed<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0foreach\u00a0($folders\u00a0as\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$val\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}}echo\u00a0\"<h1>Headers\u00a0in\u00a0INBOX<\/h1>\\n\";$headers\u00a0=\u00a0imap_headers($mbox);if\u00a0($headers\u00a0==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Call\u00a0failed<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0foreach\u00a0($headers\u00a0as\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$val\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}}imap_close($mbox);?>                       See Also            imap_close() - Close an IMAP stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-reopen.php","title":"imap_reopen","description":"imap_reopen   (PHP 4, PHP 5)imap_reopen \u2014 Reopen IMAP stream to new mailbox        Description       bool imap_reopen     ( resource $imap_stream    , string $mailbox    [, int $options = 0    [, int $n_retries = 0   ]] )        Reopens the specified stream to a new mailbox on an    IMAP or NNTP server.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                options                      The options are a bit mask with one or more of        the following:                                      OP_READONLY - Open mailbox read-only                                                 OP_ANONYMOUS - Don&#039;t use or update a           .newsrc for news (NNTP only)                                                 OP_HALFOPEN - For IMAP           and NNTP names, open a connection but           don&#039;t open a mailbox.                                                 OP_EXPUNGE - Silently expunge recycle stream                                                 CL_EXPUNGE - Expunge mailbox automatically upon mailbox close           (see also imap_delete() and           imap_expunge())                                                           n_retries                      Number of maximum connect attempts                                    Return Values       Returns TRUE if the stream is reopened, FALSE otherwise.            Changelog                                 Version        Description                                    5.2.0        n_retries added                                    Examples            Example #1 imap_reopen() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org:143}INBOX\",\u00a0\"username\",\u00a0\"password\")\u00a0or\u00a0die(implode(\",\u00a0\",\u00a0imap_errors()));\/\/\u00a0...imap_reopen($mbox,\u00a0\"{imap.example.org:143}INBOX.Sent\")\u00a0or\u00a0die(implode(\",\u00a0\",\u00a0imap_errors()));\/\/\u00a0..?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rfc822-write-address.php","title":"imap_rfc822_write_address","description":"imap_rfc822_write_address   (PHP 4, PHP 5)imap_rfc822_write_address \u2014 Returns a properly formatted email address given the mailbox, host, and personal info        Description       string imap_rfc822_write_address     ( string $mailbox    , string $host    , string $personal    )        Returns a properly formatted email address as defined in \u00bb\u00a0RFC2822 given the needed information.           Parameters                    mailbox                      The mailbox name, see imap_open() for more        information                                host                      The email host part                                personal                      The name of the account owner                                    Return Values       Returns a string properly formatted email address as defined in \u00bb\u00a0RFC2822.            Examples            Example #1 imap_rfc822_write_address() example       <?phpecho\u00a0imap_rfc822_write_address(\"hartmut\",\u00a0\"example.com\",\u00a0\"Hartmut\u00a0Holzgraefe\");?>             The above example will output:       Hartmut Holzgraefe <hartmut@example.com>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rfc822-parse-adrlist.php","title":"imap_rfc822_parse_adrlist","description":"imap_rfc822_parse_adrlist   (PHP 4, PHP 5)imap_rfc822_parse_adrlist \u2014 Parses an address string        Description       array imap_rfc822_parse_adrlist     ( string $address    , string $default_host    )        Parses the address string as defined in \u00bb\u00a0RFC2822 and for each address.           Parameters                    address                      A string containing addresses                                default_host                      The default host name                                    Return Values       Returns an array of objects. The objects properties are:                            mailbox  - the mailbox name (username)                             host - the host name                             personal - the personal name                             adl - at domain source route                          Examples            Example #1 imap_rfc822_parse_adrlist() example       <?php$address_string\u00a0=\u00a0\"Joe\u00a0Doe\u00a0<doe@example.com>,\u00a0postmaster@example.com,\u00a0root\";$address_array\u00a0\u00a0=\u00a0imap_rfc822_parse_adrlist($address_string,\u00a0\"example.com\");if\u00a0(!is_array($address_array)\u00a0||\u00a0count($address_array)\u00a0<\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\"something\u00a0is\u00a0wrong\\n\");}foreach\u00a0($address_array\u00a0as\u00a0$id\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"#\u00a0$id\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0\u00a0mailbox\u00a0:\u00a0\"\u00a0.\u00a0$val->mailbox\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0\u00a0host\u00a0\u00a0\u00a0\u00a0:\u00a0\"\u00a0.\u00a0$val->host\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0\u00a0personal:\u00a0\"\u00a0.\u00a0$val->personal\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0\u00a0adl\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0\"\u00a0.\u00a0$val->adl\u00a0.\u00a0\"\\n\";}?>             The above example will output:       # 0   mailbox : doe   host    : example.com   personal: Joe Doe   adl     :  # 1   mailbox : postmaster   host    : example.com   personal:    adl     :  # 2   mailbox : root   host    : example.com   personal:    adl     :                      See Also            imap_rfc822_parse_headers() - Parse mail headers from a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rfc822-parse-headers.php","title":"imap_rfc822_parse_headers","description":"imap_rfc822_parse_headers   (PHP 4, PHP 5)imap_rfc822_parse_headers \u2014 Parse mail headers from a string        Description       object imap_rfc822_parse_headers     ( string $headers    [, string $defaulthost = \"UNKNOWN\"   ] )        Gets an object of various header elements, similar to     imap_header().           Parameters                    headers                      The parsed headers data                                defaulthost                      The default host name                                    Return Values       Returns an object similar to the one returned by    imap_header(), except for the flags and other     properties that come from the IMAP server.            See Also            imap_rfc822_parse_adrlist() - Parses an address string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-savebody.php","title":"imap_savebody","description":"imap_savebody   (PHP 5 >= 5.1.3)imap_savebody \u2014 Save a specific body section to a file        Description       bool imap_savebody     ( resource $imap_stream    , mixed $file    , int $msg_number    [, string $part_number = \"\"    [, int $options = 0   ]] )        Saves a part or the whole body of the specified message.            Parameters               imap_stream An IMAP stream returned by imap_open().              file                      The path to the saved file as a string, or a valid file descriptor        returned by fopen().                                msg_number                      The message number                                part_number                      The part number. It is a string of integers delimited by period which        index into a body part list as per the IMAP4 specification                                options                      A bitmask with one or more of the following:                                      FT_UID - The msg_number is a UID                                                 FT_PEEK - Do not set the \\Seen flag if           not already set                                                 FT_INTERNAL - The return string is in           internal format, will not canonicalize to CRLF.                                                               Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_fetchbody() - Fetch a particular section of the body of the message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-scan.php","title":"imap_scan","description":"imap_scan   (PHP 4, PHP 5)imap_scan \u2014 Alias of imap_listscan()         Description       This function is an alias of:     imap_listscan()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-scanmailbox.php","title":"imap_scanmailbox","description":"imap_scanmailbox   (PHP 4, PHP 5)imap_scanmailbox \u2014 Alias of imap_listscan()         Description       This function is an alias of:     imap_listscan()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-set-quota.php","title":"imap_set_quota","description":"imap_set_quota   (PHP 4 >= 4.0.5, PHP 5)imap_set_quota \u2014 Sets a quota for a given mailbox        Description       bool imap_set_quota     ( resource $imap_stream    , string $quota_root    , int $quota_limit    )        Sets an upper limit quota on a per mailbox basis.            Parameters               imap_stream An IMAP stream returned by imap_open().              quota_root                      The mailbox to have a quota set. This should follow the IMAP standard        format for a mailbox: user.name.                                quota_limit                      The maximum size (in KB) for the quota_root                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 imap_set_quota() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org:143}\",\u00a0\"mailadmin\",\u00a0\"password\");if\u00a0(!imap_set_quota($mbox,\u00a0\"user.kalowsky\",\u00a03000))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0in\u00a0setting\u00a0quota\\n\";\u00a0\u00a0\u00a0\u00a0return;}imap_close($mbox);?>                       Notes       This function is currently only available to users of the c-client2000    or greater library.          The given imap_stream must be opened as the mail    administrator, other wise this function will fail.           See Also            imap_open() - Open an IMAP stream to a mailbox     imap_get_quota() - Retrieve the quota level settings, and usage statics per mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-setacl.php","title":"imap_setacl","description":"imap_setacl   (PHP 4 >= 4.0.7, PHP 5)imap_setacl \u2014 Sets the ACL for a giving mailbox        Description       bool imap_setacl     ( resource $imap_stream    , string $mailbox    , string $id    , string $rights    )        Sets the ACL for a giving mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                id                      The user to give the rights to.                                rights                      The rights to give to the user. Passing an empty string will delete        acl.                                    Return Values       Returns TRUE on success or FALSE on failure.           Notes       This function is currently only available to users of the c-client2000 or    greater library.           See Also            imap_getacl() - Gets the ACL for a given mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-search.php","title":"imap_search","description":"imap_search   (PHP 4, PHP 5)imap_search \u2014 This function returns an array of messages matching the given search criteria        Description       array imap_search     ( resource $imap_stream    , string $criteria    [, int $options = SE_FREE    [, string $charset = NIL   ]] )        This function performs a search on the mailbox currently opened    in the given IMAP stream.           For example, to match all unanswered messages sent by Mom, you&#039;d    use: \"UNANSWERED FROM mom\". Searches appear to be case    insensitive. This list of criteria is from a reading of the UW    c-client source code and may be incomplete or    inaccurate (see also \u00bb\u00a0RFC2060,     section 6.4.4).           Parameters               imap_stream An IMAP stream returned by imap_open().              criteria                      A string, delimited by spaces, in which the following keywords are        allowed. Any multi-word arguments (e.g.        FROM \"joey smith\") must be quoted. Results will match        all criteria entries.                                      ALL - return all messages matching the rest of the criteria                                                 ANSWERED - match messages with the \\\\ANSWERED flag set                                                 BCC \"string\" - match messages with \"string\" in the Bcc: field                                                 BEFORE \"date\" - match messages with Date: before \"date\"                                                 BODY \"string\" - match messages with \"string\" in the body of the message                                                 CC \"string\" - match messages with \"string\" in the Cc: field                                                 DELETED - match deleted messages                                                 FLAGGED - match messages with the \\\\FLAGGED (sometimes           referred to as Important or Urgent) flag set                                                 FROM \"string\" - match messages with \"string\" in the From: field                                                 KEYWORD \"string\" - match messages with \"string\" as a keyword                                                 NEW - match new messages                                                 OLD - match old messages                                                 ON \"date\" - match messages with Date: matching \"date\"                                                 RECENT - match messages with the \\\\RECENT flag set                                                 SEEN - match messages that have been read (the \\\\SEEN flag is set)                                                 SINCE \"date\" - match messages with Date: after \"date\"                                                 SUBJECT \"string\" - match messages with \"string\" in the Subject:                                                 TEXT \"string\" - match messages with text \"string\"                                                 TO \"string\" - match messages with \"string\" in the To:                                                 UNANSWERED - match messages that have not been answered                                                 UNDELETED - match messages that are not deleted                                                 UNFLAGGED - match messages that are not flagged                                                 UNKEYWORD \"string\" - match messages that do not have the           keyword \"string\"                                                 UNSEEN - match messages which have not been read yet                                                           options                      Valid values for options are         SE_UID, which causes the returned array to        contain UIDs instead of messages sequence numbers.                                charset                                                  Return Values       Returns an array of message numbers or UIDs.          Return FALSE if it does not understand the search    criteria or no messages have been found.           Changelog                                 Version        Description                                    4.3.3                 The charset parameter was added                                            Examples       Example #1 imap_search() example      <?php$conn\u00a0\u00a0\u00a0=\u00a0imap_open('{imap.example.com:993\/imap\/ssl}INBOX',\u00a0'foo@example.com',\u00a0'pass123',\u00a0OP_READONLY);$some\u00a0\u00a0\u00a0=\u00a0imap_search($conn,\u00a0'SUBJECT\u00a0\"HOWTO\u00a0be\u00a0Awesome\"\u00a0SINCE\u00a0\"8\u00a0August\u00a02008\"',\u00a0SE_UID);$msgnos\u00a0=\u00a0imap_search($conn,\u00a0'ALL');$uids\u00a0\u00a0\u00a0=\u00a0imap_search($conn,\u00a0'ALL',\u00a0SE_UID);print_r($some);print_r($msgnos);print_r($uids);?>           The above example will output something similar to:      Array (     [0] => 4     [1] => 6     [2] => 11 ) Array (     [0] => 1     [1] => 2     [2] => 3     [3] => 4     [4] => 5     [5] => 6 ) Array (     [0] => 1     [1] => 4     [2] => 6     [3] => 8     [4] => 11     [5] => 12 )                 See Also            imap_listscan() - Returns the list of mailboxes that matches the given text"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-setflag-full.php","title":"imap_setflag_full","description":"imap_setflag_full   (PHP 4, PHP 5)imap_setflag_full \u2014 Sets flags on messages        Description       bool imap_setflag_full     ( resource $imap_stream    , string $sequence    , string $flag    [, int $options = NIL   ] )        Causes a store to add the specified flag to the    flags set for the messages in the specified     sequence.           Parameters               imap_stream An IMAP stream returned by imap_open().              sequence                      A sequence of message numbers. You can enumerate desired messages        with the X,Y syntax, or retrieve all messages         within an interval with the X:Y syntax                                flag                      The flags which you can set are \\Seen,         \\Answered, \\Flagged,        \\Deleted, and \\Draft as        defined by \u00bb\u00a0RFC2060.                                options                      A bit mask that may contain the single option:                                      ST_UID - The sequence argument contains UIDs           instead of sequence numbers                                                               Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 imap_setflag_full() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.org:143}\",\u00a0\"username\",\u00a0\"password\")\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$status\u00a0=\u00a0imap_setflag_full($mbox,\u00a0\"2,5\",\u00a0\"\\\\Seen\u00a0\\\\Flagged\");echo\u00a0gettype($status)\u00a0.\u00a0\"\\n\";echo\u00a0$status\u00a0.\u00a0\"\\n\";imap_close($mbox);?>                       See Also            imap_clearflag_full() - Clears flags on messages"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-sort.php","title":"imap_sort","description":"imap_sort   (PHP 4, PHP 5)imap_sort \u2014 Gets and sort messages        Description       array imap_sort     ( resource $imap_stream    , int $criteria    , int $reverse    [, int $options = 0    [, string $search_criteria = NULL    [, string $charset = NIL   ]]] )        Gets and sorts message numbers by the given parameters.           Parameters               imap_stream An IMAP stream returned by imap_open().              criteria                      Criteria can be one (and only one) of the following:                                      SORTDATE - message Date                                                 SORTARRIVAL - arrival date                                                 SORTFROM - mailbox in first From address                                                 SORTSUBJECT - message subject                                                 SORTTO - mailbox in first To address                                                 SORTCC - mailbox in first cc address                                                 SORTSIZE - size of message in octets                                                           reverse                      Set this to 1 for reverse sorting                                options                      The options are a bitmask of one or more of the        following:                                      SE_UID - Return UIDs instead of sequence numbers                                                 SE_NOPREFETCH - Don&#039;t prefetch searched messages                                                           search_criteria                                              charset                                                  Return Values       Returns an array of message numbers sorted by the given    parameters.           Changelog                                 Version        Description                                    4.3.3                 The charset parameter was added"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-subscribe.php","title":"imap_subscribe","description":"imap_subscribe   (PHP 4, PHP 5)imap_subscribe \u2014 Subscribe to a mailbox        Description       bool imap_subscribe     ( resource $imap_stream    , string $mailbox    )        Subscribe to a new mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_unsubscribe() - Unsubscribe from a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-status.php","title":"imap_status","description":"imap_status   (PHP 4, PHP 5)imap_status \u2014 Returns status information on a mailbox        Description       object imap_status     ( resource $imap_stream    , string $mailbox    , int $options    )        Gets status information about the given mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                options                      Valid flags are:                                      SA_MESSAGES - set $status-messages to the           number of messages in the mailbox                                                 SA_RECENT - set $status-recent to the number           of recent messages in the mailbox                                                 SA_UNSEEN - set $status-unseen to the number           of unseen (new) messages in the mailbox                                                 SA_UIDNEXT - set $status-uidnext to the next           uid to be used in the mailbox                                                 SA_UIDVALIDITY - set $status-uidvalidity to a           constant that changes when uids for the mailbox may no longer be           valid                                                 SA_ALL - set all of the above                                                               Return Values       This function returns an object containing status information.    The object has the following properties: messages,    recent, unseen,     uidnext, and uidvalidity.            flags is also set, which contains a bitmask which can    be checked against any of the above constants.           Examples            Example #1 imap_status() example       <?php$mbox\u00a0=\u00a0imap_open(\"{imap.example.com}\",\u00a0\"username\",\u00a0\"password\",\u00a0OP_HALFOPEN)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"can't\u00a0connect:\u00a0\"\u00a0.\u00a0imap_last_error());$status\u00a0=\u00a0imap_status($mbox,\u00a0\"{imap.example.org}INBOX\",\u00a0SA_ALL);if\u00a0($status)\u00a0{\u00a0\u00a0echo\u00a0\"Messages:\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->messages\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0echo\u00a0\"Recent:\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->recent\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0echo\u00a0\"Unseen:\u00a0\u00a0\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->unseen\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0echo\u00a0\"UIDnext:\u00a0\u00a0\u00a0\u00a0\"\u00a0.\u00a0$status->uidnext\u00a0\u00a0\u00a0\u00a0\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0echo\u00a0\"UIDvalidity:\"\u00a0.\u00a0$status->uidvalidity\u00a0.\u00a0\"<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0echo\u00a0\"imap_status\u00a0failed:\u00a0\"\u00a0.\u00a0imap_last_error()\u00a0.\u00a0\"\\n\";}imap_close($mbox);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-thread.php","title":"imap_thread","description":"imap_thread   (PHP 4 >= 4.0.7, PHP 5)imap_thread \u2014 Returns a tree of threaded message        Description       array imap_thread     ( resource $imap_stream    [, int $options = SE_FREE   ] )        Gets a tree of a threaded message.           Parameters               imap_stream An IMAP stream returned by imap_open().              options                                                  Return Values       imap_thread() returns an associative array containing    a tree of messages threaded by REFERENCES, or FALSE    on error.          Every message in the current mailbox will be represented by three entries    in the resulting array:               $thread[\"XX.num\"] - current message number                $thread[\"XX.next\"]                $thread[\"XX.branch\"]                    Examples            Example #1 imap_thread() Example       <?php\/\/\u00a0Here\u00a0we're\u00a0outputting\u00a0the\u00a0threads\u00a0of\u00a0a\u00a0newsgroup,\u00a0in\u00a0HTML$nntp\u00a0=\u00a0imap_open('{news.example.com:119\/nntp}some.newsgroup',\u00a0'',\u00a0'');$threads\u00a0=\u00a0imap_thread($nntp);foreach\u00a0($threads\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0$tree\u00a0=\u00a0explode('.',\u00a0$key);\u00a0\u00a0if\u00a0($tree[1]\u00a0==\u00a0'num')\u00a0{\u00a0\u00a0\u00a0\u00a0$header\u00a0=\u00a0imap_headerinfo($nntp,\u00a0$val);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<ul>\\n\\t<li>\"\u00a0.\u00a0$header->fromaddress\u00a0.\u00a0\"\\n\";\u00a0\u00a0}\u00a0elseif\u00a0($tree[1]\u00a0==\u00a0'branch')\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\t<\/li>\\n<\/ul>\\n\";\u00a0\u00a0}}imap_close($nntp);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-timeout.php","title":"imap_timeout","description":"imap_timeout   (PHP 4 >= 4.3.3, PHP 5)imap_timeout \u2014 Set or fetch imap timeout        Description       mixed imap_timeout     ( int $timeout_type    [, int $timeout = -1   ] )        Sets or fetches the imap timeout.           Parameters                    timeout_type                      One of the following:        IMAP_OPENTIMEOUT,        IMAP_READTIMEOUT,        IMAP_WRITETIMEOUT, or        IMAP_CLOSETIMEOUT.                                timeout                      The timeout, in seconds.                                    Return Values       If the timeout parameter is set, this function    returns TRUE on success and FALSE on failure.          If timeout  is not provided or evaluates to -1,    the current timeout value of timeout_type is    returned as an integer.           Examples            Example #1 imap_timeout() example       <?phpecho\u00a0\"The\u00a0current\u00a0read\u00a0timeout\u00a0is\u00a0\"\u00a0.\u00a0imap_timeout(IMAP_READTIMEOUT)\u00a0.\u00a0\"\\n\";?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-unsubscribe.php","title":"imap_unsubscribe","description":"imap_unsubscribe   (PHP 4, PHP 5)imap_unsubscribe \u2014 Unsubscribe from a mailbox        Description       bool imap_unsubscribe     ( resource $imap_stream    , string $mailbox    )        Unsubscribe from the specified mailbox.           Parameters               imap_stream An IMAP stream returned by imap_open().              mailbox                      The mailbox name, see imap_open() for more        information                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_subscribe() - Subscribe to a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-undelete.php","title":"imap_undelete","description":"imap_undelete   (PHP 4, PHP 5)imap_undelete \u2014 Unmark the message which is marked deleted        Description       bool imap_undelete     ( resource $imap_stream    , int $msg_number    [, int $flags = 0   ] )        Removes the deletion flag for a specified message, which is set by    imap_delete() or imap_mail_move().           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number                                flags                                                  Return Values       Returns TRUE on success or FALSE on failure.           See Also            imap_delete() - Mark a message for deletion from current mailbox     imap_mail_move() - Move specified messages to a mailbox"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-uid.php","title":"imap_uid","description":"imap_uid   (PHP 4, PHP 5)imap_uid \u2014 This function returns the UID for the given message sequence number        Description       int imap_uid     ( resource $imap_stream    , int $msg_number    )        This function returns the UID for the given message sequence    number. An UID is a unique identifier that will not change over    time while a message sequence number may change whenever the    content of the mailbox changes.          This function is the inverse of imap_msgno().           Parameters               imap_stream An IMAP stream returned by imap_open().              msg_number                      The message number.                                    Return Values       The UID of the given message.           Notes   Note:          This function is not supported by POP3 mailboxes.               See Also            imap_msgno() - Gets the message sequence number for the given UID"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-utf7-decode.php","title":"imap_utf7_decode","description":"imap_utf7_decode   (PHP 4, PHP 5)imap_utf7_decode \u2014 Decodes a modified UTF-7 encoded string        Description       string imap_utf7_decode     ( string $text    )        Decodes modified UTF-7 text into ISO-8859-1 string.          This function is needed to decode mailbox names that contain certain    characters which are not in range of printable ASCII characters.           Parameters                    text                      A modified UTF-7 encoding string, as defined in \u00bb\u00a0RFC 2060, section 5.1.3 (original UTF-7        was defined in \u00bb\u00a0RFC1642).                                    Return Values       Returns a string that is encoded in ISO-8859-1 and consists of the same    sequence of characters in text, or FALSE    if text contains invalid modified UTF-7 sequence    or text contains a character that is not part of    ISO-8859-1 character set.           See Also            imap_utf7_encode() - Converts ISO-8859-1 string to modified UTF-7 text"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-utf7-encode.php","title":"imap_utf7_encode","description":"imap_utf7_encode   (PHP 4, PHP 5)imap_utf7_encode \u2014 Converts ISO-8859-1 string to modified UTF-7 text        Description       string imap_utf7_encode     ( string $data    )        Converts data to modified UTF-7 text.          This is needed to encode mailbox names that contain certain characters    which are not in range of printable ASCII characters.           Parameters                    data                      An ISO-8859-1 string.                                    Return Values       Returns data encoded with the modified UTF-7    encoding as defined in \u00bb\u00a0RFC 2060,     section 5.1.3 (original UTF-7 was defined in \u00bb\u00a0RFC1642).           See Also            imap_utf7_decode() - Decodes a modified UTF-7 encoded string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-utf8.php","title":"imap_utf8","description":"imap_utf8   (PHP 4, PHP 5)imap_utf8 \u2014 Converts MIME-encoded text to UTF-8        Description       string imap_utf8     ( string $mime_encoded_text    )        Converts the given mime_encoded_text to    UTF-8.            Parameters                    mime_encoded_text                      A MIME encoded string. MIME encoding method and the UTF-8         specification are described in \u00bb\u00a0RFC2047 and \u00bb\u00a0RFC2044 respectively.                                    Return Values       Returns an UTF-8 encoded string.           See Also            imap_mime_header_decode() - Decode MIME header elements"},{"url":"http:\/\/www.php.net\/manual\/en\/function.json-last-error.php","title":"json_last_error","description":"json_last_error   (PHP 5 >= 5.3.0)json_last_error \u2014 Returns the last error occurred         Description       int json_last_error     ( void    )        Returns the last error (if any) occurred during the last JSON encoding\/decoding.            Parameters   This function has no parameters.         Return Values       Returns an integer, the value can be one of the following     constants:           JSON error codes                      Constant       Meaning       Availability                               JSON_ERROR_NONE       No error has occurred       \u00a0                    JSON_ERROR_DEPTH       The maximum stack depth has been exceeded       \u00a0                    JSON_ERROR_STATE_MISMATCH       Invalid or malformed JSON       \u00a0                    JSON_ERROR_CTRL_CHAR       Control character error, possibly incorrectly encoded       \u00a0                    JSON_ERROR_SYNTAX       Syntax error       \u00a0                    JSON_ERROR_UTF8       Malformed UTF-8 characters, possibly incorrectly encoded       PHP 5.3.3                             Examples            Example #1 json_last_error() example       <?php\/\/\u00a0A\u00a0valid\u00a0json\u00a0string$json[]\u00a0=\u00a0'{\"Organization\":\u00a0\"PHP\u00a0Documentation\u00a0Team\"}';\/\/\u00a0An\u00a0invalid\u00a0json\u00a0string\u00a0which\u00a0will\u00a0cause\u00a0an\u00a0syntax\u00a0\/\/\u00a0error,\u00a0in\u00a0this\u00a0case\u00a0we\u00a0used\u00a0'\u00a0instead\u00a0of\u00a0\"\u00a0for\u00a0quotation$json[]\u00a0=\u00a0\"{'Organization':\u00a0'PHP\u00a0Documentation\u00a0Team'}\";foreach\u00a0($json\u00a0as\u00a0$string)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Decoding:\u00a0'\u00a0.\u00a0$string;\u00a0\u00a0\u00a0\u00a0json_decode($string);\u00a0\u00a0\u00a0\u00a0switch\u00a0(json_last_error())\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_NONE:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0No\u00a0errors';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_DEPTH:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Maximum\u00a0stack\u00a0depth\u00a0exceeded';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_STATE_MISMATCH:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Underflow\u00a0or\u00a0the\u00a0modes\u00a0mismatch';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_CTRL_CHAR:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Unexpected\u00a0control\u00a0character\u00a0found';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_SYNTAX:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Syntax\u00a0error,\u00a0malformed\u00a0JSON';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_UTF8:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Malformed\u00a0UTF-8\u00a0characters,\u00a0possibly\u00a0incorrectly\u00a0encoded';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Unknown\u00a0error';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0PHP_EOL;}?>             The above example will output:       Decoding: {\"Organization\": \"PHP Documentation Team\"} - No errors Decoding: {&#039;Organization&#039;: &#039;PHP Documentation Team&#039;} - Syntax error, malformed JSON                         Example #2 json_last_error() with json_encode()       <?php\/\/\u00a0An\u00a0invalid\u00a0UTF8\u00a0sequence$text\u00a0=\u00a0\"\\xB1\\x31\";$json\u00a0\u00a0=\u00a0json_encode($text);$error\u00a0=\u00a0json_last_error();var_dump($json,\u00a0$error\u00a0===\u00a0JSON_ERROR_UTF8);?>             The above example will output:       string(4) \"null\" bool(true)                      See Also            json_decode() - Decodes a JSON string     json_encode() - Returns the JSON representation of a value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-8859-to-t61.php","title":"ldap_8859_to_t61","description":"ldap_8859_to_t61   (PHP 4 >= 4.0.2, PHP 5)ldap_8859_to_t61 \u2014 Translate 8859 characters to t61 characters          Description       string ldap_8859_to_t61     ( string $value    )        Translate ISO-8859 characters to t61    characters.          This function is useful if you have to talk to a legacy     LDAPv2 server.            Parameters                    value                      The text to be translated.                                     Return Values       Return the t61 translation of    value.            See Also            ldap_t61_to_8859() - Translate t61 characters to 8859 characters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.json-decode.php","title":"json_decode","description":"json_decode   (PHP 5 >= 5.2.0, PECL json >= 1.2.0)json_decode \u2014 Decodes a JSON string         Description       mixed json_decode     ( string $json    [, bool $assoc = false    [, int $depth = 512    [, int $options = 0   ]]] )        Takes a JSON encoded string and converts it into a PHP variable.            Parameters                    json                      The json string being decoded.                      This function only works with UTF-8 encoded data.                                assoc                      When TRUE, returned objects will be converted into        associative arrays.                                depth                      User specified recursion depth.                                options                      Bitmask of JSON decode options.  Currently only        JSON_BIGINT_AS_STRING        is supported (default is to cast large integers as floats)                                     Return Values       Returns the value encoded in json in appropriate    PHP type. Values true, false and    null (case-insensitive) are returned as TRUE, FALSE    and NULL respectively. NULL is returned if the    json cannot be decoded or if the encoded    data is deeper than the recursion limit.            Examples            Example #1 json_decode() examples       <?php$json\u00a0=\u00a0'{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';var_dump(json_decode($json));var_dump(json_decode($json,\u00a0true));?>             The above example will output:       object(stdClass)#1 (5) {     [\"a\"] => int(1)     [\"b\"] => int(2)     [\"c\"] => int(3)     [\"d\"] => int(4)     [\"e\"] => int(5) }  array(5) {     [\"a\"] => int(1)     [\"b\"] => int(2)     [\"c\"] => int(3)     [\"d\"] => int(4)     [\"e\"] => int(5) }                   Example #2 Accessing invalid object properties           Accessing elements within an object that contain characters not      permitted under PHP&#039;s naming convention (e.g. the hyphen) can be      accomplished by encapsulating the element name within braces and the apostrophe.            <?php$json\u00a0=\u00a0'{\"foo-bar\":\u00a012345}';$obj\u00a0=\u00a0json_decode($json);print\u00a0$obj->{'foo-bar'};\u00a0\/\/\u00a012345?>                     Example #3 common mistakes using json_decode()       <?php\/\/\u00a0the\u00a0following\u00a0strings\u00a0are\u00a0valid\u00a0JavaScript\u00a0but\u00a0not\u00a0valid\u00a0JSON\/\/\u00a0the\u00a0name\u00a0and\u00a0value\u00a0must\u00a0be\u00a0enclosed\u00a0in\u00a0double\u00a0quotes\/\/\u00a0single\u00a0quotes\u00a0are\u00a0not\u00a0valid\u00a0$bad_json\u00a0=\u00a0\"{\u00a0'bar':\u00a0'baz'\u00a0}\";json_decode($bad_json);\u00a0\/\/\u00a0null\/\/\u00a0the\u00a0name\u00a0must\u00a0be\u00a0enclosed\u00a0in\u00a0double\u00a0quotes$bad_json\u00a0=\u00a0'{\u00a0bar:\u00a0\"baz\"\u00a0}';json_decode($bad_json);\u00a0\/\/\u00a0null\/\/\u00a0trailing\u00a0commas\u00a0are\u00a0not\u00a0allowed$bad_json\u00a0=\u00a0'{\u00a0bar:\u00a0\"baz\",\u00a0}';json_decode($bad_json);\u00a0\/\/\u00a0null?>                     Example #4 depth errors       <?php\/\/\u00a0Encode\u00a0the\u00a0data.$json\u00a0=\u00a0json_encode(\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'English'\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'One',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'January'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'French'\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Une',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Janvier'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0));\/\/\u00a0Define\u00a0the\u00a0errors.$constants\u00a0=\u00a0get_defined_constants(true);$json_errors\u00a0=\u00a0array();foreach\u00a0($constants[\"json\"]\u00a0as\u00a0$name\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(!strncmp($name,\u00a0\"JSON_ERROR_\",\u00a011))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$json_errors[$value]\u00a0=\u00a0$name;\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Show\u00a0the\u00a0errors\u00a0for\u00a0different\u00a0depths.foreach\u00a0(range(4,\u00a03,\u00a0-1)\u00a0as\u00a0$depth)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump(json_decode($json,\u00a0true,\u00a0$depth));\u00a0\u00a0\u00a0\u00a0echo\u00a0'Last\u00a0error:\u00a0',\u00a0$json_errors[json_last_error()],\u00a0PHP_EOL,\u00a0PHP_EOL;}?>             The above example will output:       array(1) {   [1]=>   array(2) {     [\"English\"]=>     array(2) {       [0]=>       string(3) \"One\"       [1]=>       string(7) \"January\"     }     [\"French\"]=>     array(2) {       [0]=>       string(3) \"Une\"       [1]=>       string(7) \"Janvier\"     }   } } Last error: JSON_ERROR_NONE  NULL Last error: JSON_ERROR_DEPTH                   Example #5 json_decode() of large integers       <?php$json\u00a0=\u00a0'12345678901234567890';var_dump(json_decode($json));var_dump(json_decode($json,\u00a0false,\u00a0512,\u00a0JSON_BIGINT_AS_STRING));?>             The above example will output:       float(1.2345678901235E+19) string(20) \"12345678901234567890\"                      Notes   Note:          The JSON spec is not JavaScript, but a subset of JavaScript.          Note:          In the event of a failure to decode, json_last_error()     can be used to determine the exact nature of the error.                Changelog                                 Version        Description                                    5.4.0                 The options parameter was added.                               5.3.0        Added the optional depth. The default recursion depth was increased from 128 to 512                       5.2.3        The nesting limit was increased from 20 to 128                       5.2.1                 Added support for JSON decoding of basic types.                                            See Also            json_encode() - Returns the JSON representation of a value     json_last_error() - Returns the last error occurred"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-add.php","title":"ldap_add","description":"ldap_add   (PHP 4, PHP 5)ldap_add \u2014 Add entries to LDAP directory          Description       bool ldap_add     ( resource $link_identifier    , string $dn    , array $entry    )        Add entries in the LDAP directory.             Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                entry                      An array that specifies the information about the entry. The values in        the entries are indexed by individual attributes.        In case of multiple values for an attribute, they are indexed using        integers starting with 0.                        <?php$entree[\"attribut1\"]\u00a0=\u00a0\"value\";$entree[\"attribut2\"][0]\u00a0=\u00a0\"value1\";$entree[\"attribut2\"][1]\u00a0=\u00a0\"value2\";?>                                                         Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Complete example with authenticated bind       <?php$ds\u00a0=\u00a0ldap_connect(\"localhost\");\u00a0\u00a0\/\/\u00a0assuming\u00a0the\u00a0LDAP\u00a0server\u00a0is\u00a0on\u00a0this\u00a0hostif\u00a0($ds)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0bind\u00a0with\u00a0appropriate\u00a0dn\u00a0to\u00a0give\u00a0update\u00a0access\u00a0\u00a0\u00a0\u00a0$r\u00a0=\u00a0ldap_bind($ds,\u00a0\"cn=root,\u00a0o=My\u00a0Company,\u00a0c=US\",\u00a0\"secret\");\u00a0\u00a0\u00a0\u00a0\/\/\u00a0prepare\u00a0data\u00a0\u00a0\u00a0\u00a0$info[\"cn\"]\u00a0=\u00a0\"John\u00a0Jones\";\u00a0\u00a0\u00a0\u00a0$info[\"sn\"]\u00a0=\u00a0\"Jones\";\u00a0\u00a0\u00a0\u00a0$info[\"mail\"]\u00a0=\u00a0\"jonj@example.com\";\u00a0\u00a0\u00a0\u00a0$info[\"objectclass\"]\u00a0=\u00a0\"person\";\u00a0\u00a0\u00a0\u00a0\/\/\u00a0add\u00a0data\u00a0to\u00a0directory\u00a0\u00a0\u00a0\u00a0$r\u00a0=\u00a0ldap_add($ds,\u00a0\"cn=John\u00a0Jones,\u00a0o=My\u00a0Company,\u00a0c=US\",\u00a0$info);\u00a0\u00a0\u00a0\u00a0ldap_close($ds);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0connect\u00a0to\u00a0LDAP\u00a0server\";}?>                        Notes   Note: This function is binary-safe.         See Also            ldap_delete() - Delete an entry from a directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-close.php","title":"ldap_close","description":"ldap_close   (PHP 4, PHP 5)ldap_close \u2014 Alias of ldap_unbind()         Description       This function is an alias of:  ldap_unbind()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-compare.php","title":"ldap_compare","description":"ldap_compare   (PHP 4 >= 4.0.2, PHP 5)ldap_compare \u2014 Compare value of attribute found in entry specified with DN          Description       mixed ldap_compare     ( resource $link_identifier    , string $dn    , string $attribute    , string $value    )        Compare value of attribute    with value of same attribute in an LDAP directory entry.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                attribute                      The attribute name.                                value                      The compared value.                                     Return Values       Returns TRUE if value matches otherwise returns    FALSE. Returns -1 on error.            Examples       The following example demonstrates how to check whether or not given password matches    the one defined in DN specified entry.               Example #1 Complete example of password check       <?php$ds=ldap_connect(\"localhost\");\u00a0\u00a0\/\/\u00a0assuming\u00a0the\u00a0LDAP\u00a0server\u00a0is\u00a0on\u00a0this\u00a0hostif\u00a0($ds)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0bind\u00a0\u00a0\u00a0\u00a0if\u00a0(ldap_bind($ds))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0prepare\u00a0data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$dn\u00a0=\u00a0\"cn=Matti\u00a0Meikku,\u00a0ou=My\u00a0Unit,\u00a0o=My\u00a0Company,\u00a0c=FI\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a0\"secretpassword\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$attr\u00a0=\u00a0\"password\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0compare\u00a0value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$r=ldap_compare($ds,\u00a0$dn,\u00a0$attr,\u00a0$value);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($r\u00a0===\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error:\u00a0\"\u00a0.\u00a0ldap_error($ds);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($r\u00a0===\u00a0true)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Password\u00a0correct.\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($r\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Wrong\u00a0guess!\u00a0Password\u00a0incorrect.\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0bind\u00a0to\u00a0LDAP\u00a0server.\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0ldap_close($ds);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0connect\u00a0to\u00a0LDAP\u00a0server.\";}?>                        Notes   Warning         ldap_compare() can NOT be used to compare BINARY values!"},{"url":"http:\/\/www.php.net\/manual\/en\/function.json-encode.php","title":"json_encode","description":"json_encode   (PHP 5 >= 5.2.0, PECL json >= 1.2.0)json_encode \u2014 Returns the JSON representation of a value         Description       string json_encode     ( mixed $value    [, int $options = 0   ] )        Returns a string containing the JSON representation of     value.            Parameters                    value                      The value being encoded. Can be any type except        a resource.                      This function only works with UTF-8 encoded data.                                options                      Bitmask consisting of JSON_HEX_QUOT,        JSON_HEX_TAG,        JSON_HEX_AMP,        JSON_HEX_APOS,        JSON_NUMERIC_CHECK,        JSON_PRETTY_PRINT,        JSON_UNESCAPED_SLASHES,        JSON_FORCE_OBJECT,        JSON_UNESCAPED_UNICODE.                                     Return Values       Returns a JSON encoded string on success.            Changelog                                 Version        Description                                    5.4.0                 JSON_BIGINT_AS_STRING, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, and JSON_UNESCAPED_UNICODE options were added.                               5.3.3                 JSON_NUMERIC_CHECK option was added.                               5.3.0                 The options parameter was added.                                            Examples            Example #1 A json_encode() example       <?php$arr\u00a0=\u00a0array('a'\u00a0=>\u00a01,\u00a0'b'\u00a0=>\u00a02,\u00a0'c'\u00a0=>\u00a03,\u00a0'd'\u00a0=>\u00a04,\u00a0'e'\u00a0=>\u00a05);echo\u00a0json_encode($arr);?>             The above example will output:       {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}                    Example #2 A json_encode() example showing all the options in action       <?php$a\u00a0=\u00a0array('<foo>',\"'bar'\",'\"baz\"','&blong&',\u00a0\"\\xc3\\xa9\");echo\u00a0\"Normal:\u00a0\",\u00a0\u00a0json_encode($a),\u00a0\"\\n\";echo\u00a0\"Tags:\u00a0\",\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_TAG),\u00a0\"\\n\";echo\u00a0\"Apos:\u00a0\",\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_APOS),\u00a0\"\\n\";echo\u00a0\"Quot:\u00a0\",\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_QUOT),\u00a0\"\\n\";echo\u00a0\"Amp:\u00a0\",\u00a0\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_AMP),\u00a0\"\\n\";echo\u00a0\"Unicode:\u00a0\",\u00a0json_encode($a,\u00a0JSON_UNESCAPED_UNICODE),\u00a0\"\\n\";echo\u00a0\"All:\u00a0\",\u00a0\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_TAG\u00a0|\u00a0JSON_HEX_APOS\u00a0|\u00a0JSON_HEX_QUOT\u00a0|\u00a0JSON_HEX_AMP\u00a0|\u00a0JSON_UNESCAPED_UNICODE),\u00a0\"\\n\\n\";$b\u00a0=\u00a0array();echo\u00a0\"Empty\u00a0array\u00a0output\u00a0as\u00a0array:\u00a0\",\u00a0json_encode($b),\u00a0\"\\n\";echo\u00a0\"Empty\u00a0array\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($b,\u00a0JSON_FORCE_OBJECT),\u00a0\"\\n\\n\";$c\u00a0=\u00a0array(array(1,2,3));echo\u00a0\"Non-associative\u00a0array\u00a0output\u00a0as\u00a0array:\u00a0\",\u00a0json_encode($c),\u00a0\"\\n\";echo\u00a0\"Non-associative\u00a0array\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($c,\u00a0JSON_FORCE_OBJECT),\u00a0\"\\n\\n\";$d\u00a0=\u00a0array('foo'\u00a0=>\u00a0'bar',\u00a0'baz'\u00a0=>\u00a0'long');echo\u00a0\"Associative\u00a0array\u00a0always\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($d),\u00a0\"\\n\";echo\u00a0\"Associative\u00a0array\u00a0always\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($d,\u00a0JSON_FORCE_OBJECT),\u00a0\"\\n\\n\";?>             The above example will output:       Normal: [\"<foo>\",\"&#039;bar&#039;\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"] Tags: [\"\\u003Cfoo\\u003E\",\"&#039;bar&#039;\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"] Apos: [\"<foo>\",\"\\u0027bar\\u0027\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"] Quot: [\"<foo>\",\"&#039;bar&#039;\",\"\\u0022baz\\u0022\",\"&blong&\",\"\\u00e9\"] Amp: [\"<foo>\",\"&#039;bar&#039;\",\"\\\"baz\\\"\",\"\\u0026blong\\u0026\",\"\\u00e9\"] Unicode: [\"<foo>\",\"&#039;bar&#039;\",\"\\\"baz\\\"\",\"&blong&\",\"\u00e9\"] All: [\"\\u003Cfoo\\u003E\",\"\\u0027bar\\u0027\",\"\\u0022baz\\u0022\",\"\\u0026blong\\u0026\",\"\u00e9\"]  Empty array output as array: [] Empty array output as object: {}  Non-associative array output as array: [[1,2,3]] Non-associative array output as object: {\"0\":{\"0\":1,\"1\":2,\"2\":3}}  Associative array always output as object: {\"foo\":\"bar\",\"baz\":\"long\"} Associative array always output as object: {\"foo\":\"bar\",\"baz\":\"long\"}                   Example #3 Sequential versus non-sequential array example       <?phpecho\u00a0\"Sequential\u00a0array\".PHP_EOL;$sequential\u00a0=\u00a0array(\"foo\",\u00a0\"bar\",\u00a0\"baz\",\u00a0\"blong\");var_dump(\u00a0$sequential,\u00a0json_encode($sequential));echo\u00a0PHP_EOL.\"Non-sequential\u00a0array\".PHP_EOL;$nonsequential\u00a0=\u00a0array(1=>\"foo\",\u00a02=>\"bar\",\u00a03=>\"baz\",\u00a04=>\"blong\");var_dump(\u00a0$nonsequential,\u00a0json_encode($nonsequential));echo\u00a0PHP_EOL.\"Sequential\u00a0array\u00a0with\u00a0one\u00a0key\u00a0unset\".PHP_EOL;unset($sequential[1]);var_dump(\u00a0$sequential,\u00a0json_encode($sequential));?>             The above example will output:       Sequential array array(4) {   [0]=>   string(3) \"foo\"   [1]=>   string(3) \"bar\"   [2]=>   string(3) \"baz\"   [3]=>   string(5) \"blong\" } string(27) \"[\"foo\",\"bar\",\"baz\",\"blong\"]\"  Non-sequential array array(4) {   [1]=>   string(3) \"foo\"   [2]=>   string(3) \"bar\"   [3]=>   string(3) \"baz\"   [4]=>   string(5) \"blong\" } string(43) \"{\"1\":\"foo\",\"2\":\"bar\",\"3\":\"baz\",\"4\":\"blong\"}\"  Sequential array with one key unset array(3) {   [0]=>   string(3) \"foo\"   [2]=>   string(3) \"baz\"   [3]=>   string(5) \"blong\" } string(33) \"{\"0\":\"foo\",\"2\":\"baz\",\"3\":\"blong\"}\"                      Notes   Note:          In the event of a failure to encode, json_last_error()     can be used to determine the exact nature of the error.          Note:          When encoding an array, if the keys are not a continuous numeric     sequence starting from 0, all keys are encoded as strings, and     specified explicitly for each key-value pair.                See Also            json_decode() - Decodes a JSON string     json_last_error() - Returns the last error occurred"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-bind.php","title":"ldap_bind","description":"ldap_bind   (PHP 4, PHP 5)ldap_bind \u2014 Bind to LDAP directory          Description       bool ldap_bind     ( resource $link_identifier    [, string $bind_rdn = NULL    [, string $bind_password = NULL   ]] )        Binds to the LDAP directory with specified RDN and password.             Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                bind_rdn                                              bind_password                                                 If bind_rdn and bind_password    are not specified, an anonymous bind is attempted.            Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Using LDAP Bind       <?php\/\/\u00a0using\u00a0ldap\u00a0bind$ldaprdn\u00a0\u00a0=\u00a0'uname';\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0ldap\u00a0rdn\u00a0or\u00a0dn$ldappass\u00a0=\u00a0'password';\u00a0\u00a0\/\/\u00a0associated\u00a0password\/\/\u00a0connect\u00a0to\u00a0ldap\u00a0server$ldapconn\u00a0=\u00a0ldap_connect(\"ldap.example.com\")\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\u00a0to\u00a0LDAP\u00a0server.\");if\u00a0($ldapconn)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0binding\u00a0to\u00a0ldap\u00a0server\u00a0\u00a0\u00a0\u00a0$ldapbind\u00a0=\u00a0ldap_bind($ldapconn,\u00a0$ldaprdn,\u00a0$ldappass);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0verify\u00a0binding\u00a0\u00a0\u00a0\u00a0if\u00a0($ldapbind)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"LDAP\u00a0bind\u00a0successful...\";\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"LDAP\u00a0bind\u00a0failed...\";\u00a0\u00a0\u00a0\u00a0}}?>                     Example #2 Using LDAP Bind Anonymously       <?php\/\/using\u00a0ldap\u00a0bind\u00a0anonymously\/\/\u00a0connect\u00a0to\u00a0ldap\u00a0server$ldapconn\u00a0=\u00a0ldap_connect(\"ldap.example.com\")\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\u00a0to\u00a0LDAP\u00a0server.\");if\u00a0($ldapconn)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0binding\u00a0anonymously\u00a0\u00a0\u00a0\u00a0$ldapbind\u00a0=\u00a0ldap_bind($ldapconn);\u00a0\u00a0\u00a0\u00a0if\u00a0($ldapbind)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"LDAP\u00a0bind\u00a0anonymous\u00a0successful...\";\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"LDAP\u00a0bind\u00a0anonymous\u00a0failed...\";\u00a0\u00a0\u00a0\u00a0}}?>                        See Also            ldap_unbind() - Unbind from LDAP directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-count-entries.php","title":"ldap_count_entries","description":"ldap_count_entries   (PHP 4, PHP 5)ldap_count_entries \u2014 Count the number of entries in a search          Description       int ldap_count_entries     ( resource $link_identifier    , resource $result_identifier    )        Returns the number of entries stored in the result of previous search    operations.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_identifier                      The internal LDAP result.                                     Return Values       Returns number of entries in the result or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-delete.php","title":"ldap_delete","description":"ldap_delete   (PHP 4, PHP 5)ldap_delete \u2014 Delete an entry from a directory          Description       bool ldap_delete     ( resource $link_identifier    , string $dn    )        Deletes a particular entry in LDAP directory.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            ldap_add() - Add entries to LDAP directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-err2str.php","title":"ldap_err2str","description":"ldap_err2str   (PHP 4, PHP 5)ldap_err2str \u2014 Convert LDAP error number into string error message          Description       string ldap_err2str     ( int $errno    )        Returns the string error message explaining the error number    errno. While LDAP errno numbers are standardized,    different libraries return different or even localized textual error    messages. Never check for a specific error message text, but always use an    error number to check.            Parameters                    errno                      The error number.                                     Return Values       Returns the error message, as a string.            Examples            Example #1 Enumerating all LDAP error messages       <?php\u00a0\u00a0for\u00a0($i=0;\u00a0$i<100;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0printf(\"Error\u00a0$i:\u00a0%s<br\u00a0\/>\\n\",\u00a0ldap_err2str($i));\u00a0\u00a0}?>                        See Also            ldap_errno() - Return the LDAP error number of the last LDAP command     ldap_error() - Return the LDAP error message of the last LDAP command"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-connect.php","title":"ldap_connect","description":"ldap_connect   (PHP 4, PHP 5)ldap_connect \u2014 Connect to an LDAP server          Description       resource ldap_connect     ([ string $hostname = NULL    [, int $port = 389   ]] )        Establishes a connection to a LDAP server on a specified    hostname and port.            Parameters                    hostname                      If you are using OpenLDAP 2.x.x you can specify a URL instead of the        hostname. To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL        support, configure PHP with SSL, and set this parameter as          ldaps:\/\/hostname\/.                                port                      The port to connect to. Not used when using URLs.                                     Return Values       Returns a positive LDAP link identifier on success, or FALSE on error.    When OpenLDAP 2.x.x is used, ldap_connect() will always    return a resource as it does not actually connect but just    initializes the connecting parameters.  The actual connect happens with    the next calls to ldap_* funcs, usually with    ldap_bind().          If no arguments are specified then the link identifier of the already    opened link will be returned.            Changelog                                 Version        Description                                    4.0.4                 URL and SSL support was added.                                            Examples            Example #1 Example of connecting to LDAP server.       <?php\/\/\u00a0LDAP\u00a0variables$ldaphost\u00a0=\u00a0\"ldap.example.com\";\u00a0\u00a0\/\/\u00a0your\u00a0ldap\u00a0servers$ldapport\u00a0=\u00a0389;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0your\u00a0ldap\u00a0server's\u00a0port\u00a0number\/\/\u00a0Connecting\u00a0to\u00a0LDAP$ldapconn\u00a0=\u00a0ldap_connect($ldaphost,\u00a0$ldapport)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\u00a0to\u00a0$ldaphost\");?>                     Example #2 Example of connecting securely to LDAP server.       <?php\/\/\u00a0make\u00a0sure\u00a0your\u00a0host\u00a0is\u00a0the\u00a0correct\u00a0one\/\/\u00a0that\u00a0you\u00a0issued\u00a0your\u00a0secure\u00a0certificate\u00a0to$ldaphost\u00a0=\u00a0\"ldaps:\/\/ldap.example.com\/\";\/\/\u00a0Connecting\u00a0to\u00a0LDAP$ldapconn\u00a0=\u00a0ldap_connect($ldaphost)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\u00a0to\u00a0{$ldaphost}\");?>                        See Also            ldap_bind() - Bind to LDAP directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-dn2ufn.php","title":"ldap_dn2ufn","description":"ldap_dn2ufn   (PHP 4, PHP 5)ldap_dn2ufn \u2014 Convert DN to User Friendly Naming format          Description       string ldap_dn2ufn     ( string $dn    )        Turns the specified dn, into a more user-friendly    form, stripping off type names.            Parameters                    dn                      The distinguished name of an LDAP entity.                                     Return Values       Returns the user friendly name."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-error.php","title":"ldap_error","description":"ldap_error   (PHP 4, PHP 5)ldap_error \u2014 Return the LDAP error message of the last LDAP command          Description       string ldap_error     ( resource $link_identifier    )        Returns the string error message explaining the error generated by the    last LDAP command for the given link_identifier.    While LDAP errno numbers are standardized, different libraries return    different or even localized textual error messages. Never check for a    specific error message text, but always use an error number to check.          Unless you lower your warning level in your php.ini sufficiently or    prefix your LDAP commands with @ (at) characters to    suppress warning output, the errors generated will also show up in your    HTML output.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                     Return Values       Returns string error message.            See Also            ldap_err2str() - Convert LDAP error number into string error message     ldap_errno() - Return the LDAP error number of the last LDAP command"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-errno.php","title":"ldap_errno","description":"ldap_errno   (PHP 4, PHP 5)ldap_errno \u2014 Return the LDAP error number of the last LDAP command          Description       int ldap_errno     ( resource $link_identifier    )        Returns the standardized error number returned by the last LDAP command.    This number can be converted into a textual error message using    ldap_err2str().            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                     Return Values       Return the LDAP error number of the last LDAP command for this    link.            Examples       Unless you lower your warning level in your php.ini sufficiently or    prefix your LDAP commands with @ (at) characters to suppress warning    output, the errors generated will also show up in your HTML output.         Example #1 Generating and catching an error   <?php\/\/\u00a0This\u00a0example\u00a0contains\u00a0an\u00a0error,\u00a0which\u00a0we\u00a0will\u00a0catch.$ld\u00a0=\u00a0ldap_connect(\"localhost\");$bind\u00a0=\u00a0ldap_bind($ld);\/\/\u00a0syntax\u00a0error\u00a0in\u00a0filter\u00a0expression\u00a0(errno\u00a087),\/\/\u00a0must\u00a0be\u00a0\"objectclass=*\"\u00a0to\u00a0work.$res\u00a0=\u00a0\u00a0@ldap_search($ld,\u00a0\"o=Myorg,\u00a0c=DE\",\u00a0\"objectclass\");if\u00a0(!$res)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"LDAP-Errno:\u00a0\"\u00a0.\u00a0ldap_errno($ld)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"LDAP-Error:\u00a0\"\u00a0.\u00a0ldap_error($ld)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0die(\"Argh!<br\u00a0\/>\\n\");}$info\u00a0=\u00a0ldap_get_entries($ld,\u00a0$res);echo\u00a0$info[\"count\"]\u00a0.\u00a0\"\u00a0matching\u00a0entries.<br\u00a0\/>\\n\";?>                        See Also            ldap_err2str() - Convert LDAP error number into string error message     ldap_error() - Return the LDAP error message of the last LDAP command"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-first-entry.php","title":"ldap_first_entry","description":"ldap_first_entry   (PHP 4, PHP 5)ldap_first_entry \u2014 Return first result id          Description       resource ldap_first_entry     ( resource $link_identifier    , resource $result_identifier    )        Returns the entry identifier for first entry in the result. This entry    identifier is then supplied to ldap_next_entry()    routine to get successive entries from the result.          Entries in the LDAP result are read sequentially using the    ldap_first_entry() and    ldap_next_entry() functions.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_identifier                                                   Return Values       Returns the result entry identifier for the first entry on success and    FALSE on error.            See Also            ldap_get_entries() - Get all result entries"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-explode-dn.php","title":"ldap_explode_dn","description":"ldap_explode_dn   (PHP 4, PHP 5)ldap_explode_dn \u2014 Splits DN into its component parts          Description       array ldap_explode_dn     ( string $dn    , int $with_attrib    )        Splits the DN returned by ldap_get_dn() and breaks it    up into its component parts. Each part is known as Relative Distinguished    Name, or RDN.            Parameters                    dn                      The distinguished name of an LDAP entity.                                with_attrib                      Used to request if the RDNs are returned with only values or their        attributes as well.  To get RDNs with the attributes (i.e. in        attribute=value format) set with_attrib to 0        and to get only values set it to 1.                                     Return Values       Returns an array of all DN components.    The first element in this array has count key and    represents the number of returned values, next elements are numerically    indexed DN components."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-first-attribute.php","title":"ldap_first_attribute","description":"ldap_first_attribute   (PHP 4, PHP 5)ldap_first_attribute \u2014 Return first attribute          Description       string ldap_first_attribute     ( resource $link_identifier    , resource $result_entry_identifier    )        Gets the first attribute in the given entry. Remaining attributes are    retrieved by calling ldap_next_attribute() successively.          Similar to reading entries, attributes are also read one by one from a    particular entry.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                              ber_identifier                      ber_identifier is the identifier to internal        memory location pointer. It is passed by reference. The same        ber_identifier is passed to        ldap_next_attribute() , which modifies that        pointer.              Note:                  This parameter is no longer used as this is now handled automatically         by PHP. For backwards compatibility PHP will not throw an error if         this parameter is passed.                                             Return Values       Returns the first attribute in the entry on success and FALSE on    error.            Changelog                                 Version        Description                                    5.2.4                 The ber_identifier was removed. This         is now handled automatically by PHP.                                            See Also            ldap_next_attribute() - Get the next attribute in result     ldap_get_attributes() - Get attributes from a search result entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-first-reference.php","title":"ldap_first_reference","description":"ldap_first_reference   (PHP 4 >= 4.0.5, PHP 5)ldap_first_reference \u2014 Return first reference          Description       resource ldap_first_reference     ( resource $link    , resource $result    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-free-result.php","title":"ldap_free_result","description":"ldap_free_result   (PHP 4, PHP 5)ldap_free_result \u2014 Free result memory          Description       bool ldap_free_result     ( resource $result_identifier    )        Frees up the memory allocated internally to store the result. All result    memory will be automatically freed when the script terminates.          Typically all the memory allocated for the LDAP result gets freed at the    end of the script. In case the script is making successive searches which    return large result sets, ldap_free_result() could be    called to keep the runtime memory usage by the script low.            Parameters                    result_identifier                                                   Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-dn.php","title":"ldap_get_dn","description":"ldap_get_dn   (PHP 4, PHP 5)ldap_get_dn \u2014 Get the DN of a result entry          Description       string ldap_get_dn     ( resource $link_identifier    , resource $result_entry_identifier    )        Finds out the DN of an entry in the result.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                                   Return Values       Returns the DN of the result entry and FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-attributes.php","title":"ldap_get_attributes","description":"ldap_get_attributes   (PHP 4, PHP 5)ldap_get_attributes \u2014 Get attributes from a search result entry          Description       array ldap_get_attributes     ( resource $link_identifier    , resource $result_entry_identifier    )        Reads attributes and values from an entry in the search result.           Having located a specific entry in the directory, you can find out what    information is held for that entry by using this call. You would use this    call for an application which \"browses\" directory entries and\/or where you    do not know the structure of the directory entries. In many applications    you will be searching for a specific attribute such as an email address or    a surname, and won&#039;t care what other data is held.           return_value[\"count\"] = number of attributes in the entry return_value[0] = first attribute return_value[n] = nth attribute  return_value[\"attribute\"][\"count\"] = number of values for attribute return_value[\"attribute\"][0] = first value of the attribute return_value[\"attribute\"][i] = (i+1)th value of the attribute                       Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                                   Return Values       Returns a complete entry information in a multi-dimensional array    on success and FALSE on error.            Examples            Example #1       Show the list of attributes held for a particular directory entry            <?php\/\/\u00a0$ds\u00a0is\u00a0the\u00a0link\u00a0identifier\u00a0for\u00a0the\u00a0directory\/\/\u00a0$sr\u00a0is\u00a0a\u00a0valid\u00a0search\u00a0result\u00a0from\u00a0a\u00a0prior\u00a0call\u00a0to\/\/\u00a0one\u00a0of\u00a0the\u00a0ldap\u00a0directory\u00a0search\u00a0calls$entry\u00a0=\u00a0ldap_first_entry($ds,\u00a0$sr);$attrs\u00a0=\u00a0ldap_get_attributes($ds,\u00a0$entry);echo\u00a0$attrs[\"count\"]\u00a0.\u00a0\"\u00a0attributes\u00a0held\u00a0for\u00a0this\u00a0entry:<p>\";for\u00a0($i=0;\u00a0$i\u00a0<\u00a0$attrs[\"count\"];\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$attrs[$i]\u00a0.\u00a0\"<br\u00a0\/>\";}?>                        See Also            ldap_first_attribute() - Return first attribute     ldap_next_attribute() - Get the next attribute in result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-option.php","title":"ldap_get_option","description":"ldap_get_option   (PHP 4 >= 4.0.4, PHP 5)ldap_get_option \u2014 Get the current value for given option          Description       bool ldap_get_option     ( resource $link_identifier    , int $option    , mixed &$retval    )        Sets retval to the value of the specified option.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                option                      The parameter option can be one of:                                                  Option            Type                                                        LDAP_OPT_DEREF            integer                                   LDAP_OPT_SIZELIMIT            integer                                   LDAP_OPT_TIMELIMIT            integer                                   LDAP_OPT_NETWORK_TIMEOUT            integer                                   LDAP_OPT_PROTOCOL_VERSION            integer                                   LDAP_OPT_ERROR_NUMBER            integer                                   LDAP_OPT_REFERRALS            bool                                   LDAP_OPT_RESTART            bool                                   LDAP_OPT_HOST_NAME            string                                   LDAP_OPT_ERROR_STRING            string                                   LDAP_OPT_MATCHED_DN            string                                   LDAP_OPT_SERVER_CONTROLS            array                                   LDAP_OPT_CLIENT_CONTROLS            array                                                                        retval                      This will be set to the option value.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Check protocol version       <?php\/\/\u00a0$ds\u00a0is\u00a0a\u00a0valid\u00a0link\u00a0identifier\u00a0for\u00a0a\u00a0directory\u00a0serverif\u00a0(ldap_get_option($ds,\u00a0LDAP_OPT_PROTOCOL_VERSION,\u00a0$version))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Using\u00a0protocol\u00a0version\u00a0$version\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0determine\u00a0protocol\u00a0version\\n\";}?>                        Notes   Note:          This function is only available when using OpenLDAP 2.x.x OR Netscape     Directory SDK x.x.                See Also            ldap_set_option() - Set the value of the given option"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-values-len.php","title":"ldap_get_values_len","description":"ldap_get_values_len   (PHP 4, PHP 5)ldap_get_values_len \u2014 Get all binary values from a result entry          Description       array ldap_get_values_len     ( resource $link_identifier    , resource $result_entry_identifier    , string $attribute    )        Reads all the values of the attribute in the entry in the result.          This function is used exactly like ldap_get_values()    except that it handles binary data and not string data.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                              attribute                                                   Return Values       Returns an array of values for the attribute on success and FALSE on    error. Individual values are accessed by integer index in the array. The    first index is 0. The number of values can be found by indexing \"count\"    in the resultant array.             See Also            ldap_get_values() - Get all values from a result entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-entries.php","title":"ldap_get_entries","description":"ldap_get_entries   (PHP 4, PHP 5)ldap_get_entries \u2014 Get all result entries          Description       array ldap_get_entries     ( resource $link_identifier    , resource $result_identifier    )        Reads multiple entries from the given result, and then reading the    attributes and multiple values.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_identifier                                                   Return Values       Returns a complete result information in a multi-dimensional array on    success and FALSE on error.          The structure of the array is as follows.    The attribute index is converted to lowercase. (Attributes are    case-insensitive for directory servers, but not when used as    array indices.)           return_value[\"count\"] = number of entries in the result return_value[0] : refers to the details of first entry  return_value[i][\"dn\"] =  DN of the ith entry in the result  return_value[i][\"count\"] = number of attributes in ith entry return_value[i][j] = NAME of the jth attribute in the ith entry in the result  return_value[i][\"attribute\"][\"count\"] = number of values for                                         attribute in ith entry return_value[i][\"attribute\"][j] = jth value of attribute in ith entry                       See Also            ldap_first_entry() - Return first result id     ldap_next_entry() - Get next result entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-values.php","title":"ldap_get_values","description":"ldap_get_values   (PHP 4, PHP 5)ldap_get_values \u2014 Get all values from a result entry          Description       array ldap_get_values     ( resource $link_identifier    , resource $result_entry_identifier    , string $attribute    )        Reads all the values of the attribute in the entry in the result.          This call needs a result_entry_identifier,    so needs to be preceded by one of the ldap search calls and one    of the calls to get an individual entry.          You application will either be hard coded to look for certain    attributes (such as \"surname\" or \"mail\") or you will have to use    the ldap_get_attributes() call to work out    what attributes exist for a given entry.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                              attribute                                                   Return Values       Returns an array of values for the attribute on success and FALSE on    error. The number of values can be found by indexing \"count\" in the    resultant array. Individual values are accessed by integer index in the    array.  The first index is 0.          LDAP allows more than one entry for an attribute, so it can, for example,    store a number of email addresses for one person&#039;s directory entry all    labeled with the attribute \"mail\"              return_value[\"count\"] = number of values for attribute     return_value[0] = first value of attribute     return_value[i] = ith value of attribute                     Examples            Example #1 List all values of the \"mail\" attribute for a      directory entry        <?php\/\/\u00a0$ds\u00a0is\u00a0a\u00a0valid\u00a0link\u00a0identifier\u00a0for\u00a0a\u00a0directory\u00a0server\/\/\u00a0$sr\u00a0is\u00a0a\u00a0valid\u00a0search\u00a0result\u00a0from\u00a0a\u00a0prior\u00a0call\u00a0to\/\/\u00a0\u00a0\u00a0\u00a0\u00a0one\u00a0of\u00a0the\u00a0ldap\u00a0directory\u00a0search\u00a0calls\/\/\u00a0$entry\u00a0is\u00a0a\u00a0valid\u00a0entry\u00a0identifier\u00a0from\u00a0a\u00a0prior\u00a0call\u00a0to\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0one\u00a0of\u00a0the\u00a0calls\u00a0that\u00a0returns\u00a0a\u00a0directory\u00a0entry$values\u00a0=\u00a0ldap_get_values($ds,\u00a0$entry,\u00a0\"mail\");echo\u00a0$values[\"count\"]\u00a0.\u00a0\"\u00a0email\u00a0addresses\u00a0for\u00a0this\u00a0entry.<br\u00a0\/>\";for\u00a0($i=0;\u00a0$i\u00a0<\u00a0$values[\"count\"];\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$values[$i]\u00a0.\u00a0\"<br\u00a0\/>\";}?>                        See Also            ldap_get_values_len() - Get all binary values from a result entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-mod-add.php","title":"ldap_mod_add","description":"ldap_mod_add   (PHP 4, PHP 5)ldap_mod_add \u2014 Add attribute values to current attributes          Description       bool ldap_mod_add     ( resource $link_identifier    , string $dn    , array $entry    )        Adds one or more attributes to the specified dn.    It performs the modification at the attribute level as opposed to the    object level. Object-level additions are done by the    ldap_add() function.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                entry                                                   Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: This function is binary-safe.         See Also            ldap_mod_del() - Delete attribute values from current attributes     ldap_mod_replace() - Replace attribute values with new ones"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-list.php","title":"ldap_list","description":"ldap_list   (PHP 4, PHP 5)ldap_list \u2014 Single-level search          Description       resource ldap_list     ( resource $link_identifier    , string $base_dn    , string $filter    [, array $attributes    [, int $attrsonly    [, int $sizelimit    [, int $timelimit    [, int $deref   ]]]]] )        Performs the search for a specified filter on the    directory with the scope LDAP_SCOPE_ONELEVEL.          LDAP_SCOPE_ONELEVEL means that the search should only    return information that is at the level immediately below the    base_dn given in the call.    (Equivalent to typing \"ls\" and getting a list of files and folders in the    current working directory.)            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                base_dn                      The base DN for the directory.                                filter                                              attributes                      An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\").        Note that the \"dn\" is always returned irrespective of which attributes        types are requested.                      Using this parameter is much more efficient than the default action        (which is to return all attributes and their associated values).         The use of this parameter should therefore be considered good        practice.                                attrsonly                      Should be set to 1 if only attribute types are wanted. If set to 0        both attributes types and attribute values are fetched which is the        default behaviour.                                sizelimit                      Enables you to limit the count of entries fetched. Setting this to 0        means no limit.              Note:                  This parameter can NOT override server-side preset sizelimit. You can         set it lower though.                         Some directory server hosts will be configured to return no more than         a preset number of entries. If this occurs, the server will indicate         that it has only returned a partial results set. This also occurs if         you use this parameter to limit the count of fetched entries.                                        timelimit                      Sets the number of seconds how long is spend on the search. Setting        this to 0 means no limit.              Note:                  This parameter can NOT override server-side preset timelimit. You can         set it lower though.                                        deref                      Specifies how aliases should be handled during the search. It can be        one of the following:                                      LDAP_DEREF_NEVER - (default) aliases are never           dereferenced.                                                 LDAP_DEREF_SEARCHING - aliases should be           dereferenced during the search but not when locating the base object           of the search.                                                 LDAP_DEREF_FINDING - aliases should be           dereferenced when locating the base object but not during the search.                                                 LDAP_DEREF_ALWAYS - aliases should be dereferenced           always.                                                                Return Values       Returns a search result identifier or FALSE on error.            Changelog                                 Version        Description                                    4.0.5                 Parallel searches support was added. See          ldap_search() for details.                               4.0.2                 The attrsonly, sizelimit,         timelimit and deref were         added.                                            Examples            Example #1 Produce a list of all organizational units of an organization       <?php\/\/\u00a0$ds\u00a0is\u00a0a\u00a0valid\u00a0link\u00a0identifier\u00a0for\u00a0a\u00a0directory\u00a0server$basedn\u00a0=\u00a0\"o=My\u00a0Company,\u00a0c=US\";$justthese\u00a0=\u00a0array(\"ou\");$sr\u00a0=\u00a0ldap_list($ds,\u00a0$basedn,\u00a0\"ou=*\",\u00a0$justthese);$info\u00a0=\u00a0ldap_get_entries($ds,\u00a0$sr);for\u00a0($i=0;\u00a0$i\u00a0<\u00a0$info[\"count\"];\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$info[$i][\"ou\"][0];}?>                        See Also            ldap_search() - Search LDAP tree"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-mod-del.php","title":"ldap_mod_del","description":"ldap_mod_del   (PHP 4, PHP 5)ldap_mod_del \u2014 Delete attribute values from current attributes          Description       bool ldap_mod_del     ( resource $link_identifier    , string $dn    , array $entry    )        Removes one or more attributes from the specified dn.    It performs the modification at the attribute level as opposed to the object    level. Object-level deletions are done by the     ldap_delete() function.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                entry                                                   Return Values       Returns TRUE on success or FALSE on failure.            See Also            ldap_mod_add() - Add attribute values to current attributes     ldap_mod_replace() - Replace attribute values with new ones"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-mod-replace.php","title":"ldap_mod_replace","description":"ldap_mod_replace   (PHP 4, PHP 5)ldap_mod_replace \u2014 Replace attribute values with new ones          Description       bool ldap_mod_replace     ( resource $link_identifier    , string $dn    , array $entry    )        Replaces one or more attributes from the specified dn.    It performs the modification at the attribute level as opposed to the object    level. Object-level modifications are done by the     ldap_modify() function.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                entry                                                   Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: This function is binary-safe.         See Also            ldap_mod_del() - Delete attribute values from current attributes     ldap_mod_add() - Add attribute values to current attributes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-next-attribute.php","title":"ldap_next_attribute","description":"ldap_next_attribute   (PHP 4, PHP 5)ldap_next_attribute \u2014 Get the next attribute in result          Description       string ldap_next_attribute     ( resource $link_identifier    , resource $result_entry_identifier    )        Retrieves the attributes in an entry. The first call to    ldap_next_attribute() is made with the    result_entry_identifier returned from    ldap_first_attribute().            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                              ber_identifier                      The internal state of the pointer is maintained by this parameter.              Note:                  This parameter is no longer used as this is now handled automatically         by PHP. For backwards compatibility PHP will not throw an error if         this parameter is passed.                                             Return Values       Returns the next attribute in an entry on success and FALSE on    error.            Changelog                                 Version        Description                                    5.2.4                 The ber_identifier was removed. This         is now handled automatically by PHP.                                            See Also            ldap_get_attributes() - Get attributes from a search result entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-next-entry.php","title":"ldap_next_entry","description":"ldap_next_entry   (PHP 4, PHP 5)ldap_next_entry \u2014 Get next result entry          Description       resource ldap_next_entry     ( resource $link_identifier    , resource $result_entry_identifier    )        Retrieve the entries stored in the result. Successive calls to the    ldap_next_entry() return entries one by one till there    are no more entries. The first call to ldap_next_entry()    is made after the call to ldap_first_entry() with the    result_entry_identifier as returned from the    ldap_first_entry().            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                result_entry_identifier                                                   Return Values       Returns entry identifier for the next entry in the result whose entries    are being read starting with ldap_first_entry(). If    there are no more entries in the result then it returns FALSE.            See Also            ldap_get_entries() - Get all result entries"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-modify.php","title":"ldap_modify","description":"ldap_modify   (PHP 4, PHP 5)ldap_modify \u2014 Modify an LDAP entry          Description       bool ldap_modify     ( resource $link_identifier    , string $dn    , array $entry    )        Modify the existing entries in the LDAP directory. The structure of the    entry is same as in ldap_add().            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                entry                                                   Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: This function is binary-safe.         See Also            ldap_rename() - Modify the name of an entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-next-reference.php","title":"ldap_next_reference","description":"ldap_next_reference   (PHP 4 >= 4.0.5, PHP 5)ldap_next_reference \u2014 Get next reference          Description       resource ldap_next_reference     ( resource $link    , resource $entry    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-parse-reference.php","title":"ldap_parse_reference","description":"ldap_parse_reference   (PHP 4 >= 4.0.5, PHP 5)ldap_parse_reference \u2014 Extract information from reference entry          Description       bool ldap_parse_reference     ( resource $link    , resource $entry    , array &$referrals    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-parse-result.php","title":"ldap_parse_result","description":"ldap_parse_result   (PHP 4 >= 4.0.5, PHP 5)ldap_parse_result \u2014 Extract information from result          Description       bool ldap_parse_result     ( resource $link    , resource $result    , int &$errcode    [, string &$matcheddn    [, string &$errmsg    [, array &$referrals   ]]] )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-read.php","title":"ldap_read","description":"ldap_read   (PHP 4, PHP 5)ldap_read \u2014 Read an entry          Description       resource ldap_read     ( resource $link_identifier    , string $base_dn    , string $filter    [, array $attributes    [, int $attrsonly    [, int $sizelimit    [, int $timelimit    [, int $deref   ]]]]] )        Performs the search for a specified filter on the    directory with the scope LDAP_SCOPE_BASE. So it is    equivalent to reading an entry from the directory.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                base_dn                      The base DN for the directory.                                filter                      An empty filter is not allowed. If you want to retrieve absolutely all        information for this entry, use a filter of         objectClass=*. If you know which entry types are        used on the directory server, you might use an appropriate filter such        as objectClass=inetOrgPerson.                                attributes                      An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\").        Note that the \"dn\" is always returned irrespective of which attributes        types are requested.                      Using this parameter is much more efficient than the default action        (which is to return all attributes and their associated values).         The use of this parameter should therefore be considered good        practice.                                attrsonly                      Should be set to 1 if only attribute types are wanted. If set to 0        both attributes types and attribute values are fetched which is the        default behaviour.                                sizelimit                      Enables you to limit the count of entries fetched. Setting this to 0        means no limit.              Note:                  This parameter can NOT override server-side preset sizelimit. You can         set it lower though.                         Some directory server hosts will be configured to return no more than         a preset number of entries. If this occurs, the server will indicate         that it has only returned a partial results set. This also occurs if         you use this parameter to limit the count of fetched entries.                                        timelimit                      Sets the number of seconds how long is spend on the search. Setting        this to 0 means no limit.              Note:                  This parameter can NOT override server-side preset timelimit. You can         set it lower though.                                        deref                      Specifies how aliases should be handled during the search. It can be        one of the following:                                      LDAP_DEREF_NEVER - (default) aliases are never           dereferenced.                                                 LDAP_DEREF_SEARCHING - aliases should be           dereferenced during the search but not when locating the base object           of the search.                                                 LDAP_DEREF_FINDING - aliases should be           dereferenced when locating the base object but not during the search.                                                 LDAP_DEREF_ALWAYS - aliases should be dereferenced           always.                                                                Return Values       Returns a search result identifier or FALSE on error.            Changelog                                 Version        Description                                    4.0.5                 Parallel searches support was added.         See ldap_search() for details.                               4.0.2                 The attrsonly, sizelimit,         timelimit and deref were         added."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-sasl-bind.php","title":"ldap_sasl_bind","description":"ldap_sasl_bind   (PHP 5)ldap_sasl_bind \u2014 Bind to LDAP directory using SASL          Description       bool ldap_sasl_bind     ( resource $link    [, string $binddn = NULL    [, string $password = NULL    [, string $sasl_mech = NULL    [, string $sasl_realm = NULL    [, string $sasl_authc_id = NULL    [, string $sasl_authz_id = NULL    [, string $props = NULL   ]]]]]]] )    WarningThis function is currently not documented; only its argument list is available.           Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note:     Requirement         ldap_sasl_bind() requires SASL     support (sasl.h). Be sure     --with-ldap-sasl is used when configuring PHP     otherwise this function will be undefined.              Changelog                                 Version        Description                                    5.3.3                 Support on Windows was added."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-rename.php","title":"ldap_rename","description":"ldap_rename   (PHP 4 >= 4.0.5, PHP 5)ldap_rename \u2014 Modify the name of an entry          Description       bool ldap_rename     ( resource $link_identifier    , string $dn    , string $newrdn    , string $newparent    , bool $deleteoldrdn    )        The entry specified by dn is renamed\/moved.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                dn                      The distinguished name of an LDAP entity.                                newrdn                      The new RDN.                                newparent                      The new parent\/superior entry.                                deleteoldrdn                      If TRUE the old RDN value(s) is removed, else the old RDN value(s)        is retained as non-distinguished values of the entry.                                     Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note:          This function currently only works with LDAPv3. You may have to use     ldap_set_option() prior to binding to use LDAPv3. This     function is only available when using OpenLDAP 2.x.x OR Netscape     Directory SDK x.x.                See Also            ldap_modify() - Modify an LDAP entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-set-option.php","title":"ldap_set_option","description":"ldap_set_option   (PHP 4 >= 4.0.4, PHP 5)ldap_set_option \u2014 Set the value of the given option          Description       bool ldap_set_option     ( resource $link_identifier    , int $option    , mixed $newval    )        Sets the value of the specified option to be newval.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                option                      The parameter option can be one of:                                                  Option            Type            Available since                                                        LDAP_OPT_DEREF            integer            \u00a0                                   LDAP_OPT_SIZELIMIT            integer            \u00a0                                   LDAP_OPT_TIMELIMIT            integer            \u00a0                                   LDAP_OPT_NETWORK_TIMEOUT            integer            PHP 5.3.0                                   LDAP_OPT_PROTOCOL_VERSION            integer            \u00a0                                   LDAP_OPT_ERROR_NUMBER            integer            \u00a0                                   LDAP_OPT_REFERRALS            bool            \u00a0                                   LDAP_OPT_RESTART            bool            \u00a0                                   LDAP_OPT_HOST_NAME            string            \u00a0                                   LDAP_OPT_ERROR_STRING            string            \u00a0                                   LDAP_OPT_MATCHED_DN            string            \u00a0                                   LDAP_OPT_SERVER_CONTROLS            array            \u00a0                                   LDAP_OPT_CLIENT_CONTROLS            array            \u00a0                                                              LDAP_OPT_SERVER_CONTROLS and         LDAP_OPT_CLIENT_CONTROLS require a list of        controls, this means that the value must be an array of controls. A        control consists of an oid identifying the control,        an optional value, and an optional flag for        criticality. In PHP a control is given by an        array containing an element with the key oid        and string value, and two optional elements. The optional        elements are key value with string value        and key iscritical with boolean value.        iscritical defaults to FALSE        if not supplied. See \u00bb\u00a0draft-ietf-ldapext-ldap-c-api-xx.txt        for details. See also the second example below.                                newval                      The new value for the specified option.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Set protocol version       <?php\/\/\u00a0$ds\u00a0is\u00a0a\u00a0valid\u00a0link\u00a0identifier\u00a0for\u00a0a\u00a0directory\u00a0serverif\u00a0(ldap_set_option($ds,\u00a0LDAP_OPT_PROTOCOL_VERSION,\u00a03))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Using\u00a0LDAPv3\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Failed\u00a0to\u00a0set\u00a0protocol\u00a0version\u00a0to\u00a03\";}?>                     Example #2 Set server controls       <?php\/\/\u00a0$ds\u00a0is\u00a0a\u00a0valid\u00a0link\u00a0identifier\u00a0for\u00a0a\u00a0directory\u00a0server\/\/\u00a0control\u00a0with\u00a0no\u00a0value$ctrl1\u00a0=\u00a0array(\"oid\"\u00a0=>\u00a0\"1.2.752.58.10.1\",\u00a0\"iscritical\"\u00a0=>\u00a0true);\/\/\u00a0iscritical\u00a0defaults\u00a0to\u00a0FALSE$ctrl2\u00a0=\u00a0array(\"oid\"\u00a0=>\u00a0\"1.2.752.58.1.10\",\u00a0\"value\"\u00a0=>\u00a0\"magic\");\/\/\u00a0try\u00a0to\u00a0set\u00a0both\u00a0controlsif\u00a0(!ldap_set_option($ds,\u00a0LDAP_OPT_SERVER_CONTROLS,\u00a0array($ctrl1,\u00a0$ctrl2)))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Failed\u00a0to\u00a0set\u00a0server\u00a0controls\";}?>                        Notes   Note:          This function is only available when using OpenLDAP 2.x.x OR Netscape     Directory SDK x.x.                See Also            ldap_get_option() - Get the current value for given option"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-search.php","title":"ldap_search","description":"ldap_search   (PHP 4, PHP 5)ldap_search \u2014 Search LDAP tree         Description       resource ldap_search     ( resource $link_identifier    , string $base_dn    , string $filter    [, array $attributes    [, int $attrsonly    [, int $sizelimit    [, int $timelimit    [, int $deref   ]]]]] )        Performs the search for a specified filter on the directory with the scope    of LDAP_SCOPE_SUBTREE. This is equivalent to searching    the entire directory.          From 4.0.5 on it&#039;s also possible to do parallel searches. To do this    you use an array of link identifiers, rather than a single identifier,    as the first argument. If you don&#039;t want the same base DN and the    same filter for all the searches, you can also use an array of base DNs    and\/or an array of filters. Those arrays must be of the same size as    the link identifier array since the first entries of the arrays are    used for one search, the second entries are used for another, and so    on. When doing parallel searches an array of search result    identifiers is returned, except in case of error, then the entry    corresponding to the search will be FALSE. This is very much like    the value normally returned, except that a result identifier is always    returned when a search was made. There are some rare cases where the    normal search returns FALSE while the parallel search returns an    identifier.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                base_dn                      The base DN for the directory.                                filter                      The search filter can be simple or advanced, using boolean operators in        the format described in the LDAP documentation (see the \u00bb\u00a0Netscape Directory SDK for full        information on filters).                                attributes                      An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\").        Note that the \"dn\" is always returned irrespective of which attributes        types are requested.                      Using this parameter is much more efficient than the default action        (which is to return all attributes and their associated values).         The use of this parameter should therefore be considered good        practice.                                attrsonly                      Should be set to 1 if only attribute types are wanted. If set to 0        both attributes types and attribute values are fetched which is the        default behaviour.                                sizelimit                      Enables you to limit the count of entries fetched. Setting this to 0        means no limit.              Note:                  This parameter can NOT override server-side preset sizelimit. You can         set it lower though.                         Some directory server hosts will be configured to return no more than         a preset number of entries. If this occurs, the server will indicate         that it has only returned a partial results set. This also occurs if         you use this parameter to limit the count of fetched entries.                                        timelimit                      Sets the number of seconds how long is spend on the search. Setting        this to 0 means no limit.              Note:                  This parameter can NOT override server-side preset timelimit. You can         set it lower though.                                        deref                      Specifies how aliases should be handled during the search. It can be        one of the following:                                      LDAP_DEREF_NEVER - (default) aliases are never           dereferenced.                                                 LDAP_DEREF_SEARCHING - aliases should be           dereferenced during the search but not when locating the base object           of the search.                                                 LDAP_DEREF_FINDING - aliases should be           dereferenced when locating the base object but not during the search.                                                 LDAP_DEREF_ALWAYS - aliases should be dereferenced           always.                                                                Return Values       Returns a search result identifier or FALSE on error.            Changelog                                 Version        Description                                    4.0.5                 Parallel searches support was added.                               4.0.2                 The attrsonly, sizelimit,         timelimit and deref were         added.                                            Examples       The example below retrieves the organizational unit, surname,    given name and email address for all people in \"My Company\" where    the surname or given name contains the substring $person. This    example uses a boolean filter to tell the server to look for    information in more than one attribute.         Example #1 LDAP search       <?php\/\/\u00a0$ds\u00a0is\u00a0a\u00a0valid\u00a0link\u00a0identifier\u00a0for\u00a0a\u00a0directory\u00a0server\/\/\u00a0$person\u00a0is\u00a0all\u00a0or\u00a0part\u00a0of\u00a0a\u00a0person's\u00a0name,\u00a0eg\u00a0\"Jo\"$dn\u00a0=\u00a0\"o=My\u00a0Company,\u00a0c=US\";$filter=\"(|(sn=$person*)(givenname=$person*))\";$justthese\u00a0=\u00a0array(\"ou\",\u00a0\"sn\",\u00a0\"givenname\",\u00a0\"mail\");$sr=ldap_search($ds,\u00a0$dn,\u00a0$filter,\u00a0$justthese);$info\u00a0=\u00a0ldap_get_entries($ds,\u00a0$sr);echo\u00a0$info[\"count\"].\"\u00a0entries\u00a0returned\\n\";?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-t61-to-8859.php","title":"ldap_t61_to_8859","description":"ldap_t61_to_8859   (PHP 4 >= 4.0.2, PHP 5)ldap_t61_to_8859 \u2014 Translate t61 characters to 8859 characters         Description       string ldap_t61_to_8859     ( string $value    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-set-rebind-proc.php","title":"ldap_set_rebind_proc","description":"ldap_set_rebind_proc   (PHP 4 >= 4.2.0, PHP 5)ldap_set_rebind_proc \u2014 Set a callback function to do re-binds on referral chasing         Description       bool ldap_set_rebind_proc     ( resource $link    , callback $callback    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-sort.php","title":"ldap_sort","description":"ldap_sort   (PHP 4 >= 4.2.0, PHP 5)ldap_sort \u2014 Sort LDAP result entries         Description       bool ldap_sort     ( resource $link    , resource $result    , string $sortfilter    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-start-tls.php","title":"ldap_start_tls","description":"ldap_start_tls   (PHP 4 >= 4.2.0, PHP 5)ldap_start_tls \u2014 Start TLS         Description       bool ldap_start_tls     ( resource $link    )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-determine-best-xfer-encoding.php","title":"mailparse_determine_best_xfer_encoding","description":"mailparse_determine_best_xfer_encoding   (PECL mailparse >= 0.9.0)mailparse_determine_best_xfer_encoding \u2014 Gets the best way of encoding        Description       string mailparse_determine_best_xfer_encoding     ( resource $fp    )        Figures out the best way of encoding the content read from the given file    pointer.            Parameters                    fp                      A valid file pointer, which must be seek-able.                                     Return Values       Returns one of the character encodings supported by the    mbstring module.             Examples            Example #1 mailparse_determine_best_xfer_encoding() example       <?php$fp\u00a0=\u00a0fopen('somemail.eml',\u00a0'r');echo\u00a0'Best\u00a0encoding:\u00a0'\u00a0.\u00a0mailparse_determine_best_xfer_encoding($fp);?>             The above example will output something similar to:       Best encoding: 7bit"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-unbind.php","title":"ldap_unbind","description":"ldap_unbind   (PHP 4, PHP 5)ldap_unbind \u2014 Unbind from LDAP directory         Description       bool ldap_unbind     ( resource $link_identifier    )        Unbinds from the LDAP directory.            Parameters                    link_identifier                      An LDAP link identifier, returned by ldap_connect().                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            ldap_bind() - Bind to LDAP directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-create.php","title":"mailparse_msg_create","description":"mailparse_msg_create   (PECL mailparse >= 0.9.0)mailparse_msg_create \u2014 Create a mime mail resource        Description       resource mailparse_msg_create     ( void    )        Create a MIME mail resource.            Return Values       Returns a handle that can be used to parse a message.            See Also            mailparse_msg_free() - Frees a MIME resource     mailparse_msg_parse_file() - Parses a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-extract-part-file.php","title":"mailparse_msg_extract_part_file","description":"mailparse_msg_extract_part_file   (PECL mailparse >= 0.9.0)mailparse_msg_extract_part_file \u2014 Extracts\/decodes a message section        Description       string mailparse_msg_extract_part_file     ( resource $mimemail    , mixed $filename    [, callback $callbackfunc   ] )        Extracts\/decodes a message section from the supplied filename.          The contents of the section will be decoded according to their transfer    encoding - base64, quoted-printable and uuencoded text are supported.              Parameters                    mimemail                      A valid MIME resource, created with        mailparse_msg_create().                                filename                      Can be a file name or a valid stream resource.                                callbackfunc                      If set, this must be either a valid callback that will be passed the        extracted section, or NULL to make this function return the        extracted section.                      If not specified, the contents will be sent to \"stdout\".                                     Return Values       If callbackfunc is not NULL returns TRUE on    success.          If callbackfunc is set to NULL, returns the    extracted section as a string.          Returns FALSE on error.            See Also            mailparse_msg_extract_part() - Extracts\/decodes a message section     mailparse_msg_extract_whole_part_file() - Extracts a message section including headers without decoding the transfer encoding"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-extract-whole-part-file.php","title":"mailparse_msg_extract_whole_part_file","description":"mailparse_msg_extract_whole_part_file   (PECL mailparse >= 0.9.0)mailparse_msg_extract_whole_part_file \u2014 Extracts a message section including headers without decoding the transfer encoding        Description       string mailparse_msg_extract_whole_part_file     ( resource $mimemail    , string $filename    [, callback $callbackfunc   ] )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    mimemail                      A valid MIME resource.                                filename                                              callbackfunc                                                   Return Values               See Also            mailparse_msg_extract_part() - Extracts\/decodes a message section     mailparse_msg_extract_part_file() - Extracts\/decodes a message section"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-get-part-data.php","title":"mailparse_msg_get_part_data","description":"mailparse_msg_get_part_data   (PECL mailparse >= 0.9.0)mailparse_msg_get_part_data \u2014 Returns an associative array of info about the message        Description       array mailparse_msg_get_part_data     ( resource $mimemail    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    mimemail                      A valid MIME resource."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-free.php","title":"mailparse_msg_free","description":"mailparse_msg_free   (PECL mailparse >= 0.9.0)mailparse_msg_free \u2014 Frees a MIME resource        Description       bool mailparse_msg_free     ( resource $mimemail    )        Frees a MIME resource.            Parameters                    mimemail                      A valid MIME resource allocated by        mailparse_msg_create() or         mailparse_msg_parse_file().                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            mailparse_msg_create() - Create a mime mail resource     mailparse_msg_parse_file() - Parses a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-extract-part.php","title":"mailparse_msg_extract_part","description":"mailparse_msg_extract_part   (PECL mailparse >= 0.9.0)mailparse_msg_extract_part \u2014     Extracts\/decodes a message section           Description       void mailparse_msg_extract_part     ( resource $mimemail    , string $msgbody    [, callback $callbackfunc   ] )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    mimemail                      A valid MIME resource.                                msgbody                                              callbackfunc                                                   Return Values       No value is returned.            See Also            mailparse_msg_extract_part_file() - Extracts\/decodes a message section     mailparse_msg_extract_whole_part_file() - Extracts a message section including headers without decoding the transfer encoding"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-get-part.php","title":"mailparse_msg_get_part","description":"mailparse_msg_get_part   (PECL mailparse >= 0.9.0)mailparse_msg_get_part \u2014 Returns a handle on a given section in a mimemessage        Description       resource mailparse_msg_get_part     ( resource $mimemail    , string $mimesection    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    mimemail                      A valid MIME resource.                                mimesection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-get-structure.php","title":"mailparse_msg_get_structure","description":"mailparse_msg_get_structure   (PECL mailparse >= 0.9.0)mailparse_msg_get_structure \u2014 Returns an array of mime section names in the supplied message        Description       array mailparse_msg_get_structure     ( resource $mimemail    )    WarningThis function is currently not documented; only its argument list is available.          Parameters                    mimemail                      A valid MIME resource."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-parse-file.php","title":"mailparse_msg_parse_file","description":"mailparse_msg_parse_file   (PECL mailparse >= 0.9.0)mailparse_msg_parse_file \u2014 Parses a file        Description       resource mailparse_msg_parse_file     ( string $filename    )        Parses a file.    This is the optimal way of parsing a mail file that you have on disk.            Parameters                    filename                      Path to the file holding the message.        The file is opened and streamed through the parser.                                     Return Values       Returns a MIME resource representing the structure, or    FALSE on error.            See Also            mailparse_msg_free() - Frees a MIME resource     mailparse_msg_create() - Create a mime mail resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-parse.php","title":"mailparse_msg_parse","description":"mailparse_msg_parse   (PECL mailparse >= 0.9.0)mailparse_msg_parse \u2014 Incrementally parse data into buffer        Description       bool mailparse_msg_parse     ( resource $mimemail    , string $data    )        Incrementally parse data into the supplied mime mail resource.          This function allow you to stream portions of a file at a time, rather    than read and parse the whole thing.            Parameters                    mimemail                      A valid MIME resource.                                data                                                   Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-stream-encode.php","title":"mailparse_stream_encode","description":"mailparse_stream_encode   (PECL mailparse >= 0.9.0)mailparse_stream_encode \u2014     Streams data from source file pointer, apply encoding and write to destfp            Description       bool mailparse_stream_encode     ( resource $sourcefp    , resource $destfp    , string $encoding          )        Streams data from the source file pointer, apply     encoding and write to the destination file pointer.             Parameters                    sourcefp                      A valid file handle. The file is streamed through the parser.                                destfp                      The destination file handle in which the encoded data will be written.                                encoding                      One of the character encodings supported by the        mbstring module.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 mailparse_stream_encode() example       <?php\/\/\u00a0email.eml\u00a0contents:\u00a0hello,\u00a0this\u00a0is\u00a0some\u00a0text=hello.$fp\u00a0=\u00a0fopen('email.eml',\u00a0'r');$dest\u00a0=\u00a0tmpfile();mailparse_stream_encode($fp,\u00a0$dest,\u00a0\"quoted-printable\");rewind($dest);\/\/\u00a0Display\u00a0new\u00a0file\u00a0contentsfpassthru($dest);?>             The above example will output:       hello, this is some text=3Dhello."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-rfc822-parse-addresses.php","title":"mailparse_rfc822_parse_addresses","description":"mailparse_rfc822_parse_addresses   (PECL mailparse >= 0.9.0)mailparse_rfc822_parse_addresses \u2014 Parse RFC 822 compliant addresses        Description       array mailparse_rfc822_parse_addresses     ( string $addresses    )        Parses a \u00bb\u00a0RFC 822 compliant recipient    list, such as that found in the To: header.            Parameters                    addresses                      A string containing addresses, like in:        Wez Furlong <wez@example.com>, doe@example.com              Note:                  This string must not include the header name.                                             Return Values       Returns an array of associative arrays with the following keys for each    recipient:                              display                 The recipient name, for display purpose. If this part is not set for a         recipient, this key will hold the same value as          address.                               address        The email address                       is_group        TRUE if the recipient is a newsgroup, FALSE otherwise.                                    Examples            Example #1 mailparse_rfc822_parse_addresses() example       <?php$to\u00a0=\u00a0'Wez\u00a0Furlong\u00a0<wez@example.com>,\u00a0doe@example.com';var_dump(mailparse_rfc822_parse_addresses($to));?>             The above example will output:       array(2) {   [0]=>   array(3) {     [\"display\"]=>     string(11) \"Wez Furlong\"     [\"address\"]=>     string(15) \"wez@example.com\"     [\"is_group\"]=>     bool(false)   }   [1]=>   array(3) {     [\"display\"]=>     string(15) \"doe@example.com\"     [\"address\"]=>     string(15) \"doe@example.com\"     [\"is_group\"]=>     bool(false)   } }"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-uudecode-all.php","title":"mailparse_uudecode_all","description":"mailparse_uudecode_all   (PECL mailparse >= 0.9.0)mailparse_uudecode_all \u2014     Scans the data from fp and extract each embedded uuencoded file           Description       array mailparse_uudecode_all     ( resource $fp    )        Scans the data from the given file pointer and extract each embedded    uuencoded file into a temporary file.            Parameters                    fp                      A valid file pointer.                                     Return Values       Returns an array of associative arrays listing filename information.                              filename        Path to the temporary file name created                       origfilename        The original filename, for uuencoded parts only                            The first filename entry is the message body. The next entries are the    decoded uuencoded files.            Examples            Example #1 mailparse_uudecode_all() example       <?php$text\u00a0=\u00a0<<<EODTo:\u00a0fred@example.comhello,\u00a0this\u00a0is\u00a0some\u00a0text\u00a0hello.blah\u00a0blah\u00a0blah.begin\u00a0644\u00a0test.txt\/=&AI<R!I<R!A('1E<W0*`endEOD;$fp\u00a0=\u00a0tmpfile();fwrite($fp,\u00a0$text);$data\u00a0=\u00a0mailparse_uudecode_all($fp);echo\u00a0\"BODY\\n\";readfile($data[0][\"filename\"]);echo\u00a0\"UUE\u00a0({$data[1]['origfilename']})\\n\";readfile($data[1][\"filename\"]);\/\/\u00a0Clean\u00a0upunlink($data[0][\"filename\"]);unlink($data[1][\"filename\"]);?>             The above example will output:       BODY To: fred@example.com  hello, this is some text hello. blah blah blah.  UUE (test.txt) this is a test"},{"url":"http:\/\/www.php.net\/manual\/en\/function.memcache-debug.php","title":"memcache_debug","description":"memcache_debug   (PECL memcache >= 0.2.0)memcache_debug \u2014 Turn debug output on\/off         Description       bool memcache_debug     ( bool $on_off    )         memcache_debug() turns on debug output if parameter    on_off is equal to TRUE and turns off if it&#039;s    FALSE.    Note:            memcache_debug() is accessible only if PHP was built      with --enable-debug option and always returns TRUE in this case.      Otherwise, this function has no effect and always returns FALSE.                      Parameters                    on_off                      Turns debug output on if equals to TRUE.        Turns debug output off if equals to FALSE.                                     Return Values       Returns TRUE if PHP was built with --enable-debug option, otherwise    returns FALSE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ezmlm-hash.php","title":"ezmlm_hash","description":"ezmlm_hash   (PHP 4 >= 4.0.2, PHP 5)ezmlm_hash \u2014 Calculate the hash value needed by EZMLM         Description       int ezmlm_hash     ( string $addr    )        ezmlm_hash() calculates the hash value needed    when keeping EZMLM mailing lists in a MySQL database.            Parameters                    addr                      The email address that&#039;s being hashed.                                     Return Values       The hash value of addr.             Examples            Example #1 Calculating the hash and subscribing a user       <?php$user\u00a0=\u00a0\"joecool@example.com\";$hash\u00a0=\u00a0ezmlm_hash($user);$query\u00a0=\u00a0sprintf(\"INSERT\u00a0INTO\u00a0sample\u00a0VALUES\u00a0(%s,\u00a0'%s')\",\u00a0$hash,\u00a0$user);$db->query($query);\u00a0\/\/\u00a0using\u00a0PHPLIB\u00a0db\u00a0interface?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.acosh.php","title":"acosh","description":"acosh   (PHP 4 >= 4.1.0, PHP 5)acosh \u2014 Inverse hyperbolic cosine        Description         float acosh      ( float $arg     )        Returns the inverse hyperbolic cosine of    arg, i.e. the value whose    hyperbolic cosine is arg.           Parameters                    arg                      The value to process                                    Return Values       The inverse hyperbolic cosine of arg           Changelog                                 Version        Description                                    5.3.0                  This function is now available on all platforms                                           See Also            cosh() - Hyperbolic cosine     acos() - Arc cosine     asinh() - Inverse hyperbolic sine     atanh() - Inverse hyperbolic tangent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.acos.php","title":"acos","description":"acos   (PHP 4, PHP 5)acos \u2014 Arc cosine        Description         float acos      ( float $arg     )        Returns the arc cosine of arg in radians.    acos() is the complementary function of    cos(), which means that    a==cos(acos(a)) for every value of a that is within    acos()&#039; range.           Parameters                    arg                      The argument to process                                    Return Values       The arc cosine of arg in radians.           See Also            cos() - Cosine     acosh() - Inverse hyperbolic cosine     asin() - Arc sine     atan() - Arc tangent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.abs.php","title":"abs","description":"abs   (PHP 4, PHP 5)abs \u2014 Absolute value        Description         number abs      ( mixed $number     )        Returns the absolute value of number.            Parameters                    number                      The numeric value to process                                    Return Values       The absolute value of number. If the    argument number is    of type float, the return type is also float,    otherwise it is integer (as float usually has a    bigger value range than integer).           Examples            Example #1 abs() example       <?php$abs\u00a0=\u00a0abs(-4.2);\u00a0\/\/\u00a0$abs\u00a0=\u00a04.2;\u00a0(double\/float)$abs2\u00a0=\u00a0abs(5);\u00a0\u00a0\u00a0\/\/\u00a0$abs2\u00a0=\u00a05;\u00a0(integer)$abs3\u00a0=\u00a0abs(-5);\u00a0\u00a0\/\/\u00a0$abs3\u00a0=\u00a05;\u00a0(integer)?>                        See Also            gmp_abs() - Absolute value     gmp_sign() - Sign of number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.asin.php","title":"asin","description":"asin   (PHP 4, PHP 5)asin \u2014 Arc sine        Description         float asin      ( float $arg     )        Returns the arc sine of arg in radians.    asin() is the complementary function of    sin(), which means that    a==sin(asin(a)) for every value of a that is within    asin()&#039;s range.           Parameters                    arg                      The argument to process                                    Return Values       The arc sine of arg in radians           See Also            sin() - Sine     asinh() - Inverse hyperbolic sine     acos() - Arc cosine     atan() - Arc tangent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.asinh.php","title":"asinh","description":"asinh   (PHP 4 >= 4.1.0, PHP 5)asinh \u2014 Inverse hyperbolic sine        Description         float asinh      ( float $arg     )        Returns the inverse hyperbolic sine of    arg, i.e. the value whose    hyperbolic sine is arg.           Parameters                    arg                      The argument to process                                    Return Values       The inverse hyperbolic sine of arg            Changelog                                 Version        Description                                    5.3.0                  This function is now available on all platforms                                           See Also            sinh() - Hyperbolic sine     asin() - Arc sine     acosh() - Inverse hyperbolic cosine     atanh() - Inverse hyperbolic tangent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.atan2.php","title":"atan2","description":"atan2   (PHP 4, PHP 5)atan2 \u2014 Arc tangent of two variables        Description         float atan2      ( float $y     , float $x     )        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y \/ x, except that    the signs of both arguments are used to determine the quadrant of    the result.          The function returns the result in radians, which is between -PI    and PI (inclusive).           Parameters                    y                      Dividend parameter                                x                      Divisor parameter                                    Return Values       The arc tangent of y\/x     in radians.           See Also            atan() - Arc tangent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.atan.php","title":"atan","description":"atan   (PHP 4, PHP 5)atan \u2014 Arc tangent        Description         float atan      ( float $arg     )        Returns the arc tangent of arg in radians.    atan() is the complementary function of    tan(), which means that    a==tan(atan(a)) for every value of a that is within    atan()&#039;s range.           Parameters                    arg                      The argument to process                                    Return Values       The arc tangent of arg in radians.           See Also            tan() - Tangent     atanh() - Inverse hyperbolic tangent     asin() - Arc sine     acos() - Arc cosine"},{"url":"http:\/\/www.php.net\/manual\/en\/function.atanh.php","title":"atanh","description":"atanh   (PHP 4 >= 4.1.0, PHP 5)atanh \u2014 Inverse hyperbolic tangent        Description         float atanh      ( float $arg     )        Returns the inverse hyperbolic tangent of    arg, i.e. the value whose    hyperbolic tangent is arg.           Parameters                    arg                      The argument to process                                    Return Values       Inverse hyperbolic tangent of arg            Changelog                                 Version        Description                                    5.3.0                  This function is now available on all platforms                                           See Also            tanh() - Hyperbolic tangent     atan() - Arc tangent     asinh() - Inverse hyperbolic sine     acosh() - Inverse hyperbolic cosine"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cos.php","title":"cos","description":"cos   (PHP 4, PHP 5)cos \u2014 Cosine        Description         float cos      ( float $arg     )        cos() returns the cosine of the arg    parameter.  The arg parameter is in radians.           Parameters                    arg                      An angle in radians                                     Return Values       The cosine of arg           Examples            Example #1 cos() example       <?phpecho\u00a0cos(M_PI);\u00a0\/\/\u00a0-1?>                       See Also            acos() - Arc cosine     sin() - Sine     tan() - Tangent     deg2rad() - Converts the number in degrees to the radian equivalent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bindec.php","title":"bindec","description":"bindec   (PHP 4, PHP 5)bindec \u2014 Binary to decimal        Description         number bindec      ( string $binary_string     )        Returns the decimal equivalent of the binary number represented by    the binary_string argument.          bindec() converts a binary number to an    integer or, if needed for size reasons, float.          bindec() interprets all    binary_string values as unsigned    integers. This is because bindec() sees    the most significant bit as another order of magnitude    rather than as the sign bit.           Parameters                    binary_string                      The binary string to convert                               Warning         The parameter must be a string.     Using other data types will produce unexpected results.               Return Values       The decimal value of binary_string           Changelog                                 Version        Description                                    Since 4.1.0                 The function can now convert numbers that are too large to         fit into the platforms integer type, larger values         are returned as float in that case.                                           Examples            Example #1 bindec() example       <?phpecho\u00a0bindec('110011')\u00a0.\u00a0\"\\n\";echo\u00a0bindec('000110011')\u00a0.\u00a0\"\\n\";echo\u00a0bindec('111');?>             The above example will output:       51 51 7                         Example #2 bindec() interprets input as unsigned integers       <?php\/*\u00a0*\u00a0The\u00a0lesson\u00a0from\u00a0this\u00a0example\u00a0is\u00a0in\u00a0the\u00a0output\u00a0*\u00a0rather\u00a0than\u00a0the\u00a0PHP\u00a0code\u00a0itself.\u00a0*\/$magnitude_lower\u00a0=\u00a0pow(2,\u00a0(PHP_INT_SIZE\u00a0*\u00a08)\u00a0-\u00a02);p($magnitude_lower\u00a0-\u00a01);p($magnitude_lower,\u00a0'See\u00a0the\u00a0rollover?\u00a0\u00a0Watch\u00a0it\u00a0next\u00a0time\u00a0around...');p(PHP_INT_MAX,\u00a0'PHP_INT_MAX');p(~PHP_INT_MAX,\u00a0'interpreted\u00a0to\u00a0be\u00a0one\u00a0more\u00a0than\u00a0PHP_INT_MAX');if\u00a0(PHP_INT_SIZE\u00a0==\u00a04)\u00a0{\u00a0\u00a0\u00a0\u00a0$note\u00a0=\u00a0'interpreted\u00a0to\u00a0be\u00a0the\u00a0largest\u00a0unsigned\u00a0integer';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0$note\u00a0=\u00a0'interpreted\u00a0to\u00a0be\u00a0the\u00a0largest\u00a0unsigned\u00a0integer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(18446744073709551615)\u00a0but\u00a0skewed\u00a0by\u00a0float\u00a0precision';}p(-1,\u00a0$note);function\u00a0p($input,\u00a0$note\u00a0=\u00a0'')\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"input:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$input\\n\";\u00a0\u00a0\u00a0\u00a0$format\u00a0=\u00a0'%0'\u00a0.\u00a0(PHP_INT_SIZE\u00a0*\u00a08)\u00a0.\u00a0'b';\u00a0\u00a0\u00a0\u00a0$bin\u00a0=\u00a0sprintf($format,\u00a0$input);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"binary:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bin\\n\";\u00a0\u00a0\u00a0\u00a0ini_set('precision',\u00a020);\u00a0\u00a0\/\/\u00a0For\u00a0readability\u00a0on\u00a064\u00a0bit\u00a0boxes.\u00a0\u00a0\u00a0\u00a0$dec\u00a0=\u00a0bindec($bin);\u00a0\u00a0\u00a0\u00a0echo\u00a0'bindec():\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0$dec\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0if\u00a0($note)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"NOTE:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$note\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\n\";}?>             Output of the above example on 32 bit machines:       input:        1073741823 binary:       00111111111111111111111111111111 bindec():     1073741823  input:        1073741824 binary:       01000000000000000000000000000000 bindec():     1073741824 NOTE:         See the rollover?  Watch it next time around...  input:        2147483647 binary:       01111111111111111111111111111111 bindec():     2147483647 NOTE:         PHP_INT_MAX  input:        -2147483648 binary:       10000000000000000000000000000000 bindec():     2147483648 NOTE:         interpreted to be one more than PHP_INT_MAX  input:        -1 binary:       11111111111111111111111111111111 bindec():     4294967295 NOTE:         interpreted to be the largest unsigned integer           Output of the above example on 64 bit machines:       input:        4611686018427387903 binary:       0011111111111111111111111111111111111111111111111111111111111111 bindec():     4611686018427387903  input:        4611686018427387904 binary:       0100000000000000000000000000000000000000000000000000000000000000 bindec():     4611686018427387904 NOTE:         See the rollover?  Watch it next time around...  input:        9223372036854775807 binary:       0111111111111111111111111111111111111111111111111111111111111111 bindec():     9223372036854775807 NOTE:         PHP_INT_MAX  input:        -9223372036854775808 binary:       1000000000000000000000000000000000000000000000000000000000000000 bindec():     9223372036854775808 NOTE:         interpreted to be one more than PHP_INT_MAX  input:        -1 binary:       1111111111111111111111111111111111111111111111111111111111111111 bindec():     18446744073709551616 NOTE:         interpreted to be the largest unsigned integer               (18446744073709551615) but skewed by float precision                     See Also            decbin() - Decimal to binary     octdec() - Octal to decimal     hexdec() - Hexadecimal to decimal     base_convert() - Convert a number between arbitrary bases"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ceil.php","title":"ceil","description":"ceil   (PHP 4, PHP 5)ceil \u2014 Round fractions up        Description         float ceil      ( float $value     )        Returns the next highest integer value by rounding up     value if necessary.            Parameters                    value                      The value to round                                    Return Values       value rounded up to the next highest    integer.    The return value of ceil() is still of type    float as the value range of float is     usually bigger than that of integer.           Examples            Example #1 ceil() example       <?phpecho\u00a0ceil(4.3);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05echo\u00a0ceil(9.999);\u00a0\u00a0\/\/\u00a010echo\u00a0ceil(-3.14);\u00a0\u00a0\/\/\u00a0-3?>                       See Also            floor() - Round fractions down     round() - Rounds a float"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cosh.php","title":"cosh","description":"cosh   (PHP 4 >= 4.1.0, PHP 5)cosh \u2014 Hyperbolic cosine        Description         float cosh      ( float $arg     )        Returns the hyperbolic cosine of arg,    defined as (exp(arg) + exp(-arg))\/2.           Parameters                    arg                      The argument to process                                    Return Values       The hyperbolic cosine of arg           See Also            cos() - Cosine     acosh() - Inverse hyperbolic cosine     sinh() - Hyperbolic sine     cosh()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.decoct.php","title":"decoct","description":"decoct   (PHP 4, PHP 5)decoct \u2014 Decimal to octal        Description         string decoct      ( int $number     )        Returns a string containing an octal representation of the given    number argument.  The largest number that can be converted is    4294967295 in decimal resulting to \"37777777777\".            Parameters                    number                      Decimal value to convert                                    Return Values       Octal string representation of number           Examples            Example #1 decoct() example       <?phpecho\u00a0decoct(15)\u00a0.\u00a0\"\\n\";echo\u00a0decoct(264);?>             The above example will output:       17 410                     See Also            octdec() - Octal to decimal     decbin() - Decimal to binary     dechex() - Decimal to hexadecimal     base_convert() - Convert a number between arbitrary bases"},{"url":"http:\/\/www.php.net\/manual\/en\/function.base-convert.php","title":"base_convert","description":"base_convert   (PHP 4, PHP 5)base_convert \u2014 Convert a number between arbitrary bases        Description         string base_convert      ( string $number     , int $frombase     , int $tobase     )        Returns a string containing number    represented in base tobase.  The base in    which number is given is specified in    frombase.  Both    frombase and tobase    have to be between 2 and 36, inclusive.  Digits in numbers with a    base higher than 10 will be represented with the letters a-z,    with a meaning 10, b meaning 11 and z meaning 35.      Warning         base_convert() may lose precision on large numbers     due to properties related to the internal \"double\" or \"float\" type used.     Please see the Floating point numbers     section in the manual for more specific information and limitations.               Parameters                    number                      The number to convert                                frombase                      The base number is in                                tobase                      The base to convert number to                                    Return Values       number converted to base tobase           Examples            Example #1 base_convert() example       <?php$hexadecimal\u00a0=\u00a0'A37334';echo\u00a0base_convert($hexadecimal,\u00a016,\u00a02);?>             The above example will output:       101000110111001100110100                     See Also            intval() - Get the integer value of a variable"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mail.php","title":"mail","description":"mail   (PHP 4, PHP 5)mail \u2014 Send mail         Description       bool mail     ( string $to    , string $subject    , string $message    [, string $additional_headers    [, string $additional_parameters   ]] )        Sends an email.            Parameters                    to                      Receiver, or receivers of the mail.                      The formatting of this string must comply with        \u00bb\u00a0RFC 2822. Some examples are:                 user@example.com         user@example.com, anotheruser@example.com         User <user@example.com>         User <user@example.com>, Another User <anotheruser@example.com>                                        subject                      Subject of the email to be sent.              Caution                 Subject must satisfy \u00bb\u00a0RFC 2047.                                        message                      Message to be sent.                      Each line should be separated with a LF (\\n). Lines should not be larger        than 70 characters.              Caution                 (Windows only) When PHP is talking to a SMTP server directly, if a full         stop is found on the start of a line, it is removed. To counter-act this,         replace these occurrences with a double dot.           <?php$text\u00a0=\u00a0str_replace(\"\\n.\",\u00a0\"\\n..\",\u00a0$text);?>                                                    additional_headers (optional)                      String to be inserted at the end of the email header.                      This is typically used to add extra headers (From, Cc, and Bcc).        Multiple extra headers should be separated with a CRLF (\\r\\n).              Note:                  When sending mail, the mail must contain         a From header. This can be set with the          additional_headers parameter, or a default         can be set in php.ini.                         Failing to do this will result in an error         message similar to Warning: mail(): \"sendmail_from\" not         set in php.ini or custom \"From:\" header missing.         The From header sets also         Return-Path under Windows.                      Note:                  If messages are not received, try using a LF (\\n) only.         Some poor quality Unix mail transfer agents replace LF by CRLF         automatically (which leads to doubling CR if CRLF is used).         This should be a last resort, as it does not comply with         \u00bb\u00a0RFC 2822.                                        additional_parameters (optional)                      The additional_parameters parameter        can be used to pass additional flags as command line options to the        program configured to be used when sending mail, as defined by the        sendmail_path configuration setting. For example,        this can be used to set the envelope sender address when using        sendmail with the -f sendmail option.                      The user that the webserver runs as should be added as a trusted user to the        sendmail configuration to prevent a &#039;X-Warning&#039; header from being added        to the message when the envelope sender (-f) is set using this method.        For sendmail users, this file is \/etc\/mail\/trusted-users.                                     Return Values       Returns TRUE if the mail was successfully accepted for delivery, FALSE otherwise.          It is important to note that just because the mail was accepted for delivery,    it does NOT mean the mail will actually reach the intended destination.            Changelog                                 Version        Description                                    4.3.0 (Windows only)                 All custom headers (like From, Cc, Bcc and Date) are supported, and are         not case-sensitive.         (As custom headers are not interpreted by the MTA in the first place,         but are parsed by PHP, PHP < 4.3 only supported the Cc header element         and was case-sensitive).                               4.2.3                 The additional_parameters parameter is disabled in         safe_mode and the         mail() function will expose a warning message         and return FALSE when used.                               4.0.5                 The additional_parameters parameter was added.                                            Examples            Example #1 Sending mail.           Using mail() to send a simple email:            <?php\/\/\u00a0The\u00a0message$message\u00a0=\u00a0\"Line\u00a01\\nLine\u00a02\\nLine\u00a03\";\/\/\u00a0In\u00a0case\u00a0any\u00a0of\u00a0our\u00a0lines\u00a0are\u00a0larger\u00a0than\u00a070\u00a0characters,\u00a0we\u00a0should\u00a0use\u00a0wordwrap()$message\u00a0=\u00a0wordwrap($message,\u00a070);\/\/\u00a0Sendmail('caffeinated@example.com',\u00a0'My\u00a0Subject',\u00a0$message);?>                     Example #2 Sending mail with extra headers.           The addition of basic headers, telling the MUA      the From and Reply-To addresses:            <?php$to\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'nobody@example.com';$subject\u00a0=\u00a0'the\u00a0subject';$message\u00a0=\u00a0'hello';$headers\u00a0=\u00a0'From:\u00a0webmaster@example.com'\u00a0.\u00a0\"\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0'Reply-To:\u00a0webmaster@example.com'\u00a0.\u00a0\"\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0'X-Mailer:\u00a0PHP\/'\u00a0.\u00a0phpversion();mail($to,\u00a0$subject,\u00a0$message,\u00a0$headers);?>                     Example #3 Sending mail with an additional command line parameter.           The additional_parameters parameter      can be used to pass an additional parameter to the program configured      to use when sending mail using the sendmail_path.            <?phpmail('nobody@example.com',\u00a0'the\u00a0subject',\u00a0'the\u00a0message',\u00a0null,\u00a0\u00a0\u00a0'-fwebmaster@example.com');?>                     Example #4 Sending HTML email           It is also possible to send HTML email with mail().            <?php\/\/\u00a0multiple\u00a0recipients$to\u00a0\u00a0=\u00a0'aidan@example.com'\u00a0.\u00a0',\u00a0';\u00a0\/\/\u00a0note\u00a0the\u00a0comma$to\u00a0.=\u00a0'wez@example.com';\/\/\u00a0subject$subject\u00a0=\u00a0'Birthday\u00a0Reminders\u00a0for\u00a0August';\/\/\u00a0message$message\u00a0=\u00a0'<html><head>\u00a0\u00a0<title>Birthday\u00a0Reminders\u00a0for\u00a0August<\/title><\/head><body>\u00a0\u00a0<p>Here\u00a0are\u00a0the\u00a0birthdays\u00a0upcoming\u00a0in\u00a0August!<\/p>\u00a0\u00a0<table>\u00a0\u00a0\u00a0\u00a0<tr>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<th>Person<\/th><th>Day<\/th><th>Month<\/th><th>Year<\/th>\u00a0\u00a0\u00a0\u00a0<\/tr>\u00a0\u00a0\u00a0\u00a0<tr>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td>Joe<\/td><td>3rd<\/td><td>August<\/td><td>1970<\/td>\u00a0\u00a0\u00a0\u00a0<\/tr>\u00a0\u00a0\u00a0\u00a0<tr>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td>Sally<\/td><td>17th<\/td><td>August<\/td><td>1973<\/td>\u00a0\u00a0\u00a0\u00a0<\/tr>\u00a0\u00a0<\/table><\/body><\/html>';\/\/\u00a0To\u00a0send\u00a0HTML\u00a0mail,\u00a0the\u00a0Content-type\u00a0header\u00a0must\u00a0be\u00a0set$headers\u00a0\u00a0=\u00a0'MIME-Version:\u00a01.0'\u00a0.\u00a0\"\\r\\n\";$headers\u00a0.=\u00a0'Content-type:\u00a0text\/html;\u00a0charset=iso-8859-1'\u00a0.\u00a0\"\\r\\n\";\/\/\u00a0Additional\u00a0headers$headers\u00a0.=\u00a0'To:\u00a0Mary\u00a0<mary@example.com>,\u00a0Kelly\u00a0<kelly@example.com>'\u00a0.\u00a0\"\\r\\n\";$headers\u00a0.=\u00a0'From:\u00a0Birthday\u00a0Reminder\u00a0<birthday@example.com>'\u00a0.\u00a0\"\\r\\n\";$headers\u00a0.=\u00a0'Cc:\u00a0birthdayarchive@example.com'\u00a0.\u00a0\"\\r\\n\";$headers\u00a0.=\u00a0'Bcc:\u00a0birthdaycheck@example.com'\u00a0.\u00a0\"\\r\\n\";\/\/\u00a0Mail\u00a0itmail($to,\u00a0$subject,\u00a0$message,\u00a0$headers);?>                      Note:            If intending to send HTML or otherwise Complex mails, it is recommended      to use the PEAR package \u00bb\u00a0PEAR::Mail_Mime.                         Notes   Note:          The Windows implementation of mail() differs in many     ways from the Unix implementation. First, it doesn&#039;t use a local binary     for composing messages but only operates on direct sockets which means a     MTA is needed listening on a network socket (which     can either on the localhost or a remote machine).             Second, the custom headers like     From:,     Cc:,     Bcc: and     Date: are     not interpreted by the     MTA in the first place, but are parsed by PHP.             As such, the to parameter should not be an address     in the form of \"Something <someone@example.com>\". The     mail command may not parse this properly while talking with      the MTA.             Note:          It is worth noting that the mail() function is not     suitable for larger volumes of email in a loop. This function opens     and closes an SMTP socket for each email, which is not very efficient.             For the sending of large amounts of email, see the     \u00bb\u00a0PEAR::Mail, and     \u00bb\u00a0PEAR::Mail_Queue packages.           Note:          The following RFCs may be useful:     \u00bb\u00a0RFC 1896,     \u00bb\u00a0RFC 2045,     \u00bb\u00a0RFC 2046,     \u00bb\u00a0RFC 2047,     \u00bb\u00a0RFC 2048,     \u00bb\u00a0RFC 2049, and     \u00bb\u00a0RFC 2822.                See Also            imap_mail() - Send an email message     \u00bb\u00a0PEAR::Mail     \u00bb\u00a0PEAR::Mail_Mime"},{"url":"http:\/\/www.php.net\/manual\/en\/function.decbin.php","title":"decbin","description":"decbin   (PHP 4, PHP 5)decbin \u2014 Decimal to binary        Description       string decbin     ( int $number    )        Returns a string containing a binary representation of the given    number argument.           Parameters                    number                      Decimal value to convert                       Range of inputs on 32-bit machines                                                                 positive number           negative number           return value                                                   0           \u00a0           0                                1           \u00a0           1                                2           \u00a0           10                                ... normal progression ...                                2147483646           \u00a0           1111111111111111111111111111110                                2147483647 (largest signed integer)           \u00a0           1111111111111111111111111111111 (31 1&#039;s)                                2147483648           -2147483648           10000000000000000000000000000000                                ... normal progression ...                                4294967294           -2           11111111111111111111111111111110                                4294967295 (largest unsigned integer)           -1           11111111111111111111111111111111 (32 1&#039;s)                                                    Range of inputs on 64-bit machines                                                                 positive number           negative number           return value                                                   0           \u00a0           0                                1           \u00a0           1                                2           \u00a0           10                                ... normal progression ...                                9223372036854775806           \u00a0           111111111111111111111111111111111111111111111111111111111111110                                9223372036854775807 (largest signed integer)           \u00a0           111111111111111111111111111111111111111111111111111111111111111 (63 1&#039;s)                                \u00a0           -9223372036854775808           1000000000000000000000000000000000000000000000000000000000000000                                ... normal progression ...                                \u00a0           -2           1111111111111111111111111111111111111111111111111111111111111110                                \u00a0           -1           1111111111111111111111111111111111111111111111111111111111111111 (64 1&#039;s)                                                                  Return Values       Binary string representation of number           Examples            Example #1 decbin() example       <?phpecho\u00a0decbin(12)\u00a0.\u00a0\"\\n\";echo\u00a0decbin(26);?>             The above example will output:       1100 11010                     See Also            bindec() - Binary to decimal     decoct() - Decimal to octal     dechex() - Decimal to hexadecimal     base_convert() - Convert a number between arbitrary bases           printf() - Output a formatted string, using %b,      %032b or %064b as the format                sprintf(), using %b,      %032b or %064b as the format"},{"url":"http:\/\/www.php.net\/manual\/en\/function.deg2rad.php","title":"deg2rad","description":"deg2rad   (PHP 4, PHP 5)deg2rad \u2014     Converts the number in degrees to the radian equivalent           Description         float deg2rad      ( float $number     )        This function converts number from degrees    to the radian equivalent.           Parameters                    number                      Angular value in degrees                                     Return Values       The radian equivalent of number           Examples            Example #1 deg2rad() example       <?phpecho\u00a0deg2rad(45);\u00a0\/\/\u00a00.785398163397var_dump(deg2rad(45)\u00a0===\u00a0M_PI_4);\u00a0\/\/\u00a0bool(true)?>                       See Also            rad2deg() - Converts the radian number to the equivalent number in degrees"},{"url":"http:\/\/www.php.net\/manual\/en\/function.expm1.php","title":"expm1","description":"expm1   (PHP 4 >= 4.1.0, PHP 5)expm1 \u2014     Returns exp(number) - 1, computed in a way that is accurate even    when the value of number is close to zero           Description       float expm1     ( float $arg    )        expm1() returns the equivalent to    &#039;exp(arg) -  1&#039; computed in a way that is    accurate even if the value of arg is near zero,    a case where &#039;exp (arg) - 1&#039; would be    inaccurate due to subtraction of two numbers that are nearly equal.           Parameters                    arg                      The argument to process                                    Return Values       &#039;e&#039; to the power of arg minus one           Changelog                                 Version        Description                                    5.3.0                  This function is now available on all platforms                                           See Also            log1p() - Returns log(1 + number), computed in a way that is accurate even when    the value of number is close to zero     exp() - Calculates the exponent of e"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dechex.php","title":"dechex","description":"dechex   (PHP 4, PHP 5)dechex \u2014 Decimal to hexadecimal        Description         string dechex      ( int $number     )        Returns a string containing a hexadecimal representation of the    given number argument. The largest number that can    be converted is 4294967295 in decimal resulting to \"ffffffff\".           Parameters                    number                      Decimal value to convert                                    Return Values       Hexadecimal string representation of number           Examples            Example #1 dechex() example       <?phpecho\u00a0dechex(10)\u00a0.\u00a0\"\\n\";echo\u00a0dechex(47);?>             The above example will output:       a 2f                     See Also            hexdec() - Hexadecimal to decimal     decbin() - Decimal to binary     decoct() - Decimal to octal     base_convert() - Convert a number between arbitrary bases"},{"url":"http:\/\/www.php.net\/manual\/en\/function.exp.php","title":"exp","description":"exp   (PHP 4, PHP 5)exp \u2014 Calculates the exponent of e        Description         float exp      ( float $arg     )        Returns e raised to the power of arg.      Note:          &#039;e&#039; is the base of the natural system of logarithms, or approximately     2.718282.               Parameters                    arg                      The argument to process                                    Return Values       &#039;e&#039; raised to the power of arg           Examples            Example #1 exp() example       <?phpecho\u00a0exp(12)\u00a0.\u00a0\"\\n\";echo\u00a0exp(5.7);?>             The above example will output:       1.6275E+005 298.87                     See Also            log() - Natural logarithm     pow() - Exponential expression"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getrandmax.php","title":"getrandmax","description":"getrandmax   (PHP 4, PHP 5)getrandmax \u2014 Show largest possible random value        Description         int getrandmax      ( void     )        Returns the maximum value that can be returned by a call to    rand().           Return Values       The largest possible random value returned by rand()           See Also            rand() - Generate a random integer     srand() - Seed the random number generator     mt_getrandmax() - Show largest possible random value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hypot.php","title":"hypot","description":"hypot   (PHP 4 >= 4.1.0, PHP 5)hypot \u2014     Calculate the length of the hypotenuse of a right-angle triangle           Description       float hypot     ( float $x    , float $y    )        hypot() returns the length of the hypotenuse of a    right-angle triangle with sides of length x and    y, or the distance of the point    (x, y) from the origin.    This is equivalent to sqrt(x*x + y*y).           Parameters                    x                      Length of first side                                y                      Length of second side                                    Return Values       Calculated length of the hypotenuse"},{"url":"http:\/\/www.php.net\/manual\/en\/function.floor.php","title":"floor","description":"floor   (PHP 4, PHP 5)floor \u2014 Round fractions down        Description         float floor      ( float $value     )        Returns the next lowest integer value by rounding down    value if necessary.            Parameters                    value                      The numeric value to round                                    Return Values       value rounded to the next lowest integer.    The return value of floor() is still of type    float because the value range of float is     usually bigger than that of integer.           Examples            Example #1 floor() example       <?phpecho\u00a0floor(4.3);\u00a0\u00a0\u00a0\/\/\u00a04echo\u00a0floor(9.999);\u00a0\/\/\u00a09echo\u00a0floor(-3.14);\u00a0\/\/\u00a0-4?>                       See Also            ceil() - Round fractions up     round() - Rounds a float"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fmod.php","title":"fmod","description":"fmod   (PHP 4 >= 4.2.0, PHP 5)fmod \u2014 Returns the floating point remainder (modulo) of the division   of the arguments        Description         float fmod      ( float $x     , float $y     )        Returns the floating point remainder of dividing the dividend    (x) by the divisor (y).    The reminder (r) is defined as: x = i * y + r, for     some integer i. If y is    non-zero, r has the same sign as    x and a magnitude less than the magnitude of    y.           Parameters                    x                      The dividend                                y                      The divisor                                    Return Values       The floating point remainder of     x\/y           Examples            Example #1 Using fmod()       <?php$x\u00a0=\u00a05.7;$y\u00a0=\u00a01.3;$r\u00a0=\u00a0fmod($x,\u00a0$y);\/\/\u00a0$r\u00a0equals\u00a00.5,\u00a0because\u00a04\u00a0*\u00a01.3\u00a0+\u00a00.5\u00a0=\u00a05.7?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-finite.php","title":"is_finite","description":"is_finite   (PHP 4 >= 4.2.0, PHP 5)is_finite \u2014 Finds whether a value is a legal finite number        Description         bool is_finite      ( float $val     )        Checks whether val is a legal finite    on this platform.           Parameters                    val                      The value to check                                    Return Values       TRUE if val is a legal finite    number within the allowed range for a PHP float on this platform,    else FALSE.           See Also            is_infinite() - Finds whether a value is infinite     is_nan() - Finds whether a value is not a number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.log10.php","title":"log10","description":"log10   (PHP 4, PHP 5)log10 \u2014 Base-10 logarithm        Description         float log10      ( float $arg     )        Returns the base-10 logarithm of arg.           Parameters                    arg                      The argument to process                                    Return Values       The base-10 logarithm of arg           See Also            log() - Natural logarithm"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lcg-value.php","title":"lcg_value","description":"lcg_value   (PHP 4, PHP 5)lcg_value \u2014 Combined linear congruential generator        Description         float lcg_value      ( void     )        lcg_value() returns a pseudo random number in    the range of (0, 1).  The function combines two CGs with periods    of 2^31 - 85 and 2^31 - 249. The period of this function is equal    to the product of both primes.           Return Values       A pseudo random float value in the range of (0, 1)           See Also            rand() - Generate a random integer     mt_rand() - Generate a better random value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-infinite.php","title":"is_infinite","description":"is_infinite   (PHP 4 >= 4.2.0, PHP 5)is_infinite \u2014 Finds whether a value is infinite        Description         bool is_infinite      ( float $val     )        Returns TRUE if val is infinite (positive or     negative), like the result of log(0) or any value too     big to fit into a float on this platform.           Parameters                    val                      The value to check                                    Return Values       TRUE if val is infinite, else FALSE.           See Also            is_finite() - Finds whether a value is a legal finite number     is_nan() - Finds whether a value is not a number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-nan.php","title":"is_nan","description":"is_nan   (PHP 4 >= 4.2.0, PHP 5)is_nan \u2014 Finds whether a value is not a number         Description       bool is_nan     ( float $val    )        Checks whether val is &#039;not a number&#039;,     like the result of acos(1.01).            Parameters                    val                      The value to check                                     Return Values       Returns TRUE if val is &#039;not a number&#039;,    else FALSE.            Examples            Example #1 is_nan() example       <?php\/\/\u00a0Invalid\u00a0calculation,\u00a0will\u00a0return\u00a0a\u00a0\/\/\u00a0NaN\u00a0value$nan\u00a0=\u00a0acos(8);var_dump($nan,\u00a0is_nan($nan));?>             The above example will output:       float(NAN) bool(true)                      See Also            is_finite() - Finds whether a value is a legal finite number     is_infinite() - Finds whether a value is infinite"},{"url":"http:\/\/www.php.net\/manual\/en\/function.log1p.php","title":"log1p","description":"log1p   (PHP 4 >= 4.1.0, PHP 5)log1p \u2014     Returns log(1 + number), computed in a way that is accurate even when    the value of number is close to zero           Description       float log1p     ( float $number    )        log1p() returns log(1 +    number) computed in a way that is accurate even    when the value of number is close to zero.    log() might only return log(1) in this case    due to lack of precision.           Parameters                    number                      The argument to process                                    Return Values       log(1 + number)           Changelog                                 Version        Description                                    5.3.0                  This function is now available on all platforms                                           See Also            expm1() - Returns exp(number) - 1, computed in a way that is accurate even    when the value of number is close to zero     log() - Natural logarithm     log10() - Base-10 logarithm"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hexdec.php","title":"hexdec","description":"hexdec   (PHP 4, PHP 5)hexdec \u2014 Hexadecimal to decimal        Description         number hexdec      ( string $hex_string     )        Returns the decimal equivalent of the hexadecimal number    represented by the hex_string argument.    hexdec() converts a hexadecimal string to a    decimal number.           hexdec() will ignore any non-hexadecimal     characters it encounters.           Parameters                    hex_string                      The hexadecimal string to convert                                    Return Values       The decimal representation of hex_string           Changelog                                 Version        Description                                    Since 4.1.0                 The function can now convert values that are too big for         the platforms integer type, it will return         the value as float instead in that case.                                           Examples            Example #1 hexdec() example       <?phpvar_dump(hexdec(\"See\"));var_dump(hexdec(\"ee\"));\/\/\u00a0both\u00a0print\u00a0\"int(238)\"var_dump(hexdec(\"that\"));\u00a0\/\/\u00a0print\u00a0\"int(10)\"var_dump(hexdec(\"a0\"));\u00a0\/\/\u00a0print\u00a0\"int(160)\"?>                       See Also            dechex() - Decimal to hexadecimal     bindec() - Binary to decimal     octdec() - Octal to decimal     base_convert() - Convert a number between arbitrary bases"},{"url":"http:\/\/www.php.net\/manual\/en\/function.log.php","title":"log","description":"log   (PHP 4, PHP 5)log \u2014 Natural logarithm        Description         float log      ( float $arg     [, float $base = M_E    ] )        If the optional base parameter is specified,     log() returns logbase    arg, otherwise log()     returns the natural logarithm of arg.           Parameters                    arg                      The value to calculate the logarithm for                                base                      The optional logarithmic base to use         (defaults to &#039;e&#039; and so to the natural logarithm).                                    Return Values       The logarithm of arg to     base, if given, or the    natural logarithm.            Changelog                                 Version        Description                                    Since 4.3.0                 The optional parameter base became available.         For older versions you can calculate the logarithm in base b         of a number n, but using the mathematical identity:         logb(n) = log(n)\/log(b), where log is the         neperian (or natural) logarithm.                                           See Also            log10() - Base-10 logarithm     exp() - Calculates the exponent of e     pow() - Exponential expression"},{"url":"http:\/\/www.php.net\/manual\/en\/function.min.php","title":"min","description":"min   (PHP 4, PHP 5)min \u2014 Find lowest value        Description         mixed min      ( array $values     )          mixed min      ( mixed $value1     , mixed $value2     [, mixed $value3...    ] )        If the first and only parameter is an array, min()    returns the lowest value in that array. If at least two parameters are     provided, min() returns the smallest of these values.      Note:          PHP will evaluate a non-numeric string as      0 if compared to integer, but still return the string if it&#039;s seen as the     numerically lowest value.  If multiple arguments evaluate to     0, min() will return the lowest     alphanumerical string value if any strings are given, else a numeric     0 is returned.               Parameters                    values                      An array containing the values.                                    Return Values       min() returns the numerically lowest of the    parameter values.           Examples            Example #1 Example uses of min()       <?phpecho\u00a0min(2,\u00a03,\u00a01,\u00a06,\u00a07);\u00a0\u00a0\/\/\u00a01echo\u00a0min(array(2,\u00a04,\u00a05));\u00a0\/\/\u00a02echo\u00a0min(0,\u00a0'hello');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a00echo\u00a0min('hello',\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0helloecho\u00a0min('hello',\u00a0-1);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0-1\/\/\u00a0With\u00a0multiple\u00a0arrays,\u00a0min\u00a0compares\u00a0from\u00a0left\u00a0to\u00a0right\/\/\u00a0so\u00a0in\u00a0our\u00a0example:\u00a02\u00a0==\u00a02,\u00a0but\u00a04\u00a0<\u00a05$val\u00a0=\u00a0min(array(2,\u00a04,\u00a08),\u00a0array(2,\u00a05,\u00a01));\u00a0\/\/\u00a0array(2,\u00a04,\u00a08)\/\/\u00a0If\u00a0both\u00a0an\u00a0array\u00a0and\u00a0non-array\u00a0are\u00a0given,\u00a0the\u00a0array\/\/\u00a0is\u00a0never\u00a0returned\u00a0as\u00a0it's\u00a0considered\u00a0the\u00a0largest$val\u00a0=\u00a0min('string',\u00a0array(2,\u00a05,\u00a07),\u00a042);\u00a0\u00a0\u00a0\/\/\u00a0string?>                       See Also            max() - Find highest value     count() - Count all elements in an array, or something in an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.max.php","title":"max","description":"max   (PHP 4, PHP 5)max \u2014 Find highest value        Description       mixed max     ( array $values    )        mixed max     ( mixed $value1    , mixed $value2    [, mixed $value3...   ] )        If the first and only parameter is an array, max()    returns the highest value in that array. If at least two parameters are     provided, max() returns the biggest of these values.      Note:          PHP will evaluate a non-numeric string as      0 if compared to integer, but still return the string if it&#039;s seen as the     numerically highest value.  If multiple arguments evaluate to     0, max() will return a numeric     0 if given, else the alphabetical highest string     value will be returned.               Parameters                    values                      An array containing the values.                                    Return Values       max() returns the numerically highest of the    parameter values. If multiple values can be considered of the same size,    the one that is listed first will be returned.          When max() is given multiple arrays, the    longest array is returned. If all the arrays have the same length,    max() will use lexicographic ordering to find the return    value.          When given a string it will be cast as an integer    when comparing.           Examples            Example #1 Example uses of max()       <?phpecho\u00a0max(1,\u00a03,\u00a05,\u00a06,\u00a07);\u00a0\u00a0\/\/\u00a07echo\u00a0max(array(2,\u00a04,\u00a05));\u00a0\/\/\u00a05\/\/\u00a0When\u00a0'hello'\u00a0is\u00a0cast\u00a0as\u00a0integer\u00a0it\u00a0will\u00a0be\u00a00.\u00a0Both\u00a0the\u00a0parameters\u00a0are\u00a0equally\/\/\u00a0long,\u00a0so\u00a0the\u00a0order\u00a0they\u00a0are\u00a0given\u00a0in\u00a0determines\u00a0the\u00a0resultecho\u00a0max(0,\u00a0'hello');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a00echo\u00a0max('hello',\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0helloecho\u00a0max('42',\u00a03);\u00a0\/\/\u00a0'42'\/\/\u00a0Here\u00a00\u00a0>\u00a0-1,\u00a0so\u00a0'hello'\u00a0is\u00a0the\u00a0return\u00a0value.echo\u00a0max(-1,\u00a0'hello');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0hello\/\/\u00a0With\u00a0multiple\u00a0arrays\u00a0of\u00a0different\u00a0lengths,\u00a0max\u00a0returns\u00a0the\u00a0longest$val\u00a0=\u00a0max(array(2,\u00a02,\u00a02),\u00a0array(1,\u00a01,\u00a01,\u00a01));\u00a0\/\/\u00a0array(1,\u00a01,\u00a01,\u00a01)\/\/\u00a0With\u00a0multiple\u00a0arrays\u00a0of\u00a0the\u00a0same\u00a0length,\u00a0max\u00a0compares\u00a0from\u00a0left\u00a0to\u00a0right\/\/\u00a0using\u00a0lexicographic\u00a0order,\u00a0so\u00a0in\u00a0our\u00a0example:\u00a02\u00a0==\u00a02,\u00a0but\u00a04\u00a0<\u00a05$val\u00a0=\u00a0max(array(2,\u00a04,\u00a08),\u00a0array(2,\u00a05,\u00a07));\u00a0\/\/\u00a0array(2,\u00a05,\u00a07)\/\/\u00a0If\u00a0both\u00a0an\u00a0array\u00a0and\u00a0non-array\u00a0are\u00a0given,\u00a0the\u00a0array\/\/\u00a0is\u00a0always\u00a0returned\u00a0as\u00a0it's\u00a0seen\u00a0as\u00a0the\u00a0largest$val\u00a0=\u00a0max('string',\u00a0array(2,\u00a05,\u00a07),\u00a042);\u00a0\u00a0\u00a0\/\/\u00a0array(2,\u00a05,\u00a07)?>                         See Also            min() - Find lowest value     count() - Count all elements in an array, or something in an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mt-getrandmax.php","title":"mt_getrandmax","description":"mt_getrandmax   (PHP 4, PHP 5)mt_getrandmax \u2014 Show largest possible random value        Description         int mt_getrandmax      ( void     )        Returns the maximum value that can be returned by a call to    mt_rand().           Return Values       Returns the maximum random value returned by mt_rand()           Examples       Example #1 Calculate a random floating-point number       <?phpfunction\u00a0randomFloat($min\u00a0=\u00a00,\u00a0$max\u00a0=\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0$min\u00a0+\u00a0mt_rand()\u00a0\/\u00a0mt_getrandmax()\u00a0*\u00a0($max\u00a0-\u00a0$min);}var_dump(randomFloat());var_dump(randomFloat(2,\u00a020));?>             The above example will output something similar to:       float(0.91601131712832) float(16.511210331931)                     See Also            mt_rand() - Generate a better random value     mt_srand() - Seed the better random number generator     getrandmax() - Show largest possible random value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pi.php","title":"pi","description":"pi   (PHP 4, PHP 5)pi \u2014 Get value of pi        Description         float pi      ( void     )        Returns an approximation of pi.  The returned float    has a precision based on the    precision directive in    php.ini, which defaults to 14.    Also, you can use the M_PI constant which yields    identical results to pi().           Return Values       The value of pi as float.           Examples            Example #1 pi() example       <?phpecho\u00a0pi();\u00a0\/\/\u00a03.1415926535898echo\u00a0M_PI;\u00a0\/\/\u00a03.1415926535898?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.octdec.php","title":"octdec","description":"octdec   (PHP 4, PHP 5)octdec \u2014 Octal to decimal        Description         number octdec      ( string $octal_string     )        Returns the decimal equivalent of the octal number    represented by the octal_string argument.           Parameters                    octal_string                      The octal string to convert                                    Return Values       The decimal representation of octal_string           Changelog                                 Version        Description                                    Since 4.1.0                 The function can now convert numbers that are too large to         fit into the platforms integer type, larger values         are returned as float in that case.                                           Examples            Example #1 octdec() example       <?phpecho\u00a0octdec('77')\u00a0.\u00a0\"\\n\";echo\u00a0octdec(decoct(45));?>             The above example will output:       63 45                     See Also            decoct() - Decimal to octal     bindec() - Binary to decimal     hexdec() - Hexadecimal to decimal     base_convert() - Convert a number between arbitrary bases"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pow.php","title":"pow","description":"pow   (PHP 4, PHP 5)pow \u2014 Exponential expression        Description         number pow      ( number $base     , number $exp     )        Returns base raised to the power of    exp.            Parameters                    base                      The base to use                                exp                      The exponent                                    Return Values       base raised to the power of exp.    If the result can be represented as integer it will be returned as type    integer, else it will be returned as type float.           Changelog                                 Version        Description                                    4.2.0                 No warning is emitted on errors, even if the value can&#039;t be computed.                               4.0.6                 The function will now return integer results if possible,         before this it always returned a float result. For older         versions, you may receive a bogus result for complex numbers.                                           Examples            Example #1 Some examples of pow()       <?phpvar_dump(pow(2,\u00a08));\u00a0\/\/\u00a0int(256)echo\u00a0pow(-1,\u00a020);\u00a0\/\/\u00a01echo\u00a0pow(0,\u00a00);\u00a0\/\/\u00a01echo\u00a0pow(-1,\u00a05.5);\u00a0\/\/\u00a0PHP\u00a0>4.0.6\u00a0\u00a0NANecho\u00a0pow(-1,\u00a05.5);\u00a0\/\/\u00a0PHP\u00a0<=4.0.6\u00a01.#IND?>                        Notes   Note:          This function will convert all input to a number, even non-scalar values,     which could lead to weird results.                See Also            exp() - Calculates the exponent of e     sqrt() - Square root     bcpow() - Raise an arbitrary precision number to another     gmp_pow() - Raise number into power"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mt-srand.php","title":"mt_srand","description":"mt_srand   (PHP 4, PHP 5)mt_srand \u2014 Seed the better random number generator        Description         void mt_srand      ([ int $seed    ] )        Seeds the random number generator with    seed or with a random value    if no seed is given.       Note: As of PHP 4.2.0, there is no need to seed the random number generator with srand() or mt_srand() as this is now done automatically.          Parameters                    seed                      An optional seed value                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    Since 4.2.0                 The seed becomes optional          and defaults to a random value if omitted.                               Since 5.2.1                 The Mersenne Twister implementation in PHP now uses a new seeding         algorithm by Richard Wagner. Identical seeds no longer produce the same         sequence of values they did in previous versions. This behavior is not         expected to change again, but it is considered unsafe to rely upon it         nonetheless.                                           Examples            Example #1 mt_srand() example       <?php\/\/\u00a0seed\u00a0with\u00a0microsecondsfunction\u00a0make_seed(){\u00a0\u00a0list($usec,\u00a0$sec)\u00a0=\u00a0explode('\u00a0',\u00a0microtime());\u00a0\u00a0return\u00a0(float)\u00a0$sec\u00a0+\u00a0((float)\u00a0$usec\u00a0*\u00a0100000);}mt_srand(make_seed());$randval\u00a0=\u00a0mt_rand();?>                       See Also            mt_rand() - Generate a better random value     mt_getrandmax() - Show largest possible random value     srand() - Seed the random number generator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rad2deg.php","title":"rad2deg","description":"rad2deg   (PHP 4, PHP 5)rad2deg \u2014     Converts the radian number to the equivalent number in degrees           Description         float rad2deg      ( float $number     )        This function converts number from radian    to degrees.           Parameters                    number                      A radian value                                    Return Values       The equivalent of number in degrees           Examples            Example #1 rad2deg() example       <?phpecho\u00a0rad2deg(M_PI_4);\u00a0\/\/\u00a045?>                       See Also            deg2rad() - Converts the number in degrees to the radian equivalent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sinh.php","title":"sinh","description":"sinh   (PHP 4 >= 4.1.0, PHP 5)sinh \u2014 Hyperbolic sine        Description         float sinh      ( float $arg     )        Returns the hyperbolic sine of arg,    defined as (exp(arg) - exp(-arg))\/2.           Parameters                    arg                      The argument to process                                    Return Values       The hyperbolic sine of arg           See Also            sin() - Sine     asinh() - Inverse hyperbolic sine     cosh() - Hyperbolic cosine     tanh() - Hyperbolic tangent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sin.php","title":"sin","description":"sin   (PHP 4, PHP 5)sin \u2014 Sine        Description         float sin      ( float $arg     )        sin() returns the sine of the arg    parameter.  The arg parameter is in radians.           Parameters                    arg                      A value in radians                                    Return Values       The sine of arg           Examples            Example #1 sin() example       <?php\/\/\u00a0Precision\u00a0depends\u00a0on\u00a0your\u00a0precision\u00a0directiveecho\u00a0sin(deg2rad(60));\u00a0\u00a0\/\/\u00a0\u00a00.866025403\u00a0...echo\u00a0sin(60);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0-0.304810621\u00a0...?>                       See Also            asin() - Arc sine     sinh() - Hyperbolic sine     cos() - Cosine     tan() - Tangent     deg2rad() - Converts the number in degrees to the radian equivalent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mt-rand.php","title":"mt_rand","description":"mt_rand   (PHP 4, PHP 5)mt_rand \u2014 Generate a better random value        Description       int mt_rand     ( void    )        int mt_rand     ( int $min    , int $max    )        Many random number generators of older libcs have dubious or    unknown characteristics and are slow. By default, PHP uses the    libc random number generator with the rand()    function.  The mt_rand() function is a drop-in    replacement for this.  It uses a random number generator with    known characteristics using the \u00bb\u00a0    Mersenne Twister, which will produce random numbers four times    faster than what the average libc rand() provides.          If called without the optional min,    max arguments mt_rand()    returns a pseudo-random value between 0 and    mt_getrandmax().  If you want a random number    between 5 and 15 (inclusive), for example, use mt_rand(5,    15).           Parameters                    min                      Optional lowest value to be returned (default: 0)                                max                      Optional highest value to be returned (default: mt_getrandmax())                                    Return Values       A random integer value between min (or 0)    and max (or mt_getrandmax(), inclusive)           Changelog                                 Version        Description                            4.2.0The random number generator is seeded automatically.                            Examples            Example #1 mt_rand() example       <?phpecho\u00a0mt_rand()\u00a0.\u00a0\"\\n\";echo\u00a0mt_rand()\u00a0.\u00a0\"\\n\";echo\u00a0mt_rand(5,\u00a015);?>             The above example will output something similar to:       1604716014 1478613278 6                     Notes   Caution         The distribution of mt_rand() return values is biased     towards even numbers on 64-bit builds of PHP when     max is beyond 2^32.               See Also            mt_srand() - Seed the better random number generator     mt_getrandmax() - Show largest possible random value     rand() - Generate a random integer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.round.php","title":"round","description":"round   (PHP 4, PHP 5)round \u2014 Rounds a float        Description         float round      ( float $val     [, int $precision = 0     [, int $mode = PHP_ROUND_HALF_UP    ]] )        Returns the rounded value of val to    specified precision    (number of digits after the decimal point).    precision can also be negative or zero (default).             Note:            PHP doesn&#039;t handle strings like \"12,300.2\" correctly      by default. See converting from strings.                    Parameters                    val                      The value to round                                precision                      The optional number of decimal digits to round to.                                mode                      One of PHP_ROUND_HALF_UP,        PHP_ROUND_HALF_DOWN,        PHP_ROUND_HALF_EVEN, or        PHP_ROUND_HALF_ODD.                                    Return Values       The rounded value           Examples            Example #1 round() examples       <?phpecho\u00a0round(3.4);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a03echo\u00a0round(3.5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04echo\u00a0round(3.6);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04echo\u00a0round(3.6,\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04echo\u00a0round(1.95583,\u00a02);\u00a0\u00a0\/\/\u00a01.96echo\u00a0round(1241757,\u00a0-3);\u00a0\/\/\u00a01242000echo\u00a0round(5.045,\u00a02);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05.05echo\u00a0round(5.055,\u00a02);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05.06?>                           Example #2 mode examples       <?phpecho\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a010echo\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a09echo\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a010echo\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a09echo\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a09echo\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a08echo\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a08echo\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a09?>                       Changelog                                 Version        Description                                    5.3.0                 The mode parameter was introduced.                               5.2.7                 The inner workings of round() was changed          to conform to the C99 standard.                                            See Also            ceil() - Round fractions up     floor() - Round fractions down     number_format() - Format a number with grouped thousands"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tan.php","title":"tan","description":"tan   (PHP 4, PHP 5)tan \u2014 Tangent        Description         float tan      ( float $arg     )        tan() returns the tangent of the arg    parameter.  The arg parameter is in radians.           Parameters                    arg                      The argument to process in radians                                     Return Values       The tangent of arg           Examples            Example #1 tan() example       <?phpecho\u00a0tan(M_PI_4);\u00a0\/\/\u00a01?>                       See Also            atan() - Arc tangent     atan2() - Arc tangent of two variables     sin() - Sine     cos() - Cosine     tanh() - Hyperbolic tangent     deg2rad() - Converts the number in degrees to the radian equivalent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rand.php","title":"rand","description":"rand   (PHP 4, PHP 5)rand \u2014 Generate a random integer        Description       int rand     ( void    )        int rand     ( int $min    , int $max    )        If called without the optional min,    max arguments rand()    returns a pseudo-random integer between 0 and    getrandmax().  If you want a random number    between 5 and 15 (inclusive), for example, use rand(5,    15).      Note:          On some platforms (such as Windows), getrandmax()     is only 32767.  If you require a range larger than 32767, specifying     min and max will allow     you to create a range larger than this, or consider using     mt_rand() instead.               Parameters                    min                      The lowest value to return (default: 0)                                max                      The highest value to return (default: getrandmax())                                    Return Values       A pseudo random value between min    (or 0) and max (or getrandmax(), inclusive).           Changelog                                 Version        Description                            4.2.0The random number generator is seeded automatically.                            Examples            Example #1 rand() example       <?phpecho\u00a0rand()\u00a0.\u00a0\"\\n\";echo\u00a0rand()\u00a0.\u00a0\"\\n\";echo\u00a0rand(5,\u00a015);?>             The above example will output something similar to:       7771 22264 11                     See Also            srand() - Seed the random number generator     getrandmax() - Show largest possible random value     mt_rand() - Generate a better random value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqrt.php","title":"sqrt","description":"sqrt   (PHP 4, PHP 5)sqrt \u2014 Square root        Description         float sqrt      ( float $arg     )        Returns the square root of arg.           Parameters                    arg                      The argument to process                                    Return Values       The square root of arg    or the special value NAN for negative numbers.           Examples            Example #1 sqrt() example       <?php\/\/\u00a0Precision\u00a0depends\u00a0on\u00a0your\u00a0precision\u00a0directiveecho\u00a0sqrt(9);\u00a0\/\/\u00a03echo\u00a0sqrt(10);\u00a0\/\/\u00a03.16227766\u00a0...?>                       See Also            pow() - Exponential expression"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tanh.php","title":"tanh","description":"tanh   (PHP 4 >= 4.1.0, PHP 5)tanh \u2014 Hyperbolic tangent        Description         float tanh      ( float $arg     )        Returns the hyperbolic tangent of arg,    defined as sinh(arg)\/cosh(arg).           Parameters                    arg                      The argument to process                                    Return Values       The hyperbolic tangent of arg           See Also            tan() - Tangent     atanh() - Inverse hyperbolic tangent     sinh() - Hyperbolic sine     cosh() - Hyperbolic cosine"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-client-encoding.php","title":"mysql_client_encoding","description":"mysql_client_encoding   (PHP 4 >= 4.3.0, PHP 5)mysql_client_encoding \u2014 Returns the name of the character set         Description       string mysql_client_encoding     ([ resource $link_identifier   ] )        Retrieves the character_set variable from MySQL.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns the default character set name for the current connection.            Examples            Example #1 mysql_client_encoding() example       <?php$link\u00a0\u00a0\u00a0\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$charset\u00a0=\u00a0mysql_client_encoding($link);echo\u00a0\"The\u00a0current\u00a0character\u00a0set\u00a0is:\u00a0$charset\\n\";?>             The above example will output something similar to:       The current character set is: latin1                       See Also            mysql_set_charset() - Sets the client character set     mysql_real_escape_string() - Escapes special characters in a string for use in an SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-affected-rows.php","title":"mysql_affected_rows","description":"mysql_affected_rows   (PHP 4, PHP 5)mysql_affected_rows \u2014 Get number of affected rows in previous MySQL operation         Description       int mysql_affected_rows     ([ resource $link_identifier   ] )        Get the number of affected rows by the last INSERT, UPDATE, REPLACE     or DELETE query associated with link_identifier.              Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns the number of affected rows on success, and -1 if the last query    failed.          If the last query was a DELETE query with no WHERE clause, all    of the records will have been deleted from the table but this    function will return zero with MySQL versions prior to 4.1.2.          When using UPDATE, MySQL will not update columns where the new value is the     same as the old value.  This creates the possibility that     mysql_affected_rows() may not actually equal the number     of rows matched, only the number of rows that were literally affected by     the query.          The REPLACE statement first deletes the record with the same primary key     and then inserts the new record. This function returns the number of     deleted records plus the number of inserted records.             Examples            Example #1 mysql_affected_rows() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}mysql_select_db('mydb');\/*\u00a0this\u00a0should\u00a0return\u00a0the\u00a0correct\u00a0numbers\u00a0of\u00a0deleted\u00a0records\u00a0*\/mysql_query('DELETE\u00a0FROM\u00a0mytable\u00a0WHERE\u00a0id\u00a0<\u00a010');printf(\"Records\u00a0deleted:\u00a0%d\\n\",\u00a0mysql_affected_rows());\/*\u00a0with\u00a0a\u00a0where\u00a0clause\u00a0that\u00a0is\u00a0never\u00a0true,\u00a0it\u00a0should\u00a0return\u00a00\u00a0*\/mysql_query('DELETE\u00a0FROM\u00a0mytable\u00a0WHERE\u00a00');printf(\"Records\u00a0deleted:\u00a0%d\\n\",\u00a0mysql_affected_rows());?>             The above example will output something similar to:       Records deleted: 10 Records deleted: 0                         Example #2 mysql_affected_rows() example using transactions       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}mysql_select_db('mydb');\/*\u00a0Update\u00a0records\u00a0*\/mysql_query(\"UPDATE\u00a0mytable\u00a0SET\u00a0used=1\u00a0WHERE\u00a0id\u00a0<\u00a010\");printf\u00a0(\"Updated\u00a0records:\u00a0%d\\n\",\u00a0mysql_affected_rows());mysql_query(\"COMMIT\");?>             The above example will output something similar to:       Updated Records: 10                      Notes   Note:     Transactions         If you are using transactions, you need to call     mysql_affected_rows() after your INSERT, UPDATE, or      DELETE query, not after the COMMIT.          Note:     SELECT Statements         To retrieve the number of rows returned by a SELECT, it is possible to     use mysql_num_rows().          Note:     Cascaded Foreign Keys          mysql_affected_rows() does not count rows affected      implicitly through the use of ON DELETE CASCADE and\/or ON UPDATE CASCADE       in foreign key constraints.                See Also            mysql_num_rows() - Get number of rows in result     mysql_info() - Get information about the most recent query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-close.php","title":"mysql_close","description":"mysql_close   (PHP 4, PHP 5)mysql_close \u2014 Close MySQL connection         Description       bool mysql_close     ([ resource $link_identifier   ] )         mysql_close() closes the non-persistent connection to     the MySQL server that&#039;s associated with the specified link identifier. If     link_identifier isn&#039;t specified, the last opened     link is used.          Using mysql_close() isn&#039;t usually necessary,    as non-persistent open links are automatically closed at the end    of the script&#039;s execution. See also    freeing    resources.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no connection is found or established, an E_WARNING level error is generated.                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 mysql_close() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}echo\u00a0'Connected\u00a0successfully';mysql_close($link);?>             The above example will output:       Connected successfully                      Notes   Note:          mysql_close() will not close persistent links     created by mysql_pconnect().                See Also            mysql_connect() - Open a connection to a MySQL Server     mysql_free_result() - Free result memory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.srand.php","title":"srand","description":"srand   (PHP 4, PHP 5)srand \u2014 Seed the random number generator        Description         void srand      ([ int $seed    ] )        Seeds the random number generator with seed    or with a random value if no seed is given.       Note: As of PHP 4.2.0, there is no need to seed the random number generator with srand() or mt_srand() as this is now done automatically.          Parameters                    seed                      Optional seed value                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    Since 4.2.0                 The seed becomes optional         and defaults to a random value if omitted.                                           Examples            Example #1 srand() example       <?php\/\/\u00a0seed\u00a0with\u00a0microsecondsfunction\u00a0make_seed(){\u00a0\u00a0list($usec,\u00a0$sec)\u00a0=\u00a0explode('\u00a0',\u00a0microtime());\u00a0\u00a0return\u00a0(float)\u00a0$sec\u00a0+\u00a0((float)\u00a0$usec\u00a0*\u00a0100000);}srand(make_seed());$randval\u00a0=\u00a0rand();?>                       See Also            rand() - Generate a random integer     getrandmax() - Show largest possible random value     mt_srand() - Seed the better random number generator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-create-db.php","title":"mysql_create_db","description":"mysql_create_db   (PHP 4, PHP 5)mysql_create_db \u2014 Create a MySQL database         Description       bool mysql_create_db     ( string $database_name    [, resource $link_identifier   ] )        mysql_create_db() attempts to create a new    database on the server associated with the specified link    identifier.            Parameters                    database_name                      The name of the database being created.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 mysql_create_db() alternative example           The function mysql_create_db() is deprecated. It is       preferable to use mysql_query() to issue an sql     CREATE DATABASE statement instead.            <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}$sql\u00a0=\u00a0'CREATE\u00a0DATABASE\u00a0my_db';if\u00a0(mysql_query($sql,\u00a0$link))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Database\u00a0my_db\u00a0created\u00a0successfully\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0creating\u00a0database:\u00a0'\u00a0.\u00a0mysql_error()\u00a0.\u00a0\"\\n\";}?>             The above example will output something similar to:       Database my_db created successfully                      Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_createdb()          Note:          This function will not be available if the MySQL extension was built      against a MySQL 4.x client library.                See Also            mysql_query() - Send a MySQL query     mysql_select_db() - Select a MySQL database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-db-name.php","title":"mysql_db_name","description":"mysql_db_name   (PHP 4, PHP 5)mysql_db_name \u2014 Retrieves database name from the call to mysql_list_dbs()         Description       string mysql_db_name     ( resource $result    , int $row    [, mixed $field   ] )        Retrieve the database name from a call to     mysql_list_dbs().            Parameters                    result                      The result pointer from a call to mysql_list_dbs().                                row                      The index into the result set.                                field                      The field name.                                      Return Values       Returns the database name on success, and FALSE on failure. If FALSE    is returned, use mysql_error() to determine the nature    of the error.             Examples            Example #1 mysql_db_name() example       <?phperror_reporting(E_ALL);$link\u00a0=\u00a0mysql_connect('dbhost',\u00a0'username',\u00a0'password');$db_list\u00a0=\u00a0mysql_list_dbs($link);$i\u00a0=\u00a00;$cnt\u00a0=\u00a0mysql_num_rows($db_list);while\u00a0($i\u00a0<\u00a0$cnt)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0mysql_db_name($db_list,\u00a0$i)\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0$i++;}?>                         Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_dbname()                 See Also            mysql_list_dbs() - List databases available on a MySQL server     mysql_tablename() - Get table name of field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-data-seek.php","title":"mysql_data_seek","description":"mysql_data_seek   (PHP 4, PHP 5)mysql_data_seek \u2014 Move internal result pointer         Description       bool mysql_data_seek     ( resource $result    , int $row_number    )        mysql_data_seek() moves the internal row    pointer of the MySQL result associated with the specified result    identifier to point to the specified row number.  The next call    to a MySQL fetch function, such as mysql_fetch_assoc(),    would return that row.          row_number starts at 0. The     row_number should be a value in the range from 0 to    mysql_num_rows() - 1. However if the result set     is empty (mysql_num_rows() == 0), a seek to 0 will     fail with a E_WARNING and     mysql_data_seek() will return FALSE.             Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().              row_number                      The desired row number of the new result pointer.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 mysql_data_seek() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}$db_selected\u00a0=\u00a0mysql_select_db('sample_db');if\u00a0(!$db_selected)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0select\u00a0database:\u00a0'\u00a0.\u00a0mysql_error());}$query\u00a0=\u00a0'SELECT\u00a0last_name,\u00a0first_name\u00a0FROM\u00a0friends';$result\u00a0=\u00a0mysql_query($query);if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Query\u00a0failed:\u00a0'\u00a0.\u00a0mysql_error());}\/*\u00a0fetch\u00a0rows\u00a0in\u00a0reverse\u00a0order\u00a0*\/for\u00a0($i\u00a0=\u00a0mysql_num_rows($result)\u00a0-\u00a01;\u00a0$i\u00a0>=\u00a00;\u00a0$i--)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(!mysql_data_seek($result,\u00a0$i))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Cannot\u00a0seek\u00a0to\u00a0row\u00a0$i:\u00a0\"\u00a0.\u00a0mysql_error()\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0if\u00a0(!($row\u00a0=\u00a0mysql_fetch_assoc($result)))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['last_name']\u00a0.\u00a0'\u00a0'\u00a0.\u00a0$row['first_name']\u00a0.\u00a0\"<br\u00a0\/>\\n\";}mysql_free_result($result);?>                        Notes   Note:          The function mysql_data_seek() can be used in     conjunction only with mysql_query(), not with     mysql_unbuffered_query().                 See Also            mysql_query() - Send a MySQL query     mysql_num_rows() - Get number of rows in result     mysql_fetch_row() - Get a result row as an enumerated array     mysql_fetch_assoc() - Fetch a result row as an associative array     mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both     mysql_fetch_object() - Fetch a result row as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-db-query.php","title":"mysql_db_query","description":"mysql_db_query   (PHP 4, PHP 5)mysql_db_query \u2014 Selects a database and executes a query on it         Description       resource mysql_db_query     ( string $database    , string $query    [, resource $link_identifier   ] )        mysql_db_query() selects a database, and executes a     query on it.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    database                      The name of the database that will be selected.                                query                      The MySQL query.                      Data inside the query should be properly escaped.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                     Return Values       Returns a positive MySQL result resource to the query result,    or FALSE on error. The function also returns TRUE\/FALSE for    INSERT\/UPDATE\/DELETE    queries to indicate success\/failure.            Changelog                                 Version        Description                                    5.3.0                 This function now throws an E_DEPRECATED notice.                               4.0.6                 This function is deprecated, do not use this function. Use          mysql_select_db() and          mysql_query() instead.                                            Examples            Example #1 mysql_db_query() alternative example       <?phpif\u00a0(!$link\u00a0=\u00a0mysql_connect('mysql_host',\u00a0'mysql_user',\u00a0'mysql_password'))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0connect\u00a0to\u00a0mysql';\u00a0\u00a0\u00a0\u00a0exit;}if\u00a0(!mysql_select_db('mysql_dbname',\u00a0$link))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0select\u00a0database';\u00a0\u00a0\u00a0\u00a0exit;}$sql\u00a0\u00a0\u00a0\u00a0=\u00a0'SELECT\u00a0foo\u00a0FROM\u00a0bar\u00a0WHERE\u00a0id\u00a0=\u00a042';$result\u00a0=\u00a0mysql_query($sql,\u00a0$link);if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"DB\u00a0Error,\u00a0could\u00a0not\u00a0query\u00a0the\u00a0database\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0'MySQL\u00a0Error:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}while\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['foo'];}mysql_free_result($result);?>                        Notes   Note:          Be aware that this function does NOT     switch back to the database you were connected before. In other words,     you can&#039;t use this function to temporarily run a     sql query on another database, you would have to manually switch back.     Users are strongly encouraged to use the     database.table syntax in their sql queries or     mysql_select_db() instead of this function.                See Also            mysql_query() - Send a MySQL query     mysql_select_db() - Select a MySQL database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-drop-db.php","title":"mysql_drop_db","description":"mysql_drop_db   (PHP 4, PHP 5)mysql_drop_db \u2014 Drop (delete) a MySQL database         Description       bool mysql_drop_db     ( string $database_name    [, resource $link_identifier   ] )        mysql_drop_db() attempts to drop (remove) an    entire database from the server associated with the specified    link identifier. This function is deprecated, it is preferable to use     mysql_query() to issue an sql     DROP DATABASE statement instead.            Parameters                    database_name                      The name of the database that will be deleted.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                     Return Values       Returns TRUE on success or FALSE on failure.              Examples            Example #1 mysql_drop_db() alternative example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}$sql\u00a0=\u00a0'DROP\u00a0DATABASE\u00a0my_db';if\u00a0(mysql_query($sql,\u00a0$link))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Database\u00a0my_db\u00a0was\u00a0successfully\u00a0dropped\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0dropping\u00a0database:\u00a0'\u00a0.\u00a0mysql_error()\u00a0.\u00a0\"\\n\";}?>                        Notes   Warning         This function will not be available if the MySQL extension was built      against a MySQL 4.x client library.          Note:          For backward compatibility, the following deprecated alias may be used:      mysql_dropdb()                See Also            mysql_query() - Send a MySQL query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-errno.php","title":"mysql_errno","description":"mysql_errno   (PHP 4, PHP 5)mysql_errno \u2014 Returns the numerical value of the error message from previous MySQL operation         Description       int mysql_errno     ([ resource $link_identifier   ] )        Returns the error number from the last MySQL function.           Errors coming back from the MySQL database backend no longer    issue warnings. Instead, use mysql_errno() to    retrieve the error code. Note that this function only returns the    error code from the most recently executed MySQL function (not    including mysql_error() and    mysql_errno()), so if you want to use it,    make sure you check the value before calling another MySQL    function.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                     Return Values       Returns the error number from the last MySQL function, or    0 (zero) if no error occurred.            Examples            Example #1 mysql_errno() example       <?php$link\u00a0=\u00a0mysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\");if\u00a0(!mysql_select_db(\"nonexistentdb\",\u00a0$link))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0mysql_errno($link)\u00a0.\u00a0\":\u00a0\"\u00a0.\u00a0mysql_error($link).\u00a0\"\\n\";}mysql_select_db(\"kossu\",\u00a0$link);if\u00a0(!mysql_query(\"SELECT\u00a0*\u00a0FROM\u00a0nonexistenttable\",\u00a0$link))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0mysql_errno($link)\u00a0.\u00a0\":\u00a0\"\u00a0.\u00a0mysql_error($link)\u00a0.\u00a0\"\\n\";}?>             The above example will output something similar to:       1049: Unknown database &#039;nonexistentdb&#039; 1146: Table &#039;kossu.nonexistenttable&#039; doesn&#039;t exist                      See Also            mysql_error() - Returns the text of the error message from previous MySQL operation     \u00bb\u00a0MySQL error codes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-connect.php","title":"mysql_connect","description":"mysql_connect   (PHP 4, PHP 5)mysql_connect \u2014 Open a connection to a MySQL Server         Description       resource mysql_connect     ([ string $server = ini_get(\"mysql.default_host\")    [, string $username = ini_get(\"mysql.default_user\")    [, string $password = ini_get(\"mysql.default_password\")    [, bool $new_link = false    [, int $client_flags = 0   ]]]]] )        Opens or reuses a connection to a MySQL server.             Parameters                    server                      The MySQL server. It can also include a port number. e.g.         \"hostname:port\" or a path to a local socket e.g. \":\/path\/to\/socket\" for         the localhost.                      If the PHP directive         mysql.default_host is undefined (default), then the default         value is &#039;localhost:3306&#039;. In SQL safe mode, this parameter is ignored        and value &#039;localhost:3306&#039; is always used.                                username                      The username. Default value is defined by mysql.default_user. In        SQL safe mode, this parameter is ignored and the name of the user that        owns the server process is used.                                password                      The password. Default value is defined by mysql.default_password. In        SQL safe mode, this parameter is ignored and empty password is used.                                   new_link                      If a second call is made to mysql_connect()        with the same arguments, no new link will be established, but        instead, the link identifier of the already opened link will be        returned. The new_link parameter modifies this         behavior and makes mysql_connect() always open         a new link, even if mysql_connect() was called         before with the same parameters.        In SQL safe mode, this parameter is ignored.                                client_flags                      The client_flags parameter can be a combination         of the following constants:        128 (enable LOAD DATA LOCAL handling),        MYSQL_CLIENT_SSL,        MYSQL_CLIENT_COMPRESS,         MYSQL_CLIENT_IGNORE_SPACE or        MYSQL_CLIENT_INTERACTIVE.        Read the section about MySQL client constants for further information.        In SQL safe mode, this parameter is ignored.                                      Return Values       Returns a MySQL link identifier on success or FALSE on failure.            Changelog                                 Version        Description                                    4.3.0                 Added the client_flags parameter.                               4.2.0                 Added the new_link parameter.                                            Examples            Example #1 mysql_connect() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}echo\u00a0'Connected\u00a0successfully';mysql_close($link);?>                           Example #2 mysql_connect() example using hostname:port syntax       <?php\/\/\u00a0we\u00a0connect\u00a0to\u00a0example.com\u00a0and\u00a0port\u00a03307$link\u00a0=\u00a0mysql_connect('example.com:3307',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}echo\u00a0'Connected\u00a0successfully';mysql_close($link);\/\/\u00a0we\u00a0connect\u00a0to\u00a0localhost\u00a0at\u00a0port\u00a03307$link\u00a0=\u00a0mysql_connect('127.0.0.1:3307',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}echo\u00a0'Connected\u00a0successfully';mysql_close($link);?>                           Example #3 mysql_connect() example using  \":\/path\/to\/socket\" syntax       <?php\/\/\u00a0we\u00a0connect\u00a0to\u00a0localhost\u00a0and\u00a0socket\u00a0e.g.\u00a0\/tmp\/mysql.sock\/\/\u00a0variant\u00a01:\u00a0omit\u00a0localhost$link\u00a0=\u00a0mysql_connect(':\/tmp\/mysql',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}echo\u00a0'Connected\u00a0successfully';mysql_close($link);\/\/\u00a0variant\u00a02:\u00a0with\u00a0localhost$link\u00a0=\u00a0mysql_connect('localhost:\/tmp\/mysql.sock',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}echo\u00a0'Connected\u00a0successfully';mysql_close($link);?>                        Notes   Note:          Whenever you specify \"localhost\" or     \"localhost:port\" as server, the MySQL client library will     override this and try to connect to a local socket (named pipe on     Windows). If you want to use TCP\/IP, use \"127.0.0.1\"     instead of \"localhost\". If the MySQL client library tries to     connect to the wrong local socket, you should set the correct path as      in your PHP configuration and leave the server field     blank.          Note:          The link to the server will be closed as soon as the execution of     the script ends, unless it&#039;s closed earlier by explicitly calling     mysql_close().          Note:          You can suppress the error message on failure by prepending      a @     to the function name.          Note:          Error \"Can&#039;t create TCP\/IP socket (10106)\" usually means that the variables_order configure directive     doesn&#039;t contain character E. On Windows, if the     environment is not copied the SYSTEMROOT environment     variable won&#039;t be available and PHP will have problems loading Winsock.                See Also            mysql_pconnect() - Open a persistent connection to a MySQL server     mysql_close() - Close MySQL connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-escape-string.php","title":"mysql_escape_string","description":"mysql_escape_string   (PHP 4 >= 4.0.3, PHP 5)mysql_escape_string \u2014 Escapes a string for use in a mysql_query         Description       string mysql_escape_string     ( string $unescaped_string    )        This function will escape the unescaped_string,    so that it is safe to place it in a mysql_query().    This function is deprecated.          This function is identical to mysql_real_escape_string()     except that mysql_real_escape_string() takes a     connection handler and escapes the string according to the current     character set. mysql_escape_string() does not take a    connection argument and does not respect the current charset setting.        WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    unescaped_string                      The string that is to be escaped.                                      Return Values       Returns the escaped string.            Changelog                                 Version        Description                                    5.3.0                 This function now throws an E_DEPRECATED notice.                               4.3.0                 This function became deprecated, do not use this function. Instead,          use mysql_real_escape_string().                                            Examples            Example #1 mysql_escape_string() example       <?php$item\u00a0=\u00a0\"Zak's\u00a0Laptop\";$escaped_item\u00a0=\u00a0mysql_escape_string($item);printf(\"Escaped\u00a0string:\u00a0%s\\n\",\u00a0$escaped_item);?>             The above example will output:       Escaped string: Zak\\&#039;s Laptop                      Notes   Note:          mysql_escape_string() does not escape      and _.                See Also            mysql_real_escape_string() - Escapes special characters in a string for use in an SQL statement     addslashes() - Quote string with slashes     The magic_quotes_gpc directive."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-error.php","title":"mysql_error","description":"mysql_error   (PHP 4, PHP 5)mysql_error \u2014 Returns the text of the error message from previous MySQL operation         Description       string mysql_error     ([ resource $link_identifier   ] )        Returns the error text from the last MySQL function.    Errors coming back from the MySQL database backend no longer    issue warnings. Instead, use mysql_error() to    retrieve the error text. Note that this function only returns the    error text from the most recently executed MySQL function (not    including mysql_error() and    mysql_errno()), so if you want to use it, make    sure you check the value before calling another MySQL function.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns the error text from the last MySQL function, or    &#039;&#039; (empty string) if no error occurred.             Examples            Example #1 mysql_error() example       <?php$link\u00a0=\u00a0mysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\");mysql_select_db(\"nonexistentdb\",\u00a0$link);echo\u00a0mysql_errno($link)\u00a0.\u00a0\":\u00a0\"\u00a0.\u00a0mysql_error($link).\u00a0\"\\n\";mysql_select_db(\"kossu\",\u00a0$link);mysql_query(\"SELECT\u00a0*\u00a0FROM\u00a0nonexistenttable\",\u00a0$link);echo\u00a0mysql_errno($link)\u00a0.\u00a0\":\u00a0\"\u00a0.\u00a0mysql_error($link)\u00a0.\u00a0\"\\n\";?>             The above example will output something similar to:       1049: Unknown database &#039;nonexistentdb&#039; 1146: Table &#039;kossu.nonexistenttable&#039; doesn&#039;t exist                      See Also            mysql_errno() - Returns the numerical value of the error message from previous MySQL operation     \u00bb\u00a0MySQL error codes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-lengths.php","title":"mysql_fetch_lengths","description":"mysql_fetch_lengths   (PHP 4, PHP 5)mysql_fetch_lengths \u2014 Get the length of each output in a result         Description       array mysql_fetch_lengths     ( resource $result    )        Returns an array that corresponds to the lengths of each field    in the last row fetched by MySQL.          mysql_fetch_lengths() stores the lengths of    each result column in the last row returned by    mysql_fetch_row(),    mysql_fetch_assoc(),    mysql_fetch_array(), and    mysql_fetch_object() in an array, starting at    offset 0.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().                    Return Values       An array of lengths on success or FALSE on failure.            Examples            Example #1 A mysql_fetch_lengths() example       <?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,email\u00a0FROM\u00a0people\u00a0WHERE\u00a0id\u00a0=\u00a0'42'\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}$row\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0mysql_fetch_assoc($result);$lengths\u00a0=\u00a0mysql_fetch_lengths($result);print_r($row);print_r($lengths);?>             The above example will output something similar to:       Array (     [id] => 42     [email] => user@example.com ) Array (     [0] => 2     [1] => 16 )                      See Also            mysql_field_len() - Returns the length of the specified field     mysql_fetch_row() - Get a result row as an enumerated array     strlen() - Get string length"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-array.php","title":"mysql_fetch_array","description":"mysql_fetch_array   (PHP 4, PHP 5)mysql_fetch_array \u2014 Fetch a result row as an associative array, a numeric array, or both         Description       array mysql_fetch_array     ( resource $result    [, int $result_type = MYSQL_BOTH   ] )        Returns an array that corresponds to the fetched row    and moves the internal data pointer ahead.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().              result_type                      The type of array that is to be fetched. It&#039;s a constant and can        take the following values: MYSQL_ASSOC,         MYSQL_NUM, and        MYSQL_BOTH.                                      Return Values       Returns an array of strings that corresponds to the fetched row, or FALSE    if there are no more rows. The type of returned array depends on    how result_type is defined. By using     MYSQL_BOTH (default), you&#039;ll get an array with both     associative and number indices. Using MYSQL_ASSOC, you     only get associative indices (as mysql_fetch_assoc()     works), using MYSQL_NUM, you only get number indices     (as mysql_fetch_row() works).          If two or more columns of the result have the same field names,    the last column will take precedence. To access the other column(s)    of the same name, you must use the numeric index of the column or    make an alias for the column. For aliased columns, you cannot    access the contents with the original column name.            Examples            Example #1 Query with aliased duplicate field names      SELECT table1.field AS foo, table2.field AS bar FROM table1, table2                          Example #2 mysql_fetch_array() with MYSQL_NUM       <?phpmysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\")\u00a0or\u00a0\u00a0\u00a0\u00a0die(\"Could\u00a0not\u00a0connect:\u00a0\"\u00a0.\u00a0mysql_error());mysql_select_db(\"mydb\");$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,\u00a0name\u00a0FROM\u00a0mytable\");while\u00a0($row\u00a0=\u00a0mysql_fetch_array($result,\u00a0MYSQL_NUM))\u00a0{\u00a0\u00a0\u00a0\u00a0printf(\"ID:\u00a0%s\u00a0\u00a0Name:\u00a0%s\",\u00a0$row[0],\u00a0$row[1]);\u00a0\u00a0}mysql_free_result($result);?>                           Example #3 mysql_fetch_array() with MYSQL_ASSOC       <?phpmysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\")\u00a0or\u00a0\u00a0\u00a0\u00a0die(\"Could\u00a0not\u00a0connect:\u00a0\"\u00a0.\u00a0mysql_error());mysql_select_db(\"mydb\");$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,\u00a0name\u00a0FROM\u00a0mytable\");while\u00a0($row\u00a0=\u00a0mysql_fetch_array($result,\u00a0MYSQL_ASSOC))\u00a0{\u00a0\u00a0\u00a0\u00a0printf(\"ID:\u00a0%s\u00a0\u00a0Name:\u00a0%s\",\u00a0$row[\"id\"],\u00a0$row[\"name\"]);}mysql_free_result($result);?>                           Example #4 mysql_fetch_array() with MYSQL_BOTH       <?phpmysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\")\u00a0or\u00a0\u00a0\u00a0\u00a0die(\"Could\u00a0not\u00a0connect:\u00a0\"\u00a0.\u00a0mysql_error());mysql_select_db(\"mydb\");$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,\u00a0name\u00a0FROM\u00a0mytable\");while\u00a0($row\u00a0=\u00a0mysql_fetch_array($result,\u00a0MYSQL_BOTH))\u00a0{\u00a0\u00a0\u00a0\u00a0printf\u00a0(\"ID:\u00a0%s\u00a0\u00a0Name:\u00a0%s\",\u00a0$row[0],\u00a0$row[\"name\"]);}mysql_free_result($result);?>                        Notes   Note:     Performance         An important thing to note is that using      mysql_fetch_array() is not      significantly slower than using     mysql_fetch_row(), while it provides     a significant added value.          Note: Field names returned by this function are case-sensitive.   Note: This function sets NULL fields to the PHP NULL value.         See Also            mysql_fetch_row() - Get a result row as an enumerated array     mysql_fetch_assoc() - Fetch a result row as an associative array     mysql_data_seek() - Move internal result pointer     mysql_query() - Send a MySQL query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-field.php","title":"mysql_fetch_field","description":"mysql_fetch_field   (PHP 4, PHP 5)mysql_fetch_field \u2014 Get column information from a result and return as an object         Description       object mysql_fetch_field     ( resource $result    [, int $field_offset = 0   ] )        Returns an object containing field information. This function can be used     to obtain information about fields in the provided query result.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().              field_offset                      The numerical field offset. If the field offset is not specified, the         next field that was not yet retrieved by this function is retrieved.         The field_offset starts at 0.                                     Return Values       Returns an object containing field information. The properties     of the object are:                            name - column name                             table - name of the table the column belongs to                             max_length - maximum length of the column                             not_null - 1 if the column cannot be NULL                             primary_key - 1 if the column is a primary key                             unique_key - 1 if the column is a unique key                             multiple_key - 1 if the column is a non-unique key                             numeric - 1 if the column is numeric                             blob - 1 if the column is a BLOB                             type - the type of the column                             unsigned - 1 if the column is unsigned                             zerofill - 1 if the column is zero-filled                           Examples            Example #1 mysql_fetch_field() example       <?php$conn\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$conn)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}mysql_select_db('database');$result\u00a0=\u00a0mysql_query('select\u00a0*\u00a0from\u00a0table');if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Query\u00a0failed:\u00a0'\u00a0.\u00a0mysql_error());}\/*\u00a0get\u00a0column\u00a0metadata\u00a0*\/$i\u00a0=\u00a00;while\u00a0($i\u00a0<\u00a0mysql_num_fields($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Information\u00a0for\u00a0column\u00a0$i:<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0$meta\u00a0=\u00a0mysql_fetch_field($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0if\u00a0(!$meta)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"No\u00a0information\u00a0available<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<pre>blob:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$meta->blobmax_length:\u00a0\u00a0\u00a0$meta->max_lengthmultiple_key:\u00a0$meta->multiple_keyname:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$meta->namenot_null:\u00a0\u00a0\u00a0\u00a0\u00a0$meta->not_nullnumeric:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$meta->numericprimary_key:\u00a0\u00a0$meta->primary_keytable:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$meta->tabletype:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$meta->typeunique_key:\u00a0\u00a0\u00a0$meta->unique_keyunsigned:\u00a0\u00a0\u00a0\u00a0\u00a0$meta->unsignedzerofill:\u00a0\u00a0\u00a0\u00a0\u00a0$meta->zerofill<\/pre>\";\u00a0\u00a0\u00a0\u00a0$i++;}mysql_free_result($result);?>                        Notes   Note: Field names returned by this function are case-sensitive.         See Also            mysql_field_seek() - Set result pointer to a specified field offset"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-assoc.php","title":"mysql_fetch_assoc","description":"mysql_fetch_assoc   (PHP 4 >= 4.0.3, PHP 5)mysql_fetch_assoc \u2014 Fetch a result row as an associative array         Description       array mysql_fetch_assoc     ( resource $result    )        Returns an associative array that corresponds to the fetched row    and moves the internal data pointer ahead.    mysql_fetch_assoc() is equivalent to calling    mysql_fetch_array() with MYSQL_ASSOC for the    optional second parameter. It only returns an associative array.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().                   Return Values       Returns an associative array of strings that corresponds to the fetched row, or     FALSE if there are no more rows.          If two or more columns of the result have the same field names,    the last column will take precedence. To access the other    column(s) of the same name, you either need to access the    result with numeric indices by using    mysql_fetch_row() or add alias names.    See the example at the mysql_fetch_array()    description about aliases.            Examples            Example #1 An expanded mysql_fetch_assoc() example       <?php$conn\u00a0=\u00a0mysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0connect\u00a0to\u00a0DB:\u00a0\"\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}\u00a0\u00a0if\u00a0(!mysql_select_db(\"mydbname\"))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0select\u00a0mydbname:\u00a0\"\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}$sql\u00a0=\u00a0\"SELECT\u00a0id\u00a0as\u00a0userid,\u00a0fullname,\u00a0userstatus\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FROM\u00a0\u00a0\u00a0sometable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0\u00a0userstatus\u00a0=\u00a01\";$result\u00a0=\u00a0mysql_query($sql);if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Could\u00a0not\u00a0successfully\u00a0run\u00a0query\u00a0($sql)\u00a0from\u00a0DB:\u00a0\"\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}if\u00a0(mysql_num_rows($result)\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"No\u00a0rows\u00a0found,\u00a0nothing\u00a0to\u00a0print\u00a0so\u00a0am\u00a0exiting\";\u00a0\u00a0\u00a0\u00a0exit;}\/\/\u00a0While\u00a0a\u00a0row\u00a0of\u00a0data\u00a0exists,\u00a0put\u00a0that\u00a0row\u00a0in\u00a0$row\u00a0as\u00a0an\u00a0associative\u00a0array\/\/\u00a0Note:\u00a0If\u00a0you're\u00a0expecting\u00a0just\u00a0one\u00a0row,\u00a0no\u00a0need\u00a0to\u00a0use\u00a0a\u00a0loop\/\/\u00a0Note:\u00a0If\u00a0you\u00a0put\u00a0extract($row);\u00a0inside\u00a0the\u00a0following\u00a0loop,\u00a0you'll\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0then\u00a0create\u00a0$userid,\u00a0$fullname,\u00a0and\u00a0$userstatuswhile\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"userid\"];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"fullname\"];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[\"userstatus\"];}mysql_free_result($result);?>                        Notes   Note:     Performance         An important thing to note is that using      mysql_fetch_assoc() is not      significantly slower than using     mysql_fetch_row(), while it      provides a significant added value.          Note: Field names returned by this function are case-sensitive.   Note: This function sets NULL fields to the PHP NULL value.         See Also            mysql_fetch_row() - Get a result row as an enumerated array     mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both     mysql_data_seek() - Move internal result pointer     mysql_query() - Send a MySQL query     mysql_error() - Returns the text of the error message from previous MySQL operation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-row.php","title":"mysql_fetch_row","description":"mysql_fetch_row   (PHP 4, PHP 5)mysql_fetch_row \u2014 Get a result row as an enumerated array         Description       array mysql_fetch_row     ( resource $result    )        Returns a numerical array that corresponds to the fetched row    and moves the internal data pointer ahead.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().                   Return Values       Returns an numerical array of strings that corresponds to the fetched row, or     FALSE if there are no more rows.          mysql_fetch_row() fetches one row of data from    the result associated with the specified result identifier.  The    row is returned as an array.  Each result column is stored in an    array offset, starting at offset 0.            Examples            Example #1 Fetching one row with mysql_fetch_row()       <?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,email\u00a0FROM\u00a0people\u00a0WHERE\u00a0id\u00a0=\u00a0'42'\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}$row\u00a0=\u00a0mysql_fetch_row($result);echo\u00a0$row[0];\u00a0\/\/\u00a042echo\u00a0$row[1];\u00a0\/\/\u00a0the\u00a0email\u00a0value?>                        Notes   Note: This function sets NULL fields to the PHP NULL value.         See Also            mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both     mysql_fetch_assoc() - Fetch a result row as an associative array     mysql_fetch_object() - Fetch a result row as an object     mysql_data_seek() - Move internal result pointer     mysql_fetch_lengths() - Get the length of each output in a result     mysql_result() - Get result data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-object.php","title":"mysql_fetch_object","description":"mysql_fetch_object   (PHP 4, PHP 5)mysql_fetch_object \u2014 Fetch a result row as an object         Description       object mysql_fetch_object     ( resource $result    [, string $class_name    [, array $params   ]] )        Returns an object with properties that correspond to the fetched row    and moves the internal data pointer ahead.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().              class_name                         The name of the class to instantiate, set the properties of and return.         If not specified, a stdClass object is returned.                                 params                         An optional array of parameters to pass to the constructor         for class_name objects.                                      Return Values       Returns an object with string properties that correspond to the    fetched row, or FALSE if there are no more rows.            Changelog                                 Version        Description                                    5.0.0                 Added the ability to return as a different object.                                            Examples            Example #1 mysql_fetch_object() example       <?phpmysql_connect(\"hostname\",\u00a0\"user\",\u00a0\"password\");mysql_select_db(\"mydb\");$result\u00a0=\u00a0mysql_query(\"select\u00a0*\u00a0from\u00a0mytable\");while\u00a0($row\u00a0=\u00a0mysql_fetch_object($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row->user_id;\u00a0\u00a0\u00a0\u00a0echo\u00a0$row->fullname;}mysql_free_result($result);?>                           Example #2 mysql_fetch_object() example       <?phpclass\u00a0foo\u00a0{\u00a0\u00a0\u00a0\u00a0public\u00a0$name;}mysql_connect(\"hostname\",\u00a0\"user\",\u00a0\"password\");mysql_select_db(\"mydb\");$result\u00a0=\u00a0mysql_query(\"select\u00a0name\u00a0from\u00a0mytable\u00a0limit\u00a01\");$obj\u00a0=\u00a0mysql_fetch_object($result,\u00a0'foo');var_dump($obj);?>                        Notes   Note:     Performance         Speed-wise, the function is identical to     mysql_fetch_array(), and almost as quick as     mysql_fetch_row() (the difference is     insignificant).          Note:          mysql_fetch_object() is similar to     mysql_fetch_array(), with one difference - an     object is returned, instead of an array.  Indirectly, that means     that you can only access the data by the field names, and not by     their offsets (numbers are illegal property names).          Note: Field names returned by this function are case-sensitive.   Note: This function sets NULL fields to the PHP NULL value.         See Also            mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both     mysql_fetch_assoc() - Fetch a result row as an associative array     mysql_fetch_row() - Get a result row as an enumerated array     mysql_data_seek() - Move internal result pointer     mysql_query() - Send a MySQL query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-len.php","title":"mysql_field_len","description":"mysql_field_len   (PHP 4, PHP 5)mysql_field_len \u2014 Returns the length of the specified field         Description       int mysql_field_len     ( resource $result    , int $field_offset    )        mysql_field_len() returns the length of the    specified field.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().         field_offset The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.                   Return Values       The length of the specified field index on success or FALSE on failure.            Examples            Example #1 mysql_field_len() example       <?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,email\u00a0FROM\u00a0people\u00a0WHERE\u00a0id\u00a0=\u00a0'42'\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}\/\/\u00a0Will\u00a0get\u00a0the\u00a0length\u00a0of\u00a0the\u00a0id\u00a0field\u00a0as\u00a0specified\u00a0in\u00a0the\u00a0database\/\/\u00a0schema.\u00a0$length\u00a0=\u00a0mysql_field_len($result,\u00a00);echo\u00a0$length;?>                        Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_fieldlen()                See Also            mysql_fetch_lengths() - Get the length of each output in a result     strlen() - Get string length"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-flags.php","title":"mysql_field_flags","description":"mysql_field_flags   (PHP 4, PHP 5)mysql_field_flags \u2014 Get the flags associated with the specified field in a result         Description       string mysql_field_flags     ( resource $result    , int $field_offset    )        mysql_field_flags() returns the field flags of    the specified field. The flags are reported as a single word    per flag separated by a single space, so that you can split the    returned value using explode().            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().         field_offset The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.                   Return Values       Returns a string of flags associated with the result or FALSE on failure.          The following flags are reported, if your version of MySQL    is current enough to support them: \"not_null\",     \"primary_key\", \"unique_key\",     \"multiple_key\", \"blob\",     \"unsigned\", \"zerofill\",    \"binary\", \"enum\",     \"auto_increment\" and \"timestamp\".            Examples            Example #1 A mysql_field_flags() example       <?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,email\u00a0FROM\u00a0people\u00a0WHERE\u00a0id\u00a0=\u00a0'42'\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}$flags\u00a0=\u00a0mysql_field_flags($result,\u00a00);echo\u00a0$flags;print_r(explode('\u00a0',\u00a0$flags));?>             The above example will output something similar to:       not_null primary_key auto_increment Array (     [0] => not_null     [1] => primary_key     [2] => auto_increment )                      Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_fieldflags()                See Also            mysql_field_type() - Get the type of the specified field in a result     mysql_field_len() - Returns the length of the specified field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-seek.php","title":"mysql_field_seek","description":"mysql_field_seek   (PHP 4, PHP 5)mysql_field_seek \u2014 Set result pointer to a specified field offset         Description       bool mysql_field_seek     ( resource $result    , int $field_offset    )        Seeks to the specified field offset.  If the next call to    mysql_fetch_field() doesn&#039;t include a field    offset, the field offset specified in    mysql_field_seek() will be returned.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().         field_offset The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.                   Return Values       Returns TRUE on success or FALSE on failure.            See Also            mysql_fetch_field() - Get column information from a result and return as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-table.php","title":"mysql_field_table","description":"mysql_field_table   (PHP 4, PHP 5)mysql_field_table \u2014 Get name of the table the specified field is in         Description       string mysql_field_table     ( resource $result    , int $field_offset    )        Returns the name of the table that the specified field is in.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().         field_offset The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.                   Return Values       The name of the table on success.            Examples            Example #1 A mysql_field_table() example       <?php$query\u00a0=\u00a0\"SELECT\u00a0account.*,\u00a0country.*\u00a0FROM\u00a0account,\u00a0country\u00a0WHERE\u00a0country.name\u00a0=\u00a0'Portugal'\u00a0AND\u00a0account.country_id\u00a0=\u00a0country.id\";\/\/\u00a0get\u00a0the\u00a0result\u00a0from\u00a0the\u00a0DB$result\u00a0=\u00a0mysql_query($query);\/\/\u00a0Lists\u00a0the\u00a0table\u00a0name\u00a0and\u00a0then\u00a0the\u00a0field\u00a0namefor\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0mysql_num_fields($result);\u00a0++$i)\u00a0{\u00a0\u00a0\u00a0\u00a0$table\u00a0=\u00a0mysql_field_table($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0$field\u00a0=\u00a0mysql_field_name($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0echo\u00a0\u00a0\"$table:\u00a0$field\\n\";}?>                        Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_fieldtable()                See Also            mysql_list_tables() - List tables in a MySQL database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-name.php","title":"mysql_field_name","description":"mysql_field_name   (PHP 4, PHP 5)mysql_field_name \u2014 Get the name of the specified field in a result         Description       string mysql_field_name     ( resource $result    , int $field_offset    )        mysql_field_name() returns the name of the    specified field index.             Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().         field_offset The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.                   Return Values       The name of the specified field index on success or FALSE on failure.            Examples            Example #1 mysql_field_name() example       <?php\/*\u00a0The\u00a0users\u00a0table\u00a0consists\u00a0of\u00a0three\u00a0fields:\u00a0*\u00a0\u00a0\u00a0user_id\u00a0*\u00a0\u00a0\u00a0username\u00a0*\u00a0\u00a0\u00a0password.\u00a0*\/$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect\u00a0to\u00a0MySQL\u00a0server:\u00a0'\u00a0.\u00a0mysql_error());}$dbname\u00a0=\u00a0'mydb';$db_selected\u00a0=\u00a0mysql_select_db($dbname,\u00a0$link);if\u00a0(!$db_selected)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\"Could\u00a0not\u00a0set\u00a0$dbname:\u00a0\"\u00a0.\u00a0mysql_error());}$res\u00a0=\u00a0mysql_query('select\u00a0*\u00a0from\u00a0users',\u00a0$link);echo\u00a0mysql_field_name($res,\u00a00)\u00a0.\u00a0\"\\n\";echo\u00a0mysql_field_name($res,\u00a02);?>             The above example will output:       user_id password                      Notes   Note: Field names returned by this function are case-sensitive.   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_fieldname()                See Also            mysql_field_type() - Get the type of the specified field in a result     mysql_field_len() - Returns the length of the specified field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-client-info.php","title":"mysql_get_client_info","description":"mysql_get_client_info   (PHP 4 >= 4.0.5, PHP 5)mysql_get_client_info \u2014 Get MySQL client info         Description       string mysql_get_client_info     ( void    )        mysql_get_client_info() returns a string that    represents the client library version.            Return Values       The MySQL client version.             Examples            Example #1 mysql_get_client_info() example       <?phpprintf(\"MySQL\u00a0client\u00a0info:\u00a0%s\\n\",\u00a0mysql_get_client_info());?>             The above example will output something similar to:       MySQL client info: 3.23.39                      See Also            mysql_get_host_info() - Get MySQL host info     mysql_get_proto_info() - Get MySQL protocol info     mysql_get_server_info() - Get MySQL server info"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-free-result.php","title":"mysql_free_result","description":"mysql_free_result   (PHP 4, PHP 5)mysql_free_result \u2014 Free result memory         Description       bool mysql_free_result     ( resource $result    )        mysql_free_result() will free all memory    associated with the result identifier result.          mysql_free_result() only needs to be called if    you are concerned about how much memory is being used for queries    that return large result sets.  All associated result memory is    automatically freed at the end of the script&#039;s execution.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().                   Return Values       Returns TRUE on success or FALSE on failure.          If a non-resource is used for the result, an    error of level E_WARNING will be emitted.  It&#039;s worth noting that    mysql_query() only returns a resource    for SELECT, SHOW, EXPLAIN, and DESCRIBE queries.              Examples            Example #1 A mysql_free_result() example       <?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,email\u00a0FROM\u00a0people\u00a0WHERE\u00a0id\u00a0=\u00a0'42'\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}\/*\u00a0Use\u00a0the\u00a0result,\u00a0assuming\u00a0we're\u00a0done\u00a0with\u00a0it\u00a0afterwards\u00a0*\/$row\u00a0=\u00a0mysql_fetch_assoc($result);\/*\u00a0Now\u00a0we\u00a0free\u00a0up\u00a0the\u00a0result\u00a0and\u00a0continue\u00a0on\u00a0with\u00a0our\u00a0script\u00a0*\/mysql_free_result($result);echo\u00a0$row['id'];echo\u00a0$row['email'];?>                        Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_freeresult()                See Also            mysql_query() - Send a MySQL query     is_resource() - Finds whether a variable is a resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-type.php","title":"mysql_field_type","description":"mysql_field_type   (PHP 4, PHP 5)mysql_field_type \u2014 Get the type of the specified field in a result         Description       string mysql_field_type     ( resource $result    , int $field_offset    )        mysql_field_type() is similar to the    mysql_field_name() function. The arguments are    identical, but the field type is returned instead.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().         field_offset The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.                   Return Values       The returned field type    will be one of \"int\", \"real\",     \"string\", \"blob\", and others as    detailed in the \u00bb\u00a0MySQL    documentation.            Examples            Example #1 mysql_field_type() example       <?phpmysql_connect(\"localhost\",\u00a0\"mysql_username\",\u00a0\"mysql_password\");mysql_select_db(\"mysql\");$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0*\u00a0FROM\u00a0func\");$fields\u00a0=\u00a0mysql_num_fields($result);$rows\u00a0\u00a0\u00a0=\u00a0mysql_num_rows($result);$table\u00a0\u00a0=\u00a0mysql_field_table($result,\u00a00);echo\u00a0\"Your\u00a0'\"\u00a0.\u00a0$table\u00a0.\u00a0\"'\u00a0table\u00a0has\u00a0\"\u00a0.\u00a0$fields\u00a0.\u00a0\"\u00a0fields\u00a0and\u00a0\"\u00a0.\u00a0$rows\u00a0.\u00a0\"\u00a0record(s)\\n\";echo\u00a0\"The\u00a0table\u00a0has\u00a0the\u00a0following\u00a0fields:\\n\";for\u00a0($i=0;\u00a0$i\u00a0<\u00a0$fields;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0$type\u00a0\u00a0=\u00a0mysql_field_type($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0$name\u00a0\u00a0=\u00a0mysql_field_name($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0$len\u00a0\u00a0\u00a0=\u00a0mysql_field_len($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0$flags\u00a0=\u00a0mysql_field_flags($result,\u00a0$i);\u00a0\u00a0\u00a0\u00a0echo\u00a0$type\u00a0.\u00a0\"\u00a0\"\u00a0.\u00a0$name\u00a0.\u00a0\"\u00a0\"\u00a0.\u00a0$len\u00a0.\u00a0\"\u00a0\"\u00a0.\u00a0$flags\u00a0.\u00a0\"\\n\";}mysql_free_result($result);mysql_close();?>             The above example will output something similar to:       Your &#039;func&#039; table has 4 fields and 1 record(s) The table has the following fields: string name 64 not_null primary_key binary int ret 1 not_null string dl 128 not_null string type 9 not_null enum                      Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_fieldtype()                See Also            mysql_field_name() - Get the name of the specified field in a result     mysql_field_len() - Returns the length of the specified field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-host-info.php","title":"mysql_get_host_info","description":"mysql_get_host_info   (PHP 4 >= 4.0.5, PHP 5)mysql_get_host_info \u2014 Get MySQL host info         Description       string mysql_get_host_info     ([ resource $link_identifier   ] )        Describes the type of connection in use for the connection, including the     server host name.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns a string describing the type of MySQL connection in use for the     connection or FALSE on failure.            Examples            Example #1 mysql_get_host_info() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}printf(\"MySQL\u00a0host\u00a0info:\u00a0%s\\n\",\u00a0mysql_get_host_info());?>             The above example will output something similar to:       MySQL host info: Localhost via UNIX socket                      See Also            mysql_get_client_info() - Get MySQL client info     mysql_get_proto_info() - Get MySQL protocol info     mysql_get_server_info() - Get MySQL server info"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-proto-info.php","title":"mysql_get_proto_info","description":"mysql_get_proto_info   (PHP 4 >= 4.0.5, PHP 5)mysql_get_proto_info \u2014 Get MySQL protocol info         Description       int mysql_get_proto_info     ([ resource $link_identifier   ] )        Retrieves the MySQL protocol.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns the MySQL protocol on success or FALSE on failure.            Examples            Example #1 mysql_get_proto_info() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}printf(\"MySQL\u00a0protocol\u00a0version:\u00a0%s\\n\",\u00a0mysql_get_proto_info());?>             The above example will output something similar to:       MySQL protocol version: 10                      See Also            mysql_get_client_info() - Get MySQL client info     mysql_get_host_info() - Get MySQL host info     mysql_get_server_info() - Get MySQL server info"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-server-info.php","title":"mysql_get_server_info","description":"mysql_get_server_info   (PHP 4 >= 4.0.5, PHP 5)mysql_get_server_info \u2014 Get MySQL server info         Description       string mysql_get_server_info     ([ resource $link_identifier   ] )        Retrieves the MySQL server version.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns the MySQL server version on success or FALSE on failure.            Examples            Example #1 mysql_get_server_info() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}printf(\"MySQL\u00a0server\u00a0version:\u00a0%s\\n\",\u00a0mysql_get_server_info());?>             The above example will output something similar to:       MySQL server version: 4.0.1-alpha                      See Also            mysql_get_client_info() - Get MySQL client info     mysql_get_host_info() - Get MySQL host info     mysql_get_proto_info() - Get MySQL protocol info     phpversion() - Gets the current PHP version"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-info.php","title":"mysql_info","description":"mysql_info   (PHP 4 >= 4.3.0, PHP 5)mysql_info \u2014 Get information about the most recent query         Description       string mysql_info     ([ resource $link_identifier   ] )        Returns detailed information about the last query.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns information about the statement on success, or FALSE on    failure. See the example below for which statements provide information,    and what the returned value may look like. Statements that are not listed     will return FALSE.            Examples            Example #1 Relevant MySQL Statements           Statements that return string values. The numbers are only for       illustrating purpose; their values will correspond to the query.           INSERT INTO ... SELECT ... String format: Records: 23 Duplicates: 0 Warnings: 0  INSERT INTO ... VALUES (...),(...),(...)... String format: Records: 37 Duplicates: 0 Warnings: 0  LOAD DATA INFILE ... String format: Records: 42 Deleted: 0 Skipped: 0 Warnings: 0  ALTER TABLE String format: Records: 60 Duplicates: 0 Warnings: 0  UPDATE String format: Rows matched: 65 Changed: 65 Warnings: 0                        Notes   Note:          mysql_info() returns a non-FALSE value for the      INSERT ... VALUES statement only if multiple value lists are      specified in the statement.                See Also            mysql_affected_rows() - Get number of affected rows in previous MySQL operation     mysql_insert_id() - Get the ID generated in the last query     mysql_stat() - Get current system status"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-dbs.php","title":"mysql_list_dbs","description":"mysql_list_dbs   (PHP 4, PHP 5)mysql_list_dbs \u2014 List databases available on a MySQL server         Description       resource mysql_list_dbs     ([ resource $link_identifier   ] )        Returns a result pointer containing the databases available from the     current mysql daemon.       Warning This function has been DEPRECATED as of PHP 5.4.0.  Relying on this function is highly discouraged.         Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns a result pointer resource on success, or FALSE on    failure. Use the mysql_tablename() function to traverse     this result pointer, or any function for result tables, such as     mysql_fetch_array().             Examples            Example #1 mysql_list_dbs() example       <?php\/\/\u00a0Usage\u00a0without\u00a0mysql_list_dbs()$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$res\u00a0=\u00a0mysql_query(\"SHOW\u00a0DATABASES\");while\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($res))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['Database']\u00a0.\u00a0\"\\n\";}\/\/\u00a0Deprecated\u00a0as\u00a0of\u00a0PHP\u00a05.4.0$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$db_list\u00a0=\u00a0mysql_list_dbs($link);while\u00a0($row\u00a0=\u00a0mysql_fetch_object($db_list))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$row->Database\u00a0.\u00a0\"\\n\";}?>             The above example will output something similar to:       database1 database2 database3                      Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_listdbs()                See Also            mysql_db_name() - Retrieves database name from the call to mysql_list_dbs     mysql_select_db() - Select a MySQL database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-processes.php","title":"mysql_list_processes","description":"mysql_list_processes   (PHP 4 >= 4.3.0, PHP 5)mysql_list_processes \u2014 List MySQL processes         Description       resource mysql_list_processes     ([ resource $link_identifier   ] )        Retrieves the current MySQL server threads.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       A result pointer resource on success or FALSE on failure.            Examples            Example #1 mysql_list_processes() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$result\u00a0=\u00a0mysql_list_processes($link);while\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($result)){\u00a0\u00a0\u00a0\u00a0printf(\"%s\u00a0%s\u00a0%s\u00a0%s\u00a0%s\\n\",\u00a0$row[\"Id\"],\u00a0$row[\"Host\"],\u00a0$row[\"db\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row[\"Command\"],\u00a0$row[\"Time\"]);}mysql_free_result($result);?>             The above example will output something similar to:       1 localhost test Processlist 0 4 localhost mysql sleep 5                      See Also            mysql_thread_id() - Return the current thread ID     mysql_stat() - Get current system status"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-fields.php","title":"mysql_list_fields","description":"mysql_list_fields   (PHP 4, PHP 5)mysql_list_fields \u2014 List MySQL table fields         Description       resource mysql_list_fields     ( string $database_name    , string $table_name    [, resource $link_identifier   ] )        Retrieves information about the given table name.          This function is deprecated. It is preferable to use     mysql_query() to issue an SQL SHOW COLUMNS FROM     table [LIKE &#039;name&#039;] statement instead.            Parameters                    database_name                      The name of the database that&#039;s being queried.                                table_name                      The name of the table that&#039;s being queried.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       A result pointer resource on success, or FALSE on    failure.          The returned result can be used with mysql_field_flags(),    mysql_field_len(),    mysql_field_name() and    mysql_field_type().            Examples            Example #1 Alternate to deprecated mysql_list_fields()       <?php$result\u00a0=\u00a0mysql_query(\"SHOW\u00a0COLUMNS\u00a0FROM\u00a0sometable\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}if\u00a0(mysql_num_rows($result)\u00a0>\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($result))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print_r($row);\u00a0\u00a0\u00a0\u00a0}}?>             The above example will output something similar to:       Array (     [Field] => id     [Type] => int(7)     [Null] =>       [Key] => PRI     [Default] =>     [Extra] => auto_increment ) Array (     [Field] => email     [Type] => varchar(100)     [Null] =>     [Key] =>     [Default] =>     [Extra] => )                      Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_listfields()                See Also            mysql_field_flags() - Get the flags associated with the specified field in a result     mysql_info() - Get information about the most recent query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-insert-id.php","title":"mysql_insert_id","description":"mysql_insert_id   (PHP 4, PHP 5)mysql_insert_id \u2014 Get the ID generated in the last query         Description       int mysql_insert_id     ([ resource $link_identifier   ] )        Retrieves the ID generated for an AUTO_INCREMENT column by the previous     query (usually INSERT).            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       The ID generated for an AUTO_INCREMENT column by the previous     query on success, 0 if the previous    query does not generate an AUTO_INCREMENT value, or FALSE if    no MySQL connection was established.            Examples            Example #1 mysql_insert_id() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}mysql_select_db('mydb');mysql_query(\"INSERT\u00a0INTO\u00a0mytable\u00a0(product)\u00a0values\u00a0('kossu')\");printf(\"Last\u00a0inserted\u00a0record\u00a0has\u00a0id\u00a0%d\\n\",\u00a0mysql_insert_id());?>                        Notes   Caution         mysql_insert_id() will convert the return type of the     native MySQL C API function mysql_insert_id() to a type     of long (named int in PHP). If your     AUTO_INCREMENT column has a column type of BIGINT (64 bits) the     conversion may result in an incorrect value. Instead, use the internal     MySQL SQL function LAST_INSERT_ID() in an SQL query. For more information     about PHP&#039;s maximum integer values, please see the     integer documentation.          Note:          Because mysql_insert_id() acts on the last performed     query, be sure to call mysql_insert_id() immediately      after the query that generates the value.          Note:          The value of the MySQL SQL function     LAST_INSERT_ID() always contains the most     recently generated AUTO_INCREMENT value, and is not reset     between queries.               See Also            mysql_query() - Send a MySQL query     mysql_info() - Get information about the most recent query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-num-fields.php","title":"mysql_num_fields","description":"mysql_num_fields   (PHP 4, PHP 5)mysql_num_fields \u2014 Get number of fields in result         Description       int mysql_num_fields     ( resource $result    )        Retrieves the number of fields from a query.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().                   Return Values       Returns the number of fields in the result set resource on    success or FALSE on failure.             Examples            Example #1 A mysql_num_fields() example       <?php$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0id,email\u00a0FROM\u00a0people\u00a0WHERE\u00a0id\u00a0=\u00a0'42'\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0run\u00a0query:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}\/*\u00a0returns\u00a02\u00a0because\u00a0id,email\u00a0===\u00a0two\u00a0fields\u00a0*\/echo\u00a0mysql_num_fields($result);?>                        Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_numfields()                See Also            mysql_select_db() - Select a MySQL database     mysql_query() - Send a MySQL query     mysql_fetch_field() - Get column information from a result and return as an object     mysql_num_rows() - Get number of rows in result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-tables.php","title":"mysql_list_tables","description":"mysql_list_tables   (PHP 4, PHP 5)mysql_list_tables \u2014 List tables in a MySQL database         Description       resource mysql_list_tables     ( string $database    [, resource $link_identifier   ] )        Retrieves a list of table names from a MySQL database.          This function is deprecated. It is preferable to use     mysql_query() to issue an SQL SHOW TABLES     [FROM db_name] [LIKE &#039;pattern&#039;] statement instead.            Parameters                    database                      The name of the database                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       A result pointer resource on success or FALSE on failure.          Use the mysql_tablename() function to    traverse this result pointer, or any function for result tables,    such as mysql_fetch_array().            Changelog                                 Version        Description                                    4.3.7                 This function became deprecated.                                            Examples            Example #1 mysql_list_tables() alternative example       <?php$dbname\u00a0=\u00a0'mysql_dbname';if\u00a0(!mysql_connect('mysql_host',\u00a0'mysql_user',\u00a0'mysql_password'))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0connect\u00a0to\u00a0mysql';\u00a0\u00a0\u00a0\u00a0exit;}$sql\u00a0=\u00a0\"SHOW\u00a0TABLES\u00a0FROM\u00a0$dbname\";$result\u00a0=\u00a0mysql_query($sql);if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"DB\u00a0Error,\u00a0could\u00a0not\u00a0list\u00a0tables\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0'MySQL\u00a0Error:\u00a0'\u00a0.\u00a0mysql_error();\u00a0\u00a0\u00a0\u00a0exit;}while\u00a0($row\u00a0=\u00a0mysql_fetch_row($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Table:\u00a0{$row[0]}\\n\";}mysql_free_result($result);?>                        Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_listtables()                See Also            mysql_list_dbs() - List databases available on a MySQL server     mysql_tablename() - Get table name of field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-ping.php","title":"mysql_ping","description":"mysql_ping   (PHP 4 >= 4.3.0, PHP 5)mysql_ping \u2014 Ping a server connection or reconnect if there is no connection         Description       bool mysql_ping     ([ resource $link_identifier   ] )        Checks whether or not the connection to    the server is working. If it has gone down, an automatic reconnection is    attempted. This function can be used by scripts that remain idle for a    long while, to check whether or not the server has closed the connection    and reconnect if necessary.      Note:          Since MySQL 5.0.13, automatic reconnection feature is disabled.                Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns TRUE if the connection to the server MySQL server is working,     otherwise FALSE.            Examples            Example #1 A mysql_ping() example       <?phpset_time_limit(0);$conn\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysqluser',\u00a0'mypass');$db\u00a0\u00a0\u00a0=\u00a0mysql_select_db('mydb');\/*\u00a0Assuming\u00a0this\u00a0query\u00a0will\u00a0take\u00a0a\u00a0long\u00a0time\u00a0*\/$result\u00a0=\u00a0mysql_query($sql);if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Query\u00a0#1\u00a0failed,\u00a0exiting.';\u00a0\u00a0\u00a0\u00a0exit;}\/*\u00a0Make\u00a0sure\u00a0the\u00a0connection\u00a0is\u00a0still\u00a0alive,\u00a0if\u00a0not,\u00a0try\u00a0to\u00a0reconnect\u00a0*\/if\u00a0(!mysql_ping($conn))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Lost\u00a0connection,\u00a0exiting\u00a0after\u00a0query\u00a0#1';\u00a0\u00a0\u00a0\u00a0exit;}mysql_free_result($result);\/*\u00a0So\u00a0the\u00a0connection\u00a0is\u00a0still\u00a0alive,\u00a0let's\u00a0run\u00a0another\u00a0query\u00a0*\/$result2\u00a0=\u00a0mysql_query($sql2);?>                        See Also            mysql_thread_id() - Return the current thread ID     mysql_list_processes() - List MySQL processes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-num-rows.php","title":"mysql_num_rows","description":"mysql_num_rows   (PHP 4, PHP 5)mysql_num_rows \u2014 Get number of rows in result         Description       int mysql_num_rows     ( resource $result    )        Retrieves the number of rows from a result set. This command is only valid     for statements like SELECT or SHOW that return an actual result set.     To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or     DELETE query, use mysql_affected_rows().            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().                   Return Values       The number of rows in a result set on success or FALSE on failure.            Examples            Example #1 mysql_num_rows() example       <?php$link\u00a0=\u00a0mysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\");mysql_select_db(\"database\",\u00a0$link);$result\u00a0=\u00a0mysql_query(\"SELECT\u00a0*\u00a0FROM\u00a0table1\",\u00a0$link);$num_rows\u00a0=\u00a0mysql_num_rows($result);echo\u00a0\"$num_rows\u00a0Rows\\n\";?>                        Notes   Note:          If you use mysql_unbuffered_query(),      mysql_num_rows() will not return the      correct value until all the rows in the result set have been      retrieved.          Note:          For backward compatibility, the following deprecated alias may be used:      mysql_numrows()                See Also            mysql_affected_rows() - Get number of affected rows in previous MySQL operation     mysql_connect() - Open a connection to a MySQL Server     mysql_data_seek() - Move internal result pointer     mysql_select_db() - Select a MySQL database     mysql_query() - Send a MySQL query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-pconnect.php","title":"mysql_pconnect","description":"mysql_pconnect   (PHP 4, PHP 5)mysql_pconnect \u2014 Open a persistent connection to a MySQL server         Description       resource mysql_pconnect     ([ string $server = ini_get(\"mysql.default_host\")    [, string $username = ini_get(\"mysql.default_user\")    [, string $password = ini_get(\"mysql.default_password\")    [, int $client_flags   ]]]] )           Establishes a persistent connection to a MySQL server.             mysql_pconnect() acts very much like    mysql_connect() with two major differences.          First, when connecting, the function would first try to find a    (persistent) link that&#039;s already open with the same host,    username and password.  If one is found, an identifier for it    will be returned instead of opening a new connection.          Second, the connection to the SQL server will not be closed when    the execution of the script ends.  Instead, the link will remain    open for future use (mysql_close() will not    close links established by mysql_pconnect()).          This type of link is therefore called &#039;persistent&#039;.            Parameters                    server                      The MySQL server. It can also include a port number. e.g.         \"hostname:port\" or a path to a local socket e.g. \":\/path\/to\/socket\" for         the localhost.                      If the PHP directive         mysql.default_host is undefined (default), then the default         value is &#039;localhost:3306&#039;                                username                      The username. Default value is the name of the user that owns the        server process.                                password                      The password. Default value is an empty password.                                client_flags                      The client_flags parameter can be a combination         of the following constants:        128 (enable LOAD DATA LOCAL handling),        MYSQL_CLIENT_SSL,         MYSQL_CLIENT_COMPRESS,         MYSQL_CLIENT_IGNORE_SPACE or        MYSQL_CLIENT_INTERACTIVE.                                      Return Values       Returns a MySQL persistent link identifier on success, or FALSE on     failure.             Changelog                                 Version        Description                                    4.3.0                 Added the client_flags parameter.                                            Notes   Note:          Note, that these kind of links only work if you are using     a module version of PHP. See the     Persistent     Database Connections section for more information.          Warning         Using persistent connections can require a bit of tuning of your Apache     and MySQL configurations to ensure that you do not exceed the number of     connections allowed by MySQL.          Note:          You can suppress the error message on failure by prepending      a @     to the function name.                See Also            mysql_connect() - Open a connection to a MySQL Server     Persistent     Database Connections"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-result.php","title":"mysql_result","description":"mysql_result   (PHP 4, PHP 5)mysql_result \u2014 Get result data         Description       string mysql_result     ( resource $result    , int $row    [, mixed $field = 0   ] )        Retrieves the contents of one cell from a MySQL result set.          When working on large result sets, you should consider using one    of the functions that fetch an entire row (specified below).  As    these functions return the contents of multiple cells in one    function call, they&#039;re MUCH quicker than    mysql_result().  Also, note that specifying a    numeric offset for the field argument is much quicker than    specifying a fieldname or tablename.fieldname argument.            Parameters               result The result resource that is being evaluated. This result comes from a call to mysql_query().              row                      The row number from the result that&#039;s being retrieved. Row numbers         start at 0.                                field                      The name or offset of the field being retrieved.                      It can be the field&#039;s offset, the field&#039;s name, or the field&#039;s table         dot field name (tablename.fieldname). If the column name has been        aliased (&#039;select foo as bar from...&#039;), use the alias instead of the         column name. If undefined, the first field is retrieved.                                     Return Values       The contents of one cell from a MySQL result set on success, or     FALSE on failure.            Examples            Example #1 mysql_result() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0connect:\u00a0'\u00a0.\u00a0mysql_error());}if\u00a0(!mysql_select_db('database_name'))\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0select\u00a0database:\u00a0'\u00a0.\u00a0mysql_error());}$result\u00a0=\u00a0mysql_query('SELECT\u00a0name\u00a0FROM\u00a0work.employee');if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Could\u00a0not\u00a0query:'\u00a0.\u00a0mysql_error());}echo\u00a0mysql_result($result,\u00a02);\u00a0\/\/\u00a0outputs\u00a0third\u00a0employee's\u00a0namemysql_close($link);?>                        Notes   Note:          Calls to mysql_result() should not be mixed     with calls to other functions that deal with the result set.                See Also            mysql_fetch_row() - Get a result row as an enumerated array     mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both     mysql_fetch_assoc() - Fetch a result row as an associative array     mysql_fetch_object() - Fetch a result row as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-real-escape-string.php","title":"mysql_real_escape_string","description":"mysql_real_escape_string   (PHP 4 >= 4.3.0, PHP 5)mysql_real_escape_string \u2014 Escapes special characters in a string for use in an SQL statement         Description       string mysql_real_escape_string     ( string $unescaped_string    [, resource $link_identifier   ] )        Escapes special characters in the unescaped_string,     taking into account the current character set of the connection so that it     is safe to place it in a mysql_query(). If binary data     is to be inserted, this function must be used.          mysql_real_escape_string() calls MySQL&#039;s library function    mysql_real_escape_string, which prepends backslashes to the following characters:    \\x00, \\n,    \\r, \\, &#039;,    \" and \\x1a.          This function must always (with few exceptions) be used to make data    safe before sending a query to MySQL.            Parameters                    unescaped_string                      The string that is to be escaped.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns the escaped string, or FALSE on error.            Examples            Example #1 Simple mysql_real_escape_string() example       <?php\/\/\u00a0Connect$link\u00a0=\u00a0mysql_connect('mysql_host',\u00a0'mysql_user',\u00a0'mysql_password')\u00a0\u00a0\u00a0\u00a0OR\u00a0die(mysql_error());\/\/\u00a0Query$query\u00a0=\u00a0sprintf(\"SELECT\u00a0*\u00a0FROM\u00a0users\u00a0WHERE\u00a0user='%s'\u00a0AND\u00a0password='%s'\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mysql_real_escape_string($user),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mysql_real_escape_string($password));?>                           Example #2 An example SQL Injection Attack       <?php\/\/\u00a0We\u00a0didn't\u00a0check\u00a0$_POST['password'],\u00a0it\u00a0could\u00a0be\u00a0anything\u00a0the\u00a0user\u00a0wanted!\u00a0For\u00a0example:$_POST['username']\u00a0=\u00a0'aidan';$_POST['password']\u00a0=\u00a0\"'\u00a0OR\u00a0''='\";\/\/\u00a0Query\u00a0database\u00a0to\u00a0check\u00a0if\u00a0there\u00a0are\u00a0any\u00a0matching\u00a0users$query\u00a0=\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0users\u00a0WHERE\u00a0user='{$_POST['username']}'\u00a0AND\u00a0password='{$_POST['password']}'\";mysql_query($query);\/\/\u00a0This\u00a0means\u00a0the\u00a0query\u00a0sent\u00a0to\u00a0MySQL\u00a0would\u00a0be:echo\u00a0$query;?>                     The query sent to MySQL:             SELECT * FROM users WHERE user=&#039;aidan&#039; AND password=&#039;&#039; OR &#039;&#039;=&#039;&#039;                 This would allow anyone to log in without a valid password.                     Notes   Note:          A MySQL connection is required before using      mysql_real_escape_string() otherwise an error of     level E_WARNING is generated, and FALSE is      returned. If link_identifier isn&#039;t defined, the     last MySQL connection is used.          Note:          If magic_quotes_gpc is enabled,     first apply stripslashes() to the data. Using this function     on data which has already been escaped will escape the data twice.          Note:          If this function is not used to escape data, the query is vulnerable to     SQL Injection Attacks.          Note:          mysql_real_escape_string() does not escape      and _. These are wildcards in     MySQL if combined with LIKE, GRANT,     or REVOKE.                See Also            mysql_client_encoding() - Returns the name of the character set     addslashes() - Quote string with slashes     stripslashes() - Un-quotes a quoted string     The magic_quotes_gpc directive     The magic_quotes_runtime directive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-select-db.php","title":"mysql_select_db","description":"mysql_select_db   (PHP 4, PHP 5)mysql_select_db \u2014 Select a MySQL database         Description       bool mysql_select_db     ( string $database_name    [, resource $link_identifier   ] )        Sets the current active database on the server that&#039;s associated with the     specified link identifier. Every subsequent call to     mysql_query() will be made on the active database.            Parameters                    database_name                      The name of the database that is to be selected.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 mysql_select_db() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');if\u00a0(!$link)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Not\u00a0connected\u00a0:\u00a0'\u00a0.\u00a0mysql_error());}\/\/\u00a0make\u00a0foo\u00a0the\u00a0current\u00a0db$db_selected\u00a0=\u00a0mysql_select_db('foo',\u00a0$link);if\u00a0(!$db_selected)\u00a0{\u00a0\u00a0\u00a0\u00a0die\u00a0('Can\\'t\u00a0use\u00a0foo\u00a0:\u00a0'\u00a0.\u00a0mysql_error());}?>                        Notes   Note:          For backward compatibility, the following deprecated alias may be used:      mysql_selectdb()                See Also            mysql_connect() - Open a connection to a MySQL Server     mysql_pconnect() - Open a persistent connection to a MySQL server     mysql_query() - Send a MySQL query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-set-charset.php","title":"mysql_set_charset","description":"mysql_set_charset   (PHP 5 >= 5.2.3)mysql_set_charset \u2014 Sets the client character set         Description       bool mysql_set_charset     ( string $charset    [, resource $link_identifier   ] )        Sets the default character set for the current connection.             Parameters                    charset                      A valid character set name.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note:          This function requires MySQL 5.0.7 or later.          Note:          This is the preferred way to change the charset. Using     mysql_query() to execute SET NAMES ..     is not recommended.                 See Also            mysql_client_encoding() - Returns the name of the character set     \u00bb\u00a0List of character sets that MySQL supports"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-stat.php","title":"mysql_stat","description":"mysql_stat   (PHP 4 >= 4.3.0, PHP 5)mysql_stat \u2014 Get current system status         Description       string mysql_stat     ([ resource $link_identifier   ] )        mysql_stat() returns the current server status.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       Returns a string with the status for uptime, threads, queries, open tables,    flush tables and queries per second. For a complete list of other status    variables, you have to use the SHOW STATUS SQL command.    If link_identifier is invalid, NULL is returned.            Examples            Example #1 mysql_stat() example       <?php$link\u00a0\u00a0\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$status\u00a0=\u00a0explode('\u00a0\u00a0',\u00a0mysql_stat($link));print_r($status);?>             The above example will output something similar to:       Array (     [0] => Uptime: 5380     [1] => Threads: 2     [2] => Questions: 1321299     [3] => Slow queries: 0     [4] => Opens: 26     [5] => Flush tables: 1     [6] => Open tables: 17     [7] => Queries per second avg: 245.595 )                         Example #2 Alternative mysql_stat() example       <?php$link\u00a0\u00a0\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$result\u00a0=\u00a0mysql_query('SHOW\u00a0STATUS',\u00a0$link);while\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['Variable_name']\u00a0.\u00a0'\u00a0=\u00a0'\u00a0.\u00a0$row['Value']\u00a0.\u00a0\"\\n\";}?>             The above example will output something similar to:       back_log = 50 basedir = \/usr\/local\/ bdb_cache_size = 8388600 bdb_log_buffer_size = 32768 bdb_home = \/var\/db\/mysql\/ bdb_max_lock = 10000 bdb_logdir = bdb_shared_data = OFF bdb_tmpdir = \/var\/tmp\/ ...                      See Also            mysql_get_server_info() - Get MySQL server info     mysql_list_processes() - List MySQL processes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-tablename.php","title":"mysql_tablename","description":"mysql_tablename   (PHP 4, PHP 5)mysql_tablename \u2014 Get table name of field         Description       string mysql_tablename     ( resource $result    , int $i    )        Retrieves the table name from a result.          This function is deprecated. It is preferable to use     mysql_query() to issue an SQL SHOW TABLES     [FROM db_name] [LIKE &#039;pattern&#039;] statement instead.            Parameters                    result                      A result pointer resource that&#039;s returned from          mysql_list_tables().                                i                      The integer index (row\/table number)                                     Return Values       The name of the table on success or FALSE on failure.          Use the mysql_tablename() function to    traverse this result pointer, or any function for result tables,    such as mysql_fetch_array().            Examples            Example #1 mysql_tablename() example       <?phpmysql_connect(\"localhost\",\u00a0\"mysql_user\",\u00a0\"mysql_password\");$result\u00a0=\u00a0mysql_list_tables(\"mydb\");$num_rows\u00a0=\u00a0mysql_num_rows($result);for\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0$num_rows;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Table:\u00a0\",\u00a0mysql_tablename($result,\u00a0$i),\u00a0\"\\n\";}mysql_free_result($result);?>                        Notes   Note:          The mysql_num_rows() function may be used to     determine the number of tables in the result pointer.                See Also            mysql_list_tables() - List tables in a MySQL database     mysql_field_table() - Get name of the table the specified field is in     mysql_db_name() - Retrieves database name from the call to mysql_list_dbs"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-query.php","title":"mysql_query","description":"mysql_query   (PHP 4, PHP 5)mysql_query \u2014 Send a MySQL query         Description       resource mysql_query     ( string $query    [, resource $link_identifier   ] )        mysql_query() sends a unique query (multiple queries    are not supported) to the currently    active database on the server that&#039;s associated with the    specified link_identifier.            Parameters                    query                      An SQL query                      The query string should not end with a semicolon.        Data inside the query should be properly escaped.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,    mysql_query()     returns a resource on success, or FALSE on    error.          For other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc,    mysql_query() returns TRUE on success    or FALSE on error.          The returned result resource should be passed to    mysql_fetch_array(), and other    functions for dealing with result tables, to access the returned data.          Use mysql_num_rows() to find out how many rows    were returned for a SELECT statement or    mysql_affected_rows() to find out how many    rows were affected by a DELETE, INSERT, REPLACE, or UPDATE    statement.          mysql_query() will also fail and return FALSE    if the user does not have permission to access the table(s) referenced by    the query.            Examples            Example #1 Invalid Query           The following query is syntactically invalid, so      mysql_query() fails and returns FALSE.            <?php$result\u00a0=\u00a0mysql_query('SELECT\u00a0*\u00a0WHERE\u00a01=1');if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0die('Invalid\u00a0query:\u00a0'\u00a0.\u00a0mysql_error());}?>                           Example #2 Valid Query           The following query is valid, so mysql_query()      returns a resource.            <?php\/\/\u00a0This\u00a0could\u00a0be\u00a0supplied\u00a0by\u00a0a\u00a0user,\u00a0for\u00a0example$firstname\u00a0=\u00a0'fred';$lastname\u00a0\u00a0=\u00a0'fox';\/\/\u00a0Formulate\u00a0Query\/\/\u00a0This\u00a0is\u00a0the\u00a0best\u00a0way\u00a0to\u00a0perform\u00a0an\u00a0SQL\u00a0query\/\/\u00a0For\u00a0more\u00a0examples,\u00a0see\u00a0mysql_real_escape_string()$query\u00a0=\u00a0sprintf(\"SELECT\u00a0firstname,\u00a0lastname,\u00a0address,\u00a0age\u00a0FROM\u00a0friends\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0firstname='%s'\u00a0AND\u00a0lastname='%s'\",\u00a0\u00a0\u00a0\u00a0mysql_real_escape_string($firstname),\u00a0\u00a0\u00a0\u00a0mysql_real_escape_string($lastname));\/\/\u00a0Perform\u00a0Query$result\u00a0=\u00a0mysql_query($query);\/\/\u00a0Check\u00a0result\/\/\u00a0This\u00a0shows\u00a0the\u00a0actual\u00a0query\u00a0sent\u00a0to\u00a0MySQL,\u00a0and\u00a0the\u00a0error.\u00a0Useful\u00a0for\u00a0debugging.if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0$message\u00a0\u00a0=\u00a0'Invalid\u00a0query:\u00a0'\u00a0.\u00a0mysql_error()\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0$message\u00a0.=\u00a0'Whole\u00a0query:\u00a0'\u00a0.\u00a0$query;\u00a0\u00a0\u00a0\u00a0die($message);}\/\/\u00a0Use\u00a0result\/\/\u00a0Attempting\u00a0to\u00a0print\u00a0$result\u00a0won't\u00a0allow\u00a0access\u00a0to\u00a0information\u00a0in\u00a0the\u00a0resource\/\/\u00a0One\u00a0of\u00a0the\u00a0mysql\u00a0result\u00a0functions\u00a0must\u00a0be\u00a0used\/\/\u00a0See\u00a0also\u00a0mysql_result(),\u00a0mysql_fetch_array(),\u00a0mysql_fetch_row(),\u00a0etc.while\u00a0($row\u00a0=\u00a0mysql_fetch_assoc($result))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['firstname'];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['lastname'];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['address'];\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['age'];}\/\/\u00a0Free\u00a0the\u00a0resources\u00a0associated\u00a0with\u00a0the\u00a0result\u00a0set\/\/\u00a0This\u00a0is\u00a0done\u00a0automatically\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0scriptmysql_free_result($result);?>                        See Also            mysql_connect() - Open a connection to a MySQL Server     mysql_error() - Returns the text of the error message from previous MySQL operation     mysql_real_escape_string() - Escapes special characters in a string for use in an SQL statement     mysql_result() - Get result data     mysql_fetch_assoc() - Fetch a result row as an associative array     mysql_unbuffered_query() - Send an SQL query to MySQL without fetching and buffering the result rows."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-thread-id.php","title":"mysql_thread_id","description":"mysql_thread_id   (PHP 4 >= 4.3.0, PHP 5)mysql_thread_id \u2014 Return the current thread ID         Description       int mysql_thread_id     ([ resource $link_identifier   ] )        Retrieves the current thread ID. If the connection is lost, and a reconnect     with mysql_ping() is executed, the thread ID will     change. This means only retrieve the thread ID when needed.            Parameters               link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       The thread ID on success or FALSE on failure.            Examples            Example #1 mysql_thread_id() example       <?php$link\u00a0=\u00a0mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_password');$thread_id\u00a0=\u00a0mysql_thread_id($link);if\u00a0($thread_id){\u00a0\u00a0\u00a0\u00a0printf(\"current\u00a0thread\u00a0id\u00a0is\u00a0%d\\n\",\u00a0$thread_id);}?>             The above example will output something similar to:       current thread id is 73                      See Also            mysql_ping() - Ping a server connection or reconnect if there is no connection     mysql_list_processes() - List MySQL processes"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-unbuffered-query.php","title":"mysql_unbuffered_query","description":"mysql_unbuffered_query   (PHP 4 >= 4.0.6, PHP 5)mysql_unbuffered_query \u2014 Send an SQL query to MySQL without fetching and buffering the result rows.         Description       resource mysql_unbuffered_query     ( string $query    [, resource $link_identifier   ] )        mysql_unbuffered_query() sends the SQL query    query to MySQL without automatically    fetching and buffering the result rows as    mysql_query() does.  This saves a considerable    amount of memory with SQL queries that produce large result sets,    and you can start working on the result set immediately after the    first row has been retrieved as you don&#039;t have to wait until the    complete SQL query has been performed.  To use    mysql_unbuffered_query() while multiple database    connections are open, you must specify the optional parameter    link_identifier to identify which connection    you want to use.            Parameters                    query                      The SQL query to execute.                      Data inside the query should be properly escaped.                           link_identifier The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.                    Return Values       For SELECT, SHOW, DESCRIBE or EXPLAIN statements,    mysql_unbuffered_query()     returns a resource on success, or FALSE on    error.          For other type of SQL statements, UPDATE, DELETE, DROP, etc,    mysql_unbuffered_query() returns TRUE on success    or FALSE on error.            Notes   Note:          The benefits of mysql_unbuffered_query() come     at a cost: you cannot use mysql_num_rows() and     mysql_data_seek() on a result set returned from     mysql_unbuffered_query(), until all rows are fetched.     You also have to fetch all result rows from an unbuffered SQL query     before you can send a new SQL query to MySQL, using the same     link_identifier.                See Also            mysql_query() - Send a MySQL query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.oauth_get_sbs.php","title":"oauth_get_sbs","description":"oauth_get_sbs   (PECL OAuth >=0.99.7)oauth_get_sbs \u2014 Generate a Signature Base String         Description       string oauth_get_sbs     ( string $http_method    , string $uri    [, array $request_parameters   ] )        Generates a Signature Base String according to pecl\/oauth.            Parameters                    http_method                      The HTTP method.                                uri                      URI to encode.                                request_parameters                      Array of request parameters.                                     Return Values       Returns a Signature Base String."},{"url":"http:\/\/www.php.net\/manual\/en\/function.oauth-urlencode.php","title":"oauth_urlencode","description":"oauth_urlencode   (PECL OAuth >=0.99.2)oauth_urlencode \u2014 Encode a URI to RFC 3986         Description       string oauth_urlencode     ( string $uri    )        Encodes a URI to \u00bb\u00a0RFC 3986.            Parameters                    uri                      URI to encode.                                     Return Values       Returns an \u00bb\u00a0RFC 3986 encoded string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-bind-result.php","title":"mysqli_bind_result","description":"mysqli_bind_result   (PHP 5)mysqli_bind_result \u2014 Alias for mysqli_stmt_bind_result()         Description       This function is an alias of mysqli_stmt_bind_result().            Notes   Note:          mysqli_bind_result() is deprecated and will be removed.                See Also            mysqli_stmt_bind_result() - Binds variables to a prepared statement for result storage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-bind-param.php","title":"mysqli_bind_param","description":"mysqli_bind_param   (PHP 5)mysqli_bind_param \u2014 Alias for mysqli_stmt_bind_param()          Description       This function is an alias of mysqli_stmt_bind_param().            Notes   Note:          mysqli_bind_param() is deprecated and will be removed.                See Also            mysqli_stmt_bind_param() - Binds variables to a prepared statement as parameters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-client-encoding.php","title":"mysqli_client_encoding","description":"mysqli_client_encoding   (PHP 5)mysqli_client_encoding \u2014 Alias of mysqli_character_set_name()         Description       This function is an alias of mysqli_character_set_name().            See Also            mysqli_real_escape_string() - Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-connect.php","title":"mysqli_connect","description":"mysqli_connect   (PHP 5)mysqli_connect \u2014 Alias of  mysqli::__construct()         Description       This function is an alias of:   mysqli::__construct()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-disable-reads-from-master.php","title":"mysqli_disable_reads_from_mastermysqli::disable_reads_from_master","description":"mysqli_disable_reads_from_master   mysqli::disable_reads_from_master   (PHP 5)mysqli_disable_reads_from_master -- mysqli::disable_reads_from_master \u2014 Disable reads from master         Description   Object oriented style       void mysqli::disable_reads_from_master     ( void    )    Procedural style       bool mysqli_disable_reads_from_master     ( mysqli $link    )      WarningThis function is currently not documented; only its argument list is available.     WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-disable-rpl-parse.php","title":"mysqli_disable_rpl_parse","description":"mysqli_disable_rpl_parse   (PHP 5)mysqli_disable_rpl_parse \u2014 Disable RPL parse         Description       bool mysqli_disable_rpl_parse     ( mysqli $link    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-enable-reads-from-master.php","title":"mysqli_enable_reads_from_master","description":"mysqli_enable_reads_from_master   (PHP 5)mysqli_enable_reads_from_master \u2014 Enable reads from master         Description       bool mysqli_enable_reads_from_master     ( mysqli $link    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-enable-rpl-parse.php","title":"mysqli_enable_rpl_parse","description":"mysqli_enable_rpl_parse   (PHP 5)mysqli_enable_rpl_parse \u2014 Enable RPL parse         Description       bool mysqli_enable_rpl_parse     ( mysqli $link    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-escape-string.php","title":"mysqli_escape_string","description":"mysqli_escape_string   (PHP 5)mysqli_escape_string \u2014 Alias of mysqli_real_escape_string()         Description       This function is an alias of:  mysqli_real_escape_string()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-execute.php","title":"mysqli_execute","description":"mysqli_execute   (PHP 5)mysqli_execute \u2014 Alias for mysqli_stmt_execute()         Description       This function is an alias of mysqli_stmt_execute().            Notes   Note:          mysqli_execute() is deprecated and will be removed.                See Also            mysqli_stmt_execute() - Executes a prepared Query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-fetch.php","title":"mysqli_fetch","description":"mysqli_fetch   (PHP 5)mysqli_fetch \u2014 Alias for mysqli_stmt_fetch()         Description       This function is an alias of mysqli_stmt_fetch().            Notes   Note:          mysqli_fetch() is deprecated and will be removed.                See Also            mysqli_stmt_fetch() - Fetch results from a prepared statement into the bound variables"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-get-metadata.php","title":"mysqli_get_metadata","description":"mysqli_get_metadata   (PHP 5)mysqli_get_metadata \u2014 Alias for mysqli_stmt_result_metadata()         Description       This function is an alias of mysqli_stmt_result_metadata().            Notes   Note:          mysqli_get_metadata() is deprecated and will be removed.                See Also            mysqli_stmt_result_metadata() - Returns result set metadata from a prepared statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-master-query.php","title":"mysqli_master_query","description":"mysqli_master_query   (PHP 5)mysqli_master_query \u2014 Enforce execution of a query on the master in a master\/slave setup         Description       bool mysqli_master_query     ( mysqli $link    , string $query    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-param-count.php","title":"mysqli_param_count","description":"mysqli_param_count   (PHP 5)mysqli_param_count \u2014 Alias for mysqli_stmt_param_count()         Description       This function is an alias of mysqli_stmt_param_count().            Notes   Note:          mysqli_param_count() is deprecated and will be removed.                See Also            mysqli_stmt_param_count() - Returns the number of parameter for the given statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-rpl-parse-enabled.php","title":"mysqli_rpl_parse_enabled","description":"mysqli_rpl_parse_enabled   (PHP 5)mysqli_rpl_parse_enabled \u2014 Check if RPL parse is enabled         Description       int mysqli_rpl_parse_enabled     ( mysqli $link    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-report.php","title":"mysqli_report","description":"mysqli_report   (PHP 5)mysqli_report \u2014 Enables or disables internal report functions         Description       bool mysqli_report     ( int $flags    )        mysqli_report() is a powerful function to improve your queries    and code during development and testing phase. Depending on the flags it reports    errors from mysqli function calls or queries which don&#039;t use an index (or use a bad    index).            Parameters                    flags                               Supported flags                                          Name            Description                                                        MYSQLI_REPORT_OFF            Turns reporting off                                   MYSQLI_REPORT_ERROR            Report errors from mysqli function calls                                   MYSQLI_REPORT_STRICT                         Throw mysqli_sql_exception for errors             instead of warnings                                               MYSQLI_REPORT_INDEX            Report if no index or bad index was used in a query                                   MYSQLI_REPORT_ALL            Set all options (report all)                                                                             Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.2.15 & 5.3.4                 Changing the reporting mode is now be per-request, rather than per-process.                                            Examples            Object oriented style       <?php\/*\u00a0activate\u00a0reporting\u00a0*\/mysqli_report(MYSQLI_REPORT_ALL);$mysqli\u00a0=\u00a0new\u00a0mysqli(\"localhost\",\u00a0\"my_user\",\u00a0\"my_password\",\u00a0\"world\");\/*\u00a0check\u00a0connection\u00a0*\/if\u00a0(mysqli_connect_errno())\u00a0{\u00a0\u00a0\u00a0\u00a0printf(\"Connect\u00a0failed:\u00a0%s\\n\",\u00a0mysqli_connect_error());\u00a0\u00a0\u00a0\u00a0exit();}\/*\u00a0this\u00a0query\u00a0should\u00a0report\u00a0an\u00a0error\u00a0*\/$result\u00a0=\u00a0$mysqli->query(\"SELECT\u00a0Name\u00a0FROM\u00a0Nonexistingtable\u00a0WHERE\u00a0population\u00a0>\u00a050000\");\/*\u00a0this\u00a0query\u00a0should\u00a0report\u00a0a\u00a0bad\u00a0index\u00a0*\/$result\u00a0=\u00a0$mysqli->query(\"SELECT\u00a0Name\u00a0FROM\u00a0City\u00a0WHERE\u00a0population\u00a0>\u00a050000\");$result->close();$mysqli->close();?>                        See Also            MySQLi_Driver::$report_mode     mysqli_debug() - Performs debugging operations     mysqli_dump_debug_info() - Dump debugging information into the log"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-send-long-data.php","title":"mysqli_send_long_data","description":"mysqli_send_long_data   (PHP 5)mysqli_send_long_data \u2014 Alias for mysqli_stmt_send_long_data()         Description       This function is an alias of mysqli_stmt_send_long_data().            Notes   Note:          mysqli_send_long_data() is deprecated and will be removed.                See Also            mysqli_stmt_send_long_data() - Send data in blocks"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-rpl-query-type.php","title":"mysqli_rpl_query_typemysqli::rpl_query_type","description":"mysqli_rpl_query_type   mysqli::rpl_query_type   (PHP 5)mysqli_rpl_query_type -- mysqli::rpl_query_type \u2014 Returns RPL query type         Description   Object oriented style                int mysqli::rpl_query_type      ( string $query     )       Procedural style       int mysqli_rpl_query_type     ( mysqli $link    , string $query    )         Returns MYSQLI_RPL_MASTER,    MYSQLI_RPL_SLAVE or    MYSQLI_RPL_ADMIN depending on a query type.    INSERT, UPDATE and similar are    master queries, SELECT is    slave, and FLUSH,    REPAIR and similar are admin.       WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-send-query.php","title":"mysqli_send_querymysqli::send_query","description":"mysqli_send_query   mysqli::send_query   (PHP 5)mysqli_send_query -- mysqli::send_query \u2014 Send the query and return         Description   Object oriented style                bool mysqli::send_query      ( string $query     )       Procedural style       bool mysqli_send_query     ( mysqli $link    , string $query    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-set-opt.php","title":"mysqli_set_opt","description":"mysqli_set_opt   (PHP 5)mysqli_set_opt \u2014 Alias of mysqli_options()         Description       This function is an alias of mysqli_options()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-rpl-probe.php","title":"mysqli_rpl_probe","description":"mysqli_rpl_probe   (PHP 5)mysqli_rpl_probe \u2014 RPL probe         Description       bool mysqli_rpl_probe     ( mysqli $link    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-slave-query.php","title":"mysqli_slave_query","description":"mysqli_slave_query   (PHP 5)mysqli_slave_query \u2014 Force execution of a query on a slave in a master\/slave setup         Description       bool mysqli_slave_query     ( mysqli $link    , string $query    )     WarningThis function is currently not documented; only its argument list is available.    WarningThis function has been DEPRECATED and REMOVED as of PHP 5.3.0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-cipher-iv-length.php","title":"openssl_cipher_iv_length","description":"openssl_cipher_iv_length   (PHP 5 >= PHP 5.3.3)openssl_cipher_iv_length \u2014 Gets the cipher iv length         Description       int openssl_cipher_iv_length     ( string $method    )        Gets the cipher iv length.            Parameters              method                   The method.                              Return Values       Returns the cipher length on success, or FALSE on failure.             Errors\/Exceptions       Emits an E_WARNING level error when the cipher algorithm    is unknown.            Examples       Example #1 openssl_cipher_iv_length() example      <?php$method\u00a0=\u00a0'AES-128-CBC';$ivlen\u00a0=\u00a0openssl_cipher_iv_length($method);echo\u00a0$ivlen;?>           The above example will output something similar to:      16"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-export-to-file.php","title":"openssl_csr_export_to_file","description":"openssl_csr_export_to_file   (PHP 4 >= 4.2.0, PHP 5)openssl_csr_export_to_file \u2014 Exports a CSR to a file          Description       bool openssl_csr_export_to_file     ( resource $csr    , string $outfilename    [, bool $notext = true   ] )        openssl_csr_export_to_file() takes the Certificate    Signing Request represented by csr and saves it    as ascii-armoured text into the file named by outfilename.            Parameters                    csr                                              outfilename                      Path to the output file.                                notext                The optional parameter notext affects  the verbosity of the output; if it is FALSE, then additional human-readable  information is included in the output. The default value of  notext is TRUE.                               Return Values       Returns TRUE on success or FALSE on failure.            See Also            openssl_csr_export() - Exports a CSR as a string     openssl_csr_new() - Generates a CSR     openssl_csr_sign() - Sign a CSR with another certificate (or itself) and generate a certificate"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-export.php","title":"openssl_csr_export","description":"openssl_csr_export   (PHP 4 >= 4.2.0, PHP 5)openssl_csr_export \u2014 Exports a CSR as a string          Description       bool openssl_csr_export     ( resource $csr    , string &$out    [, bool $notext = true   ] )        openssl_csr_export() takes the Certificate Signing    Request represented by csr and stores it as    ascii-armoured text into out, which is passed by    reference.            Parameters                    csr                                              out                                              notext                The optional parameter notext affects  the verbosity of the output; if it is FALSE, then additional human-readable  information is included in the output. The default value of  notext is TRUE.                               Return Values       Returns TRUE on success or FALSE on failure.            See Also            openssl_csr_export_to_file() - Exports a CSR to a file     openssl_csr_new() - Generates a CSR     openssl_csr_sign() - Sign a CSR with another certificate (or itself) and generate a certificate"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-get-public-key.php","title":"openssl_csr_get_public_key","description":"openssl_csr_get_public_key   (PHP 5 >= 5.2.0)openssl_csr_get_public_key \u2014 Returns the public key of a CERT         Description       resource openssl_csr_get_public_key     ( mixed $csr    [, bool $use_shortnames = true   ] )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-dh-compute-key.php","title":"openssl_dh_compute_key","description":"openssl_dh_compute_key   (No version information available, might only be in SVN)openssl_dh_compute_key \u2014 Computes shared secret for public value of remote DH key and local DH key         Description       string openssl_dh_compute_key     ( string $pub_key    , resource $dh_key    )     WarningThis function is currently not documented; only its argument list is available.           Parameters                    pub_key                      Public key                                dh_key                      DH key                                     Return Values       Returns computed key on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-decrypt.php","title":"openssl_decrypt","description":"openssl_decrypt   (PHP 5 >= 5.3.0)openssl_decrypt \u2014 Decrypts data         Description       string openssl_decrypt     ( string $data    , string $method    , string $password    [, bool $raw_input = false    [, string $iv = \"\"   ]] )        Takes a raw or base64 encoded string and decrypts it using a given method and key.       WarningThis function is currently not documented; only its argument list is available.           Parameters                    data                      The data.                                method                      The cipher method.                                password                      The password.                                raw_input                      Setting to TRUE will take a raw encoded string,        otherwise a base64 string is assumed for the        data parameter.                                iv                      A non-NULL Initialization Vector.                                      Return Values       The decrypted string on success or FALSE on failure.            Errors\/Exceptions       Emits an E_WARNING level error if an unknown cipher algorithm    is passed via the method parameter.          Emits an E_WARNING level error if an empty value is passed    in via the iv parameter.            Changelog                         Version       Description                               5.3.3               The iv parameter was added.                                    See Also            openssl_encrypt() - Encrypts data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-get-subject.php","title":"openssl_csr_get_subject","description":"openssl_csr_get_subject   (PHP 5 >= 5.2.0)openssl_csr_get_subject \u2014 Returns the subject of a CERT         Description       array openssl_csr_get_subject     ( mixed $csr    [, bool $use_shortnames = true   ] )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-digest.php","title":"openssl_digest","description":"openssl_digest   (PHP 5 >= 5.3.0)openssl_digest \u2014 Computes a digest         Description       string openssl_digest     ( string $data    , string $method    [, bool $raw_output = false   ] )        Computes a digest hash value for the given data using a given method,    and returns a raw or binhex encoded string.       WarningThis function is currently not documented; only its argument list is available.           Parameters                    data                      The data.                                method                      The digest method.                                raw_output                      Setting to TRUE will return as raw output data, otherwise the return        value is binhex encoded.                                     Return Values       Returns the digested hash value on success or FALSE on failure.            Errors\/Exceptions       Emits an E_WARNING level error if an unknown signature algorithm    is passed via the method parameter.            See Also            openssl_get_cipher_methods() - Gets available cipher methods"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-new.php","title":"openssl_csr_new","description":"openssl_csr_new   (PHP 4 >= 4.2.0, PHP 5)openssl_csr_new \u2014 Generates a CSR          Description       mixed openssl_csr_new     ( array $dn    , resource &$privkey    [, array $configargs    [, array $extraattribs   ]] )        openssl_csr_new() generates a new CSR (Certificate Signing Request)    based on the information provided by dn, which represents the    Distinguished Name to be used in the certificate.      Note:      You need to have a valid openssl.cnf installed for   this function to operate correctly.   See the notes under the installation   section for more information.            Parameters                    dn                      The Distinguished Name to be used in the certificate.                                privkey                      privkey should be set to a private key that was        previously generated by openssl_pkey_new() (or        otherwise obtained from the other openssl_pkey family of functions).        The corresponding public portion of the key will be used to sign the        CSR.                                configargs                      By default, the information in your system openssl.conf        is used to initialize the request; you can specify a configuration file        section by setting the config_section_section key of        configargs.  You can also specify an alternative        openssl configuration file by setting the value of the        config key to the path of the file you want to use.        The following keys, if present in configargs        behave as their equivalents in the openssl.conf, as        listed in the table below.                 Configuration overrides                                          configargs key            type            openssl.conf equivalent            description                                                        digest_alg            string            default_md            Selects which digest method to use                                   x509_extensions            string            x509_extensions            Selects which extensions should be used when creating an x509            certificate                                   req_extensions            string            req_extensions            Selects which extensions should be used when creating a CSR                                   private_key_bits            integer            default_bits            Specifies how many bits should be used to generate a private             key                                   private_key_type            integer            none            Specifies the type of private key to create.  This can be one             of OPENSSL_KEYTYPE_DSA,             OPENSSL_KEYTYPE_DH or             OPENSSL_KEYTYPE_RSA.             The default value is OPENSSL_KEYTYPE_RSA which             is currently the only supported key type.                                               encrypt_key            boolean            encrypt_key            Should an exported key (with passphrase) be encrypted?                                   encrypt_key_cipher            integer            none                         One of cipher constants.                                                                                    extraattribs                      extraattribs is used to specify additional        configuration options for the CSR.  Both dn and        extraattribs are associative arrays whose keys are        converted to OIDs and applied to the relevant part of the request.                                     Return Values       Returns the CSR.            Examples            Example #1 Creating a self-signed-certificate       <?php\/\/\u00a0Fill\u00a0in\u00a0data\u00a0for\u00a0the\u00a0distinguished\u00a0name\u00a0to\u00a0be\u00a0used\u00a0in\u00a0the\u00a0cert\/\/\u00a0You\u00a0must\u00a0change\u00a0the\u00a0values\u00a0of\u00a0these\u00a0keys\u00a0to\u00a0match\u00a0your\u00a0name\u00a0and\/\/\u00a0company,\u00a0or\u00a0more\u00a0precisely,\u00a0the\u00a0name\u00a0and\u00a0company\u00a0of\u00a0the\u00a0person\/site\/\/\u00a0that\u00a0you\u00a0are\u00a0generating\u00a0the\u00a0certificate\u00a0for.\/\/\u00a0For\u00a0SSL\u00a0certificates,\u00a0the\u00a0commonName\u00a0is\u00a0usually\u00a0the\u00a0domain\u00a0name\u00a0of\/\/\u00a0that\u00a0will\u00a0be\u00a0using\u00a0the\u00a0certificate,\u00a0but\u00a0for\u00a0S\/MIME\u00a0certificates,\/\/\u00a0the\u00a0commonName\u00a0will\u00a0be\u00a0the\u00a0name\u00a0of\u00a0the\u00a0individual\u00a0who\u00a0will\u00a0use\u00a0the\/\/\u00a0certificate.$dn\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\"countryName\"\u00a0=>\u00a0\"UK\",\u00a0\u00a0\u00a0\u00a0\"stateOrProvinceName\"\u00a0=>\u00a0\"Somerset\",\u00a0\u00a0\u00a0\u00a0\"localityName\"\u00a0=>\u00a0\"Glastonbury\",\u00a0\u00a0\u00a0\u00a0\"organizationName\"\u00a0=>\u00a0\"The\u00a0Brain\u00a0Room\u00a0Limited\",\u00a0\u00a0\u00a0\u00a0\"organizationalUnitName\"\u00a0=>\u00a0\"PHP\u00a0Documentation\u00a0Team\",\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"Wez\u00a0Furlong\",\u00a0\u00a0\u00a0\u00a0\"emailAddress\"\u00a0=>\u00a0\"wez@example.com\");\/\/\u00a0Generate\u00a0a\u00a0new\u00a0private\u00a0(and\u00a0public)\u00a0key\u00a0pair$privkey\u00a0=\u00a0openssl_pkey_new();\/\/\u00a0Generate\u00a0a\u00a0certificate\u00a0signing\u00a0request$csr\u00a0=\u00a0openssl_csr_new($dn,\u00a0$privkey);\/\/\u00a0You\u00a0will\u00a0usually\u00a0want\u00a0to\u00a0create\u00a0a\u00a0self-signed\u00a0certificate\u00a0at\u00a0this\/\/\u00a0point\u00a0until\u00a0your\u00a0CA\u00a0fulfills\u00a0your\u00a0request.\/\/\u00a0This\u00a0creates\u00a0a\u00a0self-signed\u00a0cert\u00a0that\u00a0is\u00a0valid\u00a0for\u00a0365\u00a0days$sscert\u00a0=\u00a0openssl_csr_sign($csr,\u00a0null,\u00a0$privkey,\u00a0365);\/\/\u00a0Now\u00a0you\u00a0will\u00a0want\u00a0to\u00a0preserve\u00a0your\u00a0private\u00a0key,\u00a0CSR\u00a0and\u00a0self-signed\/\/\u00a0cert\u00a0so\u00a0that\u00a0they\u00a0can\u00a0be\u00a0installed\u00a0into\u00a0your\u00a0web\u00a0server,\u00a0mail\u00a0server\/\/\u00a0or\u00a0mail\u00a0client\u00a0(depending\u00a0on\u00a0the\u00a0intended\u00a0use\u00a0of\u00a0the\u00a0certificate).\/\/\u00a0This\u00a0example\u00a0shows\u00a0how\u00a0to\u00a0get\u00a0those\u00a0things\u00a0into\u00a0variables,\u00a0but\u00a0you\/\/\u00a0can\u00a0also\u00a0store\u00a0them\u00a0directly\u00a0into\u00a0files.\/\/\u00a0Typically,\u00a0you\u00a0will\u00a0send\u00a0the\u00a0CSR\u00a0on\u00a0to\u00a0your\u00a0CA\u00a0who\u00a0will\u00a0then\u00a0issue\/\/\u00a0you\u00a0with\u00a0the\u00a0\"real\"\u00a0certificate.openssl_csr_export($csr,\u00a0$csrout)\u00a0and\u00a0var_dump($csrout);openssl_x509_export($sscert,\u00a0$certout)\u00a0and\u00a0var_dump($certout);openssl_pkey_export($privkey,\u00a0$pkeyout,\u00a0\"mypassword\")\u00a0and\u00a0var_dump($pkeyout);\/\/\u00a0Show\u00a0any\u00a0errors\u00a0that\u00a0occurred\u00a0herewhile\u00a0(($e\u00a0=\u00a0openssl_error_string())\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$e\u00a0.\u00a0\"\\n\";}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-error-string.php","title":"openssl_error_string","description":"openssl_error_string   (PHP 4 >= 4.0.6, PHP 5)openssl_error_string \u2014 Return openSSL error message          Description       string openssl_error_string     ( void    )        openssl_error_string() returns the last error from the    openSSL library.  Error messages are queued, so this function should be    called multiple times to collect all of the information. The last error will    be the most recent one.            Return Values       Returns an error message string, or FALSE if there are no more error    messages to return.            Examples            Example #1 openssl_error_string() example       <?php\/\/\u00a0lets\u00a0assume\u00a0you\u00a0just\u00a0called\u00a0an\u00a0openssl\u00a0function\u00a0that\u00a0failedwhile\u00a0($msg\u00a0=\u00a0openssl_error_string())\u00a0\u00a0\u00a0\u00a0echo\u00a0$msg\u00a0.\u00a0\"<br\u00a0\/>\\n\";?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-sign.php","title":"openssl_csr_sign","description":"openssl_csr_sign   (PHP 4 >= 4.2.0, PHP 5)openssl_csr_sign \u2014 Sign a CSR with another certificate (or itself) and generate a certificate          Description       resource openssl_csr_sign     ( mixed $csr    , mixed $cacert    , mixed $priv_key    , int $days    [, array $configargs    [, int $serial = 0   ]] )        openssl_csr_sign() generates an x509 certificate    resource from the given CSR.      Note:      You need to have a valid openssl.cnf installed for   this function to operate correctly.   See the notes under the installation   section for more information.            Parameters                    csr                      A CSR previously generated by openssl_csr_new().        It can also be the path to a PEM encoded CSR when specified as        file:\/\/path\/to\/csr or an exported string generated        by openssl_csr_export().                                cacert                      The generated certificate will be signed by cacert.        If cacert is NULL, the generated certificate        will be a self-signed certificate.                                priv_key                      priv_key is the private key that corresponds to        cacert.                                days                      days specifies the length of time for which the        generated certificate will be valid, in days.                                configargs                      You can finetune the CSR signing by configargs.        See openssl_csr_new() for more information about        configargs.                                serial                      An optional the serial number of issued certificate. If not specified        it will default to 0.                                     Return Values       Returns an x509 certificate resource on success, FALSE on failure.            Changelog                                 Version        Description                                    4.3.3                 The serial parameter was added.                                            Examples            Example #1 openssl_csr_sign() example - signing a      CSR (how to implement your own CA)       <?php\/\/\u00a0Let's\u00a0assume\u00a0that\u00a0this\u00a0script\u00a0is\u00a0set\u00a0to\u00a0receive\u00a0a\u00a0CSR\u00a0that\u00a0has\/\/\u00a0been\u00a0pasted\u00a0into\u00a0a\u00a0textarea\u00a0from\u00a0another\u00a0page$csrdata\u00a0=\u00a0$_POST[\"CSR\"];\/\/\u00a0We\u00a0will\u00a0sign\u00a0the\u00a0request\u00a0using\u00a0our\u00a0own\u00a0\"certificate\u00a0authority\"\/\/\u00a0certificate.\u00a0\u00a0You\u00a0can\u00a0use\u00a0any\u00a0certificate\u00a0to\u00a0sign\u00a0another,\u00a0but\/\/\u00a0the\u00a0process\u00a0is\u00a0worthless\u00a0unless\u00a0the\u00a0signing\u00a0certificate\u00a0is\u00a0trusted\/\/\u00a0by\u00a0the\u00a0software\/users\u00a0that\u00a0will\u00a0deal\u00a0with\u00a0the\u00a0newly\u00a0signed\u00a0certificate\/\/\u00a0We\u00a0need\u00a0our\u00a0CA\u00a0cert\u00a0and\u00a0its\u00a0private\u00a0key$cacert\u00a0=\u00a0\"file:\/\/path\/to\/ca.crt\";$privkey\u00a0=\u00a0array(\"file:\/\/path\/to\/ca.key\",\u00a0\"your_ca_key_passphrase\");$usercert\u00a0=\u00a0openssl_csr_sign($csrdata,\u00a0$cacert,\u00a0$privkey,\u00a0365);\/\/\u00a0Now\u00a0display\u00a0the\u00a0generated\u00a0certificate\u00a0so\u00a0that\u00a0the\u00a0user\u00a0can\/\/\u00a0copy\u00a0and\u00a0paste\u00a0it\u00a0into\u00a0their\u00a0local\u00a0configuration\u00a0(such\u00a0as\u00a0a\u00a0file\/\/\u00a0to\u00a0hold\u00a0the\u00a0certificate\u00a0for\u00a0their\u00a0SSL\u00a0server)openssl_x509_export($usercert,\u00a0$certout);echo\u00a0$certout;\/\/\u00a0Show\u00a0any\u00a0errors\u00a0that\u00a0occurred\u00a0herewhile\u00a0(($e\u00a0=\u00a0openssl_error_string())\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$e\u00a0.\u00a0\"\\n\";}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-encrypt.php","title":"openssl_encrypt","description":"openssl_encrypt   (PHP 5 >= 5.3.0)openssl_encrypt \u2014 Encrypts data         Description       string openssl_encrypt     ( string $data    , string $method    , string $password    [, bool $raw_output = false    [, string $iv = \"\"   ]] )        Encrypts given data with given method and key, returns a raw    or base64 encoded string       WarningThis function is currently not documented; only its argument list is available.           Parameters                    data                      The data.                                method                      The cipher method.                                password                      The password.                                raw_output                      Setting to TRUE will return as raw output data, otherwise the return        value is base64 encoded.                                iv                      A non-NULL Initialization Vector.                                     Return Values       Returns the encrypted string on success or FALSE on failure.            Errors\/Exceptions       Emits an E_WARNING level error if an unknown cipher    algorithm is passed in via the method parameter.          Emits an E_WARNING level error if an empty value is passed    in via the iv parameter.            Changelog                         Version       Description                               5.3.3               The iv parameter was added.                                    See Also            openssl_decrypt() - Decrypts data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-free-key.php","title":"openssl_free_key","description":"openssl_free_key   (PHP 4 >= 4.0.4, PHP 5)openssl_free_key \u2014 Free key resource          Description       void openssl_free_key     ( resource $key_identifier    )        openssl_free_key() frees the key associated with    the specified key_identifier from memory.            Parameters                    key_identifier                                                   Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-cipher-methods.php","title":"openssl_get_cipher_methods","description":"openssl_get_cipher_methods   (PHP 5 >= 5.3.0)openssl_get_cipher_methods \u2014 Gets available cipher methods         Description       array openssl_get_cipher_methods     ([ bool $aliases = false   ] )        Gets a list of available cipher methods.             Parameters                    aliases                      Set to TRUE if cipher aliases should be included within the        returned array.                                     Return Values       An array of available cipher methods.            Examples            Example #1 openssl_get_cipher_methods() example           Shows how the available ciphers might look, and also which aliases      might be available.            <?php$ciphers\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0openssl_get_cipher_methods();$ciphers_and_aliases\u00a0=\u00a0openssl_get_cipher_methods(true);$cipher_aliases\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0array_diff($ciphers_and_aliases,\u00a0$ciphers);print_r($ciphers);print_r($cipher_aliases);?>             The above example will output something similar to:       Array (     [0] => AES-128-CBC     [1] => AES-128-CFB     [2] => AES-128-CFB1     [3] => AES-128-CFB8     [4] => AES-128-ECB     [5] => AES-128-OFB     [6] => AES-192-CBC     [7] => AES-192-CFB     [8] => AES-192-CFB1     [9] => AES-192-CFB8     [10] => AES-192-ECB     [11] => AES-192-OFB     [12] => AES-256-CBC     [13] => AES-256-CFB     [14] => AES-256-CFB1     [15] => AES-256-CFB8     [16] => AES-256-ECB     [17] => AES-256-OFB     [18] => BF-CBC     [19] => BF-CFB     [20] => BF-ECB     [21] => BF-OFB     [22] => CAST5-CBC     [23] => CAST5-CFB     [24] => CAST5-ECB     [25] => CAST5-OFB     [26] => DES-CBC     [27] => DES-CFB     [28] => DES-CFB1     [29] => DES-CFB8     [30] => DES-ECB     [31] => DES-EDE     [32] => DES-EDE-CBC     [33] => DES-EDE-CFB     [34] => DES-EDE-OFB     [35] => DES-EDE3     [36] => DES-EDE3-CBC     [37] => DES-EDE3-CFB     [38] => DES-EDE3-OFB     [39] => DES-OFB     [40] => DESX-CBC     [41] => IDEA-CBC     [42] => IDEA-CFB     [43] => IDEA-ECB     [44] => IDEA-OFB     [45] => RC2-40-CBC     [46] => RC2-64-CBC     [47] => RC2-CBC     [48] => RC2-CFB     [49] => RC2-ECB     [50] => RC2-OFB     [51] => RC4     [52] => RC4-40     [53] => aes-128-cbc     [54] => aes-128-cfb     [55] => aes-128-cfb1     [56] => aes-128-cfb8     [57] => aes-128-ecb     [58] => aes-128-ofb     [59] => aes-192-cbc     [60] => aes-192-cfb     [61] => aes-192-cfb1     [62] => aes-192-cfb8     [63] => aes-192-ecb     [64] => aes-192-ofb     [65] => aes-256-cbc     [66] => aes-256-cfb     [67] => aes-256-cfb1     [68] => aes-256-cfb8     [69] => aes-256-ecb     [70] => aes-256-ofb     [71] => bf-cbc     [72] => bf-cfb     [73] => bf-ecb     [74] => bf-ofb     [75] => cast5-cbc     [76] => cast5-cfb     [77] => cast5-ecb     [78] => cast5-ofb     [79] => des-cbc     [80] => des-cfb     [81] => des-cfb1     [82] => des-cfb8     [83] => des-ecb     [84] => des-ede     [85] => des-ede-cbc     [86] => des-ede-cfb     [87] => des-ede-ofb     [88] => des-ede3     [89] => des-ede3-cbc     [90] => des-ede3-cfb     [91] => des-ede3-ofb     [92] => des-ofb     [93] => desx-cbc     [94] => idea-cbc     [95] => idea-cfb     [96] => idea-ecb     [97] => idea-ofb     [98] => rc2-40-cbc     [99] => rc2-64-cbc     [100] => rc2-cbc     [101] => rc2-cfb     [102] => rc2-ecb     [103] => rc2-ofb     [104] => rc4     [105] => rc4-40 ) Array (     [18] => AES128     [19] => AES192     [20] => AES256     [21] => BF     [26] => CAST     [27] => CAST-cbc     [32] => DES     [47] => DES3     [48] => DESX     [50] => IDEA     [55] => RC2     [82] => aes128     [83] => aes192     [84] => aes256     [85] => bf     [90] => blowfish     [91] => cast     [92] => cast-cbc     [97] => des     [112] => des3     [113] => desx     [115] => idea     [120] => rc2 )                       See Also            openssl_get_md_methods() - Gets available digest methods"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-privatekey.php","title":"openssl_get_privatekey","description":"openssl_get_privatekey   (PHP 4 >= 4.0.4, PHP 5)openssl_get_privatekey \u2014 Alias of openssl_pkey_get_private()         Description       This function is an alias of:     openssl_pkey_get_private()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-publickey.php","title":"openssl_get_publickey","description":"openssl_get_publickey    (PHP 4 >= 4.0.4, PHP 5)openssl_get_publickey \u2014 Alias of openssl_pkey_get_public()         Description       This function is an alias of:     openssl_pkey_get_public()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-md-methods.php","title":"openssl_get_md_methods","description":"openssl_get_md_methods   (PHP 5 >= 5.3.0)openssl_get_md_methods \u2014 Gets available digest methods         Description       array openssl_get_md_methods     ([ bool $aliases = false   ] )        Gets a list of available digest methods.             Parameters                    aliases                      Set to TRUE if digest aliases should be included within the        returned array.                                     Return Values       An array of available digest methods.            Examples            Example #1 openssl_get_md_methods() example           Shows how the available digests might look, and also which aliases      might be available.            <?php$digests\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0openssl_get_md_methods();$digests_and_aliases\u00a0=\u00a0openssl_get_md_methods(true);$digest_aliases\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0array_diff($digests_and_aliases,\u00a0$digests);print_r($digests);print_r($digest_aliases);?>             The above example will output something similar to:       Array (     [0] => DSA     [1] => DSA-SHA     [2] => MD2     [3] => MD4     [4] => MD5     [5] => RIPEMD160     [6] => SHA     [7] => SHA1     [8] => SHA224     [9] => SHA256     [10] => SHA384     [11] => SHA512     [12] => dsaEncryption     [13] => dsaWithSHA     [14] => ecdsa-with-SHA1     [15] => md2     [16] => md4     [17] => md5     [18] => ripemd160     [19] => sha     [20] => sha1     [21] => sha224     [22] => sha256     [23] => sha384     [24] => sha512 ) Array (     [2] => DSA-SHA1     [3] => DSA-SHA1-old     [4] => DSS1     [9] => RSA-MD2     [10] => RSA-MD4     [11] => RSA-MD5     [12] => RSA-RIPEMD160     [13] => RSA-SHA     [14] => RSA-SHA1     [15] => RSA-SHA1-2     [16] => RSA-SHA224     [17] => RSA-SHA256     [18] => RSA-SHA384     [19] => RSA-SHA512     [28] => dsaWithSHA1     [29] => dss1     [32] => md2WithRSAEncryption     [34] => md4WithRSAEncryption     [36] => md5WithRSAEncryption     [37] => ripemd     [39] => ripemd160WithRSA     [40] => rmd160     [43] => sha1WithRSAEncryption     [45] => sha224WithRSAEncryption     [47] => sha256WithRSAEncryption     [49] => sha384WithRSAEncryption     [51] => sha512WithRSAEncryption     [52] => shaWithRSAEncryption     [53] => ssl2-md5     [54] => ssl3-md5     [55] => ssl3-sha1 )                      See Also            openssl_digest() - Computes a digest     openssl_get_cipher_methods() - Gets available cipher methods"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-open.php","title":"openssl_open","description":"openssl_open   (PHP 4 >= 4.0.4, PHP 5)openssl_open \u2014 Open sealed data          Description       bool openssl_open     ( string $sealed_data    , string &$open_data    , string $env_key    , mixed $priv_key_id    [, string $method   ] )        openssl_open() opens (decrypts)    sealed_data using the private key associated with    the key identifier priv_key_id and the envelope key    env_key, and fills    open_data with the decrypted data.    The envelope key is generated when the    data are sealed and can only be used by one specific private key. See    openssl_seal() for more information.            Parameters                    sealed_data                                              open_data                      If the call is successful the opened data is returned in this        parameter.                                env_key                                              priv_key_id                                                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 openssl_open() example       <?php\/\/\u00a0$sealed\u00a0and\u00a0$env_key\u00a0are\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0sealed\u00a0data\/\/\u00a0and\u00a0our\u00a0envelope\u00a0key,\u00a0both\u00a0given\u00a0to\u00a0us\u00a0by\u00a0the\u00a0sealer.\/\/\u00a0fetch\u00a0private\u00a0key\u00a0from\u00a0file\u00a0and\u00a0ready\u00a0it$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/key.pem\",\u00a0\"r\");$priv_key\u00a0=\u00a0fread($fp,\u00a08192);fclose($fp);$pkeyid\u00a0=\u00a0openssl_get_privatekey($priv_key);\/\/\u00a0decrypt\u00a0the\u00a0data\u00a0and\u00a0store\u00a0it\u00a0in\u00a0$openif\u00a0(openssl_open($sealed,\u00a0$open,\u00a0$env_key,\u00a0$pkeyid))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"here\u00a0is\u00a0the\u00a0opened\u00a0data:\u00a0\",\u00a0$open;}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0open\u00a0data\";}\/\/\u00a0free\u00a0the\u00a0private\u00a0key\u00a0from\u00a0memoryopenssl_free_key($pkeyid);?>                        See Also            openssl_seal() - Seal (encrypt) data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs12-export-to-file.php","title":"openssl_pkcs12_export_to_file","description":"openssl_pkcs12_export_to_file   (PHP 5 >= 5.2.2)openssl_pkcs12_export_to_file \u2014 Exports a PKCS#12 Compatible Certificate Store File          Description       bool openssl_pkcs12_export_to_file     ( mixed $x509    , string $filename    , mixed $priv_key    , string $pass    [, array $args   ] )        openssl_pkcs12_export_to_file() stores    x509 into a file named by    filename in a PKCS#12 file format.            Parameters                x509          See Key\/Certificate parameters for a list of valid values.                    filename                      Path to the output file.                                priv_key                     Private key component of PKCS#12 file.                                pass                     Encryption password for unlocking the PKCS#12 file.                                args                                                   Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs12-export.php","title":"openssl_pkcs12_export","description":"openssl_pkcs12_export   (PHP 5 >= 5.2.2)openssl_pkcs12_export \u2014 Exports a PKCS#12 Compatible Certificate Store File to variable.          Description       bool openssl_pkcs12_export     ( mixed $x509    , string &$out    , mixed $priv_key    , string $pass    [, array $args   ] )        openssl_pkcs12_export() stores    x509 into a string named by    out in a PKCS#12 file format.            Parameters                x509          See Key\/Certificate parameters for a list of valid values.                    out                      On success, this will hold the PKCS#12.                                priv_key                     Private key component of PKCS#12 file.                                pass                     Encryption password for unlocking the PKCS#12 file.                                args                                                   Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs12-read.php","title":"openssl_pkcs12_read","description":"openssl_pkcs12_read   (PHP 5 >= 5.2.2)openssl_pkcs12_read \u2014 Parse a PKCS#12 Certificate Store into an array          Description       bool openssl_pkcs12_read     ( string $pkcs12    , array &$certs    , string $pass    )        openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by    pkcs12 into a array named    certs.            Parameters                    pkcs12                                              certs                      On success, this will hold the Certificate Store Data.                                pass                     Encryption password for unlocking the PKCS#12 file.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-decrypt.php","title":"openssl_pkcs7_decrypt","description":"openssl_pkcs7_decrypt   (PHP 4 >= 4.0.6, PHP 5)openssl_pkcs7_decrypt \u2014 Decrypts an S\/MIME encrypted message          Description       bool openssl_pkcs7_decrypt     ( string $infilename    , string $outfilename    , mixed $recipcert    [, mixed $recipkey   ] )        Decrypts the S\/MIME encrypted message contained in the file specified by    infilename using the certificate and its    associated private key specified by recipcert and    recipkey.            Parameters                    infilename                                              outfilename                      The decrypted message is written to the file specified by        outfilename.                                recipcert                                              recipkey                                                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 openssl_pkcs7_decrypt() example       <?php\/\/\u00a0$cert\u00a0and\u00a0$key\u00a0are\u00a0assumed\u00a0to\u00a0contain\u00a0your\u00a0personal\u00a0certificate\u00a0and\u00a0private\/\/\u00a0key\u00a0pair,\u00a0and\u00a0that\u00a0you\u00a0are\u00a0the\u00a0recipient\u00a0of\u00a0an\u00a0S\/MIME\u00a0message$infilename\u00a0=\u00a0\"encrypted.msg\";\u00a0\u00a0\/\/\u00a0this\u00a0file\u00a0holds\u00a0your\u00a0encrypted\u00a0message$outfilename\u00a0=\u00a0\"decrypted.msg\";\u00a0\/\/\u00a0make\u00a0sure\u00a0you\u00a0can\u00a0write\u00a0to\u00a0this\u00a0fileif\u00a0(openssl_pkcs7_decrypt($infilename,\u00a0$outfilename,\u00a0$cert,\u00a0$key))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"decrypted!\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0decrypt!\";}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-verify.php","title":"openssl_pkcs7_verify","description":"openssl_pkcs7_verify   (PHP 4 >= 4.0.6, PHP 5)openssl_pkcs7_verify \u2014 Verifies the signature of an S\/MIME signed message          Description       mixed openssl_pkcs7_verify     ( string $filename    , int $flags    [, string $outfilename    [, array $cainfo    [, string $extracerts    [, string $content   ]]]] )        openssl_pkcs7_verify() reads the S\/MIME message    contained in the given file and examines the digital signature.            Parameters                    filename                      Path to the message.                                flags                      flags can be used to affect how the signature is        verified - see PKCS7 constants        for more information.                                outfilename                      If the outfilename is specified, it should be a        string holding the name of a file into which the certificates of the        persons that signed the messages will be stored in PEM format.                                cainfo                      If the cainfo is specified, it should hold        information about the trusted CA certificates to use in the verification        process - see certificate        verification for more information about this parameter.                                extracerts                      If the extracerts is specified, it is the filename        of a file containing a bunch of certificates to use as untrusted CAs.                                content                      You can specify a filename with content that will        be filled with the verified data, but with the signature information        stripped.                                     Return Values       Returns TRUE if the signature is verified, FALSE if it is not correct    (the message has been tampered with, or the signing certificate is invalid),    or -1 on error.            Changelog                                 Version        Description                                    5.1.0                 The content parameter was added.                                            Notes   Note:          As specified in RFC 2045, lines may not be longer than 76 characters      in the filename parameter."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-export-to-file.php","title":"openssl_pkey_export_to_file","description":"openssl_pkey_export_to_file   (PHP 4 >= 4.2.0, PHP 5)openssl_pkey_export_to_file \u2014 Gets an exportable representation of a key into a file           Description       bool openssl_pkey_export_to_file     ( mixed $key    , string $outfilename    [, string $passphrase    [, array $configargs   ]] )        openssl_pkey_export_to_file() saves an ascii-armoured    (PEM encoded) rendition of key into the file named    by outfilename.        Note:      You need to have a valid openssl.cnf installed for   this function to operate correctly.   See the notes under the installation   section for more information.            Parameters                    key                                              outfilename                      Path to the output file.                                passphrase                      The key can be optionally protected by a        passphrase.                                configargs                      configargs can be used to fine-tune the export        process by specifying and\/or overriding options for the openssl        configuration file. See openssl_csr_new() for more        information about configargs.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-sign.php","title":"openssl_pkcs7_sign","description":"openssl_pkcs7_sign   (PHP 4 >= 4.0.6, PHP 5)openssl_pkcs7_sign \u2014 Sign an S\/MIME message          Description       bool openssl_pkcs7_sign     ( string $infilename    , string $outfilename    , mixed $signcert    , mixed $privkey    , array $headers    [, int $flags = PKCS7_DETACHED    [, string $extracerts   ]] )        openssl_pkcs7_sign() takes the contents of the file    named infilename and signs them using the    certificate and its matching private key specified by    signcert and privkey    parameters.            Parameters                    infilename                                              outfilename                                              signcert                                              privkey                                              headers                      headers is an array of headers that        will be prepended to the data after it has been signed (see        openssl_pkcs7_encrypt() for more information about        the format of this parameter).                                flags                      flags can be used to alter the output - see PKCS7 constants.                                extracerts                      extracerts specifies the name of a file containing        a bunch of extra certificates to include in the signature which can for        example be used to help the recipient to verify the certificate that you used.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 openssl_pkcs7_sign() example       <?php\/\/\u00a0the\u00a0message\u00a0you\u00a0want\u00a0to\u00a0sign\u00a0so\u00a0that\u00a0recipient\u00a0can\u00a0be\u00a0sure\u00a0it\u00a0was\u00a0you\u00a0that\/\/\u00a0sent\u00a0it$data\u00a0=\u00a0<<<EODYou\u00a0have\u00a0my\u00a0authorization\u00a0to\u00a0spend\u00a0$10,000\u00a0on\u00a0dinner\u00a0expenses.The\u00a0CEOEOD;\/\/\u00a0save\u00a0message\u00a0to\u00a0file$fp\u00a0=\u00a0fopen(\"msg.txt\",\u00a0\"w\");fwrite($fp,\u00a0$data);fclose($fp);\/\/\u00a0encrypt\u00a0itif\u00a0(openssl_pkcs7_sign(\"msg.txt\",\u00a0\"signed.txt\",\u00a0\"mycert.pem\",\u00a0\u00a0\u00a0\u00a0array(\"file:\/\/mycert.pem\",\u00a0\"mypassphrase\"),\u00a0\u00a0\u00a0\u00a0array(\"To\"\u00a0=>\u00a0\"joes@example.com\",\u00a0\/\/\u00a0keyed\u00a0syntax\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"From:\u00a0HQ\u00a0<ceo@example.com>\",\u00a0\/\/\u00a0indexed\u00a0syntax\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Subject\"\u00a0=>\u00a0\"Eyes\u00a0only\")\u00a0\u00a0\u00a0\u00a0))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0message\u00a0signed\u00a0-\u00a0send\u00a0it!\u00a0\u00a0\u00a0\u00a0exec(ini_get(\"sendmail_path\")\u00a0.\u00a0\"\u00a0<\u00a0signed.txt\");}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-free.php","title":"openssl_pkey_free","description":"openssl_pkey_free   (PHP 4 >= 4.2.0, PHP 5)openssl_pkey_free \u2014 Frees a private key          Description       void openssl_pkey_free     ( resource $key    )        This function frees a private key created by    openssl_pkey_new().            Parameters                    key                      Resource holding the key.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-get-details.php","title":"openssl_pkey_get_details","description":"openssl_pkey_get_details   (PHP 5 >= 5.2.0)openssl_pkey_get_details \u2014 Returns an array with the key details         Description       array openssl_pkey_get_details     ( resource $key    )        This function returns the key details (bits, key, type).            Parameters                    key                      Resource holding the key.                                     Return Values       Returns an array with the key details in success or FALSE in failure.    Returned array has indexes bits (number of bits),    key (string representation of the public key) and    type (type of the key which is one of    OPENSSL_KEYTYPE_RSA,    OPENSSL_KEYTYPE_DSA,    OPENSSL_KEYTYPE_DH,    OPENSSL_KEYTYPE_EC or -1 meaning unknown).          Depending on the key type used, additional details may be returned. Note that     some elements may not always be available.                     OPENSSL_KEYTYPE_RSA, an additional array key named \"rsa\",       containing the key data is returned.                                             Key          Description                                              \"n\"          \u00a0                             \"e\"          \u00a0                             \"d\"          \u00a0                             \"p\"          \u00a0                             \"q\"          \u00a0                             \"dmp1\"          \u00a0                             \"dmq1\"          \u00a0                             \"iqmp\"          \u00a0                                                   OPENSSL_KEYTYPE_DSA, an additional array key named \"dsa\",       containing the key data is returned.                                             Key          Description                                              \"p\"          \u00a0                             \"q\"          \u00a0                             \"g\"          \u00a0                             \"priv_key\"          \u00a0                             \"pub_key\"          \u00a0                                                   OPENSSL_KEYTYPE_DH, an additional array key named \"dh\",       containing the key data is returned.                                             Key          Description                                              \"p\"          \u00a0                             \"g\"          \u00a0                             \"priv_key\"          \u00a0                             \"pub_key\"          \u00a0"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-export.php","title":"openssl_pkey_export","description":"openssl_pkey_export   (PHP 4 >= 4.2.0, PHP 5)openssl_pkey_export \u2014 Gets an exportable representation of a key into a string          Description       bool openssl_pkey_export     ( mixed $key    , string &$out    [, string $passphrase    [, array $configargs   ]] )        openssl_pkey_export() exports    key as a PEM encoded string and stores it into    out (which is passed by reference).      Note:      You need to have a valid openssl.cnf installed for   this function to operate correctly.   See the notes under the installation   section for more information.            Parameters                    key                                              out                                              passphrase                      The key is optionally protected by passphrase.                                configargs                      configargs can be used to fine-tune the export        process by specifying and\/or overriding options for the openssl        configuration file.  See openssl_csr_new() for more        information about configargs.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-get-private.php","title":"openssl_pkey_get_private","description":"openssl_pkey_get_private   (PHP 4 >= 4.2.0, PHP 5)openssl_pkey_get_private \u2014 Get a private key          Description       resource openssl_pkey_get_private     ( mixed $key    [, string $passphrase = \"\"   ] )        openssl_get_privatekey() parses    key and prepares it for use by other functions.            Parameters                    key                      key can be one of the following:                 a string having the format           file:\/\/path\/to\/file.pem. The named file must           contain a PEM encoded certificate\/private key (it may contain both).                            A PEM formatted private key.                                        passphrase                      The optional parameter passphrase must be used        if the specified key is encrypted (protected by a passphrase).                                     Return Values       Returns a positive key resource identifier on success, or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-get-public.php","title":"openssl_pkey_get_public","description":"openssl_pkey_get_public   (PHP 4 >= 4.2.0, PHP 5)openssl_pkey_get_public \u2014 Extract public key from certificate and prepare it for use          Description       resource openssl_pkey_get_public     ( mixed $certificate    )        openssl_get_publickey() extracts the public key from    certificate and prepares it for use by other    functions.            Parameters                    certificate                      certificate can be one of the following:                 an X.509 certificate resource         a string having the format           file:\/\/path\/to\/file.pem. The named file must           contain a PEM encoded certificate\/private key (it may contain both).                            A PEM formatted private key.                                             Return Values       Returns a positive key resource identifier on success, or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-new.php","title":"openssl_pkey_new","description":"openssl_pkey_new   (PHP 4 >= 4.2.0, PHP 5)openssl_pkey_new \u2014 Generates a new private key           Description       resource openssl_pkey_new     ([ array $configargs   ] )        openssl_pkey_new() generates a new private and public    key pair.  The public component of the key can be obtained using    openssl_pkey_get_public().      Note:      You need to have a valid openssl.cnf installed for   this function to operate correctly.   See the notes under the installation   section for more information.            Parameters                    configargs                      You can finetune the key generation (such as specifying the number of        bits) using configargs.  See        openssl_csr_new() for more information about        configargs.                                     Return Values       Returns a resource identifier for the pkey on success, or FALSE on    error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-private-decrypt.php","title":"openssl_private_decrypt","description":"openssl_private_decrypt   (PHP 4 >= 4.0.6, PHP 5)openssl_private_decrypt \u2014 Decrypts data with private key           Description       bool openssl_private_decrypt     ( string $data    , string &$decrypted    , mixed $key    [, int $padding = OPENSSL_PKCS1_PADDING   ] )        openssl_private_decrypt() decrypts    data that was previous encrypted via    openssl_public_encrypt() and stores the result into    decrypted.           You can use this function e.g. to decrypt data which were supposed only to    you.            Parameters                    data                                              decrypted                                              key                      key must be the private key corresponding that        was used to encrypt the data.                                  padding                      padding can be one of        OPENSSL_PKCS1_PADDING,        OPENSSL_SSLV23_PADDING,        OPENSSL_PKCS1_OAEP_PADDING,        OPENSSL_NO_PADDING.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            openssl_public_encrypt() - Encrypts data with public key     openssl_public_decrypt() - Decrypts data with public key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-private-encrypt.php","title":"openssl_private_encrypt","description":"openssl_private_encrypt   (PHP 4 >= 4.0.6, PHP 5)openssl_private_encrypt \u2014 Encrypts data with private key           Description       bool openssl_private_encrypt     ( string $data    , string &$crypted    , mixed $key    [, int $padding = OPENSSL_PKCS1_PADDING   ] )        openssl_private_encrypt() encrypts data    with private key and stores the result into    crypted. Encrypted data can be decrypted via    openssl_public_decrypt().           This function can be used e.g. to sign data (or its hash) to prove that it    is not written by someone else.            Parameters                    data                                              crypted                                              key                                              padding                      padding can be one of        OPENSSL_PKCS1_PADDING,        OPENSSL_NO_PADDING.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            openssl_public_encrypt() - Encrypts data with public key     openssl_public_decrypt() - Decrypts data with public key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-encrypt.php","title":"openssl_pkcs7_encrypt","description":"openssl_pkcs7_encrypt   (PHP 4 >= 4.0.6, PHP 5)openssl_pkcs7_encrypt \u2014 Encrypt an S\/MIME message          Description       bool openssl_pkcs7_encrypt     ( string $infile    , string $outfile    , mixed $recipcerts    , array $headers    [, int $flags = 0    [, int $cipherid = OPENSSL_CIPHER_RC2_40   ]] )        openssl_pkcs7_encrypt() takes the contents of the    file named infile and encrypts them using an RC2    40-bit cipher so that they can only be read by the intended recipients    specified by recipcerts.            Parameters                    infile                                              outfile                                              recipcerts                      Either a lone X.509 certificate, or an array of X.509 certificates.                                headers                      headers is an array of headers that        will be prepended to the data after it has been encrypted.                      headers can be either an associative array        keyed by header name, or an indexed array, where each element contains        a single header line.                                flags                      flags can be used to specify options that affect        the encoding process - see PKCS7        constants.                                cipherid                      One of cipher constants.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.0.0                 The cipherid parameter was added.                                            Examples            Example #1 openssl_pkcs7_encrypt() example       <?php\/\/\u00a0the\u00a0message\u00a0you\u00a0want\u00a0to\u00a0encrypt\u00a0and\u00a0send\u00a0to\u00a0your\u00a0secret\u00a0agent\/\/\u00a0in\u00a0the\u00a0field,\u00a0known\u00a0as\u00a0nighthawk.\u00a0\u00a0You\u00a0have\u00a0his\u00a0certificate\/\/\u00a0in\u00a0the\u00a0file\u00a0nighthawk.pem$data\u00a0=\u00a0<<<EODNighthawk,Top\u00a0secret,\u00a0for\u00a0your\u00a0eyes\u00a0only!The\u00a0enemy\u00a0is\u00a0closing\u00a0in!\u00a0Meet\u00a0me\u00a0at\u00a0the\u00a0cafe\u00a0at\u00a08.30amto\u00a0collect\u00a0your\u00a0forged\u00a0passport!HQEOD;\/\/\u00a0load\u00a0key$key\u00a0=\u00a0file_get_contents(\"nighthawk.pem\");\/\/\u00a0save\u00a0message\u00a0to\u00a0file$fp\u00a0=\u00a0fopen(\"msg.txt\",\u00a0\"w\");fwrite($fp,\u00a0$data);fclose($fp);\/\/\u00a0encrypt\u00a0itif\u00a0(openssl_pkcs7_encrypt(\"msg.txt\",\u00a0\"enc.txt\",\u00a0$key,\u00a0\u00a0\u00a0\u00a0array(\"To\"\u00a0=>\u00a0\"nighthawk@example.com\",\u00a0\/\/\u00a0keyed\u00a0syntax\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"From:\u00a0HQ\u00a0<hq@example.com>\",\u00a0\/\/\u00a0indexed\u00a0syntax\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Subject\"\u00a0=>\u00a0\"Eyes\u00a0only\")))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0message\u00a0encrypted\u00a0-\u00a0send\u00a0it!\u00a0\u00a0\u00a0\u00a0exec(ini_get(\"sendmail_path\")\u00a0.\u00a0\"\u00a0<\u00a0enc.txt\");}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-public-decrypt.php","title":"openssl_public_decrypt","description":"openssl_public_decrypt   (PHP 4 >= 4.0.6, PHP 5)openssl_public_decrypt \u2014 Decrypts data with public key           Description       bool openssl_public_decrypt     ( string $data    , string &$decrypted    , mixed $key    [, int $padding = OPENSSL_PKCS1_PADDING   ] )        openssl_public_decrypt() decrypts    data that was previous encrypted via    openssl_private_encrypt() and stores the result into    decrypted.            You can use this function e.g. to check if the message was written by the    owner of the private key.            Parameters                    data                                              decrypted                                              key                      key must be the public key corresponding that        was used to encrypt the data.                                  padding                      padding can be one of        OPENSSL_PKCS1_PADDING,        OPENSSL_NO_PADDING.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            openssl_private_encrypt() - Encrypts data with private key     openssl_private_decrypt() - Decrypts data with private key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-random-pseudo-bytes.php","title":"openssl_random_pseudo_bytes","description":"openssl_random_pseudo_bytes   (PHP 5 >= 5.3.0)openssl_random_pseudo_bytes \u2014 Generate a pseudo-random string of bytes          Description       string openssl_random_pseudo_bytes     ( int $length    [, bool &$crypto_strong   ] )        Generates a string of pseudo-random bytes, with the number of bytes    determined by the length parameter.           It also indicates if a cryptographically strong algorithm was used to produce the    pseudo-random bytes, and does this via the optional crypto_strong    parameter. It&#039;s rare for this to be FALSE, but some systems may be broken or old.            Parameters                    length                      The length of the desired string of bytes. Must be a positive integer. PHP will        try to cast this parameter to a non-null integer to use it.                                 crypto_strong                      If passed into the function, this will hold a boolean value that determines        if the algorithm used was \"cryptographically strong\", e.g., safe for usage with GPG,         passwords, etc. TRUE if it did, otherwise FALSE                                     Return Values       Returns the generated string of bytes on success,  or FALSE on failure.             Examples            Example #1 openssl_random_pseudo_bytes() example       <?phpfor\u00a0($i\u00a0=\u00a0-1;\u00a0$i\u00a0<=\u00a04;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0$bytes\u00a0=\u00a0openssl_random_pseudo_bytes($i,\u00a0$cstrong);\u00a0\u00a0\u00a0\u00a0$hex\u00a0\u00a0\u00a0=\u00a0bin2hex($bytes);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Lengths:\u00a0Bytes:\u00a0$i\u00a0and\u00a0Hex:\u00a0\"\u00a0.\u00a0strlen($hex)\u00a0.\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0var_dump($hex);\u00a0\u00a0\u00a0\u00a0var_dump($cstrong);\u00a0\u00a0\u00a0\u00a0echo\u00a0PHP_EOL;}?>             The above example will output something similar to:       Lengths: Bytes: -1 and Hex: 0 string(0) \"\" NULL  Lengths: Bytes: 0 and Hex: 0 string(0) \"\" NULL  Lengths: Bytes: 1 and Hex: 2 string(2) \"42\" bool(true)  Lengths: Bytes: 2 and Hex: 4 string(4) \"dc6e\" bool(true)  Lengths: Bytes: 3 and Hex: 6 string(6) \"288591\" bool(true)  Lengths: Bytes: 4 and Hex: 8 string(8) \"ab86d144\" bool(true)                       See Also       bin2hex() - Convert binary data into hexadecimal representation    crypt() - One-way string hashing    mt_rand() - Generate a better random value    uniqid() - Generate a unique ID"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-public-encrypt.php","title":"openssl_public_encrypt","description":"openssl_public_encrypt   (PHP 4 >= 4.0.6, PHP 5)openssl_public_encrypt \u2014 Encrypts data with public key           Description       bool openssl_public_encrypt     ( string $data    , string &$crypted    , mixed $key    [, int $padding = OPENSSL_PKCS1_PADDING   ] )        openssl_public_encrypt() encrypts data    with public key and stores the result into    crypted. Encrypted data can be decrypted via    openssl_private_decrypt().           This function can be used e.g. to encrypt message which can be then read    only by owner of the private key. It can be also used to store secure data    in database.            Parameters                    data                                              crypted                      This will hold the result of the encryption.                                key                      The public key.                                padding                      padding can be one of        OPENSSL_PKCS1_PADDING,        OPENSSL_SSLV23_PADDING,        OPENSSL_PKCS1_OAEP_PADDING,        OPENSSL_NO_PADDING.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            openssl_private_encrypt() - Encrypts data with private key     openssl_private_decrypt() - Decrypts data with private key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-seal.php","title":"openssl_seal","description":"openssl_seal   (PHP 4 >= 4.0.4, PHP 5)openssl_seal \u2014 Seal (encrypt) data          Description       int openssl_seal     ( string $data    , string &$sealed_data    , array &$env_keys    , array $pub_key_ids    [, string $method   ] )        openssl_seal() seals (encrypts)    data by using RC4 with a randomly generated    secret key. The key is encrypted with each of the public keys    associated with the identifiers in pub_key_ids    and each encrypted key is returned    in env_keys. This means that one can send    sealed data to multiple recipients (provided one has obtained their    public keys). Each recipient must receive both the sealed data and    the envelope key that was encrypted with the recipient&#039;s public key.            Parameters                    data                                              sealed_data                                              env_keys                                              pub_key_ids                                                   Return Values       Returns the length of the sealed data on success, or FALSE on error.    If successful the sealed data is returned in    sealed_data, and the envelope keys in    env_keys.            Examples            Example #1 openssl_seal() example       <?php\/\/\u00a0$data\u00a0is\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0data\u00a0to\u00a0be\u00a0sealed\/\/\u00a0fetch\u00a0public\u00a0keys\u00a0for\u00a0our\u00a0recipients,\u00a0and\u00a0ready\u00a0them$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/maurice\/cert.pem\",\u00a0\"r\");$cert\u00a0=\u00a0fread($fp,\u00a08192);fclose($fp);$pk1\u00a0=\u00a0openssl_get_publickey($cert);\/\/\u00a0Repeat\u00a0for\u00a0second\u00a0recipient$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\",\u00a0\"r\");$cert\u00a0=\u00a0fread($fp,\u00a08192);fclose($fp);$pk2\u00a0=\u00a0openssl_get_publickey($cert);\/\/\u00a0seal\u00a0message,\u00a0only\u00a0owners\u00a0of\u00a0$pk1\u00a0and\u00a0$pk2\u00a0can\u00a0decrypt\u00a0$sealed\u00a0with\u00a0keys\/\/\u00a0$ekeys[0]\u00a0and\u00a0$ekeys[1]\u00a0respectively.openssl_seal($data,\u00a0$sealed,\u00a0$ekeys,\u00a0array($pk1,\u00a0$pk2));\/\/\u00a0free\u00a0the\u00a0keys\u00a0from\u00a0memoryopenssl_free_key($pk1);openssl_free_key($pk2);?>                        See Also            openssl_open() - Open sealed data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-check-private-key.php","title":"openssl_x509_check_private_key","description":"openssl_x509_check_private_key   (PHP 4 >= 4.2.0, PHP 5)openssl_x509_check_private_key \u2014 Checks if a private key corresponds to a certificate          Description       bool openssl_x509_check_private_key     ( mixed $cert    , mixed $key    )        Checks whether the given key is the private key    that corresponds to cert.            Parameters                    cert                      The certificate.                                key                      The private key.                                     Return Values       Returns TRUE if key is the private key that    corresponds to cert, or FALSE otherwise."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-verify.php","title":"openssl_verify","description":"openssl_verify   (PHP 4 >= 4.0.4, PHP 5)openssl_verify \u2014 Verify signature          Description       int openssl_verify     ( string $data    , string $signature    , mixed $pub_key_id    [, int $signature_alg = OPENSSL_ALGO_SHA1   ] )        openssl_verify() verifies that the    signature is correct for the specified    data using the public key associated with    pub_key_id. This must be the public key    corresponding to the private key used for signing.            Parameters                    data                                              signature                                              pub_key_id                                              signature_alg                      For more information see the list of Signature Algorithms.                                     Return Values       Returns 1 if the signature is correct, 0 if it is incorrect, and    -1 on error.            Changelog                                 Version        Description                                    5.2.0                 The signature_alg parameter was added.                                            Examples            Example #1 openssl_verify() example       <?php\/\/\u00a0$data\u00a0and\u00a0$signature\u00a0are\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0data\u00a0and\u00a0the\u00a0signature\/\/\u00a0fetch\u00a0public\u00a0key\u00a0from\u00a0certificate\u00a0and\u00a0ready\u00a0it$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\",\u00a0\"r\");$cert\u00a0=\u00a0fread($fp,\u00a08192);fclose($fp);$pubkeyid\u00a0=\u00a0openssl_get_publickey($cert);\/\/\u00a0state\u00a0whether\u00a0signature\u00a0is\u00a0okay\u00a0or\u00a0not$ok\u00a0=\u00a0openssl_verify($data,\u00a0$signature,\u00a0$pubkeyid);if\u00a0($ok\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"good\";}\u00a0elseif\u00a0($ok\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"bad\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"ugly,\u00a0error\u00a0checking\u00a0signature\";}\/\/\u00a0free\u00a0the\u00a0key\u00a0from\u00a0memoryopenssl_free_key($pubkeyid);?>                        See Also            openssl_sign() - Generate signature"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-sign.php","title":"openssl_sign","description":"openssl_sign   (PHP 4 >= 4.0.4, PHP 5)openssl_sign \u2014 Generate signature          Description       bool openssl_sign     ( string $data    , string &$signature    , mixed $priv_key_id    [, int $signature_alg = OPENSSL_ALGO_SHA1   ] )        openssl_sign() computes a signature for the    specified data by using SHA1 for hashing    followed by encryption using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.            Parameters                    data                                              signature                      If the call was successful the signature is returned in        signature.                                priv_key_id                                              signature_alg                      For more information see the list of Signature Algorithms.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.0.0                 The signature_alg parameter was added.                                            Examples            Example #1 openssl_sign() example       <?php\/\/\u00a0$data\u00a0is\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0data\u00a0to\u00a0be\u00a0signed\/\/\u00a0fetch\u00a0private\u00a0key\u00a0from\u00a0file\u00a0and\u00a0ready\u00a0it$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/key.pem\",\u00a0\"r\");$priv_key\u00a0=\u00a0fread($fp,\u00a08192);fclose($fp);$pkeyid\u00a0=\u00a0openssl_get_privatekey($priv_key);\/\/\u00a0compute\u00a0signatureopenssl_sign($data,\u00a0$signature,\u00a0$pkeyid);\/\/\u00a0free\u00a0the\u00a0key\u00a0from\u00a0memoryopenssl_free_key($pkeyid);?>                        See Also            openssl_verify() - Verify signature"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-export-to-file.php","title":"openssl_x509_export_to_file","description":"openssl_x509_export_to_file   (PHP 4 >= 4.2.0, PHP 5)openssl_x509_export_to_file \u2014 Exports a certificate to file          Description       bool openssl_x509_export_to_file     ( mixed $x509    , string $outfilename    [, bool $notext = TRUE   ] )        openssl_x509_export_to_file() stores    x509 into a file named by    outfilename in a PEM encoded format.            Parameters                x509          See Key\/Certificate parameters for a list of valid values.                    outfilename                      Path to the output file.                                notext                The optional parameter notext affects  the verbosity of the output; if it is FALSE, then additional human-readable  information is included in the output. The default value of  notext is TRUE.                               Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-checkpurpose.php","title":"openssl_x509_checkpurpose","description":"openssl_x509_checkpurpose   (PHP 4 >= 4.0.6, PHP 5)openssl_x509_checkpurpose \u2014 Verifies if a certificate can be used for a particular purpose          Description       int openssl_x509_checkpurpose     ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )        openssl_x509_checkpurpose() examines a certificate to    see if it can be used for the specified purpose.            Parameters                    x509cert                      The examined certificate.                                purpose                               openssl_x509_checkpurpose() purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S\/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S\/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any\/All purposes?                                                These options are not bitfields - you may specify one only!                                cainfo                      cainfo should be an array of trusted CA files\/dirs        as described in Certificate        Verification.                                untrustedfile                      If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.                                     Return Values       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-export.php","title":"openssl_x509_export","description":"openssl_x509_export   (PHP 4 >= 4.2.0, PHP 5)openssl_x509_export \u2014 Exports a certificate as a string          Description       bool openssl_x509_export     ( mixed $x509    , string &$output    [, bool $notext = TRUE   ] )        openssl_x509_export() stores    x509 into a string named by    output in a PEM encoded format.            Parameters                x509          See Key\/Certificate parameters for a list of valid values.                    output                      On success, this will hold the PEM.                                notext                The optional parameter notext affects  the verbosity of the output; if it is FALSE, then additional human-readable  information is included in the output. The default value of  notext is TRUE.                               Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-free.php","title":"openssl_x509_free","description":"openssl_x509_free   (PHP 4 >= 4.0.6, PHP 5)openssl_x509_free \u2014 Free certificate resource          Description       void openssl_x509_free     ( resource $x509cert    )        openssl_x509_free() frees the certificate associated    with the specified x509cert resource from memory.            Parameters                    x509cert                                                   Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-parse.php","title":"openssl_x509_parse","description":"openssl_x509_parse   (PHP 4 >= 4.0.6, PHP 5)openssl_x509_parse \u2014 Parse an X509 certificate and return the information as an array          Description       array openssl_x509_parse     ( mixed $x509cert    [, bool $shortnames = true   ] )        openssl_x509_parse() returns information about the    supplied x509cert, including fields such as subject    name, issuer name, purposes, valid from and valid to dates etc.            Parameters                    x509cert                                              shortnames                      shortnames controls how the data is indexed in the        array - if shortnames is TRUE (the default) then        fields will be indexed with the short name form, otherwise, the long name        form will be used - e.g.: CN is the shortname form of commonName.                                     Return Values       The structure of the returned data is (deliberately) not    yet documented, as it is still subject to change."},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-read.php","title":"openssl_x509_read","description":"openssl_x509_read   (PHP 4 >= 4.0.6, PHP 5)openssl_x509_read \u2014 Parse an X.509 certificate and return a resource identifier for   it          Description       resource openssl_x509_read     ( mixed $x509certdata    )        openssl_x509_read() parses the certificate supplied by    x509certdata and returns a resource identifier for    it.            Parameters                    x509certdata                                                   Return Values       Returns a resource identifier on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-clean.php","title":"ob_clean","description":"ob_clean   (PHP 4 >= 4.2.0, PHP 5)ob_clean \u2014 Clean (erase) the output buffer          Description       void ob_clean     ( void    )        This function discards the contents of the output buffer.          This function does not destroy the output buffer like    ob_end_clean() does.            Return Values       No value is returned.            See Also            ob_flush() - Flush (send) the output buffer     ob_end_flush() - Flush (send) the output buffer and turn off output buffering     ob_end_clean() - Clean (erase) the output buffer and turn off output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-end-flush.php","title":"ob_end_flush","description":"ob_end_flush   (PHP 4, PHP 5)ob_end_flush \u2014 Flush (send) the output buffer and turn off output buffering          Description       bool ob_end_flush     ( void    )        This function will send the contents of the topmost output buffer (if    any) and turn this output buffer off.  If you want to further    process the buffer&#039;s contents you have to call    ob_get_contents() before    ob_end_flush() as the buffer contents are    discarded after ob_end_flush() is called.      Note:          This function is similar to ob_get_flush(), except     that ob_get_flush() returns the buffer as a string.                Return Values       Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the    function without an active buffer or that for some reason a buffer could    not be deleted (possible for special buffer).            Errors\/Exceptions       If the function fails it generates an E_NOTICE.            Changelog                                 Version        Description                                    4.2.0                 The boolean return value was added.                                            Examples            Example #1 ob_end_flush() example           The following example shows an easy way to flush and end all output      buffers:            <?php\u00a0\u00a0while\u00a0(@ob_end_flush());?>                        See Also            ob_start() - Turn on output buffering     ob_get_contents() - Return the contents of the output buffer     ob_get_flush() - Flush the output buffer, return it as a string and turn off output buffering     ob_flush() - Flush (send) the output buffer     ob_end_clean() - Clean (erase) the output buffer and turn off output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.flush.php","title":"flush","description":"flush   (PHP 4, PHP 5)flush \u2014 Flush the output buffer          Description       void flush     ( void    )        Flushes the write buffers of PHP and whatever backend PHP is using (CGI,    a web server, etc).  This attempts to push current output all the way to    the browser with a few caveats.          flush() may not be able to override the buffering scheme    of your web server and it has no effect on any client-side buffering in the    browser.  It also doesn&#039;t affect PHP&#039;s userspace output buffering mechanism.    This means you will have to call both ob_flush() and    flush() to flush the ob output buffers if you are using    those.          Several servers, especially on Win32, will still buffer the output from    your script until it terminates before transmitting the results to the    browser.          Server modules for Apache like mod_gzip may do buffering of their own that    will cause flush() to not result in data being sent    immediately to the client.          Even the browser may buffer its input before displaying it. Netscape, for    example, buffers text until it receives an end-of-line or the beginning of    a tag, and it won&#039;t render tables until the <\/table> tag of the    outermost table is seen.          Some versions of Microsoft Internet Explorer will only start to display    the page after they have received 256 bytes of output, so you may need to    send extra whitespace before flushing to get those browsers to display the    page.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-end-clean.php","title":"ob_end_clean","description":"ob_end_clean   (PHP 4, PHP 5)ob_end_clean \u2014 Clean (erase) the output buffer and turn off output buffering          Description       bool ob_end_clean     ( void    )        This function discards the contents of the topmost output buffer and turns    off this output buffering. If you want to further process the buffer&#039;s    contents you have to call ob_get_contents() before    ob_end_clean() as the buffer contents are discarded    when ob_end_clean() is called.            Return Values       Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the    function without an active buffer or that for some reason a buffer could    not be deleted (possible for special buffer).            Errors\/Exceptions       If the function fails it generates an E_NOTICE.            Changelog                                 Version        Description                                    4.2.0                 The boolean return value was added.                                            Examples       The following example shows an easy way to get rid of all output buffers:               Example #1 ob_end_clean() example       <?phpob_start();echo\u00a0'Text\u00a0that\u00a0won\\'t\u00a0get\u00a0displayed.';ob_end_clean();?>                        See Also            ob_start() - Turn on output buffering     ob_get_contents() - Return the contents of the output buffer     ob_flush() - Flush (send) the output buffer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-clean.php","title":"ob_get_clean","description":"ob_get_clean   (PHP 4 >= 4.3.0, PHP 5)ob_get_clean \u2014 Get current buffer contents and delete current output buffer          Description       string ob_get_clean     ( void    )        Gets the current buffer contents and delete current output buffer.          ob_get_clean() essentially executes both    ob_get_contents() and    ob_end_clean().            Return Values       Returns the contents of the output buffer and end output buffering.    If output buffering isn&#039;t active then FALSE is returned.            Examples            Example #1 A simple ob_get_clean() example       <?phpob_start();echo\u00a0\"Hello\u00a0World\";$out\u00a0=\u00a0ob_get_clean();$out\u00a0=\u00a0strtolower($out);var_dump($out);?>             The above example will output:        string(11) \"hello world\"                       See Also            ob_get_contents() - Return the contents of the output buffer     ob_start() - Turn on output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-flush.php","title":"ob_flush","description":"ob_flush   (PHP 4 >= 4.2.0, PHP 5)ob_flush \u2014 Flush (send) the output buffer          Description       void ob_flush     ( void    )        This function will send the contents of the output buffer (if any). If you    want to further process the buffer&#039;s contents you have to call    ob_get_contents() before ob_flush()    as the buffer contents are discarded after ob_flush()    is called.          This function does not destroy the output buffer like    ob_end_flush() does.            Return Values       No value is returned.            See Also            ob_get_contents() - Return the contents of the output buffer     ob_clean() - Clean (erase) the output buffer     ob_end_flush() - Flush (send) the output buffer and turn off output buffering     ob_end_clean() - Clean (erase) the output buffer and turn off output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-contents.php","title":"ob_get_contents","description":"ob_get_contents   (PHP 4, PHP 5)ob_get_contents \u2014 Return the contents of the output buffer          Description       string ob_get_contents     ( void    )        Gets the contents of the output buffer without clearing it.             Return Values       This will return the contents of the output buffer or FALSE, if output    buffering isn&#039;t active.            Examples            Example #1 A simple ob_get_contents() example       <?phpob_start();echo\u00a0\"Hello\u00a0\";$out1\u00a0=\u00a0ob_get_contents();echo\u00a0\"World\";$out2\u00a0=\u00a0ob_get_contents();ob_end_clean();var_dump($out1,\u00a0$out2);?>             The above example will output:       string(6) \"Hello \" string(11) \"Hello World\"                      See Also            ob_start() - Turn on output buffering     ob_get_length() - Return the length of the output buffer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-level.php","title":"ob_get_level","description":"ob_get_level   (PHP 4 >= 4.2.0, PHP 5)ob_get_level \u2014 Return the nesting level of the output buffering mechanism          Description       int ob_get_level     ( void    )        Returns the nesting level of the output buffering mechanism.            Return Values       Returns the level of nested output buffering handlers or zero if output    buffering is not active.            See Also            ob_start() - Turn on output buffering     ob_get_contents() - Return the contents of the output buffer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-status.php","title":"ob_get_status","description":"ob_get_status   (PHP 4 >= 4.2.0, PHP 5)ob_get_status \u2014 Get status of output buffers          Description       array ob_get_status     ([ bool  $full_status  = FALSE   ] )        ob_get_status() returns status information on either    the top level output buffer or all active output buffer levels if    full_status is set to TRUE.            Parameters                    full_status                      TRUE to return all active output buffer levels. If FALSE or not        set, only the top level output buffer is returned.                                     Return Values       If called without the full_status parameter    or with full_status = FALSE a simple array    with the following elements is returned:          Array (     [level] => 2     [type] => 0     [status] => 0     [name] => URL-Rewriter     [del] => 1 )                   Simple ob_get_status() results          Key:levelValue:Output nesting level     Key:typeValue:PHP_OUTPUT_HANDLER_INTERNAL (0) or PHP_OUTPUT_HANDLER_USER (1)     Key:statusValue:One of PHP_OUTPUT_HANDLER_START (0), PHP_OUTPUT_HANDLER_CONT (1) or PHP_OUTPUT_HANDLER_END (2)     Key:nameValue:Name of active output handler or &#039; default output handler&#039; if none is set     Key:delValue:Erase-flag as set by ob_start()              If called with full_status = TRUE an array    with one element for each active output buffer level is returned.    The output level is used as key of the top level array and each array    element itself is another array holding status information    on one active output level.           Array (     [0] => Array         (             [chunk_size] => 0             [size] => 40960             [block_size] => 10240             [type] => 1             [status] => 0             [name] => default output handler             [del] => 1         )      [1] => Array         (             [chunk_size] => 0             [size] => 40960             [block_size] => 10240             [type] => 0             [buffer_size] => 0             [status] => 0             [name] => URL-Rewriter             [del] => 1         )  )                    The full output contains these additional elements:         Full ob_get_status() results          Key:chunk_sizeValue:Chunk size as set by ob_start()     Key:sizeValue:...     Key:blocksizeValue:...                See Also            ob_get_level() - Return the nesting level of the output buffering mechanism     ob_list_handlers() - List all output handlers in use"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-flush.php","title":"ob_get_flush","description":"ob_get_flush   (PHP 4 >= 4.3.0, PHP 5)ob_get_flush \u2014 Flush the output buffer, return it as a string and turn off output buffering          Description       string ob_get_flush     ( void    )        ob_get_flush() flushes the output buffer, return    it as a string and turns off output buffering.      Note:          This function is similar to ob_end_flush(), except     that this function returns the buffer as a string.                Return Values       Returns the output buffer or FALSE if no buffering is active.            Examples            Example #1 ob_get_flush() example       <?php\/\/using\u00a0output_buffering=Onprint_r(ob_list_handlers());\/\/save\u00a0buffer\u00a0in\u00a0a\u00a0file$buffer\u00a0=\u00a0ob_get_flush();file_put_contents('buffer.txt',\u00a0$buffer);print_r(ob_list_handlers());?>             The above example will output:       Array (     [0] => default output handler ) Array ( )                      See Also            ob_end_clean() - Clean (erase) the output buffer and turn off output buffering     ob_end_flush() - Flush (send) the output buffer and turn off output buffering     ob_list_handlers() - List all output handlers in use"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-length.php","title":"ob_get_length","description":"ob_get_length   (PHP 4 >= 4.0.2, PHP 5)ob_get_length \u2014 Return the length of the output buffer          Description       int ob_get_length     ( void    )        This will return the length of the contents in the output buffer.            Return Values       Returns the length of the output buffer contents or FALSE if no    buffering is active.            Examples            Example #1 A simple ob_get_length() example       <?phpob_start();echo\u00a0\"Hello\u00a0\";$len1\u00a0=\u00a0ob_get_length();echo\u00a0\"World\";$len2\u00a0=\u00a0ob_get_length();ob_end_clean();echo\u00a0$len1\u00a0.\u00a0\",\u00a0.\"\u00a0.\u00a0$len2;?>             The above example will output:       6, 11                      See Also            ob_start() - Turn on output buffering     ob_get_contents() - Return the contents of the output buffer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-list-handlers.php","title":"ob_list_handlers","description":"ob_list_handlers   (PHP 4 >= 4.3.0, PHP 5)ob_list_handlers \u2014 List all output handlers in use          Description       array ob_list_handlers     ( void    )        Lists all output handlers in use.            Return Values       This will return an array with the output handlers in use (if any). If    output_buffering is enabled or    an anonymous function was used with ob_start(),    ob_list_handlers() will return \"default output    handler\".            Examples            Example #1 ob_list_handlers() example       <?php\/\/using\u00a0output_buffering=Onprint_r(ob_list_handlers());ob_end_flush();ob_start(\"ob_gzhandler\");print_r(ob_list_handlers());ob_end_flush();\/\/\u00a0anonymous\u00a0functionsob_start(create_function('$string',\u00a0'return\u00a0$string;'));print_r(ob_list_handlers());ob_end_flush();?>             The above example will output:       Array (     [0] => default output handler )  Array (     [0] => ob_gzhandler )  Array (     [0] => default output handler )                      See Also            ob_end_clean() - Clean (erase) the output buffer and turn off output buffering     ob_end_flush() - Flush (send) the output buffer and turn off output buffering     ob_get_flush() - Flush the output buffer, return it as a string and turn off output buffering     ob_start() - Turn on output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.output-add-rewrite-var.php","title":"output_add_rewrite_var","description":"output_add_rewrite_var   (PHP 4 >= 4.3.0, PHP 5)output_add_rewrite_var \u2014 Add URL rewriter values          Description       bool output_add_rewrite_var     ( string $name    , string $value    )        This function adds another name\/value pair to the URL rewrite mechanism.    The name and value will be added to URLs (as GET parameter) and forms    (as hidden input fields) the same way as the session ID when transparent    URL rewriting is enabled with session.use_trans_sid. Please    note that absolute URLs (http:\/\/example.com\/..) aren&#039;t rewritten.          This function&#039;s behavior is controlled by the url_rewriter.tags php.ini    parameter.      Note:          Calling this function will implicitly start output buffering if it is     not active already.                Parameters                    name                      The variable name.                                value                      The variable value.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 output_add_rewrite_var() example       <?phpoutput_add_rewrite_var('var',\u00a0'value');\/\/\u00a0some\u00a0linksecho\u00a0'<a\u00a0href=\"file.php\">link<\/a><a\u00a0href=\"http:\/\/example.com\">link2<\/a>';\/\/\u00a0a\u00a0formecho\u00a0'<form\u00a0action=\"script.php\"\u00a0method=\"post\"><input\u00a0type=\"text\"\u00a0name=\"var2\"\u00a0\/><\/form>';print_r(ob_list_handlers());?>             The above example will output:       <a href=\"file.php?var=value\">link<\/a> <a href=\"http:\/\/example.com\">link2<\/a>  <form action=\"script.php\" method=\"post\"> <input type=\"hidden\" name=\"var\" value=\"value\" \/> <input type=\"text\" name=\"var2\" \/> <\/form>  Array (     [0] => URL-Rewriter )                      See Also            output_reset_rewrite_vars() - Reset URL rewriter values     ob_flush() - Flush (send) the output buffer     ob_list_handlers() - List all output handlers in use"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-implicit-flush.php","title":"ob_implicit_flush","description":"ob_implicit_flush   (PHP 4, PHP 5)ob_implicit_flush \u2014 Turn implicit flush on\/off          Description       void ob_implicit_flush     ([ int $flag = true   ] )        ob_implicit_flush() will turn implicit flushing on or    off. Implicit flushing will result in a flush operation after every output    call, so that explicit calls to flush() will no longer    be needed.            Parameters                    flag                      TRUE to turn implicit flushing on, FALSE otherwise.                                     Return Values       No value is returned.            See Also            flush() - Flush the output buffer     ob_start() - Turn on output buffering     ob_end_flush() - Flush (send) the output buffer and turn off output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.output-reset-rewrite-vars.php","title":"output_reset_rewrite_vars","description":"output_reset_rewrite_vars   (PHP 4 >= 4.3.0, PHP 5)output_reset_rewrite_vars \u2014 Reset URL rewriter values          Description       bool output_reset_rewrite_vars     ( void    )        This function resets the URL rewriter and removes all rewrite    variables previously set by the output_add_rewrite_var()    function or the session mechanism (if session.use_trans_sid    was set on session_start()).            Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 output_reset_rewrite_vars() example       <?phpsession_start();output_add_rewrite_var('var',\u00a0'value');echo\u00a0'<a\u00a0href=\"file.php\">link<\/a>';ob_flush();output_reset_rewrite_vars();echo\u00a0'<a\u00a0href=\"file.php\">link<\/a>';?>             The above example will output:       <a href=\"file.php?PHPSESSID=xxx&var=value\">link<\/a> <a href=\"file.php\">link<\/a>                      See Also            output_add_rewrite_var() - Add URL rewriter values     ob_flush() - Flush (send) the output buffer     ob_list_handlers() - List all output handlers in use     session_start() - Initialize session data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-access.php","title":"posix_access","description":"posix_access   (PHP 5 >= 5.1.0)posix_access \u2014     Determine accessibility of a file           Description       bool posix_access     ( string $file    [, int $mode = POSIX_F_OK   ] )        posix_access() checks the user&#039;s permission of a file.            Parameters                    file                         The name of the file to be tested.                                   mode                         A mask consisting of one or more of POSIX_F_OK,         POSIX_R_OK, POSIX_W_OK and         POSIX_X_OK.                         POSIX_R_OK, POSIX_W_OK and         POSIX_X_OK request checking whether the file         exists and has read, write and execute permissions, respectively.         POSIX_F_OK just requests checking for the         existence of the file.                                        Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 posix_access() example           This example will check if the $file is readable and writable, otherwise      will print an error message.            <?php$file\u00a0=\u00a0'some_file';if\u00a0(posix_access($file,\u00a0POSIX_R_OK\u00a0|\u00a0POSIX_W_OK))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0readable\u00a0and\u00a0writable!';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0$error\u00a0=\u00a0posix_get_last_error();\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0$error:\u00a0\"\u00a0.\u00a0posix_strerror($error);}?>                        Notes   Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.         See Also            posix_get_last_error() - Retrieve the error number set by the last posix function that failed     posix_strerror() - Retrieve the system error message associated with the given errno"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-gzhandler.php","title":"ob_gzhandler","description":"ob_gzhandler   (PHP 4 >= 4.0.4, PHP 5)ob_gzhandler \u2014 ob_start callback function to gzip output buffer          Description       string ob_gzhandler     ( string $buffer    , int $mode    )        ob_gzhandler() is intended to be used as a callback    function for ob_start() to help facilitate sending    gz-encoded data to web browsers that support compressed web pages.      Before ob_gzhandler() actually sends compressed data,    it determines what type of content encoding the browser will accept    (\"gzip\", \"deflate\" or none at all) and will return its output accordingly.    All browsers are supported since it&#039;s up to the browser to send the    correct header saying that it accepts compressed web pages. If a browser    doesn&#039;t support compressed pages this function returns FALSE.            Parameters                    buffer                                              mode                                                   Return Values                   Changelog                                 Version        Description                                    4.0.5                 The mode parameter was added.                                            Examples            Example #1 ob_gzhandler() example       <?phpob_start(\"ob_gzhandler\");?><html><body><p>This\u00a0should\u00a0be\u00a0a\u00a0compressed\u00a0page.<\/p><\/body><\/html>                       Notes   Note:          ob_gzhandler() requires the zlib extension.          Note:          You cannot use both ob_gzhandler() and zlib.output_compression.     Also note that using      zlib.output_compression is preferred over     ob_gzhandler().                See Also            ob_start() - Turn on output buffering     ob_end_flush() - Flush (send) the output buffer and turn off output buffering"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-ctermid.php","title":"posix_ctermid","description":"posix_ctermid   (PHP 4, PHP 5)posix_ctermid \u2014 Get path name of controlling terminal          Description       string posix_ctermid     ( void    )        Generates a string which is the pathname for the current     controlling terminal for the process.  On error this will set errno,     which can be checked using posix_get_last_error()            Return Values       Upon successful completion, returns string of the pathname to     the current controlling terminal.  Otherwise FALSE is returned and errno    is set, which can be checked with posix_get_last_error().            Examples            Example #1 posix_ctermid() example           This example will display the path to the current TTY.            <?phpecho\u00a0\"I\u00a0am\u00a0running\u00a0from\u00a0\".posix_ctermid();?>                        See Also            posix_ttyname() - Determine terminal device name     posix_get_last_error() - Retrieve the error number set by the last posix function that failed"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-errno.php","title":"posix_errno","description":"posix_errno   (PHP 4 >= 4.2.0, PHP 5)posix_errno \u2014 Alias of posix_get_last_error()         Description       This function is an alias of:     posix_get_last_error()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-start.php","title":"ob_start","description":"ob_start   (PHP 4, PHP 5)ob_start \u2014 Turn on output buffering          Description       bool ob_start     ([ callback $output_callback    [, int $chunk_size = 0    [, bool $erase = true   ]]] )        This function will turn output buffering on. While output buffering is    active no output is sent from the script (other than headers), instead the    output is stored in an internal buffer.          The contents of this internal buffer may be copied into a string variable    using ob_get_contents().  To output what is stored in    the internal buffer, use ob_end_flush(). Alternatively,    ob_end_clean() will silently discard the buffer    contents.      Warning         Some web servers (e.g. Apache) change the working directory of a script     when calling the callback function. You can change it back by e.g.     chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;])) in the     callback function.              Output buffers are stackable, that is, you may call    ob_start() while another    ob_start() is active. Just make    sure that you call ob_end_flush()    the appropriate number of times. If multiple output callback    functions are active, output is being filtered sequentially    through each of them in nesting order.            Parameters                    output_callback                      An optional output_callback function may be        specified. This function takes a string as a parameter and should        return a string. The function will be called when        the output buffer is flushed (sent) or cleaned (with        ob_flush(), ob_clean() or similar        function) or when the output buffer        is flushed to the browser at the end of the request.  When        output_callback is called, it will receive the        contents of the output buffer as its parameter and is expected to        return a new output buffer as a result, which will be sent to the        browser. If the output_callback is not a        callable function, this function will return FALSE.                      If the callback function has two parameters, the second parameter is        filled with a bit-field consisting of        PHP_OUTPUT_HANDLER_START,        PHP_OUTPUT_HANDLER_CONT and        PHP_OUTPUT_HANDLER_END.                      If output_callback returns FALSE original        input is sent to the browser.                      The output_callback parameter may be bypassed        by passing a NULL value.                      ob_end_clean(), ob_end_flush(),        ob_clean(), ob_flush() and        ob_start() may not be called from a callback        function. If you call them from callback function, the behavior is        undefined. If you would like to delete the contents of a buffer,        return \"\" (a null string) from callback function.        You can&#039;t even call functions using the output buffering functions like        print_r($expression, true) or        highlight_file($filename, true) from a callback        function.              Note:                  In PHP 4.0.4, ob_gzhandler() was introduced to         facilitate sending gz-encoded data to web browsers that support         compressed web pages.  ob_gzhandler() determines         what type of content encoding the browser will accept and will return         its output accordingly.                                        chunk_size                      If the optional parameter chunk_size is passed, the        buffer will be flushed after any output call which causes the buffer&#039;s        length to equal or exceed chunk_size. The default        value 0 means that the output function will only be        called when the output buffer is closed.                      Prior to PHP 5.4.0, the value 1 was a special case        value that set the chunk size to 4096 bytes.                                erase                      If the optional parameter erase is set to FALSE,        the buffer will not be deleted until the script finishes.        This causes that flushing and cleaning functions would issue a notice        and return FALSE if called.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.4.0                 A chunk size of 1 now results in chunks of 1 byte         being sent to the output buffer.                               4.3.2                 This function was changed to return FALSE in case the passed         output_callback can not be executed.                               4.2.0                 Added the erase parameter.                                            Examples            Example #1 User defined callback function example       <?phpfunction\u00a0callback($buffer){\u00a0\u00a0\/\/\u00a0replace\u00a0all\u00a0the\u00a0apples\u00a0with\u00a0oranges\u00a0\u00a0return\u00a0(str_replace(\"apples\",\u00a0\"oranges\",\u00a0$buffer));}ob_start(\"callback\");?><html><body><p>It's\u00a0like\u00a0comparing\u00a0apples\u00a0to\u00a0oranges.<\/p><\/body><\/html><?phpob_end_flush();?>             The above example will output:       <html> <body> <p>It&#039;s like comparing oranges to oranges.<\/p> <\/body> <\/html>                      See Also            ob_get_contents() - Return the contents of the output buffer     ob_end_clean() - Clean (erase) the output buffer and turn off output buffering     ob_end_flush() - Flush (send) the output buffer and turn off output buffering     ob_implicit_flush() - Turn implicit flush on\/off     ob_gzhandler() - ob_start callback function to gzip output buffer     ob_iconv_handler() - Convert character encoding as output buffer handler     mb_output_handler() - Callback function converts character encoding in output buffer     ob_tidyhandler() - ob_start callback function to repair the buffer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-get-last-error.php","title":"posix_get_last_error","description":"posix_get_last_error   (PHP 4 >= 4.2.0, PHP 5)posix_get_last_error \u2014 Retrieve the error number set by the last posix function that failed          Description       int posix_get_last_error     ( void    )        Retrieve the error number set by the last posix function that failed.    The system error message associated with the errno may be checked with    posix_strerror().            Return Values       Returns the errno (error number) set by the last posix function that    failed.  If no errors exist, 0 is returned.             Examples            Example #1 posix_get_last_error() example           This example attempt to kill a bogus process id, which will set the      last error.  We will then print out the last errno.            <?phpposix_kill(999459,SIGKILL);echo\u00a0'Your\u00a0error\u00a0returned\u00a0was\u00a0'.posix_get_last_error();\u00a0\/\/Your\u00a0error\u00a0was\u00a0___?>                       See Also            posix_strerror() - Retrieve the system error message associated with the given errno"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getcwd.php","title":"posix_getcwd","description":"posix_getcwd   (PHP 4, PHP 5)posix_getcwd \u2014 Pathname of current directory          Description       string posix_getcwd     ( void    )        Gets the absolute pathname of the script&#039;s current working directory.    On error, it sets errno which can be checked using    posix_get_last_error()            Return Values       Returns a string of the absolute pathname on success.      On error, returns FALSE and sets errno which can be checked with    posix_get_last_error().            Examples            Example #1 posix_getcwd() example           This example will return the absolute path of the current working       directory of the script.            <?phpecho\u00a0'My\u00a0current\u00a0working\u00a0directory\u00a0is\u00a0'.posix_getcwd();?>                         Notes   Note:          This function can fail on                  Read or Search permission was denied                   Pathname no longer exists"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getegid.php","title":"posix_getegid","description":"posix_getegid   (PHP 4, PHP 5)posix_getegid \u2014 Return the effective group ID of the current process          Description       int posix_getegid     ( void    )        Return the numeric effective group ID of the current process.             Return Values       Returns an integer of the effective group ID.            Examples            Example #1 posix_getegid() example           This example will print out the effective group id, once it is      changed with posix_setegid().            <?phpecho\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20posix_setegid(40);echo\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20echo\u00a0'My\u00a0effective\u00a0group\u00a0id\u00a0is\u00a0'.posix_getegid();\u00a0\/\/40?>                        Notes       posix_getegid() is different than     posix_getgid() because effective group ID can be changed by    a calling process using posix_setegid().            See Also            posix_getgrgid() - Return info about a group by group id     posix_getgid() - Return the real group ID of the current process     posix_setgid() - Set the GID of the current process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-geteuid.php","title":"posix_geteuid","description":"posix_geteuid   (PHP 4, PHP 5)posix_geteuid \u2014 Return the effective user ID of the current process         Description       int posix_geteuid     ( void    )        Return the numeric effective user ID of the current process. See    also posix_getpwuid() for information on how    to convert this into a useable username.            Return Values       Returns the user id, as an integer            Examples            Example #1 posix_geteuid() example     This example will show the current user id then set the     effective user id to a separate id using     posix_seteuid(), then show the difference between     the real id and the effective id.       <?phpecho\u00a0posix_getuid().\"\\n\";\u00a0\/\/10001echo\u00a0posix_geteuid().\"\\n\";\u00a0\/\/10001posix_seteuid(10000);echo\u00a0posix_getuid().\"\\n\";\u00a0\/\/10001echo\u00a0posix_geteuid().\"\\n\";\u00a0\/\/10000?>                        See Also            posix_getpwuid() - Return info about a user by user id     posix_getuid() - Return the real user ID of the current process     posix_setuid() - Set the UID of the current process     POSIX man page GETEUID(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgid.php","title":"posix_getgid","description":"posix_getgid   (PHP 4, PHP 5)posix_getgid \u2014 Return the real group ID of the current process          Description       int posix_getgid     ( void    )        Return the numeric real group ID of the current process.            Return Values       Returns the real group id, as an integer.            Examples            Example #1 posix_getgid() example           This example will print out the real group id, even once the effective      group id has been changed.            <?phpecho\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20posix_setegid(40);echo\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20echo\u00a0'My\u00a0effective\u00a0group\u00a0id\u00a0is\u00a0'.posix_getegid();\u00a0\/\/40?>                        See Also            posix_getgrgid() - Return info about a group by group id     posix_getegid() - Return the effective group ID of the current process     posix_setgid() - Set the GID of the current process     POSIX man page GETGID(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgroups.php","title":"posix_getgroups","description":"posix_getgroups   (PHP 4, PHP 5)posix_getgroups \u2014 Return the group set of the current process          Description       array posix_getgroups     ( void    )        Gets the group set of the current process.            Return Values       Returns an array of integers containing the numeric group ids of the group    set of the current process.            Examples            Example #1 Example use of posix_getgroups()       <?php$groups\u00a0=\u00a0posix_getgroups();print_r($groups);?>             The above example will output something similar to:       Array (     [0] => 4     [1] => 20     [2] => 24     [3] => 25     [4] => 29     [5] => 30     [6] => 33     [7] => 44     [8] => 46     [9] => 104     [10] => 109     [11] => 110     [12] => 1000 )                      See Also            posix_getgrgid() - Return info about a group by group id"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgrnam.php","title":"posix_getgrnam","description":"posix_getgrnam   (PHP 4, PHP 5)posix_getgrnam \u2014 Return info about a group by name          Description       array posix_getgrnam     ( string $name    )        Gets information about a group provided its name.             Parameters                    name              The name of the group                              Return Values       The array elements returned are:         The group information array                          Element        Description                                    name                 The name element contains the name of the group. This is         a short, usually less than 16 character \"handle\" of the         group, not the real, full name.  This should be the same as         the name parameter used when         calling the function, and hence redundant.                               passwd                 The passwd element contains the group&#039;s password in an         encrypted format. Often, for example on a system employing         \"shadow\" passwords, an asterisk is returned instead.                               gid                 Group ID of the group in numeric form.                               members                 This consists of an array of         string&#039;s for all the members in the group.                                            Changelog                                 Version        Description                                    4.2.0                 Prior to this version, members was simply an integer representing the         number of members in the group, and the member names were returned         with numerical indices.                                            Examples            Example #1 Example use of posix_getgrnam()       <?php$groupinfo\u00a0=\u00a0posix_getgrnam(\"toons\");print_r($groupinfo);?>             The above example will output something similar to:       Array (     [name]    => toons     [passwd]  => x     [members] => Array         (             [0] => tom             [1] => jerry         )     [gid]     => 42 )                      See Also            posix_getegid() - Return the effective group ID of the current process     posix_getgrgid() - Return info about a group by group id     filegroup() - Gets file group     stat() - Gives information about a file     safe_mode_gid     POSIX man page GETGRNAM(3)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgrgid.php","title":"posix_getgrgid","description":"posix_getgrgid   (PHP 4, PHP 5)posix_getgrgid \u2014 Return info about a group by group id          Description       array posix_getgrgid     ( int $gid    )        Gets information about a group provided its id.            Parameters                    gid                      The group id.                                     Return Values       The array elements returned are:         The group information array                          Element        Description                                    name                 The name element contains the name of the group. This is         a short, usually less than 16 character \"handle\" of the         group, not the real, full name.                               passwd                 The passwd element contains the group&#039;s password in an         encrypted format. Often, for example on a system employing         \"shadow\" passwords, an asterisk is returned instead.                               gid                 Group ID, should be the same as the         gid parameter used when calling the         function, and hence redundant.                               members                 This consists of an array of         string&#039;s for all the members in the group.                                            Changelog                                 Version        Description                                    4.2.0                 Prior to this version, members was simply an integer representing the         number of members in the group, and the member names were returned         with numerical indices.                                            Examples            Example #1 Example use of posix_getgrgid()       <?php$groupid\u00a0\u00a0\u00a0=\u00a0posix_getegid();$groupinfo\u00a0=\u00a0posix_getgrgid($groupid);print_r($groupinfo);?>             The above example will output something similar to:       Array (     [name]    => toons     [passwd]  => x     [members] => Array         (             [0] => tom             [1] => jerry         )     [gid]     => 42 )                      See Also            posix_getegid() - Return the effective group ID of the current process     posix_getgrnam() - Return info about a group by name     filegroup() - Gets file group     stat() - Gives information about a file     safe_mode_gid     POSIX man page GETGRNAM(3)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getlogin.php","title":"posix_getlogin","description":"posix_getlogin   (PHP 4, PHP 5)posix_getlogin \u2014 Return login name          Description       string posix_getlogin     ( void    )        Returns the login name of the user owning the current process.            Return Values       Returns the login name of the user, as a string.            Examples            Example #1 Example use of posix_getlogin()       <?phpecho\u00a0posix_getlogin();\u00a0\/\/apache?>                        See Also            posix_getpwnam() - Return info about a user by username     POSIX man page GETLOGIN(3)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpgid.php","title":"posix_getpgid","description":"posix_getpgid   (PHP 4, PHP 5)posix_getpgid \u2014 Get process group id for job control          Description       int posix_getpgid     ( int $pid    )        Returns the process group identifier of the process    pid or FALSE on failure.            Parameters                    pid                      The process id.                                     Return Values       Returns the identifier, as an integer.            Examples            Example #1 Example use of posix_getpgid()       <?php$pid\u00a0=\u00a0posix_getppid();echo\u00a0posix_getpgid($pid);\u00a0\/\/35?>                        Notes   Note:          This is a not POSIX function, but is common on BSD and System V     systems. If the system does not support this function, then it     will not be included at compile time.  This may be checked with     function_exists().                See Also            posix_getppid() - Return the parent process identifier     man page SETPGID(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpgrp.php","title":"posix_getpgrp","description":"posix_getpgrp   (PHP 4, PHP 5)posix_getpgrp \u2014 Return the current process group identifier          Description       int posix_getpgrp     ( void    )        Return the process group identifier of the current process.             Return Values       Returns the identifier, as an integer.            See Also            POSIX.1 and the getpgrp(2) manual page on the POSIX system for      more information on process groups."},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getppid.php","title":"posix_getppid","description":"posix_getppid   (PHP 4, PHP 5)posix_getppid \u2014 Return the parent process identifier          Description       int posix_getppid     ( void    )        Return the process identifier of the parent process of the    current process.            Return Values       Returns the identifier, as an integer.            Examples            Example #1 Example use of posix_getppid()       <?phpecho\u00a0posix_getppid();\u00a0\/\/8259?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpid.php","title":"posix_getpid","description":"posix_getpid   (PHP 4, PHP 5)posix_getpid \u2014 Return the current process identifier          Description       int posix_getpid     ( void    )        Return the process identifier of the current process.            Return Values       Returns the identifier, as an integer.            Examples            Example #1 Example use of posix_getpid()       <?phpecho\u00a0posix_getpid();\u00a0\/\/8805?>                        See Also            posix_kill() - Send a signal to a process     POSIX man page GETPID(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getuid.php","title":"posix_getuid","description":"posix_getuid   (PHP 4, PHP 5)posix_getuid \u2014 Return the real user ID of the current process          Description       int posix_getuid     ( void    )        Return the numeric real user ID of the current process.             Return Values       Returns the user id, as an integer            Examples            Example #1 Example use of posix_getuid()       <?phpecho\u00a0posix_getuid();\u00a0\/\/10000?>                        See Also                  posix_getpwuid() - Return info about a user by user id     POSIX man page GETUID(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getsid.php","title":"posix_getsid","description":"posix_getsid   (PHP 4, PHP 5)posix_getsid \u2014 Get the current sid of the process          Description       int posix_getsid     ( int $pid    )        Return the session id of the process pid.    The session id of a process is the process group id of the session leader.            Parameters                    pid                      The process identifier. If set to 0, the current process is        assumed.  If an invalid pid is        specified, then FALSE is returned and an error is set which        can be checked with posix_get_last_error().                                     Return Values       Returns the identifier, as an integer.            Examples            Example #1 Example use of posix_getsid()       <?php$pid\u00a0=\u00a0posix_getpid();echo\u00a0posix_getsid($pid);\u00a0\/\/8805?>                        See Also                  posix_getpgid() - Get process group id for job control                posix_setsid() - Make the current process a session leader          POSIX man page GETSID(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getrlimit.php","title":"posix_getrlimit","description":"posix_getrlimit   (PHP 4, PHP 5)posix_getrlimit \u2014 Return info about system resource limits          Description       array posix_getrlimit     ( void    )        posix_getrlimit() returns an array    of information about the current resource&#039;s soft and hard limits.           Each resource has an associated soft and hard limit.  The soft     limit is the value that the kernel enforces for the corresponding     resource.  The hard limit acts as a ceiling for the soft limit.     An unprivileged process may only set its soft limit to a value     from 0 to the hard limit, and irreversibly lower its hard limit.            Return Values       Returns an associative array of elements for each    limit that is defined. Each limit has a soft and a hard limit.         List of possible limits returned                          Limit name        Limit description                                    core                 The maximum size of the core file.  When 0, not core files are         created.  When core files are larger than this size, they will         be truncated at this size.                               totalmem                 The maximum size of the memory of the process, in bytes.                               virtualmem                 The maximum size of the virtual memory for the process, in bytes.                                data                 The maximum size of the data segment for the process, in bytes.                               stack                 The maximum size of the process stack, in bytes.                               rss                 The maximum number of virtual pages resident in RAM                               maxproc                 The maximum number of processes that can be created for the         real user ID of the calling process.                               memlock                 The maximum number of bytes of memory that may be locked into RAM.                               cpu                 The amount of time the process is allowed to use the CPU.                               filesize                 The maximum size of the data segment for the process, in bytes.                               openfiles                 One more than the maximum number of open file descriptors.                                            Examples            Example #1 Example use of posix_getrlimit()       <?php$limits\u00a0=\u00a0posix_getrlimit();print_r($limits);?>             The above example will output something similar to:       Array (     [soft core] => 0     [hard core] => unlimited     [soft data] => unlimited     [hard data] => unlimited     [soft stack] => 8388608     [hard stack] => unlimited     [soft totalmem] => unlimited     [hard totalmem] => unlimited     [soft rss] => unlimited     [hard rss] => unlimited     [soft maxproc] => unlimited     [hard maxproc] => unlimited     [soft memlock] => unlimited     [hard memlock] => unlimited     [soft cpu] => unlimited     [hard cpu] => unlimited     [soft filesize] => unlimited     [hard filesize] => unlimited     [soft openfiles] => 1024     [hard openfiles] => 1024 )                      Notes   Note:          This is a not POSIX function, but is common on BSD and System V     systems. If the system does not support this function, then it     will not be included at compile time.  This may be checked with     function_exists().                See Also            man page GETRLIMIT(2)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpwnam.php","title":"posix_getpwnam","description":"posix_getpwnam   (PHP 4, PHP 5)posix_getpwnam \u2014 Return info about a user by username          Description       array posix_getpwnam     ( string $username    )        Returns an array of information about the given user.            Parameters                    username                      An alphanumeric username.                                     Return Values       On success an array with the following elements is returned, else     FALSE is returned:         The user information array                          Element        Description                                    name                 The name element contains the username of the user. This is         a short, usually less than 16 character \"handle\" of the         user, not the real, full name. This should be the same as         the username parameter used when         calling the function, and hence redundant.                               passwd                 The passwd element contains the user&#039;s password in an         encrypted format. Often, for example on a system employing         \"shadow\" passwords, an asterisk is returned instead.                               uid                 User ID of the user in numeric form.                               gid                 The group ID of the user. Use the function         posix_getgrgid() to resolve the group         name and a list of its members.                               gecos                 GECOS is an obsolete term that refers to the finger         information field on a Honeywell batch processing system.         The field, however, lives on, and its contents have been         formalized by POSIX. The field contains a comma separated         list containing the user&#039;s full name, office phone, office         number, and home phone number. On most systems, only the         user&#039;s full name is available.                               dir                 This element contains the absolute path to the home         directory of the user.                               shell                 The shell element contains the absolute path to the         executable of the user&#039;s default shell.                                            Examples            Example #1 Example use of posix_getpwnam()       <?php$userinfo\u00a0=\u00a0posix_getpwnam(\"tom\");print_r($userinfo);?>             The above example will output something similar to:       Array (     [name]    => tom     [passwd]  => x     [uid]     => 10000     [gid]     => 42     [geocs]   => \"tom,,,\"     [dir]     => \"\/home\/tom\"     [shell]   => \"\/bin\/bash\" )                      See Also            posix_getpwuid() - Return info about a user by user id     POSIX man page GETPWNAM(3)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpwuid.php","title":"posix_getpwuid","description":"posix_getpwuid   (PHP 4, PHP 5)posix_getpwuid \u2014 Return info about a user by user id          Description       array posix_getpwuid     ( int $uid    )        Returns an array of information about the user     referenced by the given user ID.            Parameters                    uid                      The user identifier.                                     Return Values       Returns an associative array with the following elements:         The user information array                          Element        Description                                    name                 The name element contains the username of the user. This is         a short, usually less than 16 character \"handle\" of the         user, not the real, full name.                               passwd                 The passwd element contains the user&#039;s password in an         encrypted format. Often, for example on a system employing         \"shadow\" passwords, an asterisk is returned instead.                               uid                 User ID, should be the same as the         uid parameter used when calling the         function, and hence redundant.                               gid                 The group ID of the user. Use the function         posix_getgrgid() to resolve the group         name and a list of its members.                               gecos                 GECOS is an obsolete term that refers to the finger         information field on a Honeywell batch processing system.         The field, however, lives on, and its contents have been         formalized by POSIX. The field contains a comma separated         list containing the user&#039;s full name, office phone, office         number, and home phone number. On most systems, only the         user&#039;s full name is available.                               dir                 This element contains the absolute path to the         home directory of the user.                               shell                 The shell element contains the absolute path to the         executable of the user&#039;s default shell.                                            Examples            Example #1 Example use of posix_getpwuid()       <?php$userinfo\u00a0=\u00a0posix_getpwuid(10000);print_r($userinfo);?>             The above example will output something similar to:       Array (     [name]    => tom     [passwd]  => x     [uid]     => 10000     [gid]     => 42     [geocs]   => \"tom,,,\"     [dir]     => \"\/home\/tom\"     [shell]   => \"\/bin\/bash\" )                      See Also            posix_getpwnam() - Return info about a user by username     POSIX man page GETPWNAM(3)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-isatty.php","title":"posix_isatty","description":"posix_isatty   (PHP 4, PHP 5)posix_isatty \u2014 Determine if a file descriptor is an interactive terminal          Description       bool posix_isatty     ( int $fd    )          Determines if the file descriptor fd refers to a valid     terminal type device.                Parameters                    fd                      The file descriptor.                                            Return Values       Returns TRUE if fd is an open descriptor connected    to a terminal and FALSE otherwise.                   See Also            posix_ttyname() - Determine terminal device name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-initgroups.php","title":"posix_initgroups","description":"posix_initgroups   (PHP 5 >= 5.2.0)posix_initgroups \u2014 Calculate the group access list          Description       bool posix_initgroups     ( string $name    , int $base_group_id    )        Calculates the group access list for the user specified in name.            Parameters                    name                      The user to calculate the list for.                                base_group_id                      Typically the group number from the password file.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            The Unix manual page for initgroups(3)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-kill.php","title":"posix_kill","description":"posix_kill   (PHP 4, PHP 5)posix_kill \u2014 Send a signal to a process          Description       bool posix_kill     ( int $pid    , int $sig    )        Send the signal sig to the process with    the process identifier pid.            Parameters                    pid                      The process identifier.                                sig                      One of the PCNTL signals constants.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also                  The kill(2) manual page of the POSIX system, which contains additional      information about negative process identifiers, the special pid 0, the      special pid -1, and the signal number 0."},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-mknod.php","title":"posix_mknod","description":"posix_mknod   (PHP 5 >= 5.1.0)posix_mknod \u2014     Create a special or ordinary file (POSIX.1)           Description       bool posix_mknod     ( string $pathname    , int $mode    [, int $major = 0    [, int $minor = 0   ]] )        Creates a special or ordinary file.            Parameters                    pathname                      The file to create                                mode                      This parameter is constructed by a bitwise OR between file type (one of        the following constants: POSIX_S_IFREG,        POSIX_S_IFCHR, POSIX_S_IFBLK,        POSIX_S_IFIFO or        POSIX_S_IFSOCK) and permissions.                                major                      The major device kernel identifier (required to pass when using        S_IFCHR or S_IFBLK).                                minor                      The minor device kernel identifier.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 A posix_mknod() example       <?php$file\u00a0=\u00a0'\/tmp\/tmpfile';\u00a0\u00a0\/\/\u00a0file\u00a0name$type\u00a0=\u00a0POSIX_S_IFBLK;\u00a0\u00a0\u00a0\/\/\u00a0file\u00a0type$permissions\u00a0=\u00a00777;\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0octal$major\u00a0=\u00a01;$minor\u00a0=\u00a08;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\/dev\/randomif\u00a0(!posix_mknod($file,\u00a0$type\u00a0|\u00a0$permissions,\u00a0$major,\u00a0$minor))\u00a0{\u00a0\u00a0\u00a0\u00a0die('Error\u00a0'\u00a0.\u00a0posix_get_last_error()\u00a0.\u00a0':\u00a0'\u00a0.\u00a0posix_strerror(posix_get_last_error()));}?>                        See Also            posix_mkfifo() - Create a fifo special file (a named pipe)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-mkfifo.php","title":"posix_mkfifo","description":"posix_mkfifo   (PHP 4, PHP 5)posix_mkfifo \u2014 Create a fifo special file (a named pipe)          Description       bool posix_mkfifo     ( string $pathname    , int $mode    )        posix_mkfifo() creates a special    FIFO file which exists in the file system and acts as    a bidirectional communication endpoint for processes.            Parameters                    pathname                      Path to the FIFO file.                                mode                      The second parameter mode has to be given in        octal notation (e.g. 0644). The permission of the newly created        FIFO also depends on the setting of the current        umask(). The permissions of the created file are        (mode & ~umask).                                     Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed."},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-seteuid.php","title":"posix_seteuid","description":"posix_seteuid   (PHP 4 >= 4.0.2, PHP 5)posix_seteuid \u2014 Set the effective UID of the current process          Description       bool posix_seteuid     ( int $uid    )        Set the real user ID of the current process. This is a privileged    function and needs appropriate privileges (usually root) on    the system to be able to perform this function.            Parameters                    uid                      The user id.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            posix_setgid() - Set the GID of the current process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setegid.php","title":"posix_setegid","description":"posix_setegid   (PHP 4 >= 4.0.2, PHP 5)posix_setegid \u2014 Set the effective GID of the current process          Description       bool posix_setegid     ( int $gid    )        Set the effective group ID of the current process. This is a    privileged function and needs appropriate privileges (usually    root) on the system to be able to perform this function.            Parameters                    gid                      The group id.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 posix_setegid() example           This example will print out the effective group id, once changed.            <?phpecho\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20posix_setegid(40);echo\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20echo\u00a0'My\u00a0effective\u00a0group\u00a0id\u00a0is\u00a0'.posix_getegid();\u00a0\/\/40?>                        See Also                  posix_getgrgid() - Return info about a group by group id     posix_getgid() - Return the real group ID of the current process     posix_setgid() - Set the GID of the current process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setpgid.php","title":"posix_setpgid","description":"posix_setpgid   (PHP 4, PHP 5)posix_setpgid \u2014 Set process group id for job control          Description       bool posix_setpgid     ( int $pid    , int $pgid    )        Let the process pid join the process group    pgid.             Parameters                    pid                      The process id.                                pgid                      The process group id.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also                  See POSIX.1 and the setsid(2) manual page on the POSIX system for more      informations on process groups and job control."},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setgid.php","title":"posix_setgid","description":"posix_setgid   (PHP 4, PHP 5)posix_setgid \u2014 Set the GID of the current process          Description       bool posix_setgid     ( int $gid    )        Set the real group ID of the current process. This is a    privileged function and needs appropriate privileges (usually    root) on the system to be able to perform this function. The    appropriate order of function calls is    posix_setgid() first,    posix_setuid() last.      Note:          If the caller is a super user, this will also set the effective     group id.                Parameters                    gid                      The group id.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 posix_setgid() example           This example will print out the effective group id, once it is changed.            <?phpecho\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/20posix_setgid(40);echo\u00a0'My\u00a0real\u00a0group\u00a0id\u00a0is\u00a0'.posix_getgid();\u00a0\/\/40echo\u00a0'My\u00a0effective\u00a0group\u00a0id\u00a0is\u00a0'.posix_getegid();\u00a0\/\/40?>                        See Also            posix_getgrgid() - Return info about a group by group id     posix_getgid() - Return the real group ID of the current process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setsid.php","title":"posix_setsid","description":"posix_setsid   (PHP 4, PHP 5)posix_setsid \u2014 Make the current process a session leader          Description       int posix_setsid     ( void    )        Make the current process a session leader.             Return Values       Returns the session id, or -1 on errors.            See Also                  The POSIX.1 and the setsid(2) manual page on the POSIX system for more      information on process groups and job control."},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-strerror.php","title":"posix_strerror","description":"posix_strerror   (PHP 4 >= 4.2.0, PHP 5)posix_strerror \u2014 Retrieve the system error message associated with the given errno          Description       string posix_strerror     ( int $errno    )        Returns the POSIX system error message associated with the given    errno.  You may get the    errno parameter by calling    posix_get_last_error().            Parameters                    errno                      A POSIX error number, returned by         posix_get_last_error(). If set to 0, then the        string \"Success\" is returned.                                     Return Values       Returns the error message, as a string.            Examples            Example #1 posix_strerror() example     This example will attempt to kill a process which does not     exist, then will print out the corresponding error message.       <?phpposix_kill(50,SIGKILL);echo\u00a0posix_strerror(posix_get_last_error()).\"\\n\";?>             The above example will output something similar to:       No such process                      See Also            posix_get_last_error() - Retrieve the error number set by the last posix function that failed"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setuid.php","title":"posix_setuid","description":"posix_setuid   (PHP 4, PHP 5)posix_setuid \u2014 Set the UID of the current process          Description       bool posix_setuid     ( int $uid    )        Set the real user ID of the current process. This is a privileged    function that needs appropriate privileges (usually root) on    the system to be able to perform this function.            Parameters                    uid                      The user id.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 posix_setuid() example     This example will show the current user id and then set      it to a different value.       <?phpecho\u00a0posix_getuid().\"\\n\";\u00a0\/\/10001echo\u00a0posix_geteuid().\"\\n\";\u00a0\/\/10001posix_setuid(10000);echo\u00a0posix_getuid().\"\\n\";\u00a0\/\/10000echo\u00a0posix_geteuid().\"\\n\";\u00a0\/\/10000?>                        See Also            posix_setgid() - Set the GID of the current process     posix_seteuid() - Set the effective UID of the current process     posix_getuid() - Return the real user ID of the current process     posix_geteuid() - Return the effective user ID of the current process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-times.php","title":"posix_times","description":"posix_times   (PHP 4, PHP 5)posix_times \u2014 Get process times          Description       array posix_times     ( void    )        Gets information about the current CPU usage.            Return Values       Returns a hash of strings with information about the current    process CPU usage. The indices of the hash are:                      ticks - the number of clock ticks that have elapsed since       reboot.                             utime - user time used by the current process.                             stime - system time used by the current process.                             cutime - user time used by current process and children.                             cstime - system time used by current process and children.                           Notes   Warning         This function isn&#039;t reliable to use, it may return negative values for     high times.                Examples            Example #1 Example use of posix_times()       <?php$times\u00a0=\u00a0posix_times();print_r($times);?>             The above example will output something similar to:       Array (     [ticks] => 25814410     [utime] => 1     [stime] => 1     [cutime] => 0     [cstime] => 0 )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-ttyname.php","title":"posix_ttyname","description":"posix_ttyname   (PHP 4, PHP 5)posix_ttyname \u2014 Determine terminal device name          Description       string posix_ttyname     ( int $fd    )        Returns a string for the absolute path to the current    terminal device that is open on the file descriptor    fd.            Parameters                    fd                      The file descriptor.                                     Return Values       On success, returns a string of the absolute path of the    fd. On failure, returns FALSE"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-uname.php","title":"posix_uname","description":"posix_uname   (PHP 4, PHP 5)posix_uname \u2014 Get system name          Description       array posix_uname     ( void    )        Gets information about the system.          Posix requires that assumptions must not be made about the    format of the values, e.g. the assumption that a release may contain    three digits or anything else returned by this function.            Return Values       Returns a hash of strings with information about the    system. The indices of the hash are                sysname - operating system name (e.g. Linux)                  nodename - system name (e.g. valiant)                  release - operating system release (e.g. 2.2.10)                  version - operating system version (e.g. #4 Tue Jul 20       17:01:36 MEST 1999)                  machine - system architecture (e.g. i586)                  domainname - DNS domainname (e.g. example.com)                    domainname is a GNU extension and not part of POSIX.1, so this    field is only available on GNU systems or when using the GNU    libc.            Examples            Example #1 Example use of posix_uname()       <?php$uname=posix_uname();print_r($uname);?>             The above example will output something similar to:       Array (     [sysname] => Linux     [nodename] => funbox     [release] => 2.6.20-15-server     [version] => #2 SMP Sun Apr 15 07:41:34 UTC 2007     [machine] => i686 )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-add-history.php","title":"readline_add_history","description":"readline_add_history   (PHP 4, PHP 5)readline_add_history \u2014 Adds a line to the history          Description       bool readline_add_history     ( string $line    )        This function adds a line to the command line history.            Parameters                    line                      The line to be added in the history.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-callback-handler-install.php","title":"readline_callback_handler_install","description":"readline_callback_handler_install   (PHP 5 >= 5.1.0)readline_callback_handler_install \u2014 Initializes the readline callback interface and terminal, prints the prompt and returns immediately          Description       bool readline_callback_handler_install     ( string $prompt    , callback $callback    )        Sets up a readline callback interface then prints    prompt and immediately returns.      Calling this function twice without removing the previous    callback interface will automatically and conveniently overwrite the old    interface.          The callback feature is useful when combined with    stream_select() as it allows interleaving of IO and    user input, unlike readline().            Parameters                    prompt                      The prompt message.                                callback                      The callback function takes one parameter; the        user input returned.                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 Readline Callback Interface Example       <?phpfunction\u00a0rl_callback($ret){\u00a0\u00a0\u00a0\u00a0global\u00a0$c,\u00a0$prompting;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"You\u00a0entered:\u00a0$ret\\n\";\u00a0\u00a0\u00a0\u00a0$c++;\u00a0\u00a0\u00a0\u00a0if\u00a0($c\u00a0>\u00a010)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$prompting\u00a0=\u00a0false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readline_callback_handler_remove();\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readline_callback_handler_install(\"[$c]\u00a0Enter\u00a0something:\u00a0\",\u00a0'rl_callback');\u00a0\u00a0\u00a0\u00a0}}$c\u00a0=\u00a01;$prompting\u00a0=\u00a0true;readline_callback_handler_install(\"[$c]\u00a0Enter\u00a0something:\u00a0\",\u00a0'rl_callback');while\u00a0($prompting)\u00a0{\u00a0\u00a0\u00a0\u00a0$w\u00a0=\u00a0NULL;\u00a0\u00a0\u00a0\u00a0$e\u00a0=\u00a0NULL;\u00a0\u00a0\u00a0\u00a0$n\u00a0=\u00a0stream_select($r\u00a0=\u00a0array(STDIN),\u00a0$w,\u00a0$e,\u00a0null);\u00a0\u00a0\u00a0\u00a0if\u00a0($n\u00a0&&\u00a0in_array(STDIN,\u00a0$r))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0read\u00a0a\u00a0character,\u00a0will\u00a0call\u00a0the\u00a0callback\u00a0when\u00a0a\u00a0newline\u00a0is\u00a0entered\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readline_callback_read_char();\u00a0\u00a0\u00a0\u00a0}}echo\u00a0\"Prompting\u00a0disabled.\u00a0All\u00a0done.\\n\";?>                        See Also            readline_callback_handler_remove() - Removes a previously installed callback handler and restores terminal settings     readline_callback_read_char() - Reads a character and informs the readline callback interface when a line is received     stream_select() - Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-callback-handler-remove.php","title":"readline_callback_handler_remove","description":"readline_callback_handler_remove   (PHP 5 >= 5.1.0)readline_callback_handler_remove \u2014 Removes a previously installed callback handler and restores terminal settings          Description       bool readline_callback_handler_remove     ( void    )        Removes a previously installed callback handler and restores terminal    settings.            Return Values       Returns TRUE if a previously installed callback handler was removed, or    FALSE if one could not be found.             Examples       See readline_callback_handler_install() for an example    of how to use the readline callback interface.            See Also            readline_callback_handler_install() - Initializes the readline callback interface and terminal, prints the prompt and returns immediately     readline_callback_read_char() - Reads a character and informs the readline callback interface when a line is received"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-callback-read-char.php","title":"readline_callback_read_char","description":"readline_callback_read_char   (PHP 5 >= 5.1.0)readline_callback_read_char \u2014 Reads a character and informs the readline callback interface when a line is received          Description       void readline_callback_read_char     ( void    )        Reads a character of user input. When a line is received, this function    informs the readline callback interface installed using    readline_callback_handler_install() that a line    is ready for input.            Return Values       No value is returned.             Examples       See readline_callback_handler_install() for an example    of how to use the readline callback interface.            See Also            readline_callback_handler_install() - Initializes the readline callback interface and terminal, prints the prompt and returns immediately     readline_callback_handler_remove() - Removes a previously installed callback handler and restores terminal settings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-clear-history.php","title":"readline_clear_history","description":"readline_clear_history   (PHP 4, PHP 5)readline_clear_history \u2014 Clears the history          Description       bool readline_clear_history     ( void    )        This function clears the entire command line history.            Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-completion-function.php","title":"readline_completion_function","description":"readline_completion_function   (PHP 4, PHP 5)readline_completion_function \u2014 Registers a completion function          Description       bool readline_completion_function     ( callback $function    )        This function registers a completion function. This is the same kind of    functionality you&#039;d get if you hit your tab key while using Bash.            Parameters                    function                      You must supply the name of an existing function which accepts a        partial command line and returns an array of possible matches.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-info.php","title":"readline_info","description":"readline_info   (PHP 4, PHP 5)readline_info \u2014 Gets\/sets various internal readline variables          Description       mixed readline_info     ([ string $varname    [, string $newvalue   ]] )        Gets or sets various internal readline variables.            Parameters                    varname                      A variable name.                                newvalue                      If provided, this will be the new value of the setting.                                     Return Values       If called with no parameters, this function returns an array of    values for all the setting readline uses.  The elements will    be indexed by the following values: done, end, erase_empty_line,    library_version, line_buffer, mark, pending_input, point, prompt,    readline_name, and terminal_name.          If called with one or two parameters, the old value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-list-history.php","title":"readline_list_history","description":"readline_list_history   (PHP 4, PHP 5)readline_list_history \u2014 Lists the history          Description       array readline_list_history     ( void    )        Gets the entire command line history.            Return Values       Returns an array of the entire command line history.  The elements are    indexed by integers starting at zero."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-on-new-line.php","title":"readline_on_new_line","description":"readline_on_new_line   (PHP 5 >= 5.1.0)readline_on_new_line \u2014 Inform readline that the cursor has moved to a new line          Description       void readline_on_new_line     ( void    )        Tells readline that the cursor has moved to a new line.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-read-history.php","title":"readline_read_history","description":"readline_read_history   (PHP 4, PHP 5)readline_read_history \u2014 Reads the history          Description       bool readline_read_history     ([ string $filename   ] )        This function reads a command history from a file.            Parameters                    filename                      Path to the filename containing the command history.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-redisplay.php","title":"readline_redisplay","description":"readline_redisplay   (PHP 5 >= 5.1.0)readline_redisplay \u2014 Redraws the display          Description       void readline_redisplay     ( void    )        Redraws readline to redraw the display.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-write-history.php","title":"readline_write_history","description":"readline_write_history   (PHP 4, PHP 5)readline_write_history \u2014 Writes the history          Description       bool readline_write_history     ([ string $filename   ] )        This function writes the command history to a file.            Parameters                    filename                      Path to the saved file.                                     Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-affected-rows.php","title":"pg_affected_rows","description":"pg_affected_rows   (PHP 4 >= 4.2.0, PHP 5)pg_affected_rows \u2014 Returns number of affected records (tuples)         Description       int pg_affected_rows     ( resource $result    )        pg_affected_rows() returns the number of tuples    (instances\/records\/rows) affected by INSERT,     UPDATE, and DELETE    queries.       Note:          This function used to be called pg_cmdtuples().               Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       The number of rows affected by the query.  If no tuple is    affected, it will return 0.             Examples            Example #1 pg_affected_rows() example       <?php$result\u00a0=\u00a0pg_query($conn,\u00a0\"INSERT\u00a0INTO\u00a0authors\u00a0VALUES\u00a0('Orwell',\u00a02002,\u00a0'Animal\u00a0Farm')\");$cmdtuples\u00a0=\u00a0pg_affected_rows($result);echo\u00a0$cmdtuples\u00a0.\u00a0\"\u00a0tuples\u00a0are\u00a0affected.\\n\";?>             The above example will output:       1 tuples are affected.                      See Also            pg_query() - Execute a query     pg_query_params() - Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.     pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.     pg_num_rows() - Returns the number of rows in a result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline.php","title":"readline","description":"readline   (PHP 4, PHP 5)readline \u2014 Reads a line          Description       string readline     ([ string $prompt   ] )        Reads a single line from the user. You must add this line to the history    yourself using readline_add_history().            Parameters                    prompt                      You may specify a string with which to prompt the user.                                     Return Values       Returns a single string from the user. The line returned has the ending    newline removed.            Examples            Example #1 readline() Example       <?php\/\/get\u00a03\u00a0commands\u00a0from\u00a0userfor\u00a0($i=0;\u00a0$i\u00a0<\u00a03;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$line\u00a0=\u00a0readline(\"Command:\u00a0\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readline_add_history($line);}\/\/dump\u00a0historyprint_r(readline_list_history());\/\/dump\u00a0variablesprint_r(readline_info());?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-client-encoding.php","title":"pg_client_encoding","description":"pg_client_encoding   (PHP 4 >= 4.0.3, PHP 5)pg_client_encoding \u2014     Gets the client encoding            Description            string pg_client_encoding     ([ resource $connection   ] )        PostgreSQL supports automatic character set conversion between     server and client for certain character sets.    pg_client_encoding() returns the client    encoding as a string. The returned string will be one of the    standard PostgreSQL encoding identifiers.      Note:          This function requires PHP 4.0.3 or higher and PostgreSQL 7.0 or     higher. If libpq is compiled without multibyte encoding support,     pg_client_encoding() always returns     SQL_ASCII. Supported encoding depends on PostgreSQL     version.  Refer to the PostgreSQL Documentation supported encodings.             The function used to be called pg_clientencoding().               Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values        The client encoding, or FALSE on error.             Examples            Example #1 pg_client_encoding() example       <?php\/\/\u00a0Assume\u00a0$conn\u00a0is\u00a0a\u00a0connection\u00a0to\u00a0a\u00a0ISO-8859-1\u00a0database$encoding\u00a0=\u00a0pg_client_encoding($conn);echo\u00a0\"Client\u00a0encoding\u00a0is:\u00a0\",\u00a0$encoding,\u00a0\"\\n\";?>             The above example will output:       Client encoding is: ISO-8859-1                       See Also            pg_set_client_encoding() - Set the client encoding"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-cancel-query.php","title":"pg_cancel_query","description":"pg_cancel_query   (PHP 4 >= 4.2.0, PHP 5)pg_cancel_query \u2014     Cancel an asynchronous query            Description       bool pg_cancel_query     ( resource $connection    )        pg_cancel_query() cancels an asynchronous query sent with     pg_send_query(), pg_send_query_params()    or pg_send_execute(). You cannot cancel a query executed using     pg_query().            Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values         Returns TRUE on success or FALSE on failure.              Examples            Example #1 pg_cancel_query() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors;\u00a0select\u00a0count(*)\u00a0from\u00a0authors;\");\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0\"First\u00a0call\u00a0to\u00a0pg_get_result():\u00a0$res1\\n\";\u00a0\u00a0$rows1\u00a0=\u00a0pg_num_rows($res1);\u00a0\u00a0echo\u00a0\"$res1\u00a0has\u00a0$rows1\u00a0records\\n\\n\";\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Cancel\u00a0the\u00a0currently\u00a0running\u00a0query.\u00a0\u00a0Will\u00a0be\u00a0the\u00a0second\u00a0query\u00a0if\u00a0it\u00a0is\u00a0\u00a0\/\/\u00a0still\u00a0running.\u00a0\u00a0pg_cancel_query($dbconn);?>             The above example will output:       First call to pg_get_result(): Resource id #3 Resource id #3 has 3 records                        See Also            pg_send_query() - Sends asynchronous query     pg_connection_busy() - Get connection is busy or not"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-close.php","title":"pg_close","description":"pg_close   (PHP 4, PHP 5)pg_close \u2014 Closes a PostgreSQL connection         Description       bool pg_close     ([ resource $connection   ] )        pg_close() closes the non-persistent    connection to a PostgreSQL database associated with the given    connection resource.      Note:          Using pg_close() is not usually necessary, as     non-persistent open connections are automatically closed at the end     of the script.              If there is open large object resource on the connection, do not    close the connection before closing all large object resources.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_close() example       <?php$dbconn\u00a0=\u00a0pg_connect(\"host=localhost\u00a0port=5432\u00a0dbname=mary\")\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");echo\u00a0\"Connected\u00a0successfully\";pg_close($dbconn);?>             The above example will output:       Connected successfully                       See Also            pg_connect() - Open a PostgreSQL connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connection-busy.php","title":"pg_connection_busy","description":"pg_connection_busy   (PHP 4 >= 4.2.0, PHP 5)pg_connection_busy \u2014     Get connection is busy or not            Description       bool pg_connection_busy     ( resource $connection    )        pg_connection_busy() determines whether or not a connection    is busy.  If it is busy, a previous query is still executing.    If pg_get_result() is used on the connection, it will be blocked.            Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values         Returns TRUE if the connection is busy, FALSE otherwise.              Examples            Example #1 pg_connection_busy() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$bs\u00a0=\u00a0pg_connection_busy($dbconn);\u00a0\u00a0if\u00a0($bs)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'connection\u00a0is\u00a0busy';\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'connection\u00a0is\u00a0not\u00a0busy';\u00a0\u00a0}?>                        See Also            pg_connection_status() - Get connection status     pg_get_result() - Get asynchronous query result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connection-reset.php","title":"pg_connection_reset","description":"pg_connection_reset   (PHP 4 >= 4.2.0, PHP 5)pg_connection_reset \u2014     Reset connection (reconnect)            Description       bool pg_connection_reset     ( resource $connection    )        pg_connection_reset() resets the connection.    It is useful for error recovery.            Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values         Returns TRUE on success or FALSE on failure.              Examples            Example #1 pg_connection_reset() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$dbconn2\u00a0=\u00a0pg_connection_reset($dbconn);\u00a0\u00a0if\u00a0($dbconn2)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"reset\u00a0successful\\n\";\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"reset\u00a0failed\\n\";\u00a0\u00a0}?>                        See Also            pg_connect() - Open a PostgreSQL connection     pg_pconnect() - Open a persistent PostgreSQL connection     pg_connection_status() - Get connection status"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connection-status.php","title":"pg_connection_status","description":"pg_connection_status   (PHP 4 >= 4.2.0, PHP 5)pg_connection_status \u2014     Get connection status            Description       int pg_connection_status     ( resource $connection    )        pg_connection_status() returns the status of    the specified connection.            Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values         PGSQL_CONNECTION_OK or      PGSQL_CONNECTION_BAD.              Examples            Example #1 pg_connection_status() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$stat\u00a0=\u00a0pg_connection_status($dbconn);\u00a0\u00a0if\u00a0($stat\u00a0===\u00a0PGSQL_CONNECTION_OK)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0status\u00a0ok';\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0status\u00a0bad';\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0?>                        See Also            pg_connection_busy() - Get connection is busy or not"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connect.php","title":"pg_connect","description":"pg_connect   (PHP 4, PHP 5)pg_connect \u2014 Open a PostgreSQL connection         Description       resource pg_connect     ( string $connection_string    [, int $connect_type   ] )        pg_connect() opens a connection to a    PostgreSQL database specified by the    connection_string.          If a second call is made to pg_connect() with    the same connection_string as an existing connection, the    existing connection will be returned unless you pass    PGSQL_CONNECT_FORCE_NEW as    connect_type.          The old syntax with multiple parameters    $conn = pg_connect(\"host\", \"port\", \"options\", \"tty\", \"dbname\")     has been deprecated.           Parameters                    connection_string                      The connection_string can be empty to use all default parameters, or it         can contain one or more parameter settings separated by whitespace.         Each parameter setting is in the form keyword = value. Spaces around         the equal sign are optional. To write an empty value or a value         containing spaces, surround it with single quotes, e.g., keyword =         &#039;a value&#039;. Single quotes and backslashes within the value must be         escaped with a backslash, i.e., \\&#039; and \\\\.                        The currently recognized parameter keywords are:        host, hostaddr, port,        dbname (defaults to value of user),        user,        password, connect_timeout,        options, tty (ignored), sslmode,        requiressl (deprecated in favor of sslmode), and        service.  Which of these arguments exist depends        on your PostgreSQL version.                      The options parameter can be used to set command line parameters         to be invoked by the server.                                connect_type                      If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection        is created, even if the connection_string is identical to        an existing connection.                                     Return Values       PostgreSQL connection resource on success, FALSE on failure.             Examples            Example #1 Using pg_connect()       <?php$dbconn\u00a0=\u00a0pg_connect(\"dbname=mary\");\/\/connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"$dbconn2\u00a0=\u00a0pg_connect(\"host=localhost\u00a0port=5432\u00a0dbname=mary\");\/\/\u00a0connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"\u00a0on\u00a0\"localhost\"\u00a0at\u00a0port\u00a0\"5432\"$dbconn3\u00a0=\u00a0pg_connect(\"host=sheep\u00a0port=5432\u00a0dbname=mary\u00a0user=lamb\u00a0password=foo\");\/\/connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"\u00a0on\u00a0the\u00a0host\u00a0\"sheep\"\u00a0with\u00a0a\u00a0username\u00a0and\u00a0password$conn_string\u00a0=\u00a0\"host=sheep\u00a0port=5432\u00a0dbname=test\u00a0user=lamb\u00a0password=bar\";$dbconn4\u00a0=\u00a0pg_connect($conn_string);\/\/connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"test\"\u00a0on\u00a0the\u00a0host\u00a0\"sheep\"\u00a0with\u00a0a\u00a0username\u00a0and\u00a0password$dbconn5\u00a0=\u00a0pg_connect(\"host=localhost\u00a0options='--client_encoding=UTF8'\");\/\/connect\u00a0to\u00a0a\u00a0database\u00a0on\u00a0\"localhost\"\u00a0and\u00a0set\u00a0the\u00a0command\u00a0line\u00a0parameter\u00a0which\u00a0tells\u00a0the\u00a0encoding\u00a0is\u00a0in\u00a0UTF-8?>                        See Also            pg_pconnect() - Open a persistent PostgreSQL connection     pg_close() - Closes a PostgreSQL connection     pg_host() - Returns the host name associated with the connection     pg_port() - Return the port number associated with the connection     pg_tty() - Return the TTY name associated with the connection     pg_options() - Get the options associated with the connection     pg_dbname() - Get the database name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-convert.php","title":"pg_convert","description":"pg_convert   (PHP 4 >= 4.3.0, PHP 5)pg_convert \u2014     Convert associative array values into suitable for SQL statement            Description       array pg_convert     ( resource $connection    , string $table_name    , array $assoc_array    [, int $options = 0   ] )        pg_convert() checks and converts the values in    assoc_array into suitable values for use in an SQL    statement. Precondition for pg_convert() is the     existence of a table table_name which has at least    as many columns as assoc_array has elements. The    fieldnames in table_name must match the indices in    assoc_array and the corresponding datatypes must be    compatible. Returns an array with the converted values on success, FALSE    otherwise.      Note:          If there are boolean fields in table_name don&#039;t      use the constant TRUE in assoc_array. It will be     converted to the string &#039;TRUE&#039; which is no valid entry for boolean fields     in PostgreSQL. Use one of t, true, 1, y, yes instead.          WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table against which to convert types.                                assoc_array                      Data to be converted.                                options                      Any number of PGSQL_CONV_IGNORE_DEFAULT,         PGSQL_CONV_FORCE_NULL or        PGSQL_CONV_IGNORE_NOT_NULL, combined.                                     Return Values       An array of converted values, or FALSE on error.            Examples            Example #1 pg_convert() example       <?php\u00a0\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\u00a0\u00a0$tmp\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'author'\u00a0=>\u00a0'Joe\u00a0Thackery',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'year'\u00a0=>\u00a02005,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'title'\u00a0=>\u00a0'My\u00a0Life,\u00a0by\u00a0Joe\u00a0Thackery'\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0$vals\u00a0=\u00a0pg_convert($dbconn,\u00a0'authors',\u00a0$tmp);?>                        See Also            pg_meta_data() - Get meta data for table"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-copy-to.php","title":"pg_copy_to","description":"pg_copy_to   (PHP 4 >= 4.2.0, PHP 5)pg_copy_to \u2014     Copy a table to an array            Description       array pg_copy_to     ( resource $connection    , string $table_name    [, string $delimiter    [, string $null_as   ]] )        pg_copy_to() copies a table to an array. It    issues COPY TO SQL command internally to    retrieve records.            Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table from which to copy the data into rows.                                delimiter                      The token that separates values for each field in each element of        rows.  Default is TAB.                                null_as                      How SQL NULL values are represented in the        rows.  Default is \\N (\"\\\\N\").                                     Return Values         An array with one element for each line of COPY data.     It returns FALSE on failure.             Examples            Example #1 pg_copy_to() example       <?php\u00a0\u00a0\u00a0$db\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$rows\u00a0=\u00a0pg_copy_to($db,\u00a0$table_name);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_query($db,\u00a0\"DELETE\u00a0FROM\u00a0$table_name\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_copy_from($db,\u00a0$table_name,\u00a0$rows);?>                          See Also            pg_copy_from() - Insert records into a table from an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-copy-from.php","title":"pg_copy_from","description":"pg_copy_from   (PHP 4 >= 4.2.0, PHP 5)pg_copy_from \u2014     Insert records into a table from an array            Description       bool pg_copy_from     ( resource $connection    , string $table_name    , array $rows    [, string $delimiter    [, string $null_as   ]] )        pg_copy_from() inserts records into a table from     rows. It issues a COPY FROM SQL command     internally to insert records.            Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table into which to copy the rows.                                rows                      An array of data to be copied into table_name.        Each value in rows becomes a row in table_name.        Each value in rows should be a delimited string of the values        to insert into each field.  Values should be linefeed terminated.                                delimiter                      The token that separates values for each field in each element of        rows.  Default is TAB.                                null_as                      How SQL NULL values are represented in the        rows.  Default is \\N (\"\\\\N\").                                     Return Values         Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_copy_from() example       <?php\u00a0\u00a0\u00a0$db\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$rows\u00a0=\u00a0pg_copy_to($db,\u00a0$table_name);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_query($db,\u00a0\"DELETE\u00a0FROM\u00a0$table_name\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_copy_from($db,\u00a0$table_name,\u00a0$rows);?>                           See Also            pg_copy_to() - Copy a table to an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-dbname.php","title":"pg_dbname","description":"pg_dbname   (PHP 4, PHP 5)pg_dbname \u2014 Get the database name         Description       string pg_dbname     ([ resource $connection   ] )        pg_dbname() returns the name of the database    that the given PostgreSQL connection    resource.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       A string containing the name of the database the     connection is to, or FALSE on error.             Examples            Example #1 pg_dbname() example       <?php\u00a0\u00a0error_reporting(E_ALL);\u00a0\u00a0pg_connect(\"host=localhost\u00a0port=5432\u00a0dbname=mary\");\u00a0\u00a0echo\u00a0pg_dbname();\u00a0\/\/\u00a0mary?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-end-copy.php","title":"pg_end_copy","description":"pg_end_copy   (PHP 4 >= 4.0.3, PHP 5)pg_end_copy \u2014 Sync with PostgreSQL backend         Description       bool pg_end_copy     ([ resource $connection   ] )        pg_end_copy() syncs the PostgreSQL frontend    (usually a web server process) with the PostgreSQL server after    doing a copy operation performed by    pg_put_line(). pg_end_copy()    must be issued, otherwise the PostgreSQL server may get out of    sync with the frontend and will report an error.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 pg_end_copy() example       <?php\u00a0\u00a0\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=foo\");\u00a0\u00a0pg_query($conn,\u00a0\"create\u00a0table\u00a0bar\u00a0(a\u00a0int4,\u00a0b\u00a0char(16),\u00a0d\u00a0float8)\");\u00a0\u00a0pg_query($conn,\u00a0\"copy\u00a0bar\u00a0from\u00a0stdin\");\u00a0\u00a0pg_put_line($conn,\u00a0\"3\\thello\u00a0world\\t4.5\\n\");\u00a0\u00a0pg_put_line($conn,\u00a0\"4\\tgoodbye\u00a0world\\t7.11\\n\");\u00a0\u00a0pg_put_line($conn,\u00a0\"\\\\.\\n\");\u00a0\u00a0pg_end_copy($conn);?>                        See Also            pg_put_line() - Send a NULL-terminated string to PostgreSQL backend"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-identifier.php","title":"pg_escape_identifier","description":"pg_escape_identifier   (No version information available, might only be in SVN)pg_escape_identifier \u2014     Escape a identifier for insertion into a text field            Description       string pg_escape_identifier     ([ resource $connection    ], string $data    )        pg_escape_identifier() escapes a identifier    (e.g. table, field names) for quering the database.  It returns an    escaped identifier string for PostgreSQL    server. pg_escape_identifier() adds double    quotes before and after data. Users should not add double    quotes. Use of this function is recommended for identifier    parameters in query. For SQL literals (i.e. parameters except    bytea), pg_escape_literal()    or pg_escape_string() muse be used. For bytea    type fields, pg_escape_bytea() must be used    instead.      Note:          This function has internal escape code and can also be used with     PostgreSQL 8.4 or less.                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                data                      A string containing text to be escaped.                                     Return Values       A string containing the escaped data.              Examples            Example #1 pg_escape_identifier() example       <?php\u00a0\u00a0\u00a0\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Escape\u00a0the\u00a0table\u00a0name\u00a0data\u00a0\u00a0$escaped\u00a0=\u00a0pg_escape_identifier($table_name);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Select\u00a0rows\u00a0from\u00a0$table_name\u00a0\u00a0pg_query(\"SELECT\u00a0*\u00a0FROM\u00a0{$escaped};\");?>                         See Also            pg_escape_literal() - Escape a literal for insertion into a text field     pg_escape_bytea() - Escape a string for insertion into a bytea field     pg_escape_string() - Escape a string for query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-literal.php","title":"pg_escape_literal","description":"pg_escape_literal   (No version information available, might only be in SVN)pg_escape_literal \u2014     Escape a literal for insertion into a text field            Description       string pg_escape_literal     ([ resource $connection    ], string $data    )        pg_escape_literal() escapes a literal for    querying the PostgreSQL database. It returns an escaped literal in    the PostgreSQL format. pg_escape_literal() adds    quotes before and after data. Users should not add quotes. Use of    this function is recommended instead    of pg_escape_string().  If the type of the    column is bytea, pg_escape_bytea() must be used    instead. For escaping identifiers (e.g. table, field    names), pg_escape_identifier() must be used.      Note:          This function has internal escape code and can also be used with     PostgreSQL 8.4 or less.                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                data                      A string containing text to be escaped.                                     Return Values       A string containing the escaped data.              Examples            Example #1 pg_escape_literal() example       <?php\u00a0\u00a0\u00a0\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Read\u00a0in\u00a0a\u00a0text\u00a0file\u00a0(containing\u00a0apostrophes\u00a0and\u00a0backslashes)\u00a0\u00a0$data\u00a0=\u00a0file_get_contents('letter.txt');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Escape\u00a0the\u00a0text\u00a0data\u00a0\u00a0$escaped\u00a0=\u00a0pg_escape_literal($data);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Insert\u00a0it\u00a0into\u00a0the\u00a0database.\u00a0Note\u00a0that\u00a0no\u00a0quotes\u00a0around\u00a0{$escaped}\u00a0\u00a0pg_query(\"INSERT\u00a0INTO\u00a0correspondence\u00a0(name,\u00a0data)\u00a0VALUES\u00a0('My\u00a0letter',\u00a0{$escaped})\");?>                         See Also            pg_escape_identifier() - Escape a identifier for insertion into a text field     pg_escape_bytea() - Escape a string for insertion into a bytea field     pg_escape_string() - Escape a string for query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-delete.php","title":"pg_delete","description":"pg_delete   (PHP 4 >= 4.3.0, PHP 5)pg_delete \u2014     Deletes records            Description       mixed pg_delete     ( resource $connection    , string $table_name    , array $assoc_array    [, int $options = PGSQL_DML_EXEC   ] )        pg_delete() deletes records from a table specified by    the keys and values in assoc_array. If options is    specified, pg_convert() is applied    to assoc_array with the specified options.           Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table from which to delete rows.                                assoc_array                      An array whose keys are field names in the table table_name,        and whose values are the values of those fields that are to be deleted.                                options                      Any number of PGSQL_CONV_FORCE_NULL,         PGSQL_DML_NO_CONV,        PGSQL_DML_EXEC or        PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the        options then query string is returned.                                     Return Values       Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed    via options.             Examples            Example #1 pg_delete() example       <?php\u00a0\u00a0\u00a0$db\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\/\/\u00a0This\u00a0is\u00a0safe,\u00a0since\u00a0$_POST\u00a0is\u00a0converted\u00a0automatically\u00a0\u00a0$res\u00a0=\u00a0pg_delete($db,\u00a0'post_log',\u00a0$_POST);\u00a0\u00a0if\u00a0($res)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"POST\u00a0data\u00a0is\u00a0deleted:\u00a0$res\\n\";\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"User\u00a0must\u00a0have\u00a0sent\u00a0wrong\u00a0inputs\\n\";\u00a0\u00a0}?>                  WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          See Also            pg_convert() - Convert associative array values into suitable for SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-bytea.php","title":"pg_escape_bytea","description":"pg_escape_bytea   (PHP 4 >= 4.2.0, PHP 5)pg_escape_bytea \u2014     Escape a string for insertion into a bytea field            Description       string pg_escape_bytea     ([ resource $connection    ], string $data    )        pg_escape_bytea() escapes string for    bytea datatype.  It returns escaped string.      Note:          When you SELECT a bytea type, PostgreSQL returns octal byte values     prefixed with &#039;\\&#039; (e.g. \\032). Users are supposed to convert back to     binary format manually.             This function requires PostgreSQL 7.2 or later. With PostgreSQL     7.2.0 and 7.2.1, bytea values must be cast when you enable     multi-byte support. i.e. INSERT INTO test_table (image)     VALUES (&#039;$image_escaped&#039;::bytea); PostgreSQL 7.2.2 or     later does not need a cast. The exception is when the client and backend     character encoding does not match, and there may be multi-byte     stream error. User must then cast to bytea to avoid this error.               Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                data                      A string containing text or binary data to be inserted into a bytea        column.                                     Return Values       A string containing the escaped data.            Changelog                                 Version        Description                                    5.2.0        connection added                                    Examples            Example #1 pg_escape_bytea() example       <?php\u00a0\u00a0\u00a0\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Read\u00a0in\u00a0a\u00a0binary\u00a0file\u00a0\u00a0$data\u00a0=\u00a0file_get_contents('image1.jpg');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Escape\u00a0the\u00a0binary\u00a0data\u00a0\u00a0$escaped\u00a0=\u00a0pg_escape_bytea($data);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Insert\u00a0it\u00a0into\u00a0the\u00a0database\u00a0\u00a0pg_query(\"INSERT\u00a0INTO\u00a0gallery\u00a0(name,\u00a0data)\u00a0VALUES\u00a0('Pine\u00a0trees',\u00a0'{$escaped}')\");?>                         See Also            pg_unescape_bytea() - Unescape binary for bytea type     pg_escape_string() - Escape a string for query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-string.php","title":"pg_escape_string","description":"pg_escape_string   (PHP 4 >= 4.2.0, PHP 5)pg_escape_string \u2014     Escape a string for query            Description       string pg_escape_string     ([ resource $connection    ], string $data    )        pg_escape_string() escapes a string for querying    the database.  It returns an escaped string in the PostgreSQL    format without quotes. pg_escape_literal() is    more preferred way to escape SQL parameters for PostgreSQL.    addslashes() must not be used with PostgreSQL.    If the type of the column is    bytea, pg_escape_bytea() must be used    instead. pg_escape_identifier() must be used to    escape identifiers (e.g. table names, field names)      Note:          This function requires PostgreSQL 7.2 or later.                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                data                      A string containing text to be escaped.                                     Return Values       A string containing the escaped data.            Changelog                                 Version        Description                                    5.2.0        connection added                                    Examples            Example #1 pg_escape_string() example       <?php\u00a0\u00a0\u00a0\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Read\u00a0in\u00a0a\u00a0text\u00a0file\u00a0(containing\u00a0apostrophes\u00a0and\u00a0backslashes)\u00a0\u00a0$data\u00a0=\u00a0file_get_contents('letter.txt');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Escape\u00a0the\u00a0text\u00a0data\u00a0\u00a0$escaped\u00a0=\u00a0pg_escape_string($data);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Insert\u00a0it\u00a0into\u00a0the\u00a0database\u00a0\u00a0pg_query(\"INSERT\u00a0INTO\u00a0correspondence\u00a0(name,\u00a0data)\u00a0VALUES\u00a0('My\u00a0letter',\u00a0'{$escaped}')\");?>                         See Also            pg_escape_bytea() - Escape a string for insertion into a bytea field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-execute.php","title":"pg_execute","description":"pg_execute   (PHP 5 >= 5.1.0)pg_execute \u2014 Sends a request to execute a prepared statement with given parameters, and waits for the result.         Description       resource pg_execute     ([ resource $connection    ], string $stmtname    , array $params    )         Sends a request to execute a prepared statement with given parameters, and      waits for the result.           pg_execute() is like pg_query_params(),      but the command to be executed is      specified by naming a previously-prepared statement, instead of giving a      query string. This feature allows commands that will be used repeatedly to      be parsed and planned just once, rather than each time they are executed.      The statement must have been prepared previously in the current session.      pg_execute() is supported only against PostgreSQL 7.4 or     higher connections; it will fail when using earlier versions.           The parameters are identical to pg_query_params(), except that the name of a      prepared statement is given instead of a query string.           Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                stmtname                      The name of the prepared statement to execute.  if        \"\" is specified, then the unnamed statement is executed.  The name must have        been previously prepared using pg_prepare(),         pg_send_prepare() or a PREPARE SQL        command.                                params                       An array of parameter values to substitute for the $1, $2, etc. placeholders         in the original prepared query string.  The number of elements in the array         must match the number of placeholders.              Warning                 Elements are converted to strings by calling this function.                                             Return Values        A query result resource on success or FALSE on failure.          Examples            Example #1 Using pg_execute()       <?php\/\/\u00a0Connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"$dbconn\u00a0=\u00a0pg_connect(\"dbname=mary\");\/\/\u00a0Prepare\u00a0a\u00a0query\u00a0for\u00a0execution$result\u00a0=\u00a0pg_prepare($dbconn,\u00a0\"my_query\",\u00a0'SELECT\u00a0*\u00a0FROM\u00a0shops\u00a0WHERE\u00a0name\u00a0=\u00a0$1');\/\/\u00a0Execute\u00a0the\u00a0prepared\u00a0query.\u00a0\u00a0Note\u00a0that\u00a0it\u00a0is\u00a0not\u00a0necessary\u00a0to\u00a0escape\/\/\u00a0the\u00a0string\u00a0\"Joe's\u00a0Widgets\"\u00a0in\u00a0any\u00a0way$result\u00a0=\u00a0pg_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Joe's\u00a0Widgets\"));\/\/\u00a0Execute\u00a0the\u00a0same\u00a0prepared\u00a0query,\u00a0this\u00a0time\u00a0with\u00a0a\u00a0different\u00a0parameter$result\u00a0=\u00a0pg_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Clothes\u00a0Clothes\u00a0Clothes\"));?>                         See Also            pg_prepare() - Submits a request to create a prepared statement with the    given parameters, and waits for completion.     pg_send_prepare() - Sends a request to create a prepared statement with the given parameters, without waiting for completion.     pg_query_params() - Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-all-columns.php","title":"pg_fetch_all_columns","description":"pg_fetch_all_columns   (PHP 5 >= 5.1.0)pg_fetch_all_columns \u2014 Fetches all rows in a particular result column as an array         Description       array pg_fetch_all_columns     ( resource $result    [, int $column = 0   ] )        pg_fetch_all_columns() returns an array that    contains all rows (records) in a particular column of the result resource.      Note: This function sets NULL fields to the PHP NULL value.         Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                column                      Column number, zero-based, to be retrieved from the result resource.  Defaults        to the first column if not specified.                                     Return Values       An array with all values in the result column.          FALSE is returned if column is larger than the number     of columns in the result, or on any other error.             Examples            Example #1 pg_fetch_all_columns() example       <?php\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0title,\u00a0name,\u00a0address\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}\/\/\u00a0Get\u00a0an\u00a0array\u00a0of\u00a0all\u00a0author\u00a0names$arr\u00a0=\u00a0pg_fetch_all_columns($result,\u00a01);var_dump($arr);?>                        See Also            pg_fetch_all() - Fetches all rows from a result as an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-all.php","title":"pg_fetch_all","description":"pg_fetch_all   (PHP 4 >= 4.3.0, PHP 5)pg_fetch_all \u2014 Fetches all rows from a result as an array         Description       array pg_fetch_all     ( resource $result    )        pg_fetch_all() returns an array that    contains all rows (records) in the result resource.      Note: This function sets NULL fields to the PHP NULL value.         Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       An array with all rows in the result.  Each row is an array    of field values indexed by field name.          FALSE is returned if there are no rows in the result, or on any    other error.             Examples            Example #1 PostgreSQL fetch all       <?php\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0\u00a0\u00a0exit;}$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0\u00a0\u00a0exit;}$arr\u00a0=\u00a0pg_fetch_all($result);print_r($arr);?>             The above example will output something similar to:       Array (     [0] => Array         (             [id] => 1             [name] => Fred         )      [1] => Array         (             [id] => 2             [name] => Bob         )  )                      See Also            pg_fetch_row() - Get a row as an enumerated array     pg_fetch_array() - Fetch a row as an array     pg_fetch_object() - Fetch a row as an object     pg_fetch_result() - Returns values from a result resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-array.php","title":"pg_fetch_array","description":"pg_fetch_array   (PHP 4, PHP 5)pg_fetch_array \u2014 Fetch a row as an array         Description       array pg_fetch_array     ( resource $result    [, int $row    [, int $result_type = PGSQL_BOTH   ]] )        pg_fetch_array() returns an array that    corresponds to the fetched row (record).          pg_fetch_array() is an extended version of    pg_fetch_row().  In addition to storing the    data in the numeric indices (field number) to the result array, it    can also store the data using associative indices (field name).    It stores both indicies by default.      Note: This function sets NULL fields to the PHP NULL value.       pg_fetch_array() is NOT significantly    slower than using pg_fetch_row(), and    is significantly easier to use.            Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result to fetch. Rows are numbered from 0 upwards. If        omitted or NULL, the next row is fetched.                                result_type                      An optional parameter that controls        how the returned array is indexed.        result_type is a constant and can take the        following values: PGSQL_ASSOC,         PGSQL_NUM and PGSQL_BOTH.        Using PGSQL_NUM, pg_fetch_array()        will return an array with numerical indices, using        PGSQL_ASSOC it will return only associative indices        while PGSQL_BOTH, the default, will return both        numerical and associative indices.                                     Return Values       An array indexed numerically (beginning with 0) or    associatively (indexed by field name), or both.    Each value in the array is represented as a     string.  Database NULL    values are returned as NULL.          FALSE is returned if row exceeds the number    of rows in the set, there are no more rows, or on any other error.            Changelog                                 Version        Description                                    4.1.0                 The row parameter became optional.                                            Examples            Example #1 pg_fetch_array() example       <?php\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0author,\u00a0email\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}$arr\u00a0=\u00a0pg_fetch_array($result,\u00a00,\u00a0PGSQL_NUM);echo\u00a0$arr[0]\u00a0.\u00a0\"\u00a0<-\u00a0Row\u00a01\u00a0Author\\n\";echo\u00a0$arr[1]\u00a0.\u00a0\"\u00a0<-\u00a0Row\u00a01\u00a0E-mail\\n\";\/\/\u00a0As\u00a0of\u00a0PHP\u00a04.1.0,\u00a0the\u00a0row\u00a0parameter\u00a0is\u00a0optional;\u00a0NULL\u00a0can\u00a0be\u00a0passed\u00a0instead,\/\/\u00a0to\u00a0pass\u00a0a\u00a0result_type.\u00a0\u00a0Successive\u00a0calls\u00a0to\u00a0pg_fetch_array\u00a0will\u00a0return\u00a0the\/\/\u00a0next\u00a0row.$arr\u00a0=\u00a0pg_fetch_array($result,\u00a0NULL,\u00a0PGSQL_ASSOC);echo\u00a0$arr[\"author\"]\u00a0.\u00a0\"\u00a0<-\u00a0Row\u00a02\u00a0Author\\n\";echo\u00a0$arr[\"email\"]\u00a0.\u00a0\"\u00a0<-\u00a0Row\u00a02\u00a0E-mail\\n\";$arr\u00a0=\u00a0pg_fetch_array($result);echo\u00a0$arr[\"author\"]\u00a0.\u00a0\"\u00a0<-\u00a0Row\u00a03\u00a0Author\\n\";echo\u00a0$arr[1]\u00a0.\u00a0\"\u00a0<-\u00a0Row\u00a03\u00a0E-mail\\n\";?>                        See Also            pg_fetch_row() - Get a row as an enumerated array     pg_fetch_object() - Fetch a row as an object     pg_fetch_result() - Returns values from a result resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-object.php","title":"pg_fetch_object","description":"pg_fetch_object   (PHP 4, PHP 5)pg_fetch_object \u2014 Fetch a row as an object         Description       object pg_fetch_object     ( resource $result    [, int $row    [, int $result_type = PGSQL_ASSOC   ]] )        object pg_fetch_object     ( resource $result    [, int $row    [, string $class_name    [, array $params   ]]] )        pg_fetch_object() returns an object with    properties that correspond to the fetched row&#039;s field names.  It can optionally    instantiate an object of a specific class, and pass parameters to that    class&#039;s constructor.      Note: This function sets NULL fields to the PHP NULL value.       Speed-wise, the function is identical to    pg_fetch_array(), and almost as fast as    pg_fetch_row() (the difference is    insignificant).            Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result to fetch. Rows are numbered from 0 upwards. If        omitted or NULL, the next row is fetched.                                result_type                         Ignored and deprecated.                                 class_name                         The name of the class to instantiate, set the properties of and return.         If not specified, a stdClass object is returned.                                 params                         An optional array of parameters to pass to the constructor         for class_name objects.                                      Return Values       An object with one attribute for each field    name in the result.  Database NULL    values are returned as NULL.          FALSE is returned if row exceeds the number    of rows in the set, there are no more rows, or on any other error.            Changelog                                 Version        Description                                    5.0.0                 class_name and params         were added. The old form with result_type         still exists for backwards compatibility.                               4.3.0                 result_type default changed from         PGSQL_BOTH to PGSQL_ASSOC,         since the numeric index was illegal.                               4.1.0                 The parameter row became optional.                                            Examples            Example #1 pg_fetch_object() example       <?php\u00a0$database\u00a0=\u00a0\"store\";$db_conn\u00a0=\u00a0pg_connect(\"host=localhost\u00a0port=5432\u00a0dbname=$database\");if\u00a0(!$db_conn)\u00a0{\u00a0\u00a0echo\u00a0\"Failed\u00a0connecting\u00a0to\u00a0postgres\u00a0database\u00a0$database\\n\";\u00a0\u00a0exit;}$qu\u00a0=\u00a0pg_query($db_conn,\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0books\u00a0ORDER\u00a0BY\u00a0author\");while\u00a0($data\u00a0=\u00a0pg_fetch_object($qu))\u00a0{\u00a0\u00a0echo\u00a0$data->author\u00a0.\u00a0\"\u00a0(\";\u00a0\u00a0echo\u00a0$data->year\u00a0.\u00a0\"):\u00a0\";\u00a0\u00a0echo\u00a0$data->title\u00a0.\u00a0\"<br\u00a0\/>\";}pg_free_result($qu);pg_close($db_conn);?>                        See Also            pg_query() - Execute a query     pg_fetch_array() - Fetch a row as an array     pg_fetch_assoc() - Fetch a row as an associative array     pg_fetch_row() - Get a row as an enumerated array     pg_fetch_result() - Returns values from a result resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-result.php","title":"pg_fetch_result","description":"pg_fetch_result   (PHP 4 >= 4.2.0, PHP 5)pg_fetch_result \u2014 Returns values from a result resource         Description       string pg_fetch_result     ( resource $result    , int $row    , mixed $field    )        string pg_fetch_result     ( resource $result    , mixed $field    )        pg_fetch_result() returns the value of a particular    row and field (column) in a PostgreSQL result resource.      Note:          This function used to be called pg_result().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result to fetch.  Rows are numbered from 0 upwards.  If omitted,        next row is fetched.                                field                             A string representing the name of the field (column) to fetch, otherwise        an int representing the field number to fetch.  Fields are        numbered from 0 upwards.                                     Return Values       Boolean is returned as \"t\" or \"f\".  All    other types, including arrays are returned as strings formatted    in the same default PostgreSQL manner that you would see in the    psql program.  Database NULL    values are returned as NULL.          FALSE is returned if row exceeds the number    of rows in the set, or on any other error.             Examples            Example #1 pg_fetch_result() example       <?php$db\u00a0=\u00a0pg_connect(\"dbname=users\u00a0user=me\")\u00a0||\u00a0die();$res\u00a0=\u00a0pg_query($db,\u00a0\"SELECT\u00a01\u00a0UNION\u00a0ALL\u00a0SELECT\u00a02\");$val\u00a0=\u00a0pg_fetch_result($res,\u00a01,\u00a00);echo\u00a0\"First\u00a0field\u00a0in\u00a0the\u00a0second\u00a0row\u00a0is:\u00a0\",\u00a0$val,\u00a0\"\\n\";?>             The above example will output:       First field in the second row is: 2                       See Also            pg_query() - Execute a query     pg_fetch_array() - Fetch a row as an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-row.php","title":"pg_fetch_row","description":"pg_fetch_row   (PHP 4, PHP 5)pg_fetch_row \u2014 Get a row as an enumerated array         Description       array pg_fetch_row     ( resource $result    [, int $row       ] )        pg_fetch_row() fetches one row of data from    the result associated with the specified    result resource.      Note: This function sets NULL fields to the PHP NULL value.         Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result to fetch. Rows are numbered from 0 upwards. If        omitted or NULL, the next row is fetched.                                     Return Values       An array, indexed from 0 upwards, with each value    represented as a string.  Database NULL    values are returned as NULL.          FALSE is returned if row exceeds the number    of rows in the set, there are no more rows, or on any other error.            Changelog                                 Version        Description                                    4.1.0                 The parameter row became optional.                                            Examples            Example #1 pg_fetch_row() example       <?php$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0author,\u00a0email\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}while\u00a0($row\u00a0=\u00a0pg_fetch_row($result))\u00a0{\u00a0\u00a0echo\u00a0\"Author:\u00a0$row[0]\u00a0\u00a0E-mail:\u00a0$row[1]\";\u00a0\u00a0echo\u00a0\"<br\u00a0\/>\\n\";}\u00a0?>                        See Also            pg_query() - Execute a query     pg_fetch_array() - Fetch a row as an array     pg_fetch_object() - Fetch a row as an object     pg_fetch_result() - Returns values from a result resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-num.php","title":"pg_field_num","description":"pg_field_num   (PHP 4 >= 4.2.0, PHP 5)pg_field_num \u2014 Returns the field number of the named field         Description       int pg_field_num     ( resource $result    , string $field_name    )        pg_field_num() will return the number of the    field number that corresponds to the    field_name in the given PostgreSQL    result resource.      Note:          This function used to be called pg_fieldnum().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                field_name                         The name of the field.                                      Return Values       The field number (numbered from 0), or -1 on error.             Examples            Example #1 Getting information about fields       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0author,\u00a0year,\u00a0title\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Column\u00a0'title'\u00a0is\u00a0field\u00a0number:\u00a0\",\u00a0pg_field_num($res,\u00a0'title');?>             The above example will output:       Column &#039;title&#039; is field number: 2                         See Also            pg_field_name() - Returns the name of a field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-is-null.php","title":"pg_field_is_null","description":"pg_field_is_null   (PHP 4 >= 4.2.0, PHP 5)pg_field_is_null \u2014 Test if a field is SQL NULL         Description       int pg_field_is_null     ( resource $result    , int $row    , mixed $field    )        int pg_field_is_null     ( resource $result    , mixed $field    )        pg_field_is_null() tests if a field in a PostgreSQL    result resource is SQL NULL or not.      Note:          This function used to be called pg_fieldisnull().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result to fetch.  Rows are numbered from 0 upwards.  If omitted,        current row is fetched.                                field                         Field number (starting from 0) as an integer or          the field name as a string.                                      Return Values       Returns 1 if the field in the given row is SQL NULL, 0    if not.  FALSE is returned if the row is out of range, or upon any other error.             Examples            Example #1 pg_field_is_null() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die\u00a0(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0if\u00a0($res)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(pg_field_is_null($res,\u00a00,\u00a0\"year\")\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0value\u00a0of\u00a0the\u00a0field\u00a0year\u00a0is\u00a0null.\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(pg_field_is_null($res,\u00a00,\u00a0\"year\")\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0value\u00a0of\u00a0the\u00a0field\u00a0year\u00a0is\u00a0not\u00a0null.\\n\";\u00a0\u00a0\u00a0\u00a0}\u00a0}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-assoc.php","title":"pg_fetch_assoc","description":"pg_fetch_assoc   (PHP 4 >= 4.3.0, PHP 5)pg_fetch_assoc \u2014 Fetch a row as an associative array         Description       array pg_fetch_assoc     ( resource $result    [, int $row   ] )        pg_fetch_assoc() returns an associative array that    corresponds to the fetched row (records).          pg_fetch_assoc() is equivalent to calling    pg_fetch_array() with PGSQL_ASSOC as the    optional third parameter. It only returns an associative array.    If you need the numeric indices, use     pg_fetch_row().        Note: This function sets NULL fields to the PHP NULL value.       pg_fetch_assoc() is NOT significantly    slower than using pg_fetch_row(), and    is significantly easier to use.            Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result to fetch. Rows are numbered from 0 upwards. If        omitted or NULL, the next row is fetched.                                     Return Values       An array indexed associatively (by field name).    Each value in the array is represented as a     string.  Database NULL    values are returned as NULL.          FALSE is returned if row exceeds the number    of rows in the set, there are no more rows, or on any other error.            Changelog                                 Version        Description                                    4.1.0                 The parameter row became optional.                                            Examples            Example #1 pg_fetch_assoc() example       <?php\u00a0$conn\u00a0=\u00a0pg_connect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0id,\u00a0author,\u00a0email\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}while\u00a0($row\u00a0=\u00a0pg_fetch_assoc($result))\u00a0{\u00a0\u00a0echo\u00a0$row['id'];\u00a0\u00a0echo\u00a0$row['author'];\u00a0\u00a0echo\u00a0$row['email'];}?>                        See Also            pg_fetch_row() - Get a row as an enumerated array     pg_fetch_array() - Fetch a row as an array     pg_fetch_object() - Fetch a row as an object     pg_fetch_result() - Returns values from a result resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-name.php","title":"pg_field_name","description":"pg_field_name   (PHP 4 >= 4.2.0, PHP 5)pg_field_name \u2014 Returns the name of a field         Description       string pg_field_name     ( resource $result    , int $field_number    )        pg_field_name() returns the name of the field    occupying the given field_number in the    given PostgreSQL result resource.  Field    numbering starts from 0.      Note:          This function used to be called pg_fieldname().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                field_number                         Field number, starting from 0.                                      Return Values       The field name, or FALSE on error.             Examples            Example #1 Getting information about fields       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0$i\u00a0=\u00a0pg_num_fields($res);\u00a0\u00a0for\u00a0($j\u00a0=\u00a00;\u00a0$j\u00a0<\u00a0$i;\u00a0$j++)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"column\u00a0$j\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fieldname\u00a0=\u00a0pg_field_name($res,\u00a0$j);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"fieldname:\u00a0$fieldname\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"printed\u00a0length:\u00a0\"\u00a0.\u00a0pg_field_prtlen($res,\u00a0$fieldname)\u00a0.\u00a0\"\u00a0characters\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"storage\u00a0length:\u00a0\"\u00a0.\u00a0pg_field_size($res,\u00a0$j)\u00a0.\u00a0\"\u00a0bytes\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"field\u00a0type:\u00a0\"\u00a0.\u00a0pg_field_type($res,\u00a0$j)\u00a0.\u00a0\"\u00a0\\n\\n\";\u00a0\u00a0}?>             The above example will output:       column 0 fieldname: author printed length: 6 characters storage length: -1 bytes field type: varchar   column 1 fieldname: year printed length: 4 characters storage length: 2 bytes field type: int2   column 2 fieldname: title printed length: 24 characters storage length: -1 bytes field type: varchar                        See Also            pg_field_num() - Returns the field number of the named field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-prtlen.php","title":"pg_field_prtlen","description":"pg_field_prtlen   (PHP 4 >= 4.2.0, PHP 5)pg_field_prtlen \u2014 Returns the printed length         Description       int pg_field_prtlen     ( resource $result    , int $row_number    , mixed $field_name_or_number    )        int pg_field_prtlen     ( resource $result    , mixed $field_name_or_number    )        pg_field_prtlen() returns the actual printed    length (number of characters) of a specific value in a PostgreSQL    result.  Row numbering starts at 0.  This    function will return FALSE on an error.          field_name_or_number can be passed either as an    integer or as a string. If it is passed as an    integer, PHP recognises it as the field number, otherwise as    field name.          See the example given at the pg_field_name() page.      Note:           This function used to be called pg_fieldprtlen().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                row                      Row number in result.  Rows are numbered from 0 upwards.  If omitted,        current row is fetched.                                     Return Values       The field printed length, or FALSE on error.            Examples            Example #1 Getting information about fields       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0$i\u00a0=\u00a0pg_num_fields($res);\u00a0\u00a0for\u00a0($j\u00a0=\u00a00;\u00a0$j\u00a0<\u00a0$i;\u00a0$j++)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"column\u00a0$j\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fieldname\u00a0=\u00a0pg_field_name($res,\u00a0$j);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"fieldname:\u00a0$fieldname\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"printed\u00a0length:\u00a0\"\u00a0.\u00a0pg_field_prtlen($res,\u00a0$fieldname)\u00a0.\u00a0\"\u00a0characters\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"storage\u00a0length:\u00a0\"\u00a0.\u00a0pg_field_size($res,\u00a0$j)\u00a0.\u00a0\"\u00a0bytes\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"field\u00a0type:\u00a0\"\u00a0.\u00a0pg_field_type($res,\u00a0$j)\u00a0.\u00a0\"\u00a0\\n\\n\";\u00a0\u00a0}?>             The above example will output:       column 0 fieldname: author printed length: 6 characters storage length: -1 bytes field type: varchar   column 1 fieldname: year printed length: 4 characters storage length: 2 bytes field type: int2   column 2 fieldname: title printed length: 24 characters storage length: -1 bytes field type: varchar                        See Also            pg_field_size() - Returns the internal storage size of the named field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-table.php","title":"pg_field_table","description":"pg_field_table    (PHP 5 >= 5.2.0)pg_field_table \u2014 Returns the name or oid of the tables field         Description       mixed pg_field_table     ( resource $result    , int $field_number    [, bool $oid_only = false   ] )        pg_field_table() returns the name of the table that field     belongs to, or the table&#039;s oid if oid_only is TRUE.             Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                field_number                         Field number, starting from 0.                                 oid_only                         By default the tables name that field belongs to is returned but         if oid_only is set to TRUE, then the         oid will instead be returned.                                      Return Values       On success either the fields table name or oid. Or, FALSE on failure.             Examples            Example #1 Getting table information about a field       <?php$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"SELECT\u00a0bar\u00a0FROM\u00a0foo\");echo\u00a0pg_field_table($res,\u00a00);echo\u00a0pg_field_table($res,\u00a00,\u00a0true);$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"SELECT\u00a0version()\");var_dump(pg_field_table($res,\u00a00));?>             The above example will output something similar to:       foo 14379580  bool(false)                       Notes   Note:          Returning the oid is much faster than returning the table name because     fetching the table name requires a query to the database system table.                See Also            pg_field_name() - Returns the name of a field     pg_field_type() - Returns the type name for the corresponding field number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-type-oid.php","title":"pg_field_type_oid","description":"pg_field_type_oid    (PHP 5 >= 5.1.0)pg_field_type_oid \u2014     Returns the type ID (OID) for the corresponding field number            Description       int pg_field_type_oid     ( resource $result    , int $field_number    )        pg_field_type_oid() returns an integer containing the    OID of the base type of the given field_number in the    given PostgreSQL result resource.           You can get more information about the field type by querying PostgreSQL&#039;s     pg_type system table using the OID obtained with this function.     The PostgreSQL format_type() function will convert a     type OID into an SQL standard type name.      Note:          If the field uses a PostgreSQL domain (rather than a basic type), it is     the OID of the domain&#039;s underlying type that is returned, rather than the OID     of the domain itself.                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                field_number                         Field number, starting from 0.                                      Return Values       The OID of the field&#039;s base type. FALSE is returned on error.             Examples            Example #1 Getting information about fields       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\/\/\u00a0Assume\u00a0'title'\u00a0is\u00a0a\u00a0varchar\u00a0type\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0title\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0echo\u00a0\"Title\u00a0field\u00a0type\u00a0OID:\u00a0\",\u00a0pg_field_type_oid($res,\u00a00);?>             The above example will output:       Title field type OID: 1043                        See Also            pg_field_type() - Returns the type name for the corresponding field number     pg_field_prtlen() - Returns the printed length     pg_field_name() - Returns the name of a field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-size.php","title":"pg_field_size","description":"pg_field_size    (PHP 4 >= 4.2.0, PHP 5)pg_field_size \u2014     Returns the internal storage size of the named field            Description       int pg_field_size     ( resource $result    , int $field_number    )        pg_field_size() returns the internal storage    size (in bytes) of the field number in the given PostgreSQL    result.      Note:          This function used to be called pg_fieldsize().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                field_number                         Field number, starting from 0.                                      Return Values       The internal field storage size (in bytes).  -1 indicates a variable    length field.  FALSE is returned on error.             Examples            Example #1 Getting information about fields       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0$i\u00a0=\u00a0pg_num_fields($res);\u00a0\u00a0for\u00a0($j\u00a0=\u00a00;\u00a0$j\u00a0<\u00a0$i;\u00a0$j++)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"column\u00a0$j\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fieldname\u00a0=\u00a0pg_field_name($res,\u00a0$j);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"fieldname:\u00a0$fieldname\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"printed\u00a0length:\u00a0\"\u00a0.\u00a0pg_field_prtlen($res,\u00a0$fieldname)\u00a0.\u00a0\"\u00a0characters\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"storage\u00a0length:\u00a0\"\u00a0.\u00a0pg_field_size($res,\u00a0$j)\u00a0.\u00a0\"\u00a0bytes\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"field\u00a0type:\u00a0\"\u00a0.\u00a0pg_field_type($res,\u00a0$j)\u00a0.\u00a0\"\u00a0\\n\\n\";\u00a0\u00a0}?>             The above example will output:       column 0 fieldname: author printed length: 6 characters storage length: -1 bytes field type: varchar   column 1 fieldname: year printed length: 4 characters storage length: 2 bytes field type: int2   column 2 fieldname: title printed length: 24 characters storage length: -1 bytes field type: varchar                         See Also            pg_field_prtlen() - Returns the printed length     pg_field_type() - Returns the type name for the corresponding field number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-type.php","title":"pg_field_type","description":"pg_field_type    (PHP 4 >= 4.2.0, PHP 5)pg_field_type \u2014     Returns the type name for the corresponding field number            Description       string pg_field_type     ( resource $result    , int $field_number    )        pg_field_type() returns a string containing the    base type name of the given field_number in the    given PostgreSQL result resource.      Note:          If the field uses a PostgreSQL domain (rather than a basic type), it is     the name of the domain&#039;s underlying type that is returned, rather than the      name of the domain itself.          Note:          This function used to be called pg_fieldtype().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                field_number                         Field number, starting from 0.                                      Return Values       A string containing the base name of the field&#039;s type, or FALSE    on error.             Examples            Example #1 Getting information about fields       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\/\/\u00a0Assume\u00a0'title'\u00a0is\u00a0a\u00a0varchar\u00a0type\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0title\u00a0from\u00a0authors\u00a0where\u00a0author\u00a0=\u00a0'Orwell'\");\u00a0\u00a0echo\u00a0\"Title\u00a0field\u00a0type:\u00a0\",\u00a0pg_field_type($res,\u00a00);?>             The above example will output:       Title field type: varchar                        See Also            pg_field_prtlen() - Returns the printed length     pg_field_name() - Returns the name of a field     pg_field_type_oid() - Returns the type ID (OID) for the corresponding field number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-free-result.php","title":"pg_free_result","description":"pg_free_result    (PHP 4 >= 4.2.0, PHP 5)pg_free_result \u2014 Free result memory         Description       bool pg_free_result     ( resource $result    )        pg_free_result() frees the memory and data associated with the    specified PostgreSQL query result resource.          This function need only be called if memory    consumption during script execution is a problem.   Otherwise, all result memory will     be automatically freed when the script ends.      Note:          This function used to be called pg_freeresult().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 pg_free_result() example       <?php$db\u00a0=\u00a0pg_connect(\"dbname=users\u00a0user=me\")\u00a0||\u00a0die();$res\u00a0=\u00a0pg_query($db,\u00a0\"SELECT\u00a01\u00a0UNION\u00a0ALL\u00a0SELECT\u00a02\");$val\u00a0=\u00a0pg_fetch_result($res,\u00a01,\u00a00);echo\u00a0\"First\u00a0field\u00a0in\u00a0the\u00a0second\u00a0row\u00a0is:\u00a0\",\u00a0$val,\u00a0\"\\n\";pg_free_result($res);?>             The above example will output:       First field in the second row is: 2                      See Also            pg_query() - Execute a query     pg_query_params() - Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.     pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-get-notify.php","title":"pg_get_notify","description":"pg_get_notify   (PHP 4 >= 4.3.0, PHP 5)pg_get_notify \u2014 Gets SQL NOTIFY message         Description       array pg_get_notify     ( resource $connection    [, int $result_type   ] )        pg_get_notify() gets notifications generated by a    NOTIFY SQL command. To receive notifications,    the LISTEN SQL command must be    issued.            Parameters                    connection                      PostgreSQL database connection resource.                                result_type                      An optional parameter that controls        how the returned array is indexed.        result_type is a constant and can take the        following values: PGSQL_ASSOC,         PGSQL_NUM and PGSQL_BOTH.        Using PGSQL_NUM, pg_get_notify()        will return an array with numerical indices, using        PGSQL_ASSOC it will return only associative indices        while PGSQL_BOTH, the default, will return both        numerical and associative indices.                                     Return Values       An array containing the NOTIFY message name and backend PID.    Otherwise if no NOTIFY is waiting, then FALSE is returned.            Examples            Example #1 PostgreSQL NOTIFY message       <?php\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}\/\/\u00a0Listen\u00a0'author_updated'\u00a0message\u00a0from\u00a0other\u00a0processespg_query($conn,\u00a0'LISTEN\u00a0author_updated;');$notify\u00a0=\u00a0pg_get_notify($conn);if\u00a0(!$notify)\u00a0{\u00a0\u00a0echo\u00a0\"No\u00a0messages\\n\";}\u00a0else\u00a0{\u00a0\u00a0print_r($notify);}?>                        See Also            pg_get_pid() - Gets the backend's process ID"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-get-pid.php","title":"pg_get_pid","description":"pg_get_pid   (PHP 4 >= 4.3.0, PHP 5)pg_get_pid \u2014 Gets the backend&#039;s process ID         Description       int pg_get_pid     ( resource $connection    )        pg_get_pid() gets the backend&#039;s (database server    process) PID. The PID is useful to determine whether or not a NOTIFY    message received via pg_get_notify() is sent from another process    or not.            Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values       The backend database process ID.             Examples            Example #1 PostgreSQL backend PID       <?php\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}\/\/\u00a0Backend\u00a0process\u00a0PID.\u00a0Use\u00a0PID\u00a0with\u00a0pg_get_notify()$pid\u00a0=\u00a0pg_get_pid($conn);?>                        See Also            pg_get_notify() - Gets SQL NOTIFY message"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-get-result.php","title":"pg_get_result","description":"pg_get_result   (PHP 4 >= 4.2.0, PHP 5)pg_get_result \u2014     Get asynchronous query result            Description       resource pg_get_result     ([ resource $connection   ] )        pg_get_result() gets the result resource from    an asynchronous query executed by    pg_send_query(), pg_send_query_params() or    pg_send_execute().      pg_send_query() and the    other asynchronous query functions    can send multiple queries to a PostgreSQL server and    pg_get_result() is used to get each query&#039;s results,    one by one.             Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values       The result resource, or FALSE if no more results are available.             Examples            Example #1 pg_get_result() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors;\u00a0select\u00a0count(*)\u00a0from\u00a0authors;\");\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0\"First\u00a0call\u00a0to\u00a0pg_get_result():\u00a0$res1\\n\";\u00a0\u00a0$rows1\u00a0=\u00a0pg_num_rows($res1);\u00a0\u00a0echo\u00a0\"$res1\u00a0has\u00a0$rows1\u00a0records\\n\\n\";\u00a0\u00a0\u00a0\u00a0$res2\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0\"Second\u00a0call\u00a0to\u00a0pg_get_result():\u00a0$res2\\n\";\u00a0\u00a0$rows2\u00a0=\u00a0pg_num_rows($res2);\u00a0\u00a0echo\u00a0\"$res2\u00a0has\u00a0$rows2\u00a0records\\n\";?>             The above example will output:       First call to pg_get_result(): Resource id #3 Resource id #3 has 3 records  Second call to pg_get_result(): Resource id #4 Resource id #4 has 1 records                       See Also            pg_send_query() - Sends asynchronous query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-host.php","title":"pg_host","description":"pg_host    (PHP 4, PHP 5)pg_host \u2014     Returns the host name associated with the connection            Description       string pg_host     ([ resource $connection   ] )        pg_host() returns the host name of the given    PostgreSQL connection resource is    connected to.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       A string containing the name of the host the     connection is to, or FALSE on error.             Examples            Example #1 pg_host() example       <?php$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");if\u00a0($pgsql_conn)\u00a0{\u00a0\u00a0\u00a0print\u00a0\"Successfully\u00a0connected\u00a0to:\u00a0\"\u00a0.\u00a0pg_host($pgsql_conn)\u00a0.\u00a0\"<br\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0print\u00a0pg_last_error($pgsql_conn);\u00a0\u00a0\u00a0exit;}?>                         See Also            pg_connect() - Open a PostgreSQL connection     pg_pconnect() - Open a persistent PostgreSQL connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-insert.php","title":"pg_insert","description":"pg_insert   (PHP 4 >= 4.3.0, PHP 5)pg_insert \u2014     Insert array into table            Description       mixed pg_insert     ( resource $connection    , string $table_name    , array $assoc_array    [, int $options = PGSQL_DML_EXEC   ] )        pg_insert() inserts the values of assoc_array     into the table specified by table_name.    If options is    specified, pg_convert() is applied    to assoc_array with the specified options.      WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.         Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table into which to insert rows.  The table table_name must at least         have as many columns as assoc_array has elements.                                assoc_array                      An array whose keys are field names in the table table_name,        and whose values are the values of those fields that are to be inserted.                                options                      Any number of PGSQL_CONV_OPTS,         PGSQL_DML_NO_CONV,        PGSQL_DML_EXEC,        PGSQL_DML_ASYNC or        PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the        options then query string is returned.                                     Return Values       Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed    via options.             Examples            Example #1 pg_insert() example       <?php\u00a0\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\/\/\u00a0This\u00a0is\u00a0safe,\u00a0since\u00a0$_POST\u00a0is\u00a0converted\u00a0automatically\u00a0\u00a0$res\u00a0=\u00a0pg_insert($dbconn,\u00a0'post_log',\u00a0$_POST);\u00a0\u00a0if\u00a0($res)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"POST\u00a0data\u00a0is\u00a0successfully\u00a0logged\\n\";\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"User\u00a0must\u00a0have\u00a0sent\u00a0wrong\u00a0inputs\\n\";\u00a0\u00a0}?>                        See Also            pg_convert() - Convert associative array values into suitable for SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-last-notice.php","title":"pg_last_notice","description":"pg_last_notice    (PHP 4 >= 4.0.6, PHP 5)pg_last_notice \u2014     Returns the last notice message from PostgreSQL server            Description       string pg_last_notice     ( resource $connection    )        pg_last_notice() returns the last notice    message from the PostgreSQL server on the specified    connection. The PostgreSQL server sends notice    messages in several cases, for instance when creating a SERIAL    column in a table.          With pg_last_notice(), you can avoid issuing useless    queries by checking whether or not the notice is related to your transaction.          Notice message tracking can be set to optional by setting 1 for    pgsql.ignore_notice in php.ini.          Notice message logging can be set to optional by setting 0 for    pgsql.log_notice in php.ini.    Unless pgsql.ignore_notice is set    to 0, notice message cannot be logged.            Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values       A string containing the last notice on the     given connection, or FALSE on error.            Changelog                                 Version        Description                                    4.3.0                 This function is now fully implemented. Earlier versions ignores         database connection parameter.                               4.3.0                 The pgsql.ignore_notice and          pgsql.log_notice php.ini directives were added.                               4.0.6                 PHP 4.0.6 has problem with notice message handling. Use of the         PostgreSQL module with PHP 4.0.6 is not recommended even if you are         not using pg_last_notice().                                            Examples            Example #1 pg_last_notice() example       <?php\u00a0\u00a0$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");\u00a0\u00a0\u00a0\u00a0$res\u00a0=\u00a0pg_query(\"CREATE\u00a0TABLE\u00a0test\u00a0(id\u00a0SERIAL)\");\u00a0\u00a0\u00a0\u00a0$notice\u00a0=\u00a0pg_last_notice($pgsql_conn);\u00a0\u00a0\u00a0\u00a0echo\u00a0$notice;?>             The above example will output:       CREATE TABLE will create implicit sequence \"test_id_seq\" for \"serial\" column \"test.id\"                       See Also            pg_query() - Execute a query     pg_last_error() - Get the last error message string of a connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-last-error.php","title":"pg_last_error","description":"pg_last_error   (PHP 4 >= 4.2.0, PHP 5)pg_last_error \u2014 Get the last error message string of a connection         Description       string pg_last_error     ([ resource $connection   ] )        pg_last_error() returns the last error message    for a given connection.           Error messages may be overwritten by internal PostgreSQL (libpq)    function calls. It may not return an appropriate error message if    multiple errors occur inside a PostgreSQL module function.          Use pg_result_error(), pg_result_error_field(),    pg_result_status() and    pg_connection_status() for better error handling.      Note:          This function used to be called pg_errormessage().                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       A string containing the last error message on the     given connection, or FALSE on error.            Examples            Example #1 pg_last_error() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\/\/\u00a0Query\u00a0that\u00a0fails\u00a0\u00a0$res\u00a0=\u00a0pg_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0doesnotexist\");\u00a0\u00a0\u00a0\u00a0echo\u00a0pg_last_error($dbconn);?>                         See Also            pg_result_error() - Get error message associated with result     pg_result_error_field() - Returns an individual field of an error report."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-close.php","title":"pg_lo_close","description":"pg_lo_close   (PHP 4 >= 4.2.0, PHP 5)pg_lo_close \u2014 Close a large object         Description       bool pg_lo_close     ( resource $large_object    )        pg_lo_close() closes a large    object. large_object is a resource for the    large object from pg_lo_open().          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_loclose().                Parameters                    result                      PostgreSQL large object (LOB) resource, returned by pg_lo_open().                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_lo_close() example       <?php\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$oid\u00a0=\u00a0pg_lo_create($database);\u00a0\u00a0\u00a0echo\u00a0\"$oid\\n\";\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$oid,\u00a0\"w\");\u00a0\u00a0\u00a0echo\u00a0\"$handle\\n\";\u00a0\u00a0\u00a0pg_lo_write($handle,\u00a0\"large\u00a0object\u00a0data\");\u00a0\u00a0\u00a0pg_lo_close($handle);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_open() - Open a large object     pg_lo_create() - Create a large object     pg_lo_import() - Import a large object from file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-create.php","title":"pg_lo_create","description":"pg_lo_create   (PHP 4 >= 4.2.0, PHP 5)pg_lo_create \u2014 Create a large object         Description       int pg_lo_create     ([ resource $connection    [, mixed $object_id   ]] )        int pg_lo_create     ( mixed $object_id    )        pg_lo_create() creates a large    object and returns the OID of the large    object.  PostgreSQL access modes    INV_READ, INV_WRITE, and     INV_ARCHIVE are not supported, the    object is created always with both read and write    access. INV_ARCHIVE has been removed from PostgreSQL itself    (version 6.3 and above).          To use the large object interface, it is necessary to    enclose it within a transaction block.          Instead of using the large object interface (which has no access controls    and is cumbersome to use), try PostgreSQL&#039;s bytea    column type and pg_escape_bytea().      Note:          This function used to be called pg_locreate().                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                object_id                      If an object_id is given the function        will try to create a large object with this id, else a free        object id is assigned by the server. The parameter        was added in PHP 5.3 and relies on functionality that first        appeared in PostgreSQL 8.1.                                      Return Values       A large object OID or FALSE on error.             Changelog                                 Version        Description                                    5.3.0                 The optional object_id was added.                                            Examples            Example #1 pg_lo_create() example       <?php\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$oid\u00a0=\u00a0pg_lo_create($database);\u00a0\u00a0\u00a0echo\u00a0\"$oid\\n\";\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$oid,\u00a0\"w\");\u00a0\u00a0\u00a0echo\u00a0\"$handle\\n\";\u00a0\u00a0\u00a0pg_lo_write($handle,\u00a0\"large\u00a0object\u00a0data\");\u00a0\u00a0\u00a0pg_lo_close($handle);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-last-oid.php","title":"pg_last_oid","description":"pg_last_oid    (PHP 4 >= 4.2.0, PHP 5)pg_last_oid \u2014 Returns the last row&#039;s OID         Description       string pg_last_oid     ( resource $result    )        pg_last_oid() is used to retrieve the    OID assigned to an inserted row.          OID field became an optional field from PostgreSQL 7.2 and will    not be present by default in PostgreSQL 8.1. When the    OID field is not present in a table, the programmer must use     pg_result_status() to check for successful    insertion.          To get the value of a SERIAL field in an inserted    row, it is necessary to use the PostgreSQL CURRVAL    function, naming the sequence whose last value is required.  If the    name of the sequence is unknown, the pg_get_serial_sequence    PostgreSQL 8.0 function is necessary.          PostgreSQL 8.1 has a function LASTVAL that returns    the value of the most recently used sequence in the session.  This avoids    the need for naming the sequence, table or column altogether.      Note:          This function used to be called pg_getlastoid().                Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       A string containing the OID assigned to the most recently inserted    row in the specified connection, or FALSE on error or    no available OID.            Examples            Example #1 pg_last_oid() example       <?php\u00a0\u00a0$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_query(\"CREATE\u00a0TABLE\u00a0test\u00a0(a\u00a0INTEGER)\u00a0WITH\u00a0OIDS\");\u00a0\u00a0$res2\u00a0=\u00a0pg_query(\"INSERT\u00a0INTO\u00a0test\u00a0VALUES\u00a0(1)\");\u00a0\u00a0\u00a0\u00a0$oid\u00a0=\u00a0pg_last_oid($res2);?>                        See Also            pg_query() - Execute a query     pg_result_status() - Get status of query result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-export.php","title":"pg_lo_export","description":"pg_lo_export   (PHP 4 >= 4.2.0, PHP 5)pg_lo_export \u2014 Export a large object to file         Description       bool pg_lo_export     ([ resource $connection    ], int $oid    , string $pathname    )        pg_lo_export() takes a large object in a    PostgreSQL database and saves its contents to a file on the local    filesystem.          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_loexport().                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                oid                      The OID of the large object in the database.                                pathname                      The full path and file name of the file in which to write the        large object on the client filesystem.                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_lo_export() example       <?php\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$oid\u00a0=\u00a0pg_lo_create($database);\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$oid,\u00a0\"w\");\u00a0\u00a0\u00a0pg_lo_write($handle,\u00a0\"large\u00a0object\u00a0data\");\u00a0\u00a0\u00a0pg_lo_close($handle);\u00a0\u00a0\u00a0pg_lo_export($database,\u00a0$oid,\u00a0'\/tmp\/lob.dat');\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_import() - Import a large object from file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-open.php","title":"pg_lo_open","description":"pg_lo_open   (PHP 4 >= 4.2.0, PHP 5)pg_lo_open \u2014 Open a large object         Description       resource pg_lo_open     ( resource $connection    , int $oid    , string $mode    )        pg_lo_open() opens a large object in the database    and returns large object resource so that it can be manipulated.      Warning         Do not close the database connection before closing the large     object resource.               To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_loopen().                 Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                oid                      The OID of the large object in the database.                                mode                      Can be either \"r\" for read-only, \"w\" for write only or \"rw\" for read and         write.                                     Return Values       A large object resource or FALSE on error.             Examples            Example #1 pg_lo_open() example       <?php\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$oid\u00a0=\u00a0pg_lo_create($database);\u00a0\u00a0\u00a0echo\u00a0\"$oid\\n\";\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$oid,\u00a0\"w\");\u00a0\u00a0\u00a0echo\u00a0\"$handle\\n\";\u00a0\u00a0\u00a0pg_lo_write($handle,\u00a0\"large\u00a0object\u00a0data\");\u00a0\u00a0\u00a0pg_lo_close($handle);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_close() - Close a large object     pg_lo_create() - Create a large object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-import.php","title":"pg_lo_import","description":"pg_lo_import   (PHP 4 >= 4.2.0, PHP 5)pg_lo_import \u2014 Import a large object from file         Description       int pg_lo_import     ([ resource $connection    ], string $pathname    [, mixed $object_id   ] )        pg_lo_import() creates a new large object    in the database using a file on the filesystem as its data    source.          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.   Note:          This function used to be called pg_loimport().                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                pathname                      The full path and file name of the file on the client        filesystem from which to read the large object data.                                object_id                      If an object_id is given the function        will try to create a large object with this id, else a free        object id is assigned by the server. The parameter        was added in PHP 5.3 and relies on functionality that first        appeared in PostgreSQL 8.1.                                     Return Values       The OID of the newly created large object, or    FALSE on failure.            Changelog                                 Version        Description                                    5.3.0                 The optional object_id was added.                               4.2.0                 The syntax of this function changed. It used to be:                   int pg_lo_import           ( string $pathname          [, resource $connection         ] )                                             Examples            Example #1 pg_lo_import() example       <?php\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$oid\u00a0=\u00a0pg_lo_import($database,\u00a0'\/tmp\/lob.dat');\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_export() - Export a large object to file     pg_lo_open() - Open a large object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-read-all.php","title":"pg_lo_read_all","description":"pg_lo_read_all   (PHP 4 >= 4.2.0, PHP 5)pg_lo_read_all \u2014     Reads an entire large object and send straight to browser            Description       int pg_lo_read_all     ( resource $large_object    )        pg_lo_read_all() reads a large object and passes    it straight through to the browser after sending all pending    headers. Mainly intended for sending binary data like images or    sound.          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_loreadall().                Parameters                    large_object                      PostgreSQL large object (LOB) resource, returned by pg_lo_open().                                      Return Values       Number of bytes read or FALSE on error.             Examples            Example #1 pg_lo_read_all() example       <?php\u00a0\u00a0\u00a0header('Content-type:\u00a0image\/jpeg');\u00a0\u00a0\u00a0$image_oid\u00a0=\u00a0189762345;\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$image_oid,\u00a0\"r\");\u00a0\u00a0\u00a0pg_lo_read_all($handle);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_read() - Read a large object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-read.php","title":"pg_lo_read","description":"pg_lo_read   (PHP 4 >= 4.2.0, PHP 5)pg_lo_read \u2014 Read a large object         Description       string pg_lo_read     ( resource $large_object    [, int $len = 8192   ] )        pg_lo_read() reads at most    len bytes from a large object and    returns it as a string.          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_loread().                Parameters                    large_object                      PostgreSQL large object (LOB) resource, returned by pg_lo_open().                                len                      An optional maximum number of bytes to return.                                     Return Values       A string containing len bytes from the    large object, or FALSE on error.             Examples            Example #1 pg_lo_read() example       <?php\u00a0\u00a0\u00a0$doc_oid\u00a0=\u00a0189762345;\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$doc_oid,\u00a0\"r\");\u00a0\u00a0\u00a0$data\u00a0=\u00a0pg_lo_read($handle,\u00a050000);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");\u00a0\u00a0\u00a0echo\u00a0$data;?>                          See Also            pg_lo_read_all() - Reads an entire large object and send straight to browser"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-seek.php","title":"pg_lo_seek","description":"pg_lo_seek   (PHP 4 >= 4.2.0, PHP 5)pg_lo_seek \u2014     Seeks position within a large object            Description       bool pg_lo_seek     ( resource $large_object    , int $offset    [, int $whence = PGSQL_SEEK_CUR   ] )        pg_lo_seek() seeks a position within a large object    resource.          To use the large object interface, it is necessary to    enclose it within a transaction block.            Parameters                    large_object                      PostgreSQL large object (LOB) resource, returned by pg_lo_open().                                offset                      The number of bytes to seek.                                whence                      One of the constants PGSQL_SEEK_SET (seek from object start),         PGSQL_SEEK_CUR (seek from current position)        or PGSQL_SEEK_END (seek from object end) .                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_lo_seek() example       <?php\u00a0\u00a0\u00a0$doc_oid\u00a0=\u00a0189762345;\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$doc_oid,\u00a0\"r\");\u00a0\u00a0\u00a0\/\/\u00a0Skip\u00a0first\u00a050000\u00a0bytes\u00a0\u00a0\u00a0pg_lo_seek($handle,\u00a050000,\u00a0PGSQL_SEEK_SET);\u00a0\u00a0\u00a0\/\/\u00a0Read\u00a0the\u00a0next\u00a010000\u00a0bytes\u00a0\u00a0\u00a0$data\u00a0=\u00a0pg_lo_read($handle,\u00a010000);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");\u00a0\u00a0\u00a0echo\u00a0$data;?>                          See Also            pg_lo_tell() - Returns current seek position a of large object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-tell.php","title":"pg_lo_tell","description":"pg_lo_tell   (PHP 4 >= 4.2.0, PHP 5)pg_lo_tell \u2014     Returns current seek position a of large object            Description       int pg_lo_tell     ( resource $large_object    )        pg_lo_tell() returns the current position (offset    from the beginning) of a large object.          To use the large object interface, it is necessary to    enclose it within a transaction block.            Parameters                    large_object                      PostgreSQL large object (LOB) resource, returned by pg_lo_open().                                     Return Values       The current seek offset (in number of bytes) from the beginning of the large    object.  If there is an error, the return value is negative.             Examples            Example #1 pg_lo_tell() example       <?php\u00a0\u00a0\u00a0$doc_oid\u00a0=\u00a0189762345;\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$doc_oid,\u00a0\"r\");\u00a0\u00a0\u00a0\/\/\u00a0Skip\u00a0first\u00a050000\u00a0bytes\u00a0\u00a0\u00a0pg_lo_seek($handle,\u00a050000,\u00a0PGSQL_SEEK_SET);\u00a0\u00a0\u00a0\/\/\u00a0See\u00a0how\u00a0far\u00a0we've\u00a0skipped\u00a0\u00a0\u00a0$offset\u00a0=\u00a0pg_lo_tell($handle);\u00a0\u00a0\u00a0echo\u00a0\"Seek\u00a0position\u00a0is:\u00a0$offset\";\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>             The above example will output:       Seek position is: 50000                        See Also            pg_lo_seek() - Seeks position within a large object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-write.php","title":"pg_lo_write","description":"pg_lo_write   (PHP 4 >= 4.2.0, PHP 5)pg_lo_write \u2014 Write to a large object         Description       int pg_lo_write     ( resource $large_object    , string $data    [, int $len   ] )        pg_lo_write() writes data into a large object    at the current seek position.          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_lowrite().                Parameters                    large_object                      PostgreSQL large object (LOB) resource, returned by pg_lo_open().                                data                      The data to be written to the large object.  If len is        specified and is less than the length of data, only        len bytes will be written.                                len                      An optional maximum number of bytes to write.  Must be greater than zero        and no greater than the length of data.  Defaults to        the length of data.                                     Return Values       The number of bytes written to the large object, or FALSE on error.             Examples            Example #1 pg_lo_write() example       <?php\u00a0\u00a0\u00a0$doc_oid\u00a0=\u00a0189762345;\u00a0\u00a0\u00a0$data\u00a0=\u00a0\"This\u00a0will\u00a0overwrite\u00a0the\u00a0start\u00a0of\u00a0the\u00a0large\u00a0object.\";\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0$handle\u00a0=\u00a0pg_lo_open($database,\u00a0$doc_oid,\u00a0\"w\");\u00a0\u00a0\u00a0$data\u00a0=\u00a0pg_lo_write($handle,\u00a0$data);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_create() - Create a large object     pg_lo_open() - Open a large object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-unlink.php","title":"pg_lo_unlink","description":"pg_lo_unlink   (PHP 4 >= 4.2.0, PHP 5)pg_lo_unlink \u2014 Delete a large object         Description       bool pg_lo_unlink     ( resource $connection    , int $oid    )        pg_lo_unlink() deletes a large object with the    oid. Returns TRUE on success or FALSE on failure.          To use the large object interface, it is necessary to    enclose it within a transaction block.      Note:          This function used to be called pg_lounlink().                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                oid                      The OID of the large object in the database.                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_lo_unlink() example       <?php\u00a0\u00a0\u00a0\/\/\u00a0OID\u00a0of\u00a0the\u00a0large\u00a0object\u00a0to\u00a0delete\u00a0\u00a0\u00a0$doc_oid\u00a0=\u00a0189762345;\u00a0\u00a0\u00a0$database\u00a0=\u00a0pg_connect(\"dbname=jacarta\");\u00a0\u00a0\u00a0pg_query($database,\u00a0\"begin\");\u00a0\u00a0\u00a0pg_lo_unlink($database,\u00a0$doc_oid);\u00a0\u00a0\u00a0pg_query($database,\u00a0\"commit\");?>                          See Also            pg_lo_create() - Create a large object     pg_lo_import() - Import a large object from file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-meta-data.php","title":"pg_meta_data","description":"pg_meta_data   (PHP 4 >= 4.3.0, PHP 5)pg_meta_data \u2014     Get meta data for table            Description       array pg_meta_data     ( resource $connection    , string $table_name    )        pg_meta_data() returns table definition for    table_name as an array.      WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.           Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      The name of the table.                                     Return Values       An array of the table definition, or FALSE on error.             Examples            Example #1 Getting table metadata       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$meta\u00a0=\u00a0pg_meta_data($dbconn,\u00a0'authors');\u00a0\u00a0if\u00a0(is_array($meta))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'<pre>';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($meta);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'<\/pre>';\u00a0\u00a0}?>             The above example will output:       array(3) { [\"author\"]=> array(5) {   [\"num\"]=>   int(1)   [\"type\"]=>   string(7) \"varchar\"   [\"len\"]=>   int(-1)   [\"not null\"]=>   bool(false)   [\"has default\"]=>   bool(false) } [\"year\"]=> array(5) {   [\"num\"]=>   int(2)   [\"type\"]=>   string(4) \"int2\"   [\"len\"]=>   int(2)   [\"not null\"]=>   bool(false)   [\"has default\"]=>   bool(false) } [\"title\"]=> array(5) {   [\"num\"]=>   int(3)   [\"type\"]=>   string(7) \"varchar\"   [\"len\"]=>   int(-1)   [\"not null\"]=>   bool(false)   [\"has default\"]=>   bool(false) } }                       See Also            pg_convert() - Convert associative array values into suitable for SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-num-fields.php","title":"pg_num_fields","description":"pg_num_fields    (PHP 4 >= 4.2.0, PHP 5)pg_num_fields \u2014 Returns the number of fields in a result         Description       int pg_num_fields     ( resource $result    )        pg_num_fields() returns the number of fields    (columns) in a PostgreSQL result resource.      Note:          This function used to be called pg_numfields().               Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       The number of fields (columns) in the result. On error, -1 is returned.             Examples            Example #1 pg_num_fields() example       <?php$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a01,\u00a02\");$num\u00a0=\u00a0pg_num_fields($result);echo\u00a0$num\u00a0.\u00a0\"\u00a0field(s)\u00a0returned.\\n\";?>             The above example will output:       2 field(s) returned.                       See Also            pg_num_rows() - Returns the number of rows in a result     pg_affected_rows() - Returns number of affected records (tuples)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-num-rows.php","title":"pg_num_rows","description":"pg_num_rows    (PHP 4 >= 4.2.0, PHP 5)pg_num_rows \u2014 Returns the number of rows in a result         Description       int pg_num_rows     ( resource $result    )        pg_num_rows() will return the number of rows in    a PostgreSQL result resource.      Note:          This function used to be called pg_numrows().               Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       The number of rows in the result. On error, -1 is returned.             Examples            Example #1 pg_num_rows() example       <?php$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a01\");$rows\u00a0=\u00a0pg_num_rows($result);echo\u00a0$rows\u00a0.\u00a0\"\u00a0row(s)\u00a0returned.\\n\";?>             The above example will output:       1 row(s) returned.                       See Also            pg_num_fields() - Returns the number of fields in a result     pg_affected_rows() - Returns number of affected records (tuples)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-options.php","title":"pg_options","description":"pg_options    (PHP 4, PHP 5)pg_options \u2014 Get the options associated with the connection         Description       string pg_options     ([ resource $connection   ] )        pg_options() will return a string containing    the options specified on the given PostgreSQL    connection resource.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       A string containing the connection    options, or FALSE on error.             Examples            Example #1 pg_options() example       <?php\u00a0\u00a0\u00a0$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");\u00a0\u00a0\u00a0echo\u00a0pg_options($pgsql_conn);?>                        See Also            pg_connect() - Open a PostgreSQL connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-parameter-status.php","title":"pg_parameter_status","description":"pg_parameter_status   (PHP 5)pg_parameter_status \u2014 Looks up a current parameter setting of the server.         Description       string pg_parameter_status     ([ resource $connection    ], string $param_name    )         Looks up a current parameter setting of the server.           Certain parameter values are reported by the server automatically at      connection startup or whenever their values change. pg_parameter_status() can be      used to interrogate these settings. It returns the current value of a      parameter if known, or FALSE if the parameter is not known.           Parameters reported as of PostgreSQL 8.0 include server_version,      server_encoding, client_encoding,      is_superuser, session_authorization,      DateStyle, TimeZone, and integer_datetimes.     (server_encoding, TimeZone, and      integer_datetimes were not reported by releases before 8.0.) Note that      server_version, server_encoding and integer_datetimes      cannot change after PostgreSQL startup.           PostgreSQL 7.3 or lower servers do not report parameter settings,     pg_parameter_status()     includes logic to obtain values for server_version and      client_encoding     anyway. Applications are encouraged to use pg_parameter_status() rather than ad      hoc code to determine these values.      Caution            On a pre-7.4       PostgreSQL server, changing client_encoding via SET after connection startup will        not be reflected by pg_parameter_status().                  Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                param_name                          Possible param_name values include server_version,          server_encoding, client_encoding,          is_superuser, session_authorization,          DateStyle, TimeZone, and          integer_datetimes.                                       Return Values   A string containing the value of the parameter, FALSE on failure or invalid   param_name.         Examples            Example #1 pg_parameter_status() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0echo\u00a0\"Server\u00a0encoding:\u00a0\",\u00a0pg_parameter_status($dbconn,\u00a0\"server_encoding\");?>             The above example will output:       Server encoding: SQL_ASCII"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-ping.php","title":"pg_ping","description":"pg_ping   (PHP 4 >= 4.3.0, PHP 5)pg_ping \u2014 Ping database connection         Description       bool pg_ping     ([ resource $connection   ] )        pg_ping() pings a database connection and tries to    reconnect it if it is broken.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_ping() example       <?php\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}if\u00a0(!pg_ping($conn))\u00a0\u00a0die(\"Connection\u00a0is\u00a0broken\\n\");?>                        See Also            pg_connection_status() - Get connection status     pg_connection_reset() - Reset connection (reconnect)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-pconnect.php","title":"pg_pconnect","description":"pg_pconnect   (PHP 4, PHP 5)pg_pconnect \u2014 Open a persistent PostgreSQL connection         Description       resource pg_pconnect     ( string $connection_string    [, int $connect_type   ] )        pg_pconnect() opens a connection to a    PostgreSQL database. It returns a connection resource that is    needed by other PostgreSQL functions.          If a second call is made to pg_pconnect() with    the same connection_string as an existing connection, the    existing connection will be returned unless you pass    PGSQL_CONNECT_FORCE_NEW as    connect_type.          To enable persistent connection, the pgsql.allow_persistent    php.ini directive must be set to \"On\" (which is the default).    The maximum number of persistent connection can be defined with the pgsql.max_persistent    php.ini directive (defaults to -1 for no limit). The total number    of connections can be set with the pgsql.max_links     php.ini directive.          pg_close() will not close persistent links    generated by pg_pconnect().            Parameters                    connection_string                      The connection_string can be empty to use all default parameters, or it         can contain one or more parameter settings separated by whitespace.         Each parameter setting is in the form keyword = value. Spaces around         the equal sign are optional. To write an empty value or a value         containing spaces, surround it with single quotes, e.g., keyword =         &#039;a value&#039;. Single quotes and backslashes within the value must be         escaped with a backslash, i.e., \\&#039; and \\\\.                        The currently recognized parameter keywords are:        host, hostaddr, port,        dbname, user,        password, connect_timeout,        options, tty (ignored), sslmode,        requiressl (deprecated in favor of sslmode), and        service.  Which of these arguments exist depends        on your PostgreSQL version.                                connect_type                      If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection        is created, even if the connection_string is identical to        an existing connection.                                     Return Values       PostgreSQL connection resource on success, FALSE on failure.             Examples            Example #1 Using pg_pconnect()       <?php$dbconn\u00a0=\u00a0pg_pconnect(\"dbname=mary\");\/\/connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"$dbconn2\u00a0=\u00a0pg_pconnect(\"host=localhost\u00a0port=5432\u00a0dbname=mary\");\/\/\u00a0connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"\u00a0on\u00a0\"localhost\"\u00a0at\u00a0port\u00a0\"5432\"$dbconn3\u00a0=\u00a0pg_pconnect(\"host=sheep\u00a0port=5432\u00a0dbname=mary\u00a0user=lamb\u00a0password=foo\");\/\/connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"\u00a0on\u00a0the\u00a0host\u00a0\"sheep\"\u00a0with\u00a0a\u00a0username\u00a0and\u00a0password$conn_string\u00a0=\u00a0\"host=sheep\u00a0port=5432\u00a0dbname=test\u00a0user=lamb\u00a0password=bar\";$dbconn4\u00a0=\u00a0pg_pconnect($conn_string);\/\/connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"test\"\u00a0on\u00a0the\u00a0host\u00a0\"sheep\"\u00a0with\u00a0a\u00a0username\u00a0and\u00a0password?>                         See Also            pg_connect() - Open a PostgreSQL connection                 Persistent Database Connections"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-port.php","title":"pg_port","description":"pg_port   (PHP 4, PHP 5)pg_port \u2014     Return the port number associated with the connection            Description       int pg_port     ([ resource $connection   ] )        pg_port() returns the port number that the    given PostgreSQL connection resource is    connected to.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       An int containing the port number of the database    server the connection is to,     or FALSE on error.             Examples            Example #1 pg_port() example       <?php$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");if\u00a0($pgsql_conn)\u00a0{\u00a0\u00a0\u00a0print\u00a0\"Successfully\u00a0connected\u00a0to\u00a0port:\u00a0\"\u00a0.\u00a0pg_port($pgsql_conn)\u00a0.\u00a0\"<br\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0print\u00a0pg_last_error($pgsql_conn);\u00a0\u00a0\u00a0exit;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-prepare.php","title":"pg_prepare","description":"pg_prepare   (PHP 5 >= 5.1.0)pg_prepare \u2014  Submits a request to create a prepared statement with the    given parameters, and waits for completion.         Description       resource pg_prepare     ([ resource $connection    ], string $stmtname    , string $query    )         pg_prepare() creates a prepared statement for later execution with      pg_execute() or pg_send_execute().      This feature allows commands that will be used repeatedly to      be parsed and planned just once, rather than each time they are executed.      pg_prepare() is supported only against PostgreSQL 7.4 or     higher connections; it will fail when using earlier versions.           The function creates a prepared statement named stmtname from the query      string, which must contain a single SQL command. stmtname may be \"\" to      create an unnamed statement, in which case any pre-existing unnamed      statement is automatically replaced; otherwise it is an error if the      statement name is already defined in the current session. If any parameters      are used, they are referred to in the query as $1, $2, etc.           Prepared statements for use with pg_prepare() can also be created by      executing SQL PREPARE statements. (But pg_prepare() is more flexible since it      does not require parameter types to be pre-specified.) Also, although there      is no PHP function for deleting a prepared statement, the SQL DEALLOCATE     statement can be used for that purpose.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                stmtname                      The name to give the prepared statement.  Must be unique per-connection.  If        \"\" is specified, then an unnamed statement is created, overwriting any        previously defined unnamed statement.                                query                      The parameterized SQL statement.  Must contain only a single statement.        (multiple statements separated by semi-colons are not allowed.)  If any parameters         are used, they are referred to as $1, $2, etc.                                     Return Values       A query result resource on success or FALSE on failure.             Examples            Example #1 Using pg_prepare()       <?php\/\/\u00a0Connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"$dbconn\u00a0=\u00a0pg_connect(\"dbname=mary\");\/\/\u00a0Prepare\u00a0a\u00a0query\u00a0for\u00a0execution$result\u00a0=\u00a0pg_prepare($dbconn,\u00a0\"my_query\",\u00a0'SELECT\u00a0*\u00a0FROM\u00a0shops\u00a0WHERE\u00a0name\u00a0=\u00a0$1');\/\/\u00a0Execute\u00a0the\u00a0prepared\u00a0query.\u00a0\u00a0Note\u00a0that\u00a0it\u00a0is\u00a0not\u00a0necessary\u00a0to\u00a0escape\/\/\u00a0the\u00a0string\u00a0\"Joe's\u00a0Widgets\"\u00a0in\u00a0any\u00a0way$result\u00a0=\u00a0pg_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Joe's\u00a0Widgets\"));\/\/\u00a0Execute\u00a0the\u00a0same\u00a0prepared\u00a0query,\u00a0this\u00a0time\u00a0with\u00a0a\u00a0different\u00a0parameter$result\u00a0=\u00a0pg_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Clothes\u00a0Clothes\u00a0Clothes\"));?>                         See Also            pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.     pg_send_execute() - Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-put-line.php","title":"pg_put_line","description":"pg_put_line   (PHP 4 >= 4.0.3, PHP 5)pg_put_line \u2014 Send a NULL-terminated string to PostgreSQL backend         Description       bool pg_put_line     ([ resource $connection    ], string $data    )        pg_put_line() sends a NULL-terminated string    to the PostgreSQL backend server.  This is needed in conjunction    with PostgreSQL&#039;s COPY FROM command.      COPY is a high-speed data loading interface    supported by PostgreSQL.  Data is passed in without being parsed,     and in a single transaction.          An alternative to using raw pg_put_line() commands    is to use pg_copy_from().  This is a far simpler     interface.      Note:           The application must explicitly send the two characters \"\\.\"     on the last line to indicate to the backend that it has finished     sending its data, before issuing pg_end_copy().          Warning         Use of the pg_put_line() causes most large object     operations, including pg_lo_read() and     pg_lo_tell(), to subsequently fail. You can use     pg_copy_from() and pg_copy_to()     instead.                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                data                      A line of text to be sent directly to the PostgreSQL backend.  A NULL        terminator is added automatically.                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_put_line() example       <?php\u00a0\u00a0\u00a0$conn\u00a0=\u00a0pg_pconnect(\"dbname=foo\");\u00a0\u00a0pg_query($conn,\u00a0\"create\u00a0table\u00a0bar\u00a0(a\u00a0int4,\u00a0b\u00a0char(16),\u00a0d\u00a0float8)\");\u00a0\u00a0pg_query($conn,\u00a0\"copy\u00a0bar\u00a0from\u00a0stdin\");\u00a0\u00a0pg_put_line($conn,\u00a0\"3\\thello\u00a0world\\t4.5\\n\");\u00a0\u00a0pg_put_line($conn,\u00a0\"4\\tgoodbye\u00a0world\\t7.11\\n\");\u00a0\u00a0pg_put_line($conn,\u00a0\"\\\\.\\n\");\u00a0\u00a0pg_end_copy($conn);?>                        See Also            pg_end_copy() - Sync with PostgreSQL backend"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-query-params.php","title":"pg_query_params","description":"pg_query_params   (PHP 5 >= 5.1.0)pg_query_params \u2014 Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.         Description       resource pg_query_params     ([ resource $connection    ], string $query    , array $params    )         Submits a command to the server and waits for the result, with the ability      to pass parameters separately from the SQL command text.           pg_query_params() is like pg_query(),      but offers additional functionality: parameter      values can be specified separately from the command string proper.      pg_query_params() is supported only against PostgreSQL 7.4 or     higher connections; it will fail when using earlier versions.           If parameters are used, they are referred to in the query      string as $1, $2, etc.  params specifies the actual values of the      parameters. A NULL value in this array means the corresponding parameter is SQL     NULL.           The primary advantage of pg_query_params() over pg_query()      is that parameter values      may be separated from the query string, thus avoiding the need for tedious      and error-prone quoting and escaping. Unlike pg_query(),      pg_query_params() allows at      most one SQL command in the given string. (There can be semicolons in it,      but not more than one nonempty command.)            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                query                      The parameterized SQL statement.  Must contain only a single statement.        (multiple statements separated by semi-colons are not allowed.)  If any parameters         are used, they are referred to as $1, $2, etc.                                params                       An array of parameter values to substitute for the $1, $2, etc. placeholders         in the original prepared query string.  The number of elements in the array         must match the number of placeholders.                                     Return Values        A query result resource on success or FALSE on failure.          Examples            Example #1 Using pg_query_params()       <?php\/\/\u00a0Connect\u00a0to\u00a0a\u00a0database\u00a0named\u00a0\"mary\"$dbconn\u00a0=\u00a0pg_connect(\"dbname=mary\");\/\/\u00a0Find\u00a0all\u00a0shops\u00a0named\u00a0Joe's\u00a0Widgets.\u00a0\u00a0Note\u00a0that\u00a0it\u00a0is\u00a0not\u00a0necessary\u00a0to\/\/\u00a0escape\u00a0\"Joe's\u00a0Widgets\"$result\u00a0=\u00a0pg_query_params($dbconn,\u00a0'SELECT\u00a0*\u00a0FROM\u00a0shops\u00a0WHERE\u00a0name\u00a0=\u00a0$1',\u00a0array(\"Joe's\u00a0Widgets\"));\/\/\u00a0Compare\u00a0against\u00a0just\u00a0using\u00a0pg_query$str\u00a0=\u00a0pg_escape_string(\"Joe's\u00a0Widgets\");$result\u00a0=\u00a0pg_query($dbconn,\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0shops\u00a0WHERE\u00a0name\u00a0=\u00a0'{$str}'\");?>                         See Also            pg_query() - Execute a query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-query.php","title":"pg_query","description":"pg_query   (PHP 4 >= 4.2.0, PHP 5)pg_query \u2014 Execute a query         Description       resource pg_query     ([ resource $connection    ], string $query    )        pg_query() executes the query    on the specified database connection.          If an error occurs, and FALSE is returned, details of the error can    be retrieved using the pg_last_error()    function if the connection is valid.          Note:            Although connection can be omitted, it      is not recommended, since it can be the cause of hard to find      bugs in scripts.               Note:          This function used to be called pg_exec().     pg_exec() is still available for compatibility     reasons, but users are encouraged to use the newer name.                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                query                      The SQL statement or statements to be executed. When multiple statements are passed to the function,        they are automatically executed as one transaction, unless there are explicit BEGIN\/COMMIT commands        included in the query string. However, using multiple transactions in one function call is not recommended.                      Data inside the query should be properly escaped.                                     Return Values        A query result resource on success or FALSE on failure.             Examples            Example #1 pg_query() example       <?php$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0author,\u00a0email\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}while\u00a0($row\u00a0=\u00a0pg_fetch_row($result))\u00a0{\u00a0\u00a0echo\u00a0\"Author:\u00a0$row[0]\u00a0\u00a0E-mail:\u00a0$row[1]\";\u00a0\u00a0echo\u00a0\"<br\u00a0\/>\\n\";}\u00a0?>                           Example #2 Using pg_query() with multiple statements       <?php$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");\/\/\u00a0these\u00a0statements\u00a0will\u00a0be\u00a0executed\u00a0as\u00a0one\u00a0transaction$query\u00a0=\u00a0\"UPDATE\u00a0authors\u00a0SET\u00a0author=UPPER(author)\u00a0WHERE\u00a0id=1;\";$query\u00a0.=\u00a0\"UPDATE\u00a0authors\u00a0SET\u00a0author=LOWER(author)\u00a0WHERE\u00a0id=2;\";$query\u00a0.=\u00a0\"UPDATE\u00a0authors\u00a0SET\u00a0author=NULL\u00a0WHERE\u00a0id=3;\";pg_query($conn,\u00a0$query);?>                         See Also            pg_connect() - Open a PostgreSQL connection     pg_pconnect() - Open a persistent PostgreSQL connection     pg_fetch_array() - Fetch a row as an array     pg_fetch_object() - Fetch a row as an object     pg_num_rows() - Returns the number of rows in a result     pg_affected_rows() - Returns number of affected records (tuples)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-error-field.php","title":"pg_result_error_field","description":"pg_result_error_field   (PHP 5 >= 5.1.0)pg_result_error_field \u2014 Returns an individual field of an error report.         Description       string pg_result_error_field     ( resource $result    , int $fieldcode    )        pg_result_error_field() returns one of the detailed error message    fields associated with result resource. It is only available    against a PostgreSQL 7.4 or above server.  The error field is specified by    the fieldcode.          Because pg_query() and pg_query_params() return FALSE if the query fails,    you must use pg_send_query() and    pg_get_result() to get the result handle.          If you need to get additional error information from failed pg_query() queries,      use pg_set_error_verbosity() and pg_last_error()    and then parse the result.            Parameters                    result                      A PostgreSQL query result resource from a previously executed        statement.                                fieldcode                          Possible fieldcode values are: PGSQL_DIAG_SEVERITY,          PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY,          PGSQL_DIAG_MESSAGE_DETAIL,          PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION,          PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only),          PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only),          PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE,          PGSQL_DIAG_SOURCE_LINE or          PGSQL_DIAG_SOURCE_FUNCTION.                                       Return Values   A string containing the contents of the error field, NULL if the field does not exist or FALSE   on failure.          Examples            Example #1 pg_result_error_field() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0doesnotexist;\");\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0pg_result_error_field($res1,\u00a0PGSQL_DIAG_SQLSTATE);?>                        See Also            pg_result_error() - Get error message associated with result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-error.php","title":"pg_result_error","description":"pg_result_error   (PHP 4 >= 4.2.0, PHP 5)pg_result_error \u2014     Get error message associated with result            Description       string pg_result_error     ( resource $result    )        pg_result_error() returns any error message    associated with the result resource. Therefore,    the user has a better chance of getting the correct error message than    with pg_last_error().          The function pg_result_error_field() can give much greater    detail on result errors than pg_result_error().          Because pg_query() returns FALSE if the query fails,    you must use pg_send_query() and    pg_get_result() to get the result handle.            Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                     Return Values       Returns a string if there is an error associated with the    result parameter, FALSE otherwise.             Examples            Example #1 pg_result_error() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0doesnotexist;\");\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0pg_result_error($res1);?>                        See Also            pg_result_error_field() - Returns an individual field of an error report.     pg_query() - Execute a query     pg_send_query() - Sends asynchronous query     pg_get_result() - Get asynchronous query result     pg_last_error() - Get the last error message string of a connection     pg_last_notice() - Returns the last notice message from PostgreSQL server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-seek.php","title":"pg_result_seek","description":"pg_result_seek   (PHP 4 >= 4.3.0, PHP 5)pg_result_seek \u2014 Set internal row offset in result resource         Description       bool pg_result_seek     ( resource $result    , int $offset    )        pg_result_seek() sets the internal row offset in    a result resource.            Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                offset                      Row to move the internal offset to in the result resource.        Rows are numbered starting from zero.                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_result_seek() example       <?php\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");\/\/\u00a0Execute\u00a0a\u00a0query$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0author,\u00a0email\u00a0FROM\u00a0authors\");\/\/\u00a0Seek\u00a0to\u00a0the\u00a03rd\u00a0row\u00a0(assuming\u00a0there\u00a0are\u00a03\u00a0rows)pg_result_seek($result,\u00a02);\/\/\u00a0Fetch\u00a0the\u00a03rd\u00a0row$row\u00a0=\u00a0pg_fetch_row($result);\u00a0?>                         See Also            pg_fetch_row() - Get a row as an enumerated array     pg_fetch_assoc() - Fetch a row as an associative array     pg_fetch_array() - Fetch a row as an array     pg_fetch_object() - Fetch a row as an object     pg_fetch_result() - Returns values from a result resource"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-status.php","title":"pg_result_status","description":"pg_result_status   (PHP 4 >= 4.2.0, PHP 5)pg_result_status \u2014     Get status of query result            Description       mixed pg_result_status     ( resource $result    [, int $type = PGSQL_STATUS_LONG   ] )        pg_result_status() returns the status of a result    resource, or the PostgreSQL command completion tag associated with the result            Parameters                    result                      PostgreSQL query result resource, returned by pg_query(),        pg_query_params() or pg_execute()        (among others).                                type                      Either PGSQL_STATUS_LONG to return the numeric status         of the result, or PGSQL_STATUS_STRING         to return the command tag of the result.        If not specified, PGSQL_STATUS_LONG is the default.                                     Return Values       Possible return values are PGSQL_EMPTY_QUERY,    PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_OUT,    PGSQL_COPY_IN, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and    PGSQL_FATAL_ERROR if PGSQL_STATUS_LONG is    specified.  Otherwise, a string containing the PostgreSQL command tag is returned.            Changelog                                 Version        Description                                    4.3.0                 The type parameter was added.                                            Examples            Example #1 pg_result_status() example       <?php\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");\/\/\u00a0Execute\u00a0a\u00a0COPY$result\u00a0=\u00a0pg_query($conn,\u00a0\"COPY\u00a0authors\u00a0FROM\u00a0STDIN;\");\/\/\u00a0Get\u00a0the\u00a0result\u00a0status$status\u00a0=\u00a0pg_result_status($result);\/\/\u00a0Determine\u00a0statusif\u00a0($status\u00a0==\u00a0PGSQL_COPY_IN)\u00a0\u00a0\u00a0echo\u00a0\"Copy\u00a0began.\";else\u00a0\u00a0\u00a0echo\u00a0\"Copy\u00a0failed.\";\u00a0?>             The above example will output:       Copy began.                       See Also            pg_connection_status() - Get connection status"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-select.php","title":"pg_select","description":"pg_select   (PHP 4 >= 4.3.0, PHP 5)pg_select \u2014     Select records            Description       mixed pg_select     ( resource $connection    , string $table_name    , array $assoc_array    [, int $options = PGSQL_DML_EXEC   ] )        pg_select() selects records specified by    assoc_array which has    field=>value. For a successful query, it returns an    array containing all records and fields that match the condition    specified by assoc_array.      If options is specified,    pg_convert() is applied to    assoc_array with the specified flags.      WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table from which to select rows.                                assoc_array                      An array whose keys are field names in the table table_name,        and whose values are the conditions that a row must meet to be retrieved.                                options                      Any number of PGSQL_CONV_FORCE_NULL,         PGSQL_DML_NO_CONV,        PGSQL_DML_EXEC,        PGSQL_DML_ASYNC or        PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the        options then query string is returned.                                     Return Values       Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed    via options.             Examples            Example #1 pg_select() example       <?php\u00a0\u00a0\u00a0$db\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\/\/\u00a0This\u00a0is\u00a0safe,\u00a0since\u00a0$_POST\u00a0is\u00a0converted\u00a0automatically\u00a0\u00a0$rec\u00a0=\u00a0pg_select($db,\u00a0'post_log',\u00a0$_POST);\u00a0\u00a0if\u00a0($rec)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Records\u00a0selected\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($rec);\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"User\u00a0must\u00a0have\u00a0sent\u00a0wrong\u00a0inputs\\n\";\u00a0\u00a0}?>                        See Also            pg_convert() - Convert associative array values into suitable for SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-execute.php","title":"pg_send_execute","description":"pg_send_execute   (PHP 5 >= 5.1.0)pg_send_execute \u2014 Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).         Description       bool pg_send_execute     ( resource $connection    , string $stmtname    , array $params    )         Sends a request to execute a prepared statement with given parameters,      without waiting for the result(s).           This is similar to pg_send_query_params(), but the command to be executed is specified      by naming a previously-prepared statement, instead of giving a query string. The      function&#039;s parameters are handled identically to pg_execute().      Like pg_execute(), it will not work on pre-7.4 versions of     PostgreSQL.           Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                stmtname                      The name of the prepared statement to execute.  if        \"\" is specified, then the unnamed statement is executed.  The name must have        been previously prepared using pg_prepare(),         pg_send_prepare() or a PREPARE SQL        command.                                params                       An array of parameter values to substitute for the $1, $2, etc. placeholders         in the original prepared query string.  The number of elements in the array         must match the number of placeholders.                                     Return Values   Returns TRUE on success, FALSE on failure.  Use pg_get_result()   to determine the query result.          Examples            Example #1 Using pg_send_execute()       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\/\/\u00a0Prepare\u00a0a\u00a0query\u00a0for\u00a0execution\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0pg_send_prepare($dbconn,\u00a0\"my_query\",\u00a0'SELECT\u00a0*\u00a0FROM\u00a0shops\u00a0WHERE\u00a0name\u00a0=\u00a0$1');\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0}\u00a0\u00a0\/\/\u00a0Execute\u00a0the\u00a0prepared\u00a0query.\u00a0\u00a0Note\u00a0that\u00a0it\u00a0is\u00a0not\u00a0necessary\u00a0to\u00a0escape\u00a0\u00a0\/\/\u00a0the\u00a0string\u00a0\"Joe's\u00a0Widgets\"\u00a0in\u00a0any\u00a0way\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0pg_send_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Joe's\u00a0Widgets\"));\u00a0\u00a0\u00a0\u00a0$res2\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Execute\u00a0the\u00a0same\u00a0prepared\u00a0query,\u00a0this\u00a0time\u00a0with\u00a0a\u00a0different\u00a0parameter\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0pg_send_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Clothes\u00a0Clothes\u00a0Clothes\"));\u00a0\u00a0\u00a0\u00a0$res3\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0}\u00a0\u00a0?>                         See Also            pg_prepare() - Submits a request to create a prepared statement with the    given parameters, and waits for completion.     pg_send_prepare() - Sends a request to create a prepared statement with the given parameters, without waiting for completion.     pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-query-params.php","title":"pg_send_query_params","description":"pg_send_query_params   (PHP 5 >= 5.1.0)pg_send_query_params \u2014 Submits a command and separate parameters to the server without waiting for the result(s).         Description       bool pg_send_query_params     ( resource $connection    , string $query    , array $params    )         Submits a command and separate parameters to the server without      waiting for the result(s).           This is equivalent to pg_send_query() except that query      parameters can be specified separately from the      query string. The function&#039;s parameters are      handled identically to pg_query_params(). Like      pg_query_params(), it will not work on pre-7.4 PostgreSQL      connections, and it allows only one command in the query string.                Parameters                    connection                      PostgreSQL database connection resource.                                query                      The parameterized SQL statement.  Must contain only a single statement.        (multiple statements separated by semi-colons are not allowed.)  If any parameters         are used, they are referred to as $1, $2, etc.                                params                       An array of parameter values to substitute for the $1, $2, etc. placeholders         in the original prepared query string.  The number of elements in the array         must match the number of placeholders.                                     Return Values   Returns TRUE on success or FALSE on failure.       Use pg_get_result() to determine the query result.             Examples            Example #1 Using pg_send_query_params()       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\/\/\u00a0Using\u00a0parameters.\u00a0\u00a0Note\u00a0that\u00a0it\u00a0is\u00a0not\u00a0necessary\u00a0to\u00a0quote\u00a0or\u00a0escape\u00a0\u00a0\/\/\u00a0the\u00a0parameter.\u00a0\u00a0pg_send_query_params($dbconn,\u00a0'select\u00a0count(*)\u00a0from\u00a0authors\u00a0where\u00a0city\u00a0=\u00a0$1',\u00a0array('Perth'));\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Compare\u00a0against\u00a0basic\u00a0pg_send_query\u00a0usage\u00a0\u00a0$str\u00a0=\u00a0pg_escape_string('Perth');\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0count(*)\u00a0from\u00a0authors\u00a0where\u00a0city\u00a0=\u00a0'${str}'\");?>                         See Also            pg_send_query() - Sends asynchronous query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-prepare.php","title":"pg_send_prepare","description":"pg_send_prepare   (PHP 5 >= 5.1.0)pg_send_prepare \u2014 Sends a request to create a prepared statement with the given parameters, without waiting for completion.         Description       bool pg_send_prepare     ( resource $connection    , string $stmtname    , string $query    )         Sends a request to create a prepared statement with the given parameters,      without waiting for completion.           This is an asynchronous version of pg_prepare(): it returns TRUE if it was able to      dispatch the request, and FALSE if not. After a successful call, call      pg_get_result() to determine whether the server successfully created the      prepared statement. The function&#039;s parameters are handled identically to      pg_prepare(). Like pg_prepare(), it will not work      on pre-7.4 versions of PostgreSQL.            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                stmtname                      The name to give the prepared statement.  Must be unique per-connection.  If        \"\" is specified, then an unnamed statement is created, overwriting any        previously defined unnamed statement.                                query                      The parameterized SQL statement.  Must contain only a single statement.        (multiple statements separated by semi-colons are not allowed.)  If any parameters         are used, they are referred to as $1, $2, etc.                                      Return Values   Returns TRUE on success, FALSE on failure.  Use pg_get_result()   to determine the query result.         Examples            Example #1 Using pg_send_prepare()       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\/\/\u00a0Prepare\u00a0a\u00a0query\u00a0for\u00a0execution\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0pg_send_prepare($dbconn,\u00a0\"my_query\",\u00a0'SELECT\u00a0*\u00a0FROM\u00a0shops\u00a0WHERE\u00a0name\u00a0=\u00a0$1');\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0}\u00a0\u00a0\/\/\u00a0Execute\u00a0the\u00a0prepared\u00a0query.\u00a0\u00a0Note\u00a0that\u00a0it\u00a0is\u00a0not\u00a0necessary\u00a0to\u00a0escape\u00a0\u00a0\/\/\u00a0the\u00a0string\u00a0\"Joe's\u00a0Widgets\"\u00a0in\u00a0any\u00a0way\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0pg_send_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Joe's\u00a0Widgets\"));\u00a0\u00a0\u00a0\u00a0$res2\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Execute\u00a0the\u00a0same\u00a0prepared\u00a0query,\u00a0this\u00a0time\u00a0with\u00a0a\u00a0different\u00a0parameter\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0pg_send_execute($dbconn,\u00a0\"my_query\",\u00a0array(\"Clothes\u00a0Clothes\u00a0Clothes\"));\u00a0\u00a0\u00a0\u00a0$res3\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0}\u00a0\u00a0?>                         See Also            pg_connect() - Open a PostgreSQL connection     pg_pconnect() - Open a persistent PostgreSQL connection     pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.     pg_send_execute() - Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).     pg_send_query_params() - Submits a command and separate parameters to the server without waiting for the result(s)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-set-error-verbosity.php","title":"pg_set_error_verbosity","description":"pg_set_error_verbosity   (PHP 5 >= 5.1.0)pg_set_error_verbosity \u2014     Determines the verbosity of messages returned by pg_last_error()     and pg_result_error().            Description       int pg_set_error_verbosity     ([ resource $connection    ], int $verbosity    )         Determines the verbosity of messages returned by pg_last_error()      and pg_result_error().          pg_set_error_verbosity() sets the verbosity mode, returning the connection&#039;s previous     setting. In PGSQL_ERRORS_TERSE mode, returned messages include severity, primary text, and     position only; this will normally fit on a single line. The default mode (PGSQL_ERRORS_DEFAULT)    produces messages that include the above plus any detail, hint, or context     fields (these may span multiple lines). The PGSQL_ERRORS_VERBOSE mode includes all available     fields. Changing the verbosity does not affect the messages available from     already-existing result objects, only subsequently-created ones.           Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                verbosity                      The required verbosity: PGSQL_ERRORS_TERSE,        PGSQL_ERRORS_DEFAULT        or PGSQL_ERRORS_VERBOSE.                                     Return Values       The previous verbosity level: PGSQL_ERRORS_TERSE,    PGSQL_ERRORS_DEFAULT    or PGSQL_ERRORS_VERBOSE.             Examples            Example #1 pg_set_error_verbosity() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0doesnotexist;\");\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0pg_set_error_verbosity($dbconn,\u00a0PGSQL_ERRORS_VERBOSE);\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0pg_result_error($res1);?>                        See Also            pg_last_error() - Get the last error message string of a connection     pg_result_error() - Get error message associated with result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-set-client-encoding.php","title":"pg_set_client_encoding","description":"pg_set_client_encoding   (PHP 4 >= 4.0.3, PHP 5)pg_set_client_encoding \u2014     Set the client encoding            Description       int pg_set_client_encoding     ([ resource $connection    ], string $encoding    )        pg_set_client_encoding() sets the client    encoding and returns 0 if success or -1 if error.          PostgreSQL will automatically convert data in the backend database    encoding into the frontend encoding.      Note:          The function used to be called     pg_setclientencoding().                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                encoding                      The required client encoding.  One of SQL_ASCII, EUC_JP,         EUC_CN, EUC_KR, EUC_TW,         UNICODE, MULE_INTERNAL, LATINX (X=1...9),         KOI8, WIN, ALT, SJIS,         BIG5 or WIN1250.                      The exact list of available encodings depends on your PostgreSQL version, so check your        PostgreSQL manual for a more specific list.                                     Return Values       Returns 0 on success or -1 on error.            Examples            Example #1 pg_set_client_encoding() example       <?php$conn\u00a0=\u00a0pg_pconnect(\"dbname=publisher\");if\u00a0(!$conn)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}\/\/\u00a0Set\u00a0the\u00a0client\u00a0encoding\u00a0to\u00a0UNICODE.\u00a0\u00a0Data\u00a0will\u00a0be\u00a0automatically\/\/\u00a0converted\u00a0from\u00a0the\u00a0backend\u00a0encoding\u00a0to\u00a0the\u00a0frontend.pg_set_client_encoding($conn,\u00a0\"UNICODE\");$result\u00a0=\u00a0pg_query($conn,\u00a0\"SELECT\u00a0author,\u00a0email\u00a0FROM\u00a0authors\");if\u00a0(!$result)\u00a0{\u00a0\u00a0echo\u00a0\"An\u00a0error\u00a0occured.\\n\";\u00a0\u00a0exit;}\/\/\u00a0Write\u00a0out\u00a0UTF-8\u00a0datawhile\u00a0($row\u00a0=\u00a0pg_fetch_row($result))\u00a0{\u00a0\u00a0echo\u00a0\"Author:\u00a0$row[0]\u00a0\u00a0E-mail:\u00a0$row[1]\";\u00a0\u00a0echo\u00a0\"<br\u00a0\/>\\n\";}\u00a0?>                       See Also            pg_client_encoding() - Gets the client encoding"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-query.php","title":"pg_send_query","description":"pg_send_query   (PHP 4 >= 4.2.0, PHP 5)pg_send_query \u2014     Sends asynchronous query            Description       bool pg_send_query     ( resource $connection    , string $query    )        pg_send_query() sends a query or queries asynchronously to the    connection. Unlike    pg_query(), it can send multiple queries at once to    PostgreSQL and get the results one by one using    pg_get_result().          Script execution is not blocked while the queries are executing. Use    pg_connection_busy() to check if the connection is    busy (i.e. the query is executing). Queries may be cancelled using    pg_cancel_query().          Although the user can send multiple queries at once, multiple queries    cannot be sent over a busy connection. If a query is sent while    the connection is busy, it waits until the last query is finished and    discards all its results.             Parameters                    connection                      PostgreSQL database connection resource.                                query                      The SQL statement or statements to be executed.                      Data inside the query should be properly escaped.                                     Return Values   Returns TRUE on success or FALSE on failure.       Use pg_get_result() to determine the query result.             Examples            Example #1 pg_send_query() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0if\u00a0(!pg_connection_busy($dbconn))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pg_send_query($dbconn,\u00a0\"select\u00a0*\u00a0from\u00a0authors;\u00a0select\u00a0count(*)\u00a0from\u00a0authors;\");\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$res1\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0\"First\u00a0call\u00a0to\u00a0pg_get_result():\u00a0$res1\\n\";\u00a0\u00a0$rows1\u00a0=\u00a0pg_num_rows($res1);\u00a0\u00a0echo\u00a0\"$res1\u00a0has\u00a0$rows1\u00a0records\\n\\n\";\u00a0\u00a0\u00a0\u00a0$res2\u00a0=\u00a0pg_get_result($dbconn);\u00a0\u00a0echo\u00a0\"Second\u00a0call\u00a0to\u00a0pg_get_result():\u00a0$res2\\n\";\u00a0\u00a0$rows2\u00a0=\u00a0pg_num_rows($res2);\u00a0\u00a0echo\u00a0\"$res2\u00a0has\u00a0$rows2\u00a0records\\n\";?>             The above example will output:       First call to pg_get_result(): Resource id #3 Resource id #3 has 3 records  Second call to pg_get_result(): Resource id #4 Resource id #4 has 1 records                       See Also            pg_query() - Execute a query     pg_cancel_query() - Cancel an asynchronous query     pg_get_result() - Get asynchronous query result     pg_connection_busy() - Get connection is busy or not"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-trace.php","title":"pg_trace","description":"pg_trace   (PHP 4 >= 4.0.1, PHP 5)pg_trace \u2014 Enable tracing a PostgreSQL connection         Description       bool pg_trace     ( string $pathname    [, string $mode = \"w\"    [, resource $connection   ]] )        pg_trace() enables tracing of the PostgreSQL    frontend\/backend communication to a file. To fully understand the results,    one needs to be familiar with the internals of PostgreSQL    communication protocol.      For those who are not, it can still be    useful for tracing errors in queries sent to the server, you    could do for example grep &#039;^To backend&#039;    trace.log and see what queries actually were sent to the    PostgreSQL server. For more information, refer to the    \u00bb\u00a0PostgreSQL Documentation.            Parameters                    pathname                      The full path and file name of the file in which to write the        trace log.  Same as in fopen().                                pathname                      An optional file access mode, same as for fopen().                                connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 pg_trace() example       <?php$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");if\u00a0($pgsql_conn)\u00a0{\u00a0\u00a0\u00a0pg_trace('\/tmp\/trace.log',\u00a0'w',\u00a0$pgsql_conn);\u00a0\u00a0\u00a0pg_query(\"SELECT\u00a01\");\u00a0\u00a0\u00a0pg_untrace($pgsql_conn);\u00a0\u00a0\u00a0\/\/\u00a0Now\u00a0\/tmp\/trace.log\u00a0will\u00a0contain\u00a0backend\u00a0communication}\u00a0else\u00a0{\u00a0\u00a0\u00a0print\u00a0pg_last_error($pgsql_conn);\u00a0\u00a0\u00a0exit;}?>                         See Also            fopen() - Opens file or URL     pg_untrace() - Disable tracing of a PostgreSQL connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-transaction-status.php","title":"pg_transaction_status","description":"pg_transaction_status   (PHP 5 >= 5.1.0)pg_transaction_status \u2014 Returns the current in-transaction status of the server.         Description       int pg_transaction_status     ( resource $connection    )         Returns the current in-transaction status of the server.      Caution            pg_transaction_status() will give incorrect results when using       a PostgreSQL 7.3 server that has the parameter autocommit       set to off.  The server-side autocommit feature has been       deprecated and does not exist in later server versions.                 Parameters                    connection                      PostgreSQL database connection resource.                                     Return Values   The status can be PGSQL_TRANSACTION_IDLE (currently idle),     PGSQL_TRANSACTION_ACTIVE (a command is in progress),     PGSQL_TRANSACTION_INTRANS (idle, in a valid transaction block),     or PGSQL_TRANSACTION_INERROR (idle, in a failed transaction block).     PGSQL_TRANSACTION_UNKNOWN is reported if the connection is bad.     PGSQL_TRANSACTION_ACTIVE is reported only when a query     has been sent to the server and not yet completed.             Examples            Example #1 pg_transaction_status() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"dbname=publisher\")\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0$stat\u00a0=\u00a0pg_transaction_status($dbconn);\u00a0\u00a0if\u00a0($stat\u00a0===\u00a0PGSQL_TRANSACTION_UNKNOWN)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0is\u00a0bad';\u00a0\u00a0}\u00a0else\u00a0if\u00a0($stat\u00a0===\u00a0PGSQL_TRANSACTION_IDLE)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0is\u00a0currently\u00a0idle';\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0is\u00a0in\u00a0a\u00a0transaction\u00a0state';\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-tty.php","title":"pg_tty","description":"pg_tty   (PHP 4, PHP 5)pg_tty \u2014     Return the TTY name associated with the connection            Description       string pg_tty     ([ resource $connection   ] )        pg_tty() returns the TTY name that server    side debugging output is sent to on the given PostgreSQL    connection resource.      Note:          pg_tty() is obsolete, since the server no longer pays     attention to the TTY setting, but the function remains for backwards     compatibility.                Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       A string containing the debug TTY of     the connection, or FALSE on error.             Examples            Example #1 pg_tty() example       <?php$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");if\u00a0($pgsql_conn)\u00a0{\u00a0\u00a0\u00a0print\u00a0\"Server\u00a0debug\u00a0TTY\u00a0is:\u00a0\"\u00a0.\u00a0pg_tty($pgsql_conn)\u00a0.\u00a0\"<br\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0print\u00a0pg_last_error($pgsql_conn);\u00a0\u00a0\u00a0exit;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-untrace.php","title":"pg_untrace","description":"pg_untrace   (PHP 4 >= 4.0.1, PHP 5)pg_untrace \u2014 Disable tracing of a PostgreSQL connection         Description       bool pg_untrace     ([ resource $connection   ] )        Stop tracing started by pg_trace().            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       Always returns TRUE.             Examples            Example #1 pg_untrace() example       <?php$pgsql_conn\u00a0=\u00a0pg_connect(\"dbname=mark\u00a0host=localhost\");if\u00a0($pgsql_conn)\u00a0{\u00a0\u00a0\u00a0pg_trace('\/tmp\/trace.log',\u00a0'w',\u00a0$pgsql_conn);\u00a0\u00a0\u00a0pg_query(\"SELECT\u00a01\");\u00a0\u00a0\u00a0pg_untrace($pgsql_conn);\u00a0\u00a0\u00a0\/\/\u00a0Now\u00a0tracing\u00a0of\u00a0backend\u00a0communication\u00a0is\u00a0disabled}\u00a0else\u00a0{\u00a0\u00a0\u00a0print\u00a0pg_last_error($pgsql_conn);\u00a0\u00a0\u00a0exit;}?>                         See Also            pg_trace() - Enable tracing a PostgreSQL connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-unescape-bytea.php","title":"pg_unescape_bytea","description":"pg_unescape_bytea   (PHP 4 >= 4.3.0, PHP 5)pg_unescape_bytea \u2014     Unescape binary for bytea type            Description       string pg_unescape_bytea     ( string $data    )        pg_unescape_bytea() unescapes PostgreSQL bytea data    values.  It returns the unescaped string, possibly containing binary data.      Note:          When you SELECT a bytea type, PostgreSQL returns octal byte values     prefixed with &#039;\\&#039; (e.g. \\032). Users are supposed to convert back to     binary format manually.             This function requires PostgreSQL 7.2 or later. With PostgreSQL     7.2.0 and 7.2.1, bytea values must be cast when you enable     multi-byte support. i.e. INSERT INTO test_table (image)     VALUES (&#039;$image_escaped&#039;::bytea); PostgreSQL 7.2.2 or     later does not need a cast. The exception is when the client and backend     character encoding does not match, and there may be multi-byte     stream error. User must then cast to bytea to avoid this error.                Parameters                    data                      A string containing PostgreSQL bytea data to be converted into        a PHP binary string.                                     Return Values       A string containing the unescaped data.            Examples            Example #1 pg_unescape_bytea() example       <?php\u00a0\u00a0\u00a0\/\/\u00a0Connect\u00a0to\u00a0the\u00a0database\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Get\u00a0the\u00a0bytea\u00a0data\u00a0\u00a0$res\u00a0=\u00a0pg_query(\"SELECT\u00a0data\u00a0FROM\u00a0gallery\u00a0WHERE\u00a0name='Pine\u00a0trees'\");\u00a0\u00a0\u00a0\u00a0$raw\u00a0=\u00a0pg_fetch_result($res,\u00a0'data');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Convert\u00a0to\u00a0binary\u00a0and\u00a0send\u00a0to\u00a0the\u00a0browser\u00a0\u00a0header('Content-type:\u00a0image\/jpeg');\u00a0\u00a0echo\u00a0pg_unescape_bytea($raw);?>                         See Also            pg_escape_bytea() - Escape a string for insertion into a bytea field     pg_escape_string() - Escape a string for query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-update.php","title":"pg_update","description":"pg_update   (PHP 4 >= 4.3.0, PHP 5)pg_update \u2014     Update table            Description       mixed pg_update     ( resource $connection    , string $table_name    , array $data    , array $condition    [, int $options = PGSQL_DML_EXEC   ] )        pg_update() updates records that matches    condition with data. If    options is specified,    pg_convert() is applied to    data with specified options.      WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    connection                      PostgreSQL database connection resource.                                table_name                      Name of the table into which to update rows.                                data                      An array whose keys are field names in the table table_name,        and whose values are what matched rows are to be updated to.                                condition                      An array whose keys are field names in the table table_name,        and whose values are the conditions that a row must meet to be updated.                                options                      Any number of PGSQL_CONV_OPTS,         PGSQL_DML_NO_CONV,        PGSQL_DML_EXEC or        PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the        options then query string is returned.                                     Return Values       Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed    via options.             Examples            Example #1 pg_update() example       <?php\u00a0\u00a0\u00a0$db\u00a0=\u00a0pg_connect('dbname=foo');\u00a0\u00a0$data\u00a0=\u00a0array('field1'=>'AA',\u00a0'field2'=>'BB');\u00a0\u00a0\u00a0\u00a0\/\/\u00a0This\u00a0is\u00a0safe,\u00a0since\u00a0$_POST\u00a0is\u00a0converted\u00a0automatically\u00a0\u00a0$res\u00a0=\u00a0pg_update($db,\u00a0'post_log',\u00a0$_POST,\u00a0$data);\u00a0\u00a0if\u00a0($res)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Data\u00a0is\u00a0updated:\u00a0$res\\n\";\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"User\u00a0must\u00a0have\u00a0sent\u00a0wrong\u00a0inputs\\n\";\u00a0\u00a0}?>                        See Also            pg_convert() - Convert associative array values into suitable for SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-version.php","title":"pg_version","description":"pg_version   (PHP 5)pg_version \u2014     Returns an array with client, protocol and server version (when available)            Description       array pg_version     ([ resource $connection   ] )        pg_version() returns an array with the client, protocol    and server version. Protocol and server versions are only available if PHP    was compiled with PostgreSQL 7.4 or later.          For more detailed server information, use pg_parameter_status().            Parameters                    connection                      PostgreSQL database connection resource.  When         connection is not present, the default connection         is used. The default connection is the last connection made by         pg_connect() or pg_pconnect().                                     Return Values       Returns an array with client, protocol     and server keys and values (if available).  Returns    FALSE on error or invalid connection.             Examples            Example #1 pg_version() example       <?php\u00a0\u00a0$dbconn\u00a0=\u00a0pg_connect(\"host=localhost\u00a0port=5432\u00a0dbname=mary\")\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$v\u00a0=\u00a0pg_version($dbconn);\u00a0\u00a0\u00a0\u00a0echo\u00a0$v['client'];?>             The above example will output:       7.4                      See Also            pg_parameter_status() - Looks up a current parameter setting of the server."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-busy-timeout.php","title":"sqlite_busy_timeoutSQLiteDatabase-busyTimeout","description":"sqlite_busy_timeout   SQLiteDatabase-busyTimeout   (PHP 5, PECL sqlite >= 1.0.0)sqlite_busy_timeout -- SQLiteDatabase->busyTimeout \u2014 Set busy timeout duration, or disable busy handlers         Description       void sqlite_busy_timeout     ( resource $dbhandle    , int $milliseconds    )    Object oriented style (method):                void SQLiteDatabase::busyTimeout      ( int $milliseconds     )           Set the maximum time, in milliseconds, that SQLite will wait for a    dbhandle to become ready for use.            Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                milliseconds                      The number of milliseconds.  When set to        0, busy handlers will be disabled and SQLite will        return immediately with a SQLITE_BUSY status code        if another process\/thread has the database locked for an update.                      PHP sets the default busy timeout to be 60 seconds when the database is        opened.              Note:                  There are one thousand (1000) milliseconds in one second.                                             Return Values       No value is returned.            Examples            Example #1 Procedural style       <?php$dbhandle\u00a0=\u00a0sqlite_open('sqlitedb');sqlite_busy_timeout($dbhandle,\u00a010000);\u00a0\/\/\u00a0set\u00a0timeout\u00a0to\u00a010\u00a0secondssqlite_busy_timeout($dbhandle,\u00a00);\u00a0\/\/\u00a0disable\u00a0busy\u00a0handler?>                           Example #2 Object oriented style       <?php$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('sqlitedb');$dbhandle->busyTimeout(10000);\u00a0\/\/\u00a010\u00a0seconds$dbhandle->busyTimeout(0);\u00a0\/\/\u00a0disable?>                        See Also            sqlite_open() - Opens an SQLite database and create the database if it does not exist"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-array-query.php","title":"sqlite_array_querySQLiteDatabase-arrayQuery","description":"sqlite_array_query   SQLiteDatabase-arrayQuery   (PHP 5, PECL sqlite >= 1.0.0)sqlite_array_query -- SQLiteDatabase->arrayQuery \u2014 Execute a query against a given database and returns an array         Description       array sqlite_array_query     ( resource $dbhandle    , string $query    [, int $result_type = SQLITE_BOTH    [, bool $decode_binary = true   ]] )        array sqlite_array_query     ( string $query    , resource $dbhandle    [, int $result_type = SQLITE_BOTH    [, bool $decode_binary = true   ]] )    Object oriented style (method):                array SQLiteDatabase::arrayQuery      ( string $query     [, int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )           sqlite_array_query() executes the given query and returns    an array of the entire result set.  It is similar to calling    sqlite_query() and then sqlite_fetch_array()    for each row in the result set.  sqlite_array_query() is    significantly faster than the aforementioned.      Tip         sqlite_array_query() is best suited to queries     returning 45 rows or less.  If you have more data than that, it is     recommended that you write your scripts to use     sqlite_unbuffered_query() instead for more optimal     performance.                Parameters                    query                      The query to be executed.                      Data inside the query should be properly escaped.                                dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                result_type              The optional result_type parameter accepts a constant and determines how the returned array will be indexed. Using SQLITE_ASSOC will return only associative indices (named fields) while SQLITE_NUM will return only numerical indices (ordinal field numbers). SQLITE_BOTH will return both associative and numerical indices. SQLITE_BOTH is the default for this function.                         decode_binary              When the decode_binary parameter is set to TRUE (the default), PHP will decode the binary encoding it applied to the data if it was encoded using the sqlite_escape_string().  You should normally leave this value at its default, unless you are interoperating with databases created by other sqlite capable applications.                        Note: Two alternative syntaxes are supported for compatibility with other database extensions (such as MySQL). The preferred form is the first, where the dbhandle parameter is the first parameter to the function.         Return Values       Returns an array of the entire result set; FALSE otherwise.      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option.         Examples            Example #1 Procedural style       <?php$dbhandle\u00a0=\u00a0sqlite_open('sqlitedb');$result\u00a0=\u00a0sqlite_array_query($dbhandle,\u00a0'SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025',\u00a0SQLITE_ASSOC);foreach\u00a0($result\u00a0as\u00a0$entry)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Name:\u00a0'\u00a0.\u00a0$entry['name']\u00a0.\u00a0'\u00a0\u00a0E-mail:\u00a0'\u00a0.\u00a0$entry['email'];}?>                           Example #2 Object-oriented style       <?php$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('sqlitedb');$result\u00a0=\u00a0$dbhandle->arrayQuery('SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025',\u00a0SQLITE_ASSOC);foreach\u00a0($result\u00a0as\u00a0$entry)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Name:\u00a0'\u00a0.\u00a0$entry['name']\u00a0.\u00a0'\u00a0\u00a0E-mail:\u00a0'\u00a0.\u00a0$entry['email'];}?>                        See Also            sqlite_query() - Executes a query against a given database and returns a result handle     sqlite_fetch_array() - Fetches the next row from a result set as an array     sqlite_fetch_string() - Alias of sqlite_fetch_single"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-changes.php","title":"sqlite_changesSQLiteDatabase-changes","description":"sqlite_changes   SQLiteDatabase-changes   (PHP 5, PECL sqlite >= 1.0.0)sqlite_changes -- SQLiteDatabase->changes \u2014     Returns the number of rows that were changed by the most    recent SQL statement            Description       int sqlite_changes     ( resource $dbhandle    )    Object oriented style (method):                int SQLiteDatabase::changes      ( void     )           Returns the numbers of rows that were changed by the most recent SQL    statement executed against the dbhandle database    handle.            Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                     Return Values       Returns the number of changed rows.            Examples            Example #1 Procedural style       <?php$dbhandle\u00a0=\u00a0sqlite_open('mysqlitedb');$query\u00a0=\u00a0sqlite_query($dbhandle,\u00a0\"UPDATE\u00a0users\u00a0SET\u00a0email='jDoe@example.com'\u00a0WHERE\u00a0username='jDoe'\");if\u00a0(!$query)\u00a0{\u00a0\u00a0\u00a0\u00a0exit('Error\u00a0in\u00a0query.');}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Number\u00a0of\u00a0rows\u00a0modified:\u00a0',\u00a0sqlite_changes($dbhandle);}?>                           Example #2 Object oriented style       <?php$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('mysqlitedb');$query\u00a0=\u00a0$dbhandle->query(\"UPDATE\u00a0users\u00a0SET\u00a0email='jDoe@example.com'\u00a0WHERE\u00a0username='jDoe'\");if\u00a0(!$query)\u00a0{\u00a0\u00a0\u00a0\u00a0exit('Error\u00a0in\u00a0query.');}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Number\u00a0of\u00a0rows\u00a0modified:\u00a0',\u00a0$dbhandle->changes();}?>                        See Also            sqlite_open() - Opens an SQLite database and create the database if it does not exist"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-close.php","title":"sqlite_close","description":"sqlite_close   (PHP 5, PECL sqlite >= 1.0.0)sqlite_close \u2014 Closes an open SQLite database         Description       void sqlite_close     ( resource $dbhandle    )        Closes the given db_handle database handle.    If the database was persistent, it will be closed and removed from the    persistent list.            Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.                                     Return Values       No value is returned.            Examples            Example #1 sqlite_close() example       <?php$dbhandle\u00a0=\u00a0sqlite_open('sqlitedb');sqlite_close($dbhandle);?>                        See Also            sqlite_open() - Opens an SQLite database and create the database if it does not exist     sqlite_popen() - Opens a persistent handle to an SQLite database and create the database if it does not exist"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-column.php","title":"sqlite_columnSQLiteResult-columnSQLiteUnbuffered-column","description":"sqlite_column   SQLiteResult-column   SQLiteUnbuffered-column   (PHP 5, PECL sqlite >= 1.0.0)sqlite_column -- SQLiteResult->column -- SQLiteUnbuffered->column \u2014 Fetches a column from the current row of a result set         Description        mixed sqlite_column     ( resource $result    , mixed $index_or_name    [, bool $decode_binary = true   ] )                 mixed SQLiteResult::column      ( mixed $index_or_name     [, bool $decode_binary = true    ] )                    mixed SQLiteUnbuffered::column      ( mixed $index_or_name     [, bool $decode_binary = true    ] )           Fetches the value of a column named index_or_name    (if it is a string), or of the ordinal column numbered    index_or_name (if it is an integer) from the    current row of the query result handle result.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                index_or_name                      The column index or name to fetch.                                decode_binary              When the decode_binary parameter is set to TRUE (the default), PHP will decode the binary encoding it applied to the data if it was encoded using the sqlite_escape_string().  You should normally leave this value at its default, unless you are interoperating with databases created by other sqlite capable applications.                              Return Values       Returns the column value.            Notes   Note:          Use this function when you are iterating a large result set with many     columns, or with columns that contain large amounts of data.                See Also            sqlite_fetch_string() - Alias of sqlite_fetch_single"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-create-aggregate.php","title":"sqlite_create_aggregateSQLiteDatabase-createAggregate","description":"sqlite_create_aggregate   SQLiteDatabase-createAggregate   (PHP 5, PECL sqlite >= 1.0.0)sqlite_create_aggregate -- SQLiteDatabase->createAggregate \u2014 Register an aggregating UDF for use in SQL statements         Description       void sqlite_create_aggregate     ( resource $dbhandle    , string $function_name    , callback $step_func    , callback $finalize_func    [, int $num_args = -1   ] )    Object oriented style (method):                void SQLiteDatabase::createAggregate      ( string $function_name     , callback $step_func     , callback $finalize_func     [, int $num_args = -1    ] )           sqlite_create_aggregate() is similar to    sqlite_create_function() except that it registers    functions that can be used to calculate a result aggregated across all the    rows of a query.          The key difference between this function and    sqlite_create_function() is that two functions are    required to manage the aggregate; step_func is    called for each row of the result set.  Your PHP function should    accumulate the result and store it into the aggregation context.    Once all the rows have been processed,    finalize_func will be called and it should then    take the data from the aggregation context and return the result.    Callback functions should return a type understood by SQLite (i.e.    scalar type).            Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                function_name                      The name of the function used in SQL statements.                                step_func                      Callback function called for each row of the result set.        Function parameters are &$context, $value, ....                                finalize_func                      Callback function to aggregate the \"stepped\" data from each row.        Function parameter is &$context and the function        should return the final result of aggregation.                                num_args                      Hint to the SQLite parser if the callback function accepts a        predetermined number of arguments.                                     Return Values       No value is returned.            Examples            Example #1 max_length aggregation function example       <?php$data\u00a0=\u00a0array(\u00a0\u00a0\u00a0'one',\u00a0\u00a0\u00a0'two',\u00a0\u00a0\u00a0'three',\u00a0\u00a0\u00a0'four',\u00a0\u00a0\u00a0'five',\u00a0\u00a0\u00a0'six',\u00a0\u00a0\u00a0'seven',\u00a0\u00a0\u00a0'eight',\u00a0\u00a0\u00a0'nine',\u00a0\u00a0\u00a0'ten',\u00a0\u00a0\u00a0);$dbhandle\u00a0=\u00a0sqlite_open(':memory:');sqlite_query($dbhandle,\u00a0\"CREATE\u00a0TABLE\u00a0strings(a)\");foreach\u00a0($data\u00a0as\u00a0$str)\u00a0{\u00a0\u00a0\u00a0\u00a0$str\u00a0=\u00a0sqlite_escape_string($str);\u00a0\u00a0\u00a0\u00a0sqlite_query($dbhandle,\u00a0\"INSERT\u00a0INTO\u00a0strings\u00a0VALUES\u00a0('$str')\");}function\u00a0max_len_step(&$context,\u00a0$string)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(strlen($string)\u00a0>\u00a0$context)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$context\u00a0=\u00a0strlen($string);\u00a0\u00a0\u00a0\u00a0}}function\u00a0max_len_finalize(&$context)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0$context;}sqlite_create_aggregate($dbhandle,\u00a0'max_len',\u00a0'max_len_step',\u00a0'max_len_finalize');var_dump(sqlite_array_query($dbhandle,\u00a0'SELECT\u00a0max_len(a)\u00a0from\u00a0strings'));?>                      In this example, we are creating an aggregating function that will    calculate the length of the longest string in one of the columns of the    table.  For each row, the max_len_step function is    called and passed a context parameter.  The context    parameter is just like any other PHP variable and be set to hold an array    or even an object value.  In this example, we are simply using it to hold    the maximum length we have seen so far; if the    string has a length longer than the current    maximum, we update the context to hold this new maximum length.          After all of the rows have been processed, SQLite calls the    max_len_finalize function to determine the aggregate    result.  Here, we could perform some kind of calculation based on the    data found in the context.  In our simple example    though, we have been calculating the result as the query progressed, so we    simply need to return the context value.      Note:          The example above will not work correctly if the column contains binary     data.  Take a look at the manual page for     sqlite_udf_decode_binary() for an explanation of why     this is so, and an example of how to make it respect the binary encoding.          Tip         It is NOT recommended for you to store a copy of the values in the context     and then process them at the end, as you would cause SQLite to use a lot of     memory to process the query - just think of how much memory you would need     if a million rows were stored in memory, each containing a string 32 bytes     in length.          Tip         You can use sqlite_create_function() and     sqlite_create_aggregate() to override SQLite native     SQL functions.                See Also            sqlite_create_function() - Registers a \"regular\" User Defined Function for use in SQL statements     sqlite_udf_encode_binary() - Encode binary data before returning it from an UDF     sqlite_udf_decode_binary() - Decode binary data passed as parameters to an UDF"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-current.php","title":"sqlite_currentSQLiteResult-currentSQLiteUnbuffered-current","description":"sqlite_current   SQLiteResult-current   SQLiteUnbuffered-current   (PHP 5, PECL sqlite >= 1.0.0)sqlite_current -- SQLiteResult->current -- SQLiteUnbuffered->current \u2014 Fetches the current row from a result set as an array         Description       array sqlite_current     ( resource $result    [, int $result_type = SQLITE_BOTH    [, bool $decode_binary = true   ]] )    Object oriented style (method):                array SQLiteResult::current      ([ int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )                    array SQLiteUnbuffered::current      ([ int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )           sqlite_current() is identical to    sqlite_fetch_array() except that it does not advance    to the next row prior to returning the data; it returns the data from the    current position only.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                result_type              The optional result_type parameter accepts a constant and determines how the returned array will be indexed. Using SQLITE_ASSOC will return only associative indices (named fields) while SQLITE_NUM will return only numerical indices (ordinal field numbers). SQLITE_BOTH will return both associative and numerical indices. SQLITE_BOTH is the default for this function.                         decode_binary              When the decode_binary parameter is set to TRUE (the default), PHP will decode the binary encoding it applied to the data if it was encoded using the sqlite_escape_string().  You should normally leave this value at its default, unless you are interoperating with databases created by other sqlite capable applications.                              Return Values       Returns an array of the current row from a result set; FALSE if the    current position is beyond the final row.      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option.         See Also            sqlite_seek() - Seek to a particular row number of a buffered result set     sqlite_next() - Seek to the next row number     sqlite_fetch_array() - Fetches the next row from a result set as an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-create-function.php","title":"sqlite_create_functionSQLiteDatabase-createFunction","description":"sqlite_create_function   SQLiteDatabase-createFunction   (PHP 5, sqlite >= 1.0.0)sqlite_create_function -- SQLiteDatabase->createFunction \u2014     Registers a \"regular\" User Defined Function for use in SQL statements            Description       void sqlite_create_function     ( resource $dbhandle    , string $function_name    , callback $callback    [, int $num_args = -1   ] )    Object oriented style (method):                void SQLiteDatabase::createFunction      ( string $function_name     , callback $callback     [, int $num_args = -1    ] )           sqlite_create_function() allows you to register a PHP    function with SQLite as an UDF (User Defined    Function), so that it can be called from within your SQL statements.          The UDF can be used in any SQL statement that can call functions, such as    SELECT and UPDATE statements and also in triggers.            Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                function_name                      The name of the function used in SQL statements.                                callback                      Callback function to handle the defined SQL function.              Note:                  Callback functions should return a type understood by SQLite (i.e.         scalar type).                                        num_args                      Hint to the SQLite parser if the callback function accepts a        predetermined number of arguments.                               Note: Two alternative syntaxes are supported for compatibility with other database extensions (such as MySQL). The preferred form is the first, where the dbhandle parameter is the first parameter to the function.         Return Values       No value is returned.            Examples            Example #1 sqlite_create_function() example       <?phpfunction\u00a0md5_and_reverse($string)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0strrev(md5($string));}if\u00a0($dbhandle\u00a0=\u00a0sqlite_open('mysqlitedb',\u00a00666,\u00a0$sqliteerror))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sqlite_create_function($dbhandle,\u00a0'md5rev',\u00a0'md5_and_reverse',\u00a01);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$sql\u00a0\u00a0=\u00a0'SELECT\u00a0md5rev(filename)\u00a0FROM\u00a0files';\u00a0\u00a0\u00a0\u00a0$rows\u00a0=\u00a0sqlite_array_query($dbhandle,\u00a0$sql);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0opening\u00a0sqlite\u00a0db:\u00a0'\u00a0.\u00a0$sqliteerror;\u00a0\u00a0\u00a0\u00a0exit;}?>                      In this example, we have a function that calculates the md5 sum of a    string, and then reverses it.  When the SQL statement executes, it    returns the value of the filename transformed by our function.  The data    returned in $rows contains the processed result.          The beauty of this technique is that you do not need to process the    result using a foreach loop after you have queried for the data.          PHP registers a special function named php when the    database is first opened.  The php function can be used to call any PHP    function without having to register it first.               Example #2 Example of using the PHP function       <?php$rows\u00a0=\u00a0sqlite_array_query($dbhandle,\u00a0\"SELECT\u00a0php('md5',\u00a0filename)\u00a0from\u00a0files\");?>                   This example will call the md5() on each      filename column in the database and return the result      into $rows               Note:          For performance reasons, PHP will not automatically encode\/decode binary     data passed to and from your UDF&#039;s.  You need to manually encode\/decode     the parameters and return values if you need to process binary data in     this way.  Take a look at sqlite_udf_encode_binary()     and sqlite_udf_decode_binary() for more details.          Tip         It is not recommended to use UDF&#039;s to handle processing of     binary data, unless high performance is not a key requirement of your     application.          Tip         You can use sqlite_create_function() and     sqlite_create_aggregate() to override SQLite native     SQL functions.                See Also            sqlite_create_aggregate() - Register an aggregating UDF for use in SQL statements"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-error-string.php","title":"sqlite_error_string","description":"sqlite_error_string   (PHP 5, PECL sqlite >= 1.0.0)sqlite_error_string \u2014 Returns the textual description of an error code         Description       string sqlite_error_string     ( int $error_code    )        Returns a human readable description of the    error_code returned from    sqlite_last_error().            Parameters                    error_code                      The error code being used, which might be passed in from        sqlite_last_error().                                      Return Values       Returns a human readable description of the error_code,    as a string.            See Also            sqlite_last_error() - Returns the error code of the last error for a database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-escape-string.php","title":"sqlite_escape_string","description":"sqlite_escape_string   (PHP 5, PECL sqlite >= 1.0.0)sqlite_escape_string \u2014 Escapes a string for use as a query parameter         Description       string sqlite_escape_string     ( string $item    )        sqlite_escape_string() will correctly quote the string    specified by item    for use in an SQLite SQL statement.  This includes doubling up    single-quote characters (&#039;) and checking for    binary-unsafe characters in the query string.          Although the encoding makes it safe to insert the data, it will render    simple text comparisons and LIKE clauses in your    queries unusable for the columns that contain the binary data.  In    practice, this shouldn&#039;t be a problem, as your schema should be such that    you don&#039;t use such things on binary columns (in fact, it might be better to    store binary data using other means, such as in files).            Parameters                    item                      The string being quoted.                      If the item contains a NUL        character, or if it begins with a character whose ordinal value is        0x01, PHP will apply a binary encoding scheme so that        you can safely store and retrieve binary data.                                      Return Values       Returns an escaped string for use in an SQLite SQL statement.            Notes   Note:          Do not use this function to encode the return values from UDF&#039;s created     using sqlite_create_function() or     sqlite_create_aggregate() - use     sqlite_udf_encode_binary() instead.          Warning         addslashes() should NOT be used to     quote your strings for SQLite queries; it will lead to strange results     when retrieving your data.                See Also            sqlite_udf_encode_binary() - Encode binary data before returning it from an UDF"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-factory.php","title":"sqlite_factory","description":"sqlite_factory   (PHP 5)sqlite_factory \u2014 Opens an SQLite database and returns an SQLiteDatabase object         Description       SQLiteDatabase sqlite_factory     ( string $filename    [, int $mode = 0666    [, string &$error_message   ]] )        sqlite_factory() behaves similarly to    sqlite_open() in that it opens an SQLite database or    attempts to create it if it does not exist.  However, a    SQLiteDatabase object is    returned rather than a resource.  Please see the    sqlite_open() reference page for further usage and caveats.            Parameters                    filename                      The filename of the SQLite database.                                mode                      The mode of the file. Intended to be used to open the database in        read-only mode.  Presently, this parameter is ignored by the sqlite        library.  The default value for mode is the octal value        0666 and this is the recommended value.                                error_message                      Passed by reference and is set to hold a descriptive error message        explaining why the database could not be opened if there was an error.                                     Return Values       Returns an SQLiteDatabase object on success, NULL on error.            Examples            Example #1 sqlite_factory() example       <?php$dbhandle\u00a0=\u00a0sqlite_factory('sqlitedb');$dbhandle->query('SELECT\u00a0user_id,\u00a0username\u00a0FROM\u00a0users');\/*\u00a0functionally\u00a0equivalent\u00a0to:\u00a0*\/$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('sqlitedb');$dbhandle->query('SELECT\u00a0user_id,\u00a0username\u00a0FROM\u00a0users');?>                         See Also            sqlite_open() - Opens an SQLite database and create the database if it does not exist     sqlite_popen() - Opens a persistent handle to an SQLite database and create the database if it does not exist"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-exec.php","title":"sqlite_execSQLiteDatabase-exec","description":"sqlite_exec   SQLiteDatabase-exec   (PHP 5, PECL sqlite >= 1.0.3)sqlite_exec -- SQLiteDatabase->exec \u2014 Executes a result-less query against a given database         Description       bool sqlite_exec     ( resource $dbhandle    , string $query    [, string &$error_msg   ] )        bool sqlite_exec     ( string $query    , resource $dbhandle    )    Object oriented style (method):                bool SQLiteDatabase::queryExec      ( string $query     [, string &$error_msg    ] )           Executes an SQL statement given by the query against    a given database handle (specified by the dbhandle     parameter).      Warning         SQLite will execute multiple queries separated by     semicolons, so you can use it to execute a batch of SQL that you have     loaded from a file or have embedded in a script.                Parameters                    dbhandle                      The SQLite Database resource; returned from        sqlite_open() when used procedurally. This parameter        is not required when using the object-oriented method.                                query                      The query to be executed.                      Data inside the query should be properly escaped.                                error_msg                      The specified variable will be filled if an error occurs. This is        specially important because SQL syntax errors can&#039;t be fetched using        the sqlite_last_error() function.                               Note: Two alternative syntaxes are supported for compatibility with other database extensions (such as MySQL). The preferred form is the first, where the dbhandle parameter is the first parameter to the function.         Return Values       This function will return a boolean result; TRUE for success or FALSE for failure.    If you need to run a query that returns rows, see sqlite_query().      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option.         Changelog                                 Version        Description                                    5.1.0                 Added the error_msg parameter                                             Examples            Example #1 Procedural example       <?php$dbhandle\u00a0=\u00a0sqlite_open('mysqlitedb');$query\u00a0=\u00a0sqlite_exec($dbhandle,\u00a0\"UPDATE\u00a0users\u00a0SET\u00a0email='jDoe@example.com'\u00a0WHERE\u00a0username='jDoe'\",\u00a0$error);if\u00a0(!$query)\u00a0{\u00a0\u00a0\u00a0\u00a0exit(\"Error\u00a0in\u00a0query:\u00a0'$error'\");}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Number\u00a0of\u00a0rows\u00a0modified:\u00a0',\u00a0sqlite_changes($dbhandle);}?>                           Example #2 Object-oriented example       <?php$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('mysqlitedb');$query\u00a0=\u00a0$dbhandle->queryExec(\"UPDATE\u00a0users\u00a0SET\u00a0email='jDoe@example.com'\u00a0WHERE\u00a0username='jDoe'\",\u00a0$error);if\u00a0(!$query)\u00a0{\u00a0\u00a0\u00a0\u00a0exit(\"Error\u00a0in\u00a0query:\u00a0'$error'\");}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Number\u00a0of\u00a0rows\u00a0modified:\u00a0',\u00a0$dbhandle->changes();}?>                         See Also            sqlite_query() - Executes a query against a given database and returns a result handle     sqlite_unbuffered_query() - Execute a query that does not prefetch and buffer all data     sqlite_array_query() - Execute a query against a given database and returns an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-array.php","title":"sqlite_fetch_arraySQLiteResult-fetchSQLiteUnbuffered-fetch","description":"sqlite_fetch_array   SQLiteResult-fetch   SQLiteUnbuffered-fetch   (PHP 5, PECL sqlite >= 1.0.0)sqlite_fetch_array -- SQLiteResult->fetch -- SQLiteUnbuffered->fetch \u2014 Fetches the next row from a result set as an array         Description       array sqlite_fetch_array     ( resource $result    [, int $result_type = SQLITE_BOTH    [, bool $decode_binary = true   ]] )    Object oriented style (method):                array SQLiteResult::fetch      ([ int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )                    array SQLiteUnbuffered::fetch      ([ int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )           Fetches the next row from the given result handle.    If there are no more rows, returns FALSE, otherwise returns an    associative array representing the row data.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                result_type              The optional result_type parameter accepts a constant and determines how the returned array will be indexed. Using SQLITE_ASSOC will return only associative indices (named fields) while SQLITE_NUM will return only numerical indices (ordinal field numbers). SQLITE_BOTH will return both associative and numerical indices. SQLITE_BOTH is the default for this function.                         decode_binary              When the decode_binary parameter is set to TRUE (the default), PHP will decode the binary encoding it applied to the data if it was encoded using the sqlite_escape_string().  You should normally leave this value at its default, unless you are interoperating with databases created by other sqlite capable applications.                              Return Values       Returns an array of the next row from a result set; FALSE if the    next position is beyond the final row.      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option.         Examples            Example #1 Procedural example       <?php$dbhandle\u00a0=\u00a0sqlite_open('sqlitedb');$query\u00a0=\u00a0sqlite_query($dbhandle,\u00a0'SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025');while\u00a0($entry\u00a0=\u00a0sqlite_fetch_array($query,\u00a0SQLITE_ASSOC))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Name:\u00a0'\u00a0.\u00a0$entry['name']\u00a0.\u00a0'\u00a0\u00a0E-mail:\u00a0'\u00a0.\u00a0$entry['email'];}?>                           Example #2 Object-oriented example       <?php$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('sqlitedb');$query\u00a0=\u00a0$dbhandle->query('SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025');\u00a0\/\/\u00a0buffered\u00a0result\u00a0set$query\u00a0=\u00a0$dbhandle->unbufferedQuery('SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025');\u00a0\/\/\u00a0unbuffered\u00a0result\u00a0setwhile\u00a0($entry\u00a0=\u00a0$query->fetch(SQLITE_ASSOC))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Name:\u00a0'\u00a0.\u00a0$entry['name']\u00a0.\u00a0'\u00a0\u00a0E-mail:\u00a0'\u00a0.\u00a0$entry['email'];}?>                        See Also            sqlite_array_query() - Execute a query against a given database and returns an array     sqlite_fetch_string() - Alias of sqlite_fetch_single"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-object.php","title":"sqlite_fetch_objectSQLiteResult-fetchObjectSQLiteUnbuffered-fetchObject","description":"sqlite_fetch_object   SQLiteResult-fetchObject   SQLiteUnbuffered-fetchObject   (PHP 5)sqlite_fetch_object -- SQLiteResult->fetchObject -- SQLiteUnbuffered->fetchObject \u2014 Fetches the next row from a result set as an object         Description       object sqlite_fetch_object     ( resource $result    [, string $class_name    [, array $ctor_params    [, bool $decode_binary = true   ]]] )    Object oriented style (method):                object SQLiteResult::fetchObject      ([ string $class_name     [, array $ctor_params     [, bool $decode_binary = true    ]]] )                    object SQLiteUnbuffered::fetchObject      ([ string $class_name     [, array $ctor_params     [, bool $decode_binary = true    ]]] )        WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-column-types.php","title":"sqlite_fetch_column_typesSQLiteDatabase-fetchColumnTypes","description":"sqlite_fetch_column_types   SQLiteDatabase-fetchColumnTypes   (PHP 5)sqlite_fetch_column_types -- SQLiteDatabase->fetchColumnTypes \u2014     Return an array of column types from a particular table            Description       array sqlite_fetch_column_types     ( string $table_name    , resource $dbhandle    [, int $result_type = SQLITE_ASSOC   ] )    Object oriented style (method):                array SQLiteDatabase::fetchColumnTypes      ( string $table_name     [, int $result_type = SQLITE_ASSOC    ] )           sqlite_fetch_column_types() returns an array of column    data types from the specified table_name table.            Parameters                    table_name                      The table name to query.                                dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                result_type                      The optional result_type parameter accepts a        constant and determines how the returned array will be indexed. Using        SQLITE_ASSOC will return only associative indices        (named fields) while SQLITE_NUM will return only        numerical indices (ordinal field numbers).        SQLITE_ASSOC is the default for        this function.                                     Return Values       Returns an array of column data types; FALSE on error.      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option.         Changelog                                 Version        Description                                    5.1.0        Added result_type                                     Examples            Example #1 Procedural example       <?php$db\u00a0=\u00a0sqlite_open('mysqlitedb');sqlite_query($db,\u00a0'CREATE\u00a0TABLE\u00a0foo\u00a0(bar\u00a0varchar(10),\u00a0arf\u00a0text)');$cols\u00a0=\u00a0sqlite_fetch_column_types('foo',\u00a0$db,\u00a0SQLITE_ASSOC);foreach\u00a0($cols\u00a0as\u00a0$column\u00a0=>\u00a0$type)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Column:\u00a0$column\u00a0\u00a0Type:\u00a0$type\\n\";}?>                           Example #2 Object-oriented example       <?php$db\u00a0=\u00a0new\u00a0SQLiteDatabase('mysqlitedb');$db->query('CREATE\u00a0TABLE\u00a0foo\u00a0(bar\u00a0varchar(10),\u00a0arf\u00a0text)');$cols\u00a0=\u00a0$db->fetchColumnTypes('foo',\u00a0SQLITE_ASSOC);foreach\u00a0($cols\u00a0as\u00a0$column\u00a0=>\u00a0$type)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Column:\u00a0$column\u00a0\u00a0Type:\u00a0$type\\n\";}?>             The above example will output:       Column: bar  Type: VARCHAR Column: arf  Type: TEXT"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-all.php","title":"sqlite_fetch_allSQLiteResult-fetchAllSQLiteUnbuffered-fetchAll","description":"sqlite_fetch_all   SQLiteResult-fetchAll   SQLiteUnbuffered-fetchAll   (PHP 5, PECL sqlite >= 1.0.0)sqlite_fetch_all -- SQLiteResult->fetchAll -- SQLiteUnbuffered->fetchAll \u2014 Fetches all rows from a result set as an array of arrays         Description       array sqlite_fetch_all     ( resource $result    [, int $result_type = SQLITE_BOTH    [, bool $decode_binary = true   ]] )    Object oriented style (method):                array SQLiteResult::fetchAll      ([ int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )                    array SQLiteUnbuffered::fetchAll      ([ int $result_type = SQLITE_BOTH     [, bool $decode_binary = true    ]] )           sqlite_fetch_all() returns an array of the entire result    set from the result resource.  It is similar to calling    sqlite_query() (or    sqlite_unbuffered_query()) and then    sqlite_fetch_array() for each row in the result set.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                result_type              The optional result_type parameter accepts a constant and determines how the returned array will be indexed. Using SQLITE_ASSOC will return only associative indices (named fields) while SQLITE_NUM will return only numerical indices (ordinal field numbers). SQLITE_BOTH will return both associative and numerical indices. SQLITE_BOTH is the default for this function.                         decode_binary              When the decode_binary parameter is set to TRUE (the default), PHP will decode the binary encoding it applied to the data if it was encoded using the sqlite_escape_string().  You should normally leave this value at its default, unless you are interoperating with databases created by other sqlite capable applications.                              Return Values       Returns an array of the remaining rows in a result set. If called right    after sqlite_query(), it returns all rows. If called    after sqlite_fetch_array(), it returns the rest. If    there are no rows in a result set, it returns an empty array.      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option.         Examples            Example #1 Procedural example       <?php$dbhandle\u00a0=\u00a0sqlite_open('sqlitedb');$query\u00a0=\u00a0sqlite_query($dbhandle,\u00a0'SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025');$result\u00a0=\u00a0sqlite_fetch_all($query,\u00a0SQLITE_ASSOC);foreach\u00a0($result\u00a0as\u00a0$entry)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Name:\u00a0'\u00a0.\u00a0$entry['name']\u00a0.\u00a0'\u00a0\u00a0E-mail:\u00a0'\u00a0.\u00a0$entry['email'];}?>                           Example #2 Object-oriented example       <?php$dbhandle\u00a0=\u00a0new\u00a0SQLiteDatabase('sqlitedb');$query\u00a0=\u00a0$dbhandle->query('SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025');\u00a0\/\/\u00a0buffered\u00a0result\u00a0set$query\u00a0=\u00a0$dbhandle->unbufferedQuery('SELECT\u00a0name,\u00a0email\u00a0FROM\u00a0users\u00a0LIMIT\u00a025');\u00a0\/\/\u00a0unbuffered\u00a0result\u00a0set$result\u00a0=\u00a0$query->fetchAll(SQLITE_ASSOC);foreach\u00a0($result\u00a0as\u00a0$entry)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Name:\u00a0'\u00a0.\u00a0$entry['name']\u00a0.\u00a0'\u00a0\u00a0E-mail:\u00a0'\u00a0.\u00a0$entry['email'];}?>                        See Also            sqlite_fetch_array() - Fetches the next row from a result set as an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-string.php","title":"sqlite_fetch_string","description":"sqlite_fetch_string   (PHP 5, PECL sqlite >= 1.0.0)sqlite_fetch_string \u2014 Alias of sqlite_fetch_single()         Description       This function is an alias of:     sqlite_fetch_single()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-single.php","title":"sqlite_fetch_singleSQLiteResult-fetchSingleSQLiteUnbuffered-fetchSingle","description":"sqlite_fetch_single   SQLiteResult-fetchSingle   SQLiteUnbuffered-fetchSingle   (PHP 5, PECL sqlite >= 1.0.1)sqlite_fetch_single -- SQLiteResult->fetchSingle -- SQLiteUnbuffered->fetchSingle \u2014 Fetches the first column of a result set as a string         Description       string sqlite_fetch_single     ( resource $result    [, bool $decode_binary = true   ] )    Object oriented style (method):                string SQLiteResult::fetchSingle      ([ bool $decode_binary = true    ] )                    string SQLiteUnbuffered::fetchSingle      ([ bool $decode_binary = true    ] )           sqlite_fetch_single() is identical to    sqlite_fetch_array() except that it returns the value    of the first column of the rowset.          This is the most optimal way to retrieve data when you are only    interested in the values from a single column of data.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                decode_binary              When the decode_binary parameter is set to TRUE (the default), PHP will decode the binary encoding it applied to the data if it was encoded using the sqlite_escape_string().  You should normally leave this value at its default, unless you are interoperating with databases created by other sqlite capable applications.                              Return Values       Returns the first column value, as a string.            Examples            Example #1 A sqlite_fetch_single() example       <?phpif\u00a0($dbhandle\u00a0=\u00a0sqlite_open('mysqlitedb',\u00a00666,\u00a0$sqliteerror))\u00a0{\u00a0\u00a0\u00a0\u00a0$sql\u00a0=\u00a0\"SELECT\u00a0id\u00a0FROM\u00a0sometable\u00a0WHERE\u00a0id\u00a0=\u00a042\";\u00a0\u00a0\u00a0\u00a0$res\u00a0=\u00a0sqlite_query($dbhandle,\u00a0$sql);\u00a0\u00a0\u00a0\u00a0if\u00a0(sqlite_num_rows($res)\u00a0>\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0sqlite_fetch_single($res);\u00a0\/\/\u00a042\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sqlite_close($dbhandle);}?>                        See Also            sqlite_fetch_array() - Fetches the next row from a result set as an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-has-prev.php","title":"sqlite_has_prevSQLiteResult-hasPrev","description":"sqlite_has_prev   SQLiteResult-hasPrev   (PHP 5)sqlite_has_prev -- SQLiteResult->hasPrev \u2014 Returns whether or not a previous row is available         Description       bool sqlite_has_prev     ( resource $result    )    Object oriented style (method):                bool SQLiteResult::hasPrev      ( void     )           Find whether there are more previous rows from the given result handle.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns TRUE if there are more previous rows available from the    result handle, or FALSE otherwise.            See Also            sqlite_prev() - Seek to the previous row number of a result set     sqlite_has_more() - Finds whether or not more rows are available     sqlite_num_rows() - Returns the number of rows in a buffered result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-has-more.php","title":"sqlite_has_more","description":"sqlite_has_more   (PHP 5, PECL sqlite >= 1.0.0)sqlite_has_more \u2014 Finds whether or not more rows are available         Description       bool sqlite_has_more     ( resource $result    )        Finds whether more rows are available from the given result set.            Parameters                    result                      The SQLite result resource.                                     Return Values       Returns TRUE if there are more rows available from the    result handle, or FALSE otherwise.            See Also            sqlite_num_rows() - Returns the number of rows in a buffered result set     sqlite_changes() - Returns the number of rows that were changed by the most    recent SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-key.php","title":"sqlite_keySQLiteResult-key","description":"sqlite_key   SQLiteResult-key   (PHP 5 >= 5.1.0)sqlite_key -- SQLiteResult->key \u2014 Returns the current row index         Description       int sqlite_key     ( resource $result    )    Object oriented style (method):                int SQLiteResult::key      ( void     )           sqlite_key() returns the current row index of the    buffered result set result.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns the current row index of the buffered result set    result.            Changelog                                 Version        Description                                    5.0.4                 Prior to PHP 5.0.4, sqlite_key() was only able to be         called as a method on a         SQLiteResult object,         not procedurally.                                            See Also            sqlite_next() - Seek to the next row number     sqlite_current() - Fetches the current row from a result set as an array     sqlite_rewind() - Seek to the first row number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-field-name.php","title":"sqlite_field_nameSQLiteResult-fieldNameSQLiteUnbuffered-fieldName","description":"sqlite_field_name   SQLiteResult-fieldName   SQLiteUnbuffered-fieldName   (PHP 5, PECL sqlite >= 1.0.0)sqlite_field_name -- SQLiteResult->fieldName -- SQLiteUnbuffered->fieldName \u2014 Returns the name of a particular field         Description       string sqlite_field_name     ( resource $result    , int $field_index    )    Object oriented style (method):                string SQLiteResult::fieldName      ( int $field_index     )                    string SQLiteUnbuffered::fieldName      ( int $field_index     )           Given the ordinal column number, field_index,    sqlite_field_name() returns the name of that field in    the result set result.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                field_index                      The ordinal column number in the result set.                                     Return Values       Returns the name of a field in an SQLite result set, given the ordinal    column number; FALSE on error.      The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded according to the value of the sqlite.assoc_case configuration option."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-last-error.php","title":"sqlite_last_errorSQLiteDatabase-lastError","description":"sqlite_last_error   SQLiteDatabase-lastError   (PHP 5, PECL sqlite >= 1.0.0)sqlite_last_error -- SQLiteDatabase->lastError \u2014 Returns the error code of the last error for a database         Description       int sqlite_last_error     ( resource $dbhandle    )    Object oriented style (method):                int SQLiteDatabase::lastError      ( void     )           Returns the error code from the last operation performed on    dbhandle (the database handle), or 0    when no error occurred. A human readable    description of the error code can be retrieved using    sqlite_error_string().            Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                     Return Values       Returns an error code, or 0 if no error occurred.            See Also            sqlite_error_string() - Returns the textual description of an error code"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-libencoding.php","title":"sqlite_libencoding","description":"sqlite_libencoding   (PHP 5, PECL sqlite >= 1.0.0)sqlite_libencoding \u2014 Returns the encoding of the linked SQLite library         Description       string sqlite_libencoding     ( void    )        The SQLite library may be compiled in either ISO-8859-1    or UTF-8 compatible modes. This function allows you to    determine which encoding scheme is used by your version of the library.      Warning         The default PHP distribution builds libsqlite in     ISO-8859-1 encoding     mode.  However, this is a misnomer; rather than handling     ISO-8859-1, it operates according to your current     locale settings for string comparisons and sort ordering. So, rather     than ISO-8859-1, you should think of it as being     &#039;8-bit&#039; instead.              When compiled with UTF-8 support, sqlite handles encoding and decoding    of UTF-8 multi-byte character sequences, but does not yet do a complete    job when working with the data (no normalization is performed for    example), and some comparison operations may still not be carried out    correctly.      Warning         It is not recommended that you use PHP in a web-server configuration     with a version of the SQLite library compiled with UTF-8 support, since     libsqlite will abort the process if it detects a problem with the     UTF-8 encoding.                Return Values       Returns the library encoding.            See Also            sqlite_lib_version()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-libversion.php","title":"sqlite_libversion","description":"sqlite_libversion   (PHP 5, PECL sqlite >= 1.0.0)sqlite_libversion \u2014 Returns the version of the linked SQLite library         Description       string sqlite_libversion     ( void    )        Returns the version of the linked SQLite library.             Return Values       Returns the library version, as a string.            See Also            sqlite_libencoding() - Returns the encoding of the linked SQLite library"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-next.php","title":"sqlite_nextSQLiteResult-nextSQLiteUnbuffered-next","description":"sqlite_next   SQLiteResult-next   SQLiteUnbuffered-next   (PHP 5, PECL sqlite >= 1.0.0)sqlite_next -- SQLiteResult->next -- SQLiteUnbuffered->next \u2014 Seek to the next row number         Description       bool sqlite_next     ( resource $result    )    Object oriented style (method):                bool SQLiteResult::next      ( void     )                    bool SQLiteUnbuffered::next      ( void     )           sqlite_next() advances the result handle    result to the next row.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                     Return Values       Returns TRUE on success, or FALSE if there are no more rows.            See Also            sqlite_seek() - Seek to a particular row number of a buffered result set     sqlite_current() - Fetches the current row from a result set as an array     sqlite_rewind() - Seek to the first row number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-last-insert-rowid.php","title":"sqlite_last_insert_rowidSQLiteDatabase-lastInsertRowid","description":"sqlite_last_insert_rowid   SQLiteDatabase-lastInsertRowid   (PHP 5, PECL sqlite >= 1.0.0)sqlite_last_insert_rowid -- SQLiteDatabase->lastInsertRowid \u2014 Returns the rowid of the most recently inserted row         Description       int sqlite_last_insert_rowid     ( resource $dbhandle    )    Object oriented style (method):                int SQLiteDatabase::lastInsertRowid      ( void     )           Returns the rowid of the row that was most recently inserted into the    database dbhandle, if it was created as an    auto-increment field.      Tip         You can create auto-increment fields in SQLite by declaring them as     INTEGER PRIMARY KEY in your table schema.                Parameters                    dbhandle                      The SQLite Database resource; returned from sqlite_open()        when used procedurally.  This parameter is not required        when using the object-oriented method.                                     Return Values       Returns the row id, as an integer."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-num-fields.php","title":"sqlite_num_fieldsSQLiteResult-numFieldsSQLiteUnbuffered-numFields","description":"sqlite_num_fields   SQLiteResult-numFields   SQLiteUnbuffered-numFields   (PHP 5, PECL sqlite >= 1.0.0)sqlite_num_fields -- SQLiteResult->numFields -- SQLiteUnbuffered->numFields \u2014 Returns the number of fields in a result set         Description       int sqlite_num_fields     ( resource $result    )    Object oriented style (method):                int SQLiteResult::numFields      ( void     )                    int SQLiteUnbuffered::numFields      ( void     )           Returns the number of fields in the result set.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.                                     Return Values       Returns the number of fields, as an integer.            See Also            sqlite_changes() - Returns the number of rows that were changed by the most    recent SQL statement     sqlite_num_rows() - Returns the number of rows in a buffered result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-num-rows.php","title":"sqlite_num_rowsSQLiteResult-numRows","description":"sqlite_num_rows   SQLiteResult-numRows   (PHP 5, PECL sqlite >= 1.0.0)sqlite_num_rows -- SQLiteResult->numRows \u2014 Returns the number of rows in a buffered result set         Description       int sqlite_num_rows     ( resource $result    )    Object oriented style (method):                int SQLiteResult::numRows      ( void     )           Returns the number of rows in the buffered result    set.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns the number of rows, as an integer.            Examples            Example #1 Procedural example       <?php$db\u00a0=\u00a0sqlite_open('mysqlitedb');$result\u00a0=\u00a0sqlite_query($db,\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0mytable\u00a0WHERE\u00a0name='John\u00a0Doe'\");$rows\u00a0=\u00a0sqlite_num_rows($result);echo\u00a0\"Number\u00a0of\u00a0rows:\u00a0$rows\";?>                           Example #2 Object-oriented example       <?php$db\u00a0=\u00a0new\u00a0SQLiteDatabase('mysqlitedb');$result\u00a0=\u00a0$db->query(\"SELECT\u00a0*\u00a0FROM\u00a0mytable\u00a0WHERE\u00a0name='John\u00a0Doe'\");$rows\u00a0=\u00a0$result->numRows();echo\u00a0\"Number\u00a0of\u00a0rows:\u00a0$rows\";?>                        See Also            sqlite_changes() - Returns the number of rows that were changed by the most    recent SQL statement     sqlite_query() - Executes a query against a given database and returns a result handle     sqlite_num_fields() - Returns the number of fields in a result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-prev.php","title":"sqlite_prevSQLiteResult-prev","description":"sqlite_prev   SQLiteResult-prev   (PHP 5)sqlite_prev -- SQLiteResult->prev \u2014 Seek to the previous row number of a result set         Description       bool sqlite_prev     ( resource $result    )    Object oriented style (method):                bool SQLiteResult::prev      ( void     )           sqlite_prev() seeks back the     result handle to the previous row.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns TRUE on success, or FALSE if there are no more previous rows.            See Also            sqlite_has_prev() - Returns whether or not a previous row is available     sqlite_rewind() - Seek to the first row number     sqlite_next() - Seek to the next row number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-popen.php","title":"sqlite_popen","description":"sqlite_popen   (PHP 5, PECL sqlite >= 1.0.0)sqlite_popen \u2014     Opens a persistent handle to an SQLite database and create the database if it does not exist            Description       resource sqlite_popen     ( string $filename    [, int $mode = 0666    [, string &$error_message   ]] )        This function behaves identically to sqlite_open()    except that is uses the persistent resource mechanism of PHP.    For information about the meaning of the parameters, read the    sqlite_open() manual page.          sqlite_popen() will first check to see if a persistent    handle has already been opened for the given    filename.  If it finds one, it returns that handle    to your script, otherwise it opens a fresh handle to the database.          The benefit of this approach is that you don&#039;t incur the performance    cost of re-reading the database and index schema on each page hit served    by persistent web server SAPI&#039;s (any SAPI except for regular CGI or CLI).      Note:          If you use persistent handles and have the database updated by a     background process (perhaps via a crontab), and that process re-creates     the database by overwriting it (either by unlinking and rebuilding, or     moving the updated version to replace the current version),     you may experience undefined behaviour when a persistent handle on the     old version of the database is recycled.             To avoid this situation, have your background processes open the same     database file and perform their updates in a transaction.                Parameters                    filename                      The filename of the SQLite database.  If the file does not exist, SQLite        will attempt to create it.  PHP must have write permissions to the file        if data is inserted, the database schema is modified or to create the        database if it does not exist.                                mode                      The mode of the file. Intended to be used to open the database in        read-only mode.  Presently, this parameter is ignored by the sqlite        library.  The default value for mode is the octal value        0666 and this is the recommended value.                                error_message                      Passed by reference and is set to hold a descriptive error message        explaining why the database could not be opened if there was an error.                                     Return Values       Returns a resource (database handle) on success, FALSE on error.            See Also            sqlite_open() - Opens an SQLite database and create the database if it does not exist     sqlite_close() - Closes an open SQLite database     sqlite_factory() - Opens an SQLite database and returns an SQLiteDatabase object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-open.php","title":"sqlite_open","description":"sqlite_open   (PHP 5, PECL sqlite >= 1.0.0)sqlite_open \u2014 Opens an SQLite database and create the database if it does not exist         Description       resource sqlite_open     ( string $filename    [, int $mode = 0666    [, string &$error_message   ]] )    Object oriented style (constructor):                 SQLiteDatabase::__construct      ( string $filename     [, int $mode = 0666     [, string &$error_message    ]] )           Opens an SQLite database or creates the database if it does not exist.            Parameters                    filename                      The filename of the SQLite database.  If the file does not exist, SQLite        will attempt to create it.  PHP must have write permissions to the file        if data is inserted, the database schema is modified or to create the        database if it does not exist.                                mode                      The mode of the file. Intended to be used to open the database in        read-only mode.  Presently, this parameter is ignored by the sqlite        library.  The default value for mode is the octal value        0666 and this is the recommended value.                                error_message                      Passed by reference and is set to hold a descriptive error message        explaining why the database could not be opened if there was an error.                                     Return Values       Returns a resource (database handle) on success, FALSE on error.            Examples            Example #1 sqlite_open() example       <?phpif\u00a0($db\u00a0=\u00a0sqlite_open('mysqlitedb',\u00a00666,\u00a0$sqliteerror))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlite_query($db,\u00a0'CREATE\u00a0TABLE\u00a0foo\u00a0(bar\u00a0varchar(10))');\u00a0\u00a0\u00a0\u00a0sqlite_query($db,\u00a0\"INSERT\u00a0INTO\u00a0foo\u00a0VALUES\u00a0('fnord')\");\u00a0\u00a0\u00a0\u00a0$result\u00a0=\u00a0sqlite_query($db,\u00a0'select\u00a0bar\u00a0from\u00a0foo');\u00a0\u00a0\u00a0\u00a0var_dump(sqlite_fetch_array($result));\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0die($sqliteerror);}?>                        Notes   Tip         On Unix platforms, SQLite is sensitive to scripts that use the fork() system call.  If you     do have such a script, it is recommended that you close the handle prior     to forking and then re-open it in the child and\/or parent.     For more information on this issue, see      \u00bb\u00a0The C language interface     to the SQLite library in the section entitled     Multi-Threading And SQLite.           Tip         It is not recommended to work with SQLite databases mounted on NFS     partitions.  Since NFS is notoriously bad when it comes to locking you     may find that you cannot even open the database at all, and if it     succeeds, the locking behaviour may be undefined.          Note:          Starting with SQLite library version 2.8.2, you can specify     :memory: as the filename to     create a database that lives only in the memory of the computer.     This is useful mostly for temporary processing, as the in-memory     database will be destroyed when the process ends.  It can also be     useful when coupled with the ATTACH DATABASE SQL     statement to load other databases and move and query data between them.          Note:          SQLite is safe mode and open_basedir aware.                 See Also            sqlite_popen() - Opens a persistent handle to an SQLite database and create the database if it does not exist     sqlite_close() - Closes an open SQLite database     sqlite_factory() - Opens an SQLite database and returns an SQLiteDatabase object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-rewind.php","title":"sqlite_rewindSQLiteResult-rewind","description":"sqlite_rewind   SQLiteResult-rewind   (PHP 5, PECL sqlite >= 1.0.0)sqlite_rewind -- SQLiteResult->rewind \u2014 Seek to the first row number         Description       bool sqlite_rewind     ( resource $result    )    Object oriented style (method):                bool SQLiteResult::rewind      ( void     )           sqlite_rewind() seeks back to the first row in the    given result set.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns FALSE if there are no rows in the result set, TRUE otherwise.            See Also            sqlite_next() - Seek to the next row number     sqlite_current() - Fetches the current row from a result set as an array     sqlite_seek() - Seek to a particular row number of a buffered result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-seek.php","title":"sqlite_seekSQLiteResult-seek","description":"sqlite_seek   SQLiteResult-seek   (PHP 5, PECL sqlite >= 1.0.0)sqlite_seek -- SQLiteResult->seek \u2014 Seek to a particular row number of a buffered result set         Description       bool sqlite_seek     ( resource $result    , int $rownum    )    Object oriented style (method):                bool SQLiteResult::seek      ( int $rownum     )           sqlite_seek() seeks to the row given by the parameter    rownum.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                         rownum                      The ordinal row number to seek to.  The row number is zero-based (0 is        the first row).              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns FALSE if the row does not exist, TRUE otherwise.            See Also            sqlite_next() - Seek to the next row number     sqlite_current() - Fetches the current row from a result set as an array     sqlite_rewind() - Seek to the first row number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-single-query.php","title":"sqlite_single_querySQLiteDatabase-singleQuery","description":"sqlite_single_query   SQLiteDatabase-singleQuery   (PHP 5, PECL sqlite >= 1.0.1)sqlite_single_query -- SQLiteDatabase->singleQuery \u2014     Executes a query and returns either an array for one single column or the value of the first row            Description       array sqlite_single_query     ( resource $db    , string $query    [, bool $first_row_only    [, bool $decode_binary   ]] )    Object oriented style (method):                array SQLiteDatabase::singleQuery      ( string $query     [, bool $first_row_only     [, bool $decode_binary    ]] )          WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-query.php","title":"sqlite_querySQLiteDatabase-query","description":"sqlite_query   SQLiteDatabase-query   (PHP 5, PECL sqlite >= 1.0.0)sqlite_query -- SQLiteDatabase->query \u2014 Executes a query against a given database and returns a result handle         Description       resource sqlite_query     ( resource $dbhandle    , string $query    [, int $result_type = SQLITE_BOTH    [, string &$error_msg   ]] )        resource sqlite_query     ( string $query    , resource $dbhandle    [, int $result_type = SQLITE_BOTH    [, string &$error_msg   ]] )    Object oriented style (method):                SQLiteResult SQLiteDatabase::query      ( string $query     [, int $result_type = SQLITE_BOTH     [, string &$error_msg    ]] )           Executes an SQL statement given by the query against    a given database handle.            Parameters                    dbhandle                      The SQLite Database resource; returned from        sqlite_open() when used procedurally. This parameter        is not required when using the object-oriented method.                                query                      The query to be executed.                      Data inside the query should be properly escaped.                                result_type              The optional result_type parameter accepts a constant and determines how the returned array will be indexed. Using SQLITE_ASSOC will return only associative indices (named fields) while SQLITE_NUM will return only numerical indices (ordinal field numbers). SQLITE_BOTH will return both associative and numerical indices. SQLITE_BOTH is the default for this function.                         error_msg                      The specified variable will be filled if an error occurs. This is        specially important because SQL syntax errors can&#039;t be fetched using        the sqlite_last_error() function.                                Note: Two alternative syntaxes are supported for compatibility with other database extensions (such as MySQL). The preferred form is the first, where the dbhandle parameter is the first parameter to the function.         Return Values       This function will return a result handle or FALSE on failure.    For queries that return rows, the result handle can then be used with    functions such as sqlite_fetch_array() and    sqlite_seek().          Regardless of the query type, this function will return FALSE if the    query failed.          sqlite_query() returns a buffered, seekable result    handle.  This is useful for reasonably small queries where you need to    be able to randomly access the rows.  Buffered result handles will    allocate memory to hold the entire result and will not return until it    has been fetched.  If you only need sequential access to the data, it is    recommended that you use the much higher performance    sqlite_unbuffered_query() instead.           Changelog                                 Version        Description                                    5.1.0                 Added the error_msg parameter                                            Notes   Warning         SQLite will execute multiple queries separated by     semicolons, so you can use it to execute a batch of SQL that you have     loaded from a file or have embedded in a script. However, this works only     when the result of the function is not used - if it is used,      only the first SQL statement would be executed. Function     sqlite_exec() will always execute multiple SQL      statements.             When executing multiple queries, the return value of this function     will be FALSE if there was an error, but undefined otherwise (it might     be TRUE for success or it might return a result handle).                See Also            sqlite_unbuffered_query() - Execute a query that does not prefetch and buffer all data     sqlite_array_query() - Execute a query against a given database and returns an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-udf-decode-binary.php","title":"sqlite_udf_decode_binary","description":"sqlite_udf_decode_binary   (PHP 5, PECL sqlite >= 1.0.0)sqlite_udf_decode_binary \u2014 Decode binary data passed as parameters to an UDF         Description       string sqlite_udf_decode_binary     ( string $data    )        Decodes binary data passed as parameters to a UDF.          You must call this function on parameters passed to your UDF if you need    them to handle binary data, as the binary encoding employed by PHP will    obscure the content and of the parameter in its natural, non-coded form.          PHP does not perform this encode\/decode operation automatically as it would    severely impact performance if it did.            Parameters                    data                      The encoded data that will be decoded, data that was applied by either        sqlite_udf_encode_binary() or        sqlite_escape_string().                                             Return Values       The decoded string.            Examples            Example #1 binary-safe max_length aggregation function example       <?php$data\u00a0=\u00a0array(\u00a0\u00a0\u00a0'one',\u00a0\u00a0\u00a0'two',\u00a0\u00a0\u00a0'three',\u00a0\u00a0\u00a0'four',\u00a0\u00a0\u00a0'five',\u00a0\u00a0\u00a0'six',\u00a0\u00a0\u00a0'seven',\u00a0\u00a0\u00a0'eight',\u00a0\u00a0\u00a0'nine',\u00a0\u00a0\u00a0'ten',\u00a0\u00a0\u00a0);$db\u00a0=\u00a0sqlite_open(':memory:');sqlite_query($db,\u00a0\"CREATE\u00a0TABLE\u00a0strings(a)\");foreach\u00a0($data\u00a0as\u00a0$str)\u00a0{\u00a0\u00a0\u00a0\u00a0$str\u00a0=\u00a0sqlite_escape_string($str);\u00a0\u00a0\u00a0\u00a0sqlite_query($db,\u00a0\"INSERT\u00a0INTO\u00a0strings\u00a0VALUES\u00a0('$str')\");}function\u00a0max_len_step(&$context,\u00a0$string)\u00a0{\u00a0\u00a0\u00a0\u00a0$string\u00a0=\u00a0sqlite_udf_decode_binary($string);\u00a0\u00a0\u00a0\u00a0if\u00a0(strlen($string)\u00a0>\u00a0$context)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$context\u00a0=\u00a0strlen($string);\u00a0\u00a0\u00a0\u00a0}}function\u00a0max_len_finalize(&$context)\u00a0{\u00a0\u00a0\u00a0\u00a0return\u00a0$context;}sqlite_create_aggregate($db,\u00a0'max_len',\u00a0'max_len_step',\u00a0'max_len_finalize');var_dump(sqlite_array_query($db,\u00a0'SELECT\u00a0max_len(a)\u00a0from\u00a0strings'));?>                        See Also            sqlite_udf_encode_binary() - Encode binary data before returning it from an UDF     sqlite_create_function() - Registers a \"regular\" User Defined Function for use in SQL statements     sqlite_create_aggregate() - Register an aggregating UDF for use in SQL statements"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-udf-encode-binary.php","title":"sqlite_udf_encode_binary","description":"sqlite_udf_encode_binary   (PHP 5, PECL sqlite >= 1.0.0)sqlite_udf_encode_binary \u2014 Encode binary data before returning it from an UDF         Description       string sqlite_udf_encode_binary     ( string $data    )        sqlite_udf_encode_binary() applies a binary encoding    to the data so that it can be safely returned from    queries (since the underlying libsqlite API is not binary safe).          If there is a chance that your data might be binary unsafe (e.g.: it    contains a NUL byte in the middle rather than at the end, or if it has and    0x01 byte as the first character) then you must    call this function to encode the return value from your UDF.          PHP does not perform this encode\/decode operation automatically as it would    severely impact performance if it did.      Note:          Do not use sqlite_escape_string() to quote strings     returned from UDF&#039;s as it will lead to double-quoting of the data.  Use     sqlite_udf_encode_binary() instead!                Parameters                    data                      The string being encoded.                                      Return Values       The encoded string.            See Also            sqlite_udf_decode_binary() - Decode binary data passed as parameters to an UDF     sqlite_escape_string() - Escapes a string for use as a query parameter     sqlite_create_function() - Registers a \"regular\" User Defined Function for use in SQL statements     sqlite_create_aggregate() - Register an aggregating UDF for use in SQL statements"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-valid.php","title":"sqlite_validSQLiteResult-validSQLiteUnbuffered-valid","description":"sqlite_valid   SQLiteResult-valid   SQLiteUnbuffered-valid   (PHP 5)sqlite_valid -- SQLiteResult->valid -- SQLiteUnbuffered->valid \u2014 Returns whether more rows are available         Description       bool sqlite_valid     ( resource $result    )    Object oriented style (method):                bool SQLiteResult::valid      ( void     )                    bool SQLiteUnbuffered::valid      ( void     )           Finds whether more rows are available from the given result handle.            Parameters                    result                      The SQLite result resource.  This parameter is not required when using        the object-oriented method.              Note: This function cannot be used with unbuffered result handles.                              Return Values       Returns TRUE if there are more rows available from the    result handle, or FALSE otherwise.            See Also            sqlite_num_rows() - Returns the number of rows in a buffered result set     sqlite_changes() - Returns the number of rows that were changed by the most    recent SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-unbuffered-query.php","title":"sqlite_unbuffered_querySQLiteDatabase-unbufferedQuery","description":"sqlite_unbuffered_query   SQLiteDatabase-unbufferedQuery   (PHP 5, PECL sqlite >= 1.0.0)sqlite_unbuffered_query -- SQLiteDatabase->unbufferedQuery \u2014 Execute a query that does not prefetch and buffer all data         Description       resource sqlite_unbuffered_query     ( resource $dbhandle    , string $query    [, int $result_type = SQLITE_BOTH    [, string &$error_msg   ]] )        resource sqlite_unbuffered_query     ( string $query    , resource $dbhandle    [, int $result_type = SQLITE_BOTH    [, string &$error_msg      ]] )    Object oriented style (method):                SQLiteUnbuffered SQLiteDatabase::unbufferedQuery      ( string $query     [, int $result_type = SQLITE_BOTH     [, string &$error_msg    ]] )           sqlite_unbuffered_query() is identical to    sqlite_query() except that the result that is returned    is a sequential forward-only result set that can only be used to read    each row, one after the other.          This function is ideal for generating things such as HTML tables where    you only need to process one row at a time and don&#039;t need to randomly    access the row data.      Note:          Functions such as sqlite_seek(),      sqlite_rewind(), sqlite_next(),     sqlite_current(), and     sqlite_num_rows() do not work on result handles     returned from sqlite_unbuffered_query().                Parameters                    dbhandle                      The SQLite Database resource; returned from        sqlite_open() when used procedurally. This parameter        is not required when using the object-oriented method.                                query                      The query to be executed.                      Data inside the query should be properly escaped.                                result_type              The optional result_type parameter accepts a constant and determines how the returned array will be indexed. Using SQLITE_ASSOC will return only associative indices (named fields) while SQLITE_NUM will return only numerical indices (ordinal field numbers). SQLITE_BOTH will return both associative and numerical indices. SQLITE_BOTH is the default for this function.                         error_msg                      The specified variable will be filled if an error occurs. This is        specially important because SQL syntax errors can&#039;t be fetched using        the sqlite_last_error() function.                               Note: Two alternative syntaxes are supported for compatibility with other database extensions (such as MySQL). The preferred form is the first, where the dbhandle parameter is the first parameter to the function.         Return Values       Returns a result handle or FALSE on failure.          sqlite_unbuffered_query() returns a sequential    forward-only result set that can only be used to read each row, one after    the other.            Changelog                                 Version        Description                                    5.1.0                 Added the error_msg parameter                                            See Also            sqlite_query() - Executes a query against a given database and returns a result handle"},{"url":"http:\/\/www.php.net\/manual\/en\/function.simplexml-import-dom.php","title":"simplexml_import_dom","description":"simplexml_import_dom   (PHP 5)simplexml_import_dom \u2014 Get a SimpleXMLElement object from a DOM node.        Description       SimpleXMLElement simplexml_import_dom     ( DOMNode $node    [, string $class_name = \"SimpleXMLElement\"   ] )        This function takes a node of a DOM    document and makes it into a SimpleXML node. This new object can    then be used as a native SimpleXML element.             Parameters                    node                      A DOM Element node                                class_name                      You may use this optional parameter so that        simplexml_import_dom() will return an object of         the specified class. That class should extend the         SimpleXMLElement class.                                     Return Values       Returns a SimpleXMLElement or FALSE on failure.            Examples            Example #1 Importing DOM       <?php$dom\u00a0=\u00a0new\u00a0DOMDocument;$dom->loadXML('<books><book><title>blah<\/title><\/book><\/books>');if\u00a0(!$dom)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0while\u00a0parsing\u00a0the\u00a0document';\u00a0\u00a0\u00a0\u00a0exit;}$s\u00a0=\u00a0simplexml_import_dom($dom);echo\u00a0$s->book[0]->title;?>             The above example will output:       blah                      See Also            dom_import_simplexml() - Gets a DOMElement object from a    SimpleXMLElement object     Basic SimpleXML usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-hostbased-file.php","title":"ssh2_auth_hostbased_file","description":"ssh2_auth_hostbased_file   (PECL ssh2 >= 0.9.0)ssh2_auth_hostbased_file \u2014 Authenticate using a public hostkey          Description       bool ssh2_auth_hostbased_file     ( resource $session    , string $username    , string $hostname    , string $pubkeyfile    , string $privkeyfile    [, string $passphrase    [, string $local_username   ]] )        Authenticate using a public hostkey read from a file.              Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                username                                              hostname                                              pubkeyfile                                              privkeyfile                                              passphrase                      If privkeyfile is encrypted (which it should        be), the passphrase must be provided.                                local_username                      If local_username is omitted, then the value        for username will be used for it.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Authentication using a public hostkey       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022,\u00a0array('hostkey'=>'ssh-rsa'));if\u00a0(ssh2_auth_hostbased_file($connection,\u00a0'remoteusername',\u00a0'myhost.example.com',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\/usr\/local\/etc\/hostkey_rsa.pub',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\/usr\/local\/etc\/hostkey_rsa',\u00a0'secret',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'localusername'))\u00a0{\u00a0\u00a0echo\u00a0\"Public\u00a0Key\u00a0Hostbased\u00a0Authentication\u00a0Successful\\n\";}\u00a0else\u00a0{\u00a0\u00a0die('Public\u00a0Key\u00a0Hostbased\u00a0Authentication\u00a0Failed');}?>                        Notes   Note:          ssh2_auth_hostbased_file() requires libssh2 >= 0.7 and     PHP\/SSH2 >= 0.7"},{"url":"http:\/\/www.php.net\/manual\/en\/function.simplexml-load-file.php","title":"simplexml_load_file","description":"simplexml_load_file   (PHP 5)simplexml_load_file \u2014     Interprets an XML file into an object           Description       SimpleXMLElement simplexml_load_file     ( string $filename    [, string $class_name = \"SimpleXMLElement\"    [, int $options = 0    [, string $ns = \"\"    [, bool $is_prefix = false   ]]]] )        Convert the well-formed XML document in the given file to an object.            Parameters                    filename                      Path to the XML file              Note:                  Libxml 2 unescapes the URI, so if you want to pass e.g.         b&c as the URI parameter a,         you have to call         simplexml_load_file(rawurlencode(&#039;http:\/\/example.com\/?a=&#039; .         urlencode(&#039;b&c&#039;))). Since PHP 5.1.0 you don&#039;t need to do         this because PHP will do it for you.                                        class_name                      You may use this optional parameter so that        simplexml_load_file() will return an object of         the specified class. That class should extend the         SimpleXMLElement class.                                options                      Since PHP 5.1.0 and Libxml 2.6.0, you may also use the        options parameter to specify additional Libxml parameters.                                ns                      Namespace prefix or URI.                                is_prefix                      TRUE if ns is a prefix, FALSE if it&#039;s a URI;        defaults to FALSE.                                     Return Values       Returns an object of class SimpleXMLElement with    properties containing the data held within the XML document, or FALSE on failure.             Errors\/Exceptions       Produces an E_WARNING error message for each error    found in the XML data.      Tip         Use libxml_use_internal_errors() to suppress all XML     errors, and libxml_get_errors() to iterate over them     afterwards.                 Examples            Example #1 Interpret an XML document       <?php\/\/\u00a0The\u00a0file\u00a0test.xml\u00a0contains\u00a0an\u00a0XML\u00a0document\u00a0with\u00a0a\u00a0root\u00a0element\/\/\u00a0and\u00a0at\u00a0least\u00a0an\u00a0element\u00a0\/[root]\/title.if\u00a0(file_exists('test.xml'))\u00a0{\u00a0\u00a0\u00a0\u00a0$xml\u00a0=\u00a0simplexml_load_file('test.xml');\u00a0\u00a0\u00a0\u00a0\u00a0print_r($xml);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0exit('Failed\u00a0to\u00a0open\u00a0test.xml.');}?>                   This script will display, on success:            SimpleXMLElement Object (   [title] => Example Title   ... )                 At this point, you can go about using $xml->title      and any other elements.                     See Also            simplexml_load_string() - Interprets a string of XML into an object      SimpleXMLElement::__construct() - Creates a new SimpleXMLElement object     Dealing with XML errors     libxml_use_internal_errors() - Disable libxml errors and allow user to fetch error information as needed     Basic SimpleXML usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-none.php","title":"ssh2_auth_none","description":"ssh2_auth_none   (PECL ssh2 >= 0.9.0)ssh2_auth_none \u2014 Authenticate as \"none\"          Description       mixed ssh2_auth_none     ( resource $session    , string $username    )        Attempt \"none\" authentication which usually will (and should) fail.    As part of the failure, this function will return an array of accepted    authentication methods.             Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                username                      Remote user name.                                     Return Values       Returns TRUE if the server does accept \"none\" as an authentication    method, or an array of accepted authentication methods on failure.            Examples            Example #1 Retrieving a list of authentication methods       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);$auth_methods\u00a0=\u00a0ssh2_auth_none($connection,\u00a0'user');if\u00a0(in_array('password',\u00a0$auth_methods))\u00a0{\u00a0\u00a0echo\u00a0\"Server\u00a0supports\u00a0password\u00a0based\u00a0authentication\\n\";}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-password.php","title":"ssh2_auth_password","description":"ssh2_auth_password   (PECL ssh2 >= 0.9.0)ssh2_auth_password \u2014 Authenticate over SSH using a plain password          Description       bool ssh2_auth_password     ( resource $session    , string $username    , string $password    )        Authenticate over SSH using a plain password            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                username                      Remote user name.                                password                      Password for username                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Authenticating with a password       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);if\u00a0(ssh2_auth_password($connection,\u00a0'username',\u00a0'secret'))\u00a0{\u00a0\u00a0echo\u00a0\"Authentication\u00a0Successful!\\n\";}\u00a0else\u00a0{\u00a0\u00a0die('Authentication\u00a0Failed...');}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-pubkey-file.php","title":"ssh2_auth_pubkey_file","description":"ssh2_auth_pubkey_file   (PECL ssh2 >= 0.9.0)ssh2_auth_pubkey_file \u2014 Authenticate using a public key          Description       bool ssh2_auth_pubkey_file     ( resource $session    , string $username    , string $pubkeyfile    , string $privkeyfile    [, string $passphrase   ] )        Authenticate using a public key read from a file.              Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                username                                              pubkeyfile                                              privkeyfile                                              passphrase                      If privkeyfile is encrypted (which it should        be), the passphrase must be provided.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Authentication using a public key       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022,\u00a0array('hostkey'=>'ssh-rsa'));if\u00a0(ssh2_auth_pubkey_file($connection,\u00a0'username',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\/home\/username\/.ssh\/id_rsa.pub',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\/home\/username\/.ssh\/id_rsa',\u00a0'secret'))\u00a0{\u00a0\u00a0echo\u00a0\"Public\u00a0Key\u00a0Authentication\u00a0Successful\\n\";}\u00a0else\u00a0{\u00a0\u00a0die('Public\u00a0Key\u00a0Authentication\u00a0Failed');}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-connect.php","title":"ssh2_connect","description":"ssh2_connect   (PECL ssh2 >= 0.9.0)ssh2_connect \u2014 Connect to an SSH server          Description       resource ssh2_connect     ( string $host    [, int $port = 22    [, array $methods    [, array $callbacks   ]]] )        Establish a connection to a remote SSH server.          Once connected, the client should verify the server&#039;s hostkey using    ssh2_fingerprint(), then authenticate using either    password or public key.            Parameters                    host                                              port                                              methods                      methods may be an associative array with up to four parameters        as described below.                               methods may be an associative array                with any or all of the following parameters.                                          Index            Meaning            Supported Values*                                                        kex                         List of key exchange methods to advertise, comma separated             in order of preference.                                     diffie-hellman-group1-sha1,             diffie-hellman-group14-sha1, and             diffie-hellman-group-exchange-sha1                                               hostkey                         List of hostkey methods to advertise, come separated             in order of preference.                                     ssh-rsa and             ssh-dss                                               client_to_server                         Associative array containing crypt, compression, and             message authentication code (MAC) method preferences             for messages sent from client to server.                        \u00a0                                   server_to_client                         Associative array containing crypt, compression, and             message authentication code (MAC) method preferences             for messages sent from server to client.                        \u00a0                                                              * - Supported Values are dependent on methods supported by underlying library.        See \u00bb\u00a0libssh2 documentation for additional        information.                                         client_to_server and          server_to_client may be an associative array          with any or all of the following parameters.                                                   Index            Meaning            Supported Values*                                                        crypt            List of crypto methods to advertise, comma separated             in order of preference.                         rijndael-cbc@lysator.liu.se,             aes256-cbc,             aes192-cbc,             aes128-cbc,             3des-cbc,             blowfish-cbc,             cast128-cbc,             arcfour, and             none**                                               comp            List of compression methods to advertise, comma separated             in order of preference.                         zlib and             none                                               mac            List of MAC methods to advertise, come separated             in order of preference.                         hmac-sha1,             hmac-sha1-96,             hmac-ripemd160,             hmac-ripemd160@openssh.com, and             none**                                                                          Note:          Crypt and MAC method \"none\"                   For security reasons, none is disabled by the underlying          \u00bb\u00a0libssh2 library unless explicitly enabled          during build time by using the appropriate .\/configure options.  See documentation          for the underlying library for more information.                                                 callbacks                      callbacks may be an associative array with any        or all of the following parameters.                           Callbacks parameters                                                   Index            Meaning            Prototype                                                        ignore                         Name of function to call when an             SSH2_MSG_IGNORE packet is received                        void ignore_cb($message)                                   debug                         Name of function to call when an             SSH2_MSG_DEBUG packet is received                        void debug_cb($message, $language, $always_display)                                   macerror                         Name of function to call when a packet is received but the             message authentication code failed.  If the callback returns             TRUE, the mismatch will be ignored, otherwise the connection             will be terminated.                        bool macerror_cb($packet)                                   disconnect                         Name of function to call when an             SSH2_MSG_DISCONNECT packet is received                        void disconnect_cb($reason, $message, $language)                                                                             Return Values       Returns a resource on success, or FALSE on error.            Examples            Example #1 ssh2_connect() example           Open a connection forcing 3des-cbc when sending packets, any strength      aes cipher when receiving packets, no compression in either direction,      and Group1 key exchange.            <?php\/*\u00a0Notify\u00a0the\u00a0user\u00a0if\u00a0the\u00a0server\u00a0terminates\u00a0the\u00a0connection\u00a0*\/function\u00a0my_ssh_disconnect($reason,\u00a0$message,\u00a0$language)\u00a0{\u00a0\u00a0printf(\"Server\u00a0disconnected\u00a0with\u00a0reason\u00a0code\u00a0[%d]\u00a0and\u00a0message:\u00a0%s\\n\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$reason,\u00a0$message);}$methods\u00a0=\u00a0array(\u00a0\u00a0'kex'\u00a0=>\u00a0'diffie-hellman-group1-sha1',\u00a0\u00a0'client_to_server'\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0'crypt'\u00a0=>\u00a0'3des-cbc',\u00a0\u00a0\u00a0\u00a0'comp'\u00a0=>\u00a0'none'),\u00a0\u00a0'server_to_client'\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0'crypt'\u00a0=>\u00a0'aes256-cbc,aes192-cbc,aes128-cbc',\u00a0\u00a0\u00a0\u00a0'comp'\u00a0=>\u00a0'none'));$callbacks\u00a0=\u00a0array('disconnect'\u00a0=>\u00a0'my_ssh_disconnect');$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022,\u00a0$methods,\u00a0$callbacks);if\u00a0(!$connection)\u00a0die('Connection\u00a0failed');?>                        See Also            ssh2_fingerprint() - Retrieve fingerprint of remote server     ssh2_auth_none() - Authenticate as \"none\"     ssh2_auth_password() - Authenticate over SSH using a plain password     ssh2_auth_pubkey_file() - Authenticate using a public key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.simplexml-load-string.php","title":"simplexml_load_string","description":"simplexml_load_string   (PHP 5)simplexml_load_string \u2014     Interprets a string of XML into an object           Description       SimpleXMLElement simplexml_load_string     ( string $data    [, string $class_name = \"SimpleXMLElement\"    [, int $options = 0    [, string $ns = \"\"    [, bool $is_prefix = false   ]]]] )        Takes a well-formed XML string and returns it as an object.            Parameters                    data                      A well-formed XML string                                class_name                      You may use this optional parameter so that        simplexml_load_string() will return an object of         the specified class. That class should extend the         SimpleXMLElement class.                                options                      Since PHP 5.1.0 and Libxml 2.6.0, you may also use the        options parameter to specify additional Libxml parameters.                                ns                      Namespace prefix or URI.                                is_prefix                      TRUE if ns is a prefix, FALSE if it&#039;s a URI;        defaults to FALSE.                                     Return Values       Returns an object of class SimpleXMLElement with    properties containing the data held within the xml document, or FALSE on failure.            Errors\/Exceptions       Produces an E_WARNING error message for each error    found in the XML data.      Tip         Use libxml_use_internal_errors() to suppress all XML     errors, and libxml_get_errors() to iterate over them     afterwards.                Examples            Example #1 Interpret an XML string       <?php$string\u00a0=\u00a0<<<XML<?xml\u00a0version='1.0'?>\u00a0<document>\u00a0<title>Forty\u00a0What?<\/title>\u00a0<from>Joe<\/from>\u00a0<to>Jane<\/to>\u00a0<body>\u00a0\u00a0I\u00a0know\u00a0that's\u00a0the\u00a0answer\u00a0--\u00a0but\u00a0what's\u00a0the\u00a0question?\u00a0<\/body><\/document>XML;$xml\u00a0=\u00a0simplexml_load_string($string);print_r($xml);?>             The above example will output:       SimpleXMLElement Object (   [title] => Forty What?   [from] => Joe   [to] => Jane   [body] =>    I know that&#039;s the answer -- but what&#039;s the question? )                 At this point, you can go about using $xml->body      and such.                     See Also            simplexml_load_file() - Interprets an XML file into an object      SimpleXMLElement::__construct() - Creates a new SimpleXMLElement object     Dealing with XML errors     libxml_use_internal_errors() - Disable libxml errors and allow user to fetch error information as needed     Basic SimpleXML usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-fetch-stream.php","title":"ssh2_fetch_stream","description":"ssh2_fetch_stream   (PECL ssh2 >= 0.9.0)ssh2_fetch_stream \u2014 Fetch an extended data stream          Description       resource ssh2_fetch_stream     ( resource $channel    , int $streamid    )        Fetches an alternate substream associated with an SSH2 channel stream.    The SSH2 protocol currently defines only one substream, STDERR, which has    a substream ID of SSH2_STREAM_STDERR (defined as 1).            Parameters                    channel                                              streamid                      An SSH2 channel stream.                                     Return Values       Returns the requested stream resource.            Examples            Example #1 Opening a shell and retrieving the stderr stream associated with it       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$stdio_stream\u00a0=\u00a0ssh2_shell($connection);$stderr_stream\u00a0=\u00a0ssh2_fetch_stream($stdio_stream,\u00a0SSH2_STREAM_STDERR);?>                        See Also            ssh2_shell() - Request an interactive shell     ssh2_exec() - Execute a command on a remote server     ssh2_connect() - Connect to an SSH server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-exec.php","title":"ssh2_exec","description":"ssh2_exec   (PECL ssh2 >= 0.9.0)ssh2_exec \u2014 Execute a command on a remote server          Description       resource ssh2_exec     ( resource $session    , string $command    [, string $pty    [, array $env    [, int $width = 80    [, int $height = 25    [, int $width_height_type = SSH2_TERM_UNIT_CHARS   ]]]]] )        Execute a command at the remote end and allocate a channel for it.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                command                                              pty                                              env                      env may be passed as an associative array of        name\/value pairs to set in the target environment.                                width                      Width of the virtual terminal.                                height                      Height of the virtual terminal.                                width_height_type                      width_height_type should be one of        SSH2_TERM_UNIT_CHARS or        SSH2_TERM_UNIT_PIXELS.                                     Return Values       Returns a stream on success or FALSE on failure.            Examples            Example #1 Executing a command       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$stream\u00a0=\u00a0ssh2_exec($connection,\u00a0'\/usr\/local\/bin\/php\u00a0-i');?>                        See Also            ssh2_connect() - Connect to an SSH server     ssh2_shell() - Request an interactive shell     ssh2_tunnel() - Open a tunnel through a remote server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-fingerprint.php","title":"ssh2_fingerprint","description":"ssh2_fingerprint   (PECL ssh2 >= 0.9.0)ssh2_fingerprint \u2014 Retrieve fingerprint of remote server          Description       string ssh2_fingerprint     ( resource $session    [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX   ] )        Returns a server hostkey hash from an active session.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                flags                      flags may be either of        SSH2_FINGERPRINT_MD5 or        SSH2_FINGERPRINT_SHA1 logically ORed with        SSH2_FINGERPRINT_HEX or        SSH2_FINGERPRINT_RAW.                                     Return Values       Returns the hostkey hash as a string.            Examples            Example #1 Checking the fingerprint against a known value       <?php$known_host\u00a0=\u00a0'6F89C2F0A719B30CC38ABDF90755F2E4';$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);$fingerprint\u00a0=\u00a0ssh2_fingerprint($connection,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SSH2_FINGERPRINT_MD5\u00a0|\u00a0SSH2_FINGERPRINT_HEX);if\u00a0($fingerprint\u00a0!=\u00a0$known_host)\u00a0{\u00a0\u00a0die(\"HOSTKEY\u00a0MISMATCH!\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Possible\u00a0Man-In-The-Middle\u00a0Attack?\");}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-methods-negotiated.php","title":"ssh2_methods_negotiated","description":"ssh2_methods_negotiated   (PECL ssh2 >= 0.9.0)ssh2_methods_negotiated \u2014 Return list of negotiated methods          Description       array ssh2_methods_negotiated     ( resource $session    )        Returns list of negotiated methods.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                     Return Values                   Examples            Example #1 Determining what methods were negotiated       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);$methods\u00a0=\u00a0ssh2_methods_negotiated($connection);echo\u00a0\"Encryption\u00a0keys\u00a0were\u00a0negotiated\u00a0using:\u00a0{$methods['kex']}\\n\";echo\u00a0\"Server\u00a0identified\u00a0using\u00a0an\u00a0{$methods['hostkey']}\u00a0with\u00a0\";echo\u00a0\"fingerprint:\u00a0\"\u00a0.\u00a0ssh2_fingerprint($connection)\u00a0.\u00a0\"\\n\";echo\u00a0\"Client\u00a0to\u00a0Server\u00a0packets\u00a0will\u00a0use\u00a0methods:\\n\";echo\u00a0\"\\tCrypt:\u00a0{$methods['client_to_server']['crypt']}\\n\";echo\u00a0\"\\tComp:\u00a0{$methods['client_to_server']['comp']}\\n\";echo\u00a0\"\\tMAC:\u00a0{$methods['client_to_server']['mac']}\\n\";echo\u00a0\"Server\u00a0to\u00a0Client\u00a0packets\u00a0will\u00a0use\u00a0methods:\\n\";echo\u00a0\"\\tCrypt:\u00a0{$methods['server_to_client']['crypt']}\\n\";echo\u00a0\"\\tComp:\u00a0{$methods['server_to_client']['comp']}\\n\";echo\u00a0\"\\tMAC:\u00a0{$methods['server_to_client']['mac']}\\n\";?>                        See Also            ssh2_connect() - Connect to an SSH server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-init.php","title":"ssh2_publickey_init","description":"ssh2_publickey_init   (PECL ssh2 >= 0.10)ssh2_publickey_init \u2014     Initialize Publickey subsystem              Description       resource ssh2_publickey_init     ( resource $session    )        Request the Publickey subsystem from an already connected SSH2 server.          The publickey subsystem allows an already connected and authenticated    client to manage the list of authorized public keys stored on the    target server in an implementation agnostic manner.    If the remote server does not support the publickey subsystem,    the ssh2_publickey_init() function will return FALSE.            Parameters                    session                                                   Return Values       Returns an SSH2 Publickey Subsystem resource for use    with all other ssh2_publickey_*() methods or FALSE on failure.            Notes   Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated.  To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.         See Also            ssh2_publickey_add() - Add an authorized publickey     ssh2_publickey_remove() - Remove an authorized publickey     ssh2_publickey_list() - List currently authorized publickeys"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-add.php","title":"ssh2_publickey_add","description":"ssh2_publickey_add   (PECL ssh2 >= 0.10)ssh2_publickey_add \u2014     Add an authorized publickey            Description       bool ssh2_publickey_add     ( resource $pkey    , string $algoname    , string $blob    [, bool $overwrite = false    [, array $attributes   ]] )     Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated.  To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.          Parameters                    pkey                      Publickey Subsystem resource created by ssh2_publickey_init().                                algoname                      Publickey algorithm (e.g.): ssh-dss, ssh-rsa                                blob                      Publickey blob as raw binary data                                overwrite                      If the specified key already exists, should it be overwritten?                                attributes                      Associative array of attributes to assign to this public key.        Refer to ietf-secsh-publickey-subsystem for a list of supported attributes.        To mark an attribute as mandatory, precede its name with an asterisk.        If the server is unable to support an attribute marked mandatory,        it will abort the add process.                                      Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Adding a publickey with ssh2_publickey_add()       <?php$ssh2\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($ssh2,\u00a0'jdoe',\u00a0'password');$pkey\u00a0=\u00a0ssh2_publickey_init($ssh2);$keyblob\u00a0=\u00a0base64_decode('AAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5PTrLRdjNONxXH1tVFGn0Bd26BF0aCP9qyJRlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xjzaLpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VEHYckxQ16CjSTibI5X69GmnYC9PNqEYq\/1TP+HF10=');ssh2_publickey_add($pkey,\u00a0'ssh-rsa',\u00a0$keyblob,\u00a0false,\u00a0array('comment'=>\"John's\u00a0Key\"));?>                        See Also            ssh2_publickey_init() - Initialize Publickey subsystem     ssh2_publickey_remove() - Remove an authorized publickey     ssh2_publickey_list() - List currently authorized publickeys"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-list.php","title":"ssh2_publickey_list","description":"ssh2_publickey_list   (PECL ssh2 >= 0.10)ssh2_publickey_list \u2014     List currently authorized publickeys            Description       array ssh2_publickey_list     ( resource $pkey    )        List currently authorized publickeys.            Parameters                    pkey                      Publickey Subsystem resource                                     Return Values       Returns a numerically indexed array of keys,    each of which is an associative array containing:    name, blob, and attrs elements.               Publickey elements                          Array Key        Meaning                                    name        Name of algorithm used by this publickey, for example:        ssh-dss or ssh-rsa.                       blob        Publickey blob as raw binary data.                       attrs        Attributes assigned to this publickey. The most common        attribute, and the only one supported by publickey version 1        servers, is comment, which may be any freeform        string.                                    Examples            Example #1 Listing authorized keys with ssh2_publickey_list()       <?php$ssh2\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($ssh2,\u00a0'jdoe',\u00a0'secret');$pkey\u00a0=\u00a0ssh2_publickey_init($ssh2);$list\u00a0=\u00a0ssh2_publickey_list($pkey);foreach($list\u00a0as\u00a0$key)\u00a0{\u00a0\u00a0echo\u00a0\"Key:\u00a0{$key['name']}\\n\";\u00a0\u00a0echo\u00a0\"Blob:\u00a0\"\u00a0.\u00a0chunk_split(base64_encode($key['blob']),\u00a040,\u00a0\"\\n\")\u00a0.\u00a0\"\\n\";\u00a0\u00a0echo\u00a0\"Comment:\u00a0{$key['attrs']['comment']}\\n\\n\";}?>             The above example will output:       Key: ssh-rsa Blob: AAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5P TrLRdjNONxXH1tVFGn0Bd26BF0aCP9qyJRlvdJ3j 4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xjza Lpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VE HYckxQ16CjSTibI5X69GmnYC9PNqEYq\/1TP+HF10 Comment: John&#039;s Key  Key: ssh-rsa Blob: AAAAB3NzaHVt6VqSGd5C1yc2EAAAABIwA232dnJA AIEA5HVt6VqSGd5PTrLRdjNONxX\/1TP+HF1HVt6V qSGd50H1tVFGn0BB3NzaC1yc2EAd26BF0aCP9qyJ RlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26HVt6Vq SGd5sDHwfL351xjzaLpipu\\BGB3NzaC1yc2EA\/1T Comment: Alice&#039;s Key                       Notes   Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated.  To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.         See Also            ssh2_publickey_init() - Initialize Publickey subsystem     ssh2_publickey_add() - Add an authorized publickey     ssh2_publickey_remove() - Remove an authorized publickey"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-remove.php","title":"ssh2_publickey_remove","description":"ssh2_publickey_remove   (PECL ssh2 >= 0.10)ssh2_publickey_remove \u2014     Remove an authorized publickey            Description       bool ssh2_publickey_remove     ( resource $pkey    , string $algoname    , string $blob    )        Removes an authorized publickey.            Parameters                    pkey                      Publickey Subsystem Resource                                algoname                      Publickey algorithm (e.g.): ssh-dss, ssh-rsa                                blob                      Publickey blob as raw binary data                                     Return Values       Returns TRUE on success or FALSE on failure.            Notes   Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated.  To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.         See Also            ssh2_publickey_init() - Initialize Publickey subsystem     ssh2_publickey_add() - Add an authorized publickey     ssh2_publickey_list() - List currently authorized publickeys"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-lstat.php","title":"ssh2_sftp_lstat","description":"ssh2_sftp_lstat   (PECL ssh2 >= 0.9.0)ssh2_sftp_lstat \u2014 Stat a symbolic link          Description       array ssh2_sftp_lstat     ( resource $sftp    , string $path    )        Stats a symbolic link on the remote filesystem without    following the link.          This function is similar to using the lstat() function    with the ssh2.sftp:\/\/ wrapper in PHP 5    and returns the same values.              Parameters                    sftp                                              path                      Path to the remote symbolic link.                                     Return Values       See the documentation for stat() for details on the    values which may be returned.            Examples            Example #1 Stating a symbolic link via SFTP       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);$statinfo\u00a0=\u00a0ssh2_sftp_lstat($sftp,\u00a0'\/path\/to\/symlink');$filesize\u00a0=\u00a0$statinfo['size'];$group\u00a0=\u00a0$statinfo['gid'];$owner\u00a0=\u00a0$statinfo['uid'];$atime\u00a0=\u00a0$statinfo['atime'];$mtime\u00a0=\u00a0$statinfo['mtime'];$mode\u00a0=\u00a0$statinfo['mode'];?>                           See Also            ssh2_sftp_stat() - Stat a file on a remote filesystem     lstat() - Gives information about a file or symbolic link     stat() - Gives information about a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-scp-send.php","title":"ssh2_scp_send","description":"ssh2_scp_send   (PECL ssh2 >= 0.9.0)ssh2_scp_send \u2014 Send a file via SCP          Description       bool ssh2_scp_send     ( resource $session    , string $local_file    , string $remote_file    [, int $create_mode = 0644   ] )        Copy a file from the local filesystem to the remote server using the SCP protocol.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                local_file                      Path to the local file.                                remote_file                      Path to the remote file.                                create_mode                      The file will be created with the mode specified by        create_mode.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Uploading a file via SCP       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');ssh2_scp_send($connection,\u00a0'\/local\/filename',\u00a0'\/remote\/filename',\u00a00644);?>                        See Also            ssh2_scp_recv() - Request a file via SCP     copy() - Copies file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-readlink.php","title":"ssh2_sftp_readlink","description":"ssh2_sftp_readlink   (PECL ssh2 >= 0.9.0)ssh2_sftp_readlink \u2014 Return the target of a symbolic link          Description       string ssh2_sftp_readlink     ( resource $sftp    , string $link    )        Returns the target of a symbolic link.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                link                      Path of the symbolic link.                                     Return Values       Returns the target of the symbolic link.            Examples            Example #1 Reading a symbolic link       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);$target\u00a0=\u00a0ssh2_sftp_readlink($sftp,\u00a0'\/tmp\/mysql.sock');\/*\u00a0$target\u00a0is\u00a0now\u00a0(e.g.):\u00a0'\/var\/run\/mysql.sock'\u00a0*\/?>                           See Also            readlink() - Returns the target of a symbolic link     ssh2_sftp_symlink() - Create a symlink"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-mkdir.php","title":"ssh2_sftp_mkdir","description":"ssh2_sftp_mkdir   (PECL ssh2 >= 0.9.0)ssh2_sftp_mkdir \u2014 Create a directory          Description       bool ssh2_sftp_mkdir     ( resource $sftp    , string $dirname    [, int $mode = 0777    [, bool $recursive = false   ]] )        Creates a directory on the remote file server with permissions set to    mode.            This function is similar to using mkdir() with the    ssh2.sftp:\/\/ wrapper.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                dirname                      Path of the new directory.                                mode                      Permissions on the new directory.                                recursive                      If recursive is TRUE any parent directories        required for dirname will be automatically created as well.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Creating a directory on a remote server       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);ssh2_sftp_mkdir($sftp,\u00a0'\/home\/username\/newdir');\/*\u00a0Or:\u00a0\u00a0mkdir(\"ssh2.sftp:\/\/$sftp\/home\/username\/newdir\");\u00a0*\/?>                           See Also            mkdir() - Makes directory     ssh2_sftp_rmdir() - Remove a directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-scp-recv.php","title":"ssh2_scp_recv","description":"ssh2_scp_recv   (PECL ssh2 >= 0.9.0)ssh2_scp_recv \u2014 Request a file via SCP          Description       bool ssh2_scp_recv     ( resource $session    , string $remote_file    , string $local_file    )        Copy a file from the remote server to the local filesystem using the SCP protocol.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                remote_file                      Path to the remote file.                                local_file                      Path to the local file.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Downloading a file via SCP       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');ssh2_scp_recv($connection,\u00a0'\/remote\/filename',\u00a0'\/local\/filename');?>                        See Also            ssh2_scp_send() - Send a file via SCP     copy() - Copies file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-realpath.php","title":"ssh2_sftp_realpath","description":"ssh2_sftp_realpath   (PECL ssh2 >= 0.9.0)ssh2_sftp_realpath \u2014 Resolve the realpath of a provided path string          Description       string ssh2_sftp_realpath     ( resource $sftp    , string $filename    )        Translates filename into the effective real path    on the remote filesystem.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                filename                                                   Return Values       Returns the real path as a string.            Examples            Example #1 Resolving a pathname       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);$realpath\u00a0=\u00a0ssh2_sftp_realpath($sftp,\u00a0'\/home\/username\/..\/..\/..\/..\/\/.\/usr\/..\/etc\/passwd');\/*\u00a0$realpath\u00a0is\u00a0now:\u00a0'\/etc\/passwd'\u00a0*\/?>                           See Also            realpath() - Returns canonicalized absolute pathname     ssh2_sftp_symlink() - Create a symlink     ssh2_sftp_readlink() - Return the target of a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-rename.php","title":"ssh2_sftp_rename","description":"ssh2_sftp_rename   (PECL ssh2 >= 0.9.0)ssh2_sftp_rename \u2014 Rename a remote file          Description       bool ssh2_sftp_rename     ( resource $sftp    , string $from    , string $to    )        Renames a file on the remote filesystem.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                from                      The current file that is being renamed.                                to                      The new file name that replaces from.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Renaming a file via sftp       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);ssh2_sftp_rename($sftp,\u00a0'\/home\/username\/oldname',\u00a0'\/home\/username\/newname');?>                           See Also            rename() - Renames a file or directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-rmdir.php","title":"ssh2_sftp_rmdir","description":"ssh2_sftp_rmdir   (PECL ssh2 >= 0.9.0)ssh2_sftp_rmdir \u2014 Remove a directory          Description       bool ssh2_sftp_rmdir     ( resource $sftp    , string $dirname    )        Removes a directory from the remote file server.          This function is similar to using rmdir() with the    ssh2.sftp:\/\/ wrapper.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                dirname                                                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Removing a directory on a remote server       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);ssh2_sftp_rmdir($sftp,\u00a0'\/home\/username\/deltodel');\/*\u00a0Or:\u00a0\u00a0rmdir(\"ssh2.sftp:\/\/$sftp\/home\/username\/dirtodel\");\u00a0*\/?>                        See Also            rmdir() - Removes directory     ssh2_sftp_mkdir() - Create a directory"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-stat.php","title":"ssh2_sftp_stat","description":"ssh2_sftp_stat   (PECL ssh2 >= 0.9.0)ssh2_sftp_stat \u2014 Stat a file on a remote filesystem          Description       array ssh2_sftp_stat     ( resource $sftp    , string $path    )        Stats a file on the remote filesystem following any symbolic links.          This function is similar to using the stat() function    with the ssh2.sftp:\/\/ wrapper in PHP 5    and returns the same values.            Parameters                    sftp                       An SSH2 SFTP resource opened by ssh2_sftp().                                path                                                   Return Values       See the documentation for stat() for details on the    values which may be returned.            Examples            Example #1 Stating a file via SFTP       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);$statinfo\u00a0=\u00a0ssh2_sftp_stat($sftp,\u00a0'\/path\/to\/file');$filesize\u00a0=\u00a0$statinfo['size'];$group\u00a0=\u00a0$statinfo['gid'];$owner\u00a0=\u00a0$statinfo['uid'];$atime\u00a0=\u00a0$statinfo['atime'];$mtime\u00a0=\u00a0$statinfo['mtime'];$mode\u00a0=\u00a0$statinfo['mode'];?>                        See Also            ssh2_sftp_lstat() - Stat a symbolic link     lstat() - Gives information about a file or symbolic link     stat() - Gives information about a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-symlink.php","title":"ssh2_sftp_symlink","description":"ssh2_sftp_symlink   (PECL ssh2 >= 0.9.0)ssh2_sftp_symlink \u2014 Create a symlink          Description       bool ssh2_sftp_symlink     ( resource $sftp    , string $target    , string $link    )        Creates a symbolic link named link on the remote    filesystem pointing to target.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                target                      Target of the symbolic link.                                link                                                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Creating a symbolic link       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);ssh2_sftp_symlink($sftp,\u00a0'\/var\/run\/mysql.sock',\u00a0'\/tmp\/mysql.sock');?>                        See Also            ssh2_sftp_readlink() - Return the target of a symbolic link     symlink() - Creates a symbolic link"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-unlink.php","title":"ssh2_sftp_unlink","description":"ssh2_sftp_unlink   (PECL ssh2 >= 0.9.0)ssh2_sftp_unlink \u2014 Delete a file          Description       bool ssh2_sftp_unlink     ( resource $sftp    , string $filename    )        Deletes a file on the remote filesystem.            Parameters                    sftp                      An SSH2 SFTP resource opened by ssh2_sftp().                                filename                                                   Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Deleting a file       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);ssh2_sftp_unlink($sftp,\u00a0'\/home\/username\/stale_file');?>                        See Also            unlink() - Deletes a file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-tunnel.php","title":"ssh2_tunnel","description":"ssh2_tunnel   (PECL ssh2 >= 0.9.0)ssh2_tunnel \u2014 Open a tunnel through a remote server          Description       resource ssh2_tunnel     ( resource $session    , string $host    , int $port    )        Open a socket stream to an arbitrary host\/port by way of the currently    connected SSH server.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                host                                              port                                                   Return Values                   Examples            Example #1 Opening a tunnel to an arbitrary host       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_pubkey_file($connection,\u00a0'username',\u00a0'id_dsa.pub',\u00a0'id_dsa');$tunnel\u00a0=\u00a0ssh2_tunnel($connection,\u00a0'10.0.0.101',\u00a012345);?>                        See Also            ssh2_connect() - Connect to an SSH server     fsockopen() - Open Internet or Unix domain socket connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-shell.php","title":"ssh2_shell","description":"ssh2_shell   (PECL ssh2 >= 0.9.0)ssh2_shell \u2014 Request an interactive shell          Description       resource ssh2_shell     ( resource $session    [, string $term_type = \"vanilla\"    [, array $env    [, int $width = 80    [, int $height = 25    [, int $width_height_type = SSH2_TERM_UNIT_CHARS   ]]]]] )        Open a shell at the remote end and allocate a stream for it.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                term_type                      term_type should correspond to one of the        entries in the target system&#039;s \/etc\/termcap file.                                env                      env may be passed as an associative array of        name\/value pairs to set in the target environment.                                width                      Width of the virtual terminal.                                height                      Height of the virtual terminal.                                width_height_type                      width_height_type should be one of        SSH2_TERM_UNIT_CHARS or        SSH2_TERM_UNIT_PIXELS.                                     Return Values                   Examples            Example #1 Executing a command       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$stream\u00a0=\u00a0ssh2_shell($connection,\u00a0'vt102',\u00a0null,\u00a080,\u00a024,\u00a0SSH2_TERM_UNIT_CHARS);?>                        See Also            ssh2_exec() - Execute a command on a remote server     ssh2_tunnel() - Open a tunnel through a remote server     ssh2_fetch_stream() - Fetch an extended data stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp.php","title":"ssh2_sftp","description":"ssh2_sftp   (PECL ssh2 >= 0.9.0)ssh2_sftp \u2014 Initialize SFTP subsystem          Description       resource ssh2_sftp     ( resource $session    )        Request the SFTP subsystem from an already connected SSH2 server.            Parameters                    session                      An SSH connection link identifier, obtained from a call to        ssh2_connect().                                     Return Values       This method returns an SSH2 SFTP resource for use with    all other ssh2_sftp_*() methods and the    ssh2.sftp:\/\/ fopen wrapper.            Examples            Example #1 Opening a file via SFTP       <?php$connection\u00a0=\u00a0ssh2_connect('shell.example.com',\u00a022);ssh2_auth_password($connection,\u00a0'username',\u00a0'password');$sftp\u00a0=\u00a0ssh2_sftp($connection);$stream\u00a0=\u00a0fopen(\"ssh2.sftp:\/\/$sftp\/path\/to\/file\",\u00a0'r');?>                           See Also            ssh2_scp_recv() - Request a file via SCP     ssh2_scp_send() - Send a file via SCP"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-begin-transaction.php","title":"sqlsrv_begin_transaction","description":"sqlsrv_begin_transaction   (No version information available, might only be in SVN)sqlsrv_begin_transaction \u2014 Begins a database transaction        Description       bool sqlsrv_begin_transaction     ( resource $conn    )        The transaction begun by sqlsrv_begin_transaction() includes     all statements that were executed after the call to     sqlsrv_begin_transaction() and before calls to     sqlsrv_rollback() or sqlsrv_commit().     Explicit transactions should be started and committed or rolled back using     these functions instead of executing SQL statements that begin and committ\/roll     back transactions. For more information, see     \u00bb\u00a0SQLSRV Transactions.           Parameters                    conn                      The connection resource returned by a call to sqlsrv_connect().                                      Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_begin_transaction() example          The following example demonstrates how to use      sqlsrv_begin_transaction() together with      sqlsrv_commit() and sqlsrv_rollback().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"userName\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true\u00a0));}\/*\u00a0Begin\u00a0the\u00a0transaction.\u00a0*\/if\u00a0(\u00a0sqlsrv_begin_transaction(\u00a0$conn\u00a0)\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true\u00a0));}\/*\u00a0Initialize\u00a0parameter\u00a0values.\u00a0*\/$orderId\u00a0=\u00a01;\u00a0$qty\u00a0=\u00a010;\u00a0$productId\u00a0=\u00a0100;\/*\u00a0Set\u00a0up\u00a0and\u00a0execute\u00a0the\u00a0first\u00a0query.\u00a0*\/$sql1\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0OrdersTable\u00a0(ID,\u00a0Quantity,\u00a0ProductID)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES\u00a0(?,\u00a0?,\u00a0?)\";$params1\u00a0=\u00a0array(\u00a0$orderId,\u00a0$qty,\u00a0$productId\u00a0);$stmt1\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql1,\u00a0$params1\u00a0);\/*\u00a0Set\u00a0up\u00a0and\u00a0execute\u00a0the\u00a0second\u00a0query.\u00a0*\/$sql2\u00a0=\u00a0\"UPDATE\u00a0InventoryTable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SET\u00a0Quantity\u00a0=\u00a0(Quantity\u00a0-\u00a0?)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0ProductID\u00a0=\u00a0?\";$params2\u00a0=\u00a0array($qty,\u00a0$productId);$stmt2\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql2,\u00a0$params2\u00a0);\/*\u00a0If\u00a0both\u00a0queries\u00a0were\u00a0successful,\u00a0commit\u00a0the\u00a0transaction.\u00a0*\/\/*\u00a0Otherwise,\u00a0rollback\u00a0the\u00a0transaction.\u00a0*\/if(\u00a0$stmt1\u00a0&&\u00a0$stmt2\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlsrv_commit(\u00a0$conn\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Transaction\u00a0committed.<br\u00a0\/>\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlsrv_rollback(\u00a0$conn\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Transaction\u00a0rolled\u00a0back.<br\u00a0\/>\";}?>             The above example will output something similar to:                 See Also            sqlsrv_commit() - Commits a transaction that was begun with sqlsrv_begin_transaction     sqlsrv_rollback() - Rolls back a transaction that was begun with    sqlsrv_begin_transaction"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-cancel.php","title":"sqlsrv_cancel","description":"sqlsrv_cancel   (No version information available, might only be in SVN)sqlsrv_cancel \u2014 Cancels a statement        Description       bool sqlsrv_cancel     ( resource $stmt    )        Cancels a statement. Any results associated with the statement that have not     been consumed are deleted. After sqlsrv_cancel() has been     called, the specified statement can be re-executed if it was created with     sqlsrv_prepare(). Calling sqlsrv_cancel()     is not necessary if all the results associated with the statement have been     consumed.             Parameters                    stmt                      The statement resource to be cancelled.                                      Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_cancel() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0Sales\u00a0FROM\u00a0Table_1\";$stmt\u00a0=\u00a0sqlsrv_prepare(\u00a0$conn,\u00a0$sql);if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}if(\u00a0sqlsrv_execute(\u00a0$stmt\u00a0)\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$salesTotal\u00a0=\u00a00;$count\u00a0=\u00a00;while(\u00a0($row\u00a0=\u00a0sqlsrv_fetch_array(\u00a0$stmt))\u00a0&&\u00a0$salesTotal\u00a0<=100000){\u00a0\u00a0\u00a0\u00a0\u00a0$qty\u00a0=\u00a0$row[0];\u00a0\u00a0\u00a0\u00a0\u00a0$price\u00a0=\u00a0$row[1];\u00a0\u00a0\u00a0\u00a0\u00a0$salesTotal\u00a0+=\u00a0(\u00a0$price\u00a0*\u00a0$qty);\u00a0\u00a0\u00a0\u00a0\u00a0$count++;}echo\u00a0\"$count\u00a0sales\u00a0accounted\u00a0for\u00a0the\u00a0first\u00a0$$salesTotal\u00a0in\u00a0revenue.<br\u00a0\/>\";\/\/\u00a0Cancel\u00a0the\u00a0pending\u00a0results.\u00a0The\u00a0statement\u00a0can\u00a0be\u00a0reused.sqlsrv_cancel(\u00a0$stmt);?>                        Notes       The main difference between sqlsrv_cancel() and     sqlsrv_free_stmt() is that a statement resource cancelled with     sqlsrv_cancel() can be re-executed if it was created with     sqlsrv_prepare(). A statement resource cancelled with     sqlsrv_free_statement() cannot be re-executed.             See Also            sqlsrv_free_stmt() - Frees all resources for the specified statement     sqlsrv_prepare() - Prepares a query for execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-client-info.php","title":"sqlsrv_client_info","description":"sqlsrv_client_info   (No version information available, might only be in SVN)sqlsrv_client_info \u2014 Returns information about the client and specified connection        Description       array sqlsrv_client_info     ( resource $conn    )        Returns information about the client and specified connection             Parameters                    conn                      The connection about which information is returned.                                      Return Values       Returns an associative array with keys described in the table below.     Returns FALSE otherwise.         Array returned by sqlsrv_client_info                      Key       Description                               DriverDllName       SQLNCLI10.DLL                    DriverODBCVer       ODBC version (xx.yy)                    DriverVer       SQL Server Native Client DLL version (10.5.xxx)                    ExtensionVer       php_sqlsrv.dll version (2.0.xxx.x)                                 Examples            Example #1 sqlsrv_client_info() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connOptions\u00a0=\u00a0array(\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connOptions\u00a0);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}if(\u00a0$client_info\u00a0=\u00a0sqlsrv_client_info(\u00a0$conn))\u00a0{\u00a0\u00a0\u00a0\u00a0foreach(\u00a0$client_info\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$key.\":\u00a0\".$value.\"<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0}}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0in\u00a0retrieving\u00a0client\u00a0info.<br\u00a0\/>\";}?>                         See Also            sqlsrv_server_info() - Returns information about the server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-close.php","title":"sqlsrv_close","description":"sqlsrv_close   (No version information available, might only be in SVN)sqlsrv_close \u2014 Closes an open connection and releases resourses associated with the connection        Description       bool sqlsrv_close     ( resource $conn    )        Closes an open connection and releases resourses associated with the connection.             Parameters                    conn                      The connection to be closed.                                      Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_close() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpres\";$connOptions\u00a0=\u00a0array(\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\",\u00a0\"Database\"=>\"dbname\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connOptions\u00a0);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/-------------------------------------\/\/\u00a0Perform\u00a0database\u00a0operations\u00a0here.\/\/-------------------------------------\/\/\u00a0Close\u00a0the\u00a0connection.sqlsrv_close(\u00a0$conn\u00a0);?>                         See Also            sqlsrv_connect() - Opens a connection to a Microsoft SQL Server database"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-commit.php","title":"sqlsrv_commit","description":"sqlsrv_commit   (No version information available, might only be in SVN)sqlsrv_commit \u2014 Commits a transaction that was begun with sqlsrv_begin_transaction()        Description       bool sqlsrv_commit     ( resource $conn    )        Commits a transaction that was begun with sqlsrv_begin_transaction().     The connection is returned to auto-commit mode after sqlsrv_commit()     is called. The transaction that is committed includes all statements that were     executed after the call to sqlsrv_begin_transaction().     Explicit transactions should be started and committed or rolled back using these     functions instead of executing SQL statements that begin and committ\/roll back     transactions. For more information, see     \u00bb\u00a0SQLSRV Transactions.             Parameters                    conn                      The connection on which the transaction is to be committed.                                      Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_commit() example          The following example demonstrates how to use sqlsrv_commit()      together with sqlsrv_begin_transaction() and      sqlsrv_rollback().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"userName\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true\u00a0));}\/*\u00a0Begin\u00a0the\u00a0transaction.\u00a0*\/if\u00a0(\u00a0sqlsrv_begin_transaction(\u00a0$conn\u00a0)\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true\u00a0));}\/*\u00a0Initialize\u00a0parameter\u00a0values.\u00a0*\/$orderId\u00a0=\u00a01;\u00a0$qty\u00a0=\u00a010;\u00a0$productId\u00a0=\u00a0100;\/*\u00a0Set\u00a0up\u00a0and\u00a0execute\u00a0the\u00a0first\u00a0query.\u00a0*\/$sql1\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0OrdersTable\u00a0(ID,\u00a0Quantity,\u00a0ProductID)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES\u00a0(?,\u00a0?,\u00a0?)\";$params1\u00a0=\u00a0array(\u00a0$orderId,\u00a0$qty,\u00a0$productId\u00a0);$stmt1\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql1,\u00a0$params1\u00a0);\/*\u00a0Set\u00a0up\u00a0and\u00a0execute\u00a0the\u00a0second\u00a0query.\u00a0*\/$sql2\u00a0=\u00a0\"UPDATE\u00a0InventoryTable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SET\u00a0Quantity\u00a0=\u00a0(Quantity\u00a0-\u00a0?)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0ProductID\u00a0=\u00a0?\";$params2\u00a0=\u00a0array($qty,\u00a0$productId);$stmt2\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql2,\u00a0$params2\u00a0);\/*\u00a0If\u00a0both\u00a0queries\u00a0were\u00a0successful,\u00a0commit\u00a0the\u00a0transaction.\u00a0*\/\/*\u00a0Otherwise,\u00a0rollback\u00a0the\u00a0transaction.\u00a0*\/if(\u00a0$stmt1\u00a0&&\u00a0$stmt2\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlsrv_commit(\u00a0$conn\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Transaction\u00a0committed.<br\u00a0\/>\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlsrv_rollback(\u00a0$conn\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Transaction\u00a0rolled\u00a0back.<br\u00a0\/>\";}?>                         See Also            sqlsrv_begin_transaction() - Begins a database transaction     sqlsrv_rollback() - Rolls back a transaction that was begun with    sqlsrv_begin_transaction"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-configure.php","title":"sqlsrv_configure","description":"sqlsrv_configure   (No version information available, might only be in SVN)sqlsrv_configure \u2014 Changes the driver error handling and logging configurations        Description       bool sqlsrv_configure     ( string $setting    , mixed $value    )        Changes the driver error handling and logging configurations.             Parameters                    setting                      The name of the setting to set. The possible values are         \"WarningsReturnAsErrors\", \"LogSubsystems\", and \"LogSeverity\".                                value                      The value of the specified setting. The following table shows possible values:               Error and Logging Setting Options                      Setting       Options                               WarningsReturnAsErrors       1 (TRUE) or 0 (FALSE)                    LogSubsystems       SQLSRV_LOG_SYSTEM_ALL (-1)        SQLSRV_LOG_SYSTEM_CONN (2)        SQLSRV_LOG_SYSTEM_INIT (1)        SQLSRV_LOG_SYSTEM_OFF (0)        SQLSRV_LOG_SYSTEM_STMT (4)        SQLSRV_LOG_SYSTEM_UTIL (8)                    LogSeverity       SQLSRV_LOG_SEVERITY_ALL (-1)        SQLSRV_LOG_SEVERITY_ERROR (1)        SQLSRV_LOG_SEVERITY_NOTICE (4)        SQLSRV_LOG_SEVERITY_WARNING (2)                                                          Return Values       Returns TRUE on success or FALSE on failure.             See Also            \u00bb\u00a0SQLSRV Error Handling.     \u00bb\u00a0Logging SQLSRV Activity."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-connect.php","title":"sqlsrv_connect","description":"sqlsrv_connect   (No version information available, might only be in SVN)sqlsrv_connect \u2014 Opens a connection to a Microsoft SQL Server database        Description       resource sqlsrv_connect     ( string $serverName    [, array $connectionInfo   ] )        Opens a connection to a Microsoft SQL Server database. By default, the connection     is attempted using Windows Authentication. To connect using SQL Server     Authentication, include \"UID\" and \"PWD\" in the connection options array.             Parameters                    serverName                      The name of the server to which a connection is established. To connect         to a specific instance, follow the server name with a forward slash         and the instance name (e.g. serverName\\sqlexpress).                                connectionInfo                      An associative array that specifies options for connecting to the server.         If values for the UID and PWD keys are not specified, the connection         will be attempted using Windows Authentication. For a complete list of supported         keys, see \u00bb\u00a0SQLSRV Connection Options.                                      Return Values       A connection resource. If a connection cannot be successfully opened, FALSE is returned.             Examples            Example #1 Connect using Windows Authentication.       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";\u00a0\/\/serverName\\instanceName\/\/\u00a0Since\u00a0UID\u00a0and\u00a0PWD\u00a0are\u00a0not\u00a0specified\u00a0in\u00a0the\u00a0$connectionInfo\u00a0array,\/\/\u00a0The\u00a0connection\u00a0will\u00a0be\u00a0attempted\u00a0using\u00a0Windows\u00a0Authentication.$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connection\u00a0established.<br\u00a0\/>\";}else{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connection\u00a0could\u00a0not\u00a0be\u00a0established.<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}?>                           Example #2 Connect by specifying a user name and password.       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";\u00a0\/\/serverName\\instanceName$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"userName\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connection\u00a0established.<br\u00a0\/>\";}else{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connection\u00a0could\u00a0not\u00a0be\u00a0established.<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}?>                           Example #3 Connect on a specifed port.       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress,\u00a01542\";\u00a0\/\/serverName\\instanceName,\u00a0portNumber\u00a0(default\u00a0is\u00a01433)$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"userName\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connection\u00a0established.<br\u00a0\/>\";}else{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connection\u00a0could\u00a0not\u00a0be\u00a0established.<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}?>                        Notes       By default, the sqlsrv_connect() uses connection pooling to     improve connection performance. To turn off connection pooling (i.e. force a     new connection on each call), set the \"ConnectionPooling\" option in the     $connectionOptions array to 0 (or FALSE). For more information, see     \u00bb\u00a0SQLSRV Connection Pooling.         The SQLSRV extension does not have a dedicated function for changing which    database is connected to. The target database is specified in the    $connectionOptions array that is passed to sqlsrv_connect. To change the    database on an open connection, execute the following query \"USE dbName\"    (e.g. sqlsrv_query($conn, \"USE dbName\")).             See Also            sqlsrv_close() - Closes an open connection and releases resourses associated with the connection     sqlsrv_errors() - Returns error and warning information about the last SQLSRV operation performed     sqlsrv_query() - Prepares and executes a query."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-execute.php","title":"sqlsrv_execute","description":"sqlsrv_execute   (No version information available, might only be in SVN)sqlsrv_execute \u2014 Executes a statement prepared with sqlsrv_prepare()        Description       bool sqlsrv_execute     ( resource $stmt    )        Executes a statement prepared with sqlsrv_prepare(). This     function is ideal for executing a prepared statement multiple times with     different parameter values.             Parameters                    stmt                      A statement resource returned by sqlsrv_prepare().                                      Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_execute() example          This example demonstrates how to prepare a statement with      sqlsrv_prepare() and re-execute it multiple times (with      different parameter values) using sqlsrv_execute().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"UPDATE\u00a0Table_1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SET\u00a0OrderQty\u00a0=\u00a0?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0SalesOrderID\u00a0=\u00a0?\";\/\/\u00a0Initialize\u00a0parameters\u00a0and\u00a0prepare\u00a0the\u00a0statement.\u00a0\/\/\u00a0Variables\u00a0$qty\u00a0and\u00a0$id\u00a0are\u00a0bound\u00a0to\u00a0the\u00a0statement,\u00a0$stmt.$qty\u00a0=\u00a00;\u00a0$id\u00a0=\u00a00;$stmt\u00a0=\u00a0sqlsrv_prepare(\u00a0$conn,\u00a0$sql,\u00a0array(\u00a0&$qty,\u00a0&$id));if(\u00a0!$stmt\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Set\u00a0up\u00a0the\u00a0SalesOrderDetailID\u00a0and\u00a0OrderQty\u00a0information.\u00a0\/\/\u00a0This\u00a0array\u00a0maps\u00a0the\u00a0order\u00a0ID\u00a0to\u00a0order\u00a0quantity\u00a0in\u00a0key=>value\u00a0pairs.$orders\u00a0=\u00a0array(\u00a01=>10,\u00a02=>20,\u00a03=>30);\/\/\u00a0Execute\u00a0the\u00a0statement\u00a0for\u00a0each\u00a0order.foreach(\u00a0$orders\u00a0as\u00a0$id\u00a0=>\u00a0$qty)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Because\u00a0$id\u00a0and\u00a0$qty\u00a0are\u00a0bound\u00a0to\u00a0$stmt1,\u00a0their\u00a0updated\u00a0\u00a0\u00a0\u00a0\/\/\u00a0values\u00a0are\u00a0used\u00a0with\u00a0each\u00a0execution\u00a0of\u00a0the\u00a0statement.\u00a0\u00a0\u00a0\u00a0\u00a0if(\u00a0sqlsrv_execute(\u00a0$stmt\u00a0)\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));\u00a0\u00a0\u00a0\u00a0}}?>                        Notes       When you prepare a statement that uses variables as parameters, the variables     are bound to the statement. This means that if you update the values of the     variables, the next time you execute the statement it will run with updated     parameter values. For statements that you plan to execute only once, use     sqlsrv_query().             See Also            sqlsrv_prepare() - Prepares a query for execution     sqlsrv_query() - Prepares and executes a query."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-errors.php","title":"sqlsrv_errors","description":"sqlsrv_errors   (No version information available, might only be in SVN)sqlsrv_errors \u2014 Returns error and warning information about the last SQLSRV operation performed        Description           mixed sqlsrv_errors     ([ int $errorsOrWarnings   ] )        Returns error and warning information about the last SQLSRV operation performed.             Parameters                    errorsOrWarnings                      Determines whether error information, warning information, or both are         returned. If this parameter is not supplied, both error information and         warning information are returned. The following are the supported values         for this parameter: SQLSRV_ERR_ALL, SQLSRV_ERR_ERRORS, SQLSRV_ERR_WARNINGS.                                      Return Values       If errors and\/or warnings occured on the last sqlsrv operation, and array of     arrays containing error information is returned. If no errors and\/or warnings     occured on the last sqlsrv operation, NULL is returned. The following table     describes the structure of the returned arrays:        Array returned by sqlsrv_errors                      Key       Description                               SQLSTATE       For errors that originate from the ODBC driver, the SQLSTATE returned        by ODBC. For errors that originate from the Microsoft Drivers for PHP for        SQL Server, a SQLSTATE of IMSSP. For warnings that originate from the        Microsoft Drivers for PHP for SQL Server, a SQLSTATE of 01SSP.                           code       For errors that originate from SQL Server, the native SQL Server        error code. For errors that originate from the ODBC driver, the error        code returned by ODBC. For errors that originate from the Microsoft Drivers        for PHP for SQL Server, the Microsoft Drivers for PHP for SQL Server error code.                           message       A description of the error.                                 Examples            Example #1 functionname() example       <?php$serverName\u00a0=\u00a0\"serverName\/sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/*\u00a0Set\u00a0up\u00a0a\u00a0query\u00a0to\u00a0select\u00a0an\u00a0invalid\u00a0column\u00a0name.\u00a0*\/$sql\u00a0=\u00a0\"SELECT\u00a0BadColumnName\u00a0FROM\u00a0Table_1\";\/*\u00a0Execution\u00a0of\u00a0the\u00a0query\u00a0will\u00a0fail\u00a0because\u00a0of\u00a0the\u00a0bad\u00a0column\u00a0name.\u00a0*\/$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql\u00a0);if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0if(\u00a0($errors\u00a0=\u00a0sqlsrv_errors()\u00a0)\u00a0!=\u00a0null)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach(\u00a0$errors\u00a0as\u00a0$error\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"SQLSTATE:\u00a0\".$error[\u00a0'SQLSTATE'].\"<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"code:\u00a0\".$error[\u00a0'code'].\"<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"message:\u00a0\".$error[\u00a0'message'].\"<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}}?>                        Notes       By default, warnings generated on a call to any SQLSRV function are treated     as errors. This means that if a warning occurs on a call to a SQLSRV function,     the function returns FALSE. However, warnings that correspond to SQLSTATE     values 01000, 01001, 01003, and 01S02 are never treated as errors. For     information about changing this behavior, see sqlsrv_configure()     and the WarningsReturnAsErrors setting.             See Also            sqlsrv_configure() - Changes the driver error handling and logging configurations"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-fetch-array.php","title":"sqlsrv_fetch_array","description":"sqlsrv_fetch_array   (No version information available, might only be in SVN)sqlsrv_fetch_array \u2014 Returns a row as an array        Description       array sqlsrv_fetch_array     ( resource $stmt    [, int $fetchType    [, int $row    [, int $offset   ]]] )        Returns the next available row of data as an associative array, a numeric     array, or both (the default).             Parameters                    stmt                      A statement resource returned by sqlsrv_query or sqlsrv_execute.                                fetchType                      A predefined constant specifying the type of array to return. Possible         values are SQLSRV_FETCH_ASSOC,         SQLSRV_FETCH_NUMERIC, and         SQLSRV_FETCH_BOTH (the default).                     A fetch type of SQLSRV_FETCH_ASSOC should not be used when consuming a        result set with multiple columns of the same name.                                row                      Specifies the row to access in a result set that uses a scrollable cursor.         Possible values are SQLSRV_SCROLL_NEXT,         SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST,         SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE and,         SQLSRV_SCROLL_RELATIVE (the default). When this parameter         is specified, the fetchType must be explicitly defined.                                      Return Values       Returns an array on success, NULL if there are no more rows to return, and     FALSE if an error occurs.             Examples            Example #1 Retrieving an associative array.       <?php$serverName\u00a0=\u00a0\"serverName\\instanceName\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo\u00a0);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0FirstName,\u00a0LastName\u00a0FROM\u00a0SomeTable\";$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql\u00a0);if(\u00a0$stmt\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true)\u00a0);}while(\u00a0$row\u00a0=\u00a0sqlsrv_fetch_array(\u00a0$stmt,\u00a0SQLSRV_FETCH_ASSOC)\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['LastName'].\",\u00a0\".$row['FirstName'].\"<br\u00a0\/>\";}sqlsrv_free_stmt(\u00a0$stmt);?>                           Example #2 Retrieving a numeric array.       <?php$serverName\u00a0=\u00a0\"serverName\\instanceName\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo\u00a0);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0FirstName,\u00a0LastName\u00a0FROM\u00a0SomeTable\";$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql\u00a0);if(\u00a0$stmt\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true)\u00a0);}while(\u00a0$row\u00a0=\u00a0sqlsrv_fetch_array(\u00a0$stmt,\u00a0SQLSRV_FETCH_NUMERIC)\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[0].\",\u00a0\".$row[1].\"<br\u00a0\/>\";}sqlsrv_free_stmt(\u00a0$stmt);?>                        Notes       Not specifying the fetchType or explicity using the     SQLSRV_FETCH_TYPE constant in the examples above will     return an array that has both associative and numeric keys.           If more than one column is returned with the same name, the last column will     take precedence. To avoid field name collisions, use aliases.          If a column with no name is returned, the associative key for the array element    will be an empty string (\"\").             See Also            sqlsrv_connect() - Opens a connection to a Microsoft SQL Server database     sqlsrv_query() - Prepares and executes a query.     sqlsrv_errors() - Returns error and warning information about the last SQLSRV operation performed     sqlsrv_fetch() - Makes the next row in a result set available for reading"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-fetch-object.php","title":"sqlsrv_fetch_object","description":"sqlsrv_fetch_object   (No version information available, might only be in SVN)sqlsrv_fetch_object \u2014 Retrieves the next row of data in a result set as an object        Description       mixed sqlsrv_fetch_object     ( resource $stmt    [, string $className    [, array $ctorParams    [, int $row    [, int $offset   ]]]] )        Retrieves the next row of data in a result set as an instance of the specified     class with properties that match the row field names and values that correspond     to the row field values.             Parameters                    stmt                      A statement resource created by sqlsrv_query() or         sqlsrv_execute().                                className                      The name of the class to instantiate. If no class name is specified,         stdClass is instantiated.                                ctorParams                      Values passed to the constructor of the specified class. If the constructor         of the specified class takes parameters, the ctorParams array must be         supplied.                                row                      The row to be accessed. This parameter can only be used if the specified         statement was prepared with a scrollable cursor. In that case, this parameter         can take on one of the following values:                 SQLSRV_SCROLL_NEXT         SQLSRV_SCROLL_PRIOR         SQLSRV_SCROLL_FIRST         SQLSRV_SCROLL_LAST         SQLSRV_SCROLL_ABSOLUTE         SQLSRV_SCROLL_RELATIVE                                        offset                      Specifies the row to be accessed if the row parameter is set to         SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. Note that the first row         in a result set has index 0.                                      Return Values        Returns an object on success, NULL if there are no more rows to return,     and FALSE if an error occurs or if the specified class does not exist.             Examples            Example #1 sqlsrv_fetch_object() example          The following example demonstrates how to retrieve a row as a stdClass object.            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0fName,\u00a0lName\u00a0FROM\u00a0Table_1\";$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql);if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Retrieve\u00a0each\u00a0row\u00a0as\u00a0an\u00a0object.\/\/\u00a0Because\u00a0no\u00a0class\u00a0is\u00a0specified,\u00a0each\u00a0row\u00a0will\u00a0be\u00a0retrieved\u00a0as\u00a0a\u00a0stdClass\u00a0object.\/\/\u00a0Property\u00a0names\u00a0correspond\u00a0to\u00a0field\u00a0names.while(\u00a0$obj\u00a0=\u00a0sqlsrv_fetch_object(\u00a0$stmt))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$obj->fName.\",\u00a0\".$obj->lName.\"<br\u00a0\/>\";}?>                        Notes       If a class name is specified with the optional $className parameter and the     class has properties whose names match the result set field names, the corresponding     result set values are applied to the properties. If a result set field name     does not match a class property, a property with the result set field name is added     to the object and the result set value is applied to the property. The following     rules apply when using the $className parameter:           Field-property name matching is case-sensitive.       Field-property matching occurs regardless of access modifiers.       Class property data types are ignored when applying a field value to a property.       If the class does not exist, the function returns FALSE and adds an error to the error collection.        Regardless of whether the $className parameter is supplied, if a field with no     name is returned, the field value will be ignored and a warning will be added     to the error collection.          When consuming a result set that has multiple columns with the same name, it may     be better to use sqlsrv_fetch_array() or the combination of     sqlsrv_fetch() and sqlsrv_get_field().             See Also            sqlsrv_fetch() - Makes the next row in a result set available for reading     sqlsrv_fetch_array() - Returns a row as an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-free-stmt.php","title":"sqlsrv_free_stmt","description":"sqlsrv_free_stmt   (No version information available, might only be in SVN)sqlsrv_free_stmt \u2014 Frees all resources for the specified statement        Description       bool sqlsrv_free_stmt     ( resource $stmt    )        Frees all resources for the specified statement. The statement cannot be used     after sqlsrv_free_stmt() has been called on it. If     sqlsrv_free_stmt() is called on an in-progress statement     that alters server state, statement execution is terminated and the statement     is rolled back.             Parameters                    stmt                      The statment for which resources are freed.         Note that NULL is a valid parameter value. This allows the function to be         called multiple times in a script.                                       Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_free_stmt() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0Table_1\");if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/*-------------------------------\u00a0\u00a0\u00a0\u00a0\u00a0Process\u00a0query\u00a0results\u00a0here.-------------------------------*\/\/*\u00a0Free\u00a0the\u00a0statement\u00a0resources.\u00a0*\/sqlsrv_free_stmt(\u00a0$stmt);?>                          Notes       The main difference between sqlsrv_free_stmt() and     sqlsrv_cancel() is that a statement resource cancelled with     sqlsrv_cancel() can be re-executed if it was created with     sqlsrv_prepare(). A statement resource cancelled with     sqlsrv_free_statement() cannot be re-executed.           See Also            sqlsrv_cancel() - Cancels a statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-get-config.php","title":"sqlsrv_get_config","description":"sqlsrv_get_config   (No version information available, might only be in SVN)sqlsrv_get_config \u2014 Returns the value of the specified configuration setting        Description       mixed sqlsrv_get_config     ( string $setting    )        Returns the value of the specified configuration setting.             Parameters                    setting                      The name of the setting for which the value is returned. For a list of         configurable settings, see sqlsrv_configure().                                      Return Values       Returns the value of the specified setting. If an invalid setting is specified,     FALSE is returned.             See Also            sqlsrv_configure() - Changes the driver error handling and logging configurations"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-field-metadata.php","title":"sqlsrv_field_metadata","description":"sqlsrv_field_metadata   (No version information available, might only be in SVN)sqlsrv_field_metadata \u2014 Retrieves metadata for the fields of a statement prepared by    sqlsrv_prepare() or sqlsrv_query()           Description       mixed sqlsrv_field_metadata     ( resource $stmt    )        Retrieves metadata for the fields of a statement prepared by     sqlsrv_prepare() or sqlsrv_query().     sqlsrv_field_metadata() can be called on a statement before     or after statement execution.             Parameters                    stmt                      The statment resource for which metadata is returned.                                      Return Values       Returns an array of arrays is returned on success. Otherwise, FALSE is returned.     Each returned array is described by the following table:        Array returned by sqlsrv_field_metadata                      Key       Description                               Name       The name of the field.                    Type       The numeric value for the SQL type.                    Size       The number of characters for fields of character type, the number of        bytes for fields of binary type, or NULL for other types.                    Precision       The precision for types of variable precision, NULL for other types.                    Scale       The scale for types of variable scale, NULL for other types.                    Nullable       An enumeration indicating whether the column is nullable, not nullable,        or if it is not known.                       For more information, see \u00bb\u00a0sqlsrv_field_metadata    in the Microsoft SQLSRV documentation.             Examples            Example #1 sqlsrv_field_metadata() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"AdventureWorks\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0Table_1\";$stmt\u00a0=\u00a0sqlsrv_prepare(\u00a0$conn,\u00a0$sql\u00a0);foreach(\u00a0sqlsrv_field_metadata(\u00a0$stmt\u00a0)\u00a0as\u00a0$fieldMetadata\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0foreach(\u00a0$fieldMetadata\u00a0as\u00a0$name\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$name:\u00a0$value<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<br\u00a0\/>\";}?>                         See Also            sqlsrv_client_info() - Returns information about the client and specified connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-fetch.php","title":"sqlsrv_fetch","description":"sqlsrv_fetch   (No version information available, might only be in SVN)sqlsrv_fetch \u2014 Makes the next row in a result set available for reading        Description           mixed sqlsrv_fetch     ( resource $stmt    [, int $row    [, int $offset   ]] )        Makes the next row in a result set available for reading. Use     sqlsrv_get_field() to read the fields of the row.             Parameters                    stmt                      A statement resource created by executing sqlsrv_query()         or sqlsrv_execute().                                row                      The row to be accessed. This parameter can only be used if the specified         statement was prepared with a scrollable cursor. In that case, this parameter         can take on one of the following values:                 SQLSRV_SCROLL_NEXT         SQLSRV_SCROLL_PRIOR         SQLSRV_SCROLL_FIRST         SQLSRV_SCROLL_LAST         SQLSRV_SCROLL_ABSOLUTE         SQLSRV_SCROLL_RELATIVE                                        offset                      Specifies the row to be accessed if the row parameter is set to         SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. Note that the first         row in a result set has index 0.                                      Return Values       Returns TRUE if the next row of a result set was successfully retrieved,     FALSE if an error occurs, and NULL if there are no more rows in the result set.             Examples            Example #1 sqlsrv_fetch() example          The following example demonstrates how to retrieve a row with      sqlsrv_fetch() and get the row fields with      sqlsrv_get_field().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0Name,\u00a0Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FROM\u00a0Table_1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0ReviewID=1\";$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql);if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Make\u00a0the\u00a0first\u00a0(and\u00a0in\u00a0this\u00a0case,\u00a0only)\u00a0row\u00a0of\u00a0the\u00a0result\u00a0set\u00a0available\u00a0for\u00a0reading.if(\u00a0sqlsrv_fetch(\u00a0$stmt\u00a0)\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Get\u00a0the\u00a0row\u00a0fields.\u00a0Field\u00a0indeces\u00a0start\u00a0at\u00a00\u00a0and\u00a0must\u00a0be\u00a0retrieved\u00a0in\u00a0order.\/\/\u00a0Retrieving\u00a0row\u00a0fields\u00a0by\u00a0name\u00a0is\u00a0not\u00a0supported\u00a0by\u00a0sqlsrv_get_field.$name\u00a0=\u00a0sqlsrv_get_field(\u00a0$stmt,\u00a00);echo\u00a0\"$name:\u00a0\";$comment\u00a0=\u00a0sqlsrv_get_field(\u00a0$stmt,\u00a01);echo\u00a0$comment;?>                          See Also            sqlsrv_get_field() - Gets field data from the currently selected row     sqlsrv_fetch_array() - Returns a row as an array     sqlsrv_fetch_object() - Retrieves the next row of data in a result set as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-has-rows.php","title":"sqlsrv_has_rows","description":"sqlsrv_has_rows   (No version information available, might only be in SVN)sqlsrv_has_rows \u2014 Indicates whether the specified statement has rows        Description       bool sqlsrv_has_rows     ( resource $stmt    )        Indicates whether the specified statement has rows.             Parameters                    stmt                      A statement resource returned by sqlsrv_query() or         sqlsrv_execute().                                      Return Values       Returns TRUE if the specified statement has rows and FALSE if the statement     does not have rows or if an error occured.             Examples            Example #1 sqlsrv_has_rows() example       <?php$server\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\"\u00a0)$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$server,\u00a0$connectionInfo\u00a0);$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0Table_1\");if\u00a0($stmt)\u00a0{\u00a0\u00a0\u00a0$rows\u00a0=\u00a0sqlsrv_has_rows(\u00a0$stmt\u00a0);\u00a0\u00a0\u00a0if\u00a0($rows\u00a0===\u00a0true)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0are\u00a0rows.\u00a0<br\u00a0\/>\";\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0are\u00a0no\u00a0rows.\u00a0<br\u00a0\/>\";}?>                         See Also            sqlsrv_num_rows() - Retrieves the number of rows in a result set     sqlsrv_query() - Prepares and executes a query."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-next-result.php","title":"sqlsrv_next_result","description":"sqlsrv_next_result   (No version information available, might only be in SVN)sqlsrv_next_result \u2014 Makes the next result of the specified statement active        Description       mixed sqlsrv_next_result         ( resource $stmt    )        Makes the next result of the specified statement active. Results include result     sets, row counts, and output parameters.             Parameters                    stmt                      The statment on which the next result is being called.                                      Return Values       Returns TRUE if the next result was successfully retrieved, FALSE if an error     occurred, and NULL if there are no more results to retrieve.             Examples            Example #1 sqlsrv_next_result() example          The following example executes a batch query that inserts into a table and      then selects from the table. This produces two results on the statement:      one for the rows affected by the INSERT and one for the rows returned by      the SELECT. To get to the rows returned by the SELECT,      sqlsrv_next_result() must be called to move past the first result.            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"userName\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);$query\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0Table_1\u00a0(id,\u00a0data)\u00a0VALUES\u00a0(?,?);\u00a0SELECT\u00a0*\u00a0FROM\u00a0TABLE_1;\";$params\u00a0=\u00a0array(1,\u00a0\"some\u00a0data\");$stmt\u00a0=\u00a0sqlsrv_query($conn,\u00a0$query,\u00a0$params);\/\/\u00a0Consume\u00a0the\u00a0first\u00a0result\u00a0(rows\u00a0affected\u00a0by\u00a0INSERT)\u00a0without\u00a0calling\u00a0sqlsrv_next_result.echo\u00a0\"Rows\u00a0affected:\u00a0\".sqlsrv_rows_affected($stmt).\"<br\u00a0\/>\";\/\/\u00a0Move\u00a0to\u00a0the\u00a0next\u00a0result\u00a0and\u00a0display\u00a0results.$next_result\u00a0=\u00a0sqlsrv_next_result($stmt);if(\u00a0$next_result\u00a0)\u00a0{\u00a0\u00a0\u00a0while(\u00a0$row\u00a0=\u00a0sqlsrv_fetch_array(\u00a0$stmt,\u00a0SQLSRV_FETCH_ASSOC)){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$row['id'].\":\u00a0\".$row['data'].\"<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0}}\u00a0elseif(\u00a0is_null($next_result))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"No\u00a0more\u00a0results.<br\u00a0\/>\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(print_r(sqlsrv_errors(),\u00a0true));}?>                         See Also            sqlsrv_query() - Prepares and executes a query.     sqlsrv_fetch_array() - Returns a row as an array     sqlsrv_rows_affected() - Returns the number of rows modified by the last INSERT, UPDATE, or    DELETE query executed"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-get-field.php","title":"sqlsrv_get_field","description":"sqlsrv_get_field   (No version information available, might only be in SVN)sqlsrv_get_field \u2014 Gets field data from the currently selected row        Description       mixed sqlsrv_get_field     ( resource $stmt    , int $fieldIndex    [, int $getAsType   ] )        Gets field data from the currently selected row. Fields must be accessed in     order. Field indices start at 0.             Parameters                    stmt                      A statement resource returned by sqlsrv_query() or         sqlsrv_execute().                                fieldIndex                      The index of the field to be retrieved. Field indices start at 0. Fields         must be accessed in order. i.e. If you access field index 1, then field         index 0 will not be available.                                getAsType                      The PHP data type for the returned field data. If this parameter is not         set, the field data will be returned as its default PHP data type.        For information about default PHP data types, see         \u00bb\u00a0Default PHP Data Types         in the Microsoft SQLSRV documentation.                                      Return Values       Returns data from the specified field on success. Returns FALSE otherwise.             Examples            Example #1 sqlsrv_get_field() example          The following example demonstrates how to retrieve a row with      sqlsrv_fetch() and get the row fields with      sqlsrv_get_field().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0Name,\u00a0Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FROM\u00a0Table_1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0ReviewID=1\";$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql);if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Make\u00a0the\u00a0first\u00a0(and\u00a0in\u00a0this\u00a0case,\u00a0only)\u00a0row\u00a0of\u00a0the\u00a0result\u00a0set\u00a0available\u00a0for\u00a0reading.if(\u00a0sqlsrv_fetch(\u00a0$stmt\u00a0)\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Get\u00a0the\u00a0row\u00a0fields.\u00a0Field\u00a0indeces\u00a0start\u00a0at\u00a00\u00a0and\u00a0must\u00a0be\u00a0retrieved\u00a0in\u00a0order.\/\/\u00a0Retrieving\u00a0row\u00a0fields\u00a0by\u00a0name\u00a0is\u00a0not\u00a0supported\u00a0by\u00a0sqlsrv_get_field.$name\u00a0=\u00a0sqlsrv_get_field(\u00a0$stmt,\u00a00);echo\u00a0\"$name:\u00a0\";$comment\u00a0=\u00a0sqlsrv_get_field(\u00a0$stmt,\u00a01);echo\u00a0$comment;?>                         See Also            sqlsrv_fetch() - Makes the next row in a result set available for reading     sqlsrv_fetch_array() - Returns a row as an array     sqlsrv_fetch_object() - Retrieves the next row of data in a result set as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-num-rows.php","title":"sqlsrv_num_rows","description":"sqlsrv_num_rows   (No version information available, might only be in SVN)sqlsrv_num_rows \u2014 Retrieves the number of rows in a result set        Description       mixed sqlsrv_num_rows     ( resource $stmt    )        Retrieves the number of rows in a result set. This function requires that the     statment resource be created with a static or keyset cursor. For more information,     see sqlsrv_query(), sqlsrv_prepare(),     or \u00bb\u00a0Specifying a Cursor Type and Selecting Rows     in the Microsoft SQLSRV documentation.             Parameters                    stmt                      The statement for which the row count is returned. The statment resource         must be created with a static or keyset cursor. For more information, see         sqlsrv_query(), sqlsrv_prepare(), or         \u00bb\u00a0Specifying a Cursor Type and Selecting Rows         in the Microsoft SQLSRV documentation.                                      Return Values       Returns the number of rows retrieved on success and FALSE if an error occured.     If a forward cursor (the default) or dynamic cursor is used, FALSE is returned.             Examples            Example #1 sqlsrv_num_rows() example       <?php$server\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\"\u00a0);$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$server,\u00a0$connectionInfo\u00a0);$sql\u00a0=\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0Table_1\";$params\u00a0=\u00a0array();$options\u00a0=\u00a0\u00a0array(\u00a0\"Scrollable\"\u00a0=>\u00a0SQLSRV_CURSOR_KEYSET\u00a0);$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql\u00a0,\u00a0$params,\u00a0$options\u00a0);$row_count\u00a0=\u00a0sqlsrv_num_rows(\u00a0$stmt\u00a0);\u00a0\u00a0\u00a0if\u00a0($row_count\u00a0===\u00a0false)\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0in\u00a0retrieveing\u00a0row\u00a0count.\";else\u00a0\u00a0\u00a0echo\u00a0$row_count;?>                         See Also            sqlsrv_has_rows() - Indicates whether the specified statement has rows     sqlsrv_rows_affected() - Returns the number of rows modified by the last INSERT, UPDATE, or    DELETE query executed"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-num-fields.php","title":"sqlsrv_num_fields","description":"sqlsrv_num_fields   (No version information available, might only be in SVN)sqlsrv_num_fields \u2014 Retrieves the number of fields (columns) on a statement        Description       mixed sqlsrv_num_fields     ( resource $stmt    )        Retrieves the number of fields (columns) on a statement.             Parameters                    stmt                      The statment for which the number of fields is returned.         sqlsrv_num_fields() can be called on a statement before         or after statement execution.                                      Return Values       Returns the number of fields on success. Returns FALSE otherwise.             Examples            Example #1 sqlsrv_num_fields() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"SELECT\u00a0*\u00a0FROM\u00a0Table_1\";$stmt\u00a0=\u00a0sqlsrv_query($conn,\u00a0$sql);if(\u00a0$stmt\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$numFields\u00a0=\u00a0sqlsrv_num_fields(\u00a0$stmt\u00a0);while(\u00a0sqlsrv_fetch(\u00a0$stmt\u00a0))\u00a0{\u00a0\u00a0\u00a0\/\/\u00a0Iterate\u00a0through\u00a0the\u00a0fields\u00a0of\u00a0each\u00a0row.\u00a0\u00a0\u00a0for($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0$numFields;\u00a0$i++)\u00a0{\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0sqlsrv_get_field($stmt,\u00a0$i).\"\u00a0\";\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<br\u00a0\/>\";}?>                         See Also            sqlsrv_field_metadata() - Retrieves metadata for the fields of a statement prepared by    sqlsrv_prepare or sqlsrv_query     sqlsrv_fetch() - Makes the next row in a result set available for reading     sqlsrv_get_field() - Gets field data from the currently selected row"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-prepare.php","title":"sqlsrv_prepare","description":"sqlsrv_prepare   (No version information available, might only be in SVN)sqlsrv_prepare \u2014 Prepares a query for execution        Description       mixed sqlsrv_prepare     ( resource $conn    , string $sql    [, array $params    [, array $options   ]] )        Prepares a query for execution. This function is ideal for preparing a query     that will be executed multiple times with different parameter values.             Parameters                    conn                      A connection resource returned by sqlsrv_connect().                                sql                      The string that defines the query to be prepared and executed.                                params                      An array specifying parameter information when executing a parameterized         query. Array elements can be any of the following:                 A literal value         A PHP variable         An array with this structure:          array($value [, $direction [, $phpType [, $sqlType]]])                The following table describes the elements in the array structure above:                        Array structure                                      Element           Description                                                   $value           A literal value, a PHP variable, or a PHP by-reference variable.                                $direction (optional)           One of the following SQLSRV constants used to indicate the            parameter direction: SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT.            The default value is SQLSRV_PARAM_IN.                                         $phpType (optional)           A SQLSRV_PHPTYPE_* constant that specifies PHP data type of the            returned value.                                $sqlType (optional)           A SQLSRV_SQLTYPE_* constant that specifies the SQL Server data            type of the input value.                                                             options                      An array specifing query property options. The supported keys are described         in the following table:                      Query Options                                      Key           Values           Description                                                   QueryTimeout           A positive integer value.           Sets the query timeout in seconds. By default, the driver will            wait indefinitely for results.                                SendStreamParamsAtExec           TRUE or FALSE (the default is TRUE)           Configures the driver to send all stream data at execution (TRUE),            or to send stream data in chunks (FALSE). By default, the value is set to TRUE.            For more information, see sqlsrv_send_stream_data().                                Scrollable           SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_STATIC, SQLSRV_CURSOR_DYNAMIC,            or SQLSRV_CURSOR_KEYSET           See \u00bb\u00a0Specifying a Cursor Type and Selecting Rows            in the Microsoft SQLSRV documentation.                                                                   Return Values       Returns a statement resource on success and FALSE if an error occurred.             Examples            Example #1 sqlsrv_prepare() example          This example demonstrates how to prepare a statement with sqlsrv_prepare()      and re-execute it multiple times (with different parameter values) using sqlsrv_execute().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"UPDATE\u00a0Table_1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SET\u00a0OrderQty\u00a0=\u00a0?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0SalesOrderID\u00a0=\u00a0?\";\/\/\u00a0Initialize\u00a0parameters\u00a0and\u00a0prepare\u00a0the\u00a0statement.\u00a0\/\/\u00a0Variables\u00a0$qty\u00a0and\u00a0$id\u00a0are\u00a0bound\u00a0to\u00a0the\u00a0statement,\u00a0$stmt.$qty\u00a0=\u00a00;\u00a0$id\u00a0=\u00a00;$stmt\u00a0=\u00a0sqlsrv_prepare(\u00a0$conn,\u00a0$sql,\u00a0array(\u00a0&$qty,\u00a0&$id));if(\u00a0!$stmt\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\/\/\u00a0Set\u00a0up\u00a0the\u00a0SalesOrderDetailID\u00a0and\u00a0OrderQty\u00a0information.\u00a0\/\/\u00a0This\u00a0array\u00a0maps\u00a0the\u00a0order\u00a0ID\u00a0to\u00a0order\u00a0quantity\u00a0in\u00a0key=>value\u00a0pairs.$orders\u00a0=\u00a0array(\u00a01=>10,\u00a02=>20,\u00a03=>30);\/\/\u00a0Execute\u00a0the\u00a0statement\u00a0for\u00a0each\u00a0order.foreach(\u00a0$orders\u00a0as\u00a0$id\u00a0=>\u00a0$qty)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Because\u00a0$id\u00a0and\u00a0$qty\u00a0are\u00a0bound\u00a0to\u00a0$stmt1,\u00a0their\u00a0updated\u00a0\u00a0\u00a0\u00a0\/\/\u00a0values\u00a0are\u00a0used\u00a0with\u00a0each\u00a0execution\u00a0of\u00a0the\u00a0statement.\u00a0\u00a0\u00a0\u00a0\u00a0if(\u00a0sqlsrv_execute(\u00a0$stmt\u00a0)\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));\u00a0\u00a0\u00a0\u00a0}}?>                        Notes       When you prepare a statement that uses variables as parameters, the variables     are bound to the statement. This means that if you update the values of the     variables, the next time you execute the statement it will run with updated     parameter values. For statements that you plan to execute only once, use     sqlsrv_query().             See Also            sqlsrv_execute() - Executes a statement prepared with sqlsrv_prepare     sqlsrv_query() - Prepares and executes a query."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-query.php","title":"sqlsrv_query","description":"sqlsrv_query   (No version information available, might only be in SVN)sqlsrv_query \u2014 Prepares and executes a query.        Description       mixed sqlsrv_query     ( resource $conn    , string $sql    [, array $params    [, array $options   ]] )        Prepares and executes a query.             Parameters                    conn                      A connection resource returned by sqlsrv_connect().                                sql                      The string that defines the query to be prepared and executed.                                params                      An array specifying parameter information when executing a parameterized query.         Array elements can be any of the following:                 A literal value         A PHP variable         An array with this structure:          array($value [, $direction [, $phpType [, $sqlType]]])                The following table describes the elements in the array structure above:                        Array structure                                      Element           Description                                                   $value           A literal value, a PHP variable, or a PHP by-reference variable.                                $direction (optional)           One of the following SQLSRV constants used to indicate the            parameter direction: SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT.            The default value is SQLSRV_PARAM_IN.                                $phpType (optional)           A SQLSRV_PHPTYPE_* constant that specifies PHP data type of the            returned value.                                $sqlType (optional)           A SQLSRV_SQLTYPE_* constant that specifies the SQL Server data            type of the input value.                                                             options                      An array specifing query property options. The supported keys are described         in the following table:                      Query Options                                      Key           Values           Description                                                   QueryTimeout           A positive integer value.           Sets the query timeout in seconds. By default, the driver will            wait indefinitely for results.                                SendStreamParamsAtExec           TRUE or FALSE (the default is TRUE)           Configures the driver to send all stream data at execution (TRUE),            or to send stream data in chunks (FALSE). By default, the value is set            to TRUE. For more information, see sqlsrv_send_stream_data().                                Scrollable           SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_STATIC, SQLSRV_CURSOR_DYNAMIC,            or SQLSRV_CURSOR_KEYSET           See \u00bb\u00a0Specifying            a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation.                                                                   Return Values       Returns a statement resource on success and FALSE if an error occurred.             Examples            Example #1 sqlsrv_query() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\"\u00a0);$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0Table_1\u00a0(id,\u00a0data)\u00a0VALUES\u00a0(?,\u00a0?)\";$params\u00a0=\u00a0array(1,\u00a0\"some\u00a0data\");$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql,\u00a0$params);if(\u00a0$stmt\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}?>                        Notes       For statements that you plan to execute only once, use sqlsrv_query().     If you intend to re-execute a statement with different parameter values, use     the combination of sqlsrv_prepare() and sqlsrv_execute().             See Also            sqlsrv_prepare() - Prepares a query for execution     sqlsrv_execute() - Executes a statement prepared with sqlsrv_prepare"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-rollback.php","title":"sqlsrv_rollback","description":"sqlsrv_rollback   (No version information available, might only be in SVN)sqlsrv_rollback \u2014 Rolls back a transaction that was begun with    sqlsrv_begin_transaction()        Description       bool sqlsrv_rollback     ( resource $conn    )        Rolls back a transaction that was begun with sqlsrv_begin_transaction()     and returns the connection to auto-commit mode.             Parameters                    conn                      The connection resource returned by a call to sqlsrv_connect().                                      Return Values       Returns TRUE on success or FALSE on failure.             Examples            Example #1 sqlsrv_rollback() example          The following example demonstrates how to use sqlsrv_begin_transaction()      together with sqlsrv_commit() and sqlsrv_rollback().            <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"userName\",\u00a0\"PWD\"=>\"password\");$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true\u00a0));}\/*\u00a0Begin\u00a0the\u00a0transaction.\u00a0*\/if\u00a0(\u00a0sqlsrv_begin_transaction(\u00a0$conn\u00a0)\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true\u00a0));}\/*\u00a0Initialize\u00a0parameter\u00a0values.\u00a0*\/$orderId\u00a0=\u00a01;\u00a0$qty\u00a0=\u00a010;\u00a0$productId\u00a0=\u00a0100;\/*\u00a0Set\u00a0up\u00a0and\u00a0execute\u00a0the\u00a0first\u00a0query.\u00a0*\/$sql1\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0OrdersTable\u00a0(ID,\u00a0Quantity,\u00a0ProductID)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES\u00a0(?,\u00a0?,\u00a0?)\";$params1\u00a0=\u00a0array(\u00a0$orderId,\u00a0$qty,\u00a0$productId\u00a0);$stmt1\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql1,\u00a0$params1\u00a0);\/*\u00a0Set\u00a0up\u00a0and\u00a0execute\u00a0the\u00a0second\u00a0query.\u00a0*\/$sql2\u00a0=\u00a0\"UPDATE\u00a0InventoryTable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SET\u00a0Quantity\u00a0=\u00a0(Quantity\u00a0-\u00a0?)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE\u00a0ProductID\u00a0=\u00a0?\";$params2\u00a0=\u00a0array($qty,\u00a0$productId);$stmt2\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql2,\u00a0$params2\u00a0);\/*\u00a0If\u00a0both\u00a0queries\u00a0were\u00a0successful,\u00a0commit\u00a0the\u00a0transaction.\u00a0*\/\/*\u00a0Otherwise,\u00a0rollback\u00a0the\u00a0transaction.\u00a0*\/if(\u00a0$stmt1\u00a0&&\u00a0$stmt2\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlsrv_commit(\u00a0$conn\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Transaction\u00a0committed.<br\u00a0\/>\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0sqlsrv_rollback(\u00a0$conn\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Transaction\u00a0rolled\u00a0back.<br\u00a0\/>\";}?>                         See Also            sqlsrv_begin_transaction() - Begins a database transaction     sqlsrv_commit() - Commits a transaction that was begun with sqlsrv_begin_transaction"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-rows-affected.php","title":"sqlsrv_rows_affected","description":"sqlsrv_rows_affected   (No version information available, might only be in SVN)sqlsrv_rows_affected \u2014 Returns the number of rows modified by the last INSERT, UPDATE, or    DELETE query executed        Description       int sqlsrv_rows_affected     ( resource $stmt    )        Returns the number of rows modified by the last INSERT, UPDATE, or DELETE     query executed. For information about the number of rows returned by a SELECT     query, see sqlsrv_num_rows().             Parameters                    stmt                      The executed statement resource for which the number of affected rows is returned.                                      Return Values       Returns the number of rows affected by the last INSERT, UPDATE, or DELETE query.     If no rows were affected, 0 is returned. If the number of affected rows cannot     be determined, -1 is returned. If an error occured, FALSE is returned.             Examples            Example #1 sqlsrv_rows_affected() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\"\u00a0);$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"UPDATE\u00a0Table_1\u00a0SET\u00a0data\u00a0=\u00a0?\u00a0WHERE\u00a0id\u00a0=\u00a0?\";$params\u00a0=\u00a0array(\"updated\u00a0data\",\u00a01);$stmt\u00a0=\u00a0sqlsrv_query(\u00a0$conn,\u00a0$sql,\u00a0$params);$rows_affected\u00a0=\u00a0sqlsrv_rows_affected(\u00a0$stmt);if(\u00a0$rows_affected\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}\u00a0elseif(\u00a0$rows_affected\u00a0==\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"No\u00a0information\u00a0available.<br\u00a0\/>\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$rows_affected.\"\u00a0rows\u00a0were\u00a0updated.<br\u00a0\/>\";}?>                         See Also            sqlsrv_num_rows() - Retrieves the number of rows in a result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-send-stream-data.php","title":"sqlsrv_send_stream_data","description":"sqlsrv_send_stream_data   (No version information available, might only be in SVN)sqlsrv_send_stream_data \u2014 Sends data from parameter streams to the server        Description       bool sqlsrv_send_stream_data     ( resource $stmt    )        Send data from parameter streams to the server. Up to 8 KB of data is sent     with each call.             Parameters                    stmt                      A statement resource returned by sqlsrv_query() or         sqlsrv_execute().                                      Return Values       Returns TRUE if there is more data to send and FALSE if there is not.             Examples            Example #1 sqlsrv_send_stream_data() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$connectionInfo\u00a0=\u00a0array(\u00a0\"Database\"=>\"dbName\",\u00a0\"UID\"=>\"username\",\u00a0\"PWD\"=>\"password\"\u00a0);$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName,\u00a0$connectionInfo);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$sql\u00a0=\u00a0\"UPDATE\u00a0Table_1\u00a0SET\u00a0data\u00a0=\u00a0(\u00a0?)\u00a0WHERE\u00a0id\u00a0=\u00a0100\";\/\/\u00a0Open\u00a0parameter\u00a0data\u00a0as\u00a0a\u00a0stream\u00a0and\u00a0put\u00a0it\u00a0in\u00a0the\u00a0$params\u00a0array.$data\u00a0=\u00a0fopen(\u00a0\"data:\/\/text\/plain,[\u00a0Lengthy\u00a0content\u00a0here.\u00a0]\",\u00a0\"r\");$params\u00a0=\u00a0array(\u00a0&$data);\/\/\u00a0Prepare\u00a0the\u00a0statement.\u00a0Use\u00a0the\u00a0$options\u00a0array\u00a0to\u00a0turn\u00a0off\u00a0the\/\/\u00a0default\u00a0behavior,\u00a0which\u00a0is\u00a0to\u00a0send\u00a0all\u00a0stream\u00a0data\u00a0at\u00a0the\u00a0time\u00a0of\u00a0query\/\/\u00a0execution.$options\u00a0=\u00a0array(\"SendStreamParamsAtExec\"=>0);$stmt\u00a0=\u00a0sqlsrv_prepare(\u00a0$conn,\u00a0$sql,\u00a0$params,\u00a0$options);sqlsrv_execute(\u00a0$stmt);\/\/\u00a0Send\u00a0up\u00a0to\u00a08K\u00a0of\u00a0parameter\u00a0data\u00a0to\u00a0the\u00a0server\u00a0\/\/\u00a0with\u00a0each\u00a0call\u00a0to\u00a0sqlsrv_send_stream_data.$i\u00a0=\u00a01;while(\u00a0sqlsrv_send_stream_data(\u00a0$stmt))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$i++;}echo\u00a0\"$i\u00a0calls\u00a0were\u00a0made.\";?>                         See Also            sqlsrv_prepare() - Prepares a query for execution     sqlsrv_query() - Prepares and executes a query."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-server-info.php","title":"sqlsrv_server_info","description":"sqlsrv_server_info   (No version information available, might only be in SVN)sqlsrv_server_info \u2014 Returns information about the server        Description       array sqlsrv_server_info     ( resource $conn    )        Returns information about the server.             Parameters                    conn                      The connection resource that connects the client and the server.                                     Return Values       Returns an array as described in the following table:      Returned Array                      CurrentDatabase       The connected-to database.                               SQLServerVersion       The SQL Server version.                    SQLServerName       The name of the server.                               Examples            Example #1 sqlsrv_server_info() example       <?php$serverName\u00a0=\u00a0\"serverName\\sqlexpress\";$conn\u00a0=\u00a0sqlsrv_connect(\u00a0$serverName);if(\u00a0$conn\u00a0===\u00a0false\u00a0)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}$server_info\u00a0=\u00a0sqlsrv_server_info(\u00a0$conn);if(\u00a0$server_info\u00a0){\u00a0\u00a0\u00a0\u00a0foreach(\u00a0$server_info\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$key.\":\u00a0\".$value.\"<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0}}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0die(\u00a0print_r(\u00a0sqlsrv_errors(),\u00a0true));}?>                         See Also            sqlsrv_client_info() - Returns information about the client and specified connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-socket-blocking.php","title":"set_socket_blocking","description":"set_socket_blocking   (PHP 4, PHP 5)set_socket_blocking \u2014 Alias of stream_set_blocking()         Description       This function is an alias of:     stream_set_blocking()      Warning This alias has been DEPRECATED as of PHP 5.3.0.  Relying on this alias is highly discouraged."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-append.php","title":"stream_bucket_append","description":"stream_bucket_append   (PHP 5)stream_bucket_append \u2014     Append bucket to brigade           Description       void stream_bucket_append     ( resource $brigade    , resource $bucket    )     WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-make-writeable.php","title":"stream_bucket_make_writeable","description":"stream_bucket_make_writeable   (PHP 5)stream_bucket_make_writeable \u2014     Return a bucket object from the brigade for operating on           Description       object stream_bucket_make_writeable     ( resource $brigade    )     WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-new.php","title":"stream_bucket_new","description":"stream_bucket_new   (PHP 5)stream_bucket_new \u2014     Create a new bucket for use on the current stream           Description       object stream_bucket_new     ( resource $stream    , string $buffer    )     WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-get-options.php","title":"stream_context_get_options","description":"stream_context_get_options   (PHP 4 >= 4.3.0, PHP 5)stream_context_get_options \u2014 Retrieve options for a stream\/wrapper\/context          Description       array stream_context_get_options     ( resource $stream_or_context    )        Returns an array of options on the specified stream or context.             Parameters                    stream_or_context                      The stream or context to get options from                                      Return Values       Returns an associative array with the options.             Examples            Example #1 stream_context_get_options() example       <?php$params\u00a0=\u00a0array(\"method\"\u00a0=>\u00a0\"POST\");stream_context_get_default(array(\"http\"\u00a0=>\u00a0$params));var_dump(stream_context_get_options(stream_context_get_default()));?>             The above example will output something similar to:       array(1) {   [\"http\"]=>   array(1) {     [\"method\"]=>     string(4) \"POST\"   } }"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-get-default.php","title":"stream_context_get_default","description":"stream_context_get_default   (PHP 5 >= 5.1.0)stream_context_get_default \u2014 Retrieve the default streams context          Description       resource stream_context_get_default     ([ array $options   ] )        Returns the default stream context which is used whenever file operations    (fopen(), file_get_contents(), etc...)    are called without a context parameter.  Options for the default context    can optionally be specified with this function using the same syntax as    stream_context_create().            Parameters                    options                      options must be an associative        array of associative arrays in the format        $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.              Note:                  As of PHP 5.3.0, the stream_context_set_default() function         can be used to set the default context.                                             Return Values       A stream context resource.            Examples            Example #1 Using stream_context_get_default()       <?php$default_opts\u00a0=\u00a0array(\u00a0\u00a0'http'=>array(\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\",\u00a0\u00a0\u00a0\u00a0'proxy'=>\"tcp:\/\/10.54.1.39:8000\"\u00a0\u00a0));$alternate_opts\u00a0=\u00a0array(\u00a0\u00a0'http'=>array(\u00a0\u00a0\u00a0\u00a0'method'=>\"POST\",\u00a0\u00a0\u00a0\u00a0'header'=>\"Content-type:\u00a0application\/x-www-form-urlencoded\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Content-length:\u00a0\"\u00a0.\u00a0strlen(\"baz=bomb\"),\u00a0\u00a0\u00a0\u00a0'content'=>\"baz=bomb\"\u00a0\u00a0));$default\u00a0=\u00a0stream_context_get_default($default_opts);$alternate\u00a0=\u00a0stream_context_create($alternate_opts);\/*\u00a0Sends\u00a0a\u00a0regular\u00a0GET\u00a0request\u00a0to\u00a0proxy\u00a0server\u00a0at\u00a010.54.1.39\u00a0*\u00a0For\u00a0www.example.com\u00a0using\u00a0context\u00a0options\u00a0specified\u00a0in\u00a0$default_opts\u00a0*\/readfile('http:\/\/www.example.com');\/*\u00a0Sends\u00a0a\u00a0POST\u00a0request\u00a0directly\u00a0to\u00a0www.example.com\u00a0*\u00a0Using\u00a0context\u00a0options\u00a0specified\u00a0in\u00a0$alternate_opts\u00a0*\/readfile('http:\/\/www.example.com',\u00a0false,\u00a0$alternate);?>                        See Also            stream_context_create() - Create a streams context     Listing of supported wrappers with context options (Supported Protocols and Wrappers)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-prepend.php","title":"stream_bucket_prepend","description":"stream_bucket_prepend   (PHP 5)stream_bucket_prepend \u2014     Prepend bucket to brigade           Description       void stream_bucket_prepend     ( resource $brigade    , resource $bucket    )     WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-get-params.php","title":"stream_context_get_params","description":"stream_context_get_params   (PHP 5 >= 5.3.0)stream_context_get_params \u2014 Retrieves parameters from a context         Description       array stream_context_get_params     ( resource $stream_or_context    )        Retrieves parameter and options information from the stream or context.            Parameters                    stream_or_context                      A stream resource or a        context resource                                     Return Values       Returns an associate array containing all context options and parameters.            Examples            Example #1 stream_context_get_params() example           Basic usage example            <?php$ctx\u00a0=\u00a0stream_context_create();$params\u00a0=\u00a0array(\"notification\"\u00a0=>\u00a0\"stream_notification_callback\");stream_context_set_params($ctx,\u00a0$params);var_dump(stream_context_get_params($ctx));?>             The above example will output something similar to:       array(2) {   [\"notification\"]=>   string(28) \"stream_notification_callback\"   [\"options\"]=>   array(0) {   } }                      See Also            stream_context_set_option() - Sets an option for a stream\/wrapper\/context     stream_context_get_params()     stream_context_set_params() - Set parameters for a stream\/wrapper\/context"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-create.php","title":"stream_context_create","description":"stream_context_create   (PHP 4 >= 4.3.0, PHP 5)stream_context_create \u2014 Create a streams context        Description       resource stream_context_create     ([ array $options    [, array $params   ]] )        Creates and returns a stream context with any options supplied in    options preset.            Parameters                    options                      Must be an associative array of associative arrays in the format        $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.                      Default to an empty array.                                params                      Must be an associative array in the format        $arr[&#039;parameter&#039;] = $value.        Refer to context parameters for        a listing of standard stream parameters.                                     Return Values       A stream context resource.            Changelog                                 Version        Description                                    5.3.0                 Added the optional params argument.                                            Examples       Example #1 Using stream_context_create()      <?php$opts\u00a0=\u00a0array(\u00a0\u00a0'http'=>array(\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\\r\\n\"\u00a0\u00a0));$context\u00a0=\u00a0stream_context_create($opts);\/*\u00a0Sends\u00a0an\u00a0http\u00a0request\u00a0to\u00a0www.example.com\u00a0\u00a0\u00a0with\u00a0additional\u00a0headers\u00a0shown\u00a0above\u00a0*\/$fp\u00a0=\u00a0fopen('http:\/\/www.example.com',\u00a0'r',\u00a0false,\u00a0$context);fpassthru($fp);fclose($fp);?>                   See Also       stream_context_set_option() - Sets an option for a stream\/wrapper\/context    Listing of supported wrappers (Supported Protocols and Wrappers)    Context options (Context options and parameters)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-set-option.php","title":"stream_context_set_option","description":"stream_context_set_option   (PHP 4 >= 4.3.0, PHP 5)stream_context_set_option \u2014 Sets an option for a stream\/wrapper\/context          Description       bool stream_context_set_option     ( resource $stream_or_context    , string $wrapper    , string $option    , mixed $value    )          bool stream_context_set_option      ( resource $stream_or_context     , array $options     )         Sets an option on the specified context.  value     is set to option for wrapper            Parameters                    stream_or_context                      The stream or context resource to apply the options too.                                options                      The options to set for the default context.              Note:                  options must be an associative         array of associative arrays in the format         $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.                        Refer to context options and parameters        for a listing of stream options.                                              Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-set-default.php","title":"stream_context_set_default","description":"stream_context_set_default   (PHP 5 >= 5.3.0)stream_context_set_default \u2014 Set the default streams context          Description       resource stream_context_set_default     ( array $options    )        Set the default stream context which will be used whenever file operations    (fopen(), file_get_contents(), etc...)    are called without a context parameter. Uses the same syntax as    stream_context_create().             Parameters                    options                      The options to set for the default context.              Note:                  options must be an associative         array of associative arrays in the format         $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.                                              Return Values       Returns the default stream context.              Examples            Example #1 stream_context_set_default() example       <?php$default_opts\u00a0=\u00a0array(\u00a0\u00a0'http'=>array(\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\",\u00a0\u00a0\u00a0\u00a0'proxy'=>\"tcp:\/\/10.54.1.39:8000\"\u00a0\u00a0));$default\u00a0=\u00a0stream_context_set_default($default_opts);\/*\u00a0Sends\u00a0a\u00a0regular\u00a0GET\u00a0request\u00a0to\u00a0proxy\u00a0server\u00a0at\u00a010.54.1.39\u00a0*\u00a0For\u00a0www.example.com\u00a0using\u00a0context\u00a0options\u00a0specified\u00a0in\u00a0$default_opts\u00a0*\/readfile('http:\/\/www.example.com');?>                         See Also            stream_context_create() - Create a streams context     stream_context_get_default() - Retrieve the default streams context     Listing of supported wrappers with context options (Supported Protocols and Wrappers)."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-set-params.php","title":"stream_context_set_params","description":"stream_context_set_params   (PHP 4 >= 4.3.0, PHP 5)stream_context_set_params \u2014 Set parameters for a stream\/wrapper\/context          Description       bool stream_context_set_params     ( resource $stream_or_context    , array $params    )        Sets parameters on the specified context.             Parameters                    stream_or_context                      The stream or context to apply the parameters too.                                params                      An array of parameters to set.              Note:                  params should be an associative array of the structure:         $params[&#039;paramname&#039;] = \"paramvalue\";.                                             Supported parameters                         Parameters       Purpose                               notification               Name of user-defined callback function to be called whenever a stream triggers a notification.                           options               Array of options as in context options and         parameters.                                     Return Values       Returns TRUE on success or FALSE on failure.             See Also       stream_notification_callback() - A callback function for the notification context paramater"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-prepend.php","title":"stream_filter_prepend","description":"stream_filter_prepend   (PHP 4 >= 4.3.0, PHP 5)stream_filter_prepend \u2014 Attach a filter to a stream        Description       resource stream_filter_prepend     ( resource $stream    , string $filtername    [, int $read_write    [, mixed $params   ]] )        Adds filtername to the list of filters    attached to stream.            Parameters                    stream                      The target stream.                                filtername                      The filter name.                                read_write                      By default, stream_filter_prepend() will        attach the filter to the read filter chain        if the file was opened for reading (i.e. File Mode:        r, and\/or +).  The filter        will also be attached to the write filter chain        if the file was opened for writing (i.e. File Mode:        w, a, and\/or +).        STREAM_FILTER_READ,        STREAM_FILTER_WRITE, and\/or        STREAM_FILTER_ALL can also be passed to the        read_write parameter to override this behavior.        See stream_filter_append() for an example of        using this parameter.                                params                      This filter will be added with the specified params        to the beginning of the list and will therefore be        called first during stream operations.  To add a filter to the end of the        list, use stream_filter_append().                                     Return Values       Returns a resource which can be used to refer to this filter    instance during a call to stream_filter_remove().            Changelog                                 Version        Description                                    5.1.0                 Prior to PHP 5.1.0, this function returns TRUE on success         or FALSE on failure.                                            Notes   Note:     When using custom (user) filters         stream_filter_register() must be called first     in order to register the desired user filter to filtername.          Note:          Stream data is read from resources (both local and remote) in chunks,     with any unconsumed data kept in internal buffers.  When a new     filter is prepended to a stream, data in the internal buffers,     which has already been processed through other filters will     not be reprocessed through the new filter     at that time.  This differs from the behavior of     stream_filter_append().          Note:          When a filter is added for read and write, two instances of the filter     are created. stream_filter_prepend() must be called twice      with STREAM_FILTER_READ and      STREAM_FILTER_WRITE to get both filter resources.                See Also       stream_filter_register() - Register a user defined stream filter    stream_filter_append() - Attach a filter to a stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-append.php","title":"stream_filter_append","description":"stream_filter_append   (PHP 4 >= 4.3.0, PHP 5)stream_filter_append \u2014 Attach a filter to a stream        Description       resource stream_filter_append     ( resource $stream    , string $filtername    [, int $read_write    [, mixed $params   ]] )        Adds filtername to the list of filters    attached to stream.              Parameters                    stream                      The target stream.                                filtername                      The filter name.                                read_write                      By default, stream_filter_append() will        attach the filter to the read filter chain        if the file was opened for reading (i.e. File Mode:        r, and\/or +).  The filter        will also be attached to the write filter chain        if the file was opened for writing (i.e. File Mode:        w, a, and\/or +).        STREAM_FILTER_READ,        STREAM_FILTER_WRITE, and\/or        STREAM_FILTER_ALL can also be passed to the        read_write parameter to override this behavior.                                params                      This filter will be added with the specified         params to the end of        the list and will therefore be called last during stream operations.        To add a filter to the beginning of the list, use        stream_filter_prepend().                                     Return Values       Returns a resource which can be used to refer to this filter    instance during a call to stream_filter_remove().            Changelog                                 Version        Description                                    5.1.0                 Prior to PHP 5.1.0, this function returns TRUE on success         or FALSE on failure.                                            Examples            Example #1 Controlling where filters are applied       <?php\/*\u00a0Open\u00a0a\u00a0test\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing\u00a0*\/$fp\u00a0=\u00a0fopen('test.txt',\u00a0'w+');\/*\u00a0Apply\u00a0the\u00a0ROT13\u00a0filter\u00a0to\u00a0the\u00a0*\u00a0write\u00a0filter\u00a0chain,\u00a0but\u00a0not\u00a0the\u00a0*\u00a0read\u00a0filter\u00a0chain\u00a0*\/stream_filter_append($fp,\u00a0\"string.rot13\",\u00a0STREAM_FILTER_WRITE);\/*\u00a0Write\u00a0a\u00a0simple\u00a0string\u00a0to\u00a0the\u00a0file\u00a0*\u00a0it\u00a0will\u00a0be\u00a0ROT13\u00a0transformed\u00a0on\u00a0the\u00a0*\u00a0way\u00a0out\u00a0*\/fwrite($fp,\u00a0\"This\u00a0is\u00a0a\u00a0test\\n\");\/*\u00a0Back\u00a0up\u00a0to\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0file\u00a0*\/rewind($fp);\/*\u00a0Read\u00a0the\u00a0contents\u00a0of\u00a0the\u00a0file\u00a0back\u00a0out.\u00a0*\u00a0Had\u00a0the\u00a0filter\u00a0been\u00a0applied\u00a0to\u00a0the\u00a0*\u00a0read\u00a0filter\u00a0chain\u00a0as\u00a0well,\u00a0we\u00a0would\u00a0see\u00a0*\u00a0the\u00a0text\u00a0ROT13ed\u00a0back\u00a0to\u00a0its\u00a0original\u00a0state\u00a0*\/fpassthru($fp);fclose($fp);\/*\u00a0Expected\u00a0Output\u00a0\u00a0\u00a0---------------Guvf\u00a0vf\u00a0n\u00a0grfg\u00a0*\/?>                        Notes   Note:     When using custom (user) filters         stream_filter_register() must be called first     in order to register the desired user filter to filtername.          Note:          Stream data is read from resources (both local and remote) in chunks,     with any unconsumed data kept in internal buffers.  When a new     filter is appended to a stream, data in the internal buffers is processed through     the new filter at that time.  This differs from the behavior of     stream_filter_prepend().          Note:          When a filter is added for read and write, two instances of the filter     are created. stream_filter_append() must be called twice      with STREAM_FILTER_READ and      STREAM_FILTER_WRITE to get both filter resources.                See Also       stream_filter_register() - Register a user defined stream filter    stream_filter_prepend() - Attach a filter to a stream    stream_get_filters() - Retrieve list of registered filters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-copy-to-stream.php","title":"stream_copy_to_stream","description":"stream_copy_to_stream   (PHP 5)stream_copy_to_stream \u2014 Copies data from one stream to another        Description       int stream_copy_to_stream     ( resource $source    , resource $dest    [, int $maxlength = -1    [, int $offset = 0   ]] )        Makes a copy of up to maxlength bytes    of data from the current position (or from the    offset position, if specified) in    source to dest. If    maxlength is not specified, all remaining content in    source will be copied.            Parameters                    source                      The source stream                                dest                      The destination stream                                maxlength                      Maximum bytes to copy                                offset                      The offset where to start to copy data                                     Return Values       Returns the total count of bytes copied.            Changelog                                 Version        Description                                    5.1.0                 Added the offset parameter                                            Examples            Example #1 A stream_copy_to_stream() example       <?php$src\u00a0=\u00a0fopen('http:\/\/www.example.com',\u00a0'r');$dest1\u00a0=\u00a0fopen('first1k.txt',\u00a0'w');$dest2\u00a0=\u00a0fopen('remainder.txt',\u00a0'w');echo\u00a0stream_copy_to_stream($src,\u00a0$dest1,\u00a01024)\u00a0.\u00a0\"\u00a0bytes\u00a0copied\u00a0to\u00a0first1k.txt\\n\";echo\u00a0stream_copy_to_stream($src,\u00a0$dest2)\u00a0.\u00a0\"\u00a0bytes\u00a0copied\u00a0to\u00a0remainder.txt\\n\";?>                        See Also            copy() - Copies file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-register.php","title":"stream_filter_register","description":"stream_filter_register   (PHP 5)stream_filter_register \u2014 Register a user defined stream filter        Description       bool stream_filter_register     ( string $filtername    , string $classname    )        stream_filter_register() allows you to implement    your own filter on any registered stream used with all the other    filesystem functions (such as fopen(),    fread() etc.).             Parameters                    filtername                      The filter name to be registered.                                classname                      To implement a filter, you need to define a class as an extension of        php_user_filter with a number of member functions        as defined below. When performing read\/write operations on the stream        to which your filter is attached, PHP will pass the data through your        filter (and any other filters attached to that stream) so that the        data may be modified as desired. You must implement the methods        exactly as described below - doing otherwise will lead to undefined        behaviour.                      int filter         ( resource $in        , resource $out        , int &$consumed        , bool $closing        )                This method is called whenever data is read from or written to        the attached stream (such as with fread() or fwrite()).        in is a resource pointing to a bucket brigade        which contains one or more bucket objects containing data to be filtered.        out is a resource pointing to a second bucket brigade        into which your modified buckets should be placed.        consumed, which must always        be declared by reference, should be incremented by the length of the data        which your filter reads in and alters.  In most cases this means you will        increment consumed by $bucket->datalen        for each $bucket. If the stream is in the process of closing        (and therefore this is the last pass through the filterchain),        the closing parameter will be set to TRUE.        The  filter() method must return one of        three values upon completion.                                                  Return Value            Meaning                                                        PSFS_PASS_ON                         Filter processed successfully with data available in the             out bucket brigade.                                               PSFS_FEED_ME                         Filter processed successfully, however no data was available to             return. More data is required from the stream or prior filter.                                               PSFS_ERR_FATAL (default)                         The filter experienced an unrecoverable error and cannot continue.                                                                          bool onCreate         ( void        )                This method is called during instantiation of the filter class        object.  If your filter allocates or initializes any other resources        (such as a buffer), this is the place to do it.  Your implementation of        this method should return FALSE on failure, or TRUE on success.                      When your filter is first instantiated, and        yourfilter->onCreate() is called, a number of properties        will be available as shown in the table below.                                                                Property            Contents                                                        FilterClass->filtername                         A string containing the name the filter was instantiated with.             Filters may be registered under multiple names or under wildcards.             Use this property to determine which name was used.                                               FilterClass->params                         The contents of the params parameter passed             to stream_filter_append()             or stream_filter_prepend().                                               FilterClass->stream                         The stream resource being filtered. Maybe available only during              filter() calls when the              closing parameter is set to FALSE.                                                                          void onClose         ( void        )                This method is called upon filter shutdown (typically, this is also        during stream shutdown), and is executed after        the flush method is called.  If any resources        were allocated or initialized during onCreate()        this would be the time to destroy or dispose of them.                                      Return Values       Returns TRUE on success or FALSE on failure.          stream_filter_register() will return FALSE if the    filtername is already defined.             Examples            Example #1 Filter for capitalizing characters on foo-bar.txt stream           The example below implements a filter named strtoupper      on the foo-bar.txt stream which will capitalize      all letter characters written to\/read from that stream.            <?php\/*\u00a0Define\u00a0our\u00a0filter\u00a0class\u00a0*\/class\u00a0strtoupper_filter\u00a0extends\u00a0php_user_filter\u00a0{\u00a0\u00a0function\u00a0filter($in,\u00a0$out,\u00a0&$consumed,\u00a0$closing)\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0($bucket\u00a0=\u00a0stream_bucket_make_writeable($in))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bucket->data\u00a0=\u00a0strtoupper($bucket->data);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$consumed\u00a0+=\u00a0$bucket->datalen;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stream_bucket_append($out,\u00a0$bucket);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0PSFS_PASS_ON;\u00a0\u00a0}}\/*\u00a0Register\u00a0our\u00a0filter\u00a0with\u00a0PHP\u00a0*\/stream_filter_register(\"strtoupper\",\u00a0\"strtoupper_filter\")\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Failed\u00a0to\u00a0register\u00a0filter\");$fp\u00a0=\u00a0fopen(\"foo-bar.txt\",\u00a0\"w\");\/*\u00a0Attach\u00a0the\u00a0registered\u00a0filter\u00a0to\u00a0the\u00a0stream\u00a0just\u00a0opened\u00a0*\/stream_filter_append($fp,\u00a0\"strtoupper\");fwrite($fp,\u00a0\"Line1\\n\");fwrite($fp,\u00a0\"Word\u00a0-\u00a02\\n\");fwrite($fp,\u00a0\"Easy\u00a0As\u00a0123\\n\");fclose($fp);\/*\u00a0Read\u00a0the\u00a0contents\u00a0back\u00a0out\u00a0*\/readfile(\"foo-bar.txt\");?>             The above example will output:       LINE1 WORD - 2 EASY AS 123                         Example #2 Registering a generic filter class to match multiple filter names.       <?php\/*\u00a0Define\u00a0our\u00a0filter\u00a0class\u00a0*\/class\u00a0string_filter\u00a0extends\u00a0php_user_filter\u00a0{\u00a0\u00a0var\u00a0$mode;\u00a0\u00a0function\u00a0filter($in,\u00a0$out,\u00a0&$consumed,\u00a0$closing)\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0while\u00a0($bucket\u00a0=\u00a0stream_bucket_make_writeable($in))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($this->mode\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bucket->data\u00a0=\u00a0strtoupper($bucket->data);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($this->mode\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bucket->data\u00a0=\u00a0strtolower($bucket->data);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$consumed\u00a0+=\u00a0$bucket->datalen;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stream_bucket_append($out,\u00a0$bucket);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0PSFS_PASS_ON;\u00a0\u00a0}\u00a0\u00a0function\u00a0onCreate()\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0($this->filtername\u00a0==\u00a0'str.toupper')\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->mode\u00a0=\u00a01;\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($this->filtername\u00a0==\u00a0'str.tolower')\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->mode\u00a0=\u00a00;\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0Some\u00a0other\u00a0str.*\u00a0filter\u00a0was\u00a0asked\u00a0for,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0report\u00a0failure\u00a0so\u00a0that\u00a0PHP\u00a0will\u00a0keep\u00a0looking\u00a0*\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0true;\u00a0\u00a0}}\/*\u00a0Register\u00a0our\u00a0filter\u00a0with\u00a0PHP\u00a0*\/stream_filter_register(\"str.*\",\u00a0\"string_filter\")\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Failed\u00a0to\u00a0register\u00a0filter\");$fp\u00a0=\u00a0fopen(\"foo-bar.txt\",\u00a0\"w\");\/*\u00a0Attach\u00a0the\u00a0registered\u00a0filter\u00a0to\u00a0the\u00a0stream\u00a0just\u00a0opened\u00a0\u00a0\u00a0We\u00a0could\u00a0alternately\u00a0bind\u00a0to\u00a0str.tolower\u00a0here\u00a0*\/stream_filter_append($fp,\u00a0\"str.toupper\");fwrite($fp,\u00a0\"Line1\\n\");fwrite($fp,\u00a0\"Word\u00a0-\u00a02\\n\");fwrite($fp,\u00a0\"Easy\u00a0As\u00a0123\\n\");fclose($fp);\/*\u00a0Read\u00a0the\u00a0contents\u00a0back\u00a0out\u00a0*\/readfile(\"foo-bar.txt\");?>             The above example will output:       LINE1 WORD - 2 EASY AS 123                       See Also            stream_wrapper_register() - Register a URL wrapper implemented as a PHP class     stream_filter_append() - Attach a filter to a stream     stream_filter_prepend() - Attach a filter to a stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-encoding.php","title":"stream_encoding","description":"stream_encoding   (No version information available, might only be in SVN)stream_encoding \u2014 Set character set for stream encoding         Description       bool stream_encoding     ( resource $stream    [, string $encoding   ] )    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-remove.php","title":"stream_filter_remove","description":"stream_filter_remove   (PHP 5 >= 5.1.0)stream_filter_remove \u2014 Remove a filter from a stream        Description       bool stream_filter_remove     ( resource $stream_filter    )        Removes a stream filter previously added to a stream with    stream_filter_prepend() or    stream_filter_append().  Any data remaining in the    filter&#039;s internal buffer will be flushed through to the next filter before    removing it.            Parameters                    stream_filter                      The stream filter to be removed.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Dynamicly refiltering a stream       <?php\/*\u00a0Open\u00a0a\u00a0test\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing\u00a0*\/$fp\u00a0=\u00a0fopen(\"test.txt\",\u00a0\"rw\");$rot13_filter\u00a0=\u00a0stream_filter_append($fp,\u00a0\"string.rot13\",\u00a0STREAM_FILTER_WRITE);fwrite($fp,\u00a0\"This\u00a0is\u00a0\");stream_filter_remove($rot13_filter);fwrite($fp,\u00a0\"a\u00a0test\\n\");rewind($fp);fpassthru($fp);fclose($fp);?>             The above example will output:       Guvf vf a test                          See Also            stream_filter_register() - Register a user defined stream filter     stream_filter_append() - Attach a filter to a stream     stream_filter_prepend() - Attach a filter to a stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-filters.php","title":"stream_get_filters","description":"stream_get_filters   (PHP 5)stream_get_filters \u2014 Retrieve list of registered filters        Description       array stream_get_filters     ( void    )        Retrieve the list of registered filters on the running system.            Return Values       Returns an indexed array containing the name of all stream filters    available.            Examples            Example #1 Using stream_get_filters()       <?php$streamlist\u00a0=\u00a0stream_get_filters();print_r($streamlist);?>             The above example will output something similar to:       Array (   [0] => string.rot13   [1] => string.toupper   [2] => string.tolower   [3] => string.base64   [4] => string.quoted-printable )                        See Also       stream_filter_register() - Register a user defined stream filter    stream_get_wrappers() - Retrieve list of registered streams"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-contents.php","title":"stream_get_contents","description":"stream_get_contents    (PHP 5)stream_get_contents \u2014 Reads remainder of a stream into a string        Description       string stream_get_contents     ( resource $handle    [, int $maxlength = -1    [, int $offset = -1   ]] )         Identical to file_get_contents(), except that    stream_get_contents() operates on an already open    stream resource and returns the remaining contents in a string, up to    maxlength bytes and starting at the specified    offset.            Parameters                    handle (resource)                      A stream resource (e.g. returned from fopen())                                maxlength (integer)                      The maximum bytes to read. Defaults to -1 (read all the remaining        buffer).                                offset (integer)                      Seek to the specified offset before reading. If this number is negative,        no seeking will occur and reading will start from the current position.                                     Return Values       Returns a string or FALSE on failure.            Changelog                                 Version        Description                                    5.1.0                 The offset was added.                                            Examples            Example #1 stream_get_contents() example       <?phpif\u00a0($stream\u00a0=\u00a0fopen('http:\/\/www.example.com',\u00a0'r'))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0print\u00a0all\u00a0the\u00a0page\u00a0starting\u00a0at\u00a0the\u00a0offset\u00a010\u00a0\u00a0\u00a0\u00a0echo\u00a0stream_get_contents($stream,\u00a0-1,\u00a010);\u00a0\u00a0\u00a0\u00a0fclose($stream);}if\u00a0($stream\u00a0=\u00a0fopen('http:\/\/www.example.net',\u00a0'r'))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0print\u00a0the\u00a0first\u00a05\u00a0bytes\u00a0\u00a0\u00a0\u00a0echo\u00a0stream_get_contents($stream,\u00a05);\u00a0\u00a0\u00a0\u00a0fclose($stream);}?>                        Notes   Note: This function is binary-safe.         See Also            fgets() - Gets line from file pointer     fread() - Binary-safe file read     fpassthru() - Output all remaining data on a file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-meta-data.php","title":"stream_get_meta_data","description":"stream_get_meta_data   (PHP 4 >= 4.3.0, PHP 5)stream_get_meta_data \u2014 Retrieves header\/meta data from streams\/file pointers        Description       array stream_get_meta_data     ( resource $stream    )        Returns information about an existing stream.            Parameters                    stream                      The stream can be any stream created by fopen(),        fsockopen() and pfsockopen().                                     Return Values       The result array contains the following items:                     timed_out (bool) - TRUE if the stream      timed out while waiting for data on the last call to      fread() or fgets().                        blocked (bool) - TRUE if the stream is      in blocking IO mode. See stream_set_blocking().                        eof (bool) - TRUE if the stream has reached      end-of-file.  Note that for socket streams this member can be TRUE      even when unread_bytes is non-zero.  To      determine if there is more data to be read, use      feof() instead of reading this item.                        unread_bytes (int) - the number of bytes      currently contained in the PHP&#039;s own internal buffer.          Note:              You shouldn&#039;t use this value in a script.                              stream_type (string) - a label describing      the underlying implementation of the stream.                        wrapper_type (string) - a label describing      the protocol wrapper implementation layered over the stream.      See Supported Protocols and Wrappers for more information about wrappers.                        wrapper_data (mixed) - wrapper specific      data attached to this stream.  See Supported Protocols and Wrappers for      more information about wrappers and their wrapper data.                        filters (array) - and array containing      the names of any filters that have been stacked onto this stream.      Documentation on filters can be found in the      Filters appendix.                        mode (string) - the type of access required for      this stream (see Table 1 of the fopen() reference)                        seekable (bool) - whether the current stream can      be seeked.                        uri (string) - the URI\/filename associated with this      stream.                     Changelog                                 Version        Description                                    5.0.0                 The following entries were added in the returned array:         mode, seekable,         and uri.                               4.3.0                 The following entries were added in the returned array:         stream_type, wrapper_type,         wrapper_data, and filters.                               4.3.0                 socket_get_status() is an alias for this function.         Prior to PHP 4.3.0, it was used to retrieve the first four items, for         socket based streams only.                                            Examples            Example #1 stream_get_meta_data() example       <?php$url\u00a0=\u00a0'http:\/\/www.example.com\/';if\u00a0(!$fp\u00a0=\u00a0fopen($url,\u00a0'r'))\u00a0{\u00a0\u00a0\u00a0\u00a0trigger_error(\"Unable\u00a0to\u00a0open\u00a0URL\u00a0($url)\",\u00a0E_USER_ERROR);}$meta\u00a0=\u00a0stream_get_meta_data($fp);print_r($meta);fclose($fp);?>             The above example will output something similar to:       Array (     [wrapper_data] => Array         (             [0] => HTTP\/1.1 200 OK             [1] => Server: Apache\/2.2.3 (Red Hat)             [2] => Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT             [3] => ETag: \"b300b4-1b6-4059a80bfd280\"             [4] => Accept-Ranges: bytes             [5] => Content-Type: text\/html; charset=UTF-8             [6] => Set-Cookie: FOO=BAR; expires=Fri, 21-Dec-2012 12:00:00 GMT; path=\/; domain=.example.com             [6] => Connection: close                  [7] => Date: Fri, 16 Oct 2009 12:00:00 GMT             [8] => Age: 1164                [9] => Content-Length: 438         )      [wrapper_type] => http     [stream_type] => tcp_socket\/ssl     [mode] => r     [unread_bytes] => 438     [seekable] =>      [uri] => http:\/\/www.example.com\/     [timed_out] =>      [blocked] => 1     [eof] =>  )                      Notes   Note:     This function does NOT work on sockets created by the Socket extension.                See Also            get_headers() - Fetches all the headers sent by the server in response to a HTTP request     $http_response_header"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-transports.php","title":"stream_get_transports","description":"stream_get_transports   (PHP 5)stream_get_transports \u2014 Retrieve list of registered socket transports        Description       array stream_get_transports     ( void    )        Returns an indexed array containing the name of all socket transports    available on the running system.            Return Values       Returns an indexed array of socket transports names.            Examples            Example #1 Using stream_get_transports()       <?php$xportlist\u00a0=\u00a0stream_get_transports();print_r($xportlist);?>             The above example will output something similar to:       Array (   [0] => tcp   [1] => udp   [2] => unix   [3] => udg )                      See Also       stream_get_filters() - Retrieve list of registered filters    stream_get_wrappers() - Retrieve list of registered streams"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-line.php","title":"stream_get_line","description":"stream_get_line   (PHP 5)stream_get_line \u2014 Gets line from stream resource up to a given delimiter        Description       string stream_get_line     ( resource $handle    , int $length    [, string $ending   ] )        Gets a line from the given handle.          Reading ends when length bytes have been read, when    the string specified by ending is found (which is    not included in the return value), or on EOF    (whichever comes first).          This function is nearly identical to fgets() except in    that it allows end of line delimiters other than the standard \\n, \\r, and    \\r\\n, and does not return the delimiter itself.            Parameters                    handle                      A valid file handle.                                length                      The number of bytes to read from the handle.                                ending                      An optional string delimiter.                                     Return Values       Returns a string of up to length bytes read from the file    pointed to by handle.          If an error occurs, returns FALSE.              See Also       fread() - Binary-safe file read    fgets() - Gets line from file pointer    fgetc() - Gets character from file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-wrappers.php","title":"stream_get_wrappers","description":"stream_get_wrappers   (PHP 5)stream_get_wrappers \u2014 Retrieve list of registered streams        Description       array stream_get_wrappers     ( void    )        Retrieve list of registered streams available on the running system.            Return Values       Returns an indexed array containing the name of all stream wrappers    available on the running system.            Examples            Example #1 stream_get_wrappers() example       <?phpprint_r(stream_get_wrappers());?>             The above example will output something similar to:       Array (     [0] => php     [1] => file     [2] => http     [3] => ftp     [4] => compress.bzip2     [5] => compress.zlib )                         Example #2 Checking for the existence of a stream wrapper       <?php\/\/\u00a0check\u00a0for\u00a0the\u00a0existence\u00a0of\u00a0the\u00a0bzip2\u00a0stream\u00a0wrapperif\u00a0(in_array('compress.bzip2',\u00a0stream_get_wrappers()))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'compress.bzip2:\/\/\u00a0support\u00a0enabled.';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'compress.bzip2:\/\/\u00a0support\u00a0not\u00a0enabled.';}?>                        See Also       stream_wrapper_register() - Register a URL wrapper implemented as a PHP class"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-is-local.php","title":"stream_is_local","description":"stream_is_local   (PHP 5 >= 5.2.4)stream_is_local \u2014 Checks if a stream is a local stream         Description       bool stream_is_local     ( mixed $stream_or_url    )        Checks if a stream, or a URL, is a local one or not.            Parameters                    stream_or_url                      The stream resource or URL to check.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 stream_is_local() example           Basic usage example.            <?phpvar_dump(stream_is_local(\"http:\/\/example.com\"));var_dump(stream_is_local(\"\/etc\"));?>             The above example will output something similar to:       bool(false) bool(true)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-register-wrapper.php","title":"stream_register_wrapper","description":"stream_register_wrapper   (PHP 4 >= 4.3.0, PHP 5)stream_register_wrapper \u2014 Alias of stream_wrapper_register()        Description       This function is an alias of:  stream_wrapper_register()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-resolve-include-path.php","title":"stream_resolve_include_path","description":"stream_resolve_include_path   (PHP 5 >= 5.3.2)stream_resolve_include_path \u2014     Resolve filename against the include path            Description       string stream_resolve_include_path     ( string $filename        )        Resolve filename against the include path according to the same rules as fopen()\/include().            Parameters                    filename                      The filename to resolve.                                          Return Values       Returns a string containing the resolved absolute filename,  or FALSE on failure.            Examples            Example #1 stream_resolve_include_path() example           Basic usage example.            <?phpvar_dump(stream_resolve_include_path(\"test.php\"));?>             The above example will output something similar to:       string(22) \"\/var\/www\/html\/test.php\""},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-notification-callback.php","title":"stream_notification_callback","description":"stream_notification_callback   (PHP 5 >= 5.2.0)stream_notification_callback \u2014 A callback function for the notification context paramater          Description       void stream_notification_callback     ( int $notification_code    , int $severity    , string $message    , int $message_code    , int $bytes_transferred    , int $bytes_max    )        A callback function, used by the    notification context parameter,    called during an event.      Note:          This is not a real function, only a prototype of how the function should     be.                 Parameters                    notification_code                      One of the STREAM_NOTIFY_* notification constants.                                severity                      One of the STREAM_NOTIFY_SEVERITY_* notification constants.                                message                      Passed if a descriptive message is available for the event.                                message_code                      Passed if a descriptive message code is available for the event.                      The meaning of this value is dependent on the specific wrapper in use.                                bytes_transferred                      If applicable, the bytes_transferred will be        populated.                                bytes_max                      If applicable, the bytes_max will be        populated.                                       Return Values       No value is returned.            Examples            Example #1 stream_notification_callback() example       <?phpfunction\u00a0stream_notification_callback($notification_code,\u00a0$severity,\u00a0$message,\u00a0$message_code,\u00a0$bytes_transferred,\u00a0$bytes_max)\u00a0{\u00a0\u00a0\u00a0\u00a0switch($notification_code)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_RESOLVE:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_AUTH_REQUIRED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_COMPLETED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_FAILURE:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_AUTH_RESULT:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($notification_code,\u00a0$severity,\u00a0$message,\u00a0$message_code,\u00a0$bytes_transferred,\u00a0$bytes_max);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0Ignore\u00a0*\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_REDIRECTED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Being\u00a0redirected\u00a0to:\u00a0\",\u00a0$message;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_CONNECT:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connected...\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_FILE_SIZE_IS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Got\u00a0the\u00a0filesize:\u00a0\",\u00a0$bytes_max;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_MIME_TYPE_IS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Found\u00a0the\u00a0mime-type:\u00a0\",\u00a0$message;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_PROGRESS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Made\u00a0some\u00a0progress,\u00a0downloaded\u00a0\",\u00a0$bytes_transferred,\u00a0\"\u00a0so\u00a0far\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\n\";}$ctx\u00a0=\u00a0stream_context_create();stream_context_set_params($ctx,\u00a0array(\"notification\"\u00a0=>\u00a0\"stream_notification_callback\"));file_get_contents(\"http:\/\/php.net\/contact\",\u00a0false,\u00a0$ctx);?>             The above example will output something similar to:       Connected... Found the mime-type: text\/html; charset=utf-8 Being redirected to: http:\/\/no.php.net\/contact Connected... Got the filesize: 0 Found the mime-type: text\/html; charset=utf-8 Being redirected to: http:\/\/no.php.net\/contact.php Connected... Got the filesize: 4589 Found the mime-type: text\/html;charset=utf-8 Made some progress, downloaded 0 so far Made some progress, downloaded 0 so far Made some progress, downloaded 0 so far Made some progress, downloaded 1440 so far Made some progress, downloaded 2880 so far Made some progress, downloaded 4320 so far Made some progress, downloaded 5760 so far Made some progress, downloaded 6381 so far Made some progress, downloaded 7002 so far                         Example #2 Simple progressbar for commandline download client       <?phpfunction\u00a0usage($argv)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Usage:\\n\";\u00a0\u00a0\u00a0\u00a0printf(\"\\tphp\u00a0%s\u00a0<http:\/\/example.com\/file>\u00a0<localfile>\\n\",\u00a0$argv[0]);\u00a0\u00a0\u00a0\u00a0exit(1);}function\u00a0stream_notification_callback($notification_code,\u00a0$severity,\u00a0$message,\u00a0$message_code,\u00a0$bytes_transferred,\u00a0$bytes_max)\u00a0{\u00a0\u00a0\u00a0\u00a0static\u00a0$filesize\u00a0=\u00a0null;\u00a0\u00a0\u00a0\u00a0switch($notification_code)\u00a0{\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_RESOLVE:\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_AUTH_REQUIRED:\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_COMPLETED:\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_FAILURE:\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_AUTH_RESULT:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0Ignore\u00a0*\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_REDIRECTED:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Being\u00a0redirected\u00a0to:\u00a0\",\u00a0$message,\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_CONNECT:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connected...\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_FILE_SIZE_IS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$filesize\u00a0=\u00a0$bytes_max;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Filesize:\u00a0\",\u00a0$filesize,\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_MIME_TYPE_IS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Mime-type:\u00a0\",\u00a0$message,\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0case\u00a0STREAM_NOTIFY_PROGRESS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($bytes_transferred\u00a0>\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!isset($filesize))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\rUnknown\u00a0filesize..\u00a0%2d\u00a0kb\u00a0done..\",\u00a0$bytes_transferred\/1024);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$length\u00a0=\u00a0(int)(($bytes_transferred\/$filesize)*100);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\r[%-100s]\u00a0%d%%\u00a0(%2d\/%2d\u00a0kb)\",\u00a0str_repeat(\"=\",\u00a0$length).\u00a0\">\",\u00a0$length,\u00a0($bytes_transferred\/1024),\u00a0$filesize\/1024);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0}}isset($argv[1],\u00a0$argv[2])\u00a0or\u00a0usage($argv);$ctx\u00a0=\u00a0stream_context_create();stream_context_set_params($ctx,\u00a0array(\"notification\"\u00a0=>\u00a0\"stream_notification_callback\"));$fp\u00a0=\u00a0fopen($argv[1],\u00a0\"r\",\u00a0false,\u00a0$ctx);if\u00a0(is_resource($fp)\u00a0&&\u00a0file_put_contents($argv[2],\u00a0$fp))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\nDone!\\n\";\u00a0\u00a0\u00a0\u00a0exit(0);}$err\u00a0=\u00a0error_get_last();echo\u00a0\"\\nErrrrrorr..\\n\",\u00a0$err[\"message\"],\u00a0\"\\n\";exit(1);?>                   Executing the example above with:      php -n fetch.php      http:\/\/no2.php.net\/get\/php-5-LATEST.tar.bz2\/from\/this\/mirror      php-latest.tar.bz2 will output something similar too:            Connected... Mime-type: text\/html; charset=utf-8 Being redirected to: http:\/\/no2.php.net\/distributions\/php-5.2.5.tar.bz2 Connected... Filesize: 7773024 Mime-type: application\/octet-stream [========================================>                                                           ] 40% (3076\/7590 kb)                      See Also            Context parameters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-blocking.php","title":"stream_set_blocking","description":"stream_set_blocking   (PHP 4 >= 4.3.0, PHP 5)stream_set_blocking \u2014 Set blocking\/non-blocking mode on a stream        Description       bool stream_set_blocking     ( resource $stream    , int $mode    )        Sets blocking or non-blocking mode on a stream.          This function works for any stream that supports non-blocking mode    (currently, regular files and socket streams).            Parameters                    stream                      The stream.                                mode                      If mode is 0, the given stream        will be switched to non-blocking mode, and if 1, it        will be switched to blocking mode.  This affects calls like        fgets() and fread()        that read from the stream.  In non-blocking mode an        fgets() call will always return right away        while in blocking mode it will wait for data to become available        on the stream.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    4.3.0                 Prior to PHP 4.3.0, this function only worked on socket based streams.                                            Notes   Note:          This function was previously called as     set_socket_blocking() and later     socket_set_blocking() but this usage is deprecated.                See Also       stream_select() - Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-read-buffer.php","title":"stream_set_read_buffer","description":"stream_set_read_buffer   (PHP 5 >= 5.3.3)stream_set_read_buffer \u2014 Set read file buffering on the given stream        Description       int stream_set_read_buffer     ( resource $stream    , int $buffer    )        Sets the read buffer. It&#039;s the equivalent of stream_set_write_buffer(),    but for read operations.            Parameters              stream                   The file pointer.                           buffer                   The number of bytes to buffer. If buffer       is 0 then read operations are unbuffered.  This ensures that all reads       with fread() are completed before other processes are       allowed to write to that output stream.                              Return Values       Returns 0 on success, or EOF if the request    cannot be honored.            See Also       stream_set_write_buffer() - Sets write file buffering on the given stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-write-buffer.php","title":"stream_set_write_buffer","description":"stream_set_write_buffer   (PHP 4 >= 4.3.0, PHP 5)stream_set_write_buffer \u2014 Sets write file buffering on the given stream        Description       int stream_set_write_buffer     ( resource $stream    , int $buffer    )        Sets the buffering for write operations on the given stream    to buffer bytes.          Output using fwrite() is normally buffered at    8K.  This means that if there are two processes wanting to write    to the same output stream (a file), each is paused after 8K of    data to allow the other to write.            Parameters                    stream                      The file pointer.                                buffer                      The number of bytes to buffer. If buffer        is 0 then write operations are unbuffered.  This ensures that all writes        with fwrite() are completed before other processes are        allowed to write to that output stream.                                     Return Values       Returns 0 on success, or EOF if the request cannot be honored.            Examples            Example #1 stream_set_write_buffer() example           The following example demonstrates how to use      stream_set_write_buffer() to create an unbuffered stream.            <?php$fp\u00a0=\u00a0fopen($file,\u00a0\"w\");if\u00a0($fp)\u00a0{\u00a0\u00a0stream_set_write_buffer($fp,\u00a00);\u00a0\u00a0fwrite($fp,\u00a0$output);\u00a0\u00a0fclose($fp);}?>                        See Also       fopen() - Opens file or URL    fwrite() - Binary-safe file write"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-timeout.php","title":"stream_set_timeout","description":"stream_set_timeout   (PHP 4 >= 4.3.0, PHP 5)stream_set_timeout \u2014 Set timeout period on a stream        Description       bool stream_set_timeout     ( resource $stream    , int $seconds    [, int $microseconds = 0   ] )        Sets the timeout value on stream,    expressed in the sum of seconds and    microseconds.           When the stream times out, the &#039;timed_out&#039; key of the array returned by    stream_get_meta_data() is set to TRUE, although no    error\/warning is generated.            Parameters                    stream                      The target stream.                                seconds                      The seconds part of the timeout to be set.                                microseconds                      The microseconds part of the timeout to be set.                                     Return Values       Returns TRUE on success or FALSE on failure.             Changelog                                 Version        Description                                    4.3.0                 As of PHP 4.3, this function can (potentially) work on any kind of         stream.  In PHP 4.3, socket based streams are still the only kind         supported in the PHP core, although streams from other extensions         may support this function.                                            Examples            Example #1 stream_set_timeout() example        <?php$fp\u00a0=\u00a0fsockopen(\"www.example.com\",\u00a080);if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0open\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"GET\u00a0\/\u00a0HTTP\/1.0\\r\\n\\r\\n\");\u00a0\u00a0\u00a0\u00a0stream_set_timeout($fp,\u00a02);\u00a0\u00a0\u00a0\u00a0$res\u00a0=\u00a0fread($fp,\u00a02000);\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0stream_get_meta_data($fp);\u00a0\u00a0\u00a0\u00a0fclose($fp);\u00a0\u00a0\u00a0\u00a0if\u00a0($info['timed_out'])\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0timed\u00a0out!';\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$res;\u00a0\u00a0\u00a0\u00a0}}?>                         Notes   Note:          This function doesn&#039;t work with advanced operations like     stream_socket_recvfrom(), use     stream_select() with timeout parameter instead.              This function was previously called as    set_socket_timeout() and later    socket_set_timeout() but this usage is deprecated.            See Also       fsockopen() - Open Internet or Unix domain socket connection    fopen() - Opens file or URL"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-accept.php","title":"stream_socket_accept","description":"stream_socket_accept   (PHP 5)stream_socket_accept \u2014 Accept a connection on a socket created by stream_socket_server()          Description       resource stream_socket_accept     ( resource $server_socket    [, float $timeout = ini_get(\"default_socket_timeout\")    [, string &$peername   ]] )        Accept a connection on a socket previously created by    stream_socket_server().             Parameters                    server_socket                      The server socket to accept a connection from.                                timeout                      Override the default socket accept timeout. Time should be given in        seconds.                                peername                      Will be set to the name (address) of the client which connected, if        included and available from the selected transport.              Note:                  Can also be determined later using         stream_socket_get_name().                                             Return Values       Returns a stream to the accepted socket connection or FALSE on failure.            Notes   Warning         This function should not be used with UDP server sockets. Instead, use     stream_socket_recvfrom() and     stream_socket_sendto().                See Also            stream_socket_server() - Create an Internet or Unix domain server socket     stream_socket_get_name() - Retrieve the name of the local or remote sockets     stream_set_blocking() - Set blocking\/non-blocking mode on a stream     stream_set_timeout() - Set timeout period on a stream     fgets() - Gets line from file pointer     fgetss() - Gets line from file pointer and strip HTML tags     fwrite() - Binary-safe file write     fclose() - Closes an open file pointer     feof() - Tests for end-of-file on a file pointer     cURL Functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-get-name.php","title":"stream_socket_get_name","description":"stream_socket_get_name   (PHP 5)stream_socket_get_name \u2014 Retrieve the name of the local or remote sockets          Description       string stream_socket_get_name     ( resource $handle    , bool $want_peer    )        Returns the local or remote name of a given socket connection.            Parameters                    handle                      The socket to get the name of.                                want_peer                      If set to TRUE the remote socket name will be returned, if set        to FALSE the local socket name will be returned.                                     Return Values       The name of the socket.            See Also            stream_socket_accept() - Accept a connection on a socket created by stream_socket_server"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-enable-crypto.php","title":"stream_socket_enable_crypto","description":"stream_socket_enable_crypto   (PHP 5 >= 5.1.0)stream_socket_enable_crypto \u2014 Turns encryption on\/off on an already connected socket          Description       mixed stream_socket_enable_crypto     ( resource $stream    , bool $enable    [, int $crypto_type    [, resource $session_stream   ]] )         Enable or disable encryption on the stream.           Once the crypto settings are established, cryptography can be turned    on and off dynamically by passing TRUE or FALSE in the    enable parameter.            Parameters                    stream                      The stream resource.                                enable                      Enable\/disable cryptography on the stream.                                crypto_type                      Setup encryption on the stream.        Valid methods are                 STREAM_CRYPTO_METHOD_SSLv2_CLIENT         STREAM_CRYPTO_METHOD_SSLv3_CLIENT         STREAM_CRYPTO_METHOD_SSLv23_CLIENT         STREAM_CRYPTO_METHOD_TLS_CLIENT         STREAM_CRYPTO_METHOD_SSLv2_SERVER         STREAM_CRYPTO_METHOD_SSLv3_SERVER         STREAM_CRYPTO_METHOD_SSLv23_SERVER         STREAM_CRYPTO_METHOD_TLS_SERVER                                        session_stream                      Seed the stream with settings from session_stream.                                     Return Values       Returns TRUE on success, FALSE if negotiation has failed or    0 if there isn&#039;t enough data and you should try again    (only for non-blocking sockets).             Examples            Example #1 stream_socket_enable_crypto() example       <?php$fp\u00a0=\u00a0stream_socket_client(\"tcp:\/\/myproto.example.com:31337\",\u00a0$errno,\u00a0$errstr,\u00a030);if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\"Unable\u00a0to\u00a0connect:\u00a0$errstr\u00a0($errno)\");}\/*\u00a0Turn\u00a0on\u00a0encryption\u00a0for\u00a0login\u00a0phase\u00a0*\/stream_socket_enable_crypto($fp,\u00a0true,\u00a0STREAM_CRYPTO_METHOD_SSLv23_CLIENT);fwrite($fp,\u00a0\"USER\u00a0god\\r\\n\");fwrite($fp,\u00a0\"PASS\u00a0secret\\r\\n\");\/*\u00a0Turn\u00a0off\u00a0encryption\u00a0for\u00a0the\u00a0rest\u00a0*\/stream_socket_enable_crypto($fp,\u00a0false);while\u00a0($motd\u00a0=\u00a0fgets($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$motd;}fclose($fp);?>             The above example will output something similar to:                             See Also            OpenSSL Functions     List of Supported Socket Transports"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-select.php","title":"stream_select","description":"stream_select   (PHP 4 >= 4.3.0, PHP 5)stream_select \u2014 Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec         Description       int stream_select     ( array &$read    , array &$write    , array &$except    , int $tv_sec    [, int $tv_usec = 0   ] )        The stream_select() function accepts arrays of streams and    waits for them to change status. Its operation is equivalent to that of    the socket_select() function except in that it acts on streams.            Parameters                    read                      The streams listed in the read array will be watched to        see if characters become available for reading (more precisely, to see if        a read will not block - in particular, a stream resource is also ready on        end-of-file, in which case an fread() will return        a zero length string).                                write                      The streams listed in the write array will be        watched to see if a write will not block.                                except                      The streams listed in the except array will be        watched for high priority exceptional (\"out-of-band\") data arriving.              Note:                  When stream_select() returns, the arrays         read, write and         except are modified to indicate which stream         resource(s) actually changed status.                              You do not need to pass every array to        stream_select(). You can leave it out and use an        empty array or NULL instead. Also do not forget that those arrays are        passed by reference and will be modified after        stream_select() returns.                                tv_sec                      The tv_sec and tv_usec        together form the timeout parameter,        tv_sec specifies the number of seconds while        tv_usec the number of microseconds.        The timeout is an upper bound on the amount of time        that stream_select() will wait before it returns.        If tv_sec and tv_usec are        both set to 0, stream_select() will        not wait for data - instead it will return immediately, indicating the        current status of the streams.                      If tv_sec is NULL stream_select()        can block indefinitely, returning only when an event on one of the        watched streams occurs (or if a signal interrupts the system call).              Warning                 Using a timeout value of 0 allows you to         instantaneously poll the status of the streams, however, it is NOT a         good idea to use a 0 timeout value in a loop as it         will cause your script to consume too much CPU time.                         It is much better to specify a timeout value of a few seconds, although         if you need to be checking and running other code concurrently, using a         timeout value of at least 200000 microseconds will         help reduce the CPU usage of your script.                         Remember that the timeout value is the maximum time that will elapse;         stream_select() will return as soon as the         requested streams are ready for use.                                        tv_usec                      See tv_sec description.                                     Return Values       On success stream_select() returns the number of    stream resources contained in the modified arrays, which may be zero if    the timeout expires before anything interesting happens. On error FALSE    is returned and a warning raised (this can happen if the system call is    interrupted by an incoming signal).            Examples            Example #1 stream_select() Example           This example checks to see if data has arrived for reading on either      $stream1 or $stream2.      Since the timeout value is 0 it will return      immediately:            <?php\/*\u00a0Prepare\u00a0the\u00a0read\u00a0array\u00a0*\/$read\u00a0\u00a0\u00a0=\u00a0array($stream1,\u00a0$stream2);$write\u00a0\u00a0=\u00a0NULL;$except\u00a0=\u00a0NULL;if\u00a0(false\u00a0===\u00a0($num_changed_streams\u00a0=\u00a0stream_select($read,\u00a0$write,\u00a0$except,\u00a00)))\u00a0{\u00a0\u00a0\u00a0\u00a0\/*\u00a0Error\u00a0handling\u00a0*\/}\u00a0elseif\u00a0($num_changed_streams\u00a0>\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\/*\u00a0At\u00a0least\u00a0on\u00a0one\u00a0of\u00a0the\u00a0streams\u00a0something\u00a0interesting\u00a0happened\u00a0*\/}?>                        Notes   Note:          Due to a limitation in the current Zend Engine it is not possible to pass a     constant modifier like NULL directly as a parameter to a function     which expects this parameter to be passed by reference. Instead use a     temporary variable or an expression with the leftmost member being a     temporary variable:       <?php$e\u00a0=\u00a0NULL;stream_select($r,\u00a0$w,\u00a0$e,\u00a00);?>                 Note:         Be sure to use the === operator when checking for an    error. Since the stream_select() may return 0 the    comparison with == would evaluate to TRUE:      <?php$e\u00a0=\u00a0NULL;if\u00a0(false\u00a0===\u00a0stream_select($r,\u00a0$w,\u00a0$e,\u00a00))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"stream_select()\u00a0failed\\n\";}?>                 Note:          If you read\/write to a stream returned in the arrays be aware that     they do not necessarily read\/write the full amount of data you have     requested. Be prepared to even only be able to read\/write a single     byte.          Note:          Some streams (like zlib) cannot be selected by this     function.          Note:          Windows compatibility: stream_select() used on a     pipe returned from proc_open() may cause data loss     under Windows 98.             Use of stream_select() on     file descriptors returned by proc_open() will fail     and return FALSE under Windows.                See Also       stream_set_blocking() - Set blocking\/non-blocking mode on a stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-pair.php","title":"stream_socket_pair","description":"stream_socket_pair   (PHP 5 >= 5.1.0)stream_socket_pair \u2014     Creates a pair of connected, indistinguishable socket streams           Description       array stream_socket_pair     ( int $domain    , int $type    , int $protocol    )        stream_socket_pair() creates a pair of connected,    indistinguishable socket streams. This function is commonly used in IPC    (Inter-Process Communication).                 Parameters                    domain                      The protocol family to be used: STREAM_PF_INET,        STREAM_PF_INET6 or        STREAM_PF_UNIX                                type                      The type of communication to be used:        STREAM_SOCK_DGRAM,        STREAM_SOCK_RAW,        STREAM_SOCK_RDM,        STREAM_SOCK_SEQPACKET or        STREAM_SOCK_STREAM                                protocol                      The protocol to be used: STREAM_IPPROTO_ICMP,        STREAM_IPPROTO_IP,        STREAM_IPPROTO_RAW,        STREAM_IPPROTO_TCP or        STREAM_IPPROTO_UDP                                      Note:          Please consult the Streams constant      list for further details on each constant.                Return Values       Returns an array with the two socket resources on success, or    FALSE on failure.            Changelog                                 Version        Description                                    5.3.0                 This function is now available on Windows platforms.                                            Examples            Example #1 A stream_socket_pair() example           This example shows the basic usage of      stream_socket_pair() in Inter-Process Comunication.            <?php$sockets\u00a0=\u00a0stream_socket_pair(STREAM_PF_UNIX,\u00a0STREAM_SOCK_STREAM,\u00a0STREAM_IPPROTO_IP);$pid\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0pcntl_fork();if\u00a0($pid\u00a0==\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die('could\u00a0not\u00a0fork');}\u00a0else\u00a0if\u00a0($pid)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0parent\u00a0*\/\u00a0\u00a0\u00a0\u00a0fclose($sockets[0]);\u00a0\u00a0\u00a0\u00a0fwrite($sockets[1],\u00a0\"child\u00a0PID:\u00a0$pid\\n\");\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($sockets[1]);\u00a0\u00a0\u00a0\u00a0fclose($sockets[1]);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\/*\u00a0child\u00a0*\/\u00a0\u00a0\u00a0\u00a0fclose($sockets[1]);\u00a0\u00a0\u00a0\u00a0fwrite($sockets[0],\u00a0\"message\u00a0from\u00a0child\\n\");\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($sockets[0]);\u00a0\u00a0\u00a0\u00a0fclose($sockets[0]);}?>             The above example will output something similar to:       child PID: 1378 message from child"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-client.php","title":"stream_socket_client","description":"stream_socket_client   (PHP 5)stream_socket_client \u2014 Open Internet or Unix domain socket connection          Description       resource stream_socket_client     ( string $remote_socket    [, int &$errno    [, string &$errstr    [, float $timeout = ini_get(\"default_socket_timeout\")    [, int $flags = STREAM_CLIENT_CONNECT    [, resource $context   ]]]]] )        Initiates a stream or datagram connection to the destination specified    by remote_socket.  The type of socket created    is determined by the transport specified using standard URL formatting:    transport:\/\/target.  For Internet Domain sockets    (AF_INET) such as TCP and UDP, the target portion    of the remote_socket parameter should consist of    a hostname or IP address followed by a colon and a port number.  For Unix    domain sockets, the target portion should point    to the socket file on the filesystem.      Note:          The stream will by default be opened in blocking mode.  You can     switch it to non-blocking mode by using     stream_set_blocking().                Parameters                    remote_socket                      Address to the socket to connect to.                                errno                      Will be set to the system level error number if connection fails.                                errstr                      Will be set to the system level error message if the connection fails.                                timeout                      Number of seconds until the connect() system call        should timeout.        Note:                    This parameter only applies when not making asynchronous          connection attempts.                         Note:                    To set a timeout for reading\/writing data over the socket, use the          stream_set_timeout(), as the          timeout only applies while making connecting          the socket.                                                 flags                      Bitmask field which may be set to any combination of connection flags.        Currently the select of connection flags is limited to        STREAM_CLIENT_CONNECT (default),        STREAM_CLIENT_ASYNC_CONNECT and        STREAM_CLIENT_PERSISTENT.                                context                      A valid context resource created with stream_context_create().                                     Return Values       On success a stream resource is returned which may    be used together with the other file functions (such as    fgets(), fgetss(),    fwrite(), fclose(), and    feof()), FALSE on failure.             Errors\/Exceptions       On failure the errno and    errstr arguments will be populated with the actual    system level error that occurred in the system-level    connect() call. If the value returned in    errno is 0 and the    function returned FALSE, it is an indication that the error    occurred before the connect() call. This is    most likely due to a problem initializing the socket. Note that    the errno and    errstr arguments will always be passed by    reference.               Examples            Example #1 stream_socket_client() example       <?php$fp\u00a0=\u00a0stream_socket_client(\"tcp:\/\/www.example.com:80\",\u00a0$errno,\u00a0$errstr,\u00a030);if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$errstr\u00a0($errno)<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"GET\u00a0\/\u00a0HTTP\/1.0\\r\\nHost:\u00a0www.example.com\\r\\nAccept:\u00a0*\/*\\r\\n\\r\\n\");\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($fp,\u00a01024);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0fclose($fp);}?>                     Example #2 Using UDP connection           Retrieving the day and time from the UDP service \"daytime\" (port 13)      on localhost.            <?php$fp\u00a0=\u00a0stream_socket_client(\"udp:\/\/127.0.0.1:13\",\u00a0$errno,\u00a0$errstr);if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"ERROR:\u00a0$errno\u00a0-\u00a0$errstr<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"\\n\");\u00a0\u00a0\u00a0\u00a0echo\u00a0fread($fp,\u00a026);\u00a0\u00a0\u00a0\u00a0fclose($fp);}?>                        Notes   Warning          UDP sockets will sometimes appear to have opened without an error,      even if the remote host is unreachable.  The error will only      become apparent when you read or write data to\/from the socket.      The reason for this is because UDP is a \"connectionless\" protocol,      which means that the operating system does not try to establish      a link for the socket until it actually needs to send or receive data.          Note: When specifying a numerical IPv6 address (e.g. fe80::1), you must enclose the IP in square brackets\u2014for example, tcp:\/\/[fe80::1]:80.   Note:          Depending on the environment, the Unix domain or the optional     connect timeout may not be available.  A list of available     transports can be retrieved using stream_get_transports().     See List of Supported Socket Transports for a list of built in transports.                See Also            stream_socket_server() - Create an Internet or Unix domain server socket     stream_set_blocking() - Set blocking\/non-blocking mode on a stream     stream_set_timeout() - Set timeout period on a stream     stream_select() - Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec     fgets() - Gets line from file pointer     fgetss() - Gets line from file pointer and strip HTML tags     fwrite() - Binary-safe file write     fclose() - Closes an open file pointer     feof() - Tests for end-of-file on a file pointer     cURL Functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-sendto.php","title":"stream_socket_sendto","description":"stream_socket_sendto   (PHP 5)stream_socket_sendto \u2014 Sends a message to a socket, whether it is connected or not         Description       int stream_socket_sendto     ( resource $socket    , string $data    [, int $flags = 0    [, string $address   ]] )        Sends the specified data through the    socket.              Parameters                    socket                      The socket to send data to.                                data                      The data to be sent.                                flags                      The value of flags can be any combination        of the following:                 possible values for flags                                          STREAM_OOB                         Process OOB (out-of-band) data.                                                                                    address                      The address specified when the socket stream was created will be used        unless an alternate address is specified in address.                      If specified, it must be in dotted quad (or [ipv6]) format.                                     Return Values       Returns a result code, as an integer.            Examples            Example #1 stream_socket_sendto() Example       <?php\/*\u00a0Open\u00a0a\u00a0socket\u00a0to\u00a0port\u00a01234\u00a0on\u00a0localhost\u00a0*\/$socket\u00a0=\u00a0stream_socket_client('tcp:\/\/127.0.0.1:1234');\/*\u00a0Send\u00a0ordinary\u00a0data\u00a0via\u00a0ordinary\u00a0channels.\u00a0*\/fwrite($socket,\u00a0\"Normal\u00a0data\u00a0transmit.\");\/*\u00a0Send\u00a0more\u00a0data\u00a0out\u00a0of\u00a0band.\u00a0*\/stream_socket_sendto($socket,\u00a0\"Out\u00a0of\u00a0Band\u00a0data.\",\u00a0STREAM_OOB);\/*\u00a0Close\u00a0it\u00a0up\u00a0*\/fclose($socket);?>                        See Also       stream_socket_recvfrom() - Receives data from a socket, connected or not    stream_socket_client() - Open Internet or Unix domain socket connection    stream_socket_server() - Create an Internet or Unix domain server socket"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-recvfrom.php","title":"stream_socket_recvfrom","description":"stream_socket_recvfrom   (PHP 5)stream_socket_recvfrom \u2014 Receives data from a socket, connected or not         Description       string stream_socket_recvfrom     ( resource $socket    , int $length    [, int $flags = 0    [, string &$address   ]] )        stream_socket_recvfrom() accepts    data from a remote socket up to length bytes.            Parameters                    socket                      The remote socket.                                length                      The number of bytes to receive from the socket.                                flags                      The value of flags can be any combination        of the following:                 Possible values for flags                                          STREAM_OOB                         Process OOB (out-of-band) data.                                               STREAM_PEEK                         Retrieve data from the socket, but do not consume the buffer.             Subsequent calls to fread() or             stream_socket_recvfrom() will see             the same data.                                                                                    address                      If address is provided it will be populated with        the address of the remote socket.                                     Return Values       Returns the read data, as a string            Examples            Example #1 stream_socket_recvfrom() example       <?php\/*\u00a0Open\u00a0a\u00a0server\u00a0socket\u00a0to\u00a0port\u00a01234\u00a0on\u00a0localhost\u00a0*\/$server\u00a0=\u00a0stream_socket_server('tcp:\/\/127.0.0.1:1234');\/*\u00a0Accept\u00a0a\u00a0connection\u00a0*\/$socket\u00a0=\u00a0stream_socket_accept($server);\/*\u00a0Grab\u00a0a\u00a0packet\u00a0(1500\u00a0is\u00a0a\u00a0typical\u00a0MTU\u00a0size)\u00a0of\u00a0OOB\u00a0data\u00a0*\/echo\u00a0\"Received\u00a0Out-Of-Band:\u00a0'\"\u00a0.\u00a0stream_socket_recvfrom($socket,\u00a01500,\u00a0STREAM_OOB)\u00a0.\u00a0\"'\\n\";\/*\u00a0Take\u00a0a\u00a0peek\u00a0at\u00a0the\u00a0normal\u00a0in-band\u00a0data,\u00a0but\u00a0don't\u00a0comsume\u00a0it.\u00a0*\/echo\u00a0\"Data:\u00a0'\"\u00a0.\u00a0stream_socket_recvfrom($socket,\u00a01500,\u00a0STREAM_PEEK)\u00a0.\u00a0\"'\\n\";\/*\u00a0Get\u00a0the\u00a0exact\u00a0same\u00a0packet\u00a0again,\u00a0but\u00a0remove\u00a0it\u00a0from\u00a0the\u00a0buffer\u00a0this\u00a0time.\u00a0*\/echo\u00a0\"Data:\u00a0'\"\u00a0.\u00a0stream_socket_recvfrom($socket,\u00a01500)\u00a0.\u00a0\"'\\n\";\/*\u00a0Close\u00a0it\u00a0up\u00a0*\/fclose($socket);fclose($server);?>                        Notes   Note:          If a message received is longer than the length     parameter, excess bytes may be discarded depending on the type of socket     the message is received from (such as UDP).          Note:          Calls to stream_socket_recvfrom() on socket-based     streams, after calls to buffer-based stream functions (like     fread() or stream_get_line()) read     data directly from the socket and bypass the stream buffer.                 See Also       stream_socket_sendto() - Sends a message to a socket, whether it is connected or not    stream_socket_client() - Open Internet or Unix domain socket connection    stream_socket_server() - Create an Internet or Unix domain server socket"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-shutdown.php","title":"stream_socket_shutdown","description":"stream_socket_shutdown   (PHP 5 >= 5.2.1)stream_socket_shutdown \u2014 Shutdown a full-duplex connection        Description       bool stream_socket_shutdown     ( resource $stream    , int $how    )        Shutdowns (partially or not) a full-duplex connection.            Parameters                    stream                      An open stream (opened with stream_socket_client(),        for example)                                how                      One of the following constants: STREAM_SHUT_RD        (disable further receptions), STREAM_SHUT_WR        (disable further transmissions) or        STREAM_SHUT_RDWR (disable further receptions and        transmissions).                                    Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 A stream_socket_shutdown() example       <?php$server\u00a0=\u00a0stream_socket_server('tcp:\/\/127.0.0.1:1337');$client\u00a0=\u00a0stream_socket_client('tcp:\/\/127.0.0.1:1337');var_dump(fputs($client,\u00a0\"hello\"));stream_socket_shutdown($client,\u00a0STREAM_SHUT_WR);var_dump(fputs($client,\u00a0\"hello\"));\u00a0\/\/\u00a0doesn't\u00a0work\u00a0now?>             The above example will output something similar to:       int(5)  Notice: fputs(): send of 5 bytes failed with errno=32 Broken pipe in test.php on line 9 int(0)                      See Also            fclose() - Closes an open file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-supports-lock.php","title":"stream_supports_lock","description":"stream_supports_lock   (PHP 5 >= 5.3.0)stream_supports_lock \u2014 Tells whether the stream supports locking.          Description       bool stream_supports_lock     ( resource $stream    )        Tells whether the stream supports locking through     flock().             Parameters                    stream                      The stream to check.                                     Return Values       Returns TRUE on success or FALSE on failure.             See Also            flock() - Portable advisory file locking"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-server.php","title":"stream_socket_server","description":"stream_socket_server   (PHP 5)stream_socket_server \u2014 Create an Internet or Unix domain server socket        Description       resource stream_socket_server     ( string $local_socket    [, int &$errno    [, string &$errstr    [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN    [, resource $context   ]]]] )        Creates a stream or datagram socket on the specified    local_socket.              This function only creates a socket, to begin accepting connections    use stream_socket_accept().            Parameters                    local_socket                      The type of socket created is determined by the transport specified        using standard URL formatting: transport:\/\/target.                      For Internet Domain sockets (AF_INET) such as TCP and UDP, the        target portion of the         remote_socket parameter should consist of a        hostname or IP address followed by a colon and a port number.  For        Unix domain sockets, the target portion should        point to the socket file on the filesystem.                      Depending on the environment, Unix domain sockets may not be available.        A list of available transports can be retrieved using        stream_get_transports(). See        List of Supported Socket Transports for a list of bulitin transports.                                errno                      If the optional errno and errstr        arguments are present they will be set to indicate the actual system        level error that occurred in the system-level socket(),        bind(), and listen() calls. If        the value returned in errno is         0 and the function returned FALSE, it is an        indication that the error occurred before the bind()        call. This is most likely due to a problem initializing the socket.         Note that the errno and        errstr arguments will always be passed by reference.                                errstr                      See errno description.                                flags                      A bitmask field which may be set to any combination of socket creation        flags.              Note:                  For UDP sockets, you must use STREAM_SERVER_BIND as         the flags parameter.                                        context                                                   Return Values       Returns the created stream, or FALSE on error.            Examples            Example #1 Using TCP server sockets       <?php$socket\u00a0=\u00a0stream_socket_server(\"tcp:\/\/0.0.0.0:8000\",\u00a0$errno,\u00a0$errstr);if\u00a0(!$socket)\u00a0{\u00a0\u00a0echo\u00a0\"$errstr\u00a0($errno)<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0while\u00a0($conn\u00a0=\u00a0stream_socket_accept($socket))\u00a0{\u00a0\u00a0\u00a0\u00a0fwrite($conn,\u00a0'The\u00a0local\u00a0time\u00a0is\u00a0'\u00a0.\u00a0date('n\/j\/Y\u00a0g:i\u00a0a')\u00a0.\u00a0\"\\n\");\u00a0\u00a0\u00a0\u00a0fclose($conn);\u00a0\u00a0}\u00a0\u00a0fclose($socket);}?>                      The example below shows how to act as a time server which can respond    to time queries as shown in an example on stream_socket_client().    Note:            Most systems require root access to create a server socket on a port      below 1024.                  Example #2 Using UDP server sockets       <?php$socket\u00a0=\u00a0stream_socket_server(\"udp:\/\/127.0.0.1:1113\",\u00a0$errno,\u00a0$errstr,\u00a0STREAM_SERVER_BIND);if\u00a0(!$socket)\u00a0{\u00a0\u00a0\u00a0\u00a0die(\"$errstr\u00a0($errno)\");}do\u00a0{\u00a0\u00a0\u00a0\u00a0$pkt\u00a0=\u00a0stream_socket_recvfrom($socket,\u00a01,\u00a00,\u00a0$peer);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$peer\\n\";\u00a0\u00a0\u00a0\u00a0stream_socket_sendto($socket,\u00a0date(\"D\u00a0M\u00a0j\u00a0H:i:s\u00a0Y\\r\\n\"),\u00a00,\u00a0$peer);}\u00a0while\u00a0($pkt\u00a0!==\u00a0false);?>                        Notes   Note: When specifying a numerical IPv6 address (e.g. fe80::1), you must enclose the IP in square brackets\u2014for example, tcp:\/\/[fe80::1]:80.         See Also       stream_socket_client() - Open Internet or Unix domain socket connection    stream_set_blocking() - Set blocking\/non-blocking mode on a stream    stream_set_timeout() - Set timeout period on a stream    fgets() - Gets line from file pointer    fgetss() - Gets line from file pointer and strip HTML tags    fwrite() - Binary-safe file write    fclose() - Closes an open file pointer    feof() - Tests for end-of-file on a file pointer    Curl extension"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-wrapper-unregister.php","title":"stream_wrapper_unregister","description":"stream_wrapper_unregister   (PHP 5 >= 5.1.0)stream_wrapper_unregister \u2014 Unregister a URL wrapper        Description       bool stream_wrapper_unregister     ( string $protocol    )        Allows you to disable an already defined stream wrapper. Once the wrapper    has been disabled you may override it with a user-defined wrapper using    stream_wrapper_register() or reenable it later on with    stream_wrapper_restore().           Parameters                    protocol                                                  Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-wrapper-restore.php","title":"stream_wrapper_restore","description":"stream_wrapper_restore   (PHP 5 >= 5.1.0)stream_wrapper_restore \u2014 Restores a previously unregistered built-in wrapper        Description       bool stream_wrapper_restore     ( string $protocol    )        Restores a built-in wrapper previously unregistered with    stream_wrapper_unregister().           Parameters                    protocol                                                  Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiongeturl.php","title":"swf_actiongeturl","description":"swf_actiongeturl   (PHP 4)swf_actiongeturl \u2014 Get a URL from a Shockwave Flash movie          Description       void swf_actiongeturl     ( string $url    , string $target    )        Gets the URL specified by the parameter url with    the given  target.            Parameters                    url                      The URL, as a string.                                target                      The target, as a string.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiongotoframe.php","title":"swf_actiongotoframe","description":"swf_actiongotoframe   (PHP 4)swf_actiongotoframe \u2014 Play a frame and then stop          Description       void swf_actiongotoframe     ( int $framenumber    )        The swf_actiongotoframe() function will go to    the frame specified by framenumber, play    it, and then stop.            Parameters                    framenumber                      The frame number.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiongotolabel.php","title":"swf_actiongotolabel","description":"swf_actiongotolabel   (PHP 4)swf_actiongotolabel \u2014 Display a frame with the specified label          Description       void swf_actiongotolabel     ( string $label    )        The swf_actiongotolabel() function displays    the frame with the label given by the    label parameter and then stops.            Parameters                    label                      The frame label.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionnextframe.php","title":"swf_actionnextframe","description":"swf_actionnextframe   (PHP 4)swf_actionnextframe \u2014 Go forward one frame         Description       void swf_actionnextframe     ( void    )        Go forward one frame.            Return Values       No value is returned.            See Also            swf_actionprevframe() - Go backwards one frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-wrapper-register.php","title":"stream_wrapper_register","description":"stream_wrapper_register   (PHP 4 >= 4.3.2, PHP 5)stream_wrapper_register \u2014 Register a URL wrapper implemented as a PHP class        Description       bool stream_wrapper_register     ( string $protocol    , string $classname    [, int $flags  = 0   ] )        Allows you to implement your own protocol handlers and streams for use    with all the other filesystem functions (such as fopen(),    fread() etc.).            Parameters                    protocol                      The wrapper name to be registered.                                classname                      The classname which implements the protocol.                                flags                      Should be set to STREAM_IS_URL if        protocol is a URL protocol. Default is 0, local        stream.                                     Return Values       Returns TRUE on success or FALSE on failure.          stream_wrapper_register() will return FALSE if the    protocol already has a handler.            Changelog                                 Version        Description                                    5.2.4                 Added the flags parameter.                                              Examples            Example #1 How to register a stream wrapper       <?php$existed\u00a0=\u00a0in_array(\"var\",\u00a0stream_get_wrappers());if\u00a0($existed)\u00a0{\u00a0\u00a0\u00a0\u00a0stream_wrapper_unregister(\"var\");}stream_wrapper_register(\"var\",\u00a0\"VariableStream\");$myvar\u00a0=\u00a0\"\";$fp\u00a0=\u00a0fopen(\"var:\/\/myvar\",\u00a0\"r+\");fwrite($fp,\u00a0\"line1\\n\");fwrite($fp,\u00a0\"line2\\n\");fwrite($fp,\u00a0\"line3\\n\");rewind($fp);while\u00a0(!feof($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($fp);}fclose($fp);var_dump($myvar);if\u00a0($existed)\u00a0{\u00a0\u00a0\u00a0\u00a0stream_wrapper_restore(\"var\");}?>             The above example will output:       line1 line2 line3 string(18) \"line1 line2 line3 \"                      See Also            The streamWrapper prototype class     Example class registered as stream wrapper     stream_wrapper_unregister() - Unregister a URL wrapper     stream_wrapper_restore() - Restores a previously unregistered built-in wrapper     stream_get_wrappers() - Retrieve list of registered streams"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionplay.php","title":"swf_actionplay","description":"swf_actionplay   (PHP 4)swf_actionplay \u2014 Start playing the flash movie from the current frame         Description       void swf_actionplay     ( void    )        Start playing the flash movie from the current frame.            Return Values       No value is returned.            See Also            swf_actionstop() - Stop playing the flash movie at the current frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionsettarget.php","title":"swf_actionsettarget","description":"swf_actionsettarget   (PHP 4)swf_actionsettarget \u2014 Set the context for actions          Description       void swf_actionsettarget     ( string $target    )        Sets the context for all actions. You can use this to control other flash    movies that are currently playing.            Parameters                    target                      The target, as a string.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionprevframe.php","title":"swf_actionprevframe","description":"swf_actionprevframe   (PHP 4)swf_actionprevframe \u2014 Go backwards one frame         Description       void swf_actionprevframe     ( void    )        Go backwards one frame.            Return Values       No value is returned.            See Also            swf_actionnextframe() - Go forward one frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionstop.php","title":"swf_actionstop","description":"swf_actionstop   (PHP 4)swf_actionstop \u2014 Stop playing the flash movie at the current frame         Description       void swf_actionstop     ( void    )        Stop playing the flash movie at the current frame.            Return Values       No value is returned.            See Also            swf_actionplay() - Start playing the flash movie from the current frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiontogglequality.php","title":"swf_actiontogglequality","description":"swf_actiontogglequality   (PHP 4)swf_actiontogglequality \u2014 Toggle between low and high quality          Description       void swf_actiontogglequality     ( void    )        Toggle the flash movie between high and low quality.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionwaitforframe.php","title":"swf_actionwaitforframe","description":"swf_actionwaitforframe   (PHP 4)swf_actionwaitforframe \u2014 Skip actions if a frame has not been loaded          Description       void swf_actionwaitforframe     ( int $framenumber    , int $skipcount    )        The swf_actionwaitforframe() function will    check to see if the frame, specified by the    framenumber parameter has been loaded, if    not it will skip the number of actions specified by the    skipcount parameter.  This can be useful    for \"Loading...\" type animations.            Parameters                    framenumber                      The frame number.                                skipcount                      The number of actions to skip.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-addcolor.php","title":"swf_addcolor","description":"swf_addcolor   (PHP 4)swf_addcolor \u2014 Set the global add color to the rgba value specified          Description       void swf_addcolor     ( float $r    , float $g    , float $b    , float $a    )        Sets the global add color to the specified color. This color is then    implicitly used by the swf_placeobject(),    swf_modifyobject() and     swf_addbuttonrecord() functions.          The color of the object will be add by the given values when the object is    written to the screen.            Parameters                    r                      Red value                                g                      Green value                                b                      Blue value                                a                      Alpha value                                   These parameters can be either positive or negative.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-addbuttonrecord.php","title":"swf_addbuttonrecord","description":"swf_addbuttonrecord   (PHP 4)swf_addbuttonrecord \u2014 Controls location, appearance and active area of the current button          Description       void swf_addbuttonrecord     ( int $states    , int $shapeid    , int $depth    )        Allow you to define the specifics of using a button.              Parameters                    states                      Defines what states the button can have, these can be any or all of        the following constants: BSHitTest,         BSDown, BSOver or        BSUp.                                   shapeid                      The second parameter, the shapeid is the look        of the button, this is usually the object id of the shape of the        button.                                 depth                      This parameter is the placement of the button in the current frame.                                     Return Values       No value is returned.            Examples            Example #1 swf_addbuttonrecord() example       <?phpswf_startButton($objid,\u00a0TYPE_MENUBUTTON);swf_addButtonRecord(BSDown|BSOver,\u00a0$buttonImageId,\u00a0340);swf_onCondition(MenuEnter);swf_actionGetUrl(\"http:\/\/www.example.com\",\u00a0\"_level1\");swf_onCondition(MenuExit);swf_actionGetUrl(\"\",\u00a0\"_level1\");swf_endButton();?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-closefile.php","title":"swf_closefile","description":"swf_closefile   (PHP 4)swf_closefile \u2014 Close the current Shockwave Flash file         Description       void swf_closefile     ([ int $return_file   ] )        Close a file that was opened by the    swf_openfile() function.            Parameters                    return_file                      If set then the contents of the SWF file are returned from the        function.                                     Return Values       No value is returned.            Examples            Example #1       Creating a simple flash file based on user input and outputting it      and saving it in a database            <?php\/\/\u00a0The\u00a0$text\u00a0variable\u00a0is\u00a0submitted\u00a0by\u00a0the\/\/\u00a0user\/\/\u00a0Global\u00a0variables\u00a0for\u00a0database\/\/\u00a0access\u00a0(used\u00a0in\u00a0the\u00a0swf_savedata()\u00a0function)$DBHOST\u00a0=\u00a0\"localhost\";$DBUSER\u00a0=\u00a0\"sterling\";$DBPASS\u00a0=\u00a0\"secret\";swf_openfile(\"php:\/\/stdout\",\u00a0256,\u00a0256,\u00a030,\u00a01,\u00a01,\u00a01);\u00a0\u00a0\u00a0\u00a0swf_definefont(10,\u00a0\"Ligon-Bold\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swf_fontsize(12);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swf_fontslant(10);\u00a0\u00a0\u00a0\u00a0swf_definetext(11,\u00a0$text,\u00a01);\u00a0\u00a0\u00a0\u00a0swf_pushmatrix();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swf_translate(-50,\u00a080,\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swf_placeobject(11,\u00a060);\u00a0\u00a0\u00a0\u00a0swf_popmatrix();\u00a0\u00a0\u00a0\u00a0swf_showframe();\u00a0\u00a0\u00a0\u00a0swf_startdoaction();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swf_actionstop();\u00a0\u00a0\u00a0\u00a0swf_enddoaction();$data\u00a0=\u00a0swf_closefile(1);$data\u00a0?\u00a0\u00a0swf_savedata($data)\u00a0:\u00a0\u00a0die(\"Error\u00a0could\u00a0not\u00a0save\u00a0SWF\u00a0file\");\/\/\u00a0void\u00a0swf_savedata(string\u00a0data)\/\/\u00a0Save\u00a0the\u00a0generated\u00a0file\u00a0a\u00a0database\/\/\u00a0for\u00a0later\u00a0retrievalfunction\u00a0swf_savedata($data){\u00a0\u00a0\u00a0\u00a0global\u00a0$DBHOST,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$DBUSER,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$DBPASS;\u00a0\u00a0\u00a0\u00a0$dbh\u00a0=\u00a0@mysql_connect($DBHOST,\u00a0$DBUSER,\u00a0$DBPASS);\u00a0\u00a0\u00a0\u00a0if\u00a0(!$dbh)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0die\u00a0(sprintf(\"Error\u00a0[%d]:\u00a0%s\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mysql_errno(),\u00a0mysql_error()));\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$stmt\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0swf_files\u00a0(file)\u00a0VALUES\u00a0('$data')\";\u00a0\u00a0\u00a0\u00a0$sth\u00a0=\u00a0@mysql_query($stmt,\u00a0$dbh);\u00a0\u00a0\u00a0\u00a0if\u00a0(!$sth)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0die\u00a0(sprintf(\"Error\u00a0[%d]:\u00a0%s\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mysql_errno(),\u00a0mysql_error()));\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0@mysql_free_result($sth);\u00a0\u00a0\u00a0\u00a0@mysql_close($dbh);}?>                        See Also            swf_openfile() - Open a new Shockwave Flash file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definebitmap.php","title":"swf_definebitmap","description":"swf_definebitmap   (PHP 4)swf_definebitmap \u2014 Define a bitmap          Description       void swf_definebitmap     ( int $objid    , string $image_name    )        The swf_definebitmap() function defines a    bitmap given an image.              Parameters                    objid                      An SWF object id.                                image_name                      A GIF, JPEG, RGB or FI image. The image will be converted into a Flash        JPEG or Flash color map format.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-defineline.php","title":"swf_defineline","description":"swf_defineline   (PHP 4)swf_defineline \u2014 Define a line          Description       void swf_defineline     ( int $objid    , float $x1    , float $y1    , float $x2    , float $y2    , float $width    )        Defines a line.            Parameters                    objid                      The object id.                                x1                      x-coordinate of start point.                                y1                      y-coordinate of start point.                                x2                      x-coordinate of end point.                                y2                      y-coordinate of end point.                                width                      The line width.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definepoly.php","title":"swf_definepoly","description":"swf_definepoly   (PHP 4)swf_definepoly \u2014 Define a polygon          Description       void swf_definepoly     ( int $objid    , array $coords    , int $npoints    , float $width    )        Defines a polygon given an array of x, y coordinates.            Parameters                    objid                      The object id.                                coords                      An array of x, y coordinates.                                npoints                      The number of overall points that are contained in the array given by        coords                                width                      The width of the polygon&#039;s border, if set to 0.0 the polygon is        filled.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definefont.php","title":"swf_definefont","description":"swf_definefont   (PHP 4)swf_definefont \u2014 Defines a font         Description       void swf_definefont     ( int $fontid    , string $fontname    )        The swf_definefont() function defines a font parameter    and gives it the specified id.  It then sets the font given by     fontname to the current font.            Parameters                    fontid                      The id to be given to the font.                                fontname                      The font so be set as current font.                                     Return Values       No value is returned.            See Also            swf_definetext() - Define a text string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definerect.php","title":"swf_definerect","description":"swf_definerect   (PHP 4)swf_definerect \u2014 Define a rectangle          Description       void swf_definerect     ( int $objid    , float $x1    , float $y1    , float $x2    , float $y2    , float $width    )        Defines a rectangle with an upper left hand coordinate and a lower right    hand coordinate.            Parameters                    objid                      The object id.                                x1                      x-coordinate of upper left point.                                y1                      y-coordinate of upper left point.                                x2                      x-coordinate of lower right point.                                y2                      y-coordinate of lower right point.                                width                      Width of the rectangles border, if the width is 0.0 then the rectangle        is filled.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definetext.php","title":"swf_definetext","description":"swf_definetext   (PHP 4)swf_definetext \u2014 Define a text string         Description       void swf_definetext     ( int $objid    , string $str    , int $docenter    )        Defines a text string using the current font and font size.            Parameters                    objid                      The object id.                                str                      The text, as a string.                                docenter                      The docenter is where the word is centered, if        docenter is 1, then the word is centered in x.                                     Return Values       No value is returned.            Examples            Example #1 Horizontal text example       <?php$Xposition\u00a0=\u00a050;$Yposition\u00a0=\u00a050;$Zposition\u00a0=\u00a00;$Obj_depth\u00a0=\u00a01;$char\u00a0=\u00a0'THIS\u00a0IS\u00a0THE\u00a0TEXT';swf_pushmatrix();swf_definefont\u00a0(swf_nextid(),\u00a0\"Mod\");swf_fontsize(10);$secondid\u00a0=\u00a0swf_nextid();swf_definetext($secondid,\u00a0$char,\u00a01);swf_translate($Xposition,\u00a0$Yposition,\u00a0Zposition);swf_placeobject($secondid,\u00a0$Obj_depth);swf_popmatrix();?>                        See Also            swf_definefont() - Defines a font"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-endbutton.php","title":"swf_endbutton","description":"swf_endbutton   (PHP 4)swf_endbutton \u2014 End the definition of the current button         Description       void swf_endbutton     ( void    )        The swf_endbutton() function ends the    definition of the current button.            Return Values       No value is returned.            See Also            swf_startbutton() - Start the definition of a button"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-enddoaction.php","title":"swf_enddoaction","description":"swf_enddoaction   (PHP 4)swf_enddoaction \u2014 End the current action         Description       void swf_enddoaction     ( void    )        Ends the current action started by the    swf_startdoaction() function.            Return Values       No value is returned.            See Also            swf_startdoaction() - Start a description of an action list for the current frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-endshape.php","title":"swf_endshape","description":"swf_endshape   (PHP 4)swf_endshape \u2014 Completes the definition of the current shape         Description       void swf_endshape     ( void    )        The swf_endshape() completes the definition of    the current shape.            Return Values       No value is returned.            See Also            swf_startshape() - Start a complex shape"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-endsymbol.php","title":"swf_endsymbol","description":"swf_endsymbol   (PHP 4)swf_endsymbol \u2014 End the definition of a symbol         Description       void swf_endsymbol     ( void    )        Ends the definition of a symbol that was started by the    swf_startsymbol() function.            Return Values       No value is returned.            See Also            swf_startsymbol() - Define a symbol"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-fontsize.php","title":"swf_fontsize","description":"swf_fontsize   (PHP 4)swf_fontsize \u2014 Change the font size          Description       void swf_fontsize     ( float $size    )        Changes the font size to the value given by the     size parameter.            Parameters                    size                      The font size, as an integer.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-fontslant.php","title":"swf_fontslant","description":"swf_fontslant   (PHP 4)swf_fontslant \u2014 Set the font slant          Description       void swf_fontslant     ( float $slant    )        Set the current font slant to the angle indicated by the    slant parameter.              Parameters                    slant                      Positive values create a forward slant, negative values create a        negative slant.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-fonttracking.php","title":"swf_fonttracking","description":"swf_fonttracking   (PHP 4)swf_fonttracking \u2014 Set the current font tracking          Description       void swf_fonttracking     ( float $tracking    )        Set the font tracking to the value specified by the    tracking parameter.  This function is used    to increase the spacing between letters and text, positive values    increase the space and negative values decrease the space between    letters.            Parameters                    tracking                      The font tracking.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-getbitmapinfo.php","title":"swf_getbitmapinfo","description":"swf_getbitmapinfo   (PHP 4)swf_getbitmapinfo \u2014 Get information about a bitmap          Description       array swf_getbitmapinfo     ( int $bitmapid    )        Returns information about a bitmap.              Parameters                    bitmapid                      The bitmap id.                                     Return Values       Returns an array with the following elements:                      \"size\" -  The size in bytes of the bitmap.                             \"width\" -  The width in pixels of the bitmap.                             \"height\" -  The height in pixels of the bitmap."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-getfontinfo.php","title":"swf_getfontinfo","description":"swf_getfontinfo   (PHP 4)swf_getfontinfo \u2014 Gets font information          Description       array swf_getfontinfo     ( void    )        Gets information about the font by giving the height in pixels of a    capital A and a lowercase x.            Return Values       Returns an associative array with the following parameters:                      Aheight -  The height in pixels of a capital A.                             xheight -  The height in pixels of a lowercase x."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-getframe.php","title":"swf_getframe","description":"swf_getframe   (PHP 4)swf_getframe \u2014 Get the frame number of the current frame         Description       int swf_getframe     ( void    )        The swf_getframe() function gets the number of    the current frame.            Return Values       Returns the current frame number, as an integer.            See Also            swf_setframe() - Switch to a specified frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-labelframe.php","title":"swf_labelframe","description":"swf_labelframe   (PHP 4)swf_labelframe \u2014 Label the current frame          Description       void swf_labelframe     ( string $name    )        Labels the current frame with the given name.            Parameters                    name                      The frame label.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-mulcolor.php","title":"swf_mulcolor","description":"swf_mulcolor   (PHP 4)swf_mulcolor \u2014 Sets the global multiply color to the rgba value specified          Description       void swf_mulcolor     ( float $r    , float $g    , float $b    , float $a    )        Sets the global multiply color to the given one. This color is then    implicitly used by the swf_placeobject(),    swf_modifyobject() and     swf_addbuttonrecord() functions.          The color of the object will be multiplied by the given color values when    the object is written to the screen.            Parameters                    r                      Red value                                g                      Green value                                b                      Blue value                                a                      Alpha value                                   These parameters can be either positive or negative.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-modifyobject.php","title":"swf_modifyobject","description":"swf_modifyobject   (PHP 4)swf_modifyobject \u2014 Modify an object          Description       void swf_modifyobject     ( int $depth    , int $how    )        Updates the position and\/or color of the object at the specified    depth.              Parameters                    depth                      The depth, as an integer.                                how                      Determines what is updated. how can either be        the constant MOD_MATRIX or         MOD_COLOR or it can be a combination of both.                      MOD_COLOR uses the current mulcolor (specified by        the function swf_mulcolor()) and addcolor        (specified by the function swf_addcolor()) to color        the object. MOD_MATRIX uses the current matrix to        position the object.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-lookat.php","title":"swf_lookat","description":"swf_lookat   (PHP 4)swf_lookat \u2014 Define a viewing transformation         Description       void swf_lookat     ( float $view_x    , float $view_y    , float $view_z    , float $reference_x    , float $reference_y    , float $reference_z    , float $twist    )        Defines a viewing transformation by giving the viewing position and the    coordinates of a reference point in the scene.            Parameters                    view_x                      x-coordinate for the viewing position                                view_y                      y-coordinate for the viewing position                                view_z                      z-coordinate for the viewing position                                reference_x                      x-coordinate for the reference point                                reference_y                      y-coordinate for the reference point                                reference_z                      z-coordinate for the reference point                                twist                      Controls the rotation along with viewer&#039;s z axis.                                     Return Values       No value is returned.            Examples            Example #1 A simple 3D-rotation around a text       <?phpheader('Content-type:\u00a0application\/x-shockwave-flash');swf_openfile(\"php:\/\/stdout\",\u00a0320,\u00a0200,\u00a025,\u00a01,\u00a01,\u00a01);swf_ortho(-100,\u00a0100,\u00a0-100,\u00a0100,\u00a0-100,\u00a0100);\u00a0\/\/\u00a0create\u00a03D\u00a0coordinatesswf_definefont(0,\u00a0\"Pix3\");swf_addcolor(0,\u00a00,\u00a00,\u00a01);swf_fontsize(10);swf_fonttracking(0.2);for\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0628;\u00a0$i\u00a0+=\u00a08)\u00a0{\u00a0\u00a0\u00a0\u00a0$j\u00a0=\u00a0$i\u00a0\/\u00a0100;\u00a0\u00a0\u00a0\u00a0swf_pushmatrix();\u00a0\u00a0\u00a0\u00a0swf_translate(0,\u00a00,\u00a00);\u00a0\u00a0\u00a0\u00a0swf_perspective(100,\u00a01,\u00a00,\u00a010);\u00a0\u00a0\u00a0\u00a0swf_lookat(sin($j)\u00a0*\u00a060,\u00a050,\u00a0cos($j)\u00a0*\u00a060,\u00a00,\u00a00,\u00a00,\u00a00);\u00a0\u00a0\u00a0\u00a0swf_definetext\u00a0(1,\u00a0'HotKey@',\u00a00);\u00a0\u00a0\u00a0\u00a0swf_translate(-50,0,0);\u00a0\u00a0\u00a0\u00a0swf_placeobject(1,10);\u00a0\u00a0\u00a0\u00a0swf_definetext(2,\u00a0'example.com',\u00a00);\u00a0\u00a0\u00a0\u00a0swf_translate(55,\u00a00,\u00a00);\u00a0\u00a0\u00a0\u00a0swf_placeobject(2,\u00a011);\u00a0\u00a0\u00a0\u00a0swf_showframe();\u00a0\u00a0\u00a0\u00a0swf_removeobject(10);\u00a0\u00a0\u00a0\u00a0swf_removeobject(11);\u00a0\u00a0\u00a0\u00a0swf_popmatrix();}swf_closefile();?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-nextid.php","title":"swf_nextid","description":"swf_nextid   (PHP 4)swf_nextid \u2014 Returns the next free object id          Description       int swf_nextid     ( void    )        The swf_nextid() function returns the next    available object id.            Return Values       Returns the id, as an integer."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-ortho2.php","title":"swf_ortho2","description":"swf_ortho2   (PHP 4)swf_ortho2 \u2014 Defines 2D orthographic mapping of user coordinates onto the current viewport         Description       void swf_ortho2     ( float $xmin    , float $xmax    , float $ymin    , float $ymax    )        Defines a two dimensional orthographic mapping of user coordinates onto    the current viewport, this defaults to one to one mapping of the area of    the Flash movie.          If a perspective transformation is desired,    swf_perspective() can be used.            Parameters                    xmin                                              xmax                                              ymin                                              ymax                                                   Return Values       No value is returned.            See Also            swf_ortho() - Defines an orthographic mapping of user coordinates onto the current viewport"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-perspective.php","title":"swf_perspective","description":"swf_perspective   (PHP 4)swf_perspective \u2014 Define a perspective projection transformation          Description       void swf_perspective     ( float $fovy    , float $aspect    , float $near    , float $far    )        Defines a perspective projection transformation.       Note:          Various distortion artifacts may appear when performing a     perspective projection, this is because Flash players only have     a two dimensional matrix.  Some are not to pretty.                Parameters                    fovy                      A field-of-view angle in the y direction.                                aspect                      The aspect ratio of the viewport that is being drawn onto.                                near                      The near clipping plane.                                far                      The far clipping plane.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-ortho.php","title":"swf_ortho","description":"swf_ortho   (PHP 4 >= 4.0.1)swf_ortho \u2014 Defines an orthographic mapping of user coordinates onto the current viewport         Description       void swf_ortho     ( float $xmin    , float $xmax    , float $ymin    , float $ymax    , float $zmin    , float $zmax    )        Defines an 3D orthographic mapping of user coordinates onto the current    viewport.            Parameters                    xmin                                              xmax                                              ymin                                              ymax                                              zmin                                              zmax                                                   Return Values       No value is returned.            See Also            swf_ortho2() - Defines 2D orthographic mapping of user coordinates onto the current viewport"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-oncondition.php","title":"swf_oncondition","description":"swf_oncondition   (PHP 4)swf_oncondition \u2014 Describe a transition used to trigger an action list          Description       void swf_oncondition     ( int $transition    )        The swf_oncondition() function describes a    transition that will trigger an action list.              Parameters                    transition                      There are several types of possible transitions, the following are for        buttons defined as TYPE_MENUBUTTON:                                      IdletoOverUp                                                 OverUptoIdle                                                 OverUptoOverDown                                                 OverDowntoOverUp                                                 IdletoOverDown                                                 OutDowntoIdle                                                 MenuEnter (IdletoOverUp|IdletoOverDown)                                                 MenuExit (OverUptoIdle|OverDowntoIdle)                                   For TYPE_PUSHBUTTON there are the following options:                                      IdletoOverUp                                                 OverUptoIdle                                                 OverUptoOverDown                                                 OverDowntoOverUp                                                 OverDowntoOutDown                                                 OutDowntoOverDown                                                 OutDowntoIdle                                                 ButtonEnter (IdletoOverUp|OutDowntoOverDown)                                                 ButtonExit  (OverUptoIdle|OverDowntoOutDown)                                                                Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-openfile.php","title":"swf_openfile","description":"swf_openfile   (PHP 4)swf_openfile \u2014 Open a new Shockwave Flash file         Description       void swf_openfile     ( string $filename    , float $width    , float $height    , float $framerate    , float $r    , float $g    , float $b    )        Opens a new file. This must be the first function you call, otherwise your    script will not work.            Parameters                    filename                      The path to the SWF file. If you want to send your output to the        screen, set this to php:\/\/stdout.                                width                      The movie width                                height                      The movie height                                framerate                      The frame rate.                                r                      Red value for the background.                                g                      Green value for the background.                                b                      Blue value for the background.                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    4.0.1                 Support for php:\/\/stdout was added.                                            See Also            swf_closefile() - Close the current Shockwave Flash file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-placeobject.php","title":"swf_placeobject","description":"swf_placeobject   (PHP 4)swf_placeobject \u2014 Place an object onto the screen          Description       void swf_placeobject     ( int $objid    , int $depth    )        Places the object in the current frame at a specified    depth.          This uses the current mulcolor (specified by    swf_mulcolor()) and the current addcolor (specified by    swf_addcolor()) to color the object and it uses the    current matrix to position the object.            Parameters                    objid                      The object id.                                depth                      Must be between 1 and 65535.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-polarview.php","title":"swf_polarview","description":"swf_polarview   (PHP 4)swf_polarview \u2014 Define the viewer&#039;s position with polar coordinates          Description       void swf_polarview     ( float $dist    , float $azimuth    , float $incidence    , float $twist    )        The swf_polarview() function defines the    viewer&#039;s position in polar coordinates.              Parameters                    dist                      The distance between the viewpoint to the world space origin.                                  azimuth                      Defines the azimuthal angle in the x,y coordinate plane, measured in        distance from the y axis.                                  incidence                      Defines the angle of incidence in the y,z plane, measured in distance        from the z axis.  The incidence angle is defined as the angle of the        viewport relative to the z axis.                                twist                      Specifies the amount that the viewpoint is to be rotated about the        line of sight using the right hand rule.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-posround.php","title":"swf_posround","description":"swf_posround   (PHP 4)swf_posround \u2014 Enables or Disables the rounding of the translation when objects are placed or moved          Description       void swf_posround     ( int $round    )        Enables or disables the rounding of the translation when objects are    placed or moved, there are times when text becomes more readable because    rounding has been enabled.              Parameters                    round                      Whether to enable rounding or not, if set to the value of 1, then        rounding is enabled, if set to 0 then rounding is disabled.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-popmatrix.php","title":"swf_popmatrix","description":"swf_popmatrix   (PHP 4)swf_popmatrix \u2014 Restore a previous transformation matrix         Description       void swf_popmatrix     ( void    )        Restores a previous transformation matrix.            Return Values       No value is returned.            See Also            swf_pushmatrix() - Push the current transformation matrix back onto the stack"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-pushmatrix.php","title":"swf_pushmatrix","description":"swf_pushmatrix   (PHP 4)swf_pushmatrix \u2014 Push the current transformation matrix back onto the stack         Description       void swf_pushmatrix     ( void    )        Pushes the current transformation matrix back onto the stack.            Return Values       No value is returned.            See Also            swf_popmatrix() - Restore a previous transformation matrix"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-removeobject.php","title":"swf_removeobject","description":"swf_removeobject   (PHP 4)swf_removeobject \u2014 Remove an object         Description       void swf_removeobject     ( int $depth    )        Removes the last object drawn at the depth specified by    depth.            Parameters                    depth                      The depth, as an integer.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-setfont.php","title":"swf_setfont","description":"swf_setfont   (PHP 4)swf_setfont \u2014 Change the current font          Description       void swf_setfont     ( int $fontid    )        The swf_setfont() sets the current font to the    value given by the fontid parameter.            Parameters                    fontid                      The font identifier.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-rotate.php","title":"swf_rotate","description":"swf_rotate   (PHP 4)swf_rotate \u2014 Rotate the current transformation          Description       void swf_rotate     ( float $angle    , string $axis    )        Rotates the current transformation by a given angle    around the given axis.              Parameters                    angle                      The rotation angle.                                axis                      The axis. Valid values axis are x (the x axis),         y (the y axis) or z (the z        axis).                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-scale.php","title":"swf_scale","description":"swf_scale   (PHP 4)swf_scale \u2014 Scale the current transformation          Description       void swf_scale     ( float $x    , float $y    , float $z    )        The swf_scale() scales curve coordinates by the given    value.            Parameters                    x                      x scale factor.                                y                      y scale factor.                                z                      z scale factor.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-setframe.php","title":"swf_setframe","description":"swf_setframe   (PHP 4)swf_setframe \u2014 Switch to a specified frame         Description       void swf_setframe     ( int $framenumber    )        Changes the active frame to the specified on.            Parameters                    framenumber                      The frame number to be set.                                     Return Values       No value is returned.            See Also            swf_getframe() - Get the frame number of the current frame"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapearc.php","title":"swf_shapearc","description":"swf_shapearc   (PHP 4)swf_shapearc \u2014 Draw a circular arc          Description       void swf_shapearc     ( float $x    , float $y    , float $r    , float $ang1    , float $ang2    )        Draws a circular arc.             Parameters                    x                      x-coordinate of the center.                                y                      y-coordinate of the center.                                r                      The arc radius.                                ang1                      The start angle.                                ang2                      The end angle.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefillbitmapclip.php","title":"swf_shapefillbitmapclip","description":"swf_shapefillbitmapclip   (PHP 4)swf_shapefillbitmapclip \u2014 Set current fill mode to clipped bitmap         Description       void swf_shapefillbitmapclip     ( int $bitmapid    )        Sets the fill to bitmap clipped, empty spaces will be filled by the    bitmap.            Parameters                    bitmapid                      The bitmap id.                                     Return Values       No value is returned.            See Also            swf_shapefillbitmaptile() - Set current fill mode to tiled bitmap"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapecurveto3.php","title":"swf_shapecurveto3","description":"swf_shapecurveto3   (PHP 4)swf_shapecurveto3 \u2014 Draw a cubic bezier curve         Description       void swf_shapecurveto3     ( float $x1    , float $y1    , float $x2    , float $y2    , float $x3    , float $y3    )        Draw a cubic bezier curve using the given coordinates.          The current position is then set to the    x3,y3 coordinate.            Parameters                    x1                      x-coordinate of the first off curve control point.                                y1                      y-coordinate of the first off curve control point.                                x2                      x-coordinate of the second off curve control point.                                y2                      y-coordinate of the second off curve control point.                                x3                      x-coordinate of the endpoint.                                y3                      y-coordinate of the endpoint.                                     Return Values       No value is returned.            See Also            swf_shapecurveto() - Draw a quadratic bezier curve between two points"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapecurveto.php","title":"swf_shapecurveto","description":"swf_shapecurveto   (PHP 4)swf_shapecurveto \u2014 Draw a quadratic bezier curve between two points         Description       void swf_shapecurveto     ( float $x1    , float $y1    , float $x2    , float $y2    )        Draws a quadratic bezier curve from the current location, though the    two given points.          The current position is then set to the point defined by the    x2 and y2 parameters.            Parameters                    x1                      x-coordinate of the first point.                                y1                      y-coordinate of the first point.                                x2                      x-coordinate of the second point.                                y2                      y-coordinate of the second point.                                     Return Values       No value is returned.            See Also            swf_shapecurveto3() - Draw a cubic bezier curve"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefillbitmaptile.php","title":"swf_shapefillbitmaptile","description":"swf_shapefillbitmaptile   (PHP 4)swf_shapefillbitmaptile \u2014 Set current fill mode to tiled bitmap         Description       void swf_shapefillbitmaptile     ( int $bitmapid    )        Sets the fill to bitmap tile, empty spaces will be filled by the    bitmap.            Parameters                    bitmapid                      The bitmap id.                                     Return Values       No value is returned.            See Also            swf_shapefillbitmapclip() - Set current fill mode to clipped bitmap"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefilloff.php","title":"swf_shapefilloff","description":"swf_shapefilloff   (PHP 4)swf_shapefilloff \u2014 Turns off filling          Description       void swf_shapefilloff     ( void    )        Turns off filling for the current shape.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapelinesolid.php","title":"swf_shapelinesolid","description":"swf_shapelinesolid   (PHP 4)swf_shapelinesolid \u2014 Set the current line style          Description       void swf_shapelinesolid     ( float $r    , float $g    , float $b    , float $a    , float $width    )        Sets the current line style to the given color and width.            Parameters                    r                      Red value                                g                      Green value                                b                      Blue value                                a                      Alpha value                                width                      The line width. If 0.0 is given then no lines are drawn.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapelineto.php","title":"swf_shapelineto","description":"swf_shapelineto   (PHP 4)swf_shapelineto \u2014 Draw a line          Description       void swf_shapelineto     ( float $x    , float $y    )        Draws a line to the x and y    coordinates. The current position is then set to that point.            Parameters                    x                      x-coordinate of the target.                                y                      y-coordinate of the target.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefillsolid.php","title":"swf_shapefillsolid","description":"swf_shapefillsolid   (PHP 4)swf_shapefillsolid \u2014 Set the current fill style to the specified color          Description       void swf_shapefillsolid     ( float $r    , float $g    , float $b    , float $a    )        Sets the current fill style to solid, and then sets the fill color to the    given color.            Parameters                    r                      Red value                                g                      Green value                                b                      Blue value                                a                      Alpha value                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapemoveto.php","title":"swf_shapemoveto","description":"swf_shapemoveto   (PHP 4)swf_shapemoveto \u2014 Move the current position          Description       void swf_shapemoveto     ( float $x    , float $y    )        Moves the current position to the given point.            Parameters                    x                      x-coordinate of the target.                                y                      y-coordinate of the target.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-showframe.php","title":"swf_showframe","description":"swf_showframe   (PHP 4)swf_showframe \u2014 Display the current frame          Description       void swf_showframe     ( void    )        Outputs the current frame.            Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startbutton.php","title":"swf_startbutton","description":"swf_startbutton   (PHP 4)swf_startbutton \u2014 Start the definition of a button         Description       void swf_startbutton     ( int $objid    , int $type    )        Starts the definition of a button.            Parameters                    objid                      The object id.                                type                      Can either be TYPE_MENUBUTTON or        TYPE_PUSHBUTTON.  The        TYPE_MENUBUTTON constant allows the focus to        travel from the button when the mouse is down,        TYPE_PUSHBUTTON does not allow the focus to        travel when the mouse is down.                                     Return Values       No value is returned.            See Also            swf_endbutton() - End the definition of the current button"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startshape.php","title":"swf_startshape","description":"swf_startshape   (PHP 4)swf_startshape \u2014 Start a complex shape         Description       void swf_startshape     ( int $objid    )        Starts a complex shape.            Parameters                    objid                      The object id.                                     Return Values       No value is returned.            See Also            swf_endshape() - Completes the definition of the current shape"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startdoaction.php","title":"swf_startdoaction","description":"swf_startdoaction   (PHP 4)swf_startdoaction \u2014 Start a description of an action list for the current frame         Description       void swf_startdoaction     ( void    )        Starts the description of an action list for the current frame.  This    must be called before actions are defined for the current frame.            Return Values       No value is returned.            See Also            swf_enddoaction() - End the current action"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startsymbol.php","title":"swf_startsymbol","description":"swf_startsymbol   (PHP 4)swf_startsymbol \u2014 Define a symbol         Description       void swf_startsymbol     ( int $objid    )        Defines an object id as a symbol.  Symbols are tiny flash movies that can    be played simultaneously.            Parameters                    objid                      The object id you want to define as a symbol.                                     Return Values       No value is returned.            See Also            swf_endsymbol() - End the definition of a symbol"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-textwidth.php","title":"swf_textwidth","description":"swf_textwidth   (PHP 4)swf_textwidth \u2014 Get the width of a string          Description       float swf_textwidth     ( string $str    )        Gives the width of the string in pixels, using the current font and font    size.            Parameters                    str                      The string.                                     Return Values       Returns the line width, as a float."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-translate.php","title":"swf_translate","description":"swf_translate   (PHP 4)swf_translate \u2014 Translate the current transformations          Description       void swf_translate     ( float $x    , float $y    , float $z    )        Translates the current transformation by the given values.            Parameters                    x                      x value.                                y                      y value.                                z                      z value.                                     Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-viewport.php","title":"swf_viewport","description":"swf_viewport   (PHP 4)swf_viewport \u2014 Select an area for future drawing          Description       void swf_viewport     ( float $xmin    , float $xmax    , float $ymin    , float $ymax    )        Selects an area for future drawing for xmin to    xmax and ymin to    ymax, if this function is not called the    area defaults to the size of the screen.            Parameters                    xmin                                              xmax                                              ymin                                              ymax                                                   Return Values       No value is returned."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-close.php","title":"sybase_close","description":"sybase_close   (PHP 4, PHP 5)sybase_close \u2014 Closes a Sybase connection          Description       bool sybase_close     ([ resource $link_identifier   ] )        sybase_close() closes the link to a Sybase    database that&#039;s associated with the specified link    link_identifier.          Note that this isn&#039;t usually necessary, as non-persistent    open links are automatically closed at the end of the script&#039;s    execution.          sybase_close() will not close persistent links    generated by sybase_pconnect().            Parameters                    link_identifier                      If the link identifier isn&#039;t specified, the last opened link is        assumed.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            sybase_connect() - Opens a Sybase server connection     sybase_pconnect() - Open persistent Sybase connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-connect.php","title":"sybase_connect","description":"sybase_connect   (PHP 4, PHP 5)sybase_connect \u2014 Opens a Sybase server connection          Description       resource sybase_connect     ([ string $servername    [, string $username    [, string $password    [, string $charset    [, string $appname    [, bool $new = false   ]]]]]] )        sybase_connect() establishes a connection to a    Sybase server.           In case a second call is made to    sybase_connect() with the same arguments, no    new link will be established, but instead, the link identifier of    the already opened link will be returned.          The link to the server will be closed as soon as the    execution of the script ends, unless it&#039;s closed earlier by    explicitly calling sybase_close().            Parameters                    servername                      The servername argument has to be a valid servername that is defined        in the &#039;interfaces&#039; file.                                username                      Sybase user name                                password                      Password associated with username.                                charset                      Specifies the charset for the connection                                appname                      Specifies an appname for the Sybase connection.        This allow you to make separate connections in the same script to the        same database. This may come handy when you have started a transaction        in your current connection, and you need to be able to do a separate        query which cannot be performed inside this transaction.                                new                      Whether to open a new connection or use the existing one.                                     Return Values       Returns a positive Sybase link identifier on success, or FALSE on    failure.            Changelog                                 Version        Description                                    5.3.0                 The new parameter was added.                               4.2.0                 The appname parameter was added.                               4.0.2                 The charset parameter was added.                                            Examples            Example #1 sybase_connect() example       <?php$link\u00a0=\u00a0sybase_connect('SYBASE',\u00a0'',\u00a0'')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Could\u00a0not\u00a0connect\u00a0!\");echo\u00a0\"Connected\u00a0successfully\";sybase_close($link);?>                        See Also            sybase_pconnect() - Open persistent Sybase connection     sybase_close() - Closes a Sybase connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-data-seek.php","title":"sybase_data_seek","description":"sybase_data_seek   (PHP 4, PHP 5)sybase_data_seek \u2014 Moves internal row pointer          Description       bool sybase_data_seek     ( resource $result_identifier    , int $row_number    )        sybase_data_seek() moves the internal row    pointer of the Sybase result associated with the specified result    identifier to pointer to the specified row number.  The next call    to sybase_fetch_row() would return that row.            Parameters                    result_identifier                                              row_number                                                   Return Values       Returns TRUE on success or FALSE on failure.            See Also            sybase_fetch_row() - Get a result row as an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-deadlock-retry-count.php","title":"sybase_deadlock_retry_count","description":"sybase_deadlock_retry_count   (PHP 4 >= 4.3.0, PHP 5)sybase_deadlock_retry_count \u2014 Sets the deadlock retry count          Description       void sybase_deadlock_retry_count     ( int $retry_count    )        Using sybase_deadlock_retry_count(), the number of retries    can be defined in cases of deadlocks. By default, every deadlock is retried    an infinite number of times or until the process is killed by Sybase, the    executing script is killed (for instance, by set_time_limit())    or the query succeeds.            Parameters                    retry_count                               Values for retry_count                                          -1            Retry forever (default)                                   0            Do not retry                                   n            Retry n times                                                                             Return Values       No value is returned.            Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-array.php","title":"sybase_fetch_array","description":"sybase_fetch_array   (PHP 4, PHP 5)sybase_fetch_array \u2014 Fetch row as array          Description       array sybase_fetch_array     ( resource $result    )        sybase_fetch_array() is an extended version of    sybase_fetch_row().  In addition to storing the    data in the numeric indices of the result array, it also stores    the data in associative indices, using the field names as keys.          An important thing to note is that using    sybase_fetch_array() is NOT significantly    slower than using sybase_fetch_row(), while it    provides a significant added value.            Parameters                    result                                                   Return Values       Returns an array that corresponds to the fetched row, or FALSE if there    are no more rows.      Note:          When selecting fields with identical names (for instance, in a join), the     associative indices will have a sequential number prepended. See the     example for details.                Examples            Example #1 Identical fieldnames       <?php$dbh\u00a0=\u00a0sybase_connect('SYBASE',\u00a0'',\u00a0'');$q\u00a0=\u00a0sybase_query('SELECT\u00a0*\u00a0FROM\u00a0p,\u00a0a\u00a0WHERE\u00a0p.person_id=\u00a0a.person_id');var_dump(sybase_fetch_array($q));sybase_close($dbh);?>                   The above example would produce the following output (assuming the two tables only      have each one column called \"person_id\"):            array(4) {   [0]=>   int(1)   [\"person_id\"]=>   int(1)   [1]=>   int(1)   [\"person_id1\"]=>   int(1) }                      See Also            sybase_fetch_row() - Get a result row as an enumerated array     sybase_fetch_assoc() - Fetch a result row as an associative array     sybase_fetch_object() - Fetch a row as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-field.php","title":"sybase_fetch_field","description":"sybase_fetch_field   (PHP 4, PHP 5)sybase_fetch_field \u2014 Get field information from a result          Description       object sybase_fetch_field     ( resource $result    [, int $field_offset = -1   ] )        sybase_fetch_field() can be used in order to    obtain information about fields in a certain query result.             Parameters                    result                                              field_offset                      If the field offset isn&#039;t specified, the next field that wasn&#039;t yet        retrieved by sybase_fetch_field() is retrieved.                                     Return Values       Returns an object containing field information.          The properties of the object are:                     name - column name.  if the column is a result of a function, this      property is set to computed#N, where #N is a serial number.                        column_source - the table from which the column was taken                        max_length - maximum length of the column                        numeric - 1 if the column is numeric                        type - datatype of the column                     See Also            sybase_field_seek() - Sets field offset"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-object.php","title":"sybase_fetch_object","description":"sybase_fetch_object   (PHP 4, PHP 5)sybase_fetch_object \u2014 Fetch a row as an object          Description       object sybase_fetch_object     ( resource $result    [, mixed $object   ] )        sybase_fetch_object() is similar to    sybase_fetch_assoc(), with one difference - an object    is returned, instead of an array.          Speed-wise, the function is identical to    sybase_fetch_array(), and almost as quick as    sybase_fetch_row() (the difference is insignificant).            Parameters                    result                                              object                      Use the second object to specify the type of object        you want to return. If this parameter is omitted, the object will be of        type stdClass.                                     Return Values       Returns an object with properties that correspond to the fetched row, or    FALSE if there are no more rows.            Changelog                                 Version        Description                                    4.3.0                 This function will no longer return numeric object members.         Old behaviour:          object(stdclass)(3) {   [0]=>   string(3) \"foo\"   [\"foo\"]=>   string(3) \"foo\"   [1]=>   string(3) \"bar\"   [\"bar\"]=>   string(3) \"bar\" }                   New behaviour:          object(stdclass)(3) {   [\"foo\"]=>   string(3) \"foo\"   [\"bar\"]=>   string(3) \"bar\" }                                                               Examples            Example #1 sybase_fetch_object() return as Foo       <?php\u00a0\u00a0\u00a0\u00a0class\u00a0Foo\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var\u00a0$foo,\u00a0$bar,\u00a0$baz;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/\/\u00a0{...]\u00a0\u00a0\u00a0\u00a0$qrh=\u00a0sybase_query('SELECT\u00a0foo,\u00a0bar,\u00a0baz\u00a0FROM\u00a0example');\u00a0\u00a0\u00a0\u00a0$foo=\u00a0sybase_fetch_object($qrh,\u00a0'Foo');\u00a0\u00a0\u00a0\u00a0$bar=\u00a0sybase_fetch_object($qrh,\u00a0new\u00a0Foo());\u00a0\u00a0\u00a0\u00a0\/\/\u00a0{...]?>                        See Also            sybase_fetch_array() - Fetch row as array     sybase_fetch_row() - Get a result row as an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-row.php","title":"sybase_fetch_row","description":"sybase_fetch_row   (PHP 4, PHP 5)sybase_fetch_row \u2014 Get a result row as an enumerated array          Description       array sybase_fetch_row     ( resource $result    )        sybase_fetch_row() fetches one row of data    from the result associated with the specified result identifier.          Subsequent call to sybase_fetch_row() would    return the next row in the result set, or FALSE if there are no    more rows.            Parameters                    result                                                   Return Values       Returns an array that corresponds to the fetched row, or FALSE if there    are no more rows. Each result column is stored in an array offset,    starting at offset 0.          Data types                      PHP       Sybase                               string       VARCHAR, TEXT, CHAR, IMAGE, BINARY, VARBINARY, DATETIME                    int       NUMERIC (w\/o precision), DECIMAL (w\/o precision), INT, BIT, TINYINT, SMALLINT                    float       NUMERIC (w\/ precision), DECIMAL (w\/ precision), REAL, FLOAT, MONEY                    NULL       NULL                             See Also            sybase_fetch_array() - Fetch row as array     sybase_fetch_assoc() - Fetch a result row as an associative array     sybase_fetch_object() - Fetch a row as an object     sybase_data_seek() - Moves internal row pointer     sybase_result() - Get result data"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-affected-rows.php","title":"sybase_affected_rows","description":"sybase_affected_rows   (PHP 4, PHP 5)sybase_affected_rows \u2014 Gets number of affected rows in last query           Description       int sybase_affected_rows     ([ resource $link_identifier   ] )        sybase_affected_rows() returns the number of    rows affected by the last INSERT, UPDATE or DELETE query on the    server associated with the specified link identifier.            This command is not effective for SELECT statements, only on    statements which modify records. To retrieve the number of rows    returned from a SELECT, use sybase_num_rows().            Parameters                    link_identifier                      If the link identifier isn&#039;t specified, the last opened link is assumed.                                     Return Values       Returns the number of affected rows, as an integer.            Examples            Example #1 Delete-Query       <?php\/*\u00a0connect\u00a0to\u00a0database\u00a0*\/sybase_connect('SYBASE',\u00a0'',\u00a0'')\u00a0ordie(\"Could\u00a0not\u00a0connect\");sybase_select_db(\"db\");sybase_query(\"DELETE\u00a0FROM\u00a0sometable\u00a0WHERE\u00a0id\u00a0<\u00a010\");printf(\"Records\u00a0deleted:\u00a0%d\\n\",\u00a0sybase_affected_rows());?>             The above example will output:       Records deleted: 10                      See Also            sybase_num_rows() - Get number of rows in a result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-assoc.php","title":"sybase_fetch_assoc","description":"sybase_fetch_assoc   (PHP 4 >= 4.3.0, PHP 5)sybase_fetch_assoc \u2014 Fetch a result row as an associative array          Description       array sybase_fetch_assoc     ( resource $result    )        sybase_fetch_assoc() is a version of    sybase_fetch_row() that uses column names    instead of integers for indices in the result array. Columns from    different tables with the same names are returned as    name, name1, name2, ..., nameN.          An important thing to note is that using    sybase_fetch_assoc() is NOT significantly    slower than using sybase_fetch_row(), while it    provides a significant added value.            Parameters                    result                                                   Return Values       Returns an array that corresponds to the fetched row, or FALSE if there    are no more rows.            Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library.          See Also            sybase_fetch_row() - Get a result row as an enumerated array     sybase_fetch_array() - Fetch row as array     sybase_fetch_object() - Fetch a row as an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-field-seek.php","title":"sybase_field_seek","description":"sybase_field_seek   (PHP 4, PHP 5)sybase_field_seek \u2014 Sets field offset          Description       bool sybase_field_seek     ( resource $result    , int $field_offset    )        Seeks to the specified field offset.  If the next call to    sybase_fetch_field() won&#039;t include a field    offset, this field would be returned.            Parameters                    result                                              field_offset                                                   Return Values       Returns TRUE on success or FALSE on failure.            See Also            sybase_fetch_field() - Get field information from a result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-free-result.php","title":"sybase_free_result","description":"sybase_free_result   (PHP 4, PHP 5)sybase_free_result \u2014 Frees result memory          Description       bool sybase_free_result     ( resource $result    )        sybase_free_result() only needs to be called    if you are worried about using too much memory while your script    is running. All result memory will automatically be freed when    the script ends. You may call sybase_free_result()    with the result identifier as an argument and the associated    result memory will be freed.            Parameters                    result                                                   Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-client-severity.php","title":"sybase_min_client_severity","description":"sybase_min_client_severity   (PHP 4, PHP 5)sybase_min_client_severity \u2014 Sets minimum client severity          Description       void sybase_min_client_severity     ( int $severity    )        sybase_min_client_severity() sets the minimum    client severity level.            Parameters                    severity                                                   Return Values       No value is returned.            Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library.          See Also            sybase_min_server_severity() - Sets minimum server severity"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-error-severity.php","title":"sybase_min_error_severity","description":"sybase_min_error_severity   (PHP 4, PHP 5)sybase_min_error_severity \u2014 Sets minimum error severity          Description       void sybase_min_error_severity     ( int $severity    )        sybase_min_error_severity() sets the minimum    error severity level.            Parameters                    severity                                                   Return Values       No value is returned.            Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library.          See Also            sybase_min_message_severity() - Sets minimum message severity"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-message-severity.php","title":"sybase_min_message_severity","description":"sybase_min_message_severity   (PHP 4, PHP 5)sybase_min_message_severity \u2014 Sets minimum message severity          Description       void sybase_min_message_severity     ( int $severity    )        sybase_min_message_severity() sets the minimum    message severity level.            Parameters                    severity                                                   Return Values       No value is returned.            Notes   Note: This function is only available when using the DB library interface to Sybase, and not with the CT library.         See Also            sybase_min_error_severity() - Sets minimum error severity"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-get-last-message.php","title":"sybase_get_last_message","description":"sybase_get_last_message   (PHP 4, PHP 5)sybase_get_last_message \u2014 Returns the last message from the server          Description       string sybase_get_last_message     ( void    )        sybase_get_last_message() returns the last    message reported by the server.            Return Values       Returns the message as a string.            See Also            sybase_min_message_severity() - Sets minimum message severity"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-server-severity.php","title":"sybase_min_server_severity","description":"sybase_min_server_severity   (PHP 4, PHP 5)sybase_min_server_severity \u2014 Sets minimum server severity          Description       void sybase_min_server_severity     ( int $severity    )        sybase_min_server_severity() sets the minimum    server severity level.            Parameters                    severity                                                   Return Values       No value is returned.            Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library.          See Also            sybase_min_client_severity() - Sets minimum client severity"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-num-fields.php","title":"sybase_num_fields","description":"sybase_num_fields   (PHP 4, PHP 5)sybase_num_fields \u2014 Gets the number of fields in a result set          Description       int sybase_num_fields     ( resource $result    )        sybase_num_fields() returns the number of fields in a    result set.            Parameters                    result                                                   Return Values       Returns the number of fields as an integer.            See Also            sybase_query() - Sends a Sybase query     sybase_fetch_field() - Get field information from a result     sybase_num_rows() - Get number of rows in a result set"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-pconnect.php","title":"sybase_pconnect","description":"sybase_pconnect   (PHP 4, PHP 5)sybase_pconnect \u2014 Open persistent Sybase connection          Description       resource sybase_pconnect     ([ string $servername    [, string $username    [, string $password    [, string $charset    [, string $appname   ]]]]] )        sybase_pconnect() acts very much like    sybase_connect() with two major differences.          First, when connecting, the function would first try to find a    (persistent) link that&#039;s already open with the same host,    username and password.  If one is found, an identifier for it    will be returned instead of opening a new connection.          Second, the connection to the SQL server will not be closed when    the execution of the script ends.  Instead, the link will remain    open for future use (sybase_close() will not    close links established by sybase_pconnect()).          This type of links is therefore called &#039;persistent&#039;.            Parameters                    servername                      The servername argument has to be a valid servername that is defined        in the &#039;interfaces&#039; file.                                username                      Sybase user name                                password                      Password associated with username.                                charset                      Specifies the charset for the connection                                appname                      Specifies an appname for the Sybase connection.        This allow you to make separate connections in the same script to the        same database. This may come handy when you have started a transaction        in your current connection, and you need to be able to do a separate        query which cannot be performed inside this transaction.                                     Return Values       Returns a positive Sybase persistent link identifier on success, or    FALSE on error.            Changelog                                 Version        Description                                    4.2.0                 The appname parameter was added.                               4.0.2                 The charset parameter was added.                                            See Also            sybase_connect() - Opens a Sybase server connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-num-rows.php","title":"sybase_num_rows","description":"sybase_num_rows   (PHP 4, PHP 5)sybase_num_rows \u2014 Get number of rows in a result set          Description       int sybase_num_rows     ( resource $result    )        sybase_num_rows() returns the number of rows in a    result set.            Parameters                    result                                                   Return Values       Returns the number of rows as an integer.            See Also            sybase_num_fields() - Gets the number of fields in a result set     sybase_query() - Sends a Sybase query     sybase_fetch_row() - Get a result row as an enumerated array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-query.php","title":"sybase_query","description":"sybase_query   (PHP 4, PHP 5)sybase_query \u2014 Sends a Sybase query          Description       mixed sybase_query     ( string $query    [, resource $link_identifier   ] )        sybase_query() sends a query to the currently    active database on the server that&#039;s associated with the specified    link identifier.            Parameters                    query                                              link_identifier                      If the link identifier isn&#039;t specified, the last opened link is        assumed. If no link is open, the function tries to establish a link as        if sybase_connect() was called, and use it.                                     Return Values       Returns a positive Sybase result identifier on success, FALSE on error,    or TRUE if the query was successful but didn&#039;t return any columns.            See Also            sybase_select_db() - Selects a Sybase database     sybase_connect() - Opens a Sybase server connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-result.php","title":"sybase_result","description":"sybase_result   (PHP 4, PHP 5)sybase_result \u2014 Get result data          Description       string sybase_result     ( resource $result    , int $row    , mixed $field    )        Returns the contents of the cell at the row and offset in    the specified Sybase result set.          When working on large result sets, you should consider using one    of the functions that fetch an entire row (specified below).  As    these functions return the contents of multiple cells in one    function call, they&#039;re MUCH quicker than sybase_result().  Also,    note that specifying a numeric offset for the field argument is    much quicker than specifying a fieldname or tablename.fieldname    argument.          Recommended high-performance alternatives:    sybase_fetch_row(),    sybase_fetch_array() and    sybase_fetch_object().            Parameters                    result                                              row                                              field                      The field argument can be the field&#039;s offset, or the field&#039;s name, or        the field&#039;s table dot field&#039;s name (tablename.fieldname).  If the        column name has been aliased (&#039;select foo as bar from...&#039;), use the        alias instead of the column name.                                     Return Values       sybase_result() returns the contents of one cell from a    Sybase result set."},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-select-db.php","title":"sybase_select_db","description":"sybase_select_db   (PHP 4, PHP 5)sybase_select_db \u2014 Selects a Sybase database          Description       bool sybase_select_db     ( string $database_name    [, resource $link_identifier   ] )        sybase_select_db() sets the current active    database on the server that&#039;s associated with the specified link    identifier.            Every subsequent call to sybase_query() will be    made on the active database.            Parameters                    database_name                                              link_identifier                      If no link identifier is specified, the last opened link is assumed.        If no link is open, the function will try to establish a link as if        sybase_connect() was called, and use it.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            sybase_connect() - Opens a Sybase server connection     sybase_pconnect() - Open persistent Sybase connection     sybase_query() - Sends a Sybase query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-unbuffered-query.php","title":"sybase_unbuffered_query","description":"sybase_unbuffered_query   (PHP 4 >= 4.3.0, PHP 5)sybase_unbuffered_query \u2014 Send a Sybase query and do not block          Description       resource sybase_unbuffered_query     ( string $query    , resource $link_identifier    [, bool $store_result   ] )        sybase_unbuffered_query() sends a query to the    currently active database on the server that&#039;s associated with the specified    link identifier.  If the link identifier isn&#039;t specified, the last    opened link is assumed.  If no link is open, the function tries to    establish a link as if sybase_connect() was    called, and use it.          Unlike sybase_query(),    sybase_unbuffered_query() reads only the first    row of the result set. sybase_fetch_array() and similar    function read more rows as needed.  sybase_data_seek()    reads up to the target row.  The behavior may produce better performance    for large result sets.          sybase_num_rows() will only return the correct number    of rows if all result sets have been read. To Sybase, the number of rows    is not known and is therefore computed by the client implementation.      Note:          If you don&#039;t read all of the resultsets prior to executing the next query,     PHP will raise a warning and cancel all of the pending results. To get rid of     this, use sybase_free_result() which will cancel pending     results of an unbuffered query.                Parameters                    query                                              link_identifier                                              store_result                      The optional store_result can be FALSE to        indicate the resultsets shouldn&#039;t be fetched into memory, thus        minimizing memory usage which is particularly interesting with very        large resultsets.                                     Return Values       Returns a positive Sybase result identifier on success, or FALSE on    error.            Examples            Example #1 sybase_unbuffered_query() example       <?php$dbh\u00a0=\u00a0sybase_connect('SYBASE',\u00a0'',\u00a0'');$q\u00a0=\u00a0sybase_unbuffered_query('select\u00a0firstname,\u00a0lastname\u00a0from\u00a0huge_table',\u00a0$dbh,\u00a0false);sybase_data_seek($q,\u00a010000);$i\u00a0=\u00a00;while\u00a0($row\u00a0=\u00a0sybase_fetch_row($q))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$row[0],\u00a0'\u00a0',\u00a0$row[1],\u00a0'<br\u00a0\/>';\u00a0\u00a0\u00a0\u00a0if\u00a0($i++\u00a0>\u00a040000)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0}}sybase_free_result($q);sybase_close($dbh);?>                        Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library.          See Also            sybase_query() - Sends a Sybase query"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-set-message-handler.php","title":"sybase_set_message_handler","description":"sybase_set_message_handler   (PHP 4 >= 4.3.0, PHP 5)sybase_set_message_handler \u2014 Sets the handler called when a server message is raised          Description       bool sybase_set_message_handler     ( callback $handler    [, resource $link_identifier   ] )        sybase_set_message_handler() sets a user function to    handle messages generated by the server. You may specify the name of a    global function, or use an array to specify an object reference and a    method name.            Parameters                    handler                      The handler expects five arguments in the following order: message        number, severity, state, line number and description.  The first four        are integers. The last is a string. If the function returns FALSE,        PHP generates an ordinary error message.                                link_identifier                      If the link identifier isn&#039;t specified, the last opened link is assumed.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    4.3.5                 The link_identifier parameter was added.                                            Examples            Example #1 sybase_set_message_handler() callback function       <?php\u00a0\u00a0\u00a0\u00a0function\u00a0msg_handler($msgnumber,\u00a0$severity,\u00a0$state,\u00a0$line,\u00a0$text)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($msgnumber,\u00a0$severity,\u00a0$state,\u00a0$line,\u00a0$text);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0sybase_set_message_handler('msg_handler');?>                     Example #2 sybase_set_message_handler() callback to a class       <?php\u00a0\u00a0\u00a0\u00a0class\u00a0Sybase\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function\u00a0handler($msgnumber,\u00a0$severity,\u00a0$state,\u00a0$line,\u00a0$text)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($msgnumber,\u00a0$severity,\u00a0$state,\u00a0$line,\u00a0$text);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$sybase=\u00a0new\u00a0Sybase();\u00a0\u00a0\u00a0\u00a0sybase_set_message_handler(array($sybase,\u00a0'handler'));?>                     Example #3 sybase_set_message_handler() unhandled messages       <?php\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Return\u00a0FALSE\u00a0from\u00a0this\u00a0function\u00a0to\u00a0indicate\u00a0you\u00a0can't\u00a0handle\u00a0\u00a0\u00a0\u00a0\/\/\u00a0this.\u00a0The\u00a0error\u00a0is\u00a0printed\u00a0out\u00a0as\u00a0a\u00a0warning,\u00a0the\u00a0way\u00a0you're\u00a0used\u00a0\u00a0\u00a0\u00a0\/\/\u00a0to\u00a0it\u00a0if\u00a0there\u00a0is\u00a0no\u00a0handler\u00a0installed.\u00a0\u00a0\u00a0\u00a0function\u00a0msg_handler($msgnumber,\u00a0$severity,\u00a0$state,\u00a0$line,\u00a0$text)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(257\u00a0==\u00a0$msgnumber)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($msgnumber,\u00a0$severity,\u00a0$state,\u00a0$line,\u00a0$text);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0sybase_set_message_handler('msg_handler');?>                        Notes   Note: This function is only available when using the CT library interface to Sybase, and not with the DB library."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-autocommit.php","title":"odbc_autocommit","description":"odbc_autocommit   (PHP 4, PHP 5)odbc_autocommit \u2014 Toggle autocommit behaviour        Description       mixed odbc_autocommit     ( resource $connection_id    [, bool $OnOff = false   ] )        Toggles autocommit behaviour.          By default, auto-commit is on for a connection.  Disabling    auto-commit is equivalent with starting a transaction.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         OnOff                      If OnOff is TRUE, auto-commit is enabled, if        it is FALSE auto-commit is disabled.                                    Return Values       Without the OnOff parameter, this function returns    auto-commit status for connection_id. Non-zero is    returned if auto-commit is on, 0 if it is off, or FALSE if an error    occurs.          If OnOff is set, this function returns TRUE on    success and FALSE on failure.           See Also            odbc_commit() - Commit an ODBC transaction     odbc_rollback() - Rollback a transaction"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-binmode.php","title":"odbc_binmode","description":"odbc_binmode   (PHP 4, PHP 5)odbc_binmode \u2014 Handling of binary column data        Description       bool odbc_binmode     ( resource $result_id    , int $mode    )        Enables handling of binary column data. ODBC SQL types affected are    BINARY, VARBINARY, and    LONGVARBINARY.          When binary SQL data is converted to character C data, each byte    (8 bits) of source data is represented as two ASCII characters.    These characters are the ASCII character representation of the    number in its hexadecimal form. For example, a binary    00000001 is converted to    \"01\" and a binary 11111111    is converted to \"FF\".         LONGVARBINARY handling                          binmode        longreadlen        result                                    ODBC_BINMODE_PASSTHRU        0        passthru                       ODBC_BINMODE_RETURN        0        passthru                       ODBC_BINMODE_CONVERT        0        passthru                       ODBC_BINMODE_PASSTHRU        0        passthru                       ODBC_BINMODE_PASSTHRU        >0        passthru                       ODBC_BINMODE_RETURN        >0        return as is                       ODBC_BINMODE_CONVERT        >0        return as char                                  If odbc_fetch_into() is used, passthru means that an    empty string is returned for these columns.           Parameters                    result_id                      The result identifier.                      If result_id is 0, the        settings apply as default for new results.        Note:                    Default for longreadlen is 4096 and          mode defaults to          ODBC_BINMODE_RETURN. Handling of binary long          columns is also affected by odbc_longreadlen().                                                 mode                      Possible values for mode are:                                      ODBC_BINMODE_PASSTHRU: Passthru BINARY data                                                 ODBC_BINMODE_RETURN: Return as is                                                 ODBC_BINMODE_CONVERT: Convert to char and return                                                               Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-close-all.php","title":"odbc_close_all","description":"odbc_close_all   (PHP 4, PHP 5)odbc_close_all \u2014 Close all ODBC connections        Description       void odbc_close_all     ( void    )        odbc_close_all() will close down all    connections to database server(s).             Parameters   This function has no parameters.         Return Values       No value is returned.           Notes   Note:          This function will fail if there are open transactions on a connection.     This connection will remain open in this case."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-close.php","title":"odbc_close","description":"odbc_close   (PHP 4, PHP 5)odbc_close \u2014 Close an ODBC connection        Description       void odbc_close     ( resource $connection_id    )        Closes down the connection to the database server.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                             Return Values       No value is returned.           Notes   Note:          This function will fail if there are open transactions on this     connection. The connection will remain open in this case."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-columnprivileges.php","title":"odbc_columnprivileges","description":"odbc_columnprivileges   (PHP 4, PHP 5)odbc_columnprivileges \u2014 Lists columns and associated privileges for the given table        Description       resource odbc_columnprivileges     ( resource $connection_id    , string $qualifier    , string $owner    , string $table_name    , string $column_name    )        Lists columns and associated privileges for the given table.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                owner                      The owner.                                table_name                      The table name.                                column_name                      The column_name argument accepts search        patterns (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a        single character).                                   The owner, table_name, and    column_name accept search patterns (&#039;%&#039; to match    zero or more characters and &#039;_&#039; to match a single character).           Return Values       Returns an ODBC result identifier or FALSE on failure.    This result identifier can be used to fetch a list of columns and    associated privileges.          The result set has the following columns:         TABLE_QUALIFIER     TABLE_OWNER     TABLE_NAME     GRANTOR     GRANTEE     PRIVILEGE     IS_GRANTABLE              The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and    TABLE_NAME."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-commit.php","title":"odbc_commit","description":"odbc_commit   (PHP 4, PHP 5)odbc_commit \u2014 Commit an ODBC transaction        Description       bool odbc_commit     ( resource $connection_id    )        Commits all pending transactions on the connection.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                             Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-columns.php","title":"odbc_columns","description":"odbc_columns   (PHP 4, PHP 5)odbc_columns \u2014 Lists the column names in specified tables        Description       resource odbc_columns     ( resource $connection_id    [, string $qualifier    [, string $schema    [, string $table_name    [, string $column_name   ]]]] )        Lists all columns in the requested range.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                schema                      The owner.                                table_name                      The table name.                                column_name                      The column name.                                   The schema, table_name, and    column_name accept search patterns (&#039;%&#039; to match    zero or more characters and &#039;_&#039; to match a single character).           Return Values       Returns an ODBC result identifier or FALSE on failure.          The result set has the following columns:         TABLE_QUALIFIER     TABLE_SCHEM     TABLE_NAME     COLUMN_NAME     DATA_TYPE     TYPE_NAME     PRECISION     LENGTH     SCALE     RADIX     NULLABLE     REMARKS              The result set is ordered by TABLE_QUALIFIER, TABLE_SCHEM and    TABLE_NAME.           See Also            odbc_columnprivileges() - Lists columns and associated privileges for the given table to retrieve associated     privileges"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-data-source.php","title":"odbc_data_source","description":"odbc_data_source   (PHP 4 >= 4.3.0, PHP 5)odbc_data_source \u2014 Returns information about a current connection        Description       array odbc_data_source     ( resource $connection_id    , int $fetch_type    )        This function will return the list of available DSN (after calling it    several times).           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         fetch_type                      The fetch_type can be one of two constant types:        SQL_FETCH_FIRST, SQL_FETCH_NEXT.        Use SQL_FETCH_FIRST the first time this function is        called, thereafter use the SQL_FETCH_NEXT.                                    Return Values       Returns FALSE on error, and an array upon success."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-cursor.php","title":"odbc_cursor","description":"odbc_cursor   (PHP 4, PHP 5)odbc_cursor \u2014 Get cursorname        Description       string odbc_cursor     ( resource $result_id    )        Gets the cursorname for the given result_id.           Parameters                    result_id                      The result identifier.                                    Return Values       Returns the cursor name, as a string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-do.php","title":"odbc_do","description":"odbc_do   (PHP 4, PHP 5)odbc_do \u2014 Alias of odbc_exec()        Description       This function is an alias of:     odbc_exec()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-error.php","title":"odbc_error","description":"odbc_error   (PHP 4 >= 4.0.5, PHP 5)odbc_error \u2014 Get the last error code        Description       string odbc_error     ([ resource $connection_id   ] )        Returns a six-digit ODBC state, or an empty string if there has been no    errors.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                             Return Values       If connection_id is specified, the last state    of that connection is returned, else the last state of any connection    is returned.          This function returns meaningful value only if last odbc query failed    (i.e. odbc_exec() returned FALSE).           See Also            odbc_errormsg() - Get the last error message     odbc_exec() - Prepare and execute an SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-errormsg.php","title":"odbc_errormsg","description":"odbc_errormsg   (PHP 4 >= 4.0.5, PHP 5)odbc_errormsg \u2014 Get the last error message        Description       string odbc_errormsg     ([ resource $connection_id   ] )        Returns a string containing the last ODBC error message, or an empty    string if there has been no errors.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                             Return Values       If connection_id is specified, the last state    of that connection is returned, else the last state of any connection    is returned.          This function returns meaningful value only if last odbc query failed    (i.e. odbc_exec() returned FALSE).           See Also            odbc_error() - Get the last error code     odbc_exec() - Prepare and execute an SQL statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-connect.php","title":"odbc_connect","description":"odbc_connect   (PHP 4, PHP 5)odbc_connect \u2014 Connect to a datasource          Description       resource odbc_connect     ( string $dsn    , string $user    , string $password    [, int $cursor_type   ] )        The connection id returned by this functions is needed by other    ODBC functions. You can have multiple connections open at once as long as    they either use different db or different credentials.          With some ODBC drivers, executing a complex stored procedure may    fail with an error similar to: \"Cannot open a cursor on a stored    procedure that has anything other than a single select statement    in it\".  Using SQL_CUR_USE_ODBC may avoid that error. Also, some    drivers don&#039;t support the optional row_number parameter in    odbc_fetch_row(). SQL_CUR_USE_ODBC might help    in that case, too.            Parameters                    dsn                      The database source name for the connection. Alternatively, a        DSN-less connection string can be used.                                user                      The username.                                password                      The password.                                cursor_type                      This sets the type of cursor to be used        for this connection. This parameter is not normally needed, but        can be useful for working around problems with some ODBC drivers.                      The following constants are defined for cursortype:                                                    SQL_CUR_USE_IF_NEEDED                                                 SQL_CUR_USE_ODBC                                                 SQL_CUR_USE_DRIVER                                                                Return Values       Returns an ODBC connection id or 0 (FALSE) on    error.            Examples            Example #1 DSN-less connections       <?php\/\/\u00a0Microsoft\u00a0SQL\u00a0Server\u00a0using\u00a0the\u00a0SQL\u00a0Native\u00a0Client\u00a010.0\u00a0ODBC\u00a0Driver\u00a0-\u00a0allows\u00a0connection\u00a0to\u00a0SQL\u00a07,\u00a02000,\u00a02005\u00a0and\u00a02008$connection\u00a0=\u00a0odbc_connect(\"Driver={SQL\u00a0Server\u00a0Native\u00a0Client\u00a010.0};Server=$server;Database=$database;\",\u00a0$user,\u00a0$password);\/\/\u00a0Microsoft\u00a0Access$connection\u00a0=\u00a0odbc_connect(\"Driver={Microsoft\u00a0Access\u00a0Driver\u00a0(*.mdb)};Dbq=$mdbFilename\",\u00a0$user,\u00a0$password);\/\/\u00a0Microsoft\u00a0Excel$excelFile\u00a0=\u00a0realpath('C:\/ExcelData.xls');$excelDir\u00a0=\u00a0dirname($excelFile);$connection\u00a0=\u00a0odbc_connect(\"Driver={Microsoft\u00a0Excel\u00a0Driver\u00a0(*.xls)};DriverId=790;Dbq=$excelFile;DefaultDir=$excelDir\"\u00a0,\u00a0'',\u00a0'');?>                        See Also            For persistent connections: odbc_pconnect() - Open a persistent database connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-execute.php","title":"odbc_execute","description":"odbc_execute   (PHP 4, PHP 5)odbc_execute \u2014 Execute a prepared statement          Description       bool odbc_execute     ( resource $result_id    [, array $parameters_array   ] )        Executes a statement prepared with odbc_prepare().            Parameters                    result_id                      The result id resource, from odbc_prepare().                                parameters_array                      Parameters in parameter_array will be        substituted for placeholders in the prepared statement in order.        Elements of this array will be converted to strings by calling this        function.                      Any parameters in parameter_array which        start and end with single quotes will be taken as the name of a        file to read and send to the database server as the data for the        appropriate placeholder.                      If you wish to store a string which actually begins and ends with        single quotes, you must add a space or other non-single-quote character        to the beginning or end of the parameter, which will prevent the        parameter from being taken as a file name. If this is not an option,        then you must use another mechanism to store the string, such as        executing the query directly with odbc_exec()).                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 odbc_execute() and odbc_prepare() example           In the following code, $success will only be      TRUE if all three parameters to myproc are IN parameters:            <?php$a\u00a0=\u00a01;$b\u00a0=\u00a02;$c\u00a0=\u00a03;$stmt\u00a0\u00a0\u00a0\u00a0=\u00a0odbc_prepare($conn,\u00a0'CALL\u00a0myproc(?,?,?)');$success\u00a0=\u00a0odbc_execute($stmt,\u00a0array($a,\u00a0$b,\u00a0$c));?>                      If you need to call a stored procedure using INOUT or OUT parameters,    the recommended workaround is to use a native extension for your database    (for example, mssql for MS SQL Server,    or oci8 for Oracle).            Changelog                                 Version        Description                                    4.2.0                 File reading is now subject to safe mode and         open-basedir restrictions         in parameters_array.                               4.1.1                 Remote files         are no longer supported in parameters_array.                                            See Also            odbc_prepare() - Prepares a statement for execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-exec.php","title":"odbc_exec","description":"odbc_exec   (PHP 4, PHP 5)odbc_exec \u2014 Prepare and execute an SQL statement        Description       resource odbc_exec     ( resource $connection_id    , string $query_string    [, int $flags   ] )        Sends an SQL statement to the database server.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         query_string                      The SQL statement.                                flags                      This parameter is currently not used.                                    Return Values       Returns an ODBC result identifier if the SQL command was executed    successfully, or FALSE on error.           See Also            odbc_prepare() - Prepares a statement for execution     odbc_execute() - Execute a prepared statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-array.php","title":"odbc_fetch_array","description":"odbc_fetch_array   (PHP 4 >= 4.0.2, PHP 5)odbc_fetch_array \u2014 Fetch a result row as an associative array         Description       array odbc_fetch_array     ( resource $result    [, int $rownumber   ] )        Fetch an associative array from an ODBC query. See the     changelog below for when this function is available.            Parameters                    result                      The result resource from odbc_exec().                                rownumber                      Optionally choose which row number to retrieve.                                     Return Values       Returns an array that corresponds to the fetched row, or FALSE if there     are no more rows.            Changelog                                 Version        Description                                    4.3.3                 This function exists when compiled with IBM DB2 or UnixODBC support.                               4.3.2                 This function exists when compiled for Windows.                               4.0.2                 This function exists when compiled with DBMaker support.                                            See Also            odbc_fetch_row() - Fetch a row     odbc_fetch_object() - Fetch a result row as an object     odbc_num_rows() - Number of rows in a result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-object.php","title":"odbc_fetch_object","description":"odbc_fetch_object   (PHP 4 >= 4.0.2, PHP 5)odbc_fetch_object \u2014 Fetch a result row as an object         Description       object odbc_fetch_object     ( resource $result    [, int $rownumber   ] )        Fetch an object from an ODBC query. See the changelog below    for when this function is available.            Parameters                    result                      The result resource from odbc_exec().                                rownumber                      Optionally choose which row number to retrieve.                                     Return Values       Returns an object that corresponds to the fetched row, or FALSE if there     are no more rows.            Changelog                                 Version        Description                                    4.3.3                 This function exists when compiled with IBM DB2 or UnixODBC support.                               4.3.2                 This function exists when compiled for Windows.                               4.0.2                 This function exists when compiled with DBMaker support.                                            See Also            odbc_fetch_row() - Fetch a row     odbc_fetch_array() - Fetch a result row as an associative array     odbc_num_rows() - Number of rows in a result"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-into.php","title":"odbc_fetch_into","description":"odbc_fetch_into   (PHP 4, PHP 5)odbc_fetch_into \u2014 Fetch one result row into array          Description       int odbc_fetch_into     ( resource $result_id    , array &$result_array    [, int $rownumber   ] )        Fetch one result row into array.            Parameters                    result_id                      The result resource.                                result_array                      The result array        that can be of any type since it will be converted to type        array. The array will contain the column values starting at array        index 0.                                rownumber                      The row number.                                     Return Values       Returns the number of columns in the result;    FALSE on error.            Changelog                                 Version        Description                                    4.2.0                 The result_array and rownumber         parameters have been swapped. This allows the rownumber to be a constant again.                                4.0.6                 The rownumber can no longer be passed in as a         constant, but rather as a variable. This again changed in 4.2.0.                               4.0.5                 The result_array parameter no longer needs to         be passed in by reference.                                            Examples            Example #1 odbc_fetch_into() examples       <?php$rc\u00a0=\u00a0odbc_fetch_into($res_id,\u00a0$my_array);?>                   or            <?php$rc\u00a0=\u00a0odbc_fetch_into($res_id,\u00a0$my_array,\u00a02);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-len.php","title":"odbc_field_len","description":"odbc_field_len   (PHP 4, PHP 5)odbc_field_len \u2014 Get the length (precision) of a field        Description       int odbc_field_len     ( resource $result_id    , int $field_number    )        Gets the length of the field referenced by number in the given result    identifier.           Parameters                    result_id                      The result identifier.                                field_number                      The field number. Field numbering starts at 1.                                    Return Values       Returns the field name as a string, or FALSE on error.           See Also            odbc_field_scale() - Get the scale of a field to get the scale of a     floating point number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-num.php","title":"odbc_field_num","description":"odbc_field_num   (PHP 4, PHP 5)odbc_field_num \u2014 Return column number        Description       int odbc_field_num     ( resource $result_id    , string $field_name    )        Gets the number of the column slot that corresponds to the named field in    the given result identifier.           Parameters                    result_id                      The result identifier.                                field_name                      The field name.                                    Return Values       Returns the field number as a integer, or FALSE on error.    Field numbering starts at 1."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-row.php","title":"odbc_fetch_row","description":"odbc_fetch_row   (PHP 4, PHP 5)odbc_fetch_row \u2014 Fetch a row        Description       bool odbc_fetch_row     ( resource $result_id    [, int $row_number   ] )        Fetches a row of the data that was returned by odbc_do()    or odbc_exec(). After odbc_fetch_row()    is called, the fields of that row can be accessed with    odbc_result().           Parameters                    result_id                      The result identifier.                                row_number                      If row_number is not specified,        odbc_fetch_row() will try to fetch the next row in        the result set. Calls to odbc_fetch_row() with and        without row_number can be mixed.                      To step through the result more than once, you can call        odbc_fetch_row() with        row_number 1, and then continue doing        odbc_fetch_row() without        row_number to review the result.  If a driver        doesn&#039;t support fetching rows by number, the        row_number parameter is ignored.                                    Return Values       Returns TRUE if there was a row, FALSE otherwise."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-precision.php","title":"odbc_field_precision","description":"odbc_field_precision   (PHP 4, PHP 5)odbc_field_precision \u2014 Alias of odbc_field_len()        Description       This function is an alias of:     odbc_field_len().           See Also            odbc_field_scale() - Get the scale of a field to get the scale of a     floating point number."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-name.php","title":"odbc_field_name","description":"odbc_field_name   (PHP 4, PHP 5)odbc_field_name \u2014 Get the columnname        Description       string odbc_field_name     ( resource $result_id    , int $field_number    )        Gets the name of the field occupying the given column number in the given    result identifier.           Parameters                    result_id                      The result identifier.                                field_number                      The field number. Field numbering starts at 1.                                    Return Values       Returns the field name as a string, or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-scale.php","title":"odbc_field_scale","description":"odbc_field_scale   (PHP 4, PHP 5)odbc_field_scale \u2014 Get the scale of a field        Description       int odbc_field_scale     ( resource $result_id    , int $field_number    )        Gets the scale of the field referenced by number in the given result    identifier.           Parameters                    result_id                      The result identifier.                                field_number                      The field number. Field numbering starts at 1.                                    Return Values       Returns the field scale as a integer, or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-type.php","title":"odbc_field_type","description":"odbc_field_type   (PHP 4, PHP 5)odbc_field_type \u2014 Datatype of a field        Description       string odbc_field_type     ( resource $result_id    , int $field_number    )        Gets the SQL type of the field referenced by number in the given result    identifier.           Parameters                    result_id                      The result identifier.                                field_number                      The field number. Field numbering starts at 1.                                    Return Values       Returns the field type as a string, or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-foreignkeys.php","title":"odbc_foreignkeys","description":"odbc_foreignkeys   (PHP 4, PHP 5)odbc_foreignkeys \u2014 Retrieves a list of foreign keys          Description       resource odbc_foreignkeys     ( resource $connection_id    , string $pk_qualifier    , string $pk_owner    , string $pk_table    , string $fk_qualifier    , string $fk_owner    , string $fk_table    )        Retrieves a list of foreign keys in the specified table or a list of    foreign keys in other tables that refer to the primary key in the    specified table            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         pk_qualifier                      The primary key qualifier.                                pk_owner                      The primary key owner.                                pk_table                      The primary key table.                                fk_qualifier                      The foreign key qualifier.                                fk_owner                      The foreign key owner.                                fk_table                      The foreign key table.                                     Return Values       Returns an ODBC result identifier or FALSE on failure.          The result set has the following columns:         PKTABLE_QUALIFIER     PKTABLE_OWNER     PKTABLE_NAME     PKCOLUMN_NAME     FKTABLE_QUALIFIER     FKTABLE_OWNER     FKTABLE_NAME     FKCOLUMN_NAME     KEY_SEQ     UPDATE_RULE     DELETE_RULE     FK_NAME     PK_NAME              If pk_table contains a table name,    odbc_foreignkeys() returns a result set    containing the primary key of the specified table and all of the    foreign keys that refer to it.          If fk_table contains a table name,    odbc_foreignkeys() returns a result set    containing all of the foreign keys in the specified table and the    primary keys (in other tables) to which they refer.          If both pk_table and    fk_table contain table names,    odbc_foreignkeys() returns the foreign keys in    the table specified in fk_table that refer    to the primary key of the table specified in    pk_table. This should be one key at most."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-free-result.php","title":"odbc_free_result","description":"odbc_free_result   (PHP 4, PHP 5)odbc_free_result \u2014 Free resources associated with a result        Description       bool odbc_free_result     ( resource $result_id    )        Free resources associated with a result.          odbc_free_result() only needs to be called if you are    worried about using too much memory while your script is running.    All result memory will automatically be freed when the script is finished.           Parameters                    result_id                      The result identifier.                                    Return Values       Always returns TRUE.           Notes   Note:          If auto-commit is disabled (see odbc_autocommit()) and     you call odbc_free_result() before committing, all     pending transactions are rolled back."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-gettypeinfo.php","title":"odbc_gettypeinfo","description":"odbc_gettypeinfo   (PHP 4, PHP 5)odbc_gettypeinfo \u2014 Retrieves information about data types supported by the data source          Description       resource odbc_gettypeinfo     ( resource $connection_id    [, int $data_type   ] )        Retrieves information about data types supported by the data source.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         data_type                      The data type, which can be used to restrict the information to a        single data type.                                     Return Values       Returns an ODBC result identifier or    FALSE on failure.          The result set has the following columns:         TYPE_NAME     DATA_TYPE     PRECISION     LITERAL_PREFIX     LITERAL_SUFFIX     CREATE_PARAMS     NULLABLE     CASE_SENSITIVE     SEARCHABLE     UNSIGNED_ATTRIBUTE     MONEY     AUTO_INCREMENT     LOCAL_TYPE_NAME     MINIMUM_SCALE     MAXIMUM_SCALE              The result set is ordered by DATA_TYPE and TYPE_NAME."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-next-result.php","title":"odbc_next_result","description":"odbc_next_result   (PHP 4 >= 4.0.5, PHP 5)odbc_next_result \u2014 Checks if multiple results are available        Description       bool odbc_next_result     ( resource $result_id    )        Checks if there are more result sets available as well as allowing access    to the next result set via odbc_fetch_array(),    odbc_fetch_row(), odbc_result(), etc.           Parameters                    result_id                      The result identifier.                                    Return Values       Returns TRUE if there are more result sets, FALSE otherwise.           Examples            Example #1 odbc_next_result()       <?php$r_Connection\u00a0=\u00a0odbc_connect($dsn,\u00a0$username,\u00a0$password);$s_SQL\u00a0=\u00a0<<<END_SQLSELECT\u00a0'A'SELECT\u00a0'B'SELECT\u00a0'C'END_SQL;$r_Results\u00a0=\u00a0odbc_exec($r_Connection,\u00a0$s_SQL);$a_Row1\u00a0=\u00a0odbc_fetch_array($r_Results);$a_Row2\u00a0=\u00a0odbc_fetch_array($r_Results);echo\u00a0\"Dump\u00a0first\u00a0result\u00a0set\";var_dump($a_Row1,\u00a0$a_Row2);echo\u00a0\"Get\u00a0second\u00a0results\u00a0set\u00a0\";var_dump(odbc_next_result($r_Results));$a_Row1\u00a0=\u00a0odbc_fetch_array($r_Results);$a_Row2\u00a0=\u00a0odbc_fetch_array($r_Results);echo\u00a0\"Dump\u00a0second\u00a0result\u00a0set\u00a0\";var_dump($a_Row1,\u00a0$a_Row2);echo\u00a0\"Get\u00a0third\u00a0results\u00a0set\u00a0\";var_dump(odbc_next_result($r_Results));$a_Row1\u00a0=\u00a0odbc_fetch_array($r_Results);$a_Row2\u00a0=\u00a0odbc_fetch_array($r_Results);echo\u00a0\"Dump\u00a0third\u00a0result\u00a0set\u00a0\";var_dump($a_Row1,\u00a0$a_Row2);echo\u00a0\"Try\u00a0for\u00a0a\u00a0fourth\u00a0result\u00a0set\u00a0\";var_dump(odbc_next_result($r_Results));?>             The above example will output:       Dump first result set array(1) {   [\"A\"]=>   string(1) \"A\" } bool(false) Get second results set bool(true) Dump second result set array(1) {   [\"B\"]=>   string(1) \"B\" } bool(false) Get third results set bool(true) Dump third result set array(1) {   [\"C\"]=>   string(1) \"C\" } bool(false) Try for a fourth result set bool(false)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-num-fields.php","title":"odbc_num_fields","description":"odbc_num_fields   (PHP 4, PHP 5)odbc_num_fields \u2014 Number of columns in a result        Description       int odbc_num_fields     ( resource $result_id    )        Gets the number of fields (columns) in an ODBC result.           Parameters                    result_id                      The result identifier returned by odbc_exec().                                    Return Values       Returns the number of fields, or -1 on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-longreadlen.php","title":"odbc_longreadlen","description":"odbc_longreadlen   (PHP 4, PHP 5)odbc_longreadlen \u2014 Handling of LONG columns        Description       bool odbc_longreadlen     ( resource $result_id    , int $length    )        Enables handling of LONG and LONGVARBINARY columns.           Parameters                    result_id                      The result identifier.                                length                      The number of bytes returned to PHP is controlled by the parameter        length. If it is set to 0, Long column data is passed through to the        client.                                    Return Values       Returns TRUE on success or FALSE on failure.           Notes   Note:          Handling of LONGVARBINARY columns is also affected by     odbc_binmode()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-pconnect.php","title":"odbc_pconnect","description":"odbc_pconnect   (PHP 4, PHP 5)odbc_pconnect \u2014 Open a persistent database connection          Description       resource odbc_pconnect     ( string $dsn    , string $user    , string $password    [, int $cursor_type   ] )        Opens a persistent database connection.          This function is much like    odbc_connect(), except that the connection is    not really closed when the script has finished.  Future requests    for a connection with the same dsn,    user, password    combination (via odbc_connect() and    odbc_pconnect()) can reuse the persistent    connection.            Parameters       See odbc_connect() for details.            Return Values       Returns an ODBC connection id or 0 (FALSE) on    error.            Notes   Note:          Persistent connections have no effect if PHP is used as a CGI     program.                See Also            odbc_connect() - Connect to a datasource     Persistent Database Connections"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-num-rows.php","title":"odbc_num_rows","description":"odbc_num_rows   (PHP 4, PHP 5)odbc_num_rows \u2014 Number of rows in a result        Description       int odbc_num_rows     ( resource $result_id    )        Gets the number of rows in a result. For INSERT, UPDATE and DELETE    statements odbc_num_rows() returns the number of rows    affected.  For a SELECT clause this can be the number    of rows available.           Parameters                    result_id                      The result identifier returned by odbc_exec().                                    Return Values       Returns the number of rows in an ODBC result.    This function will return -1 on error.           Notes   Note:          Using odbc_num_rows() to determine the number of rows     available after a SELECT will return -1 with many drivers."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-primarykeys.php","title":"odbc_primarykeys","description":"odbc_primarykeys   (PHP 4, PHP 5)odbc_primarykeys \u2014 Gets the primary keys for a table        Description       resource odbc_primarykeys     ( resource $connection_id    , string $qualifier    , string $owner    , string $table    )        Returns a result identifier that can be used to fetch the column names    that comprise the primary key for a table.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                                              owner                                              table                                                  Return Values       Returns an ODBC result identifier or FALSE on failure.          The result set has the following columns:         TABLE_QUALIFIER     TABLE_OWNER     TABLE_NAME     COLUMN_NAME     KEY_SEQ     PK_NAME"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-prepare.php","title":"odbc_prepare","description":"odbc_prepare   (PHP 4, PHP 5)odbc_prepare \u2014 Prepares a statement for execution          Description       resource odbc_prepare     ( resource $connection_id    , string $query_string    )        Prepares a statement for execution. The result identifier can be used    later to execute the statement with odbc_execute().          Some databases (such as IBM DB2, MS SQL Server, and Oracle) support    stored procedures that accept parameters of type IN, INOUT, and OUT as    defined by the ODBC specification.  However, the Unified ODBC driver    currently only supports parameters of type IN to stored procedures.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         query_string                      The query string statement being prepared.                                     Return Values       Returns an ODBC result identifier if the SQL command was prepared    successfully. Returns FALSE on error.            Examples            Example #1 odbc_execute() and odbc_prepare() example           In the following code, $success will only be      TRUE if all three parameters to myproc are IN parameters:            <?php$a\u00a0=\u00a01;$b\u00a0=\u00a02;$c\u00a0=\u00a03;$stmt\u00a0\u00a0\u00a0\u00a0=\u00a0odbc_prepare($conn,\u00a0'CALL\u00a0myproc(?,?,?)');$success\u00a0=\u00a0odbc_execute($stmt,\u00a0array($a,\u00a0$b,\u00a0$c));?>                      If you need to call a stored procedure using INOUT or OUT parameters,    the recommended workaround is to use a native extension for your database    (for example, mssql for MS SQL Server,    or oci8 for Oracle).            See Also            odbc_execute() - Execute a prepared statement"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-procedurecolumns.php","title":"odbc_procedurecolumns","description":"odbc_procedurecolumns   (PHP 4, PHP 5)odbc_procedurecolumns \u2014 Retrieve information about parameters to procedures          Description       resource odbc_procedurecolumns     ( resource $connection_id    )        resource odbc_procedurecolumns     ( resource $connection_id    , string $qualifier    , string $owner    , string $proc    , string $column    )        Retrieve information about parameters to procedures.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                owner                      The owner.        This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.                                proc                      The proc.        This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.                                column                      The column.        This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.                                     Return Values       Returns the list of input and output parameters, as well as the    columns that make up the result set for the specified procedures.     Returns an ODBC result identifier or FALSE on failure.          The result set has the following columns:         PROCEDURE_QUALIFIER     PROCEDURE_OWNER     PROCEDURE_NAME     COLUMN_NAME     COLUMN_TYPE     DATA_TYPE     TYPE_NAME     PRECISION     LENGTH     SCALE     RADIX     NULLABLE     REMARKS              The result set is ordered by PROCEDURE_QUALIFIER, PROCEDURE_OWNER,    PROCEDURE_NAME and COLUMN_TYPE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-procedures.php","title":"odbc_procedures","description":"odbc_procedures   (PHP 4, PHP 5)odbc_procedures \u2014 Get the list of procedures stored in a specific data source          Description       resource odbc_procedures     ( resource $connection_id    )        resource odbc_procedures     ( resource $connection_id    , string $qualifier    , string $owner    , string $name    )        Lists all procedures in the requested range.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                owner                      The owner.        This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.                                name                      The name.        This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.                                     Return Values       Returns an ODBC    result identifier containing the information or FALSE on failure.          The result set has the following columns:         PROCEDURE_QUALIFIER     PROCEDURE_OWNER     PROCEDURE_NAME     NUM_INPUT_PARAMS     NUM_OUTPUT_PARAMS     NUM_RESULT_SETS     REMARKS     PROCEDURE_TYPE"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-rollback.php","title":"odbc_rollback","description":"odbc_rollback   (PHP 4, PHP 5)odbc_rollback \u2014 Rollback a transaction        Description       bool odbc_rollback     ( resource $connection_id    )        Rolls back all pending statements on the connection.           Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                             Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-setoption.php","title":"odbc_setoption","description":"odbc_setoption   (PHP 4, PHP 5)odbc_setoption \u2014 Adjust ODBC settings          Description       bool odbc_setoption     ( resource $id    , int $function    , int $option    , int $param    )        This function allows fiddling with the ODBC options for a    particular connection or query result.  It was written to help    find work around to problems in quirky ODBC drivers.  You should    probably only use this function if you are an ODBC programmer and    understand the effects the various options will have.  You will    certainly need a good ODBC reference to explain all the different    options and values that can be used.  Different driver versions    support different options.          Because the effects may vary depending on the ODBC driver, use of    this function in scripts to be made publicly available is    strongly discouraged.  Also, some ODBC options are not available    to this function because they must be set before the connection    is established or the query is prepared.  However, if on a    particular job it can make PHP work so your boss doesn&#039;t tell you    to use a commercial product, that&#039;s all that really    matters.            Parameters                    id                      Is a connection id or result id on which to change the settings.        For SQLSetConnectOption(), this is a connection id.        For SQLSetStmtOption(), this is a result id.                                function                      Is the ODBC function to use. The value should be        1 for SQLSetConnectOption() and        2 for SQLSetStmtOption().                                option                      The option to set.                                param                      The value for the given option.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 odbc_setoption() examples       <?php\/\/\u00a01.\u00a0Option\u00a0102\u00a0of\u00a0SQLSetConnectOption()\u00a0is\u00a0SQL_AUTOCOMMIT.\/\/\u00a0\u00a0\u00a0\u00a0Value\u00a01\u00a0of\u00a0SQL_AUTOCOMMIT\u00a0is\u00a0SQL_AUTOCOMMIT_ON.\/\/\u00a0\u00a0\u00a0\u00a0This\u00a0example\u00a0has\u00a0the\u00a0same\u00a0effect\u00a0as\/\/\u00a0\u00a0\u00a0\u00a0odbc_autocommit($conn,\u00a0true);odbc_setoption($conn,\u00a01,\u00a0102,\u00a01);\/\/\u00a02.\u00a0Option\u00a00\u00a0of\u00a0SQLSetStmtOption()\u00a0is\u00a0SQL_QUERY_TIMEOUT.\/\/\u00a0\u00a0\u00a0\u00a0This\u00a0example\u00a0sets\u00a0the\u00a0query\u00a0to\u00a0timeout\u00a0after\u00a030\u00a0seconds.$result\u00a0=\u00a0odbc_prepare($conn,\u00a0$sql);odbc_setoption($result,\u00a02,\u00a00,\u00a030);odbc_execute($result);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-result-all.php","title":"odbc_result_all","description":"odbc_result_all   (PHP 4, PHP 5)odbc_result_all \u2014 Print result as HTML table        Description       int odbc_result_all     ( resource $result_id    [, string $format   ] )        Prints all rows from a result identifier produced by    odbc_exec(). The result is printed in HTML table format.           Parameters                    result_id                      The result identifier.                                format                      Additional overall table formatting.                                    Return Values       Returns the number of rows in the result or FALSE on error."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-specialcolumns.php","title":"odbc_specialcolumns","description":"odbc_specialcolumns   (PHP 4, PHP 5)odbc_specialcolumns \u2014 Retrieves special columns          Description       resource odbc_specialcolumns     ( resource $connection_id    , int $type    , string $qualifier    , string $owner    , string $table    , int $scope    , int $nullable    )        Retrieves either the optimal set of columns that uniquely identifies a    row in the table, or columns that are automatically updated when any    value in the row is updated by a transaction.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         type                      When the type argument is SQL_BEST_ROWID,        odbc_specialcolumns() returns the        column or columns that uniquely identify each row in the table.                      When the type argument is SQL_ROWVER,        odbc_specialcolumns() returns the column or columns in the        specified table, if any, that are automatically updated by the data source        when any value in the row is updated by any transaction.                                qualifier                      The qualifier.                                owner                      The owner.                                table                      The table.                                scope                      The scope, which orders the result set.                                nullable                      The nullable option.                                     Return Values       Returns an ODBC result identifier or FALSE on    failure.          The result set has the following columns:         SCOPE     COLUMN_NAME     DATA_TYPE     TYPE_NAME     PRECISION     LENGTH     SCALE     PSEUDO_COLUMN"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-statistics.php","title":"odbc_statistics","description":"odbc_statistics   (PHP 4, PHP 5)odbc_statistics \u2014 Retrieve statistics about a table          Description       resource odbc_statistics     ( resource $connection_id    , string $qualifier    , string $owner    , string $table_name    , int $unique    , int $accuracy    )        Get statistics about a table and its indexes.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                owner                      The owner.                                table_name                      The table name.                                unique                      The unique attribute.                                accuracy                      The accuracy.                                     Return Values       Returns an ODBC result identifier or FALSE on failure.          The result set has the following columns:         TABLE_QUALIFIER     TABLE_OWNER     TABLE_NAME     NON_UNIQUE     INDEX_QUALIFIER     INDEX_NAME     TYPE     SEQ_IN_INDEX     COLUMN_NAME     COLLATION     CARDINALITY     PAGES     FILTER_CONDITION              The result set is ordered by NON_UNIQUE, TYPE, INDEX_QUALIFIER,    INDEX_NAME and SEQ_IN_INDEX."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-tableprivileges.php","title":"odbc_tableprivileges","description":"odbc_tableprivileges   (PHP 4, PHP 5)odbc_tableprivileges \u2014 Lists tables and the privileges associated with each table          Description       resource odbc_tableprivileges     ( resource $connection_id    , string $qualifier    , string $owner    , string $name    )        Lists tables in the requested range and the privileges associated    with each table.            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                owner                      The owner. Accepts the following search patterns:        (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a single character)                                name                      The name. Accepts the following search patterns:        (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a single character)                                     Return Values       An ODBC result identifier or FALSE on failure.          The result set has the following columns:         TABLE_QUALIFIER     TABLE_OWNER     TABLE_NAME     GRANTOR     GRANTEE     PRIVILEGE     IS_GRANTABLE              The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and    TABLE_NAME."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-result.php","title":"odbc_result","description":"odbc_result   (PHP 4, PHP 5)odbc_result \u2014 Get result data          Description       mixed odbc_result     ( resource $result_id    , mixed $field    )        Get result data            Parameters                    result_id                      The ODBC resource.                                field                      The field name being retrieved. It can either be an integer containing        the column number of the field you want; or it can be a string        containing the name of the field.                                     Return Values       Returns the string contents of the field, FALSE on error, NULL for    NULL data, or TRUE for binary data.            Examples       The first call to odbc_result() returns the    value of the third field in the current record of the query    result. The second function call to    odbc_result() returns the value of the field    whose field name is \"val\" in the current record of the query    result. An error occurs if a column number parameter for a field    is less than one or exceeds the number of columns (or fields) in    the current record. Similarly, an error occurs if a field with a    name that is not one of the fieldnames of the table(s) that    is(are) being queried.               Example #1 odbc_result() examples       <?php$item_3\u00a0\u00a0\u00a0=\u00a0odbc_result($Query_ID,\u00a03);$item_val\u00a0=\u00a0odbc_result($Query_ID,\u00a0\"val\");?>                        Notes       Field indices start from 1. Regarding the way binary or    long column data is returned refer to    odbc_binmode() and    odbc_longreadlen()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-tables.php","title":"odbc_tables","description":"odbc_tables   (PHP 4, PHP 5)odbc_tables \u2014 Get the list of table names stored in a specific data source          Description       resource odbc_tables     ( resource $connection_id    [, string $qualifier    [, string $owner    [, string $name    [, string $types   ]]]] )        Lists all tables in the requested range.          To support enumeration of qualifiers, owners, and table types,    the following special semantics for the    qualifier, owner,    name, and    table_type are available:                      If qualifier is a single percent       character (%) and owner and       name are empty strings, then the result       set contains a list of valid qualifiers for the data       source. (All columns except the TABLE_QUALIFIER column contain       NULLs.)                             If owner is a single percent character       (%) and qualifier and       name are empty strings, then the result       set contains a list of valid owners for the data source. (All       columns except the TABLE_OWNER column contain       NULLs.)                             If table_type is a single percent       character (%) and qualifier,       owner and name       are empty strings, then the result set contains a list of       valid table types for the data source. (All columns except the       TABLE_TYPE column contain NULLs.)                            Parameters                    connection_id              The ODBC connection identifier, see odbc_connect() for details.                         qualifier                      The qualifier.                                owner                      The owner. Accepts search patterns (&#039;%&#039; to match zero or more        characters and &#039;_&#039; to match a single character).                                name                      The name. Accepts search patterns (&#039;%&#039; to match zero or more        characters and &#039;_&#039; to match a single character).                                types                      If table_type is not an empty string, it        must contain a list of comma-separated values for the types of        interest; each value may be enclosed in single quotes (&#039;) or        unquoted. For example, \"&#039;TABLE&#039;,&#039;VIEW&#039;\" or \"TABLE, VIEW\".  If the        data source does not support a specified table type,        odbc_tables() does not return any results for        that type.                                     Return Values       Returns an ODBC result identifier containing the information     or FALSE on failure.          The result set has the following columns:         TABLE_QUALIFIER     TABLE_OWNER     TABLE_NAME     TABLE_TYPE     REMARKS              The result set is ordered by TABLE_TYPE, TABLE_QUALIFIER,    TABLE_OWNER and TABLE_NAME.            See Also            odbc_tableprivileges() - Lists tables and the privileges associated with each table"},{"url":"http:\/\/www.php.net\/manual\/en\/function.addcslashes.php","title":"addcslashes","description":"addcslashes   (PHP 4, PHP 5)addcslashes \u2014 Quote string with slashes in a C style          Description       string addcslashes     ( string $str    , string $charlist    )        Returns a string with backslashes before characters that are    listed in charlist parameter.             Parameters                    str                      The string to be escaped.                                charlist                      A list of characters to be escaped. If        charlist contains characters        \\n, \\r etc., they are        converted in C-like style, while other non-alphanumeric characters        with ASCII codes lower than 32 and higher than 126 converted to        octal representation.                      When you define a sequence of characters in the charlist argument        make sure that you know what characters come between the        characters that you set as the start and end of the range.                   <?phpecho\u00a0addcslashes('foo[\u00a0]',\u00a0'A..z');\/\/\u00a0output:\u00a0\u00a0\\f\\o\\o\\[\u00a0\\]\/\/\u00a0All\u00a0upper\u00a0and\u00a0lower-case\u00a0letters\u00a0will\u00a0be\u00a0escaped\/\/\u00a0...\u00a0but\u00a0so\u00a0will\u00a0the\u00a0[\\]^_`?>                            Also, if the first character in a range has a higher ASCII value        than the second character in the range, no range will be        constructed.  Only the start, end and period characters will be        escaped. Use the ord() function to find the        ASCII value for a character.                   <?phpecho\u00a0addcslashes(\"zoo['.']\",\u00a0'z..A');\/\/\u00a0output:\u00a0\u00a0\\zoo['\\.']?>                                          Be careful if you choose to escape characters 0, a, b, f, n, r,        t and v. They will be converted to \\0, \\a, \\b, \\f, \\n, \\r, \\t        and \\v.        In PHP \\0 (NULL), \\r (carriage return), \\n (newline), \\f (form feed),        \\v (vertical tab) and \\t (tab) are predefined escape sequences,         while in C all of these are predefined escape sequences.                                     Return Values       Returns the escaped string.            Changelog                                 Version        Description                                    5.2.5                 The escape sequences \\v and \\f were added.                                             Examples        charlist like \"\\0..\\37\", which would     escape all characters with ASCII code between 0 and 31.         Example #1 addcslashes() example       <?php$escaped\u00a0=\u00a0addcslashes($not_escaped,\u00a0\"\\0..\\37!@\\177..\\377\");?>                        See Also            stripcslashes() - Un-quote string quoted with addcslashes     stripslashes() - Un-quotes a quoted string     addslashes() - Quote string with slashes     htmlspecialchars() - Convert special characters to HTML entities     quotemeta() - Quote meta characters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chop.php","title":"chop","description":"chop   (PHP 4, PHP 5)chop \u2014 Alias of rtrim()         Description       This function is an alias of:     rtrim().            Notes   Note:          chop() is different than the Perl     chop() function, which removes the last     character in the string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.addslashes.php","title":"addslashes","description":"addslashes   (PHP 4, PHP 5)addslashes \u2014 Quote string with slashes          Description       string addslashes     ( string $str    )        Returns a string with backslashes before characters that need    to be quoted in database queries etc.  These characters are    single quote (&#039;), double quote    (\"), backslash (\\)    and NUL (the NULL byte).          An example use of addslashes() is when you&#039;re    entering data into a database.  For example, to insert the name    O&#039;reilly into a database, you will need to escape    it. It&#039;s highly recommended to use DBMS specific escape function    (e.g. mysqli_real_escape_string() for MySQL or    pg_escape_string() for PostgreSQL), but    if the DBMS you&#039;re using doesn&#039;t have an escape function    and the DBMS uses \\ to escape special chars,    you can use this function. This would only be to get the data    into the database, the extra \\ will not be inserted.    Having the PHP directive     magic_quotes_sybase set to on will mean    &#039; is instead escaped with another    &#039;.          The PHP directive     magic_quotes_gpc is on by default, and it    essentially runs addslashes() on all GET, POST,    and COOKIE data.  Do not use addslashes() on    strings that have already been escaped with    magic_quotes_gpc as you&#039;ll    then do double escaping.  The function    get_magic_quotes_gpc() may come in handy for    checking this.            Parameters                    str                      The string to be escaped.                                     Return Values       Returns the escaped string.            Examples            Example #1 An addslashes() example       <?php$str\u00a0=\u00a0\"Is\u00a0your\u00a0name\u00a0O'reilly?\";\/\/\u00a0Outputs:\u00a0Is\u00a0your\u00a0name\u00a0O\\'reilly?echo\u00a0addslashes($str);?>                         See Also            stripcslashes() - Un-quote string quoted with addcslashes     stripslashes() - Un-quotes a quoted string     addcslashes() - Quote string with slashes in a C style     htmlspecialchars() - Convert special characters to HTML entities     quotemeta() - Quote meta characters     get_magic_quotes_gpc() - Gets the current configuration setting of magic_quotes_gpc"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bin2hex.php","title":"bin2hex","description":"bin2hex   (PHP 4, PHP 5)bin2hex \u2014 Convert binary data into hexadecimal representation          Description       string bin2hex     ( string $str    )        Returns an ASCII string containing the hexadecimal representation    of str. The conversion is done byte-wise    with the high-nibble first.            Parameters                    str                      A string.                                     Return Values       Returns the hexadecimal representation of the given string.             See Also            hex2bin() - Converts the hex representation of data to binary     pack() - Pack data into binary string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.convert-uudecode.php","title":"convert_uudecode","description":"convert_uudecode   (PHP 5)convert_uudecode \u2014 Decode a uuencoded string          Description       string convert_uudecode     ( string $data    )        convert_uudecode() decodes a uuencoded string.            Parameters                    data                      The uuencoded data.                                     Return Values       Returns the decoded data as a string.            Examples            Example #1 convert_uudecode() example       <?php\/*\u00a0Can\u00a0you\u00a0imagine\u00a0what\u00a0this\u00a0will\u00a0print?\u00a0:)\u00a0*\/echo\u00a0convert_uudecode(\"+22!L;W9E(%!(4\\\"$`\\n`\");?>                        See Also            convert_uuencode() - Uuencode a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.convert-uuencode.php","title":"convert_uuencode","description":"convert_uuencode   (PHP 5)convert_uuencode \u2014 Uuencode a string          Description       string convert_uuencode     ( string $data    )        convert_uuencode() encodes a string using the uuencode    algorithm.          Uuencode translates all strings (including binary&#039;s ones) into printable    characters, making them safe for network transmissions. Uuencoded data is    about 35% larger than the original.            Parameters                    data                      The data to be encoded.                                     Return Values       Returns the uuencoded data.            Examples            Example #1 convert_uuencode() example       <?php$some_string\u00a0=\u00a0\"test\\ntext\u00a0text\\r\\n\";echo\u00a0convert_uuencode($some_string);?>                        See Also            convert_uudecode() - Decode a uuencoded string     base64_encode() - Encodes data with MIME base64"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chr.php","title":"chr","description":"chr   (PHP 4, PHP 5)chr \u2014 Return a specific character          Description       string chr     ( int $ascii    )        Returns a one-character string containing the character specified    by ascii.          This function complements ord().             Parameters                    ascii                      The ascii code.                                     Return Values       Returns the specified character.            Examples            Example #1 chr() example       <?php$str\u00a0=\u00a0\"The\u00a0string\u00a0ends\u00a0in\u00a0escape:\u00a0\";$str\u00a0.=\u00a0chr(27);\u00a0\/*\u00a0add\u00a0an\u00a0escape\u00a0character\u00a0at\u00a0the\u00a0end\u00a0of\u00a0$str\u00a0*\/\/*\u00a0Often\u00a0this\u00a0is\u00a0more\u00a0useful\u00a0*\/$str\u00a0=\u00a0sprintf(\"The\u00a0string\u00a0ends\u00a0in\u00a0escape:\u00a0%c\",\u00a027);?>                        See Also            sprintf() - Return a formatted string with a format string of %c     ord()     An \u00bb\u00a0ASCII-table"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chunk-split.php","title":"chunk_split","description":"chunk_split   (PHP 4, PHP 5)chunk_split \u2014 Split a string into smaller chunks          Description       string chunk_split     ( string $body    [, int $chunklen = 76    [, string $end = \"\\r\\n\"   ]] )        Can be used to split a string into smaller chunks which is useful for    e.g. converting base64_encode() output to match RFC    2045 semantics. It inserts end every     chunklen characters.            Parameters                    body                      The string to be chunked.                                chunklen                      The chunk length.                                end                      The line ending sequence.                                     Return Values       Returns the chunked string.            Examples            Example #1 chunk_split() example       <?php\/\/\u00a0format\u00a0$data\u00a0using\u00a0RFC\u00a02045\u00a0semantics$new_string\u00a0=\u00a0chunk_split(base64_encode($data));?>                         See Also            str_split() - Convert a string to an array     explode() - Split a string by string     split() - Split string into array by regular expression     wordwrap() - Wraps a string to a given number of characters     \u00bb\u00a0RFC 2045"},{"url":"http:\/\/www.php.net\/manual\/en\/function.count-chars.php","title":"count_chars","description":"count_chars   (PHP 4, PHP 5)count_chars \u2014 Return information about characters used in a string          Description       mixed count_chars     ( string $string    [, int $mode = 0   ] )        Counts the number of occurrences of every byte-value (0..255) in    string and returns it in various ways.            Parameters                    string                      The examined string.                                mode                      See return values.                                     Return Values       Depending on mode    count_chars() returns one of the following:                      0 - an array with the byte-value as key and the frequency of       every byte as value.                             1 - same as 0 but only byte-values with a frequency greater       than zero are listed.                             2 - same as 0 but only byte-values with a frequency equal to       zero are listed.                             3 - a string containing all unique characters is returned.                             4 - a string containing all not used characters is returned.                           Examples            Example #1 count_chars() example       <?php$data\u00a0=\u00a0\"Two\u00a0Ts\u00a0and\u00a0one\u00a0F.\";foreach\u00a0(count_chars($data,\u00a01)\u00a0as\u00a0$i\u00a0=>\u00a0$val)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0were\u00a0$val\u00a0instance(s)\u00a0of\u00a0\\\"\"\u00a0,\u00a0chr($i)\u00a0,\u00a0\"\\\"\u00a0in\u00a0the\u00a0string.\\n\";}?>             The above example will output:       There were 4 instance(s) of \" \" in the string. There were 1 instance(s) of \".\" in the string. There were 1 instance(s) of \"F\" in the string. There were 2 instance(s) of \"T\" in the string. There were 1 instance(s) of \"a\" in the string. There were 1 instance(s) of \"d\" in the string. There were 1 instance(s) of \"e\" in the string. There were 2 instance(s) of \"n\" in the string. There were 2 instance(s) of \"o\" in the string. There were 1 instance(s) of \"s\" in the string. There were 1 instance(s) of \"w\" in the string.                      See Also            strpos() - Find position of first occurrence of a string     substr_count() - Count the number of substring occurrences"},{"url":"http:\/\/www.php.net\/manual\/en\/function.convert-cyr-string.php","title":"convert_cyr_string","description":"convert_cyr_string   (PHP 4, PHP 5)convert_cyr_string \u2014 Convert from one Cyrillic character set to another          Description       string convert_cyr_string     ( string $str    , string $from    , string $to    )        Converts from one Cyrillic character set to another.              Parameters                    str                      The string to be converted.                                from                      The source Cyrillic character set, as a single character.                                to                      The target Cyrillic character set, as a single character.                                   Supported characters are:                      k - koi8-r                             w - windows-1251                             i - iso8859-5                             a - x-cp866                             d - x-cp866                             m - x-mac-cyrillic                           Return Values       Returns the converted string.            Notes   Note: This function is binary-safe."},{"url":"http:\/\/www.php.net\/manual\/en\/function.echo.php","title":"echo","description":"echo   (PHP 4, PHP 5)echo \u2014 Output one or more strings          Description       void echo     ( string $arg1    [, string $...   ] )        Outputs all parameters.          echo() is not actually a function (it is a    language construct), so you are not required to use parentheses    with it. echo() (unlike some other language    constructs) does not behave like a function, so it cannot    always be used in the context of a function. Additionally, if you want to    pass more than one parameter to echo(), the parameters    must not be enclosed within parentheses.          echo() also has a shortcut syntax, where you can    immediately follow the opening tag with an equals sign. This short syntax    only works with the short_open_tag configuration setting    enabled.           I\u00a0have\u00a0<?=$foo?>\u00a0foo.                       Parameters                    arg1                      The parameter to output.                                ...                                                   Return Values       No value is returned.            Examples            Example #1 echo() examples       <?phpecho\u00a0\"Hello\u00a0World\";echo\u00a0\"This\u00a0spansmultiple\u00a0lines.\u00a0The\u00a0newlines\u00a0will\u00a0beoutput\u00a0as\u00a0well\";echo\u00a0\"This\u00a0spans\\nmultiple\u00a0lines.\u00a0The\u00a0newlines\u00a0will\u00a0be\\noutput\u00a0as\u00a0well.\";echo\u00a0\"Escaping\u00a0characters\u00a0is\u00a0done\u00a0\\\"Like\u00a0this\\\".\";\/\/\u00a0You\u00a0can\u00a0use\u00a0variables\u00a0inside\u00a0of\u00a0an\u00a0echo\u00a0statement$foo\u00a0=\u00a0\"foobar\";$bar\u00a0=\u00a0\"barbaz\";echo\u00a0\"foo\u00a0is\u00a0$foo\";\u00a0\/\/\u00a0foo\u00a0is\u00a0foobar\/\/\u00a0You\u00a0can\u00a0also\u00a0use\u00a0arrays$baz\u00a0=\u00a0array(\"value\"\u00a0=>\u00a0\"foo\");echo\u00a0\"this\u00a0is\u00a0{$baz['value']}\u00a0!\";\u00a0\/\/\u00a0this\u00a0is\u00a0foo\u00a0!\/\/\u00a0Using\u00a0single\u00a0quotes\u00a0will\u00a0print\u00a0the\u00a0variable\u00a0name,\u00a0not\u00a0the\u00a0valueecho\u00a0'foo\u00a0is\u00a0$foo';\u00a0\/\/\u00a0foo\u00a0is\u00a0$foo\/\/\u00a0If\u00a0you\u00a0are\u00a0not\u00a0using\u00a0any\u00a0other\u00a0characters,\u00a0you\u00a0can\u00a0just\u00a0echo\u00a0variablesecho\u00a0$foo;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0foobarecho\u00a0$foo,$bar;\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0foobarbarbaz\/\/\u00a0Some\u00a0people\u00a0prefer\u00a0passing\u00a0multiple\u00a0parameters\u00a0to\u00a0echo\u00a0over\u00a0concatenation.echo\u00a0'This\u00a0',\u00a0'string\u00a0',\u00a0'was\u00a0',\u00a0'made\u00a0',\u00a0'with\u00a0multiple\u00a0parameters.',\u00a0chr(10);echo\u00a0'This\u00a0'\u00a0.\u00a0'string\u00a0'\u00a0.\u00a0'was\u00a0'\u00a0.\u00a0'made\u00a0'\u00a0.\u00a0'with\u00a0concatenation.'\u00a0.\u00a0\"\\n\";echo\u00a0<<<ENDThis\u00a0uses\u00a0the\u00a0\"here\u00a0document\"\u00a0syntax\u00a0to\u00a0outputmultiple\u00a0lines\u00a0with\u00a0$variable\u00a0interpolation.\u00a0Notethat\u00a0the\u00a0here\u00a0document\u00a0terminator\u00a0must\u00a0appear\u00a0on\u00a0aline\u00a0with\u00a0just\u00a0a\u00a0semicolon.\u00a0no\u00a0extra\u00a0whitespace!END;\/\/\u00a0Because\u00a0echo\u00a0does\u00a0not\u00a0behave\u00a0like\u00a0a\u00a0function,\u00a0the\u00a0following\u00a0code\u00a0is\u00a0invalid.($some_var)\u00a0?\u00a0echo\u00a0'true'\u00a0:\u00a0echo\u00a0'false';\/\/\u00a0However,\u00a0the\u00a0following\u00a0examples\u00a0will\u00a0work:($some_var)\u00a0?\u00a0print\u00a0'true'\u00a0:\u00a0print\u00a0'false';\u00a0\/\/\u00a0print\u00a0is\u00a0also\u00a0a\u00a0construct,\u00a0but\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0it\u00a0behaves\u00a0like\u00a0a\u00a0function,\u00a0so\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0it\u00a0may\u00a0be\u00a0used\u00a0in\u00a0this\u00a0context.echo\u00a0$some_var\u00a0?\u00a0'true':\u00a0'false';\u00a0\/\/\u00a0changing\u00a0the\u00a0statement\u00a0around?>                        Notes   Note: Because this is a language construct and not a function, it cannot be called using variable functions          See Also            print() - Output a string     printf() - Output a formatted string     flush() - Flush the output buffer     Heredoc syntax"},{"url":"http:\/\/www.php.net\/manual\/en\/function.crypt.php","title":"crypt","description":"crypt   (PHP 4, PHP 5)crypt \u2014 One-way string hashing          Description       string crypt     ( string $str    [, string $salt   ] )        crypt() will return a hashed string using the    standard Unix DES-based algorithm or    alternative algorithms that may be available on the system.          Some operating systems support more than one type of hash.  In    fact, sometimes the standard DES-based algorithm is replaced by an    MD5-based algorithm.  The hash type is triggered by the salt argument.    Prior to 5.3, PHP would determine the available algorithms at install-time    based on the system&#039;s crypt(). If no salt is provided, PHP will    auto-generate either a standard two character (DES) salt, or a twelve    character (MD5), depending on the availability of MD5 crypt().  PHP sets a    constant named CRYPT_SALT_LENGTH which indicates the    longest valid salt allowed by the available hashes.          The standard DES-based crypt() returns the    salt as the first two characters of the output. It also only uses the    first eight characters of str, so longer strings    that start with the same eight characters will generate the same result    (when the same salt is used).          On systems where the crypt() function supports multiple    hash types, the following constants are set to 0 or 1    depending on whether the given type is available:                     CRYPT_STD_DES - Standard DES-based hash with a two character salt        from the alphabet \".\/0-9A-Za-z\". Using invalid characters in the salt will cause        crypt() to fail.                        CRYPT_EXT_DES - Extended DES-based hash. The \"salt\" is a      9-character string consisting of an underscore followed by 4 bytes of iteration count and      4 bytes of salt. These are encoded as printable characters, 6 bits per character, least      significant character first. The values 0 to 63 are encoded as \".\/0-9A-Za-z\". Using invalid      characters in the salt will cause crypt() to fail.                        CRYPT_MD5 - MD5 hashing with a twelve character salt starting with      $1$                        CRYPT_BLOWFISH - Blowfish hashing with a salt as follows:      \"$2a$\", a two digit cost parameter, \"$\", and 22 digits from the alphabet      \".\/0-9A-Za-z\". Using characters outside of this range in the salt will cause crypt() to      return a zero-length string. The two digit cost parameter is the base-2 logarithm of the      iteration count for the underlying Blowfish-based hashing algorithmeter and must be in      range 04-31, values outside this range will cause crypt() to fail.                        CRYPT_SHA256 - SHA-256 hash with a sixteen character salt      prefixed with $5$. If the salt string starts with &#039;rounds=<N>$&#039;, the numeric value of N      is used to indicate how many times the hashing loop should be executed, much like the cost      parameter on Blowfish. The default number of rounds is 5000, there is a minimum of      1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to      the nearest limit.                        CRYPT_SHA512 - SHA-512 hash with a sixteen character salt      prefixed with $6$. If the salt string starts with &#039;rounds=<N>$&#039;, the numeric value of N      is used to indicate how many times the hashing loop should be executed, much like the cost      parameter on Blowfish. The default number of rounds is 5000, there is a minimum of      1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to      the nearest limit.               Note:          As of PHP 5.3.0, PHP contains its own implementation and will use that     if the system lacks of support for one or more of the algorithms.                 Parameters                    str                      The string to be hashed.                                salt                      An optional salt string to base the hashing on. If not provided, the        behaviour is defined by the algorithm implementation and can lead to        unexpected results.                                      Return Values       Returns the hashed string or a string that is shorter than 13 characters    and is guaranteed to differ from the salt on failure.             Changelog                                 Version        Description                                    5.3.2                 Added SHA-256 and SHA-512 crypt based on Ulrich Drepper&#039;s          \u00bb\u00a0implementation.                               5.3.2                 Fixed Blowfish behaviour on invalid rounds to return \"failure\"          string (\"*0\" or \"*1\"), instead of falling back to DES.                               5.3.0                 PHP now contains its own implementation for the MD5 crypt, Standard DES,         Extended DES and the Blowfish algorithms and will use that if the system         lacks of support for one or more of the algorithms.                                             Examples            Example #1 crypt() examples       <?php$password\u00a0=\u00a0crypt('mypassword');\u00a0\/\/\u00a0let\u00a0the\u00a0salt\u00a0be\u00a0automatically\u00a0generated\/*\u00a0You\u00a0should\u00a0pass\u00a0the\u00a0entire\u00a0results\u00a0of\u00a0crypt()\u00a0as\u00a0the\u00a0salt\u00a0for\u00a0comparing\u00a0a\u00a0\u00a0\u00a0password,\u00a0to\u00a0avoid\u00a0problems\u00a0when\u00a0different\u00a0hashing\u00a0algorithms\u00a0are\u00a0used.\u00a0(As\u00a0\u00a0\u00a0it\u00a0says\u00a0above,\u00a0standard\u00a0DES-based\u00a0password\u00a0hashing\u00a0uses\u00a0a\u00a02-character\u00a0salt,\u00a0\u00a0\u00a0but\u00a0MD5-based\u00a0hashing\u00a0uses\u00a012.)\u00a0*\/if\u00a0(crypt($user_input,\u00a0$password)\u00a0==\u00a0$password)\u00a0{\u00a0\u00a0\u00a0echo\u00a0\"Password\u00a0verified!\";}?>                           Example #2 Using crypt() with htpasswd       <?php\/\/\u00a0Set\u00a0the\u00a0password$password\u00a0=\u00a0'mypassword';\/\/\u00a0Get\u00a0the\u00a0hash,\u00a0letting\u00a0the\u00a0salt\u00a0be\u00a0automatically\u00a0generated$hash\u00a0=\u00a0crypt($password);?>                           Example #3 Using crypt() with different hash types       <?phpif\u00a0(CRYPT_STD_DES\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Standard\u00a0DES:\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'rl')\u00a0.\u00a0\"\\n\";}if\u00a0(CRYPT_EXT_DES\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Extended\u00a0DES:\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'_J9..rasm')\u00a0.\u00a0\"\\n\";}if\u00a0(CRYPT_MD5\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'MD5:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$1$rasmusle$')\u00a0.\u00a0\"\\n\";}if\u00a0(CRYPT_BLOWFISH\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Blowfish:\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$2a$07$usesomesillystringforsalt$')\u00a0.\u00a0\"\\n\";}if\u00a0(CRYPT_SHA256\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'SHA-256:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$5$rounds=5000$usesomesillystringforsalt$')\u00a0.\u00a0\"\\n\";}if\u00a0(CRYPT_SHA512\u00a0==\u00a01)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'SHA-512:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$6$rounds=5000$usesomesillystringforsalt$')\u00a0.\u00a0\"\\n\";}?>             The above example will output something similar to:       Standard DES: rl.3StKT.4T8M Extended DES: _J9..rasmBYk8r9AiWNc MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0 Blowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e.\/U9C8sBjqp8I90dH6hi SHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH\/Tp.6 SHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP\/EN5mcO.ChWQW21                       Notes   Note:          There is no decrypt function, since crypt() uses a     one-way algorithm.                 See Also            md5() - Calculate the md5 hash of a string     The Mcrypt extension     The Unix man page for your crypt function for more information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fprintf.php","title":"fprintf","description":"fprintf   (PHP 5)fprintf \u2014 Write a formatted string to a stream          Description       int fprintf     ( resource $handle    , string $format    [, mixed $args    [, mixed $...   ]] )        Write a string produced according to format to the    stream resource specified by handle.            Parameters                    handle              A file system pointer resource that is typically created using fopen().                         format                      See sprintf() for a description of         format.                                args                                              ...                                                   Return Values       Returns the length of the string written.            Examples            Example #1 fprintf(): zero-padded integers       <?phpif\u00a0(!($fp\u00a0=\u00a0fopen('date.txt',\u00a0'w')))\u00a0{\u00a0\u00a0\u00a0\u00a0return;}fprintf($fp,\u00a0\"%04d-%02d-%02d\",\u00a0$year,\u00a0$month,\u00a0$day);\/\/\u00a0will\u00a0write\u00a0the\u00a0formatted\u00a0ISO\u00a0date\u00a0to\u00a0date.txt?>                     Example #2 fprintf(): formatting currency       <?phpif\u00a0(!($fp\u00a0=\u00a0fopen('currency.txt',\u00a0'w')))\u00a0{\u00a0\u00a0\u00a0\u00a0return;}$money1\u00a0=\u00a068.75;$money2\u00a0=\u00a054.35;$money\u00a0=\u00a0$money1\u00a0+\u00a0$money2;\/\/\u00a0echo\u00a0$money\u00a0will\u00a0output\u00a0\"123.1\";$len\u00a0=\u00a0fprintf($fp,\u00a0'%01.2f',\u00a0$money);\/\/\u00a0will\u00a0write\u00a0\"123.10\"\u00a0to\u00a0currency.txtecho\u00a0\"wrote\u00a0$len\u00a0bytes\u00a0to\u00a0currency.txt\";\/\/\u00a0use\u00a0the\u00a0return\u00a0value\u00a0of\u00a0fprintf\u00a0to\u00a0determine\u00a0how\u00a0many\u00a0bytes\u00a0we\u00a0wrote?>                        See Also            printf() - Output a formatted string     sprintf() - Return a formatted string     sscanf() - Parses input from a string according to a format     fscanf() - Parses input from a file according to a format     vsprintf() - Return a formatted string     number_format() - Format a number with grouped thousands"},{"url":"http:\/\/www.php.net\/manual\/en\/function.crc32.php","title":"crc32","description":"crc32   (PHP 4 >= 4.0.1, PHP 5)crc32 \u2014 Calculates the crc32 polynomial of a string          Description       int crc32     ( string $str    )        Generates the cyclic redundancy checksum polynomial of 32-bit    lengths of the str. This is usually used    to validate the integrity of data being transmitted.          Because PHP&#039;s integer type is signed, and many crc32 checksums will    result in negative integers, you need to use the \"%u\" formatter of    sprintf() or printf() to get    the string representation of the unsigned crc32 checksum.            Parameters                    str                      The data.                                     Return Values       Returns the crc32 checksum of str as an integer.            Examples            Example #1 Displaying a crc32 checksum           This example shows how to print a converted checksum with the      printf() function:            <?php$checksum\u00a0=\u00a0crc32(\"The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.\");printf(\"%u\\n\",\u00a0$checksum);?>                        See Also            md5() - Calculate the md5 hash of a string     sha1() - Calculate the sha1 hash of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hebrev.php","title":"hebrev","description":"hebrev   (PHP 4, PHP 5)hebrev \u2014 Convert logical Hebrew text to visual text          Description       string hebrev     ( string $hebrew_text    [, int $max_chars_per_line = 0   ] )        Converts logical Hebrew text to visual text.          The function tries to avoid breaking words.            Parameters                    hebrew_text                      A Hebrew input string.                                max_chars_per_line                      This optional parameter indicates maximum number of characters per        line that will be returned.                                     Return Values       Returns the visual string.            See Also            hebrevc() - Convert logical Hebrew text to visual text with newline conversion"},{"url":"http:\/\/www.php.net\/manual\/en\/function.explode.php","title":"explode","description":"explode   (PHP 4, PHP 5)explode \u2014 Split a string by string          Description       array explode     ( string $delimiter    , string $string    [, int $limit   ] )        Returns an array of strings, each of which is a substring of    string formed by splitting it on    boundaries formed by the string delimiter.            Parameters                    delimiter                      The boundary string.                                string                      The input string.                                limit                      If limit is set and positive, the returned array will contain        a maximum of limit elements with the last        element containing the rest of string.                      If the limit parameter is negative, all components        except the last -limit are returned.                      If the limit parameter is zero, then this is treated as 1.                                   Although implode() can, for historical reasons,    accept its parameters in either order,    explode() cannot. You must ensure that the    delimiter argument comes before the    string argument.            Return Values       Returns an array of strings    created by splitting the string parameter on    boundaries formed by the delimiter.          If delimiter is an empty string (\"\"),    explode() will return FALSE.    If delimiter contains a value that is not    contained in string and a negative    limit is used, then an empty array will be    returned, otherwise an array containing    string will be returned.            Changelog                                 Version        Description                                    5.1.0                 Support for negative limits was added                               4.0.1                 The limit parameter was added                                            Examples            Example #1 explode() examples       <?php\/\/\u00a0Example\u00a01$pizza\u00a0\u00a0=\u00a0\"piece1\u00a0piece2\u00a0piece3\u00a0piece4\u00a0piece5\u00a0piece6\";$pieces\u00a0=\u00a0explode(\"\u00a0\",\u00a0$pizza);echo\u00a0$pieces[0];\u00a0\/\/\u00a0piece1echo\u00a0$pieces[1];\u00a0\/\/\u00a0piece2\/\/\u00a0Example\u00a02$data\u00a0=\u00a0\"foo:*:1023:1000::\/home\/foo:\/bin\/sh\";list($user,\u00a0$pass,\u00a0$uid,\u00a0$gid,\u00a0$gecos,\u00a0$home,\u00a0$shell)\u00a0=\u00a0explode(\":\",\u00a0$data);echo\u00a0$user;\u00a0\/\/\u00a0fooecho\u00a0$pass;\u00a0\/\/\u00a0*?>                           Example #2 limit parameter examples       <?php$str\u00a0=\u00a0'one|two|three|four';\/\/\u00a0positive\u00a0limitprint_r(explode('|',\u00a0$str,\u00a02));\/\/\u00a0negative\u00a0limit\u00a0(since\u00a0PHP\u00a05.1)print_r(explode('|',\u00a0$str,\u00a0-1));?>             The above example will output:       Array (     [0] => one     [1] => two|three|four ) Array (     [0] => one     [1] => two     [2] => three )                      Notes   Note: This function is binary-safe.         See Also            preg_split() - Split string by a regular expression     str_split() - Convert a string to an array     mb_split() - Split multibyte string using regular expression     str_word_count() - Return information about words used in a string     strtok() - Tokenize string     implode() - Join array elements with a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hex2bin.php","title":"hex2bin","description":"hex2bin   (No version information available, might only be in SVN)hex2bin \u2014 Converts the hex representation of data to binary         Description       string hex2bin     ( string $data    )            WarningThis function is currently not documented; only its argument list is available.           Parameters              data                   Hexadecimal representation of data.                              Return Values       Returns the binary representation of the given data.            See Also            bin2hex() - Convert binary data into hexadecimal representation     unpack() - Unpack data from binary string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-html-translation-table.php","title":"get_html_translation_table","description":"get_html_translation_table   (PHP 4, PHP 5)get_html_translation_table \u2014 Returns the translation table used by htmlspecialchars() and htmlentities()          Description       array get_html_translation_table     ([ int $table = HTML_SPECIALCHARS    [, int $quote_style = ENT_COMPAT    [, string $charset_hint   ]]] )        get_html_translation_table() will return the    translation table that is used internally for    htmlspecialchars() and    htmlentities() with the default charset.      Note:          Special characters can be encoded in several ways. E.g.     \" can be encoded as &quot;,     &#34; or &#x22.     get_html_translation_table() returns only the form used     by htmlspecialchars() and     htmlentities().                Parameters                    table                      There are two new constants (HTML_ENTITIES,        HTML_SPECIALCHARS) that allow you to specify the        table you want.                                quote_style                      Like the htmlspecialchars() and        htmlentities() functions you can optionally specify        the quote_style you are working with.        See the description        of these modes in htmlspecialchars().                                charset_hint                      Like htmlentities(), it takes an optional        third argument charset which defines character        set used in conversion.        Presently, the ISO-8859-1 character set is used as the default.                  Following character sets are supported in PHP 4.3.0 and later.     Supported charsets                  Charset      Aliases      Description                          ISO-8859-1      ISO8859-1             Western European, Latin-1                       ISO-8859-15      ISO8859-15             Western European, Latin-9. Adds the Euro sign, French and Finnish       letters missing in Latin-1 (ISO-8859-1).                       UTF-8      \u00a0             ASCII compatible multi-byte 8-bit Unicode.                       cp866      ibm866, 866             DOS-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1251      Windows-1251, win-1251, 1251             Windows-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1252      Windows-1252, 1252             Windows specific charset for Western European.                       KOI8-R      koi8-ru, koi8r             Russian. This charset is supported in 4.3.2.                       BIG5      950             Traditional Chinese, mainly used in Taiwan.                       GB2312      936             Simplified Chinese, national standard character set.                       BIG5-HKSCS      \u00a0             Big5 with Hong Kong extensions, Traditional Chinese.                       Shift_JIS      SJIS, 932             Japanese                       EUC-JP      EUCJP             Japanese                       &#039;&#039;      \u00a0             An empty string activates detection from script encoding (Zend multibyte),       default_charset and current       locale (see nl_langinfo() and       setlocale()), in this order. Not recommended.                        Note:        Any other character sets are not recognized. The default encoding will be    used instead and a warning will be emitted.                                      Return Values       Returns the translation table as an array.            Changelog                                 Version        Description                                    5.3.4                 The charset_hint parameter was added.                                            Examples            Example #1 Translation Table Example       <?php$trans\u00a0=\u00a0get_html_translation_table(HTML_ENTITIES);$str\u00a0=\u00a0\"Hallo\u00a0&\u00a0<Frau>\u00a0&\u00a0Kr\u00e4mer\";$encoded\u00a0=\u00a0strtr($str,\u00a0$trans);echo\u00a0$encoded;?>             The above example will output:       Hallo &amp; &lt;Frau&gt; &amp; Kr&auml;mer                      See Also            htmlspecialchars() - Convert special characters to HTML entities     htmlentities() - Convert all applicable characters to HTML entities     html_entity_decode() - Convert all HTML entities to their applicable characters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hebrevc.php","title":"hebrevc","description":"hebrevc   (PHP 4, PHP 5)hebrevc \u2014 Convert logical Hebrew text to visual text with newline conversion          Description       string hebrevc     ( string $hebrew_text    [, int $max_chars_per_line = 0   ] )        This function is similar to hebrev() with the    difference that it converts newlines (\\n) to \"<br>\\n\".          The function tries to avoid breaking words.            Parameters                    hebrew_text                      A Hebrew input string.                                max_chars_per_line                      This optional parameter indicates maximum number of characters per        line that will be returned.                                     Return Values       Returns the visual string.            See Also            hebrev() - Convert logical Hebrew text to visual text"},{"url":"http:\/\/www.php.net\/manual\/en\/function.htmlspecialchars-decode.php","title":"htmlspecialchars_decode","description":"htmlspecialchars_decode   (PHP 5 >= 5.1.0)htmlspecialchars_decode \u2014     Convert special HTML entities back to characters           Description       string htmlspecialchars_decode     ( string $string    [, int $quote_style = ENT_COMPAT   ] )         This function is the opposite of htmlspecialchars(). It    converts special HTML entities back to characters.          The converted entities are: &amp;,    &quot; (when ENT_NOQUOTES is not set),    &#039; (when ENT_QUOTES is set),    &lt; and &gt;.            Parameters                    string                      The string to decode                                quote_style                      The quote style. One of the following constants:                 quote_style constants                                          Constant Name            Description                                                        ENT_COMPAT            Will convert double-quotes and leave single-quotes alone             (default)                                   ENT_QUOTES            Will convert both double and single quotes                                   ENT_NOQUOTES            Will leave both double and single quotes unconverted                                                                             Return Values       Returns the decoded string.            Examples            Example #1 A htmlspecialchars_decode() example       <?php$str\u00a0=\u00a0'<p>this\u00a0-&gt;\u00a0&quot;<\/p>';echo\u00a0htmlspecialchars_decode($str);\/\/\u00a0note\u00a0that\u00a0here\u00a0the\u00a0quotes\u00a0aren't\u00a0convertedecho\u00a0htmlspecialchars_decode($str,\u00a0ENT_NOQUOTES);?>             The above example will output:       <p>this -> \"<\/p> <p>this -> &quot;<\/p>                      See Also            htmlspecialchars() - Convert special characters to HTML entities     html_entity_decode() - Convert all HTML entities to their applicable characters     get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities"},{"url":"http:\/\/www.php.net\/manual\/en\/function.html-entity-decode.php","title":"html_entity_decode","description":"html_entity_decode   (PHP 4 >= 4.3.0, PHP 5)html_entity_decode \u2014 Convert all HTML entities to their applicable characters          Description       string html_entity_decode     ( string $string    [, int $quote_style = ENT_COMPAT    [, string $charset = &#039;UTF-8&#039;   ]] )        html_entity_decode() is the opposite of    htmlentities() in that it converts all HTML entities    to their applicable characters from string.            Parameters                    string                      The input string.                                quote_style                      The optional second quote_style parameter lets        you define what will be done with &#039;single&#039; and \"double\" quotes.  It takes        on one of three constants:                 Available quote_style constants                                          Constant Name            Description                                                        ENT_COMPAT            Will convert double-quotes and leave single-quotes alone.                                   ENT_QUOTES            Will convert both double and single quotes.                                   ENT_NOQUOTES            Will leave both double and single quotes unconverted.                                                                        charset                      This defines the character set used in conversion. Using an empty string        will activate automatic detection based on mbstring&#039;s internal encoding        and current locale.                  Following character sets are supported in PHP 4.3.0 and later.     Supported charsets                  Charset      Aliases      Description                          ISO-8859-1      ISO8859-1             Western European, Latin-1                       ISO-8859-15      ISO8859-15             Western European, Latin-9. Adds the Euro sign, French and Finnish       letters missing in Latin-1 (ISO-8859-1).                       UTF-8      \u00a0             ASCII compatible multi-byte 8-bit Unicode.                       cp866      ibm866, 866             DOS-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1251      Windows-1251, win-1251, 1251             Windows-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1252      Windows-1252, 1252             Windows specific charset for Western European.                       KOI8-R      koi8-ru, koi8r             Russian. This charset is supported in 4.3.2.                       BIG5      950             Traditional Chinese, mainly used in Taiwan.                       GB2312      936             Simplified Chinese, national standard character set.                       BIG5-HKSCS      \u00a0             Big5 with Hong Kong extensions, Traditional Chinese.                       Shift_JIS      SJIS, 932             Japanese                       EUC-JP      EUCJP             Japanese                       &#039;&#039;      \u00a0             An empty string activates detection from script encoding (Zend multibyte),       default_charset and current       locale (see nl_langinfo() and       setlocale()), in this order. Not recommended.                        Note:        Any other character sets are not recognized. The default encoding will be    used instead and a warning will be emitted.                                      Return Values       Returns the decoded string.            Changelog                                 Version        Description                                    5.4.0                 Default charset changed from ISO-8859-1 to UTF-8.                               5.0.0                 Support for multi-byte character sets was added.                                            Examples            Example #1 Decoding HTML entities       <?php$orig\u00a0=\u00a0\"I'll\u00a0\\\"walk\\\"\u00a0the\u00a0<b>dog<\/b>\u00a0now\";$a\u00a0=\u00a0htmlentities($orig);$b\u00a0=\u00a0html_entity_decode($a);echo\u00a0$a;\u00a0\/\/\u00a0I'll\u00a0&quot;walk&quot;\u00a0the\u00a0&lt;b&gt;dog&lt;\/b&gt;\u00a0nowecho\u00a0$b;\u00a0\/\/\u00a0I'll\u00a0\"walk\"\u00a0the\u00a0<b>dog<\/b>\u00a0now\/\/\u00a0For\u00a0users\u00a0prior\u00a0to\u00a0PHP\u00a04.3.0\u00a0you\u00a0may\u00a0do\u00a0this:function\u00a0unhtmlentities($string){\u00a0\u00a0\u00a0\u00a0\/\/\u00a0replace\u00a0numeric\u00a0entities\u00a0\u00a0\u00a0\u00a0$string\u00a0=\u00a0preg_replace('~&#x([0-9a-f]+);~ei',\u00a0'chr(hexdec(\"\\\\1\"))',\u00a0$string);\u00a0\u00a0\u00a0\u00a0$string\u00a0=\u00a0preg_replace('~&#([0-9]+);~e',\u00a0'chr(\"\\\\1\")',\u00a0$string);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0replace\u00a0literal\u00a0entities\u00a0\u00a0\u00a0\u00a0$trans_tbl\u00a0=\u00a0get_html_translation_table(HTML_ENTITIES);\u00a0\u00a0\u00a0\u00a0$trans_tbl\u00a0=\u00a0array_flip($trans_tbl);\u00a0\u00a0\u00a0\u00a0return\u00a0strtr($string,\u00a0$trans_tbl);}$c\u00a0=\u00a0unhtmlentities($a);echo\u00a0$c;\u00a0\/\/\u00a0I'll\u00a0\"walk\"\u00a0the\u00a0<b>dog<\/b>\u00a0now?>                           Notes   Note:          You might wonder why trim(html_entity_decode(&#039;&nbsp;&#039;)); doesn&#039;t     reduce the string to an empty string, that&#039;s because the &#039;&nbsp;&#039;     entity is not ASCII code 32 (which is stripped by     trim()) but ASCII code 160 (0xa0) in the default ISO     8859-1 characterset.                See Also            htmlentities() - Convert all applicable characters to HTML entities     htmlspecialchars() - Convert special characters to HTML entities     get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities     urldecode() - Decodes URL-encoded string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.join.php","title":"join","description":"join   (PHP 4, PHP 5)join \u2014 Alias of implode()         Description       This function is an alias of:     implode()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.lcfirst.php","title":"lcfirst","description":"lcfirst   (PHP 5 >= 5.3.0)lcfirst \u2014 Make a string&#039;s first character lowercase          Description       string lcfirst     ( string $str    )        Returns a string with the first character of    str , lowercased if that character is    alphabetic.          Note that &#039;alphabetic&#039; is determined by the current locale. For    instance, in the default \"C\" locale characters such as umlaut-a    (\u00e4) will not be converted.            Parameters                    str                      The input string.                                     Return Values       Returns the resulting string.            Examples            Example #1 lcfirst() example       <?php$foo\u00a0=\u00a0'HelloWorld';$foo\u00a0=\u00a0lcfirst($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0helloWorld$bar\u00a0=\u00a0'HELLO\u00a0WORLD!';$bar\u00a0=\u00a0lcfirst($bar);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0hELLO\u00a0WORLD!$bar\u00a0=\u00a0lcfirst(strtoupper($bar));\u00a0\/\/\u00a0hELLO\u00a0WORLD!?>                           See Also            ucfirst() - Make a string's first character uppercase     strtolower() - Make a string lowercase     strtoupper() - Make a string uppercase     ucwords() - Uppercase the first character of each word in a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.htmlspecialchars.php","title":"htmlspecialchars","description":"htmlspecialchars   (PHP 4, PHP 5)htmlspecialchars \u2014 Convert special characters to HTML entities         Description       string htmlspecialchars     ( string $string    [, int $flags = ENT_COMPAT | ENT_HTML401    [, string $charset    [, bool $double_encode = true   ]]] )        Certain characters have special significance in HTML, and should    be represented by HTML entities if they are to preserve their    meanings. This function returns a string with some of these    conversions made; the translations made are those most    useful for everyday web programming. If you require all HTML    character entities to be translated, use    htmlentities() instead.          This function is useful in preventing user-supplied text from    containing HTML markup, such as in a message board or guest book    application.          The translations performed are:                      &#039;&&#039; (ampersand) becomes &#039;&amp;&#039;                             &#039;\"&#039; (double quote) becomes &#039;&quot;&#039; when ENT_NOQUOTES       is not set.                             \"&#039;\" (single quote) becomes &#039;&#039;&#039; only when       ENT_QUOTES is set.                             &#039;<&#039; (less than) becomes &#039;&lt;&#039;                             &#039;>&#039; (greater than) becomes &#039;&gt;&#039;                           Parameters                    string                      The string being converted.                                flags                      A bitmask of one or more of the following flags, which specify how to handle quotes,        invalid code unit sequences and the used document type. The default is        ENT_COMPAT | ENT_HTML401.                 Available flags constants                                          Constant Name            Description                                                        ENT_COMPAT            Will convert double-quotes and leave single-quotes alone.                                   ENT_QUOTES            Will convert both double and single quotes.                                   ENT_NOQUOTES            Will leave both double and single quotes unconverted.                                   ENT_IGNORE                         Silently discard invalid code unit sequences instead of returning             an empty string. This is provided for backwards compatibility;             avoid using it as it may have security implications.                                               ENT_SUBSTITUTE                         Replace invalid code unit sequences with a Unicode Replacement Character             U+FFFD (UTF-8) or &#FFFD; (otherwise) instead of returning an empty string.                                               ENT_DISALLOWED                         Replace code unit sequences, which are invalid in the specified document type,             with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise).                                               ENT_HTML401                         Handle code as HTML 4.01.                                               ENT_XML1                         Handle code as XML 1.                                               ENT_XHTML                         Handle code as XHTML.                                               ENT_HTML5                         Handle code as HTML 5.                                                                                    charset                      Defines character set used in conversion.        The default character set is ISO-8859-1.                      For the purposes of this function, the charsets        ISO-8859-1, ISO-8859-15,        UTF-8, cp866,        cp1251, cp1252, and        KOI8-R are effectively equivalent, provided the        string itself is valid for the character set, as        the characters affected by htmlspecialchars() occupy        the same positions in all of these charsets.                  Following character sets are supported in PHP 4.3.0 and later.     Supported charsets                  Charset      Aliases      Description                          ISO-8859-1      ISO8859-1             Western European, Latin-1                       ISO-8859-15      ISO8859-15             Western European, Latin-9. Adds the Euro sign, French and Finnish       letters missing in Latin-1 (ISO-8859-1).                       UTF-8      \u00a0             ASCII compatible multi-byte 8-bit Unicode.                       cp866      ibm866, 866             DOS-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1251      Windows-1251, win-1251, 1251             Windows-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1252      Windows-1252, 1252             Windows specific charset for Western European.                       KOI8-R      koi8-ru, koi8r             Russian. This charset is supported in 4.3.2.                       BIG5      950             Traditional Chinese, mainly used in Taiwan.                       GB2312      936             Simplified Chinese, national standard character set.                       BIG5-HKSCS      \u00a0             Big5 with Hong Kong extensions, Traditional Chinese.                       Shift_JIS      SJIS, 932             Japanese                       EUC-JP      EUCJP             Japanese                       &#039;&#039;      \u00a0             An empty string activates detection from script encoding (Zend multibyte),       default_charset and current       locale (see nl_langinfo() and       setlocale()), in this order. Not recommended.                        Note:        Any other character sets are not recognized. The default encoding will be    used instead and a warning will be emitted.                                 double_encode                      When double_encode is turned off PHP will not        encode existing html entities, the default is to convert everything.                                     Return Values       The converted string.          If the input string contains an invalid code unit    sequence within the given charset and the    ENT_IGNORE flag is not set, then    htmlspecialchars() will return an empty string.            Changelog                                 Version        Description                                    5.4.0                 The constants ENT_SUBSTITUTE, ENT_DISALLOWED,         ENT_HTML401, ENT_XML1,         ENT_XHTML and ENT_HTML5 were added.                               5.3.0                 The constant ENT_IGNORE was added.                               5.2.3                 The double_encode parameter was added.                               4.1.0                 The charset parameter was added.                                            Examples            Example #1 htmlspecialchars() example       <?php$new\u00a0=\u00a0htmlspecialchars(\"<a\u00a0href='test'>Test<\/a>\",\u00a0ENT_QUOTES);echo\u00a0$new;\u00a0\/\/\u00a0&lt;a\u00a0href=&#039;test&#039;&gt;Test&lt;\/a&gt;?>                        Notes   Note:          Note that this function does not translate anything beyond what     is listed above. For full entity translation, see     htmlentities().                See Also            get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities     htmlspecialchars_decode() - Convert special HTML entities back to characters     strip_tags() - Strip HTML and PHP tags from a string     htmlentities() - Convert all applicable characters to HTML entities     nl2br() - Inserts HTML line breaks before all newlines in a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.localeconv.php","title":"localeconv","description":"localeconv   (PHP 4 >= 4.0.5, PHP 5)localeconv \u2014 Get numeric formatting information          Description       array localeconv     ( void    )        Returns an associative array containing localized numeric and    monetary formatting information.            Return Values       localeconv() returns data based upon the current locale    as set by setlocale().  The associative array that is    returned contains the following fields:                              Array element        Description                                    decimal_point        Decimal point character                       thousands_sep        Thousands separator                       grouping        Array containing numeric groupings                       int_curr_symbol        International currency symbol (i.e. USD)                       currency_symbol        Local currency symbol (i.e. $)                       mon_decimal_point        Monetary decimal point character                       mon_thousands_sep        Monetary thousands separator                       mon_grouping        Array containing monetary groupings                       positive_sign        Sign for positive values                       negative_sign        Sign for negative values                       int_frac_digits        International fractional digits                       frac_digits        Local fractional digits                       p_cs_precedes                 TRUE if currency_symbol precedes a positive value, FALSE         if it succeeds one                               p_sep_by_space                 TRUE if a space separates currency_symbol from a positive         value, FALSE otherwise                               n_cs_precedes                 TRUE if currency_symbol precedes a negative value, FALSE         if it succeeds one                               n_sep_by_space                 TRUE if a space separates currency_symbol from a negative         value, FALSE otherwise                               p_sign_posn                           0 - Parentheses surround the quantity and currency_symbol          1 - The sign string precedes the quantity and currency_symbol          2 - The sign string succeeds the quantity and currency_symbol          3 - The sign string immediately precedes the currency_symbol          4 - The sign string immediately succeeds the currency_symbol                                        n_sign_posn                           0 - Parentheses surround the quantity and currency_symbol          1 - The sign string precedes the quantity and currency_symbol          2 - The sign string succeeds the quantity and currency_symbol          3 - The sign string immediately precedes the currency_symbol          4 - The sign string immediately succeeds the currency_symbol                                                   The p_sign_posn, and n_sign_posn contain a string    of formatting options. Each number representing one of the above listed conditions.          The grouping fields contain arrays that define the way numbers should be    grouped. For example, the monetary grouping field for the nl_NL locale (in    UTF-8 mode with the euro sign), would contain a 2 item array with the    values 3 and 3. The higher the index in the array, the farther left the    grouping is. If an array element is equal to CHAR_MAX,    no further grouping is done. If an array element is equal to 0, the previous    element should be used.            Examples            Example #1 localeconv() example       <?phpif\u00a0(false\u00a0!==\u00a0setlocale(LC_ALL,\u00a0'nl_NL.UTF-8@euro'))\u00a0{\u00a0\u00a0\u00a0\u00a0$locale_info\u00a0=\u00a0localeconv();\u00a0\u00a0\u00a0\u00a0print_r($locale_info);}?>             The above example will output:       Array (     [decimal_point] => .     [thousands_sep] =>     [int_curr_symbol] => EUR     [currency_symbol] => \u20ac     [mon_decimal_point] => ,     [mon_thousands_sep] =>     [positive_sign] =>     [negative_sign] => -     [int_frac_digits] => 2     [frac_digits] => 2     [p_cs_precedes] => 1     [p_sep_by_space] => 1     [n_cs_precedes] => 1     [n_sep_by_space] => 1     [p_sign_posn] => 1     [n_sign_posn] => 2     [grouping] => Array         (         )      [mon_grouping] => Array         (             [0] => 3             [1] => 3         )  )                         See Also            setlocale() - Set locale information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ltrim.php","title":"ltrim","description":"ltrim   (PHP 4, PHP 5)ltrim \u2014 Strip whitespace (or other characters) from the beginning of a string          Description       string ltrim     ( string $str    [, string $charlist   ] )        Strip whitespace (or other characters) from the beginning of a string.            Parameters                    str                      The input string.                                charlist                      You can also specify the characters you want to strip, by means of the        charlist parameter.        Simply list all characters that you want to be stripped. With        .. you can specify a range of characters.                                     Return Values       This function returns a string with whitespace stripped from the    beginning of str.    Without the second parameter,    ltrim() will strip these characters:                          \" \" (ASCII 32       (0x20)), an ordinary space.                             \"\\t\" (ASCII 9       (0x09)), a tab.                             \"\\n\" (ASCII 10       (0x0A)), a new line (line feed).                             \"\\r\" (ASCII 13       (0x0D)), a carriage return.                             \"\\0\" (ASCII 0       (0x00)), the NUL-byte.                              \"\\x0B\" (ASCII 11       (0x0B)), a vertical tab.                           Changelog                                 Version        Description                                    4.1.0                 The charlist parameter was added.                                            Examples            Example #1 Usage example of ltrim()       <?php$text\u00a0=\u00a0\"\\t\\tThese\u00a0are\u00a0a\u00a0few\u00a0words\u00a0:)\u00a0...\u00a0\u00a0\";$binary\u00a0=\u00a0\"\\x09Example\u00a0string\\x0A\";$hello\u00a0\u00a0=\u00a0\"Hello\u00a0World\";var_dump($text,\u00a0$binary,\u00a0$hello);print\u00a0\"\\n\";$trimmed\u00a0=\u00a0ltrim($text);var_dump($trimmed);$trimmed\u00a0=\u00a0ltrim($text,\u00a0\"\u00a0\\t.\");var_dump($trimmed);$trimmed\u00a0=\u00a0ltrim($hello,\u00a0\"Hdle\");var_dump($trimmed);\/\/\u00a0trim\u00a0the\u00a0ASCII\u00a0control\u00a0characters\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0$binary\/\/\u00a0(from\u00a00\u00a0to\u00a031\u00a0inclusive)$clean\u00a0=\u00a0ltrim($binary,\u00a0\"\\x00..\\x1F\");var_dump($clean);?>             The above example will output:       string(32) \"        These are a few words :) ...  \" string(16) \"    Example string \" string(11) \"Hello World\"  string(30) \"These are a few words :) ...  \" string(30) \"These are a few words :) ...  \" string(7) \"o World\" string(15) \"Example string \"                      See Also            trim() - Strip whitespace (or other characters) from the beginning and end of a string     rtrim() - Strip whitespace (or other characters) from the end of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.htmlentities.php","title":"htmlentities","description":"htmlentities   (PHP 4, PHP 5)htmlentities \u2014 Convert all applicable characters to HTML entities          Description       string htmlentities     ( string $string    [, int $flags = ENT_COMPAT | ENT_HTML401    [, string $charset    [, bool $double_encode = true   ]]] )        This function is identical to htmlspecialchars() in all    ways, except with htmlentities(), all characters which    have HTML character entity equivalents are translated into these entities.          If you&#039;re wanting to decode instead (the reverse) you can use    html_entity_decode().            Parameters                    string                      The input string.                                flags                      A bitmask of one or more of the following flags, which specify how to handle quotes,        invalid code unit sequences and the used document type. The default is        ENT_COMPAT | ENT_HTML401.                 Available flags constants                                          Constant Name            Description                                                        ENT_COMPAT            Will convert double-quotes and leave single-quotes alone.                                   ENT_QUOTES            Will convert both double and single quotes.                                   ENT_NOQUOTES            Will leave both double and single quotes unconverted.                                   ENT_IGNORE                         Silently discard invalid code unit sequences instead of returning             an empty string. This is provided for backwards compatibility;             avoid using it as it may have security implications.                                               ENT_SUBSTITUTE                         Replace invalid code unit sequences with a Unicode Replacement Character             U+FFFD (UTF-8) or &#FFFD; (otherwise) instead of returning an empty string.                                               ENT_DISALLOWED                         Replace code unit sequences, which are invalid in the specified document type,             with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise).                                               ENT_HTML401                         Handle code as HTML 4.01.                                               ENT_XML1                         Handle code as XML 1.                                               ENT_XHTML                         Handle code as XHTML.                                               ENT_HTML5                         Handle code as HTML 5.                                                                                    charset                      Like htmlspecialchars(), it takes an optional        third argument charset which defines character        set used in conversion.        Presently, the ISO-8859-1 character set is used as the default.        However, this default is very likely to change in future versions of        PHP; the programmer is highly encouraged to specify a value.                  Following character sets are supported in PHP 4.3.0 and later.     Supported charsets                  Charset      Aliases      Description                          ISO-8859-1      ISO8859-1             Western European, Latin-1                       ISO-8859-15      ISO8859-15             Western European, Latin-9. Adds the Euro sign, French and Finnish       letters missing in Latin-1 (ISO-8859-1).                       UTF-8      \u00a0             ASCII compatible multi-byte 8-bit Unicode.                       cp866      ibm866, 866             DOS-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1251      Windows-1251, win-1251, 1251             Windows-specific Cyrillic charset.       This charset is supported in 4.3.2.                       cp1252      Windows-1252, 1252             Windows specific charset for Western European.                       KOI8-R      koi8-ru, koi8r             Russian. This charset is supported in 4.3.2.                       BIG5      950             Traditional Chinese, mainly used in Taiwan.                       GB2312      936             Simplified Chinese, national standard character set.                       BIG5-HKSCS      \u00a0             Big5 with Hong Kong extensions, Traditional Chinese.                       Shift_JIS      SJIS, 932             Japanese                       EUC-JP      EUCJP             Japanese                       &#039;&#039;      \u00a0             An empty string activates detection from script encoding (Zend multibyte),       default_charset and current       locale (see nl_langinfo() and       setlocale()), in this order. Not recommended.                        Note:        Any other character sets are not recognized. The default encoding will be    used instead and a warning will be emitted.                                 double_encode                      When double_encode is turned off PHP will not        encode existing html entities. The default is to convert everything.                                     Return Values       Returns the encoded string.            Changelog                                 Version        Description                                    5.4.0                 The constants ENT_SUBSTITUTE, ENT_DISALLOWED,         ENT_HTML401, ENT_XML1,         ENT_XHTML and ENT_HTML5 were added.                               5.3.0                 The constant ENT_IGNORE was added.                               5.2.3                 The double_encode parameter was added.                               4.1.0                 The charset parameter was added.                               4.0.3                 The flags parameter was added.                                            Examples            Example #1 A htmlentities() example       <?php$str\u00a0=\u00a0\"A\u00a0'quote'\u00a0is\u00a0<b>bold<\/b>\";\/\/\u00a0Outputs:\u00a0A\u00a0'quote'\u00a0is\u00a0&lt;b&gt;bold&lt;\/b&gt;echo\u00a0htmlentities($str);\/\/\u00a0Outputs:\u00a0A\u00a0&#039;quote&#039;\u00a0is\u00a0&lt;b&gt;bold&lt;\/b&gt;echo\u00a0htmlentities($str,\u00a0ENT_QUOTES);?>                              Example #2 Usage of ENT_IGNORE       <?php$str\u00a0=\u00a0\"\\x8F!!!\";\/\/\u00a0Outputs\u00a0an\u00a0empty\u00a0stringecho\u00a0htmlentities($str,\u00a0ENT_QUOTES,\u00a0\"UTF-8\");\/\/\u00a0Outputs\u00a0\"!!!\"echo\u00a0htmlentities($str,\u00a0ENT_QUOTES\u00a0|\u00a0ENT_IGNORE,\u00a0\"UTF-8\");?>                        See Also            html_entity_decode() - Convert all HTML entities to their applicable characters     get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities     htmlspecialchars() - Convert special characters to HTML entities     nl2br() - Inserts HTML line breaks before all newlines in a string     urlencode() - URL-encodes string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.levenshtein.php","title":"levenshtein","description":"levenshtein   (PHP 4 >= 4.0.1, PHP 5)levenshtein \u2014 Calculate Levenshtein distance between two strings          Description       int levenshtein     ( string $str1    , string $str2    )        int levenshtein     ( string $str1    , string $str2    , int $cost_ins    , int $cost_rep    , int $cost_del    )        The Levenshtein distance is defined as the minimal number of    characters you have to replace, insert or delete to transform    str1 into str2.    The complexity of the algorithm is O(m*n),    where n and m are the    length of str1 and    str2 (rather good when compared to    similar_text(), which is O(max(n,m)**3),    but still expensive).          In its simplest form the function will take only the two    strings as parameter and will calculate just the number of    insert, replace and delete operations needed to transform    str1 into str2.          A second variant will take three additional parameters that    define the cost of insert, replace and delete operations.  This    is more general and adaptive than variant one, but not as    efficient.           Parameters                    str1                      One of the strings being evaluated for Levenshtein distance.                                str2                      One of the strings being evaluated for Levenshtein distance.                                cost_ins                      Defines the cost of insertion.                                cost_rep                      Defines the cost of replacement.                                cost_del                      Defines the cost of deletion.                                      Return Values       This function returns the Levenshtein-Distance between the    two argument strings or -1, if one of the argument strings    is longer than the limit of 255 characters.             Examples            Example #1 levenshtein() example       <?php\/\/\u00a0input\u00a0misspelled\u00a0word$input\u00a0=\u00a0'carrrot';\/\/\u00a0array\u00a0of\u00a0words\u00a0to\u00a0check\u00a0against$words\u00a0\u00a0=\u00a0array('apple','pineapple','banana','orange',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'radish','carrot','pea','bean','potato');\/\/\u00a0no\u00a0shortest\u00a0distance\u00a0found,\u00a0yet$shortest\u00a0=\u00a0-1;\/\/\u00a0loop\u00a0through\u00a0words\u00a0to\u00a0find\u00a0the\u00a0closestforeach\u00a0($words\u00a0as\u00a0$word)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0calculate\u00a0the\u00a0distance\u00a0between\u00a0the\u00a0input\u00a0word,\u00a0\u00a0\u00a0\u00a0\/\/\u00a0and\u00a0the\u00a0current\u00a0word\u00a0\u00a0\u00a0\u00a0$lev\u00a0=\u00a0levenshtein($input,\u00a0$word);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0check\u00a0for\u00a0an\u00a0exact\u00a0match\u00a0\u00a0\u00a0\u00a0if\u00a0($lev\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0closest\u00a0word\u00a0is\u00a0this\u00a0one\u00a0(exact\u00a0match)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$closest\u00a0=\u00a0$word;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$shortest\u00a0=\u00a00;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0break\u00a0out\u00a0of\u00a0the\u00a0loop;\u00a0we've\u00a0found\u00a0an\u00a0exact\u00a0match\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\/\/\u00a0if\u00a0this\u00a0distance\u00a0is\u00a0less\u00a0than\u00a0the\u00a0next\u00a0found\u00a0shortest\u00a0\u00a0\u00a0\u00a0\/\/\u00a0distance,\u00a0OR\u00a0if\u00a0a\u00a0next\u00a0shortest\u00a0word\u00a0has\u00a0not\u00a0yet\u00a0been\u00a0found\u00a0\u00a0\u00a0\u00a0if\u00a0($lev\u00a0<=\u00a0$shortest\u00a0||\u00a0$shortest\u00a0<\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0set\u00a0the\u00a0closest\u00a0match,\u00a0and\u00a0shortest\u00a0distance\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$closest\u00a0\u00a0=\u00a0$word;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$shortest\u00a0=\u00a0$lev;\u00a0\u00a0\u00a0\u00a0}}echo\u00a0\"Input\u00a0word:\u00a0$input\\n\";if\u00a0($shortest\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Exact\u00a0match\u00a0found:\u00a0$closest\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Did\u00a0you\u00a0mean:\u00a0$closest?\\n\";}?>             The above example will output:       Input word: carrrot Did you mean: carrot?                      See Also            soundex() - Calculate the soundex key of a string     similar_text() - Calculate the similarity between two strings     metaphone() - Calculate the metaphone key of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.implode.php","title":"implode","description":"implode   (PHP 4, PHP 5)implode \u2014 Join array elements with a string          Description       string implode     ( string $glue    , array $pieces    )        string implode     ( array $pieces    )        Join array elements with a glue string.      Note:          implode() can, for historical reasons, accept     its parameters in either order. For consistency with     explode(), however, it may be less confusing     to use the documented order of arguments.                Parameters                    glue                      Defaults to an empty string. This is not the preferred usage of        implode() as glue would be        the second parameter and thus, the bad prototype would be used.                                pieces                      The array of strings to implode.                                     Return Values       Returns a string containing a string representation of all the array    elements in the same order, with the glue string between each element.            Changelog                                 Version        Description                                    4.3.0                 The glue parameter became optional.                                            Examples            Example #1 implode() example       <?php$array\u00a0=\u00a0array('lastname',\u00a0'email',\u00a0'phone');$comma_separated\u00a0=\u00a0implode(\",\",\u00a0$array);echo\u00a0$comma_separated;\u00a0\/\/\u00a0lastname,email,phone\/\/\u00a0Empty\u00a0string\u00a0when\u00a0using\u00a0an\u00a0empty\u00a0array:var_dump(implode('hello',\u00a0array()));\u00a0\/\/\u00a0string(0)\u00a0\"\"?>                           Notes   Note: This function is binary-safe.         See Also            explode() - Split a string by string     preg_split() - Split string by a regular expression"},{"url":"http:\/\/www.php.net\/manual\/en\/function.md5.php","title":"md5","description":"md5   (PHP 4, PHP 5)md5 \u2014 Calculate the md5 hash of a string          Description       string md5     ( string $str    [, bool $raw_output = false   ] )        Calculates the MD5 hash of str using the    \u00bb\u00a0RSA Data Security, Inc.    MD5 Message-Digest Algorithm, and returns that hash.            Parameters                    str                      The string.                                raw_output                      If the optional raw_output is set to TRUE,        then the md5 digest is instead returned in raw binary format with a        length of 16.                                     Return Values       Returns the hash as a 32-character hexadecimal number.             Changelog                                 Version        Description                                    5.0.0                 The raw_output parameter was added.                                            Examples            Example #1 A md5() example       <?php$str\u00a0=\u00a0'apple';if\u00a0(md5($str)\u00a0===\u00a0'1f3870be274f6c49b3e31a0c6728957f')\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Would\u00a0you\u00a0like\u00a0a\u00a0green\u00a0or\u00a0red\u00a0apple?\";}?>                          Notes   Note:   Secure password hashing     It is not recommended to use this function to secure passwords, due to the fast nature of this hashing algorithm. See   here for details.             See Also            md5_file() - Calculates the md5 hash of a given file     sha1_file() - Calculate the sha1 hash of a file     crc32() - Calculates the crc32 polynomial of a string     sha1() - Calculate the sha1 hash of a string     hash() - Generate a hash value (message digest)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.md5-file.php","title":"md5_file","description":"md5_file   (PHP 4 >= 4.2.0, PHP 5)md5_file \u2014 Calculates the md5 hash of a given file        Description       string md5_file     ( string $filename    [, bool $raw_output = false   ] )        Calculates the MD5 hash of the file specified by the    filename parameter using the    \u00bb\u00a0RSA Data Security, Inc.     MD5 Message-Digest Algorithm, and returns that hash.    The hash is a 32-character hexadecimal number.            Parameters                    filename                      The filename                                raw_output                      When TRUE, returns the digest in raw binary format with a length of        16.                                     Return Values       Returns a string on success, FALSE otherwise.            Changelog                                 Version        Description                                    5.0.0                 Added the raw_output parameter                               5.1.0                 Changed the function to use the streams API. It means that you can use         it with wrappers, like md5_file(&#039;http:\/\/example.com\/..&#039;)                                            Examples            Example #1 Usage example of md5_file()       <?php$file\u00a0=\u00a0'php-5.3.0alpha2-Win32-VC9-x64.zip';echo\u00a0'MD5\u00a0file\u00a0hash\u00a0of\u00a0'\u00a0.\u00a0$file\u00a0.\u00a0':\u00a0'\u00a0.\u00a0md5_file($file);?>                        See Also            md5() - Calculate the md5 hash of a string     sha1_file() - Calculate the sha1 hash of a file     crc32() - Calculates the crc32 polynomial of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.metaphone.php","title":"metaphone","description":"metaphone   (PHP 4, PHP 5)metaphone \u2014 Calculate the metaphone key of a string          Description       string metaphone     ( string $str    [, int $phonemes = 0   ] )        Calculates the metaphone key of str.          Similar to soundex() metaphone creates the same key for    similar sounding words. It&#039;s more accurate than    soundex() as it knows the basic rules of English    pronunciation.  The metaphone generated keys are of variable length.          Metaphone was developed by Lawrence Philips    <lphilips at verity dot com>. It is described in [\"Practical    Algorithms for Programmers\", Binstock & Rex, Addison Wesley,    1995].            Parameters                    str                      The input string.                                phonemes                      This parameter restricts the returned metaphone key to         phonemes characters in length.        The default value of 0 means no restriction.                                     Return Values       Returns the metaphone key as a string,  or FALSE on failure.            Examples            Example #1 metaphone() basic example       <?phpvar_dump(metaphone('programming'));var_dump(metaphone('programmer'));?>             The above example will output something similar to:       string(7) \"PRKRMNK\" string(6) \"PRKRMR\"                         Example #2 Using the phonemes parameter       <?phpvar_dump(metaphone('programming',\u00a05));var_dump(metaphone('programmer',\u00a05));?>             The above example will output something similar to:       string(5) \"PRKRM\" string(5) \"PRKRM\""},{"url":"http:\/\/www.php.net\/manual\/en\/function.nl-langinfo.php","title":"nl_langinfo","description":"nl_langinfo   (PHP 4 >= 4.1.0, PHP 5)nl_langinfo \u2014 Query language and locale information          Description       string nl_langinfo     ( int $item    )        nl_langinfo() is used to access individual elements of    the locale categories.  Unlike localeconv(), which    returns all of the elements, nl_langinfo() allows you    to select any specific element.            Parameters                    item                      item may be an integer value of the element or the        constant name of the element. The following is a list of constant names        for item that may be used and their description.        Some of these constants may not be defined or hold no value for certain        locales.                 nl_langinfo Constants                                                              Constant            Description                                                        LC_TIME Category Constants                                   ABDAY_(1-7)            Abbreviated name of n-th day of the week.                                   DAY_(1-7)            Name of the n-th day of the week (DAY_1 = Sunday).                                   ABMON_(1-12)            Abbreviated name of the n-th month of the year.                                   MON_(1-12)            Name of the n-th month of the year.                                   AM_STR            String for Ante meridian.                                   PM_STR            String for Post meridian.                                   D_T_FMT            String that can be used as the format string for strftime() to represent time and date.                                   D_FMT            String that can be used as the format string for strftime() to represent date.                                   T_FMT            String that can be used as the format string for strftime() to represent time.                                   T_FMT_AMPM            String that can be used as the format string for strftime() to represent time in 12-hour format with ante\/post meridian.                                   ERA            Alternate era.                                   ERA_YEAR            Year in alternate era format.                                   ERA_D_T_FMT            Date and time in alternate era format (string can be used in strftime()).                                   ERA_D_FMT            Date in alternate era format (string can be used in strftime()).                                   ERA_T_FMT            Time in alternate era format (string can be used in strftime()).                                   LC_MONETARY Category Constants                                   INT_CURR_SYMBOL            International currency symbol.                                   CURRENCY_SYMBOL            Local currency symbol.                                   CRNCYSTR            Same value as CURRENCY_SYMBOL.                                   MON_DECIMAL_POINT            Decimal point character.                                   MON_THOUSANDS_SEP            Thousands separator (groups of three digits).                                   MON_GROUPING            Like \"grouping\" element.                                   POSITIVE_SIGN            Sign for positive values.                                   NEGATIVE_SIGN            Sign for negative values.                                   INT_FRAC_DIGITS            International fractional digits.                                   FRAC_DIGITS            Local fractional digits.                                   P_CS_PRECEDES            Returns 1 if CURRENCY_SYMBOL precedes a positive value.                                   P_SEP_BY_SPACE            Returns 1 if a space separates CURRENCY_SYMBOL from a positive value.                                   N_CS_PRECEDES            Returns 1 if CURRENCY_SYMBOL precedes a negative value.                                   N_SEP_BY_SPACE            Returns 1 if a space separates CURRENCY_SYMBOL from a negative value.                                   P_SIGN_POSN                                                                       Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL.                                                                          Returns 1 if the sign string precedes the quantity and CURRENCY_SYMBOL.                                                                          Returns 2 if the sign string follows the quantity and CURRENCY_SYMBOL.                                                                          Returns 3 if the sign string immediately precedes the CURRENCY_SYMBOL.                                                                          Returns 4 if the sign string immediately follows the CURRENCY_SYMBOL.                                                                                         N_SIGN_POSN                                   LC_NUMERIC Category Constants                                   DECIMAL_POINT            Decimal point character.                                   RADIXCHAR            Same value as DECIMAL_POINT.                                   THOUSANDS_SEP            Separator character for thousands (groups of three digits).                                   THOUSEP            Same value as THOUSANDS_SEP.                                   GROUPING            \u00a0                                   LC_MESSAGES Category Constants                                   YESEXPR            Regex string for matching \"yes\" input.                                   NOEXPR            Regex string for matching \"no\" input.                                   YESSTR            Output string for \"yes\".                                   NOSTR            Output string for \"no\".                                   LC_CTYPE Category Constants                                   CODESET            Return a string with the name of the character encoding.                                                                             Return Values       Returns the element as a string, or FALSE if item    is not valid.            Notes   Note: This function is not implemented on Windows platforms.         See Also            setlocale() - Set locale information     localeconv() - Get numeric formatting information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.money-format.php","title":"money_format","description":"money_format   (PHP 4 >= 4.3.0, PHP 5)money_format \u2014 Formats a number as a currency string          Description       string money_format     ( string $format    , float $number    )        money_format() returns a formatted version of    number.  This function wraps the C library    function strfmon(), with the difference that    this implementation converts only one number at a time.            Parameters                    format                      The format specification consists of the following sequence:                 a  character         optional flags         optional field width         optional left precision         optional right precision         a required conversion character                              Flags                One or more of the optional flags below can be used:                                =f                                     The character = followed by a (single byte)             character f to be used as the numeric fill             character. The default fill character is space.                                                         ^                                     Disable the use of grouping characters (as defined             by the current locale).                                                         + or (                                     Specify the formatting style for positive and negative numbers.             If + is used, the locale&#039;s equivalent for             + and - will be used. If             ( is used, negative amounts are enclosed in             parenthesis. If no specification is given, the default is             +.                                                         !                                     Suppress the currency symbol from the output string.                                                         -                                     If present, it will make all fields left-justified (padded to the             right), as opposed to the default which is for the fields to be             right-justified (padded to the left).                                                                           Field width                                        w                                     A decimal digit string specifying a minimum field width. Field will             be right-justified unless the flag - is used.             Default value is 0 (zero).                                                                           Left precision                                        #n                                     The maximum number of digits (n) expected             to the left of the decimal character (e.g. the decimal point). It is             used usually to keep formatted output aligned in the same columns,             using the fill character if the number of digits is less than             n. If the number of actual digits is             bigger than n, then this specification is             ignored.                                     If grouping has not been suppressed using the ^             flag, grouping separators will be inserted before the fill             characters (if any) are added. Grouping separators will not be             applied to fill characters, even if the fill character is a digit.                                     To ensure alignment, any characters appearing before or after the             number in the formatted output such as currency or sign symbols are             padded as necessary with space characters to make their positive and             negative formats an equal length.                                                                                    Right precision                                                .p                                     A period followed by the number of digits             (p) after the decimal character. If the             value of p is 0 (zero), the decimal             character and the digits to its right will be omitted. If no right             precision is included, the default will dictated by the current             local in use. The amount being formatted is rounded to the specified             number of digits prior to formatting.                                                                                    Conversion characters                                                i                                     The number is formatted according to the locale&#039;s international             currency format (e.g. for the USA locale: USD 1,234.56).                                                         n                                     The number is formatted according to the locale&#039;s national             currency format (e.g. for the de_DE locale: EU1.234,56).                                                                                              Returns the  character.                                                                                     number                      The number to be formatted.                                     Return Values       Returns the formatted string. Characters before and after the formatting    string will be returned unchanged.    Non-numeric number causes returning NULL and    emitting E_WARNING.            Notes   Note:          The function money_format() is only defined if     the system has strfmon capabilities.  For example, Windows does     not, so money_format() is undefined in Windows.          Note:          The LC_MONETARY category of the locale settings,     affects the behavior of this function. Use setlocale()     to set to the appropriate default locale before using this function.                   Examples            Example #1 money_format() Example           We will use different locales and format specifications to      illustrate the use of this function.            <?php$number\u00a0=\u00a01234.56;\/\/\u00a0let's\u00a0print\u00a0the\u00a0international\u00a0format\u00a0for\u00a0the\u00a0en_US\u00a0localesetlocale(LC_MONETARY,\u00a0'en_US');echo\u00a0money_format('%i',\u00a0$number)\u00a0.\u00a0\"\\n\";\/\/\u00a0USD\u00a01,234.56\/\/\u00a0Italian\u00a0national\u00a0format\u00a0with\u00a02\u00a0decimals`setlocale(LC_MONETARY,\u00a0'it_IT');echo\u00a0money_format('%.2n',\u00a0$number)\u00a0.\u00a0\"\\n\";\/\/\u00a0Eu\u00a01.234,56\/\/\u00a0Using\u00a0a\u00a0negative\u00a0number$number\u00a0=\u00a0-1234.5672;\/\/\u00a0US\u00a0national\u00a0format,\u00a0using\u00a0()\u00a0for\u00a0negative\u00a0numbers\/\/\u00a0and\u00a010\u00a0digits\u00a0for\u00a0left\u00a0precisionsetlocale(LC_MONETARY,\u00a0'en_US');echo\u00a0money_format('%(#10n',\u00a0$number)\u00a0.\u00a0\"\\n\";\/\/\u00a0($\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01,234.57)\/\/\u00a0Similar\u00a0format\u00a0as\u00a0above,\u00a0adding\u00a0the\u00a0use\u00a0of\u00a02\u00a0digits\u00a0of\u00a0right\/\/\u00a0precision\u00a0and\u00a0'*'\u00a0as\u00a0a\u00a0fill\u00a0characterecho\u00a0money_format('%=*(#10.2n',\u00a0$number)\u00a0.\u00a0\"\\n\";\/\/\u00a0($********1,234.57)\/\/\u00a0Let's\u00a0justify\u00a0to\u00a0the\u00a0left,\u00a0with\u00a014\u00a0positions\u00a0of\u00a0width,\u00a08\u00a0digits\u00a0of\/\/\u00a0left\u00a0precision,\u00a02\u00a0of\u00a0right\u00a0precision,\u00a0withouth\u00a0grouping\u00a0character\/\/\u00a0and\u00a0using\u00a0the\u00a0international\u00a0format\u00a0for\u00a0the\u00a0de_DE\u00a0locale.setlocale(LC_MONETARY,\u00a0'de_DE');echo\u00a0money_format('%=*^-14#8.2i',\u00a01234.56)\u00a0.\u00a0\"\\n\";\/\/\u00a0Eu\u00a01234,56****\/\/\u00a0Let's\u00a0add\u00a0some\u00a0blurb\u00a0before\u00a0and\u00a0after\u00a0the\u00a0conversion\u00a0specificationsetlocale(LC_MONETARY,\u00a0'en_GB');$fmt\u00a0=\u00a0'The\u00a0final\u00a0value\u00a0is\u00a0%i\u00a0(after\u00a0a\u00a010%%\u00a0discount)';echo\u00a0money_format($fmt,\u00a01234.56)\u00a0.\u00a0\"\\n\";\/\/\u00a0The\u00a0final\u00a0value\u00a0is\u00a0\u00a0GBP\u00a01,234.56\u00a0(after\u00a0a\u00a010%\u00a0discount)?>                        See Also            setlocale() - Set locale information     sscanf() - Parses input from a string according to a format     sprintf() - Return a formatted string     printf() - Output a formatted string     number_format() - Format a number with grouped thousands"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ord.php","title":"ord","description":"ord   (PHP 4, PHP 5)ord \u2014 Return ASCII value of character          Description       int ord     ( string $string    )        Returns the ASCII value of the first character of    string.          This function complements chr().            Parameters                    string                      A character.                                     Return Values       Returns the ASCII value as an integer.            Examples            Example #1 ord() example       <?php$str\u00a0=\u00a0\"\\n\";if\u00a0(ord($str)\u00a0==\u00a010)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0first\u00a0character\u00a0of\u00a0\\$str\u00a0is\u00a0a\u00a0line\u00a0feed.\\n\";}?>                           See Also            chr() - Return a specific character     An \u00bb\u00a0ASCII-table"},{"url":"http:\/\/www.php.net\/manual\/en\/function.nl2br.php","title":"nl2br","description":"nl2br   (PHP 4, PHP 5)nl2br \u2014 Inserts HTML line breaks before all newlines in a string          Description       string nl2br     ( string $string    [, bool $is_xhtml = true   ] )        Returns string with &#039;<br \/>&#039; or     &#039;<br>&#039; inserted before all newlines (\\r\\n,    \\n\\r, \\n and \\r).            Parameters                    string                      The input string.                                is_xhtml                      Whenever to use XHTML compatible line breaks or not.                                     Return Values       Returns the altered string.            Examples            Example #1 Using nl2br()       <?phpecho\u00a0nl2br(\"foo\u00a0isn't\\n\u00a0bar\");?>             The above example will output:       foo isn&#039;t<br \/>  bar                   Example #2 Generating valid HTML markup using the is_xhtml parameter       <?phpecho\u00a0nl2br(\"Welcome\\r\\nThis\u00a0is\u00a0my\u00a0HTML\u00a0document\",\u00a0false);?>             The above example will output:       Welcome<br> This is my HTML document                   Example #3 Various newline separators       <?php$string\u00a0=\u00a0\"This\\r\\nis\\n\\ra\\nstring\\r\";echo\u00a0nl2br($string);?>             The above example will output:       This<br \/> is<br \/> a<br \/> string<br \/>                      Changelog                                 Version        Description                                    5.3.0                  Added the optional is_xhtml parameter.                               4.0.5                 nl2br() is now XHTML compliant. All older versions         will return string with &#039;<br>&#039; inserted         before newlines instead of &#039;<br \/>&#039;.                                            See Also            htmlspecialchars() - Convert special characters to HTML entities     htmlentities() - Convert all applicable characters to HTML entities     wordwrap() - Wraps a string to a given number of characters     str_replace() - Replace all occurrences of the search string with the replacement string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.print.php","title":"print","description":"print   (PHP 4, PHP 5)print \u2014 Output a string          Description       int print     ( string $arg    )        Outputs arg.          print() is not actually a real function (it is a    language construct) so you are not required to use parentheses    with its argument list.            Parameters                    arg                      The input data.                                     Return Values       Returns 1, always.            Examples            Example #1 print() examples       <?phpprint(\"Hello\u00a0World\");print\u00a0\"print()\u00a0also\u00a0works\u00a0without\u00a0parentheses.\";print\u00a0\"This\u00a0spansmultiple\u00a0lines.\u00a0The\u00a0newlines\u00a0will\u00a0beoutput\u00a0as\u00a0well\";print\u00a0\"This\u00a0spans\\nmultiple\u00a0lines.\u00a0The\u00a0newlines\u00a0will\u00a0be\\noutput\u00a0as\u00a0well.\";print\u00a0\"escaping\u00a0characters\u00a0is\u00a0done\u00a0\\\"Like\u00a0this\\\".\";\/\/\u00a0You\u00a0can\u00a0use\u00a0variables\u00a0inside\u00a0a\u00a0print\u00a0statement$foo\u00a0=\u00a0\"foobar\";$bar\u00a0=\u00a0\"barbaz\";print\u00a0\"foo\u00a0is\u00a0$foo\";\u00a0\/\/\u00a0foo\u00a0is\u00a0foobar\/\/\u00a0You\u00a0can\u00a0also\u00a0use\u00a0arrays$bar\u00a0=\u00a0array(\"value\"\u00a0=>\u00a0\"foo\");print\u00a0\"this\u00a0is\u00a0{$bar['value']}\u00a0!\";\u00a0\/\/\u00a0this\u00a0is\u00a0foo\u00a0!\/\/\u00a0Using\u00a0single\u00a0quotes\u00a0will\u00a0print\u00a0the\u00a0variable\u00a0name,\u00a0not\u00a0the\u00a0valueprint\u00a0'foo\u00a0is\u00a0$foo';\u00a0\/\/\u00a0foo\u00a0is\u00a0$foo\/\/\u00a0If\u00a0you\u00a0are\u00a0not\u00a0using\u00a0any\u00a0other\u00a0characters,\u00a0you\u00a0can\u00a0just\u00a0print\u00a0variablesprint\u00a0$foo;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0foobarprint\u00a0<<<ENDThis\u00a0uses\u00a0the\u00a0\"here\u00a0document\"\u00a0syntax\u00a0to\u00a0outputmultiple\u00a0lines\u00a0with\u00a0$variable\u00a0interpolation.\u00a0Notethat\u00a0the\u00a0here\u00a0document\u00a0terminator\u00a0must\u00a0appear\u00a0on\u00a0aline\u00a0with\u00a0just\u00a0a\u00a0semicolon\u00a0no\u00a0extra\u00a0whitespace!END;?>                        Notes   Note: Because this is a language construct and not a function, it cannot be called using variable functions          See Also            echo() - Output one or more strings     printf() - Output a formatted string     flush() - Flush the output buffer     Heredoc syntax"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-str.php","title":"parse_str","description":"parse_str   (PHP 4, PHP 5)parse_str \u2014 Parses the string into variables          Description       void parse_str     ( string $str    [, array &$arr   ] )        Parses str as if it were the query string    passed via a URL and sets variables in the current scope.       Note:          To get the current QUERY_STRING, you may use the variable     $_SERVER['QUERY_STRING'].     Also, you may want to read the section on     variables from external     sources.          Note:          The magic_quotes_gpc setting     affects the output of this function, as parse_str() uses     the same mechanism that PHP uses to populate the $_GET,     $_POST, etc. variables.                Parameters                    str                      The input string.                                arr                      If the second parameter arr is present,        variables are stored in this variable as array elements instead.                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    4.0.3                 The arr parameter was added                                            Examples            Example #1 Using parse_str()       <?php$str\u00a0=\u00a0\"first=value&arr[]=foo+bar&arr[]=baz\";parse_str($str);echo\u00a0$first;\u00a0\u00a0\/\/\u00a0valueecho\u00a0$arr[0];\u00a0\/\/\u00a0foo\u00a0barecho\u00a0$arr[1];\u00a0\/\/\u00a0bazparse_str($str,\u00a0$output);echo\u00a0$output['first'];\u00a0\u00a0\/\/\u00a0valueecho\u00a0$output['arr'][0];\u00a0\/\/\u00a0foo\u00a0barecho\u00a0$output['arr'][1];\u00a0\/\/\u00a0baz?>                        See Also            parse_url() - Parse a URL and return its components     pathinfo() - Returns information about a file path     http_build_query() - Generate URL-encoded query string     get_magic_quotes_gpc() - Gets the current configuration setting of magic_quotes_gpc     urldecode() - Decodes URL-encoded string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.printf.php","title":"printf","description":"printf   (PHP 4, PHP 5)printf \u2014 Output a formatted string          Description       int printf     ( string $format    [, mixed $args    [, mixed $...   ]] )        Produces output according to format.            Parameters                    format                      See sprintf() for a description of        format.                                args                                              ...                                                   Return Values       Returns the length of the outputted string.            See Also            print() - Output a string     sprintf() - Return a formatted string     vprintf() - Output a formatted string     sscanf() - Parses input from a string according to a format     fscanf() - Parses input from a file according to a format     flush() - Flush the output buffer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.number-format.php","title":"number_format","description":"number_format   (PHP 4, PHP 5)number_format \u2014 Format a number with grouped thousands          Description       string number_format     ( float $number    [, int $decimals = 0   ] )        string number_format     ( float $number    , int $decimals = 0    , string $dec_point = &#039;.&#039;    , string $thousands_sep = &#039;,&#039;    )        This function accepts either one, two, or four parameters (not three):          If only one parameter is given,    number will be formatted without decimals,    but with a comma (\",\") between every group of thousands.          If two parameters are given, number will    be formatted with decimals decimals with a    dot (\".\") in front, and a comma (\",\") between every group of    thousands.          If all four parameters are given, number    will be formatted with decimals decimals,    dec_point instead of a dot (\".\") before    the decimals and thousands_sep instead of    a comma (\",\") between every group of thousands.            Return Values       A formatted version of number.            Parameters                    number                      The number being formatted.                                decimals                      Sets the number of decimal points.                                dec_point                      Sets the separator for the decimal point.                                thousands_sep                      Sets the thousands separator.                                     Changelog                                 Version        Description                                    5.4.0                 This function now supports multiple bytes in         dec_point and         thousands_sep. Only the first byte of each         separator was used in older versions.                                            Examples            Example #1 number_format() Example           For instance, French notation usually use two decimals,      comma (&#039;,&#039;) as decimal separator, and space (&#039; &#039;) as      thousand separator. This is achieved with this line :            <?php$number\u00a0=\u00a01234.56;\/\/\u00a0english\u00a0notation\u00a0(default)$english_format_number\u00a0=\u00a0number_format($number);\/\/\u00a01,235\/\/\u00a0French\u00a0notation$nombre_format_francais\u00a0=\u00a0number_format($number,\u00a02,\u00a0',',\u00a0'\u00a0');\/\/\u00a01\u00a0234,56$number\u00a0=\u00a01234.5678;\/\/\u00a0english\u00a0notation\u00a0without\u00a0thousands\u00a0separator$english_format_number\u00a0=\u00a0number_format($number,\u00a02,\u00a0'.',\u00a0'');\/\/\u00a01234.57?>                        See Also            money_format() - Formats a number as a currency string     sprintf() - Return a formatted string     printf() - Output a formatted string     sscanf() - Parses input from a string according to a format"},{"url":"http:\/\/www.php.net\/manual\/en\/function.quotemeta.php","title":"quotemeta","description":"quotemeta   (PHP 4, PHP 5)quotemeta \u2014 Quote meta characters          Description       string quotemeta     ( string $str    )        Returns a version of str with a backslash character (\\)    before every character that is among these:     . \\ + * ? [ ^ ] ( $ )            Parameters                    str                      The input string.                                     Return Values       Returns the string with meta characters quoted, or FALSE if an empty    string is given as str.            Notes   Note: This function is binary-safe.         See Also            addslashes() - Quote string with slashes     addcslashes() - Quote string with slashes in a C style     htmlentities() - Convert all applicable characters to HTML entities     htmlspecialchars() - Convert special characters to HTML entities     nl2br() - Inserts HTML line breaks before all newlines in a string     stripslashes() - Un-quotes a quoted string     stripcslashes() - Un-quote string quoted with addcslashes     preg_match() - Perform a regular expression match     preg_quote() - Quote regular expression characters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.quoted-printable-decode.php","title":"quoted_printable_decode","description":"quoted_printable_decode   (PHP 4, PHP 5)quoted_printable_decode \u2014 Convert a quoted-printable string to an 8 bit string          Description       string quoted_printable_decode     ( string $str    )        This function returns an 8-bit binary string corresponding to the decoded    quoted printable string (according to \u00bb\u00a0RFC2045, section 6.7, not \u00bb\u00a0RFC2821, section 4.5.2, so additional periods    are not stripped from the beginning of line).          This function is similar to imap_qprint(), except this    one does not require the IMAP module to work.            Parameters                    str                      The input string.                                     Return Values       Returns the 8-bit binary string.            See Also            quoted_printable_encode() - Convert a 8 bit string to a quoted-printable string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rtrim.php","title":"rtrim","description":"rtrim   (PHP 4, PHP 5)rtrim \u2014 Strip whitespace (or other characters) from the end of a string          Description       string rtrim     ( string $str    [, string $charlist   ] )        This function returns a string with whitespace stripped from the    end of str.          Without the second parameter,    rtrim() will strip these characters:                          \" \" (ASCII 32       (0x20)), an ordinary space.                             \"\\t\" (ASCII 9       (0x09)), a tab.                             \"\\n\" (ASCII 10       (0x0A)), a new line (line feed).                             \"\\r\" (ASCII 13       (0x0D)), a carriage return.                             \"\\0\" (ASCII 0       (0x00)), the NUL-byte.                              \"\\x0B\" (ASCII 11       (0x0B)), a vertical tab.                           Parameters                    str                      The input string.                                charlist                      You can also specify the characters you want to strip, by means        of the charlist parameter.        Simply list all characters that you want to be stripped. With        .. you can specify a range of characters.                                     Return Values       Returns the modified string.            Changelog                                 Version        Description                                    4.1.0                 The charlist parameter was added.                                            Examples            Example #1 Usage example of rtrim()       <?php$text\u00a0=\u00a0\"\\t\\tThese\u00a0are\u00a0a\u00a0few\u00a0words\u00a0:)\u00a0...\u00a0\u00a0\";$binary\u00a0=\u00a0\"\\x09Example\u00a0string\\x0A\";$hello\u00a0\u00a0=\u00a0\"Hello\u00a0World\";var_dump($text,\u00a0$binary,\u00a0$hello);print\u00a0\"\\n\";$trimmed\u00a0=\u00a0rtrim($text);var_dump($trimmed);$trimmed\u00a0=\u00a0rtrim($text,\u00a0\"\u00a0\\t.\");var_dump($trimmed);$trimmed\u00a0=\u00a0rtrim($hello,\u00a0\"Hdle\");var_dump($trimmed);\/\/\u00a0trim\u00a0the\u00a0ASCII\u00a0control\u00a0characters\u00a0at\u00a0the\u00a0end\u00a0of\u00a0$binary\/\/\u00a0(from\u00a00\u00a0to\u00a031\u00a0inclusive)$clean\u00a0=\u00a0rtrim($binary,\u00a0\"\\x00..\\x1F\");var_dump($clean);?>             The above example will output:       string(32) \"        These are a few words :) ...  \" string(16) \"    Example string \" string(11) \"Hello World\"  string(30) \"        These are a few words :) ...\" string(26) \"        These are a few words :)\" string(9) \"Hello Wor\" string(15) \"    Example string\"                         See Also            trim() - Strip whitespace (or other characters) from the beginning and end of a string     ltrim() - Strip whitespace (or other characters) from the beginning of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.quoted-printable-encode.php","title":"quoted_printable_encode","description":"quoted_printable_encode   (PHP 5 >= 5.3.0)quoted_printable_encode \u2014 Convert a 8 bit string to a quoted-printable string          Description       string quoted_printable_encode     ( string $str    )        Returns a quoted printable string created according to \u00bb\u00a0RFC2045, section 6.7.          This function is similar to imap_8bit(), except this    one does not require the IMAP module to work.            Parameters                    str                      The input string.                                     Return Values       Returns the encoded string.            See Also            quoted_printable_decode() - Convert a quoted-printable string to an 8 bit string     iconv_mime_encode() - Composes a MIME header field"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sha1-file.php","title":"sha1_file","description":"sha1_file   (PHP 4 >= 4.3.0, PHP 5)sha1_file \u2014 Calculate the sha1 hash of a file        Description       string sha1_file     ( string $filename    [, bool $raw_output = false   ] )        Calculates the sha1 hash of the file specified by    filename using the    \u00bb\u00a0US Secure Hash Algorithm 1,    and returns that hash. The hash is a 40-character hexadecimal number.            Parameters                    filename                      The filename of the file to hash.                                raw_output                      When TRUE, returns the digest in raw binary format with a length of        20.                                     Return Values       Returns a string on success, FALSE otherwise.            Examples            Example #1 sha1_file() example       <?phpforeach(glob('\/home\/Kalle\/myproject\/*.php')\u00a0as\u00a0$ent){\u00a0\u00a0\u00a0\u00a0if(is_dir($ent))\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0echo\u00a0$ent\u00a0.\u00a0'\u00a0(SHA1:\u00a0'\u00a0.\u00a0sha1_file($ent)\u00a0.\u00a0')',\u00a0PHP_EOL;}?>                       Changelog                                 Version        Description                                    5.1.0                 Changed the function to use the streams API. It means that you can use         it with wrappers, like sha1_file(&#039;http:\/\/example.com\/..&#039;)                               5.0.0                 Added the raw_output parameter                                            See Also            sha1() - Calculate the sha1 hash of a string     md5_file() - Calculates the md5 hash of a given file     crc32() - Calculates the crc32 polynomial of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.setlocale.php","title":"setlocale","description":"setlocale   (PHP 4, PHP 5)setlocale \u2014 Set locale information          Description       string setlocale     ( int $category    , string $locale    [, string $...   ] )        string setlocale     ( int $category    , array $locale    )        Sets locale information.            Parameters                    category                      category is a named constant specifying the        category of the functions affected by the locale setting:                                      LC_ALL for all of the below                                                 LC_COLLATE for string comparison, see           strcoll()                                                 LC_CTYPE for character classification and conversion, for           example strtoupper()                                                 LC_MONETARY for localeconv()                                                 LC_NUMERIC for decimal separator (See also           localeconv())                                                 LC_TIME for date and time formatting with           strftime()                                                 LC_MESSAGES for system responses (available if PHP was compiled with           libintl)                                                           locale                      If locale is NULL or the empty string        \"\", the locale names will be set from the        values of environment variables with the same names as the above        categories, or from \"LANG\".                      If locale is \"0\",        the locale setting is not affected, only the current setting is returned.                      If locale is an array or followed by additional        parameters then each array element or parameter is tried to be set as        new locale until success. This is useful if a locale is known under        different names on different systems or for providing a fallback        for a possibly not available locale.                                ...                      (Optional string or array parameters to try as locale settings until        success.)                             Note:            On Windows, setlocale(LC_ALL, &#039;&#039;) sets the locale names from the      system&#039;s regional\/language settings (accessible via Control Panel).                     Return Values       Returns the new current locale, or FALSE if the locale functionality is    not implemented on your platform, the specified locale does not exist or    the category name is invalid.          An invalid category name also causes a warning message. Category\/locale    names can be found in \u00bb\u00a0RFC 1766    and \u00bb\u00a0ISO 639.    Different systems have different naming schemes for locales.      Note:          The return value of setlocale() depends     on the system that PHP is running.  It returns exactly     what the system setlocale function returns.                Changelog                                 Version        Description                                    5.3.0                 This function now throws an E_DEPRECATED notice if a string is passed          to the category parameter instead of one of the          LC_* constants.                               4.3.0                 Passing multiple locales became possible.                               4.2.0                 Passing category as a string is now deprecated,         use the above constants instead.  Passing them as a string (within         quotes) will result in a warning message.                                            Examples            Example #1 setlocale() Examples       <?php\/*\u00a0Set\u00a0locale\u00a0to\u00a0Dutch\u00a0*\/setlocale(LC_ALL,\u00a0'nl_NL');\/*\u00a0Output:\u00a0vrijdag\u00a022\u00a0december\u00a01978\u00a0*\/echo\u00a0strftime(\"%A\u00a0%e\u00a0%B\u00a0%Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a012,\u00a022,\u00a01978));\/*\u00a0try\u00a0different\u00a0possible\u00a0locale\u00a0names\u00a0for\u00a0german\u00a0as\u00a0of\u00a0PHP\u00a04.3.0\u00a0*\/$loc_de\u00a0=\u00a0setlocale(LC_ALL,\u00a0'de_DE@euro',\u00a0'de_DE',\u00a0'de',\u00a0'ge');echo\u00a0\"Preferred\u00a0locale\u00a0for\u00a0german\u00a0on\u00a0this\u00a0system\u00a0is\u00a0'$loc_de'\";?>                           Example #2 setlocale() Examples for Windows       <?php\/*\u00a0Set\u00a0locale\u00a0to\u00a0Dutch\u00a0*\/setlocale(LC_ALL,\u00a0'nld_nld');\/*\u00a0Output:\u00a0vrijdag\u00a022\u00a0december\u00a01978\u00a0*\/echo\u00a0strftime(\"%A\u00a0%d\u00a0%B\u00a0%Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a012,\u00a022,\u00a01978));\/*\u00a0try\u00a0different\u00a0possible\u00a0locale\u00a0names\u00a0for\u00a0german\u00a0as\u00a0of\u00a0PHP\u00a04.3.0\u00a0*\/$loc_de\u00a0=\u00a0setlocale(LC_ALL,\u00a0'de_DE@euro',\u00a0'de_DE',\u00a0'deu_deu');echo\u00a0\"Preferred\u00a0locale\u00a0for\u00a0german\u00a0on\u00a0this\u00a0system\u00a0is\u00a0'$loc_de'\";?>                        Notes   Warning         The locale information is maintained per process, not per thread. If you     are running PHP on a multithreaded server API like IIS or Apache on     Windows, you may experience sudden changes in locale settings while a     script is running, though the script itself never called      setlocale(). This happens due to other scripts     running in different threads of the same process at the same time,     changing the process-wide locale using setlocale().          Tip         Windows users will find useful information about     locale strings at Microsoft&#039;s     MSDN website. Supported language strings can be found     at \u00bb\u00a0http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/vclib\/html\/_crt_language_strings.asp and supported     country\/region strings at     \u00bb\u00a0http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/vclib\/html\/_crt_country_strings.asp."},{"url":"http:\/\/www.php.net\/manual\/en\/function.similar-text.php","title":"similar_text","description":"similar_text   (PHP 4, PHP 5)similar_text \u2014 Calculate the similarity between two strings          Description       int similar_text     ( string $first    , string $second    [, float &$percent   ] )        This calculates the similarity between two strings as described in Oliver    [1993]. Note that this implementation does not use a stack as in Oliver&#039;s    pseudo code, but recursive calls which may or may not speed up the whole    process. Note also that the complexity of this algorithm is O(N**3) where    N is the length of the longest string.            Parameters                    first                      The first string.                                second                      The second string.                                percent                      By passing a reference as third argument,        similar_text() will calculate the similarity in        percent for you.                                      Return Values       Returns the number of matching chars in both strings.            See Also            levenshtein() - Calculate Levenshtein distance between two strings     soundex() - Calculate the soundex key of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.soundex.php","title":"soundex","description":"soundex   (PHP 4, PHP 5)soundex \u2014 Calculate the soundex key of a string          Description       string soundex     ( string $str    )        Calculates the soundex key of str.          Soundex keys have the property that words pronounced similarly    produce the same soundex key, and can thus be used to simplify    searches in databases where you know the pronunciation but not    the spelling. This soundex function returns a string 4 characters    long, starting with a letter.          This particular soundex function is one described by Donald Knuth    in \"The Art Of Computer Programming, vol. 3: Sorting And    Searching\", Addison-Wesley (1973), pp. 391-392.            Parameters                    str                      The input string.                                     Return Values       Returns the soundex key as a string.            Examples            Example #1 Soundex Examples       <?phpsoundex(\"Euler\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Ellery\");\u00a0\u00a0\u00a0\u00a0\/\/\u00a0E460soundex(\"Gauss\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Ghosh\");\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0G200soundex(\"Hilbert\")\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Heilbronn\");\u00a0\/\/\u00a0H416soundex(\"Knuth\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Kant\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0K530soundex(\"Lloyd\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Ladd\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0L300soundex(\"Lukasiewicz\")\u00a0==\u00a0soundex(\"Lissajous\");\u00a0\/\/\u00a0L222?>                        See Also            levenshtein() - Calculate Levenshtein distance between two strings     metaphone() - Calculate the metaphone key of a string     similar_text() - Calculate the similarity between two strings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sscanf.php","title":"sscanf","description":"sscanf   (PHP 4 >= 4.0.1, PHP 5)sscanf \u2014 Parses input from a string according to a format          Description       mixed sscanf     ( string $str    , string $format    [, mixed &$...   ] )        The function sscanf() is the input analog of    printf(). sscanf() reads    from the string str and interprets it    according to the specified format, which is    described in the documentation for sprintf().           Any whitespace in the format string matches any whitespace in the input    string. This means that even a tab \\t in the format string can match a    single space character in the input string.            Parameters                    str                      The input string being parsed.                                format                      The interpreted format for str, which is        described in the documentation for sprintf() with        following differences:                           Function is not locale-aware.                            F, g, G and          b are not supported.                            D stands for decimal number.                            i stands for integer with base detection.                            n stands for number of characters processed so far.                                                 ...                      Optionally pass in variables by reference that will contain the parsed values.                                      Return Values       If only    two parameters were passed to this function, the values parsed    will be returned as an array. Otherwise, if optional parameters are passed,    the function will return the number of assigned values. The optional    parameters must be passed by reference.            Examples            Example #1 sscanf() Example       <?php\/\/\u00a0getting\u00a0the\u00a0serial\u00a0numberlist($serial)\u00a0=\u00a0sscanf(\"SN\/2350001\",\u00a0\"SN\/%d\");\/\/\u00a0and\u00a0the\u00a0date\u00a0of\u00a0manufacturing$mandate\u00a0=\u00a0\"January\u00a001\u00a02000\";list($month,\u00a0$day,\u00a0$year)\u00a0=\u00a0sscanf($mandate,\u00a0\"%s\u00a0%d\u00a0%d\");echo\u00a0\"Item\u00a0$serial\u00a0was\u00a0manufactured\u00a0on:\u00a0$year-\"\u00a0.\u00a0substr($month,\u00a00,\u00a03)\u00a0.\u00a0\"-$day\\n\";?>                      If optional parameters are passed, the function will return the    number of assigned values.               Example #2 sscanf() - using optional parameters       <?php\/\/\u00a0get\u00a0author\u00a0info\u00a0and\u00a0generate\u00a0DocBook\u00a0entry$auth\u00a0=\u00a0\"24\\tLewis\u00a0Carroll\";$n\u00a0=\u00a0sscanf($auth,\u00a0\"%d\\t%s\u00a0%s\",\u00a0$id,\u00a0$first,\u00a0$last);echo\u00a0\"<author\u00a0id='$id'>\u00a0\u00a0\u00a0\u00a0<firstname>$first<\/firstname>\u00a0\u00a0\u00a0\u00a0<surname>$last<\/surname><\/author>\\n\";?>                        See Also            fscanf() - Parses input from a file according to a format     printf() - Output a formatted string     sprintf() - Return a formatted string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sha1.php","title":"sha1","description":"sha1   (PHP 4 >= 4.3.0, PHP 5)sha1 \u2014 Calculate the sha1 hash of a string          Description       string sha1     ( string $str    [, bool $raw_output = false   ] )        Calculates the sha1 hash of str using the    \u00bb\u00a0US Secure Hash Algorithm 1.            Parameters                    str                      The input string.                                raw_output                      If the optional raw_output is set to TRUE,        then the sha1 digest is instead returned in raw binary format with a        length of 20, otherwise the returned value is a 40-character        hexadecimal number.                                     Return Values       Returns the sha1 hash as a string.            Changelog                                 Version        Description                                    5.0.0                 The raw_output parameter was added.                                            Examples            Example #1 A sha1() example       <?php$str\u00a0=\u00a0'apple';if\u00a0(sha1($str)\u00a0===\u00a0'd0be2dc421be4fcd0172e5afceea3970e2f3d940')\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Would\u00a0you\u00a0like\u00a0a\u00a0green\u00a0or\u00a0red\u00a0apple?\";}?>                         Notes   Note:   Secure password hashing     It is not recommended to use this function to secure passwords, due to the fast nature of this hashing algorithm. See   here for details.             See Also            sha1_file() - Calculate the sha1 hash of a file     crc32() - Calculates the crc32 polynomial of a string     md5() - Calculate the md5 hash of a string     hash() - Generate a hash value (message digest)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-getcsv.php","title":"str_getcsv","description":"str_getcsv   (PHP 5 >= 5.3.0)str_getcsv \u2014     Parse a CSV string into an array            Description       array str_getcsv     ( string $input    [, string $delimiter = &#039;,&#039;    [, string $enclosure = &#039;\"&#039;    [, string $escape = &#039;\\\\&#039;   ]]] )        Parses a string input for fields in CSV format    and returns an array containing the fields read.            Parameters                    input                      The string to parse.                                delimiter                      Set the field delimiter (one character only).                                enclosure                      Set the field enclosure character (one character only).                                escape                      Set the escape character (one character only). Defaults as a backslash        (\\)                                     Return Values       Returns an indexed array containing the fields read.            See Also            fgetcsv() - Gets line from file pointer and parse for CSV fields"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-repeat.php","title":"str_repeat","description":"str_repeat   (PHP 4, PHP 5)str_repeat \u2014 Repeat a string          Description       string str_repeat     ( string $input    , int $multiplier    )        Returns input repeated    multiplier times.            Parameters                    input                      The string to be repeated.                                multiplier                      Number of time the input string should be        repeated.                      multiplier has to be greater than or equal to 0.        If the multiplier is set to 0, the function        will return an empty string.                                     Return Values       Returns the repeated string.            Examples            Example #1 str_repeat() example       <?phpecho\u00a0str_repeat(\"-=\",\u00a010);?>             The above example will output:       -=-=-=-=-=-=-=-=-=-=                         See Also            for     str_pad() - Pad a string to a certain length with another string     substr_count() - Count the number of substring occurrences"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sprintf.php","title":"sprintf","description":"sprintf   (PHP 4, PHP 5)sprintf \u2014 Return a formatted string          Description       string sprintf     ( string $format    [, mixed $args    [, mixed $...   ]] )        Returns a string produced according to the formatting string    format.            Parameters                    format                      The format string is composed of zero or more directives:        ordinary characters (excluding ) that are        copied directly to the result, and conversion        specifications, each of which results in fetching its        own parameter.  This applies to both sprintf()        and printf().                      Each conversion specification consists of a percent sign        (), followed by one or more of these        elements, in order:                                      An optional sign specifier that forces a sign           (- or +) to be used on a number. By default, only the - sign is used           on a number if it&#039;s negative. This specifier forces positive numbers           to have the + sign attached as well, and was added in PHP 4.3.0.                                                 An optional padding specifier that says           what character will be used for padding the results to the           right string size.  This may be a space character or a           0 (zero character).  The default is to pad           with spaces.  An alternate padding character can be specified           by prefixing it with a single quote (&#039;).           See the examples below.                                                 An optional alignment specifier that says           if the result should be left-justified or right-justified.           The default is right-justified; a -           character here will make it left-justified.                                                 An optional number, a width specifier           that says how many characters (minimum) this conversion should           result in.                                                 An optional precision specifier in the form           of a period (`.&#039;) followed by an optional decimal digit string           that says how many decimal digits should be displayed for           floating-point numbers. When using this specifier on a string,           it acts as a cutoff point, setting a maximum character limit to           the string.                                                 A type specifier that says what type the           argument data should be treated as.  Possible types:                                     - a literal percent character. No             argument is required.                                     b - the argument is treated as an             integer, and presented as a binary number.                                     c - the argument is treated as an             integer, and presented as the character with that ASCII             value.                                     d - the argument is treated as an             integer, and presented as a (signed) decimal number.                                     e - the argument is treated as scientific             notation (e.g. 1.2e+2).             The precision specifier stands for the number of digits after the             decimal point since PHP 5.2.1. In earlier versions, it was taken as             number of significant digits (one less).                                     E - like %e but uses             uppercase letter (e.g. 1.2E+2).                                     u - the argument is treated as an             integer, and presented as an unsigned decimal number.                                     f - the argument is treated as a             float, and presented as a floating-point number (locale aware).                                     F - the argument is treated as a             float, and presented as a floating-point number (non-locale aware).             Available since PHP 4.3.10 and PHP 5.0.3.                                     g - shorter of %e and             %f.                                     G - shorter of %E and             %f.                                     o - the argument is treated as an             integer, and presented as an octal number.                                     s - the argument is treated as and             presented as a string.                                     x - the argument is treated as an integer             and presented as a hexadecimal number (with lowercase             letters).                                     X - the argument is treated as an integer             and presented as a hexadecimal number (with uppercase             letters).                                                                        The format string supports argument numbering\/swapping.  Here is an        example:                 Example #1 Argument swapping           <?php$num\u00a0=\u00a05;$location\u00a0=\u00a0'tree';$format\u00a0=\u00a0'There\u00a0are\u00a0%d\u00a0monkeys\u00a0in\u00a0the\u00a0%s';printf($format,\u00a0$num,\u00a0$location);?>                            This will output \"There are 5 monkeys in the tree\".  But        imagine we are creating a format string in a separate file,        commonly because we would like to internationalize it and we        rewrite it as:                 Example #2 Argument swapping           <?php$format\u00a0=\u00a0'The\u00a0%s\u00a0contains\u00a0%d\u00a0monkeys';printf($format,\u00a0$num,\u00a0$location);?>                            We now have a problem.  The order of the placeholders in the        format string does not match the order of the arguments in the        code.  We would like to leave the code as is and simply indicate        in the format string which arguments the placeholders refer to.        We would write the format string like this instead:                 Example #3 Argument swapping           <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys';printf($format,\u00a0$num,\u00a0$location);?>                            An added benefit here is that you can repeat the placeholders without        adding more arguments in the code.  For example:                 Example #4 Argument swapping           <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0That\\'s\u00a0a\u00a0nice\u00a0%2$s\u00a0full\u00a0of\u00a0%1$d\u00a0monkeys.';printf($format,\u00a0$num,\u00a0$location);?>                            When using argument swapping, the n$        position specifier must come immediately        after the percent sign (), before any other        specifiers, as shown in the example below.                 Example #5 Position specifier with other specifiers           <?php$format=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$04d\u00a0monkeys';printf($format,\u00a0$num,\u00a0$location);?>                     The above example will output:           The tree contains 0005 monkeys                                                  args                                              ...                                                   Return Values       Returns a string produced according to the formatting string    format.            Changelog                                 Version        Description                                    4.0.6                 Support for argument numbering\/swapping was added                                            Examples       Example #6 printf(): various examples      <?php$n\u00a0=\u00a0\u00a043951789;$u\u00a0=\u00a0-43951789;$c\u00a0=\u00a065;\u00a0\/\/\u00a0ASCII\u00a065\u00a0is\u00a0'A'\/\/\u00a0notice\u00a0the\u00a0double\u00a0%%,\u00a0this\u00a0prints\u00a0a\u00a0literal\u00a0'%'\u00a0characterprintf(\"%%b\u00a0=\u00a0'%b'\\n\",\u00a0$n);\u00a0\/\/\u00a0binary\u00a0representationprintf(\"%%c\u00a0=\u00a0'%c'\\n\",\u00a0$c);\u00a0\/\/\u00a0print\u00a0the\u00a0ascii\u00a0character,\u00a0same\u00a0as\u00a0chr()\u00a0functionprintf(\"%%d\u00a0=\u00a0'%d'\\n\",\u00a0$n);\u00a0\/\/\u00a0standard\u00a0integer\u00a0representationprintf(\"%%e\u00a0=\u00a0'%e'\\n\",\u00a0$n);\u00a0\/\/\u00a0scientific\u00a0notationprintf(\"%%u\u00a0=\u00a0'%u'\\n\",\u00a0$n);\u00a0\/\/\u00a0unsigned\u00a0integer\u00a0representation\u00a0of\u00a0a\u00a0positive\u00a0integerprintf(\"%%u\u00a0=\u00a0'%u'\\n\",\u00a0$u);\u00a0\/\/\u00a0unsigned\u00a0integer\u00a0representation\u00a0of\u00a0a\u00a0negative\u00a0integerprintf(\"%%f\u00a0=\u00a0'%f'\\n\",\u00a0$n);\u00a0\/\/\u00a0floating\u00a0point\u00a0representationprintf(\"%%o\u00a0=\u00a0'%o'\\n\",\u00a0$n);\u00a0\/\/\u00a0octal\u00a0representationprintf(\"%%s\u00a0=\u00a0'%s'\\n\",\u00a0$n);\u00a0\/\/\u00a0string\u00a0representationprintf(\"%%x\u00a0=\u00a0'%x'\\n\",\u00a0$n);\u00a0\/\/\u00a0hexadecimal\u00a0representation\u00a0(lower-case)printf(\"%%X\u00a0=\u00a0'%X'\\n\",\u00a0$n);\u00a0\/\/\u00a0hexadecimal\u00a0representation\u00a0(upper-case)printf(\"%%+d\u00a0=\u00a0'%+d'\\n\",\u00a0$n);\u00a0\/\/\u00a0sign\u00a0specifier\u00a0on\u00a0a\u00a0positive\u00a0integerprintf(\"%%+d\u00a0=\u00a0'%+d'\\n\",\u00a0$u);\u00a0\/\/\u00a0sign\u00a0specifier\u00a0on\u00a0a\u00a0negative\u00a0integer?>           The above example will output:      %b = &#039;10100111101010011010101101&#039; %c = &#039;A&#039; %d = &#039;43951789&#039; %e = &#039;4.39518e+7&#039; %u = &#039;43951789&#039; %u = &#039;4251015507&#039; %f = &#039;43951789.000000&#039; %o = &#039;247523255&#039; %s = &#039;43951789&#039; %x = &#039;29ea6ad&#039; %X = &#039;29EA6AD&#039; %+d = &#039;+43951789&#039; %+d = &#039;-43951789&#039;               Example #7 printf(): string specifiers      <?php$s\u00a0=\u00a0'monkey';$t\u00a0=\u00a0'many\u00a0monkeys';printf(\"[%s]\\n\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0standard\u00a0string\u00a0outputprintf(\"[%10s]\\n\",\u00a0\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0right-justification\u00a0with\u00a0spacesprintf(\"[%-10s]\\n\",\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0left-justification\u00a0with\u00a0spacesprintf(\"[%010s]\\n\",\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0zero-padding\u00a0works\u00a0on\u00a0strings\u00a0tooprintf(\"[%'#10s]\\n\",\u00a0\u00a0$s);\u00a0\/\/\u00a0use\u00a0the\u00a0custom\u00a0padding\u00a0character\u00a0'#'printf(\"[%10.10s]\\n\",\u00a0$t);\u00a0\/\/\u00a0left-justification\u00a0but\u00a0with\u00a0a\u00a0cutoff\u00a0of\u00a010\u00a0characters?>           The above example will output:      [monkey] [    monkey] [monkey    ] [0000monkey] [####monkey] [many monke]               Example #8 sprintf(): zero-padded integers      <?php$isodate\u00a0=\u00a0sprintf(\"%04d-%02d-%02d\",\u00a0$year,\u00a0$month,\u00a0$day);?>                 Example #9 sprintf(): formatting currency      <?php$money1\u00a0=\u00a068.75;$money2\u00a0=\u00a054.35;$money\u00a0=\u00a0$money1\u00a0+\u00a0$money2;\/\/\u00a0echo\u00a0$money\u00a0will\u00a0output\u00a0\"123.1\";$formatted\u00a0=\u00a0sprintf(\"%01.2f\",\u00a0$money);\/\/\u00a0echo\u00a0$formatted\u00a0will\u00a0output\u00a0\"123.10\"?>                 Example #10 sprintf(): scientific notation      <?php$number\u00a0=\u00a0362525200;echo\u00a0sprintf(\"%.3e\",\u00a0$number);\u00a0\/\/\u00a0outputs\u00a03.625e+8?>                   See Also            printf() - Output a formatted string     sscanf() - Parses input from a string according to a format     fscanf() - Parses input from a file according to a format     vsprintf() - Return a formatted string     number_format() - Format a number with grouped thousands"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-ireplace.php","title":"str_ireplace","description":"str_ireplace   (PHP 5)str_ireplace \u2014 Case-insensitive version of str_replace().          Description       mixed str_ireplace     ( mixed $search    , mixed $replace    , mixed $subject    [, int &$count   ] )        This function returns a string or an array with all occurrences of    search in subject    (ignoring case) replaced with the given replace    value.  If you don&#039;t need fancy replacing rules, you should generally    use this function instead of    preg_replace() with the i modifier.            Parameters       If search and replace are    arrays, then str_ireplace() takes a value from each    array and uses them to search and replace on    subject. If replace has fewer    values than search, then an empty string is used for    the rest of replacement values. If search is an    array and replace is a string, then this replacement    string is used for every value of search. The    converse would not make sense, though.          If search or replace    are arrays, their elements are processed first to last.                       search                      The value being searched for, otherwise known as the        needle.  An array may be used to designate        multiple needles.                                replace                      The replacement value that replaces found search        values. An array may be used to designate multiple replacements.                                subject                      The string or array being searched and replaced on,        otherwise known as the haystack.                      If subject is an array, then the search and        replace is performed with every entry of         subject, and the return value is an array as        well.                                count                      If passed, this will be set to the number of replacements performed.                                     Return Values       Returns a string or an array of replacements.            Changelog                                 Version        Description                                    5.0.0                 The count parameter was added.                                            Examples            Example #1 str_ireplace() example       <?php$bodytag\u00a0=\u00a0str_ireplace(\"%body%\",\u00a0\"black\",\u00a0\"<body\u00a0text=%BODY%>\");?>                        Notes   Note: This function is binary-safe.   Caution    Replacement order gotcha         Because str_ireplace() replaces left to right, it might     replace a previously inserted value when doing multiple replacements.     Example #2 in the str_replace() documentation     demonstrates how this may affect you in practice.                See Also            str_replace() - Replace all occurrences of the search string with the replacement string     preg_replace() - Perform a regular expression search and replace     strtr() - Translate characters or replace substrings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-pad.php","title":"str_pad","description":"str_pad   (PHP 4 >= 4.0.1, PHP 5)str_pad \u2014 Pad a string to a certain length with another string          Description       string str_pad     ( string $input    , int $pad_length    [, string $pad_string = \" \"    [, int $pad_type = STR_PAD_RIGHT   ]] )        This functions returns the input string    padded on the left, the right, or both sides to the specified    padding length. If the optional argument    pad_string is not supplied, the    input is padded with spaces, otherwise it    is padded with characters from pad_string    up to the limit.            Parameters                    input                      The input string.                                pad_length                      If the value of pad_length is negative,        less than, or equal to the length of the input string, no padding        takes place.                                pad_string              Note:                  The pad_string may be truncated if the         required number of padding characters can&#039;t be evenly divided by the         pad_string&#039;s length.                                        pad_type                      Optional argument pad_type can be        STR_PAD_RIGHT, STR_PAD_LEFT,        or STR_PAD_BOTH. If        pad_type is not specified it is assumed to be        STR_PAD_RIGHT.                                     Return Values       Returns the padded string.             Examples            Example #1 str_pad() example       <?php$input\u00a0=\u00a0\"Alien\";echo\u00a0str_pad($input,\u00a010);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"Alien\u00a0\u00a0\u00a0\u00a0\u00a0\"echo\u00a0str_pad($input,\u00a010,\u00a0\"-=\",\u00a0STR_PAD_LEFT);\u00a0\u00a0\/\/\u00a0produces\u00a0\"-=-=-Alien\"echo\u00a0str_pad($input,\u00a010,\u00a0\"_\",\u00a0STR_PAD_BOTH);\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"__Alien___\"echo\u00a0str_pad($input,\u00a06\u00a0,\u00a0\"___\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"Alien_\"?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-rot13.php","title":"str_rot13","description":"str_rot13   (PHP 4 >= 4.2.0, PHP 5)str_rot13 \u2014 Perform the rot13 transform on a string          Description       string str_rot13     ( string $str    )        Performs the ROT13 encoding on the str argument and    returns the resulting string.          The ROT13 encoding simply shifts every letter by 13 places in the alphabet    while leaving non-alpha characters untouched. Encoding and decoding are    done by the same function, passing an encoded string as argument will    return the original version.            Parameters                    str                      The input string.                                     Return Values       Returns the ROT13 version of the given string.            Examples            Example #1 str_rot13() example       <?phpecho\u00a0str_rot13('PHP\u00a04.3.0');\u00a0\/\/\u00a0CUC\u00a04.3.0?>                        Changelog                                 Version        Description                                    4.3.0                 The behaviour of this function was fixed. Before this fix, the         str was also modified, as if it was passed         by reference."},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-shuffle.php","title":"str_shuffle","description":"str_shuffle   (PHP 4 >= 4.3.0, PHP 5)str_shuffle \u2014 Randomly shuffles a string          Description       string str_shuffle     ( string $str    )        str_shuffle() shuffles a string.  One permutation    of all possible is created.            Parameters                    str                      The input string.                                     Return Values       Returns the shuffled string.            Examples            Example #1 str_shuffle() example       <?php$str\u00a0=\u00a0'abcdef';$shuffled\u00a0=\u00a0str_shuffle($str);\/\/\u00a0This\u00a0will\u00a0echo\u00a0something\u00a0like:\u00a0bfdaececho\u00a0$shuffled;?>                        See Also            shuffle() - Shuffle an array     rand() - Generate a random integer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcasecmp.php","title":"strcasecmp","description":"strcasecmp   (PHP 4, PHP 5)strcasecmp \u2014 Binary safe case-insensitive string comparison          Description       int strcasecmp     ( string $str1    , string $str2    )        Binary safe case-insensitive string comparison.            Parameters                    str1                      The first string                                str2                      The second string                                     Return Values       Returns < 0 if str1 is less than    str2; > 0 if str1    is greater than str2, and 0 if they are    equal.            Examples            Example #1 strcasecmp() example       <?php$var1\u00a0=\u00a0\"Hello\";$var2\u00a0=\u00a0\"hello\";if\u00a0(strcasecmp($var1,\u00a0$var2)\u00a0==\u00a00)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'$var1\u00a0is\u00a0equal\u00a0to\u00a0$var2\u00a0in\u00a0a\u00a0case-insensitive\u00a0string\u00a0comparison';}?>                           See Also            strcmp() - Binary safe string comparison     preg_match() - Perform a regular expression match     substr_compare() - Binary safe comparison of two strings from an offset, up to length characters     strncasecmp() - Binary safe case-insensitive string comparison of the first n characters     stristr() - Case-insensitive strstr     substr() - Return part of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strchr.php","title":"strchr","description":"strchr    (PHP 4, PHP 5)strchr \u2014 Alias of strstr()         Description       This function is an alias of:     strstr()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-replace.php","title":"str_replace","description":"str_replace   (PHP 4, PHP 5)str_replace \u2014 Replace all occurrences of the search string with the replacement string          Description       mixed str_replace     ( mixed $search    , mixed $replace    , mixed $subject    [, int &$count   ] )        This function returns a string or an array with all occurrences of    search in subject    replaced with the given replace value.          If you don&#039;t need fancy replacing rules (like regular expressions), you    should always use this function instead of preg_replace().            Parameters       If search and replace are    arrays, then str_replace() takes a value from each array    and uses them to search and replace on subject. If    replace has fewer values than    search, then an empty string is used for the rest of    replacement values. If search is an array and    replace is a string, then this replacement string is    used for every value of search. The converse would    not make sense, though.          If search or replace    are arrays, their elements are processed first to last.                       search                      The value being searched for, otherwise known as the needle.        An array may be used to designate multiple needles.                                replace                      The replacement value that replaces found search        values. An array may be used to designate multiple replacements.                                subject                      The string or array being searched and replaced on,        otherwise known as the haystack.                      If subject is an array, then the search and        replace is performed with every entry of        subject, and the return value is an array as        well.                                count                      If passed, this will be set to the number of replacements performed.                                     Return Values       This function returns a string or an array with the replaced values.            Changelog                                 Version        Description                                    5.0.0                 The count parameter was added.                               4.3.3                 The behaviour of this function changed. In older versions a bug         existed when using arrays as both search and         replace parameters which caused empty         search indexes to be skipped without advancing         the internal pointer on the replace array.         This has been corrected in PHP 4.3.3, any scripts which relied on         this bug should remove empty search values prior to calling this         function in order to mimic the original behavior.                               4.0.5                 Most parameters can now be an array.                                            Examples            Example #1 Basic str_replace() examples       <?php\/\/\u00a0Provides:\u00a0<body\u00a0text='black'>$bodytag\u00a0=\u00a0str_replace(\"%body%\",\u00a0\"black\",\u00a0\"<body\u00a0text='%body%'>\");\/\/\u00a0Provides:\u00a0Hll\u00a0Wrld\u00a0f\u00a0PHP$vowels\u00a0=\u00a0array(\"a\",\u00a0\"e\",\u00a0\"i\",\u00a0\"o\",\u00a0\"u\",\u00a0\"A\",\u00a0\"E\",\u00a0\"I\",\u00a0\"O\",\u00a0\"U\");$onlyconsonants\u00a0=\u00a0str_replace($vowels,\u00a0\"\",\u00a0\"Hello\u00a0World\u00a0of\u00a0PHP\");\/\/\u00a0Provides:\u00a0You\u00a0should\u00a0eat\u00a0pizza,\u00a0beer,\u00a0and\u00a0ice\u00a0cream\u00a0every\u00a0day$phrase\u00a0\u00a0=\u00a0\"You\u00a0should\u00a0eat\u00a0fruits,\u00a0vegetables,\u00a0and\u00a0fiber\u00a0every\u00a0day.\";$healthy\u00a0=\u00a0array(\"fruits\",\u00a0\"vegetables\",\u00a0\"fiber\");$yummy\u00a0\u00a0\u00a0=\u00a0array(\"pizza\",\u00a0\"beer\",\u00a0\"ice\u00a0cream\");$newphrase\u00a0=\u00a0str_replace($healthy,\u00a0$yummy,\u00a0$phrase);\/\/\u00a0Provides:\u00a02$str\u00a0=\u00a0str_replace(\"ll\",\u00a0\"\",\u00a0\"good\u00a0golly\u00a0miss\u00a0molly!\",\u00a0$count);echo\u00a0$count;?>                           Example #2 Examples of potential str_replace() gotchas       <?php\/\/\u00a0Order\u00a0of\u00a0replacement$str\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0\"Line\u00a01\\nLine\u00a02\\rLine\u00a03\\r\\nLine\u00a04\\n\";$order\u00a0\u00a0\u00a0=\u00a0array(\"\\r\\n\",\u00a0\"\\n\",\u00a0\"\\r\");$replace\u00a0=\u00a0'<br\u00a0\/>';\/\/\u00a0Processes\u00a0\\r\\n's\u00a0first\u00a0so\u00a0they\u00a0aren't\u00a0converted\u00a0twice.$newstr\u00a0=\u00a0str_replace($order,\u00a0$replace,\u00a0$str);\/\/\u00a0Outputs\u00a0F\u00a0because\u00a0A\u00a0is\u00a0replaced\u00a0with\u00a0B,\u00a0then\u00a0B\u00a0is\u00a0replaced\u00a0with\u00a0C,\u00a0and\u00a0so\u00a0on...\/\/\u00a0Finally\u00a0E\u00a0is\u00a0replaced\u00a0with\u00a0F,\u00a0because\u00a0of\u00a0left\u00a0to\u00a0right\u00a0replacements.$search\u00a0\u00a0=\u00a0array('A',\u00a0'B',\u00a0'C',\u00a0'D',\u00a0'E');$replace\u00a0=\u00a0array('B',\u00a0'C',\u00a0'D',\u00a0'E',\u00a0'F');$subject\u00a0=\u00a0'A';echo\u00a0str_replace($search,\u00a0$replace,\u00a0$subject);\/\/\u00a0Outputs:\u00a0apearpearle\u00a0pear\/\/\u00a0For\u00a0the\u00a0same\u00a0reason\u00a0mentioned\u00a0above$letters\u00a0=\u00a0array('a',\u00a0'p');$fruit\u00a0\u00a0\u00a0=\u00a0array('apple',\u00a0'pear');$text\u00a0\u00a0\u00a0\u00a0=\u00a0'a\u00a0p';$output\u00a0\u00a0=\u00a0str_replace($letters,\u00a0$fruit,\u00a0$text);echo\u00a0$output;?>                        Notes   Note: This function is binary-safe.   Caution    Replacement order gotcha         Because str_replace() replaces left to right, it might     replace a previously inserted value when doing multiple replacements.     See also the examples in this document.          Note:          This function is case-sensitive. Use str_ireplace()     for case-insensitive replace.                See Also            str_ireplace() - Case-insensitive version of str_replace.     substr_replace() - Replace text within a portion of a string     preg_replace() - Perform a regular expression search and replace     strtr() - Translate characters or replace substrings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-word-count.php","title":"str_word_count","description":"str_word_count   (PHP 4 >= 4.3.0, PHP 5)str_word_count \u2014     Return information about words used in a string           Description       mixed str_word_count     ( string $string    [, int $format = 0    [, string $charlist   ]] )        Counts the number of words inside string.     If the optional format is not specified, then     the return value will be an integer representing the number of words     found. In the event the format is specified, the return    value will be an array, content of which is dependent on the     format. The possible value for the     format and the resultant outputs are listed below.          For the purpose of this function, &#039;word&#039; is defined as a locale dependent    string containing alphabetic characters, which also may contain, but not start    with \"&#039;\" and \"-\" characters.            Parameters                    string                      The string                                format                      Specify the return value of this function. The current supported values        are:                                      0 - returns the number of words found                                                 1 - returns an array containing all the words found inside the           string                                                 2 - returns an associative array, where the key is the numeric           position of the word inside the string and           the value is the actual word itself                                                            charlist                      A list of additional characters which will be considered as &#039;word&#039;                                     Return Values       Returns an array or an integer, depending on the    format chosen.            Changelog                                 Version        Description                                    5.1.0                 Added the charlist parameter                                            Examples            Example #1 A str_word_count() example       <?php$str\u00a0=\u00a0\"Hello\u00a0fri3nd,\u00a0you're\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0looking\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0good\u00a0today!\";print_r(str_word_count($str,\u00a01));print_r(str_word_count($str,\u00a02));print_r(str_word_count($str,\u00a01,\u00a0'\u00e0\u00e1\u00e3\u00e73'));echo\u00a0str_word_count($str);?>             The above example will output:       Array (     [0] => Hello     [1] => fri     [2] => nd     [3] => you&#039;re     [4] => looking     [5] => good     [6] => today )  Array (     [0] => Hello     [6] => fri     [10] => nd     [14] => you&#039;re     [29] => looking     [46] => good     [51] => today )  Array (     [0] => Hello     [1] => fri3nd     [2] => you&#039;re     [3] => looking     [4] => good     [5] => today )  7                      See Also            explode() - Split a string by string     preg_split() - Split string by a regular expression     split() - Split string into array by regular expression     count_chars() - Return information about characters used in a string     substr_count() - Count the number of substring occurrences"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcoll.php","title":"strcoll","description":"strcoll   (PHP 4 >= 4.0.5, PHP 5)strcoll \u2014 Locale based string comparison          Description       int strcoll     ( string $str1    , string $str2    )        Note that this comparison is case sensitive, and unlike    strcmp() this function is not binary safe.          strcoll() uses the current locale for doing the    comparisons.  If the current locale is C or POSIX, this function is    equivalent to strcmp().            Parameters                    str1                      The first string.                                str2                      The second string.                                     Return Values       Returns < 0 if str1 is less than    str2; > 0 if    str1 is greater than    str2, and 0 if they are equal.            Changelog                                 Version        Description                                    4.2.3                 This function now works on win32.                                            See Also            preg_match() - Perform a regular expression match     strcmp() - Binary safe string comparison     strcasecmp() - Binary safe case-insensitive string comparison     substr() - Return part of a string     stristr() - Case-insensitive strstr     strncasecmp() - Binary safe case-insensitive string comparison of the first n characters     strncmp() - Binary safe string comparison of the first n characters     strstr() - Find first occurrence of a string     setlocale() - Set locale information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcspn.php","title":"strcspn","description":"strcspn   (PHP 4, PHP 5)strcspn \u2014 Find length of initial segment not matching mask          Description       int strcspn     ( string $str1    , string $str2    [, int $start    [, int $length   ]] )        Returns the length of the initial segment of    str1 which does not    contain any of the characters in str2.            Parameters                    str1                      The first string.                                str2                      The second string.                                start                      The start position of the string to examine.                                length                      The length of the string to examine.                                     Return Values       Returns the length of the segment as an integer.            Changelog                                 Version        Description                                    4.3.0                 The start and length         were added                                            Examples       Example #1 strcspn() example      <?php$a\u00a0=\u00a0strcspn('abcd',\u00a0\u00a0'apple');$b\u00a0=\u00a0strcspn('abcd',\u00a0\u00a0'banana');$c\u00a0=\u00a0strcspn('hello',\u00a0'l');$d\u00a0=\u00a0strcspn('hello',\u00a0'world');var_dump($a);var_dump($b);var_dump($c);var_dump($d);?>           The above example will output:      int(0) int(0) int(2) int(2)                 Notes   Note: This function is binary-safe.         See Also            strspn() - Finds the length of the initial segment of a string consisting    entirely of characters contained within a given mask."},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-split.php","title":"str_split","description":"str_split   (PHP 5)str_split \u2014 Convert a string to an array          Description       array str_split     ( string $string    [, int $split_length = 1   ] )        Converts a string to an array.             Parameters                    string                      The input string.                                split_length                      Maximum length of the chunk.                                     Return Values       If the optional split_length parameter is    specified, the returned array will be broken down into chunks with each    being split_length in length, otherwise each chunk    will be one character in length.          FALSE is returned if split_length is less than 1.    If the split_length length exceeds the length of    string, the entire string is returned as the first    (and only) array element.            Examples            Example #1 Example uses of str_split()       <?php$str\u00a0=\u00a0\"Hello\u00a0Friend\";$arr1\u00a0=\u00a0str_split($str);$arr2\u00a0=\u00a0str_split($str,\u00a03);print_r($arr1);print_r($arr2);?>             The above example will output:       Array (     [0] => H     [1] => e     [2] => l     [3] => l     [4] => o     [5] =>     [6] => F     [7] => r     [8] => i     [9] => e     [10] => n     [11] => d )  Array (     [0] => Hel     [1] => lo     [2] => Fri     [3] => end )                      See Also            chunk_split() - Split a string into smaller chunks     preg_split() - Split string by a regular expression     explode() - Split a string by string     count_chars() - Return information about characters used in a string     str_word_count() - Return information about words used in a string     for"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcmp.php","title":"strcmp","description":"strcmp   (PHP 4, PHP 5)strcmp \u2014 Binary safe string comparison          Description       int strcmp     ( string $str1    , string $str2    )        Note that this comparison is case sensitive.            Parameters                    str1                      The first string.                                str2                      The second string.                                     Return Values       Returns < 0 if str1 is less than    str2; > 0 if str1    is greater than str2, and 0 if they are    equal.            See Also            strcasecmp() - Binary safe case-insensitive string comparison     preg_match() - Perform a regular expression match     substr_compare() - Binary safe comparison of two strings from an offset, up to length characters     strncmp() - Binary safe string comparison of the first n characters     strstr() - Find first occurrence of a string     substr() - Return part of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stripcslashes.php","title":"stripcslashes","description":"stripcslashes   (PHP 4, PHP 5)stripcslashes \u2014 Un-quote string quoted with addcslashes()          Description       string stripcslashes     ( string $str    )        Returns a string with backslashes stripped off. Recognizes    C-like \\n, \\r ..., octal    and hexadecimal representation.            Parameters                    str                      The string to be unescaped.                                     Return Values       Returns the unescaped string.            See Also            addcslashes() - Quote string with slashes in a C style"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stripos.php","title":"stripos","description":"stripos   (PHP 5)stripos \u2014 Find position of first occurrence of a case-insensitive string          Description       int stripos     ( string $haystack    , string $needle    [, int $offset = 0   ] )        Returns the numeric position of the first occurrence of    needle in the haystack    string.          Unlike strpos(), stripos() is    case-insensitive.            Parameters                    haystack                      The string to search in                                needle                      Note that the needle may be a string of one or        more characters.                      If needle is not a string, it is converted to        an integer and applied as the ordinal value of a character.                                offset                      The optional offset parameter allows you        to specify which character in haystack to        start searching. The position returned is still relative to the        beginning of haystack.                                     Return Values       Returns the position as an integer. If needle is not found,    stripos() will return boolean FALSE.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples           Example #1 stripos() examples       <?php$findme\u00a0\u00a0\u00a0\u00a0=\u00a0'a';$mystring1\u00a0=\u00a0'xyz';$mystring2\u00a0=\u00a0'ABC';$pos1\u00a0=\u00a0stripos($mystring1,\u00a0$findme);$pos2\u00a0=\u00a0stripos($mystring2,\u00a0$findme);\/\/\u00a0Nope,\u00a0'a'\u00a0is\u00a0certainly\u00a0not\u00a0in\u00a0'xyz'if\u00a0($pos1\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0not\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring1'\";}\/\/\u00a0Note\u00a0our\u00a0use\u00a0of\u00a0===.\u00a0\u00a0Simply\u00a0==\u00a0would\u00a0not\u00a0work\u00a0as\u00a0expected\/\/\u00a0because\u00a0the\u00a0position\u00a0of\u00a0'a'\u00a0is\u00a0the\u00a00th\u00a0(first)\u00a0character.if\u00a0($pos2\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"We\u00a0found\u00a0'$findme'\u00a0in\u00a0'$mystring2'\u00a0at\u00a0position\u00a0$pos2\";}?>                        Notes   Note: This function is binary-safe.         See Also            strpos() - Find position of first occurrence of a string     strrpos() - Find the position of the last occurrence of a substring in a string     strrchr() - Find the last occurrence of a character in a string     substr() - Return part of a string     stristr() - Case-insensitive strstr     strstr() - Find first occurrence of a string     strripos() - Find position of last occurrence of a case-insensitive string in a string     str_ireplace() - Case-insensitive version of str_replace."},{"url":"http:\/\/www.php.net\/manual\/en\/function.stripslashes.php","title":"stripslashes","description":"stripslashes   (PHP 4, PHP 5)stripslashes \u2014 Un-quotes a quoted string          Description       string stripslashes     ( string $str    )        Un-quotes a quoted string.      Note:          If magic_quotes_sybase is     on, no backslashes are stripped off but two apostrophes are replaced by     one instead.              An example use of stripslashes() is when the PHP    directive magic_quotes_gpc    is on (it&#039;s on by default), and you aren&#039;t inserting    this data into a place (such as a database) that requires escaping.    For example, if you&#039;re simply outputting data straight from an HTML form.            Parameters                    str                      The input string.                                     Return Values       Returns a string with backslashes stripped off.    (\\&#039; becomes &#039; and so on.)    Double backslashes (\\\\) are made into a single    backslash (\\).            Examples            Example #1 A stripslashes() example       <?php$str\u00a0=\u00a0\"Is\u00a0your\u00a0name\u00a0O\\'reilly?\";\/\/\u00a0Outputs:\u00a0Is\u00a0your\u00a0name\u00a0O'reilly?echo\u00a0stripslashes($str);?>                  Note:          stripslashes() is not recursive. If you want to apply     this function to a multi-dimensional array, you need to use a recursive     function.                   Example #2 Using stripslashes() on an array       <?phpfunction\u00a0stripslashes_deep($value){\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a0is_array($value)\u00a0?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array_map('stripslashes_deep',\u00a0$value)\u00a0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stripslashes($value);\u00a0\u00a0\u00a0\u00a0return\u00a0$value;}\/\/\u00a0Example$array\u00a0=\u00a0array(\"f\\\\'oo\",\u00a0\"b\\\\'ar\",\u00a0array(\"fo\\\\'o\",\u00a0\"b\\\\'ar\"));$array\u00a0=\u00a0stripslashes_deep($array);\/\/\u00a0Outputprint_r($array);?>             The above example will output:       Array (     [0] => f&#039;oo     [1] => b&#039;ar     [2] => Array         (             [0] => fo&#039;o             [1] => b&#039;ar         )  )                      See Also            addslashes() - Quote string with slashes     get_magic_quotes_gpc() - Gets the current configuration setting of magic_quotes_gpc"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stristr.php","title":"stristr","description":"stristr   (PHP 4, PHP 5)stristr \u2014 Case-insensitive strstr()          Description       string stristr     ( string $haystack    , mixed $needle    [, bool $before_needle = false   ] )        Returns all of haystack from the first    occurrence of needle to the end.            Parameters                    haystack                      The string to search in                                needle                      If needle is not a string, it is converted to        an integer and applied as the ordinal value of a character.                                before_needle                      If TRUE, stristr()        returns the part of the haystack before the        first occurrence of the needle.                                   needle and haystack    are examined in a case-insensitive manner.            Return Values       Returns the matched substring. If needle is not    found, returns FALSE.            Changelog                                 Version        Description                                    5.3.0                 Added the optional parameter before_needle.                               4.3.0                 stristr() was made binary safe.                                            Examples            Example #1 stristr() example       <?php\u00a0\u00a0$email\u00a0=\u00a0'USER@EXAMPLE.com';\u00a0\u00a0echo\u00a0stristr($email,\u00a0'e');\u00a0\/\/\u00a0outputs\u00a0ER@EXAMPLE.com\u00a0\u00a0echo\u00a0stristr($email,\u00a0'e',\u00a0true);\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0,\u00a0outputs\u00a0US?>                           Example #2 Testing if a string is found or not       <?php\u00a0\u00a0$string\u00a0=\u00a0'Hello\u00a0World!';\u00a0\u00a0if(stristr($string,\u00a0'earth')\u00a0===\u00a0FALSE)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'\"earth\"\u00a0not\u00a0found\u00a0in\u00a0string';\u00a0\u00a0}\/\/\u00a0outputs:\u00a0\"earth\"\u00a0not\u00a0found\u00a0in\u00a0string?>                           Example #3 Using a non \"string\" needle       <?php\u00a0\u00a0$string\u00a0=\u00a0'APPLE';\u00a0\u00a0echo\u00a0stristr($string,\u00a097);\u00a0\/\/\u00a097\u00a0=\u00a0lowercase\u00a0a\/\/\u00a0outputs:\u00a0APPLE?>                        Notes   Note: This function is binary-safe.         See Also            strstr() - Find first occurrence of a string     strrchr() - Find the last occurrence of a character in a string     substr() - Return part of a string     preg_match() - Perform a regular expression match"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strip-tags.php","title":"strip_tags","description":"strip_tags   (PHP 4, PHP 5)strip_tags \u2014 Strip HTML and PHP tags from a string          Description       string strip_tags     ( string $str    [, string $allowable_tags   ] )        This function tries to return a string with all NUL bytes, HTML and PHP tags stripped    from a given str.  It uses the same tag stripping    state machine as the fgetss() function.            Parameters                    str                      The input string.                                allowable_tags                      You can use the optional second parameter to specify tags which should        not be stripped.              Note:                  HTML comments and PHP tags are also stripped. This is hardcoded and         can not be changed with allowable_tags.                      Note:                  This parameter should not contain whitespace.         strip_tags() sees a tag as a case-insensitive         string between < and the first whitespace or         >. It means that         strip_tags(\"<br\/>\", \"<br>\") returns an         empty string.                                             Return Values       Returns the stripped string.            Changelog                                 Version        Description                                    5.0.0                 strip_tags() is now binary safe                               4.3.0                 HTML comments are now always stripped                                            Examples            Example #1 strip_tags() example       <?php$text\u00a0=\u00a0'<p>Test\u00a0paragraph.<\/p><!--\u00a0Comment\u00a0-->\u00a0<a\u00a0href=\"#fragment\">Other\u00a0text<\/a>';echo\u00a0strip_tags($text);echo\u00a0\"\\n\";\/\/\u00a0Allow\u00a0<p>\u00a0and\u00a0<a>echo\u00a0strip_tags($text,\u00a0'<p><a>');?>             The above example will output:       Test paragraph. Other text <p>Test paragraph.<\/p> <a href=\"#fragment\">Other text<\/a>                      Notes   Warning         Because strip_tags() does not actually validate the     HTML, partial or broken tags can result in the removal of more     text\/data than expected.          Warning         This function does not modify any attributes on the tags that you allow     using allowable_tags, including the     style and onmouseover attributes     that a mischievous user may abuse when posting text that will be shown     to other users.                See Also            htmlspecialchars() - Convert special characters to HTML entities"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strncasecmp.php","title":"strncasecmp","description":"strncasecmp   (PHP 4 >= 4.0.2, PHP 5)strncasecmp \u2014 Binary safe case-insensitive string comparison of the first n characters          Description       int strncasecmp     ( string $str1    , string $str2    , int $len    )        This function is similar to strcasecmp(), with the    difference that you can specify the (upper limit of the) number of    characters from each string to be used in the comparison.            Parameters                    str1                      The first string.                                str2                      The second string.                                len                      The length of strings to be used in the comparison.                                     Return Values       Returns < 0 if str1 is less than    str2; > 0 if str1 is    greater than str2, and 0 if they are equal.            See Also            strncmp() - Binary safe string comparison of the first n characters     preg_match() - Perform a regular expression match     substr_compare() - Binary safe comparison of two strings from an offset, up to length characters     strcasecmp() - Binary safe case-insensitive string comparison     stristr() - Case-insensitive strstr     substr() - Return part of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strnatcasecmp.php","title":"strnatcasecmp","description":"strnatcasecmp   (PHP 4, PHP 5)strnatcasecmp \u2014 Case insensitive string comparisons using a \"natural order\" algorithm          Description       int strnatcasecmp     ( string $str1    , string $str2    )        This function implements a comparison algorithm that orders alphanumeric    strings in the way a human being would.  The behaviour of this function is    similar to strnatcmp(), except that the comparison is    not case sensitive.  For more information see: Martin Pool&#039;s \u00bb\u00a0Natural Order String Comparison page.            Parameters                    str1                      The first string.                                str2                      The second string.                                     Return Values       Similar to other string comparison functions, this one returns < 0 if    str1 is less than str2 >    0 if str1 is greater than    str2, and 0 if they are equal.            See Also            preg_match() - Perform a regular expression match     strcmp() - Binary safe string comparison     strcasecmp() - Binary safe case-insensitive string comparison     substr() - Return part of a string     stristr() - Case-insensitive strstr     strncasecmp() - Binary safe case-insensitive string comparison of the first n characters     strncmp() - Binary safe string comparison of the first n characters     strstr() - Find first occurrence of a string     setlocale() - Set locale information"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strnatcmp.php","title":"strnatcmp","description":"strnatcmp   (PHP 4, PHP 5)strnatcmp \u2014 String comparisons using a \"natural order\" algorithm          Description       int strnatcmp     ( string $str1    , string $str2    )        This function implements a comparison algorithm that orders    alphanumeric strings in the way a human being would, this is    described as a \"natural ordering\".      Note that this comparison is case sensitive.            Parameters                    str1                      The first string.                                str2                      The second string.                                     Return Values       Similar to other string comparison functions, this one returns < 0 if    str1 is less than str2; >    0 if str1 is greater than    str2, and 0 if they are equal.            Examples       An example of the difference between this algorithm and the regular    computer string sorting algorithms (used in strcmp())    can be seen below:           <?php$arr1\u00a0=\u00a0$arr2\u00a0=\u00a0array(\"img12.png\",\u00a0\"img10.png\",\u00a0\"img2.png\",\u00a0\"img1.png\");echo\u00a0\"Standard\u00a0string\u00a0comparison\\n\";usort($arr1,\u00a0\"strcmp\");print_r($arr1);echo\u00a0\"\\nNatural\u00a0order\u00a0string\u00a0comparison\\n\";usort($arr2,\u00a0\"strnatcmp\");print_r($arr2);?>             The above example will output:       Standard string comparison Array (     [0] => img1.png     [1] => img10.png     [2] => img12.png     [3] => img2.png )  Natural order string comparison Array (     [0] => img1.png     [1] => img2.png     [2] => img10.png     [3] => img12.png )              For more information see: Martin Pool&#039;s \u00bb\u00a0Natural Order String Comparison    page.            See Also            preg_match() - Perform a regular expression match     strcasecmp() - Binary safe case-insensitive string comparison     substr() - Return part of a string     stristr() - Case-insensitive strstr     strcmp() - Binary safe string comparison     strncmp() - Binary safe string comparison of the first n characters     strncasecmp() - Binary safe case-insensitive string comparison of the first n characters     strnatcasecmp() - Case insensitive string comparisons using a \"natural order\" algorithm     strstr() - Find first occurrence of a string     natsort() - Sort an array using a \"natural order\" algorithm     natcasesort() - Sort an array using a case insensitive \"natural order\" algorithm"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strlen.php","title":"strlen","description":"strlen   (PHP 4, PHP 5)strlen \u2014 Get string length         Description       int strlen     ( string $string    )        Returns the length of the given string.            Parameters                    string                      The string being measured for length.                                     Return Values       The length of the string on success,     and 0 if the string is empty.            Changelog                         Version       Description                               5.3.0               Prior versions treated arrays as the string Array, thus returning        a string length of 5 and emitting an E_NOTICE level error.                                    Examples            Example #1 A strlen() example       <?php$str\u00a0=\u00a0'abcdef';echo\u00a0strlen($str);\u00a0\/\/\u00a06$str\u00a0=\u00a0'\u00a0ab\u00a0cd\u00a0';echo\u00a0strlen($str);\u00a0\/\/\u00a07?>                        Notes   Note:          strlen() returns NULL when executed on arrays, and     an E_WARNING level error is emitted.                See Also            count() - Count all elements in an array, or something in an object     mb_strlen() - Get string length"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strpbrk.php","title":"strpbrk","description":"strpbrk   (PHP 5)strpbrk \u2014 Search a string for any of a set of characters          Description       string strpbrk     ( string $haystack    , string $char_list    )        strpbrk() searches the haystack    string for a char_list.            Parameters                    haystack                      The string where char_list is looked for.                                char_list                      This parameter is case sensitive.                                     Return Values       Returns a string starting from the character found, or FALSE if it is    not found.            Examples            Example #1 strpbrk() example       <?php$text\u00a0=\u00a0'This\u00a0is\u00a0a\u00a0Simple\u00a0text.';\/\/\u00a0this\u00a0echoes\u00a0\"is\u00a0is\u00a0a\u00a0Simple\u00a0text.\"\u00a0because\u00a0'i'\u00a0is\u00a0matched\u00a0firstecho\u00a0strpbrk($text,\u00a0'mi');\/\/\u00a0this\u00a0echoes\u00a0\"Simple\u00a0text.\"\u00a0because\u00a0chars\u00a0are\u00a0case\u00a0sensitiveecho\u00a0strpbrk($text,\u00a0'S');?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strrev.php","title":"strrev","description":"strrev   (PHP 4, PHP 5)strrev \u2014 Reverse a string          Description       string strrev     ( string $string    )        Returns string, reversed.            Parameters                    string                      The string to be reversed.                                     Return Values       Returns the reversed string.            Examples            Example #1 Reversing a string with strrev()       <?phpecho\u00a0strrev(\"Hello\u00a0world!\");\u00a0\/\/\u00a0outputs\u00a0\"!dlrow\u00a0olleH\"?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strrchr.php","title":"strrchr","description":"strrchr   (PHP 4, PHP 5)strrchr \u2014 Find the last occurrence of a character in a string          Description       string strrchr     ( string $haystack    , mixed $needle    )        This function returns the portion of haystack which    starts at the last occurrence of needle and goes    until the end of haystack.            Parameters                    haystack                      The string to search in                                needle                      If needle contains more than one character,        only the first is used. This behavior is different from that of        strstr().                      If needle is not a string, it is converted to        an integer and applied as the ordinal value of a character.                                     Return Values       This function returns the portion of string, or FALSE if    needle is not found.            Changelog                                 Version        Description                                    4.3.0                 This function is now binary safe.                                            Examples            Example #1 strrchr() example       <?php\/\/\u00a0get\u00a0last\u00a0directory\u00a0in\u00a0$PATH$dir\u00a0=\u00a0substr(strrchr($PATH,\u00a0\":\"),\u00a01);\/\/\u00a0get\u00a0everything\u00a0after\u00a0last\u00a0newline$text\u00a0=\u00a0\"Line\u00a01\\nLine\u00a02\\nLine\u00a03\";$last\u00a0=\u00a0substr(strrchr($text,\u00a010),\u00a01\u00a0);?>                           Notes   Note: This function is binary-safe.         See Also            strstr() - Find first occurrence of a string     substr() - Return part of a string     stristr() - Case-insensitive strstr"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strncmp.php","title":"strncmp","description":"strncmp   (PHP 4, PHP 5)strncmp \u2014 Binary safe string comparison of the first n characters          Description       int strncmp     ( string $str1    , string $str2    , int $len    )        This function is similar to strcmp(), with the    difference that you can specify the (upper limit of the) number of    characters from each string to be used in the comparison.          Note that this comparison is case sensitive.            Parameters                    str1                      The first string.                                str2                      The second string.                                len                      Number of characters to use in the comparison.                                     Return Values       Returns < 0 if str1 is less than    str2; > 0 if str1    is greater than str2, and 0 if they are    equal.            See Also            strncasecmp() - Binary safe case-insensitive string comparison of the first n characters     preg_match() - Perform a regular expression match     substr_compare() - Binary safe comparison of two strings from an offset, up to length characters     strcmp() - Binary safe string comparison     strstr() - Find first occurrence of a string     substr() - Return part of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strripos.php","title":"strripos","description":"strripos   (PHP 5)strripos \u2014 Find position of last occurrence of a case-insensitive string in a string          Description       int strripos     ( string $haystack    , string $needle    [, int $offset = 0   ] )        Find position of last occurrence of a string in a string. Unlike    strrpos(), strripos() is    case-insensitive.            Parameters                    haystack                      The string to search in.                                needle                      If needle is not a string, it is converted        to an integer and applied as the ordinal value of a character.                                offset                      If specified, search will stop this number of characters counted from the        beginning of the string. If the value is negative, search will instead start        from that many characters from the end of the string.                                     Return Values       Returns the numerical position of the last occurrence of    needle. Also note that string positions start at 0,    and not 1.          If needle is not found, FALSE is returned.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples            Example #1 A simple strripos() example       <?php$haystack\u00a0=\u00a0'ababcd';$needle\u00a0\u00a0\u00a0=\u00a0'aB';$pos\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0strripos($haystack,\u00a0$needle);if\u00a0($pos\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Sorry,\u00a0we\u00a0did\u00a0not\u00a0find\u00a0($needle)\u00a0in\u00a0($haystack)\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Congratulations!\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"We\u00a0found\u00a0the\u00a0last\u00a0($needle)\u00a0in\u00a0($haystack)\u00a0at\u00a0position\u00a0($pos)\";}?>             The above example will output:          Congratulations!    We found the last (aB) in (ababcd) at position (2)                      See Also            strpos() - Find position of first occurrence of a string     stripos() - Find position of first occurrence of a case-insensitive string     strrchr() - Find the last occurrence of a character in a string     substr() - Return part of a string     stristr() - Case-insensitive strstr     strstr() - Find first occurrence of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strspn.php","title":"strspn","description":"strspn   (PHP 4, PHP 5)strspn \u2014     Finds the length of the initial segment of a string consisting    entirely of characters contained within a given mask.             Description       int strspn     ( string $subject    , string $mask    [, int $start    [, int $length   ]] )        Finds the length of the initial segment of subject    that contains only characters from mask.          If start and length    are omitted, then all of subject will be    examined. If they are included, then the effect will be the same as    calling strspn(substr($subject, $start, $length),    $mask) (see substr    for more information).          The line of code:           <?php$var\u00a0=\u00a0strspn(\"42\u00a0is\u00a0the\u00a0answer\u00a0to\u00a0the\u00a0128th\u00a0question.\",\u00a0\"1234567890\");?>                will assign 2 to $var,    because the string \"42\" is the initial segment    of subject that consists only of characters    contained within \"1234567890\".            Parameters                    subject                      The string to examine.                                mask                      The list of allowable characters.                                start                      The position in subject to        start searching.                      If start is given and is non-negative,        then strspn() will begin        examining subject at        the start&#039;th position. For instance, in        the string &#039;abcdef&#039;, the character at        position 0 is &#039;a&#039;, the        character at position 2 is        &#039;c&#039;, and so forth.                      If start is given and is negative,        then strspn() will begin        examining subject at        the start&#039;th position from the end        of subject.                                length                      The length of the segment from subject        to examine.                       If length is given and is non-negative,        then subject will be examined        for length characters after the starting        position.                       If lengthis given and is negative,         then subject will be examined from the         starting position up to length         characters from the end of subject.                                     Return Values       Returns the length of the initial segment of subject    which consists entirely of characters in mask.            Changelog                                 Version        Description                                    4.3.0                 The start and length         parameters were added                                            Examples            Example #1 strspn() example       <?php\/\/\u00a0subject\u00a0does\u00a0not\u00a0start\u00a0with\u00a0any\u00a0characters\u00a0from\u00a0maskvar_dump(strspn(\"foo\",\u00a0\"o\"));\/\/\u00a0examine\u00a0two\u00a0characters\u00a0from\u00a0subject\u00a0starting\u00a0at\u00a0offset\u00a01var_dump(strspn(\"foo\",\u00a0\"o\",\u00a01,\u00a02));\/\/\u00a0examine\u00a0one\u00a0character\u00a0from\u00a0subject\u00a0starting\u00a0at\u00a0offset\u00a01var_dump(strspn(\"foo\",\u00a0\"o\",\u00a01,\u00a01));?>             The above example will output:       int(0) int(2) int(1)                      Notes   Note: This function is binary-safe.         See Also            strcspn() - Find length of initial segment not matching mask"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strstr.php","title":"strstr","description":"strstr   (PHP 4, PHP 5)strstr \u2014 Find first occurrence of a string          Description       string strstr     ( string $haystack    , mixed $needle    [, bool $before_needle = false   ] )        Returns part of haystack string from the first    occurrence of needle to the end of    haystack.      Note:          This function is case-sensitive. For case-insensitive searches, use     stristr().          Note:          If you only want to determine if a particular needle     occurs within haystack, use the faster and less memory     intensive function strpos() instead.                Parameters                    haystack                      The input string.                                needle                      If needle is not a string, it is converted to        an integer and applied as the ordinal value of a character.                                before_needle                      If TRUE, strstr() returns        the part of the haystack before the first        occurrence of the needle.                                     Return Values       Returns the portion of string, or FALSE if needle    is not found.            Changelog                                 Version        Description                                    5.3.0                 Added the optional parameter before_needle.                               4.3.0                 strstr() was made binary safe.                                            Examples            Example #1 strstr() example       <?php$email\u00a0\u00a0=\u00a0'name@example.com';$domain\u00a0=\u00a0strstr($email,\u00a0'@');echo\u00a0$domain;\u00a0\/\/\u00a0prints\u00a0@example.com$user\u00a0=\u00a0strstr($email,\u00a0'@',\u00a0true);\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0echo\u00a0$user;\u00a0\/\/\u00a0prints\u00a0name?>                        See Also            preg_match() - Perform a regular expression match     stristr() - Case-insensitive strstr     strpos() - Find position of first occurrence of a string     strrchr() - Find the last occurrence of a character in a string     substr() - Return part of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strrpos.php","title":"strrpos","description":"strrpos   (PHP 4, PHP 5)strrpos \u2014 Find the position of the last occurrence of a substring in a string          Description       int strrpos     ( string $haystack    , string $needle    [, int $offset = 0   ] )        Returns the numeric position of the last occurrence of    needle in the haystack    string.            Parameters                    haystack                      The string to search in.                                needle                      If needle is not a string, it is converted        to an integer and applied as the ordinal value of a character.                                offset                      If specified, search will stop this number of characters counted from the        beginning of the string. If the value is negative, search will instead start        from that many characters from the end of the string.                                     Return Values       Returns the position where the needle exists. Returns FALSE if the needle    was not found.             Changelog                                 Version        Description                                    5.0.0                 The needle may now be a string of more than one         character.                               5.0.0                 The offset parameter was introduced.                                             Examples            Example #1 Checking if a needle is in the haystack           It is easy to mistake the return values for \"character found at      position 0\" and \"character not found\".  Here&#039;s how to detect      the difference:            <?php$pos\u00a0=\u00a0strrpos($mystring,\u00a0\"b\");if\u00a0($pos\u00a0===\u00a0false)\u00a0{\u00a0\/\/\u00a0note:\u00a0three\u00a0equal\u00a0signs\u00a0\u00a0\u00a0\u00a0\/\/\u00a0not\u00a0found...}?>                           Example #2 Searching with offsets       <?php$foo\u00a0=\u00a0\"0123456789a123456789b123456789c\";var_dump(strrpos($foo,\u00a0'7',\u00a0-5));\u00a0\u00a0\/\/\u00a0Starts\u00a0looking\u00a0backwards\u00a0five\u00a0positions\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0from\u00a0the\u00a0end.\u00a0Result:\u00a0int(17)var_dump(strrpos($foo,\u00a0'7',\u00a020));\u00a0\u00a0\/\/\u00a0Starts\u00a0searching\u00a020\u00a0positions\u00a0into\u00a0the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0string.\u00a0Result:\u00a0int(27)var_dump(strrpos($foo,\u00a0'7',\u00a028));\u00a0\u00a0\/\/\u00a0Result:\u00a0bool(false)?>                        See Also            strpos() - Find position of first occurrence of a string     strripos() - Find position of last occurrence of a case-insensitive string in a string     strrchr() - Find the last occurrence of a character in a string     substr() - Return part of a string     stristr() - Case-insensitive strstr     strstr() - Find first occurrence of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strpos.php","title":"strpos","description":"strpos   (PHP 4, PHP 5)strpos \u2014 Find position of first occurrence of a string          Description       int strpos     ( string $haystack    , mixed $needle    [, int $offset = 0   ] )        Returns the numeric position of the first occurrence of    needle in the haystack    string.            Parameters                    haystack                      The string to search in.                                needle                      If needle is not a string, it is converted        to an integer and applied as the ordinal value of a character.                                offset                      The optional offset parameter allows you        to specify which character in haystack to        start searching. The position returned is still relative to the        beginning of haystack.                                     Return Values       Returns the position as an integer. If needle is    not found, strpos() will return boolean    FALSE.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         Examples            Example #1 Using ===       <?php$mystring\u00a0=\u00a0'abc';$findme\u00a0\u00a0\u00a0=\u00a0'a';$pos\u00a0=\u00a0strpos($mystring,\u00a0$findme);\/\/\u00a0Note\u00a0our\u00a0use\u00a0of\u00a0===.\u00a0\u00a0Simply\u00a0==\u00a0would\u00a0not\u00a0work\u00a0as\u00a0expected\/\/\u00a0because\u00a0the\u00a0position\u00a0of\u00a0'a'\u00a0was\u00a0the\u00a00th\u00a0(first)\u00a0character.if\u00a0($pos\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0not\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0and\u00a0exists\u00a0at\u00a0position\u00a0$pos\";}?>                      Example #2 Using !==       <?php$mystring\u00a0=\u00a0'abc';$findme\u00a0\u00a0\u00a0=\u00a0'a';$pos\u00a0=\u00a0strpos($mystring,\u00a0$findme);\/\/\u00a0The\u00a0!==\u00a0operator\u00a0can\u00a0also\u00a0be\u00a0used.\u00a0\u00a0Using\u00a0!=\u00a0would\u00a0not\u00a0work\u00a0as\u00a0expected\/\/\u00a0because\u00a0the\u00a0position\u00a0of\u00a0'a'\u00a0is\u00a00.\u00a0The\u00a0statement\u00a0(0\u00a0!=\u00a0false)\u00a0evaluates\u00a0\/\/\u00a0to\u00a0false.if\u00a0($pos\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0and\u00a0exists\u00a0at\u00a0position\u00a0$pos\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0not\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";}?>                      Example #3 Using an offset       <?php\/\/\u00a0We\u00a0can\u00a0search\u00a0for\u00a0the\u00a0character,\u00a0ignoring\u00a0anything\u00a0before\u00a0the\u00a0offset$newstring\u00a0=\u00a0'abcdef\u00a0abcdef';$pos\u00a0=\u00a0strpos($newstring,\u00a0'a',\u00a01);\u00a0\/\/\u00a0$pos\u00a0=\u00a07,\u00a0not\u00a00?>                        Notes   Note: This function is binary-safe.         See Also            strrpos() - Find the position of the last occurrence of a substring in a string     stripos() - Find position of first occurrence of a case-insensitive string     strripos() - Find position of last occurrence of a case-insensitive string in a string     strrchr() - Find the last occurrence of a character in a string     substr() - Return part of a string     stristr() - Case-insensitive strstr     strstr() - Find first occurrence of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtok.php","title":"strtok","description":"strtok   (PHP 4, PHP 5)strtok \u2014 Tokenize string          Description       string strtok     ( string $str    , string $token    )        string strtok     ( string $token    )        strtok() splits a string (str)    into smaller strings (tokens), with each token being delimited by any    character from token.    That is, if you have a string like \"This is an example string\" you    could tokenize this string into its individual words by using the    space character as the token.          Note that only the first call to strtok uses the string argument.    Every subsequent call to strtok only needs the token to use, as    it keeps track of where it is in the current string.  To start    over, or to tokenize a new string you simply call strtok with the    string argument again to initialize it.  Note that you may put    multiple tokens in the token parameter.  The string will be    tokenized when any one of the characters in the argument are    found.            Parameters                    str                      The string being split up into smaller strings (tokens).                                token                      The delimiter used when splitting up str.                                      Return Values       A string token.            Examples            Example #1 strtok() example       <?php$string\u00a0=\u00a0\"This\u00a0is\\tan\u00a0example\\nstring\";\/*\u00a0Use\u00a0tab\u00a0and\u00a0newline\u00a0as\u00a0tokenizing\u00a0characters\u00a0as\u00a0well\u00a0\u00a0*\/$tok\u00a0=\u00a0strtok($string,\u00a0\"\u00a0\\n\\t\");while\u00a0($tok\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Word=$tok<br\u00a0\/>\";\u00a0\u00a0\u00a0\u00a0$tok\u00a0=\u00a0strtok(\"\u00a0\\n\\t\");}?>                       The behavior when an empty part was found changed with PHP 4.1.0. The old    behavior returned an empty string, while the new, correct, behavior    simply skips the part of the string:               Example #2 Old strtok() behavior       <?php$first_token\u00a0\u00a0=\u00a0strtok('\/something',\u00a0'\/');$second_token\u00a0=\u00a0strtok('\/');var_dump($first_token,\u00a0$second_token);?>             The above example will output:           string(0) \"\"     string(9) \"something\"                   Example #3 New strtok() behavior       <?php$first_token\u00a0\u00a0=\u00a0strtok('\/something',\u00a0'\/');$second_token\u00a0=\u00a0strtok('\/');var_dump($first_token,\u00a0$second_token);?>             The above example will output:           string(9) \"something\"     bool(false)                      Notes      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.          See Also            split() - Split string into array by regular expression     explode() - Split a string by string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtolower.php","title":"strtolower","description":"strtolower   (PHP 4, PHP 5)strtolower \u2014 Make a string lowercase          Description       string strtolower     ( string $str    )        Returns string with all alphabetic characters    converted to lowercase.          Note that &#039;alphabetic&#039; is determined by the current locale. This means    that in i.e. the default \"C\" locale, characters such as umlaut-A    (\u00c4) will not be converted.            Parameters                    str                      The input string.                                     Return Values       Returns the lowercased string.            Examples            Example #1 strtolower() example       <?php$str\u00a0=\u00a0\"Mary\u00a0Had\u00a0A\u00a0Little\u00a0Lamb\u00a0and\u00a0She\u00a0LOVED\u00a0It\u00a0So\";$str\u00a0=\u00a0strtolower($str);echo\u00a0$str;\u00a0\/\/\u00a0Prints\u00a0mary\u00a0had\u00a0a\u00a0little\u00a0lamb\u00a0and\u00a0she\u00a0loved\u00a0it\u00a0so?>                           Notes   Note: This function is binary-safe.         See Also            strtoupper() - Make a string uppercase     ucfirst() - Make a string's first character uppercase     ucwords() - Uppercase the first character of each word in a string     mb_strtolower() - Make a string lowercase"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr-compare.php","title":"substr_compare","description":"substr_compare   (PHP 5)substr_compare \u2014 Binary safe comparison of two strings from an offset, up to length characters          Description       int substr_compare     ( string $main_str    , string $str    , int $offset    [, int $length    [, bool $case_insensitivity = false   ]] )        substr_compare() compares main_str    from position offset with str    up to length characters.            Parameters                    main_str                      The main string being compared.                                str                      The secondary string being compared.                                offset                      The start position for the comparison. If negative, it starts counting        from the end of the string.                                length                      The length of the comparison. The default value is the largest of the        length of the str compared to the length of        main_str less the        offset.                                case_insensitivity                      If case_insensitivity is TRUE, comparison is        case insensitive.                                     Return Values       Returns < 0 if main_str from position    offset is less than str, >    0 if it is greater than str, and 0 if they are equal.    If offset is equal to or greater than the length of    main_str or length is set and    is less than 1, substr_compare() prints a warning and returns    FALSE.            Changelog                                 Version        Description                                    5.1.0                 Added the possibility to use a negative offset.                                            Examples            Example #1 A substr_compare() example       <?phpecho\u00a0substr_compare(\"abcde\",\u00a0\"bc\",\u00a01,\u00a02);\u00a0\/\/\u00a00echo\u00a0substr_compare(\"abcde\",\u00a0\"de\",\u00a0-2,\u00a02);\u00a0\/\/\u00a00echo\u00a0substr_compare(\"abcde\",\u00a0\"bcg\",\u00a01,\u00a02);\u00a0\/\/\u00a00echo\u00a0substr_compare(\"abcde\",\u00a0\"BC\",\u00a01,\u00a02,\u00a0true);\u00a0\/\/\u00a00echo\u00a0substr_compare(\"abcde\",\u00a0\"bc\",\u00a01,\u00a03);\u00a0\/\/\u00a01echo\u00a0substr_compare(\"abcde\",\u00a0\"cd\",\u00a01,\u00a02);\u00a0\/\/\u00a0-1echo\u00a0substr_compare(\"abcde\",\u00a0\"abc\",\u00a05,\u00a01);\u00a0\/\/\u00a0warning?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtoupper.php","title":"strtoupper","description":"strtoupper   (PHP 4, PHP 5)strtoupper \u2014 Make a string uppercase          Description       string strtoupper     ( string $string    )        Returns string with all alphabetic characters    converted to uppercase.          Note that &#039;alphabetic&#039; is determined by the current locale. For instance,    in the default \"C\" locale characters such as umlaut-a (\u00e4) will not be    converted.            Parameters                    string                      The input string.                                     Return Values       Returns the uppercased string.            Examples            Example #1 strtoupper() example       <?php$str\u00a0=\u00a0\"Mary\u00a0Had\u00a0A\u00a0Little\u00a0Lamb\u00a0and\u00a0She\u00a0LOVED\u00a0It\u00a0So\";$str\u00a0=\u00a0strtoupper($str);echo\u00a0$str;\u00a0\/\/\u00a0Prints\u00a0MARY\u00a0HAD\u00a0A\u00a0LITTLE\u00a0LAMB\u00a0AND\u00a0SHE\u00a0LOVED\u00a0IT\u00a0SO?>                           Notes   Note: This function is binary-safe.         See Also            strtolower() - Make a string lowercase     ucfirst() - Make a string's first character uppercase     ucwords() - Uppercase the first character of each word in a string     mb_strtoupper() - Make a string uppercase"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr-count.php","title":"substr_count","description":"substr_count   (PHP 4, PHP 5)substr_count \u2014 Count the number of substring occurrences        Description       int substr_count     ( string $haystack    , string $needle    [, int $offset = 0    [, int $length   ]] )        substr_count() returns the number of times the    needle substring occurs in the    haystack string. Please note that    needle is case sensitive.      Note:          This function doesn&#039;t count overlapped substrings. See the example below!                Parameters                    haystack                      The string to search in                                needle                      The substring to search for                                offset                      The offset where to start counting                                length                      The maximum length after the specified offset to search for the        substring. It outputs a warning if the offset plus the length is        greater than the haystack length.                                     Return Values       This function returns an integer.            Changelog                                 Version        Description                                    5.1.0                 Added the offset and         the length parameters                                            Examples            Example #1 A substr_count() example       <?php$text\u00a0=\u00a0'This\u00a0is\u00a0a\u00a0test';echo\u00a0strlen($text);\u00a0\/\/\u00a014echo\u00a0substr_count($text,\u00a0'is');\u00a0\/\/\u00a02\/\/\u00a0the\u00a0string\u00a0is\u00a0reduced\u00a0to\u00a0's\u00a0is\u00a0a\u00a0test',\u00a0so\u00a0it\u00a0prints\u00a01echo\u00a0substr_count($text,\u00a0'is',\u00a03);\/\/\u00a0the\u00a0text\u00a0is\u00a0reduced\u00a0to\u00a0's\u00a0i',\u00a0so\u00a0it\u00a0prints\u00a00echo\u00a0substr_count($text,\u00a0'is',\u00a03,\u00a03);\/\/\u00a0generates\u00a0a\u00a0warning\u00a0because\u00a05+10\u00a0>\u00a014echo\u00a0substr_count($text,\u00a0'is',\u00a05,\u00a010);\/\/\u00a0prints\u00a0only\u00a01,\u00a0because\u00a0it\u00a0doesn't\u00a0count\u00a0overlapped\u00a0substrings$text2\u00a0=\u00a0'gcdgcdgcd';echo\u00a0substr_count($text2,\u00a0'gcdgcd');?>                        See Also            count_chars() - Return information about characters used in a string     strpos() - Find position of first occurrence of a string     substr() - Return part of a string     strstr() - Find first occurrence of a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtr.php","title":"strtr","description":"strtr   (PHP 4, PHP 5)strtr \u2014 Translate characters or replace substrings          Description       string strtr     ( string $str    , string $from    , string $to    )        string strtr     ( string $str    , array $replace_pairs    )        If given three arguments, this function returns a copy of    str where all occurrences of each (single-byte)    character in from have been translated to the    corresponding character in to, i.e., every    occurrence of $from[$n] has been replaced with    $to[$n], where $n is a valid    offset in both arguments.          If from and to have    different lengths, the extra characters in the longer of the two    are ignored. The length of str will be the same as    the return value&#039;s.          If given two arguments, the second should be an array in the    form array(&#039;from&#039; => &#039;to&#039;, ...). The return value is    a string where all the occurrences of the array keys have been    replaced by the corresponding values. The longest keys will be tried first.    Once a substring has been replaced, its new value will not be searched    again.          In this case, the keys and the values may have any length, provided that    there is no empty key; additionaly, the length of the return value may    differ from that of str.    However, this function will be the most efficient when all the keys have the    same size.            Parameters                    str                      The string being translated.                                from                      The string being translated to to.                                to                      The string replacing from.                                replace_pairs                      The replace_pairs parameter may be used instead of         to and from, in which case it&#039;s an        array in the form array(&#039;from&#039; => &#039;to&#039;, ...).                                       Return Values       Returns the translated string.          If replace_pairs contains a key which    is an empty string (\"\"),    FALSE will be returned.            Examples            Example #1 strtr() example       <?php\/\/In\u00a0this\u00a0form,\u00a0strtr()\u00a0does\u00a0byte-by-byte\u00a0translation\/\/Therefore,\u00a0we\u00a0are\u00a0assuming\u00a0a\u00a0single-byte\u00a0encoding\u00a0here:$addr\u00a0=\u00a0strtr($addr,\u00a0\"\u00e4\u00e5\u00f6\",\u00a0\"aao\");?>                      The next example shows the behavior of strtr() when    called with only two arguments. Note the preference of the replacements    (\"h\" is not picked because there are longer matches)    and how replaced text was not searched again.          Example #2 strtr() example with two arguments       <?php$trans\u00a0=\u00a0array(\"h\"\u00a0=>\u00a0\"-\",\u00a0\"hello\"\u00a0=>\u00a0\"hi\",\u00a0\"hi\"\u00a0=>\u00a0\"hello\");echo\u00a0strtr(\"hi\u00a0all,\u00a0I\u00a0said\u00a0hello\",\u00a0$trans);?>             The above example will output:       hello all, I said hi                The two modes of behavior are substantially different. With three arguments,    strtr() will replace bytes; with two, it may replace    longer substrings.          Example #3 strtr() behavior comparison       <?phpecho\u00a0strtr(\"baab\",\u00a0\"ab\",\u00a0\"01\"),\"\\n\";$trans\u00a0=\u00a0array(\"ab\"\u00a0=>\u00a0\"01\");echo\u00a0strtr(\"baab\",\u00a0$trans);?>             The above example will output:       1001 ba01                  See Also            str_replace() - Replace all occurrences of the search string with the replacement string     preg_replace() - Perform a regular expression search and replace"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr-replace.php","title":"substr_replace","description":"substr_replace   (PHP 4, PHP 5)substr_replace \u2014 Replace text within a portion of a string          Description       mixed substr_replace     ( mixed $string    , mixed $replacement    , mixed $start    [, mixed $length   ] )        substr_replace() replaces a copy of    string delimited by the    start and (optionally)    length parameters with the string given in    replacement.             Parameters                    string                      The input string.                      An array of strings can be provided, in which        case the replacements will occur on each string in turn. In this case,        the replacement, start        and length parameters may be provided either as        scalar values to be applied to each input string in turn, or as        arrays, in which case the corresponding array element will        be used for each input string.                                replacement                      The replacement string.                                start                      If start is positive, the replacing will        begin at the start&#039;th offset into        string.                      If start is negative, the replacing will        begin at the start&#039;th character from the        end of string.                                length                      If given and is positive, it represents the length of the portion of        string which is to be replaced. If it is        negative, it represents the number of characters from the end of        string at which to stop replacing. If it        is not given, then it will default to strlen(        string ); i.e. end the replacing at the        end of string. Of course, if        length is zero then this function will have the        effect of inserting replacement into        string at the given        start offset.                                     Return Values       The result string is returned. If string is an    array then array is returned.            Changelog                                 Version        Description                                    4.3.3                 All parameters now accept arrays.                                            Examples            Example #1 Simple substr_replace() examples       <?php$var\u00a0=\u00a0'ABCDEFGH:\/MNRPQR\/';echo\u00a0\"Original:\u00a0$var<hr\u00a0\/>\\n\";\/*\u00a0These\u00a0two\u00a0examples\u00a0replace\u00a0all\u00a0of\u00a0$var\u00a0with\u00a0'bob'.\u00a0*\/echo\u00a0substr_replace($var,\u00a0'bob',\u00a00)\u00a0.\u00a0\"<br\u00a0\/>\\n\";echo\u00a0substr_replace($var,\u00a0'bob',\u00a00,\u00a0strlen($var))\u00a0.\u00a0\"<br\u00a0\/>\\n\";\/*\u00a0Insert\u00a0'bob'\u00a0right\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0$var.\u00a0*\/echo\u00a0substr_replace($var,\u00a0'bob',\u00a00,\u00a00)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\/*\u00a0These\u00a0next\u00a0two\u00a0replace\u00a0'MNRPQR'\u00a0in\u00a0$var\u00a0with\u00a0'bob'.\u00a0*\/echo\u00a0substr_replace($var,\u00a0'bob',\u00a010,\u00a0-1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";echo\u00a0substr_replace($var,\u00a0'bob',\u00a0-7,\u00a0-1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\/*\u00a0Delete\u00a0'MNRPQR'\u00a0from\u00a0$var.\u00a0*\/echo\u00a0substr_replace($var,\u00a0'',\u00a010,\u00a0-1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";?>                           Example #2       Using substr_replace() to replace multiple strings at      once            <?php$input\u00a0=\u00a0array('A:\u00a0XXX',\u00a0'B:\u00a0XXX',\u00a0'C:\u00a0XXX');\/\/\u00a0A\u00a0simple\u00a0case:\u00a0replace\u00a0XXX\u00a0in\u00a0each\u00a0string\u00a0with\u00a0YYY.echo\u00a0implode(';\u00a0',\u00a0substr_replace($input,\u00a0'YYY',\u00a03,\u00a03)).\"\\n\";\/\/\u00a0A\u00a0more\u00a0complicated\u00a0case\u00a0where\u00a0each\u00a0replacement\u00a0is\u00a0different.$replace\u00a0=\u00a0array('AAA',\u00a0'BBB',\u00a0'CCC');echo\u00a0implode(';\u00a0',\u00a0substr_replace($input,\u00a0$replace,\u00a03,\u00a03)).\"\\n\";\/\/\u00a0Replace\u00a0a\u00a0different\u00a0number\u00a0of\u00a0characters\u00a0each\u00a0time.$length\u00a0=\u00a0array(1,\u00a02,\u00a03);echo\u00a0implode(';\u00a0',\u00a0substr_replace($input,\u00a0$replace,\u00a03,\u00a0$length)).\"\\n\";?>             The above example will output:       A: YYY; B: YYY; C: YYY A: AAA; B: BBB; C: CCC A: AAAXX; B: BBBX; C: CCC                      Notes   Note: This function is binary-safe.         See Also            str_replace() - Replace all occurrences of the search string with the replacement string     substr() - Return part of a string     String access and modification by character"},{"url":"http:\/\/www.php.net\/manual\/en\/function.trim.php","title":"trim","description":"trim    (PHP 4, PHP 5)trim \u2014 Strip whitespace (or other characters) from the beginning and end of a string         Description       string trim     ( string $str    [, string $charlist   ] )        This function returns a string with whitespace stripped from the    beginning and end of str.    Without the second parameter,    trim() will strip these characters:                          \" \" (ASCII 32        (0x20)), an ordinary space.                             \"\\t\" (ASCII 9        (0x09)), a tab.                             \"\\n\" (ASCII 10        (0x0A)), a new line (line feed).                             \"\\r\" (ASCII 13        (0x0D)), a carriage return.                             \"\\0\" (ASCII 0        (0x00)), the NUL-byte.                              \"\\x0B\" (ASCII 11        (0x0B)), a vertical tab.                           Parameters                    str                      The string that will be trimmed.                                charlist                      Optionally, the stripped characters can also be specified using        the charlist parameter.        Simply list all characters that you want to be stripped. With        .. you can specify a range of characters.                                     Return Values       The trimmed string.            Changelog                                 Version        Description                                    4.1.0                 The optional charlist parameter was added.                                            Examples            Example #1 Usage example of trim()       <?php$text\u00a0\u00a0\u00a0=\u00a0\"\\t\\tThese\u00a0are\u00a0a\u00a0few\u00a0words\u00a0:)\u00a0...\u00a0\u00a0\";$binary\u00a0=\u00a0\"\\x09Example\u00a0string\\x0A\";$hello\u00a0\u00a0=\u00a0\"Hello\u00a0World\";var_dump($text,\u00a0$binary,\u00a0$hello);print\u00a0\"\\n\";$trimmed\u00a0=\u00a0trim($text);var_dump($trimmed);$trimmed\u00a0=\u00a0trim($text,\u00a0\"\u00a0\\t.\");var_dump($trimmed);$trimmed\u00a0=\u00a0trim($hello,\u00a0\"Hdle\");var_dump($trimmed);$trimmed\u00a0=\u00a0trim($hello,\u00a0'HdWr');var_dump($trimmed);\/\/\u00a0trim\u00a0the\u00a0ASCII\u00a0control\u00a0characters\u00a0at\u00a0the\u00a0beginning\u00a0and\u00a0end\u00a0of\u00a0$binary\/\/\u00a0(from\u00a00\u00a0to\u00a031\u00a0inclusive)$clean\u00a0=\u00a0trim($binary,\u00a0\"\\x00..\\x1F\");var_dump($clean);?>             The above example will output:       string(32) \"        These are a few words :) ...  \" string(16) \"    Example string \" string(11) \"Hello World\"  string(28) \"These are a few words :) ...\" string(24) \"These are a few words :)\" string(5) \"o Wor\" string(9) \"ello Worl\" string(14) \"Example string\"                         Example #2 Trimming array values with trim()       <?phpfunction\u00a0trim_value(&$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a0trim($value);\u00a0}$fruit\u00a0=\u00a0array('apple','banana\u00a0',\u00a0'\u00a0cranberry\u00a0');var_dump($fruit);array_walk($fruit,\u00a0'trim_value');var_dump($fruit);?>             The above example will output:       array(3) {   [0]=>   string(5) \"apple\"   [1]=>   string(7) \"banana \"   [2]=>   string(11) \" cranberry \" } array(3) {   [0]=>   string(5) \"apple\"   [1]=>   string(6) \"banana\"   [2]=>   string(9) \"cranberry\" }                       Notes   Note:     Possible gotcha: removing middle characters         Because trim() trims characters from the beginning and end of     a string, it may be confusing when characters are (or are not) removed from     the middle. trim(&#039;abc&#039;, &#039;bad&#039;) removes both &#039;a&#039; and &#039;b&#039; because it     trims &#039;a&#039; thus moving &#039;b&#039; to the beginning to also be trimmed. So, this is why it \"works\"     whereas trim(&#039;abc&#039;, &#039;b&#039;) seemingly does not.                See Also            ltrim() - Strip whitespace (or other characters) from the beginning of a string     rtrim() - Strip whitespace (or other characters) from the end of a string     str_replace() - Replace all occurrences of the search string with the replacement string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.vfprintf.php","title":"vfprintf","description":"vfprintf   (PHP 5)vfprintf \u2014 Write a formatted string to a stream          Description       int vfprintf     ( resource $handle    , string $format    , array $args    )        Write a string produced according to format to the    stream resource specified by handle.          Operates as fprintf() but accepts an array of    arguments, rather than a variable number of arguments.            Parameters                    handle                                              format                      See sprintf() for a description of        format.                                args                                                   Return Values       Returns the length of the outputted string.            Examples            Example #1 vfprintf(): zero-padded integers       <?phpif\u00a0(!($fp\u00a0=\u00a0fopen('date.txt',\u00a0'w')))\u00a0\u00a0\u00a0\u00a0return;vfprintf($fp,\u00a0\"%04d-%02d-%02d\",\u00a0array($year,\u00a0$month,\u00a0$day));\/\/\u00a0will\u00a0write\u00a0the\u00a0formatted\u00a0ISO\u00a0date\u00a0to\u00a0date.txt?>                        See Also            printf() - Output a formatted string     sprintf() - Return a formatted string     sscanf() - Parses input from a string according to a format     fscanf() - Parses input from a file according to a format     vsprintf() - Return a formatted string     number_format() - Format a number with grouped thousands"},{"url":"http:\/\/www.php.net\/manual\/en\/function.vprintf.php","title":"vprintf","description":"vprintf   (PHP 4 >= 4.1.0, PHP 5)vprintf \u2014 Output a formatted string          Description       int vprintf     ( string $format    , array $args    )        Display array values as a formatted string according to    format (which is described in the documentation    for sprintf()).          Operates as printf() but accepts an array of    arguments, rather than a variable number of arguments.            Parameters                    format                      See sprintf() for a description of        format.                                args                                                   Return Values       Returns the length of the outputted string.             Examples            Example #1 vprintf(): zero-padded integers       <?phpvprintf(\"%04d-%02d-%02d\",\u00a0explode('-',\u00a0'1988-8-1'));\u00a0\/\/\u00a01988-08-01?>                        See Also            printf() - Output a formatted string     sprintf() - Return a formatted string     vsprintf() - Return a formatted string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ucfirst.php","title":"ucfirst","description":"ucfirst   (PHP 4, PHP 5)ucfirst \u2014 Make a string&#039;s first character uppercase          Description       string ucfirst     ( string $str    )        Returns a string with the first character of    str capitalized, if that character is    alphabetic.          Note that &#039;alphabetic&#039; is determined by the current locale. For    instance, in the default \"C\" locale characters such as umlaut-a    (\u00e4) will not be converted.            Parameters                    str                      The input string.                                     Return Values       Returns the resulting string.            Examples            Example #1 ucfirst() example       <?php$foo\u00a0=\u00a0'hello\u00a0world!';$foo\u00a0=\u00a0ucfirst($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Hello\u00a0world!$bar\u00a0=\u00a0'HELLO\u00a0WORLD!';$bar\u00a0=\u00a0ucfirst($bar);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0HELLO\u00a0WORLD!$bar\u00a0=\u00a0ucfirst(strtolower($bar));\u00a0\/\/\u00a0Hello\u00a0world!?>                           See Also            lcfirst() - Make a string's first character lowercase     strtolower() - Make a string lowercase     strtoupper() - Make a string uppercase     ucwords() - Uppercase the first character of each word in a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ucwords.php","title":"ucwords","description":"ucwords   (PHP 4, PHP 5)ucwords \u2014 Uppercase the first character of each word in a string          Description       string ucwords     ( string $str    )        Returns a string with the first character of each word in    str capitalized, if that character is alphabetic.          The definition of a word is any string of characters that is immediately    after a whitespace (These are: space, form-feed, newline, carriage return,    horizontal tab, and vertical tab).            Parameters                    str                      The input string.                                     Return Values       Returns the modified string.            Examples            Example #1 ucwords() example       <?php$foo\u00a0=\u00a0'hello\u00a0world!';$foo\u00a0=\u00a0ucwords($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Hello\u00a0World!$bar\u00a0=\u00a0'HELLO\u00a0WORLD!';$bar\u00a0=\u00a0ucwords($bar);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0HELLO\u00a0WORLD!$bar\u00a0=\u00a0ucwords(strtolower($bar));\u00a0\/\/\u00a0Hello\u00a0World!?>                        Notes   Note: This function is binary-safe.         See Also            strtoupper() - Make a string uppercase     strtolower() - Make a string lowercase     ucfirst() - Make a string's first character uppercase     mb_convert_case() - Perform case folding on a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr.php","title":"substr","description":"substr   (PHP 4, PHP 5)substr \u2014 Return part of a string          Description       string substr     ( string $string    , int $start    [, int $length   ] )        Returns the portion of string specified by the    start and length parameters.            Parameters                    string                      The input string. Must be one character or longer.                                start                      If start is non-negative, the returned string        will start at the start&#039;th position in        string, counting from zero. For instance,        in the string &#039;abcdef&#039;, the character at        position 0 is &#039;a&#039;, the        character at position 2 is        &#039;c&#039;, and so forth.                      If start is negative, the returned string        will start at the start&#039;th character        from the end of string.                      If string is less than or equal to        start characters long, FALSE will be returned.                               Example #1 Using a negative start           <?php$rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-1);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"f\"$rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-2);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"ef\"$rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-3,\u00a01);\u00a0\/\/\u00a0returns\u00a0\"d\"?>                                                    length                      If length is given and is positive, the string        returned will contain at most length characters        beginning from start (depending on the length of        string).                      If length is given and is negative, then that many        characters will be omitted from the end of string        (after the start position has been calculated when a        start is negative).  If        start denotes the position of this truncation or        beyond, false will be returned.                      If length is given and is 0,        FALSE or NULL an empty string will be returned.                      If length is omitted, the substring starting from        start until the end of the string will be        returned.                      Example #2 Using a negative length          <?php$rest\u00a0=\u00a0substr(\"abcdef\",\u00a00,\u00a0-1);\u00a0\u00a0\/\/\u00a0returns\u00a0\"abcde\"$rest\u00a0=\u00a0substr(\"abcdef\",\u00a02,\u00a0-1);\u00a0\u00a0\/\/\u00a0returns\u00a0\"cde\"$rest\u00a0=\u00a0substr(\"abcdef\",\u00a04,\u00a0-4);\u00a0\u00a0\/\/\u00a0returns\u00a0false$rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-3,\u00a0-1);\u00a0\/\/\u00a0returns\u00a0\"de\"?>                                                Return Values       Returns the extracted part of string,  or FALSE on failure or an empty string.             Changelog                                 Version        Description                                    5.2.2 - 5.2.6                 If the start parameter indicates the position of         a negative truncation or beyond, false is returned. Other versions get         the string from start.                                            Examples            Example #3 Basic substr() usage       <?phpecho\u00a0substr('abcdef',\u00a01);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0bcdefecho\u00a0substr('abcdef',\u00a01,\u00a03);\u00a0\u00a0\/\/\u00a0bcdecho\u00a0substr('abcdef',\u00a00,\u00a04);\u00a0\u00a0\/\/\u00a0abcdecho\u00a0substr('abcdef',\u00a00,\u00a08);\u00a0\u00a0\/\/\u00a0abcdefecho\u00a0substr('abcdef',\u00a0-1,\u00a01);\u00a0\/\/\u00a0f\/\/\u00a0Accessing\u00a0single\u00a0characters\u00a0in\u00a0a\u00a0string\/\/\u00a0can\u00a0also\u00a0be\u00a0achieved\u00a0using\u00a0\"square\u00a0brackets\"$string\u00a0=\u00a0'abcdef';echo\u00a0$string[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0aecho\u00a0$string[3];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0decho\u00a0$string[strlen($string)-1];\u00a0\/\/\u00a0f?>                      Example #4 substr() casting behaviour       <?phpclass\u00a0apple\u00a0{\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"green\";\u00a0\u00a0\u00a0\u00a0}}echo\u00a0\"1)\u00a0\".var_export(substr(\"pear\",\u00a00,\u00a02),\u00a0true).PHP_EOL;echo\u00a0\"2)\u00a0\".var_export(substr(54321,\u00a00,\u00a02),\u00a0true).PHP_EOL;echo\u00a0\"3)\u00a0\".var_export(substr(new\u00a0apple(),\u00a00,\u00a02),\u00a0true).PHP_EOL;echo\u00a0\"4)\u00a0\".var_export(substr(true,\u00a00,\u00a01),\u00a0true).PHP_EOL;echo\u00a0\"5)\u00a0\".var_export(substr(false,\u00a00,\u00a01),\u00a0true).PHP_EOL;echo\u00a0\"6)\u00a0\".var_export(substr(\"\",\u00a00,\u00a01),\u00a0true).PHP_EOL;echo\u00a0\"7)\u00a0\".var_export(substr(1.2e3,\u00a00,\u00a04),\u00a0true).PHP_EOL;?>             The above example will output:       1) &#039;pe&#039; 2) &#039;54&#039; 3) &#039;gr&#039; 4) &#039;1&#039; 5) false 6) false 7) &#039;1200&#039;                      Errors\/Exceptions       Returns FALSE on error.           <?phpvar_dump(substr('a',\u00a01));\u00a0\/\/\u00a0bool(false)?>                           See Also            strrchr() - Find the last occurrence of a character in a string     substr_replace() - Replace text within a portion of a string     preg_match() - Perform a regular expression match     trim() - Strip whitespace (or other characters) from the beginning and end of a string     mb_substr() - Get part of string     wordwrap() - Wraps a string to a given number of characters     String access and modification by character"},{"url":"http:\/\/www.php.net\/manual\/en\/function.vsprintf.php","title":"vsprintf","description":"vsprintf   (PHP 4 >= 4.1.0, PHP 5)vsprintf \u2014 Return a formatted string          Description       string vsprintf     ( string $format    , array $args    )        Operates as sprintf() but accepts an array of    arguments, rather than a variable number of arguments.            Parameters                    format                      See sprintf() for a description of        format.                                args                                                   Return Values       Return array values as a formatted string according to    format (which is described in the documentation    for sprintf()).             Examples            Example #1 vsprintf(): zero-padded integers       <?phpprint\u00a0vsprintf(\"%04d-%02d-%02d\",\u00a0explode('-',\u00a0'1988-8-1'));\u00a0\/\/\u00a01988-08-01?>                        See Also            sprintf() - Return a formatted string     vprintf() - Output a formatted string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.base64-decode.php","title":"base64_decode","description":"base64_decode   (PHP 4, PHP 5)base64_decode \u2014 Decodes data encoded with MIME base64          Description       string base64_decode     ( string $data    [, bool $strict = false   ] )        Decodes a base64 encoded data.            Parameters                    data                      The encoded data.                                strict                      Returns FALSE if input contains character from outside the base64        alphabet.                                     Return Values       Returns the original data or FALSE on failure. The returned data may be    binary.            Changelog                                 Version        Description                                    5.2.0        strict added                                    Examples            Example #1 base64_decode() example       <?php$str\u00a0=\u00a0'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==';echo\u00a0base64_decode($str);?>             The above example will output:       This is an encoded string                      See Also            base64_encode() - Encodes data with MIME base64     \u00bb\u00a0RFC 2045 section 6.8"},{"url":"http:\/\/www.php.net\/manual\/en\/function.base64-encode.php","title":"base64_encode","description":"base64_encode   (PHP 4, PHP 5)base64_encode \u2014 Encodes data with MIME base64          Description       string base64_encode     ( string $data    )        Encodes the given data with base64.          This encoding is designed to make binary data survive transport through    transport layers that are not 8-bit clean, such as mail bodies.          Base64-encoded data takes about 33% more space than the original    data.            Parameters                    data                      The data to encode.                                     Return Values       The encoded data, as a string or FALSE on failure.            Examples            Example #1 base64_encode() example       <?php$str\u00a0=\u00a0'This\u00a0is\u00a0an\u00a0encoded\u00a0string';echo\u00a0base64_encode($str);?>             The above example will output:       VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==                      See Also            base64_decode() - Decodes data encoded with MIME base64     chunk_split() - Split a string into smaller chunks     convert_uuencode() - Uuencode a string     \u00bb\u00a0RFC 2045 section 6.8"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-meta-tags.php","title":"get_meta_tags","description":"get_meta_tags   (PHP 4, PHP 5)get_meta_tags \u2014 Extracts all meta tag content attributes from a file and returns an array         Description       array get_meta_tags     ( string $filename    [, bool $use_include_path = false   ] )        Opens filename and parses it line by line for    <meta> tags in the file. The parsing stops at    <\/head>.            Parameters                    filename                      The path to the HTML file, as a string. This can be a local file or an        URL.                               Example #1 What get_meta_tags() parses          <meta name=\"author\" content=\"name\"> <meta name=\"keywords\" content=\"php documentation\"> <meta name=\"DESCRIPTION\" content=\"a php manual\"> <meta name=\"geo.position\" content=\"49.33;-86.59\"> <\/head> <!-- parsing stops here -->                           (pay attention to line endings - PHP uses a native function to        parse the input, so a Mac file won&#039;t work on Unix).                                use_include_path                      Setting use_include_path to TRUE will result        in PHP trying to open the file along the standard include path as per        the include_path directive.        This is used for local files, not URLs.                                     Return Values       Returns an array with all the parsed meta tags.          The value of the name property becomes the key, the value of the content    property becomes the value of the returned array, so you can easily use    standard array functions to traverse it or access single values.     Special characters in the value of the name property are substituted with    &#039;_&#039;, the rest is converted to lower case.  If two meta tags have the same    name, only the last one is returned.            Changelog                                 Version        Description                                    4.0.5                 Support for unquoted HTML attributes was added.                                            Examples            Example #2 What get_meta_tags() returns       <?php\/\/\u00a0Assuming\u00a0the\u00a0above\u00a0tags\u00a0are\u00a0at\u00a0www.example.com$tags\u00a0=\u00a0get_meta_tags('http:\/\/www.example.com\/');\/\/\u00a0Notice\u00a0how\u00a0the\u00a0keys\u00a0are\u00a0all\u00a0lowercase\u00a0now,\u00a0and\/\/\u00a0how\u00a0.\u00a0was\u00a0replaced\u00a0by\u00a0_\u00a0in\u00a0the\u00a0key.echo\u00a0$tags['author'];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0nameecho\u00a0$tags['keywords'];\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0php\u00a0documentationecho\u00a0$tags['description'];\u00a0\u00a0\/\/\u00a0a\u00a0php\u00a0manualecho\u00a0$tags['geo_position'];\u00a0\/\/\u00a049.33;-86.59?>                        Notes   Note:          Only meta tags with name attributes will be parsed.                See Also            htmlentities() - Convert all applicable characters to HTML entities     urlencode() - URL-encodes string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wordwrap.php","title":"wordwrap","description":"wordwrap   (PHP 4 >= 4.0.2, PHP 5)wordwrap \u2014 Wraps a string to a given number of characters          Description       string wordwrap     ( string $str    [, int $width = 75    [, string $break = \"\\n\"    [, bool $cut = false   ]]] )        Wraps a string to a given number of characters using a string break    character.            Parameters                    str                      The input string.                                width                      The column width.                                break                      The line is broken using the optional        break parameter.                                cut                      If the cut is set to TRUE, the string is        always wrapped at or before the specified width.  So if you have        a word that is larger than the given width, it is broken apart.        (See second example).                                     Return Values       Returns the given string wrapped at the specified column.            Changelog                                 Version        Description                                    4.0.3                 The optional cut parameter was added.                                            Examples            Example #1 wordwrap() example       <?php$text\u00a0=\u00a0\"The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.\";$newtext\u00a0=\u00a0wordwrap($text,\u00a020,\u00a0\"<br\u00a0\/>\\n\");echo\u00a0$newtext;?>             The above example will output:       The quick brown fox<br \/> jumped over the lazy<br \/> dog.                   Example #2 wordwrap() example       <?php$text\u00a0=\u00a0\"A\u00a0very\u00a0long\u00a0woooooooooooord.\";$newtext\u00a0=\u00a0wordwrap($text,\u00a08,\u00a0\"\\n\",\u00a0true);echo\u00a0\"$newtext\\n\";?>             The above example will output:       A very long wooooooo ooooord.                      See Also            nl2br() - Inserts HTML line breaks before all newlines in a string     chunk_split() - Split a string into smaller chunks"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-headers.php","title":"get_headers","description":"get_headers   (PHP 5)get_headers \u2014 Fetches all the headers sent by the server in response to a HTTP request         Description       array get_headers     ( string $url    [, int $format = 0   ] )        get_headers() returns an array with the headers sent    by the server in response to a HTTP request.            Parameters                    url                      The target URL.                                format                      If the optional format parameter is set to non-zero,        get_headers() parses the response and sets the         array&#039;s keys.                                     Return Values       Returns an indexed or associative array with the headers, or FALSE on    failure.            Changelog                                 Version        Description                                    5.1.3                 This function now uses the default stream context, which can be         set\/changed with the stream_context_set_default()         function.                                           Examples            Example #1 get_headers() example       <?php$url\u00a0=\u00a0'http:\/\/www.example.com';print_r(get_headers($url));print_r(get_headers($url,\u00a01));?>             The above example will output something similar to:       Array (     [0] => HTTP\/1.1 200 OK     [1] => Date: Sat, 29 May 2004 12:28:13 GMT     [2] => Server: Apache\/1.3.27 (Unix)  (Red-Hat\/Linux)     [3] => Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT     [4] => ETag: \"3f80f-1b6-3e1cb03b\"     [5] => Accept-Ranges: bytes     [6] => Content-Length: 438     [7] => Connection: close     [8] => Content-Type: text\/html )  Array (     [0] => HTTP\/1.1 200 OK     [Date] => Sat, 29 May 2004 12:28:14 GMT     [Server] => Apache\/1.3.27 (Unix)  (Red-Hat\/Linux)     [Last-Modified] => Wed, 08 Jan 2003 23:11:55 GMT     [ETag] => \"3f80f-1b6-3e1cb03b\"     [Accept-Ranges] => bytes     [Content-Length] => 438     [Connection] => close     [Content-Type] => text\/html )                   Example #2 get_headers() using HEAD example       <?php\/\/\u00a0By\u00a0default\u00a0get_headers\u00a0uses\u00a0a\u00a0GET\u00a0request\u00a0to\u00a0fetch\u00a0the\u00a0headers.\u00a0If\u00a0you\/\/\u00a0want\u00a0to\u00a0send\u00a0a\u00a0HEAD\u00a0request\u00a0instead,\u00a0you\u00a0can\u00a0do\u00a0so\u00a0using\u00a0a\u00a0stream\u00a0context:stream_context_set_default(\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'http'\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'method'\u00a0=>\u00a0'HEAD'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0));$headers\u00a0=\u00a0get_headers('http:\/\/example.com');?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-query.php","title":"http_build_query","description":"http_build_query   (PHP 5)http_build_query \u2014 Generate URL-encoded query string         Description       string http_build_query     ( mixed $query_data    [, string $numeric_prefix    [, string $arg_separator    [, int $enc_type = PHP_QUERY_RFC1738   ]]] )        Generates a URL-encoded query string from the associative (or indexed)    array provided.            Parameters                    query_data                      May be an array or object containing properties.                      If query_data is an array, it may be a simple        one-dimensional structure, or an array of arrays (which in        turn may contain other arrays).                      If query_data is an object, then only public        properties will be incorporated into the result.                                numeric_prefix                      If numeric indices are used in the base array and this parameter is        provided, it will be prepended to the numeric index for elements in        the base array only.                      This is meant to allow for legal variable names when the data is        decoded by PHP or another CGI application later on.                                arg_separator                      arg_separator.output        is used to separate arguments, unless this parameter is specified,        and is then used.                                enc_type                      By default, PHP_QUERY_RFC1738.                      If enc_type is        PHP_QUERY_RFC1738, then encoding is performed per        \u00bb\u00a0RFC 1738 and the        application\/x-www-form-urlencoded media type, which        implies that spaces are encoded as plus (+) signs.                      If enc_type is        PHP_QUERY_RFC3986, then encoding is performed        according to \u00bb\u00a0RFC 3986, and        spaces will be percent encoded (%20).                                     Return Values       Returns a URL-encoded string.            Changelog                                 Version        Description                                    5.4.0                 The enc_type parameter was added.                               5.1.3                 Square brackets are escaped.                               5.1.2                 The arg_separator parameter was added.                                            Examples       Example #1 Simple usage of http_build_query()      <?php$data\u00a0=\u00a0array('foo'=>'bar',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'baz'=>'boom',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'cow'=>'milk',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'php'=>'hypertext\u00a0processor');echo\u00a0http_build_query($data)\u00a0.\u00a0\"\\n\";echo\u00a0http_build_query($data,\u00a0'',\u00a0'&amp;');?>           The above example will output:      foo=bar&baz=boom&cow=milk&php=hypertext+processor foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor                Example #2 http_build_query() with numerically index elements.      <?php$data\u00a0=\u00a0array('foo',\u00a0'bar',\u00a0'baz',\u00a0'boom',\u00a0'cow'\u00a0=>\u00a0'milk',\u00a0'php'\u00a0=>'hypertext\u00a0processor');echo\u00a0http_build_query($data)\u00a0.\u00a0\"\\n\";echo\u00a0http_build_query($data,\u00a0'myvar_');?>           The above example will output:      0=foo&1=bar&2=baz&3=boom&cow=milk&php=hypertext+processor myvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_3=boom&cow=milk&php=hypertext+processor               Example #3 http_build_query() with complex arrays      <?php$data\u00a0=\u00a0array('user'=>array('name'=>'Bob\u00a0Smith',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'age'=>47,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sex'=>'M',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'dob'=>'5\/12\/1956'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'pastimes'=>array('golf',\u00a0'opera',\u00a0'poker',\u00a0'rap'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'children'=>array('bobby'=>array('age'=>12,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sex'=>'M'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sally'=>array('age'=>8,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sex'=>'F')),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'CEO');echo\u00a0http_build_query($data,\u00a0'flags_');?>                this will output : (word wrapped for readability)          user%5Bname%5D=Bob+Smith&user%5Bage%5D=47&user%5Bsex%5D=M& user%5Bdob%5D=5%2F12%2F1956&pastimes%5B0%5D=golf&pastimes%5B1%5D=opera& pastimes%5B2%5D=poker&pastimes%5B3%5D=rap&children%5Bbobby%5D%5Bage%5D=12& children%5Bbobby%5D%5Bsex%5D=M&children%5Bsally%5D%5Bage%5D=8& children%5Bsally%5D%5Bsex%5D=F&flags_0=CEO              Note:              Only the numerically indexed element in the base array \"CEO\" received a       prefix.  The other numeric indices, found under pastimes, do not       require a string prefix to be legal variable names.                          Example #4 Using http_build_query() with an object      <?phpclass\u00a0parentClass\u00a0{\u00a0\u00a0\u00a0\u00a0public\u00a0\u00a0\u00a0\u00a0$pub\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'publicParent';\u00a0\u00a0\u00a0\u00a0protected\u00a0$prot\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'protectedParent';\u00a0\u00a0\u00a0\u00a0private\u00a0\u00a0\u00a0$priv\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'privateParent';\u00a0\u00a0\u00a0\u00a0public\u00a0\u00a0\u00a0\u00a0$pub_bar\u00a0\u00a0=\u00a0Null;\u00a0\u00a0\u00a0\u00a0protected\u00a0$prot_bar\u00a0=\u00a0Null;\u00a0\u00a0\u00a0\u00a0private\u00a0\u00a0\u00a0$priv_bar\u00a0=\u00a0Null;\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct(){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->pub_bar\u00a0\u00a0=\u00a0new\u00a0childClass();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->prot_bar\u00a0=\u00a0new\u00a0childClass();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_bar\u00a0=\u00a0new\u00a0childClass();\u00a0\u00a0\u00a0\u00a0}}class\u00a0childClass\u00a0{\u00a0\u00a0\u00a0\u00a0public\u00a0\u00a0\u00a0\u00a0$pub\u00a0\u00a0=\u00a0'publicChild';\u00a0\u00a0\u00a0\u00a0protected\u00a0$prot\u00a0=\u00a0'protectedChild';\u00a0\u00a0\u00a0\u00a0private\u00a0\u00a0\u00a0$priv\u00a0=\u00a0'privateChild';}$parent\u00a0=\u00a0new\u00a0parentClass();echo\u00a0http_build_query($parent);?>           The above example will output:      pub=publicParent&pub_bar%5Bpub%5D=publicChild                 See Also            parse_str() - Parses the string into variables     parse_url() - Parse a URL and return its components     urlencode() - URL-encodes string     array_walk() - Apply a user function to every member of an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rawurldecode.php","title":"rawurldecode","description":"rawurldecode   (PHP 4, PHP 5)rawurldecode \u2014 Decode URL-encoded strings         Description       string rawurldecode     ( string $str    )        Returns a string in which the sequences with percent    () signs followed by two hex digits have been replaced    with literal characters.            Parameters                    str                      The URL to be decoded.                                     Return Values       Returns the decoded URL, as a string.            Examples            Example #1 rawurldecode() example       <?phpecho\u00a0rawurldecode('foo%20bar%40baz');\u00a0\/\/\u00a0foo\u00a0bar@baz?>                        Notes   Note:          rawurldecode() does not decode plus symbols (&#039;+&#039;)     into spaces. urldecode() does.                See Also            rawurlencode() - URL-encode according to RFC 3986     urldecode() - Decodes URL-encoded string     urlencode() - URL-encodes string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.urldecode.php","title":"urldecode","description":"urldecode   (PHP 4, PHP 5)urldecode \u2014 Decodes URL-encoded string         Description       string urldecode     ( string $str    )        Decodes any ##    encoding in the given string. Plus symbols (&#039;+&#039;) are    decoded to a space character.            Parameters                    str                      The string to be decoded.                                     Return Values       Returns the decoded string.            Examples            Example #1 urldecode() example       <?php$a\u00a0=\u00a0explode('&',\u00a0$QUERY_STRING);$i\u00a0=\u00a00;while\u00a0($i\u00a0<\u00a0count($a))\u00a0{\u00a0\u00a0\u00a0\u00a0$b\u00a0=\u00a0split('=',\u00a0$a[$i]);\u00a0\u00a0\u00a0\u00a0echo\u00a0'Value\u00a0for\u00a0parameter\u00a0',\u00a0htmlspecialchars(urldecode($b[0])),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0is\u00a0',\u00a0htmlspecialchars(urldecode($b[1])),\u00a0\"<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0$i++;}?>                        Notes   Warning         The superglobals $_GET and $_REQUEST     are already decoded.  Using urldecode() on an element     in $_GET or $_REQUEST could have     unexpected and dangerous results.                See Also            urlencode() - URL-encodes string     rawurlencode() - URL-encode according to RFC 3986     rawurldecode() - Decode URL-encoded strings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rawurlencode.php","title":"rawurlencode","description":"rawurlencode   (PHP 4, PHP 5)rawurlencode \u2014 URL-encode according to RFC 3986         Description       string rawurlencode     ( string $str    )        Encodes the given string according to \u00bb\u00a0RFC 3986.            Parameters                    str                      The URL to be encoded.                                     Return Values       Returns a string in which all non-alphanumeric characters except    -_.~ have been replaced with a percent    () sign followed by two hex digits.  This is the    encoding described in \u00bb\u00a0RFC 3986 for    protecting literal characters from being interpreted as special URL    delimiters, and for protecting URLs from being mangled by transmission    media with character conversions (like some email systems).    Note:            Prior to PHP 5.3.0, rawurlencode encoded tildes (~) as per      \u00bb\u00a0RFC 1738.                      Changelog                                 Version        Description                                    5.3.4                 Tilde characters are no longer encoded when         rawurlencode() is used with EBCDIC strings.                               5.3.0                 Now conforms to \u00bb\u00a0RFC 3986.                                            Examples            Example #1 including a password in an FTP URL       <?phpecho\u00a0'<a\u00a0href=\"ftp:\/\/user:',\u00a0rawurlencode('foo\u00a0@+%\/'),\u00a0\u00a0\u00a0\u00a0\u00a0'@ftp.example.com\/x.txt\">';?>             The above example will output:       <a href=\"ftp:\/\/user:foo%20%40%2B%25%2F@ftp.example.com\/x.txt\">                    Or, if you pass information in a PATH_INFO component of the URL:               Example #2 rawurlencode() example 2       <?phpecho\u00a0'<a\u00a0href=\"http:\/\/example.com\/department_list_script\/',\u00a0\u00a0\u00a0\u00a0rawurlencode('sales\u00a0and\u00a0marketing\/Miami'),\u00a0'\">';?>             The above example will output:       <a href=\"http:\/\/example.com\/department_list_script\/sales%20and%20marketing%2FMiami\">                      See Also            rawurldecode() - Decode URL-encoded strings     urldecode() - Decodes URL-encoded string     urlencode() - URL-encodes string     \u00bb\u00a0RFC 3986"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-fcache-fileinfo.php","title":"wincache_fcache_fileinfo","description":"wincache_fcache_fileinfo   (PECL wincache >= 1.0.0)wincache_fcache_fileinfo \u2014     Retrieves information about files cached in the file cache           Description       array wincache_fcache_fileinfo     ([ bool $summaryonly = false   ] )        Retrieves information about file cache content and its usage.           Parameters                    summaryonly                      Controls whether the returned array will contain information about individual cache entries         along with the file cache summary.                                    Return Values       Array of meta data about file cache  or FALSE on failure          The array returned by this function contains the following elements:                      total_cache_uptime - total time in seconds that the file cache has been active                             total_file_count - total number of files that are currently in the file cache                             total_hit_count - number of times the files have been served from the file cache                             total_miss_count - number of times the files have not been found in the file cache                             file_entries - an array that contains the information about all the cached files:                                  file_name - absolute file name of the cached file                                            add_time - time in seconds since the file has been added to the file cache                                            use_time - time in seconds since the file has been accessed in the file cache                                            last_check - time in seconds since the file has been checked for modifications                                            hit_count - number of times the file has been served from the cache                                            file_size - size of the cached file in bytes                                                  Examples            Example #1 A wincache_fcache_fileinfo() example       <pre><?phpprint_r(wincache_fcache_fileinfo());?><\/pre>            The above example will output:       Array (   [total_cache_uptime] => 3234     [total_file_count] => 5     [total_hit_count] => 0     [total_miss_count] => 1     [file_entries] => Array         (             [1] => Array                 (                     [file_name] => c:\\inetpub\\wwwroot\\checkcache.php                     [add_time] => 1                     [use_time] => 0                     [last_check] => 1                     [hit_count] => 1                     [file_size] => 2435                 )             [2] => Array (...iterates for each cached file)         ) )                      See Also            wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-fcache-meminfo.php","title":"wincache_fcache_meminfo","description":"wincache_fcache_meminfo   (PECL wincache >= 1.0.0)wincache_fcache_meminfo \u2014     Retrieves information about file cache memory usage           Description       array wincache_fcache_meminfo     ( void    )        Retrieves information about memory usage by file cache.           Return Values       Array of meta data about file cache memory usage  or FALSE on failure          The array returned by this function contains the following elements:                      memory_total - amount of memory in bytes allocated for the file cache                             memory_free - amount of free memory in bytes available for the file cache                             num_used_blks - number of memory blocks used by the file cache                             num_free_blks - number of free memory blocks available for the file cache                             memory_overhead - amount of memory in bytes used for the file cache internal structures                           Examples            Example #1 A wincache_fcache_meminfo() example       <pre><?phpprint_r(wincache_fcache_meminfo());?><\/pre>            The above example will output:       Array (     [memory_total] => 134217728     [memory_free] => 131339120     [num_used_blks] => 361     [num_free_blks] => 3     [memory_overhead] => 5856 )                      See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.urlencode.php","title":"urlencode","description":"urlencode   (PHP 4, PHP 5)urlencode \u2014 URL-encodes string         Description       string urlencode     ( string $str    )        This function is convenient when encoding a string to be used in a query    part of a URL, as a convenient way to pass variables to the next page.            Parameters                    str                      The string to be encoded.                                     Return Values       Returns a string in which all non-alphanumeric characters except    -_. have been replaced with a percent    () sign followed by two hex digits and spaces encoded    as plus (+) signs.  It is encoded the same way that the    posted data from a WWW form is encoded, that is the same way as in    application\/x-www-form-urlencoded media type. This    differs from the \u00bb\u00a0RFC 3986 encoding (see    rawurlencode()) in that for historical reasons, spaces    are encoded as plus (+) signs.            Examples               Example #1 urlencode() example       <?phpecho\u00a0'<a\u00a0href=\"mycgi?foo=',\u00a0urlencode($userinput),\u00a0'\">';?>                           Example #2 urlencode() and htmlentities() example       <?php$query_string\u00a0=\u00a0'foo='\u00a0.\u00a0urlencode($foo)\u00a0.\u00a0'&bar='\u00a0.\u00a0urlencode($bar);echo\u00a0'<a\u00a0href=\"mycgi?'\u00a0.\u00a0htmlentities($query_string)\u00a0.\u00a0'\">';?>                        Notes   Note:          Be careful about variables that may match HTML entities. Things like     &amp, &copy and &pound are parsed by the browser and the     actual entity is used instead of the desired variable name.  This is an     obvious hassle that the W3C has been telling people about for years.     The reference is here: \u00bb\u00a0http:\/\/www.w3.org\/TR\/html4\/appendix\/notes.html#h-B.2.2.             PHP supports changing the argument separator to the W3C-suggested     semi-colon through the arg_separator .ini directive.  Unfortunately most     user agents do not send form data in this semi-colon separated format.     A more portable way around this is to use &amp; instead of & as     the separator.  You don&#039;t need to change PHP&#039;s arg_separator for this.     Leave it as &, but simply encode your URLs using     htmlentities() or      htmlspecialchars().                See Also            urldecode() - Decodes URL-encoded string     htmlentities() - Convert all applicable characters to HTML entities     rawurlencode() - URL-encode according to RFC 3986     rawurldecode() - Decode URL-encoded strings"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-lock.php","title":"wincache_lock","description":"wincache_lock   (PECL wincache >= 1.1.0)wincache_lock \u2014     Acquires an exclusive lock on a given key           Description       bool wincache_lock     ( string $key    [, bool $isglobal = false   ] )        Obtains an exclusive lock on a given key. The execution of the current script will be blocked until the     lock can be obtained. Once the lock is obtained, the other scripts that try to request the lock by using the same     key will be blocked, until the current script releases the lock by using wincache_unlock().      Warning         Using of the wincache_lock() and wincache_unlock() can cause deadlocks when      executing PHP scripts in a multi-process environment like FastCGI. Do not use these functions unless you are      absolutely sure you need to use them. For the majority of the operations on the user cache it is not necessary to     use these functions.               Parameters                    key                      Name of the key in the cache to get the lock on.                                isglobal                      Controls whether the scope of the lock is system-wide or local. Local locks are scoped to the application pool         in IIS FastCGI case or to all php processes that have the same parent process identifier.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 Using wincache_lock()       <?php$fp\u00a0=\u00a0fopen(\"\/tmp\/lock.txt\",\u00a0\"r+\");if\u00a0(wincache_lock(\u201clock_txt_lock\u201d))\u00a0{\u00a0\/\/\u00a0do\u00a0an\u00a0exclusive\u00a0lock\u00a0\u00a0\u00a0\u00a0ftruncate($fp,\u00a00);\u00a0\/\/\u00a0truncate\u00a0file\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"Write\u00a0something\u00a0here\\n\");\u00a0\u00a0\u00a0\u00a0wincache_unlock(\u201clock_txt_lock\u201d);\u00a0\/\/\u00a0release\u00a0the\u00a0lock}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0the\u00a0lock!\";}fclose($fp);?>                        See Also            wincache_unlock() - Releases an exclusive lock on a given key     wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ocache-fileinfo.php","title":"wincache_ocache_fileinfo","description":"wincache_ocache_fileinfo   (PECL wincache >= 1.0.0)wincache_ocache_fileinfo \u2014     Retrieves information about files cached in the opcode cache           Description       array wincache_ocache_fileinfo     ([ bool $summaryonly = false   ] )        Retrieves information about opcode cache content and its usage.           Parameters                    summaryonly                      Controls whether the returned array will contain information about individual cache entries         along with the opcode cache summary.                                    Return Values       Array of meta data about opcode cache  or FALSE on failure          The array returned by this function contains the following elements:                      total_cache_uptime - total time in seconds that the opcode cache has been active                             total_file_count - total number of files that are currently in the opcode cache                             total_hit_count - number of times the compiled opcode have been served from the cache                             total_miss_count - number of times the compiled opcode have not been found in the cache                             is_local_cache - true is the cache metadata is for a local cache instance,         false if the metadata is for the global cache                             file_entries - an array that contains the information about all the cached files:                                  file_name - absolute file name of the cached file                                            add_time - time in seconds since the file has been added to the opcode cache                                            use_time - time in seconds since the file has been accessed in the opcode cache                                            last_check - time in seconds since the file has been checked for modifications                                            hit_count - number of times the file has been served from the cache                                            function_count - number of functions in the cached file                                            class_count - number of classes in the cached file                                                  Examples            Example #1 A wincache_ocache_fileinfo() example       <pre><?phpprint_r(wincache_ocache_fileinfo());?><\/pre>            The above example will output:       Array (     [total_cache_uptime] => 17357     [total_file_count] => 121     [total_hit_count] => 36562     [total_miss_count] => 201     [file_entries] => Array         (             [1] => Array                 (                     [file_name] => c:\\inetpub\\wwwroot\\checkcache.php                     [add_time] => 17356                     [use_time] => 7                     [last_check] => 10                     [hit_count] => 454                     [function_count] => 0                     [class_count] => 1                 )             [2] => Array (...iterates for each cached file)         ) )                      See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-url.php","title":"parse_url","description":"parse_url   (PHP 4, PHP 5)parse_url \u2014 Parse a URL and return its components         Description       mixed parse_url     ( string $url    [, int $component = -1   ] )        This function parses a URL and returns an associative array containing any    of the various components of the URL that are present.          This function is not meant to validate    the given URL, it only breaks it up into the above listed parts. Partial    URLs are also accepted, parse_url() tries its best to    parse them correctly.            Parameters                    url                      The URL to parse. Invalid characters are replaced by        _.                                          component                      Specify one of PHP_URL_SCHEME,        PHP_URL_HOST, PHP_URL_PORT,        PHP_URL_USER, PHP_URL_PASS,        PHP_URL_PATH, PHP_URL_QUERY        or PHP_URL_FRAGMENT to retrieve just a specific        URL component as a string (except when        PHP_URL_PORT is given, in which case the return        value will be an integer).                                     Return Values       On seriously malformed URLs, parse_url() may return    FALSE.          If the component parameter is omitted, an    associative array is returned. At least one element will be    present within the array. Potential keys within this array are:                      scheme - e.g. http                             host                              port                             user                             pass                             path                             query - after the question mark ?                             fragment - after the hashmark #                         If the component parameter is specified,    parse_url() returns a string (or an    integer, in the case of PHP_URL_PORT)    instead of an array. If the requested component doesn&#039;t exist    within the given URL, NULL will be returned.            Changelog                                 Version        Description                                    5.3.3                 Removed the E_WARNING that was emitted when URL         parsing failed.                               5.1.2        Added the component parameter.                                    Examples            Example #1 A parse_url() example       <?php$url\u00a0=\u00a0'http:\/\/username:password@hostname\/path?arg=value#anchor';print_r(parse_url($url));echo\u00a0parse_url($url,\u00a0PHP_URL_PATH);?>             The above example will output:       Array (     [scheme] => http     [host] => hostname     [user] => username     [pass] => password     [path] => \/path     [query] => arg=value     [fragment] => anchor ) \/path                      Notes   Note:          This function doesn&#039;t work with relative URLs.          Note:          This function is intended specifically for the purpose of parsing URLs     and not URIs. However, to comply with PHP&#039;s backwards compatibility     requirements it makes an exception for the file:\/\/ scheme where triple     slashes (file:\/\/\/...) are allowed. For any other scheme this is invalid.                See Also            pathinfo() - Returns information about a file path     parse_str() - Parses the string into variables     http_build_query() - Generate URL-encoded query string     http_build_url() - Build a URL     dirname() - Returns parent directory's path     basename() - Returns trailing name component of path"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ocache-meminfo.php","title":"wincache_ocache_meminfo","description":"wincache_ocache_meminfo   (PECL wincache >= 1.0.0)wincache_ocache_meminfo \u2014     Retrieves information about opcode cache memory usage           Description       array wincache_ocache_meminfo     ( void    )        Retrieves information about memory usage by opcode cache.           Return Values       Array of meta data about opcode cache memory usage  or FALSE on failure          The array returned by this function contains the following elements:                      memory_total - amount of memory in bytes allocated for the opcode cache                             memory_free - amount of free memory in bytes available for the opcode cache                             num_used_blks - number of memory blocks used by the opcode cache                             num_free_blks - number of free memory blocks available for the opcode cache                             memory_overhead - amount of memory in bytes used for the opcode cache internal structures                           Examples            Example #1 A wincache_ocache_meminfo() example       <pre><?phpprint_r(wincache_ocache_meminfo());?><\/pre>            The above example will output:       Array (     [memory_total] => 134217728     [memory_free] => 112106972     [num_used_blks] => 15469     [num_free_blks] => 4     [memory_overhead] => 247600 )                      See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-rplist-fileinfo.php","title":"wincache_rplist_fileinfo","description":"wincache_rplist_fileinfo   (PECL wincache >= 1.0.0)wincache_rplist_fileinfo \u2014     Retrieves information about resolve file path cache           Description       array wincache_rplist_fileinfo     ([ bool $summaryonly = false   ] )        Retrieves information about cached mappings between relative file paths     and corresponding absolute file paths.           Return Values       Array of meta data about the resolve file path cache  or FALSE on failure          The array returned by this function contains the following elements:                      total_file_count - total number of file path         mappings stored in the cache                             rplist_entries - an array that contains the information about all         the cached file paths:                                  resolve_path - path to a file                                            subkey_data - corresponding absolute path to a file                                                  Examples            Example #1 A wincache_rplist_fileinfo() example       <pre><?phpprint_r(wincache_rplist_fileinfo());?><\/pre>            The above example will output:       Array (     [total_file_count] => 5     [rplist_entries] => Array         (             [1] => Array                 (                     [resolve_path] => checkcache.php                     [subkey_data] => c:\\inetpub\\wwwroot|c:\\inetpub\\wwwroot\\checkcache.php                 )              [2] => Array (...iterates for each cached file)         ) )                      See Also            wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-refresh-if-changed.php","title":"wincache_refresh_if_changed","description":"wincache_refresh_if_changed   (PECL wincache >= 1.0.0)wincache_refresh_if_changed \u2014     Refreshes the cache entries for the cached files           Description       bool wincache_refresh_if_changed     ([ array $files   ] )        Refreshes the cache entries for the files, whose names were passed in the input argument.     If no argument is specified then refreshes all the entries in the cache.           Parameters                    files                      An array of file names for files that need to be refreshed.         An absolute or relative file paths can be used.                                    Return Values       Returns TRUE on success or FALSE on failure.            Examples       WinCache performs regular checks on the cached files to     ensure that if any file has changed then the corresponding entry in the cache is     updated. By default this check is performed every 30 seconds. If, for example,     a PHP script updates another PHP script where the application&#039;s     configuration settings are stored, then it may happen that after the     configuration settings have been saved to a file, the application is still using     old settings for some time until the cache is refreshed. In those cases it may be     preferrable to refresh the cache right after the file has been changed. The     following example shows how this can be done.         Example #1 A wincache_refresh_if_changed() example       <?php\u00a0$filename\u00a0=\u00a0'C:\\inetpub\\wwwroot\\config.php';$handle\u00a0=\u00a0fopen($filename,\u00a0'w+');if\u00a0($handle\u00a0===\u00a0FALSE)\u00a0die('Failed\u00a0to\u00a0open\u00a0file\u00a0'.$filename.'\u00a0for\u00a0writing');fwrite($handle,\u00a0'<?php\u00a0$setting=something;\u00a0?>');fclose($handle);wincache_refresh_if_changed(array($filename));?>                         See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-rplist-meminfo.php","title":"wincache_rplist_meminfo","description":"wincache_rplist_meminfo   (PECL wincache >= 1.0.0)wincache_rplist_meminfo \u2014     Retrieves information about memory usage by the resolve file path cache           Description       array wincache_rplist_meminfo     ( void    )        Retrieves information about memory usage by resolve file path cache.           Return Values       Array of meta data that describes memory usage by resolve file path cache.  or FALSE on failure          The array returned by this function contains the following elements:                      memory_total - amount of memory in bytes allocated for the resolve file path cache                             memory_free - amount of free memory in bytes available for the resolve file path cache                             num_used_blks - number of memory blocks used by the resolve file path cache                             num_free_blks - number of free memory blocks available for the resolve file path cache                             memory_overhead - amount of memory in bytes used for the internal structures of resolve file path cache                           Examples            Example #1 A wincache_rplist_meminfo() example       <pre><?phpprint_r(wincache_rplist_meminfo());?><\/pre>            The above example will output:       Array (     [memory_total] => 9437184     [memory_free] => 9416744     [num_used_blks] => 23     [num_free_blks] => 1     [memory_overhead] => 416 )                      See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-scache-meminfo.php","title":"wincache_scache_meminfo","description":"wincache_scache_meminfo   (PECL wincache >= 1.1.0)wincache_scache_meminfo \u2014     Retrieves information about session cache memory usage           Description       array wincache_scache_meminfo     ( void    )        Retrieves information about memory usage by session cache.           Return Values       Array of meta data about session cache memory usage  or FALSE on failure          The array returned by this function contains the following elements:                      memory_total - amount of memory in bytes allocated for the session cache                             memory_free - amount of free memory in bytes available for the session cache                             num_used_blks - number of memory blocks used by the session cache                             num_free_blks - number of free memory blocks available for the session cache                             memory_overhead - amount of memory in bytes used for the session cache internal structures                           Examples            Example #1 A wincache_scache_meminfo() example       <pre><?phpprint_r(wincache_scache_meminfo());?><\/pre>            The above example will output:       Array  (      [memory_total] => 5242880      [memory_free] => 5215056      [num_used_blks] => 6      [num_free_blks] => 3      [memory_overhead] => 176 )                       See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-scache-info.php","title":"wincache_scache_info","description":"wincache_scache_info   (PECL wincache >= 1.1.0)wincache_scache_info \u2014     Retrieves information about files cached in the session cache           Description       array wincache_scache_info     ([ bool $summaryonly = false   ] )        Retrieves information about session cache content and its usage.           Parameters                    summaryonly                      Controls whether the returned array will contain information about individual cache entries         along with the session cache summary.                                     Return Values       Array of meta data about session cache  or FALSE on failure            The array returned by this function contains the following elements:                      total_cache_uptime - total time in seconds that the session cache has been active                             total_item_count - total number of elements that are currently in the session cache                             is_local_cache - true is the cache metadata is for a local cache instance,         false if the metadata is for the global cache                             total_hit_count - number of times the data has been served from the cache                             total_miss_count - number of times the data has not been found in the cache                             scache_entries - an array that contains the information about all the cached items:                                  key_name - name of the key which is used to store the data                                            value_type - type of value stored by the key                                            use_time - time in seconds since the file has been accessed in the opcode cache                                            last_check - time in seconds since the file has been checked for modifications                                            ttl_seconds - time remaining for the data to live in the cache, 0 meaning infinite                                            age_seconds - time elapsed from the time data has been added in the cache                                            hitcount - number of times data has been served from the cache                                                  Examples            Example #1 A wincache_scache_info() example       <pre><?phpprint_r(wincache_scache_info());?><\/pre>            The above example will output:       Array (     [total_cache_uptime] => 17357     [total_file_count] => 121     [total_hit_count] => 36562     [total_miss_count] => 201     [scache_entries] => Array         (             [1] => Array                 (                     [file_name] => c:\\inetpub\\wwwroot\\checkcache.php                     [add_time] => 17356                     [use_time] => 7                     [last_check] => 10                     [hit_count] => 454                     [function_count] => 0                     [class_count] => 1                 )             [2] => Array (...iterates for each cached file)         ) )                      See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-cas.php","title":"wincache_ucache_cas","description":"wincache_ucache_cas   (PECL wincache >= 1.1.0)wincache_ucache_cas \u2014     Compares the variable with old value and assigns new value to it           Description       bool wincache_ucache_cas     ( string $key    , int $old_value    , int $new_value    )        Compares the variable associated with the key with old_value     and if it matches then assigns the new_value to it.           Parameters                    key                      The key that is used to store the variable in the cache.         key is case sensitive.                                old_value                      Old value of the variable pointed by key in the user cache.         The value should be of type long, otherwise the function returns         FALSE.                                new_value                      New value which will get assigned to variable pointer by key if a         match is found. The value should be of type long, otherwise         the function returns FALSE.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 Using wincache_ucache_cas()       <?phpwincache_ucache_set('counter',\u00a02922);var_dump(wincache_ucache_cas('counter',\u00a02922,\u00a01));var_dump(wincache_ucache_get('counter'));?>             The above example will output:       bool(true)  int(1)                          See Also            wincache_ucache_inc() - Increments the value associated with the key     wincache_ucache_dec() - Decrements the value associated with the key"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-add.php","title":"wincache_ucache_add","description":"wincache_ucache_add   (PECL wincache >= 1.1.0)wincache_ucache_add \u2014     Adds a variable in user cache only if variable does not already exist in the cache           Description       bool wincache_ucache_add     ( string $key    , mixed $value    [, int $ttl = 0   ] )        bool wincache_ucache_add     ( array $values    [, mixed $unused    [, int $ttl = 0   ]] )        Adds a variable in user cache, only if this variable doesn&#039;t already exist in the cache.     The added variable remains in the user cache unless its time to live expires or it is     deleted by using wincache_ucache_delete() or wincache_ucache_clear() functions.           Parameters                    key                      Store the variable using this key name. If a variable with same key is already present the function        will fail and return FALSE. key is case sensitive. To override the value even if         key is present use wincache_ucache_set() function instad.         key can also take array of name => value pairs where names will be used as keys.         This can be used to add multiple values in the cache in one operation, thus avoiding race condition.                                value                      Value of a variable to store. Value supports all data types except resources, such as file handles.        This paramter is ignored if first argument is an array. A general guidance is to pass NULL         as value while using array as key. If value is an        object, or an array containing objects, then the objects will be serialized. See        __sleep() for details on serializing objects.                                values                      Associative array of keys and values.                                ttl                      Time for the variable to live in the cache in seconds. After the value specified in ttl has passed         the stored variable will be deleted from the cache. This parameter takes a default value of 0 which means         the variable will stay in the cache unless explicitly deleted by using wincache_ucache_delete()         or wincache_ucache_clear() functions.                                    Return Values       If key is string, the function returns TRUE on success and FALSE on failure.          If key is an array, the function returns:                      If all the name => value pairs in the array can be set, function returns an empty array;                            If all the name => value pairs in the array cannot be set, function returns FALSE;                             If some can be set while others cannot, function returns an array with name=>value pair for which the addition failed in the user cache.                          Examples            Example #1 wincache_ucache_add() with key as a string       <?php$bar\u00a0=\u00a0'BAR';var_dump(wincache_ucache_add('foo',\u00a0$bar));var_dump(wincache_ucache_add('foo',\u00a0$bar));var_dump(wincache_ucache_get('foo'));?>             The above example will output:       bool(true) bool(false) string(3) \"BAR\"                              Example #2 wincache_ucache_add() with key as an array       <?php$colors_array\u00a0=\u00a0array('green'\u00a0=>\u00a0'5',\u00a0'Blue'\u00a0=>\u00a0'6',\u00a0'yellow'\u00a0=>\u00a0'7',\u00a0'cyan'\u00a0=>\u00a0'8');var_dump(wincache_ucache_add($colors_array));var_dump(wincache_ucache_add($colors_array));var_dump(wincache_ucache_get('Blue'));?>             The above example will output:       array(0) { }  array(4) {    [\"green\"]=> int(-1)    [\"Blue\"]=> int(-1)    [\"yellow\"]=> int(-1)    [\"cyan\"]=> int(-1)  }  string(1) \"6\"                          See Also            wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     __sleep()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-clear.php","title":"wincache_ucache_clear","description":"wincache_ucache_clear   (PECL wincache >= 1.1.0)wincache_ucache_clear \u2014     Deletes entire content of the user cache           Description       bool wincache_ucache_clear     ( void    )        Clears\/deletes all the values stored in the user cache.           Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 using wincache_ucache_clear()       <?phpwincache_ucache_set('green',\u00a01);wincache_ucache_set('red',\u00a02);wincache_ucache_set('orange',\u00a04);wincache_ucache_set('blue',\u00a08);wincache_ucache_set('cyan',\u00a016);$array1\u00a0=\u00a0array('green',\u00a0'red',\u00a0'orange',\u00a0'blue',\u00a0'cyan');var_dump(wincache_ucache_get($array1));var_dump(wincache_ucache_clear());var_dump(wincache_ucache_get($array1));?>             The above example will output:       array(5) { [\"green\"]=> int(1)             [\"red\"]=> int(2)             [\"orange\"]=> int(4)             [\"blue\"]=> int(8)             [\"cyan\"]=> int(16) }  bool(true)  bool(false)                           See Also            wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-dec.php","title":"wincache_ucache_dec","description":"wincache_ucache_dec   (PECL wincache >= 1.1.0)wincache_ucache_dec \u2014     Decrements the value associated with the key           Description       mixed wincache_ucache_dec     ( string $key    [, int $dec_by = 1    [, bool &$success   ]] )        Decrements the value associated with the key by 1 or as specified     by dec_by.           Parameters                    key                      The key that was used to store the variable in the cache.         key is case sensitive.                                dec_by                      The value by which the variable associated with the key will get decremented.         If the argument is a floating point number it will be truncated to nearest integer. The variable         associated with the key should be of type long, otherwise         the function fails and returns FALSE.                                success                      Will be set to TRUE on success and FALSE on failure.                                    Return Values       Returns the decremented value on success and FALSE on failure.           Examples            Example #1 Using wincache_ucache_dec()       <?phpwincache_ucache_set('counter',\u00a01);var_dump(wincache_ucache_dec('counter',\u00a02923,\u00a0$success));var_dump($success);?>             The above example will output:       int(2922)  bool(true)                          See Also            wincache_ucache_inc() - Increments the value associated with the key     wincache_ucache_cas() - Compares the variable with old value and assigns new value to it"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-exists.php","title":"wincache_ucache_exists","description":"wincache_ucache_exists   (PECL wincache >= 1.1.0)wincache_ucache_exists \u2014     Checks if a variable exists in the user cache           Description       bool wincache_ucache_exists     ( string $key    )        Checks if a variable with the key exists in the user cache or not.           Parameters                    key                      The key that was used to store the variable in the cache.         key is case sensitive.                                    Return Values       Returns TRUE if variable with the key exitsts,     otherwise returns FALSE.           Examples            Example #1 Using wincache_ucache_exists()       <?phpif\u00a0(!wincache_ucache_exists('green'))\u00a0\u00a0\u00a0\u00a0wincache_ucache_set('green',\u00a01);var_dump(wincache_ucache_exists('green'));?>             The above example will output:       bool(true)                         See Also            wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-delete.php","title":"wincache_ucache_delete","description":"wincache_ucache_delete   (PECL wincache >= 1.1.0)wincache_ucache_delete \u2014     Deletes variables from the user cache           Description       bool wincache_ucache_delete     ( mixed $key    )        Deletes the elements in the user cache pointed by key.           Parameters                    key                      The key that was used to store the variable in the cache.         key is case sensitive. key can be an         array of keys.                                    Return Values       Returns TRUE on success or FALSE on failure.          If key is an array then the function returns FALSE     if every element of the array fails to get deleted from the user cache, otherwise returns an     array which consists of all the keys that are deleted.           Examples            Example #1 Using wincache_ucache_delete() with key as a string       <?phpwincache_ucache_set('foo',\u00a0'bar');var_dump(wincache_ucache_delete('foo'));var_dump(wincache_ucache_exists('foo'));?>             The above example will output:       bool(true) bool(false)                             Example #2 Usingwincache_ucache_delete() with key as an array       <?php$array1\u00a0=\u00a0array('green'\u00a0=>\u00a0'5',\u00a0'blue'\u00a0=>\u00a0'6',\u00a0'yellow'\u00a0=>\u00a0'7',\u00a0'cyan'\u00a0=>\u00a0'8');wincache_ucache_set($array1);$array2\u00a0=\u00a0array('green',\u00a0'blue',\u00a0'yellow',\u00a0'cyan');var_dump(wincache_ucache_delete($array2));?>             The above example will output:       array(4) { [0]=> string(5) \"green\"             [1]=> string(4) \"Blue\"             [2]=> string(6) \"yellow\"             [3]=> string(4) \"cyan\" }                              Example #3 Using wincache_ucache_delete() with key as an array where some elements cannot be deleted       <?php$array1\u00a0=\u00a0array('green'\u00a0=>\u00a0'5',\u00a0'blue'\u00a0=>\u00a0'6',\u00a0'yellow'\u00a0=>\u00a0'7',\u00a0'cyan'\u00a0=>\u00a0'8');wincache_ucache_set($array1);$array2\u00a0=\u00a0array('orange',\u00a0'red',\u00a0'yellow',\u00a0'cyan');var_dump(wincache_ucache_delete($array2));?>             The above example will output:       array(2) { [0]=> string(6) \"yellow\"             [1]=> string(4) \"cyan\" }                           See Also            wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-get.php","title":"wincache_ucache_get","description":"wincache_ucache_get   (PECL wincache >= 1.1.0)wincache_ucache_get \u2014     Gets a variable stored in the user cache           Description       mixed wincache_ucache_get     ( mixed $key    [, bool &$success   ] )        Gets a variable stored in the user cache.           Parameters                    key                      The key that was used to store the variable in the cache.         key is case sensitive. key can be an         array of keys. In this case the return value will be an array of values of each element         in the key array. If an object, or an array containing objects,        is returned, then the objects will be unserialized. See        __wakeup() for details on unserializing objects.                                success                      Will be set to TRUE on success and FALSE on failure.                                    Return Values       If key is a string, the function returns the value of the variable stored with that key.     The success is set to TRUE on success and     to FALSE on failure.          The key is an array, the parameter success     is always set to TRUE. The returned array (name => value pairs) will     contain only those name => value pairs for which the get operation in user cache was     successful. If none of the keys in the key array finds a match in the user cache     an empty array will be returned.           Examples            Example #1 wincache_ucache_get() with key as a string       <?phpwincache_ucache_add('color',\u00a0'blue');var_dump(wincache_ucache_get('color',\u00a0$success));var_dump($success);?>             The above example will output:       string(4) \"blue\" bool(true)                             Example #2 wincache_ucache_get() with key as an array       <?php$array1\u00a0=\u00a0array('green'\u00a0=>\u00a0'5',\u00a0'Blue'\u00a0=>\u00a0'6',\u00a0'yellow'\u00a0=>\u00a0'7',\u00a0'cyan'\u00a0=>\u00a0'8');wincache_ucache_set($array1);$array2\u00a0=\u00a0array('green',\u00a0'Blue',\u00a0'yellow',\u00a0'cyan');var_dump(wincache_ucache_get($array2,\u00a0$success));var_dump($success);?>             The above example will output:       array(4) { [\"green\"]=> string(1) \"5\"             [\"Blue\"]=> string(1) \"6\"             [\"yellow\"]=> string(1) \"7\"             [\"cyan\"]=> string(1) \"8\" }  bool(true)                           See Also            wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache     wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     __wakeup()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-inc.php","title":"wincache_ucache_inc","description":"wincache_ucache_inc   (PECL wincache >= 1.1.0)wincache_ucache_inc \u2014     Increments the value associated with the key           Description       mixed wincache_ucache_inc     ( string $key    [, int $inc_by = 1    [, bool &$success   ]] )        Increments the value associated with the key by 1 or as specified     by inc_by.           Parameters                    key                      The key that was used to store the variable in the cache.         key is case sensitive.                                inc_by                      The value by which the variable associated with the key will get incremented.         If the argument is a floating point number it will be truncated to nearest integer. The variable         associated with the key should be of type long, otherwise         the function fails and returns FALSE.                                success                      Will be set to TRUE on success and FALSE on failure.                                    Return Values       Returns the incremented value on success and FALSE on failure.           Examples            Example #1 Using wincache_ucache_inc()       <?phpwincache_ucache_set('counter',\u00a01);var_dump(wincache_ucache_inc('counter',\u00a02921,\u00a0$success));var_dump($success);?>             The above example will output:       int(2922)  bool(true)                          See Also            wincache_ucache_dec() - Decrements the value associated with the key     wincache_ucache_cas() - Compares the variable with old value and assigns new value to it"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-info.php","title":"wincache_ucache_info","description":"wincache_ucache_info   (PECL wincache >= 1.1.0)wincache_ucache_info \u2014     Retrieves information about data stored in the user cache           Description       array wincache_ucache_info     ([ bool $summaryonly = false    [, string $key   ]] )        Retrieves information about data stored in the user cache.           Parameters                    summaryonly                      Controls whether the returned array will contain information about individual cache entries         along with the user cache summary.                                key                      The key of an entry in the user cache. If specified then the returned array will contain information         only about that cache entry. If not specified and summaryonly is set to         false then the returned array will contain information about all entries in the cache.                                    Return Values       Array of meta data about user cache  or FALSE on failure            The array returned by this function contains the following elements:                      total_cache_uptime - total time in seconds that the user cache has been active                             total_item_count - total number of elements that are currently in the user cache                             is_local_cache - true is the cache metadata is for a local cache instance,         false if the metadata is for the global cache                             total_hit_count - number of times the data has been served from the cache                             total_miss_count - number of times the data has not been found in the cache                             ucache_entries - an array that contains the information about all the cached items:                                  key_name - name of the key which is used to store the data                                            value_type - type of value stored by the key                                            use_time - time in seconds since the file has been accessed in the opcode cache                                            last_check - time in seconds since the file has been checked for modifications                                            is_session - indicates if the data is a session variable                                            ttl_seconds - time remaining for the data to live in the cache, 0 meaning infinite                                            age_seconds - time elapsed from the time data has been added in the cache                                            hitcount - number of times data has been served from the cache                                                  Examples            Example #1 Using wincache_ucache_info()       <?phpwincache_ucache_get('green');wincache_ucache_set('green',\u00a02922);wincache_ucache_get('green');wincache_ucache_get('green');wincache_ucache_get('green');print_r(wincache_ucache_info());?>             The above example will output:       Array  ( [\"total_cache_uptime\"] => int(0)   [\"is_local_cache\"] => bool(false)   [\"total_item_count\"] => int(1)    [\"total_hit_count\"] => int(3)    [\"total_miss_count\"] => int(1)    [\"ucache_entries\"] => Array(1)      ( [1] => Array(6)       (          [\"key_name\"] => string(5) \"green\"         [\"value_type\"] => string(4) \"long\"          [\"is_session\"] => int(0)          [\"ttl_seconds\"] => int(0)         [\"age_seconds\"] => int(0)         [\"hitcount\"] => int(3)         )      )  )                           See Also            wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-meminfo.php","title":"wincache_ucache_meminfo","description":"wincache_ucache_meminfo   (PECL wincache >= 1.1.0)wincache_ucache_meminfo \u2014     Retrieves information about user cache memory usage           Description       array wincache_ucache_meminfo     ( void    )        Retrieves information about memory usage by user cache.           Return Values       Array of meta data about user cache memory usage  or FALSE on failure          The array returned by this function contains the following elements:                      memory_total - amount of memory in bytes allocated for the user cache                             memory_free - amount of free memory in bytes available for the user cache                             num_used_blks - number of memory blocks used by the user cache                             num_free_blks - number of free memory blocks available for the user cache                             memory_overhead - amount of memory in bytes used for the user cache internal structures                           Examples            Example #1 A wincache_ucache_meminfo() example       <pre><?phpprint_r(wincache_ucache_meminfo());?><\/pre>            The above example will output:       Array  (      [memory_total] => 5242880      [memory_free] => 5215056      [num_used_blks] => 6      [num_free_blks] => 3      [memory_overhead] => 176 )                       See Also            wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache     wincache_fcache_meminfo() - Retrieves information about file cache memory usage     wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache     wincache_rplist_fileinfo() - Retrieves information about resolve file path cache     wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache     wincache_refresh_if_changed() - Refreshes the cache entries for the cached files     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache     wincache_scache_meminfo() - Retrieves information about session cache memory usage"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-set.php","title":"wincache_ucache_set","description":"wincache_ucache_set   (PECL wincache >= 1.1.0)wincache_ucache_set \u2014     Adds a variable in user cache and overwrites a variable if it already exists in the cache           Description       bool wincache_ucache_set     ( mixed $key    , mixed $value    [, int $ttl = 0   ] )        bool wincache_ucache_set     ( array $values    [, mixed $unused    [, int $ttl = 0   ]] )        Adds a variable in user cache. Overwrites a variable if it already exists in the cache.     The added or updated variable remains in the user cache unless its time to live expires or it is     deleted by using wincache_ucache_delete() or wincache_ucache_clear() functions.           Parameters                    key                      Store the variable using this key name. If a variable with same         key is already present the function will overwrite the previous         value with the new one. key is case sensitive.         key can also take array of name => value pairs where names will be used as         keys. This can be used to add multiple values in the cache in one operation, thus avoiding         race condition.                                value                      Value of a variable to store. Value supports all data types except resources, such as file handles.        This paramter is ignored if first argument is an array. A general guidance is to pass NULL         as value while using array as key. If value is an        object, or an array containing objects, then the objects will be serialized. See        __sleep() for details on serializing objects.                                values                      Associative array of keys and values.                                ttl                      Time for the variable to live in the cache in seconds. After the value specified in ttl has passed         the stored variable will be deleted from the cache. This parameter takes a default value of 0 which means         the variable will stay in the cache unless explicitly deleted by using wincache_ucache_delete()         or wincache_ucache_clear() functions.                                    Return Values       If key is string, the function returns TRUE on success and FALSE on failure.          If key is an array, the function returns:                      If all the name => value pairs in the array can be set, function returns an empty array;                            If all the name => value pairs in the array cannot be set, function returns FALSE;                             If some can be set while others cannot, function returns an array with name=>value pair for which the addition failed in the user cache.                          Examples            Example #1 wincache_ucache_set() with key as a string       <?php$bar\u00a0=\u00a0'BAR';var_dump(wincache_ucache_set('foo',\u00a0$bar));var_dump(wincache_ucache_get('foo'));$bar1\u00a0=\u00a0'BAR1';var_dump(wincache_ucache_set('foo',\u00a0$bar1));var_dump(wincache_ucache_get('foo'));?>             The above example will output:       bool(true) string(3) \"BAR\" bool(true) string(3) \"BAR1\"                             Example #2 wincache_ucache_set() with key as an array       <?php$colors_array\u00a0=\u00a0array('green'\u00a0=>\u00a0'5',\u00a0'Blue'\u00a0=>\u00a0'6',\u00a0'yellow'\u00a0=>\u00a0'7',\u00a0'cyan'\u00a0=>\u00a0'8');var_dump(wincache_ucache_set($colors_array));var_dump(wincache_ucache_set($colors_array));var_dump(wincache_ucache_get('Blue'));?>             The above example will output:       array(0) {} array(0) {} string(1) \"6\"                          See Also            wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     __sleep()"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-unlock.php","title":"wincache_unlock","description":"wincache_unlock   (PECL wincache >= 1.1.0)wincache_unlock \u2014     Releases an exclusive lock on a given key           Description       bool wincache_unlock     ( string $key    )        Releases an exclusive lock that was obtained on a given key by using wincache_lock().     If any other process was blocked waiting for the lock on this key, that process will be able to obtain     the lock.      Warning         Using of the wincache_lock() and wincache_unlock() can cause deadlocks when      executing PHP scripts in a multi-process environment like FastCGI. Do not use these functions unless you are      absolutely sure you need to use them. For the majority of the operations on the user cache it is not necessary to     use these functions.               Parameters                    key                      Name of the key in the cache to release the lock on.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 Using wincache_unlock()       <?php$fp\u00a0=\u00a0fopen(\"\/tmp\/lock.txt\",\u00a0\"r+\");if\u00a0(wincache_lock(\u201clock_txt_lock\u201d))\u00a0{\u00a0\/\/\u00a0do\u00a0an\u00a0exclusive\u00a0lock\u00a0\u00a0\u00a0\u00a0ftruncate($fp,\u00a00);\u00a0\/\/\u00a0truncate\u00a0file\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"Write\u00a0something\u00a0here\\n\");\u00a0\u00a0\u00a0\u00a0wincache_unlock(\u201clock_txt_lock\u201d);\u00a0\/\/\u00a0release\u00a0the\u00a0lock}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0the\u00a0lock!\";}fclose($fp);?>                        See Also            wincache_lock() - Acquires an exclusive lock on a given key     wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache     wincache_ucache_get() - Gets a variable stored in the user cache     wincache_ucache_delete() - Deletes variables from the user cache     wincache_ucache_clear() - Deletes entire content of the user cache     wincache_ucache_exists() - Checks if a variable exists in the user cache     wincache_ucache_meminfo() - Retrieves information about user cache memory usage     wincache_ucache_info() - Retrieves information about data stored in the user cache     wincache_scache_info() - Retrieves information about files cached in the session cache"},{"url":"http:\/\/www.php.net\/manual\/en\/function.doubleval.php","title":"doubleval","description":"doubleval   (PHP 4, PHP 5)doubleval \u2014 Alias of floatval()         Description       This function is an alias of:     floatval().            Changelog                                 Version        Description                                    4.2.0                 doubleval() became an alias of          floatval(). Before this time, only         doubleval() existed."},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-resource-type.php","title":"get_resource_type","description":"get_resource_type   (PHP 4 >= 4.0.2, PHP 5)get_resource_type \u2014     Returns the resource type            Description       string get_resource_type     ( resource $handle    )        This function gets the type of the given resource.            Parameters                    handle                      The evaluated resource handle.                                     Return Values       If the given handle is a resource, this function    will return a string representing its type. If the type is not identified    by this function, the return value will be the string     Unknown.          This function will return FALSE and generate an error if     handle is not a resource.            Examples            Example #1 get_resource_type() example       <?php\/\/\u00a0prints:\u00a0mysql\u00a0link$c\u00a0=\u00a0mysql_connect();echo\u00a0get_resource_type($c)\u00a0.\u00a0\"\\n\";\/\/\u00a0prints:\u00a0file$fp\u00a0=\u00a0fopen(\"foo\",\u00a0\"w\");echo\u00a0get_resource_type($fp)\u00a0.\u00a0\"\\n\";\/\/\u00a0prints:\u00a0domxml\u00a0document$doc\u00a0=\u00a0new_xmldoc(\"1.0\");echo\u00a0get_resource_type($doc->doc)\u00a0.\u00a0\"\\n\";?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.debug-zval-dump.php","title":"debug_zval_dump","description":"debug_zval_dump   (PHP 4 >= 4.2.0, PHP 5)debug_zval_dump \u2014 Dumps a string representation of an internal zend value to output        Description       void debug_zval_dump     ( mixed $variable    )        Dumps a string representation of an internal zend value to output.           Parameters                    variable                      The variable being evaluated.                                    Return Values       No value is returned.           Examples            Example #1 debug_zval_dump() example       <?php$var1\u00a0=\u00a0'Hello\u00a0World';$var2\u00a0=\u00a0'';$var2\u00a0=&\u00a0$var1;debug_zval_dump(&$var1);?>             The above example will output:       &string(11) \"Hello World\" refcount(3)                Note:     Beware the refcount         The refcount value returned by this function is     non-obvious in certain circumstances. For example, a developer might     expect the above example to indicate a refcount of     2. The third reference is created when actually     calling debug_zval_dump().             This behavior is further compounded when a variable is not passed to     debug_zval_dump() by reference. To illustrate, consider     a slightly modified version of the above example:                           <?php$var1\u00a0=\u00a0'Hello\u00a0World';$var2\u00a0=\u00a0'';$var2\u00a0=&\u00a0$var1;debug_zval_dump($var1);\u00a0\/\/\u00a0not\u00a0passed\u00a0by\u00a0reference,\u00a0this\u00a0time?>               The above example will output:        string(11) \"Hello World\" refcount(1)                         Why refcount(1)? Because a copy of $var1 is     being made, when the function is called.             This function becomes even more confusing when a     variable with a refcount of 1 is     passed (by copy\/value):                           <?php$var1\u00a0=\u00a0'Hello\u00a0World';debug_zval_dump($var1);?>               The above example will output:        string(11) \"Hello World\" refcount(2)                         A refcount of 2, here, is extremely     non-obvious. Especially considering the above examples. So what&#039;s     happening?             When a variable has a single reference (as did $var1     before it was used as an argument to debug_zval_dump()),     PHP&#039;s engine optimizes the manner in which it is passed to a function.     Internally, PHP treats $var1 like a reference (in that     the refcount is increased for the scope of this     function), with the caveat that if the passed reference     happens to be written to, a copy is made, but only at the moment of     writing. This is known as \"copy on write.\"             So, if debug_zval_dump() happened to write to its sole     parameter (and it doesn&#039;t), then a copy would be made. Until then, the     parameter remains a reference, causing the refcount to     be incremented to 2 for the scope of the function call.               See Also            var_dump() - Dumps information about a variable     debug_backtrace() - Generates a backtrace     References Explained     \u00bb\u00a0References Explained (by Derick Rethans)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-defined-vars.php","title":"get_defined_vars","description":"get_defined_vars   (PHP 4 >= 4.0.4, PHP 5)get_defined_vars \u2014     Returns an array of all defined variables           Description       array get_defined_vars     ( void    )        This function returns a multidimensional array containing a list of    all defined variables, be them environment, server or user-defined    variables, within the scope that get_defined_vars() is    called.            Return Values       A multidimensional array with all the variables.           Examples            Example #1 get_defined_vars() Example       <?php$b\u00a0=\u00a0array(1,\u00a01,\u00a02,\u00a03,\u00a05,\u00a08);$arr\u00a0=\u00a0get_defined_vars();\/\/\u00a0print\u00a0$bprint_r($arr[\"b\"]);\/*\u00a0print\u00a0path\u00a0to\u00a0the\u00a0PHP\u00a0interpreter\u00a0(if\u00a0used\u00a0as\u00a0a\u00a0CGI)\u00a0*\u00a0e.g.\u00a0\/usr\/local\/bin\/php\u00a0*\/echo\u00a0$arr[\"_\"];\/\/\u00a0print\u00a0the\u00a0command-line\u00a0parameters\u00a0if\u00a0anyprint_r($arr[\"argv\"]);\/\/\u00a0print\u00a0all\u00a0the\u00a0server\u00a0varsprint_r($arr[\"_SERVER\"]);\/\/\u00a0print\u00a0all\u00a0the\u00a0available\u00a0keys\u00a0for\u00a0the\u00a0arrays\u00a0of\u00a0variablesprint_r(array_keys(get_defined_vars()));?>                       Changelog                                 Version        Description                                    5.0.0                 The $GLOBALS variable is included in the results of         the array returned.                                           See Also            isset() - Determine if a variable is set and is not NULL     get_defined_functions() - Returns an array of all defined functions     get_defined_constants() - Returns an associative array with the names of all the constants and their values"},{"url":"http:\/\/www.php.net\/manual\/en\/function.floatval.php","title":"floatval","description":"floatval   (PHP 4 >= 4.2.0, PHP 5)floatval \u2014 Get float value of a variable        Description       float floatval     ( mixed $var    )        Gets the float value of var.           Parameters                    var                      May be any scalar type. floatval() should not be used        on objects, as doing so will emit an E_NOTICE level        error and return 1.                                    Return Values       The float value of the given variable. Empty arrays return 0, non-empty    arrays return 1.           Examples            Example #1 floatval() Example       <?php$var\u00a0=\u00a0'122.34343The';$float_value_of_var\u00a0=\u00a0floatval($var);echo\u00a0$float_value_of_var;\u00a0\/\/\u00a0122.34343?>                       See Also            intval() - Get the integer value of a variable     strval() - Get string value of a variable     settype() - Set the type of a variable     Type juggling"},{"url":"http:\/\/www.php.net\/manual\/en\/function.empty.php","title":"empty","description":"empty   (PHP 4, PHP 5)empty \u2014 Determine whether a variable is empty        Description       bool empty     ( mixed $var    )        Determine whether a variable is considered to be empty.           Parameters                    var                      Variable to be checked              Note:                  empty() only checks variables as anything else will         result in a parse error. In other words, the following will not work:         empty(trim($name)).                              empty() is the opposite of        (boolean) var,        except that no warning is generated when the variable is not set.                                    Return Values       Returns FALSE if var has a non-empty    and non-zero value.          The following things are considered to be empty:         \"\" (an empty string)     0 (0 as an integer)     0.0 (0 as a float)     \"0\" (0 as a string)     NULL     FALSE     array() (an empty array)     var $var; (a variable declared, but without a value in a class)               Changelog                                 Version        Description                                    5.0.0                           Objects with no properties are no longer considered empty.                                                    Examples            Example #1       A simple empty() \/ isset()      comparison.              <?php$var\u00a0=\u00a00;\/\/\u00a0Evaluates\u00a0to\u00a0true\u00a0because\u00a0$var\u00a0is\u00a0emptyif\u00a0(empty($var))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'$var\u00a0is\u00a0either\u00a00,\u00a0empty,\u00a0or\u00a0not\u00a0set\u00a0at\u00a0all';}\/\/\u00a0Evaluates\u00a0as\u00a0true\u00a0because\u00a0$var\u00a0is\u00a0setif\u00a0(isset($var))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'$var\u00a0is\u00a0set\u00a0even\u00a0though\u00a0it\u00a0is\u00a0empty';}?>                       Notes   Note: Because this is a language construct and not a function, it cannot be called using variable functions    Note:          When using empty() on inaccessible object properties,     the __isset     overloading method will be called, if declared.               See Also            isset() - Determine if a variable is set and is not NULL     __isset     unset() - Unset a given variable     array_key_exists() - Checks if the given key or index exists in the array     count() - Count all elements in an array, or something in an object      strlen() - Get string length     The type comparison tables"},{"url":"http:\/\/www.php.net\/manual\/en\/function.import-request-variables.php","title":"import_request_variables","description":"import_request_variables   (PHP 4 >= 4.1.0, PHP 5)import_request_variables \u2014 Import GET\/POST\/Cookie variables into the global scope         Description       bool import_request_variables     ( string $types    [, string $prefix   ] )        Imports GET\/POST\/Cookie variables into the global scope. It is useful if    you disabled register_globals,    but would like to see some variables in the global scope.          If you&#039;re interested in importing other variables into the global scope,    such as $_SERVER, consider using extract().            Parameters                    types                      Using the types parameter, you can specify        which request variables to import. You can use &#039;G&#039;, &#039;P&#039; and &#039;C&#039;         characters respectively for GET, POST and Cookie. These characters are        not case sensitive, so you can also use any combination of &#039;g&#039;, &#039;p&#039;        and &#039;c&#039;. POST includes the POST uploaded file information.              Note:                  Note that the order of the letters matters, as when using         \"GP\", the         POST variables will overwrite GET variables with the same name. Any         other letters than GPC are discarded.                                        prefix                      Variable name prefix, prepended before all variable&#039;s name imported        into the global scope. So if you have a GET value named        \"userid\", and provide a prefix        \"pref_\", then you&#039;ll get a global variable named        $pref_userid.              Note:                  Although the prefix parameter is optional, you         will get an E_NOTICE level         error if you specify no prefix, or specify an empty string as a         prefix. This is a possible security hazard. Notice level errors are         not displayed using the default error reporting level.                                             Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 import_request_variables() example       <?php\/\/\u00a0This\u00a0will\u00a0import\u00a0GET\u00a0and\u00a0POST\u00a0vars\/\/\u00a0with\u00a0an\u00a0\"rvar_\"\u00a0prefiximport_request_variables(\"gp\",\u00a0\"rvar_\");echo\u00a0$rvar_foo;?>                        See Also            $_REQUEST     register_globals     Predefined Variables     extract() - Import variables into the current symbol table from an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gettype.php","title":"gettype","description":"gettype   (PHP 4, PHP 5)gettype \u2014 Get the type of a variable         Description       string gettype     ( mixed $var    )        Returns the type of the PHP variable    var.      Warning         Never use gettype() to test for a certain type,     since the returned string may be subject to change in a future version.     In addition, it is slow too, as it involves string comparison.             Instead, use the is_* functions.                Parameters                    var                      The variable being type checked.                                     Return Values       Possibles values for the returned string are:                      \"boolean\"                             \"integer\"                             \"double\" (for historical reasons \"double\" is       returned in case of a float, and not simply       \"float\")                             \"string\"                             \"array\"                             \"object\"                             \"resource\"                             \"NULL\"                             \"unknown type\"                            Examples            Example #1 gettype() example       <?php$data\u00a0=\u00a0array(1,\u00a01.,\u00a0NULL,\u00a0new\u00a0stdClass,\u00a0'foo');foreach\u00a0($data\u00a0as\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0gettype($value),\u00a0\"\\n\";}?>             The above example will output something similar to:       integer double NULL object string                      See Also            settype() - Set the type of a variable     get_class() - Returns the name of the class of an object     is_array() - Finds whether a variable is an array     is_bool() - Finds out whether a variable is a boolean     is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_null() - Finds whether a variable is NULL     is_numeric() - Finds whether a variable is a number or a numeric string     is_object() - Finds whether a variable is an object     is_resource() - Finds whether a variable is a resource     is_scalar() - Finds whether a variable is a scalar     is_string() - Find whether the type of a variable is string     function_exists() - Return TRUE if the given function has been defined     method_exists() - Checks if the class method exists"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-double.php","title":"is_double","description":"is_double   (PHP 4, PHP 5)is_double \u2014 Alias of is_float()         Description       This function is an alias of:     is_float()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.intval.php","title":"intval","description":"intval   (PHP 4, PHP 5)intval \u2014 Get the integer value of a variable         Description       int intval     ( mixed $var    [, int $base = 10   ] )        Returns the integer value of var,    using the specified base for the conversion     (the default is base 10). intval() should not be used    on objects, as doing so will emit an E_NOTICE level    error and return 1.            Parameters                    var                      The scalar value being converted to an integer                                base                      The base for the conversion                                     Return Values       The integer value of var on success, or 0 on    failure. Empty arrays return 0, non-empty arrays return 1.          The maximum value depends on the system. 32 bit systems have a     maximum signed integer range of -2147483648 to 2147483647. So for example     on such a system, intval(&#039;1000000000000&#039;) will return     2147483647. The maximum signed integer value for 64 bit systems is     9223372036854775807.          Strings will most likely return 0 although this depends on the     leftmost characters of the string. The common rules of     integer casting     apply.            Examples            Example #1 intval() examples           The following examples are based on a 32 bit system.            <?phpecho\u00a0intval(42);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a042echo\u00a0intval(4.2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04echo\u00a0intval('42');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a042echo\u00a0intval('+42');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a042echo\u00a0intval('-42');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0-42echo\u00a0intval(042);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a034echo\u00a0intval('042');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a042echo\u00a0intval(1e10);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a01410065408echo\u00a0intval('1e10');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a01echo\u00a0intval(0x1A);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a026echo\u00a0intval(42000000);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a042000000echo\u00a0intval(420000000000000000000);\u00a0\u00a0\u00a0\/\/\u00a00echo\u00a0intval('420000000000000000000');\u00a0\/\/\u00a02147483647echo\u00a0intval(42,\u00a08);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a042echo\u00a0intval('42',\u00a08);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a034echo\u00a0intval(array());\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a00echo\u00a0intval(array('foo',\u00a0'bar'));\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a01?>                        Notes   Note:          The base parameter has no effect unless the     var parameter is a string.                Changelog                                 Version        Description                                    5.1.0                 Throws E_NOTICE and         returns 1, when an object is passed to          var.                                            See Also            floatval() - Get float value of a variable     strval() - Get string value of a variable     settype() - Set the type of a variable     is_numeric() - Finds whether a variable is a number or a numeric string     Type juggling     BCMath Arbitrary Precision Mathematics Functions"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-array.php","title":"is_array","description":"is_array   (PHP 4, PHP 5)is_array \u2014 Finds whether a variable is an array        Description         bool is_array      ( mixed $var     )        Finds whether the given variable is an array.           Parameters                    var                      The variable being evaluated.                                    Return Values       Returns TRUE if var is an array,    FALSE otherwise.           Examples            Example #1 Check that variable is an array       <?php$yes\u00a0=\u00a0array('this',\u00a0'is',\u00a0'an\u00a0array');echo\u00a0is_array($yes)\u00a0?\u00a0'Array'\u00a0:\u00a0'not\u00a0an\u00a0Array';echo\u00a0\"\\n\";$no\u00a0=\u00a0'this\u00a0is\u00a0a\u00a0string';echo\u00a0is_array($no)\u00a0?\u00a0'Array'\u00a0:\u00a0'not\u00a0an\u00a0Array';?>             The above example will output:       Array not an Array                     See Also            is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_string() - Find whether the type of a variable is string     is_object() - Finds whether a variable is an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-bool.php","title":"is_bool","description":"is_bool   (PHP 4, PHP 5)is_bool \u2014     Finds out whether a variable is a boolean           Description       bool is_bool     ( mixed $var    )        Finds whether the given variable is a boolean.           Parameters                    var                      The variable being evaluated.                                    Return Values       Returns TRUE if var is a boolean,    FALSE otherwise.           Examples            Example #1 is_bool() examples       <?php$a\u00a0=\u00a0false;$b\u00a0=\u00a00;\/\/\u00a0Since\u00a0$a\u00a0is\u00a0a\u00a0boolean,\u00a0it\u00a0will\u00a0return\u00a0trueif\u00a0(is_bool($a)\u00a0===\u00a0true)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Yes,\u00a0this\u00a0is\u00a0a\u00a0boolean\";}\/\/\u00a0Since\u00a0$b\u00a0is\u00a0not\u00a0a\u00a0boolean,\u00a0it\u00a0will\u00a0return\u00a0falseif\u00a0(is_bool($b)\u00a0===\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"No,\u00a0this\u00a0is\u00a0not\u00a0a\u00a0boolean\";}?>                       See Also            is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_string() - Find whether the type of a variable is string     is_object() - Finds whether a variable is an object     is_array() - Finds whether a variable is an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-callable.php","title":"is_callable","description":"is_callable   (PHP 4 >= 4.0.6, PHP 5)is_callable \u2014     Verify that the contents of a variable can be called as a function            Description       bool is_callable     ( callback $name    [, bool $syntax_only = false    [, string &$callable_name   ]] )        Verify that the contents of a variable can be called as a function.    This can check that a simple variable contains the name of a valid    function, or that an array contains a properly encoded object and    function name.            Parameters                    name                      The callback function to check                                syntax_only                      If set to TRUE the function only verifies that        name might be a function or method. It will only        reject simple variables that are not strings, or an array that does        not have a valid structure to be used as a callback. The valid ones        are supposed to have only 2 entries, the first of which is an object        or a string, and the second a string.                                callable_name                      Receives the \"callable name\".  In the example below it is        \"someClass::someMethod\".  Note, however, that despite the implication        that someClass::SomeMethod() is a callable static method, this is not        the case.                                     Return Values       Returns TRUE if name is callable, FALSE     otherwise.            Examples            Example #1 is_callable() example       <?php\/\/\u00a0\u00a0How\u00a0to\u00a0check\u00a0a\u00a0variable\u00a0to\u00a0see\u00a0if\u00a0it\u00a0can\u00a0be\u00a0called\/\/\u00a0\u00a0as\u00a0a\u00a0function.\/\/\/\/\u00a0\u00a0Simple\u00a0variable\u00a0containing\u00a0a\u00a0function\/\/function\u00a0someFunction()\u00a0{}$functionVariable\u00a0=\u00a0'someFunction';var_dump(is_callable($functionVariable,\u00a0false,\u00a0$callable_name));\u00a0\u00a0\/\/\u00a0bool(true)echo\u00a0$callable_name,\u00a0\"\\n\";\u00a0\u00a0\/\/\u00a0someFunction\/\/\/\/\u00a0\u00a0Array\u00a0containing\u00a0a\u00a0method\/\/class\u00a0someClass\u00a0{\u00a0\u00a0function\u00a0someMethod()\u00a0\u00a0\u00a0{\u00a0\u00a0}}$anObject\u00a0=\u00a0new\u00a0someClass();$methodVariable\u00a0=\u00a0array($anObject,\u00a0'someMethod');var_dump(is_callable($methodVariable,\u00a0true,\u00a0$callable_name));\u00a0\u00a0\/\/\u00a0\u00a0bool(true)echo\u00a0$callable_name,\u00a0\"\\n\";\u00a0\u00a0\/\/\u00a0\u00a0someClass::someMethod?>                              See Also            function_exists() - Return TRUE if the given function has been defined     method_exists() - Checks if the class method exists"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-integer.php","title":"is_integer","description":"is_integer   (PHP 4, PHP 5)is_integer \u2014 Alias of is_int()         Description       This function is an alias of:     is_int()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-float.php","title":"is_float","description":"is_float   (PHP 4, PHP 5)is_float \u2014 Finds whether the type of a variable is float        Description         bool is_float      ( mixed $var     )        Finds whether the type of the given variable is float.      Note:          To test if a variable is a number or a numeric string (such as form     input, which is always a string), you must use     is_numeric().               Parameters                    var                      The variable being evaluated.                                    Return Values       Returns TRUE if var is a float,    FALSE otherwise.           Examples            Example #1 is_float() example       <?phpif\u00a0(is_float(27.25))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is\u00a0float\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is\u00a0not\u00a0float\\n\";}var_dump(is_float('abc'));var_dump(is_float(23));var_dump(is_float(23.5));var_dump(is_float(1e7));\u00a0\u00a0\/\/Scientific\u00a0Notationvar_dump(is_float(true));?>             The above example will output:       is float bool(false) bool(false) bool(true) bool(true) bool(false)                      See Also            is_bool() - Finds out whether a variable is a boolean     is_int() - Find whether the type of a variable is integer     is_numeric() - Finds whether a variable is a number or a numeric string     is_string() - Find whether the type of a variable is string     is_array() - Finds whether a variable is an array     is_object() - Finds whether a variable is an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-long.php","title":"is_long","description":"is_long   (PHP 4, PHP 5)is_long \u2014 Alias of is_int()         Description       This function is an alias of:     is_int()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-int.php","title":"is_int","description":"is_int   (PHP 4, PHP 5)is_int \u2014 Find whether the type of a variable is integer        Description         bool is_int      ( mixed $var     )        Finds whether the type of the given variable is integer.      Note:          To test if a variable is a number or a numeric string (such as form     input, which is always a string), you must use     is_numeric().               Parameters                    var                      The variable being evaluated.                                    Return Values       Returns TRUE if var is an integer,    FALSE otherwise.            Examples            Example #1 is_int() example       <?phpif\u00a0(is_int(23))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is\u00a0integer\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is\u00a0not\u00a0an\u00a0integer\\n\";}var_dump(is_int(23));var_dump(is_int(\"23\"));var_dump(is_int(23.5));var_dump(is_int(true));?>             The above example will output:       is integer bool(true) bool(false) bool(false) bool(false)                       See Also            is_bool() - Finds out whether a variable is a boolean     is_float() - Finds whether the type of a variable is float     is_numeric() - Finds whether a variable is a number or a numeric string     is_string() - Find whether the type of a variable is string     is_array() - Finds whether a variable is an array     is_object() - Finds whether a variable is an object"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-null.php","title":"is_null","description":"is_null   (PHP 4 >= 4.0.4, PHP 5)is_null \u2014     Finds whether a variable is NULL           Description       bool is_null     ( mixed $var    )        Finds whether the given variable is NULL.           Parameters                    var                      The variable being evaluated.                                    Return Values       Returns TRUE if var is null, FALSE    otherwise.           Examples            Example #1 is_null() example       <?phperror_reporting(E_ALL);$foo\u00a0=\u00a0NULL;var_dump(is_null($inexistent),\u00a0is_null($foo));?>               Notice: Undefined variable: inexistent in ... bool(true) bool(true)                     See Also            The NULL type     isset() - Determine if a variable is set and is not NULL     is_bool() - Finds out whether a variable is a boolean     is_numeric() - Finds whether a variable is a number or a numeric string     is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_string() - Find whether the type of a variable is string     is_object() - Finds whether a variable is an object     is_array() - Finds whether a variable is an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-real.php","title":"is_real","description":"is_real   (PHP 4, PHP 5)is_real \u2014 Alias of is_float()         Description       This function is an alias of:     is_float()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-object.php","title":"is_object","description":"is_object   (PHP 4, PHP 5)is_object \u2014 Finds whether a variable is an object         Description         bool is_object      ( mixed $var     )        Finds whether the given variable is an object.            Parameters                    var                      The variable being evaluated.                                     Return Values       Returns TRUE if var is an object,    FALSE otherwise.            Examples            Example #1 is_object() example       <?php\/\/\u00a0Declare\u00a0a\u00a0simple\u00a0function\u00a0to\u00a0return\u00a0an\u00a0\/\/\u00a0array\u00a0from\u00a0our\u00a0objectfunction\u00a0get_students($obj){\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_object($obj))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0$obj->students;}\/\/\u00a0Declare\u00a0a\u00a0new\u00a0class\u00a0instance\u00a0and\u00a0fill\u00a0up\u00a0\/\/\u00a0some\u00a0values$obj\u00a0=\u00a0new\u00a0stdClass();$obj->students\u00a0=\u00a0array('Kalle',\u00a0'Ross',\u00a0'Felipe');var_dump(get_students(null));var_dump(get_students($obj));?>                        Notes   Note:          This function will return FALSE if used on an unserialized object     where the class definition is not present (even though     gettype() returns object).                See Also            is_bool() - Finds out whether a variable is a boolean     is_int() - Find whether the type of a variable is integer     is_float() - Finds whether the type of a variable is float     is_string() - Find whether the type of a variable is string     is_array() - Finds whether a variable is an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-resource.php","title":"is_resource","description":"is_resource   (PHP 4, PHP 5)is_resource \u2014     Finds whether a variable is a resource            Description       bool is_resource     ( mixed $var    )        Finds whether the given variable is a resource.            Parameters                    var                      The variable being evaluated.                                     Return Values       Returns TRUE if var is a resource,    FALSE otherwise.            Examples            Example #1 is_resource() example       <?php$db_link\u00a0=\u00a0@mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_pass');if\u00a0(!is_resource($db_link))\u00a0{\u00a0\u00a0\u00a0\u00a0die('Can\\'t\u00a0connect\u00a0:\u00a0'\u00a0.\u00a0mysql_error());}?>                        See Also            The resource-type documentation     get_resource_type() - Returns the resource type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-string.php","title":"is_string","description":"is_string   (PHP 4, PHP 5)is_string \u2014 Find whether the type of a variable is string        Description       bool is_string     ( mixed $var    )        Finds whether the type given variable is string.           Parameters                    var                      The variable being evaluated.                                    Return Values       Returns TRUE if var is of type string,    FALSE otherwise.           Examples            Example #1 is_string() example       <?phpif\u00a0(is_string(\"23\"))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is\u00a0string\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is\u00a0not\u00a0a\u00a0string\\n\";}var_dump(is_string('abc'));var_dump(is_string(\"23\"));var_dump(is_string(23.5));var_dump(is_string(true));?>             The above example will output:       is string bool(true) bool(true) bool(false) bool(false)                      See Also            is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_bool() - Finds out whether a variable is a boolean     is_object() - Finds whether a variable is an object     is_array() - Finds whether a variable is an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-numeric.php","title":"is_numeric","description":"is_numeric   (PHP 4, PHP 5)is_numeric \u2014     Finds whether a variable is a number or a numeric string            Description       bool is_numeric     ( mixed $var    )        Finds whether the given variable is numeric. Numeric strings consist of    optional sign, any number of digits, optional decimal part and optional    exponential part. Thus +0123.45e6 is a valid numeric    value. Hexadecimal notation (0xFF) is allowed too but    only without sign, decimal and exponential part.            Parameters                    var                      The variable being evaluated.                                     Return Values       Returns TRUE if var is a number or a numeric    string, FALSE otherwise.            Examples            Example #1 is_numeric() examples       <?php$tests\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\"42\",\u00a0\u00a0\u00a0\u00a0\u00a01337,\u00a0\u00a0\u00a0\u00a0\u00a0\"1e4\",\u00a0\u00a0\u00a0\u00a0\u00a0\"not\u00a0numeric\",\u00a0\u00a0\u00a0\u00a0\u00a0array(),\u00a0\u00a0\u00a0\u00a0\u00a09.1);foreach\u00a0($tests\u00a0as\u00a0$element)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(is_numeric($element))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'{$element}'\u00a0is\u00a0numeric\",\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'{$element}'\u00a0is\u00a0NOT\u00a0numeric\",\u00a0PHP_EOL;\u00a0\u00a0\u00a0\u00a0}}?>             The above example will output:       &#039;42&#039; is numeric &#039;1337&#039; is numeric &#039;1e4&#039; is numeric &#039;not numeric&#039; is NOT numeric &#039;Array&#039; is NOT numeric &#039;9.1&#039; is numeric                      See Also            ctype_digit() - Check for numeric character(s)     is_bool() - Finds out whether a variable is a boolean     is_null() - Finds whether a variable is NULL     is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_string() - Find whether the type of a variable is string     is_object() - Finds whether a variable is an object     is_array() - Finds whether a variable is an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-scalar.php","title":"is_scalar","description":"is_scalar   (PHP 4 >= 4.0.5, PHP 5)is_scalar \u2014     Finds whether a variable is a scalar            Description       bool is_scalar     ( mixed $var    )        Finds whether the given variable is a scalar.          Scalar variables are those containing an integer,     float, string or boolean.      Types array, object and resource     are not scalar.      Note:          is_scalar() does not consider resource     type values to be scalar as resources are abstract datatypes      which are currently based on integers. This implementation detail should      not be relied upon, as it may change.                Parameters                    var                      The variable being evaluated.                                     Return Values       Returns TRUE if var is a scalar FALSE    otherwise.            Examples            Example #1 is_scalar() example        <?phpfunction\u00a0show_var($var)\u00a0{\u00a0\u00a0\u00a0\u00a0if\u00a0(is_scalar($var))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$var;\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($var);\u00a0\u00a0\u00a0\u00a0}}$pi\u00a0=\u00a03.1416;$proteins\u00a0=\u00a0array(\"hemoglobin\",\u00a0\"cytochrome\u00a0c\u00a0oxidase\",\u00a0\"ferredoxin\");show_var($pi);show_var($proteins)?>             The above example will output:       3.1416 array(3) {   [0]=>   string(10) \"hemoglobin\"   [1]=>   string(20) \"cytochrome c oxidase\"   [2]=>   string(10) \"ferredoxin\" }                      See Also            is_float() - Finds whether the type of a variable is float     is_int() - Find whether the type of a variable is integer     is_numeric() - Finds whether a variable is a number or a numeric string     is_real() - Alias of is_float     is_string() - Find whether the type of a variable is string     is_bool() - Finds out whether a variable is a boolean     is_object() - Finds whether a variable is an object     is_array() - Finds whether a variable is an array"},{"url":"http:\/\/www.php.net\/manual\/en\/function.settype.php","title":"settype","description":"settype   (PHP 4, PHP 5)settype \u2014 Set the type of a variable         Description       bool settype     ( mixed &$var    , string $type    )        Set the type of variable var to    type.            Parameters                    var                      The variable being converted.                                type                      Possibles values of type are:                                      \"boolean\" (or, since PHP 4.2.0, \"bool\")                                                 \"integer\" (or, since PHP 4.2.0, \"int\")                                                 \"float\" (only possible since PHP 4.2.0, for older versions use the           deprecated variant \"double\")                                                 \"string\"                                                 \"array\"                                                 \"object\"                                                 \"null\" (since PHP 4.2.0)                                                                Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 settype() example       <?php$foo\u00a0=\u00a0\"5bar\";\u00a0\/\/\u00a0string$bar\u00a0=\u00a0true;\u00a0\u00a0\u00a0\/\/\u00a0booleansettype($foo,\u00a0\"integer\");\u00a0\/\/\u00a0$foo\u00a0is\u00a0now\u00a05\u00a0\u00a0\u00a0(integer)settype($bar,\u00a0\"string\");\u00a0\u00a0\/\/\u00a0$bar\u00a0is\u00a0now\u00a0\"1\"\u00a0(string)?>                        Notes   Note:          Maximum value for \"int\" is PHP_INT_MAX.                See Also            gettype() - Get the type of a variable     type-casting     type-juggling"},{"url":"http:\/\/www.php.net\/manual\/en\/function.isset.php","title":"isset","description":"isset   (PHP 4, PHP 5)isset \u2014 Determine if a variable is set and is not NULL         Description       bool isset     ( mixed $var    [, mixed $...   ] )        Determine if a variable is set and is not NULL.          If a variable has been unset with unset(), it will no    longer be set. isset() will return FALSE if testing a    variable that has been set to NULL. Also note that a NULL byte    (\"\\0\") is not equivalent to the PHP NULL constant.          If multiple parameters are supplied then isset() will    return TRUE only if all of the parameters are set. Evaluation goes from    left to right and stops as soon as an unset variable is encountered.            Parameters                    var                      The variable to be checked.                                ...                      Another variable ...                                     Return Values       Returns TRUE if var exists and has value other    than NULL, FALSE otherwise.            Examples            Example #1 isset() Examples       <?php$var\u00a0=\u00a0'';\/\/\u00a0This\u00a0will\u00a0evaluate\u00a0to\u00a0TRUE\u00a0so\u00a0the\u00a0text\u00a0will\u00a0be\u00a0printed.if\u00a0(isset($var))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"This\u00a0var\u00a0is\u00a0set\u00a0so\u00a0I\u00a0will\u00a0print.\";}\/\/\u00a0In\u00a0the\u00a0next\u00a0examples\u00a0we'll\u00a0use\u00a0var_dump\u00a0to\u00a0output\/\/\u00a0the\u00a0return\u00a0value\u00a0of\u00a0isset().$a\u00a0=\u00a0\"test\";$b\u00a0=\u00a0\"anothertest\";var_dump(isset($a));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0TRUEvar_dump(isset($a,\u00a0$b));\u00a0\/\/\u00a0TRUEunset\u00a0($a);var_dump(isset($a));\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0FALSEvar_dump(isset($a,\u00a0$b));\u00a0\/\/\u00a0FALSE$foo\u00a0=\u00a0NULL;var_dump(isset($foo));\u00a0\u00a0\u00a0\/\/\u00a0FALSE?>                      This also work for elements in arrays:           <?php$a\u00a0=\u00a0array\u00a0('test'\u00a0=>\u00a01,\u00a0'hello'\u00a0=>\u00a0NULL,\u00a0'pie'\u00a0=>\u00a0array('a'\u00a0=>\u00a0'apple'));var_dump(isset($a['test']));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0TRUEvar_dump(isset($a['foo']));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0FALSEvar_dump(isset($a['hello']));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0FALSE\/\/\u00a0The\u00a0key\u00a0'hello'\u00a0equals\u00a0NULL\u00a0so\u00a0is\u00a0considered\u00a0unset\/\/\u00a0If\u00a0you\u00a0want\u00a0to\u00a0check\u00a0for\u00a0NULL\u00a0key\u00a0values\u00a0then\u00a0try:\u00a0var_dump(array_key_exists('hello',\u00a0$a));\u00a0\/\/\u00a0TRUE\/\/\u00a0Checking\u00a0deeper\u00a0array\u00a0valuesvar_dump(isset($a['pie']['a']));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0TRUEvar_dump(isset($a['pie']['b']));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0FALSEvar_dump(isset($a['cake']['a']['b']));\u00a0\u00a0\/\/\u00a0FALSE?>                        Notes   Warning         isset() only works with variables as passing anything     else will result in a parse error.  For checking if      constants are set use the      defined() function.          Note: Because this is a language construct and not a function, it cannot be called using variable functions    Note:          When using isset() on inaccessible object properties,     the __isset     overloading method will be called, if declared.                See Also            empty() - Determine whether a variable is empty     __isset     unset() - Unset a given variable     defined() - Checks whether a given named constant exists     the type comparison tables     array_key_exists() - Checks if the given key or index exists in the array     is_null() - Finds whether a variable is NULL     the error control @ operator"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strval.php","title":"strval","description":"strval   (PHP 4, PHP 5)strval \u2014 Get string value of a variable          Description       string strval     ( mixed $var    )        Get the string value of a variable.    See the documentation on string for more information    on converting to string.          This function performs no formatting on the returned value. If you    are looking for a way to format a numeric value as a string, please    see sprintf() or number_format().            Parameters                    var                      The variable that is being converted to a string.                      var may be any scalar type or an object that        implements the __toString        method. You cannot use strval() on arrays or on        objects that do not implement the        __toString method.                                     Return Values       The string value of var.            Examples            Example #1       strval() example using PHP 5&#039;s magic      __toString method.            <?phpclass\u00a0StrValTest{\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__CLASS__;\u00a0\u00a0\u00a0\u00a0}}\/\/\u00a0Prints\u00a0'StrValTest'echo\u00a0strval(new\u00a0StrValTest);?>                        See Also            floatval() - Get float value of a variable     intval() - Get the integer value of a variable     settype() - Set the type of a variable     sprintf() - Return a formatted string     number_format() - Format a number with grouped thousands     Type juggling     __toString"},{"url":"http:\/\/www.php.net\/manual\/en\/function.print-r.php","title":"print_r","description":"print_r   (PHP 4, PHP 5)print_r \u2014     Prints human-readable information about a variable             Description       mixed print_r     ( mixed $expression    [, bool $return = false   ] )        print_r() displays information about a variable    in a way that&#039;s readable by humans.            print_r(), var_dump() and    var_export() will    also show protected and private properties of objects with PHP 5.    Static class members will not be shown.          Remember that print_r() will move the array    pointer to the end. Use reset() to bring    it back to beginning.            Parameters                    expression                      The expression to be printed.                                return                      If you would like to capture the output of print_r(),         use the return parameter.  When this parameter is set        to TRUE, print_r() will return the information rather than print it.                                     Return Values       If given a string, integer or float,    the value itself will be printed.  If given an array, values    will be presented in a format that shows keys and elements.  Similar    notation is used for objects.          When the return parameter is TRUE, this function    will return a string. Otherwise, the return value is TRUE.            Notes   Note: When the return parameter is used, this function uses internal output buffering so it can not be used inside an ob_start() callback function.         Changelog                                 Version        Description                                    4.3.0                 The return parameter was added. If you need to         capture the output of print_r() with an older          version of PHP prior, use the          output-control functions.                               4.0.4                 Prior to PHP 4.0.4, print_r() will continue forever         if given an array or object that         contains a direct or indirect reference to itself.  An example         is print_r($GLOBALS) because         $GLOBALS is itself a global variable that         contains a reference to itself.                                            Examples            Example #1 print_r() example       <pre><?php$a\u00a0=\u00a0array\u00a0('a'\u00a0=>\u00a0'apple',\u00a0'b'\u00a0=>\u00a0'banana',\u00a0'c'\u00a0=>\u00a0array\u00a0('x',\u00a0'y',\u00a0'z'));print_r\u00a0($a);?><\/pre>            The above example will output:       <pre> Array (     [a] => apple     [b] => banana     [c] => Array         (             [0] => x             [1] => y             [2] => z         ) ) <\/pre>                         Example #2 return parameter example       <?php$b\u00a0=\u00a0array\u00a0('m'\u00a0=>\u00a0'monkey',\u00a0'foo'\u00a0=>\u00a0'bar',\u00a0'x'\u00a0=>\u00a0array\u00a0('x',\u00a0'y',\u00a0'z'));$results\u00a0=\u00a0print_r($b,\u00a0true);\u00a0\/\/\u00a0$results\u00a0now\u00a0contains\u00a0output\u00a0from\u00a0print_r?>                        See Also            ob_start() - Turn on output buffering     var_dump() - Dumps information about a variable     var_export() - Outputs or returns a parsable string representation of a variable"},{"url":"http:\/\/www.php.net\/manual\/en\/function.serialize.php","title":"serialize","description":"serialize   (PHP 4, PHP 5)serialize \u2014 Generates a storable representation of a value          Description         string serialize      ( mixed $value     )        Generates a storable representation of a value          This is useful for storing or passing PHP values around without    losing their type and structure.          To make the serialized string into a PHP value again, use    unserialize().              Parameters                    value                      The value to be serialized. serialize()        handles all types, except the resource-type.        You can even serialize() arrays that contain        references to itself. Circular references inside the array\/object you         are serializing will also be stored. Any other         reference will be lost.                      When serializing objects, PHP will attempt to call the member function        __sleep prior to serialization.         This is to allow the object to do any last minute clean-up, etc. prior         to being serialized. Likewise, when the object is restored using         unserialize() the __wakeup member function is called.              Note:                 Object&#039;s private members have the class name prepended to the member        name; protected members have a &#039;*&#039; prepended to the member name.        These prepended values have null bytes on either side.                                             Return Values       Returns a string containing a byte-stream representation of     value that can be stored anywhere.            Examples            Example #1 serialize() example       <?php\/\/\u00a0$session_data\u00a0contains\u00a0a\u00a0multi-dimensional\u00a0array\u00a0with\u00a0session\/\/\u00a0information\u00a0for\u00a0the\u00a0current\u00a0user.\u00a0\u00a0We\u00a0use\u00a0serialize()\u00a0to\u00a0store\/\/\u00a0it\u00a0in\u00a0a\u00a0database\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0request.$conn\u00a0=\u00a0odbc_connect(\"webdb\",\u00a0\"php\",\u00a0\"chicken\");$stmt\u00a0=\u00a0odbc_prepare($conn,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"UPDATE\u00a0sessions\u00a0SET\u00a0data\u00a0=\u00a0?\u00a0WHERE\u00a0id\u00a0=\u00a0?\");$sqldata\u00a0=\u00a0array\u00a0(serialize($session_data),\u00a0$_SERVER['PHP_AUTH_USER']);if\u00a0(!odbc_execute($stmt,\u00a0$sqldata))\u00a0{\u00a0\u00a0\u00a0\u00a0$stmt\u00a0=\u00a0odbc_prepare($conn,\u00a0\u00a0\u00a0\u00a0\u00a0\"INSERT\u00a0INTO\u00a0sessions\u00a0(id,\u00a0data)\u00a0VALUES(?,\u00a0?)\");\u00a0\u00a0\u00a0\u00a0if\u00a0(!odbc_execute($stmt,\u00a0$sqldata))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0Something\u00a0went\u00a0wrong..\u00a0*\/\u00a0\u00a0\u00a0\u00a0}}?>                        Changelog                                 Version        Description                                    4.0.7                 The object serialization process was fixed.                                            Notes   Note:          Note that many built-in PHP objects cannot be serialized. However, those with      this ability either implement the Serializable interface or the      magic __sleep and     __wakeup methods. If an      internal class does not fulfill any of those requirements, it cannot reliably be      serialized.             There are some historical exceptions to the above rule, where some internal objects      could be serialized without implementing the interface or exposing the methods. Notably,      the ArrayObject prior to PHP 5.2.0.                See Also            unserialize() - Creates a PHP value from a stored representation     Serializing Objects     __sleep     __wakeup"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unserialize.php","title":"unserialize","description":"unserialize   (PHP 4, PHP 5)unserialize \u2014     Creates a PHP value from a stored representation             Description       mixed unserialize     ( string $str    )        unserialize() takes a single serialized variable and    converts it back into a PHP value.              Parameters                    str                      The serialized string.                      If the variable being unserialized is an object, after successfully         reconstructing the object PHP will automatically attempt to call the        __wakeup member        function (if it exists).                      Note:          unserialize_callback_func directive                   It&#039;s possible to set a callback-function which will be called,          if an undefined class should be instantiated during unserializing.          (to prevent getting an incomplete object \"__PHP_Incomplete_Class\".)          Use your php.ini, ini_set() or .htaccess           to define &#039;unserialize_callback_func&#039;.  Everytime an undefined class          should be instantiated, it&#039;ll be called.  To disable this feature just          empty this setting.                                                      Return Values       The converted value is returned, and can be a boolean,    integer, float, string,    array or object.          In case the passed string is not unserializeable, FALSE is returned and    E_NOTICE is issued.            Changelog                                 Version        Description                                    4.2.0                 The directive unserialize_callback_func became available.                                            Examples            Example #1 unserialize() example       <?php\/\/\u00a0Here,\u00a0we\u00a0use\u00a0unserialize()\u00a0to\u00a0load\u00a0session\u00a0data\u00a0to\u00a0the\/\/\u00a0$session_data\u00a0array\u00a0from\u00a0the\u00a0string\u00a0selected\u00a0from\u00a0a\u00a0database.\/\/\u00a0This\u00a0example\u00a0complements\u00a0the\u00a0one\u00a0described\u00a0with\u00a0serialize().$conn\u00a0=\u00a0odbc_connect(\"webdb\",\u00a0\"php\",\u00a0\"chicken\");$stmt\u00a0=\u00a0odbc_prepare($conn,\u00a0\"SELECT\u00a0data\u00a0FROM\u00a0sessions\u00a0WHERE\u00a0id\u00a0=\u00a0?\");$sqldata\u00a0=\u00a0array($_SERVER['PHP_AUTH_USER']);if\u00a0(!odbc_execute($stmt,\u00a0$sqldata)\u00a0||\u00a0!odbc_fetch_into($stmt,\u00a0$tmp))\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0if\u00a0the\u00a0execute\u00a0or\u00a0fetch\u00a0fails,\u00a0initialize\u00a0to\u00a0empty\u00a0array\u00a0\u00a0\u00a0\u00a0$session_data\u00a0=\u00a0array();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0we\u00a0should\u00a0now\u00a0have\u00a0the\u00a0serialized\u00a0data\u00a0in\u00a0$tmp[0].\u00a0\u00a0\u00a0\u00a0$session_data\u00a0=\u00a0unserialize($tmp[0]);\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_array($session_data))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0something\u00a0went\u00a0wrong,\u00a0initialize\u00a0to\u00a0empty\u00a0array\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$session_data\u00a0=\u00a0array();\u00a0\u00a0\u00a0\u00a0}}?>                           Example #2 unserialize_callback_func example       <?php$serialized_object='O:1:\"a\":1:{s:5:\"value\";s:3:\"100\";}';\/\/\u00a0unserialize_callback_func\u00a0directive\u00a0available\u00a0as\u00a0of\u00a0PHP\u00a04.2.0ini_set('unserialize_callback_func',\u00a0'mycallback');\u00a0\/\/\u00a0set\u00a0your\u00a0callback_functionfunction\u00a0mycallback($classname)\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0just\u00a0include\u00a0a\u00a0file\u00a0containing\u00a0your\u00a0classdefinition\u00a0\u00a0\u00a0\u00a0\/\/\u00a0you\u00a0get\u00a0$classname\u00a0to\u00a0figure\u00a0out\u00a0which\u00a0classdefinition\u00a0is\u00a0required}?>                        Notes   Warning         FALSE is returned both in the case of an error and if unserializing     the serialized FALSE value. It is possible to catch this special case by     comparing str with     serialize(false) or by catching the issued     E_NOTICE.                See Also            serialize() - Generates a storable representation of a value     Autoloading Objects     unserialize_callback_func     __wakeup"},{"url":"http:\/\/www.php.net\/manual\/en\/function.var-dump.php","title":"var_dump","description":"var_dump   (PHP 4, PHP 5)var_dump \u2014 Dumps information about a variable         Description       void var_dump     ( mixed $expression    [, mixed $...   ] )        This function displays structured information about one or more    expressions that includes its type and value. Arrays and objects are    explored recursively with values indented to show structure.          In PHP 5 all public, private and protected properties of objects will be    returned in the output.      TipAs with anything that outputs its result directly to the browser, the output-control functions can be used to capture the output of this function, and save it in a string (for example).         Parameters                    expression                      The variable you want to dump.                                      Return Values       No value is returned.            Examples            Example #1 var_dump() example       <?php$a\u00a0=\u00a0array(1,\u00a02,\u00a0array(\"a\",\u00a0\"b\",\u00a0\"c\"));var_dump($a);?>             The above example will output:       array(3) {   [0]=>   int(1)   [1]=>   int(2)   [2]=>   array(3) {     [0]=>     string(1) \"a\"     [1]=>     string(1) \"b\"     [2]=>     string(1) \"c\"   } }             <?php$b\u00a0=\u00a03.1;$c\u00a0=\u00a0true;var_dump($b,\u00a0$c);?>             The above example will output:       float(3.1) bool(true)                      See Also            var_export() - Outputs or returns a parsable string representation of a variable     print_r() - Prints human-readable information about a variable"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unset.php","title":"unset","description":"unset   (PHP 4, PHP 5)unset \u2014 Unset a given variable          Description       void unset     ( mixed $var    [, mixed $...   ] )        unset() destroys the specified variables.           The behavior of unset() inside of a function    can vary depending on what type of variable you are attempting to    destroy.          If a globalized variable is unset() inside of    a function, only the local variable is destroyed.  The variable    in the calling environment will retain the same value as before    unset() was called.           <?phpfunction\u00a0destroy_foo()\u00a0{\u00a0\u00a0\u00a0\u00a0global\u00a0$foo;\u00a0\u00a0\u00a0\u00a0unset($foo);}$foo\u00a0=\u00a0'bar';destroy_foo();echo\u00a0$foo;?>                  The above example will output:              bar                    To unset() a global variable    inside of a function, then use    the $GLOBALS array to do so:           <?phpfunction\u00a0foo()\u00a0{\u00a0\u00a0\u00a0\u00a0unset($GLOBALS['bar']);}$bar\u00a0=\u00a0\"something\";foo();?>                      If a variable that is PASSED BY REFERENCE is    unset() inside of a function, only the local    variable is destroyed.  The variable in the calling environment    will retain the same value as before unset()    was called.           <?phpfunction\u00a0foo(&$bar)\u00a0{\u00a0\u00a0\u00a0\u00a0unset($bar);\u00a0\u00a0\u00a0\u00a0$bar\u00a0=\u00a0\"blah\";}$bar\u00a0=\u00a0'something';echo\u00a0\"$bar\\n\";foo($bar);echo\u00a0\"$bar\\n\";?>                   The above example will output:              something something                    If a static variable is unset() inside of a    function, unset() destroys the variable only in the    context of the rest of a function. Following calls will restore the    previous value of a variable.           <?phpfunction\u00a0foo(){\u00a0\u00a0\u00a0\u00a0static\u00a0$bar;\u00a0\u00a0\u00a0\u00a0$bar++;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Before\u00a0unset:\u00a0$bar,\u00a0\";\u00a0\u00a0\u00a0\u00a0unset($bar);\u00a0\u00a0\u00a0\u00a0$bar\u00a0=\u00a023;\u00a0\u00a0\u00a0\u00a0echo\u00a0\"after\u00a0unset:\u00a0$bar\\n\";}foo();foo();foo();?>                   The above example will output:              Before unset: 1, after unset: 23 Before unset: 2, after unset: 23 Before unset: 3, after unset: 23                        Parameters                    var                      The variable to be unset.                                ...                      Another variable ...                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    4.0.1                 Added support for multiple arguments.                                            Examples            Example #1 unset() example       <?php\/\/\u00a0destroy\u00a0a\u00a0single\u00a0variableunset($foo);\/\/\u00a0destroy\u00a0a\u00a0single\u00a0element\u00a0of\u00a0an\u00a0arrayunset($bar['quux']);\/\/\u00a0destroy\u00a0more\u00a0than\u00a0one\u00a0variableunset($foo1,\u00a0$foo2,\u00a0$foo3);?>                     Example #2 Using (unset) casting       <?php$name\u00a0=\u00a0'Felipe';var_dump((unset)\u00a0$name);?>                        Notes   Note: Because this is a language construct and not a function, it cannot be called using variable functions    Note:          It is possible to unset even object properties visible in current context.          Note:          It is not possible to unset $this inside an object     method since PHP 5.          Note:          When using unset() on inaccessible object properties,     the __unset     overloading method will be called, if declared.                 See Also            isset() - Determine if a variable is set and is not NULL     empty() - Determine whether a variable is empty     __unset     array_splice() - Remove a portion of the array and replace it with something else"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-decode-request.php","title":"xmlrpc_decode_request","description":"xmlrpc_decode_request   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_decode_request \u2014 Decodes XML into native PHP types        Description       mixed xmlrpc_decode_request     ( string $xml    , string &$method    [, string $encoding   ] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-encode.php","title":"xmlrpc_encode","description":"xmlrpc_encode   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_encode \u2014 Generates XML for a PHP value        Description       string xmlrpc_encode     ( mixed $value    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-get-type.php","title":"xmlrpc_get_type","description":"xmlrpc_get_type   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_get_type \u2014 Gets xmlrpc type for a PHP value        Description       string xmlrpc_get_type     ( mixed $value    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.        This function is especially useful for base64 and datetime strings.            Parameters                    value                      PHP value                                      Return Values       Returns the XML-RPC type.            Examples            Example #1 XML-RPC type example       <?phpecho\u00a0xmlrpc_get_type(null)\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0base64echo\u00a0xmlrpc_get_type(false)\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0booleanecho\u00a0xmlrpc_get_type(1)\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0intecho\u00a0xmlrpc_get_type(1.0)\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0doubleecho\u00a0xmlrpc_get_type(\"\")\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0stringecho\u00a0xmlrpc_get_type(array())\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0arrayecho\u00a0xmlrpc_get_type(new\u00a0stdClass)\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0arrayecho\u00a0xmlrpc_get_type(STDIN)\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a0int?>                        See Also            xmlrpc_set_type() - Sets xmlrpc type, base64 or datetime, for a PHP string value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-encode-request.php","title":"xmlrpc_encode_request","description":"xmlrpc_encode_request   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_encode_request \u2014 Generates XML for a method request        Description       string xmlrpc_encode_request     ( string $method    , mixed $params    [, array $output_options   ] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    method                      Name of the method to call.                                params                      Method parameters compatible with method signature.                                output_options                      Array specifying output options may contain (default values are        emphasised):                 output_type: php, xml         verbosity: no_white_space, newlines_only, pretty         escaping: cdata, non-ascii, non-print, markup           (may be a string with one value or an array with multiple values)         version: simple, xmlrpc, soap 1.1, auto         encoding: iso-8859-1, other character set supported by iconv                                              Return Values       Returns a string containing the XML representation of the request.            Examples            Example #1 XMLRPC client functions example       <?php$request\u00a0=\u00a0xmlrpc_encode_request(\"method\",\u00a0array(1,\u00a02,\u00a03));$context\u00a0=\u00a0stream_context_create(array('http'\u00a0=>\u00a0array(\u00a0\u00a0\u00a0\u00a0'method'\u00a0=>\u00a0\"POST\",\u00a0\u00a0\u00a0\u00a0'header'\u00a0=>\u00a0\"Content-Type:\u00a0text\/xml\",\u00a0\u00a0\u00a0\u00a0'content'\u00a0=>\u00a0$request)));$file\u00a0=\u00a0file_get_contents(\"http:\/\/www.example.com\/xmlrpc\",\u00a0false,\u00a0$context);$response\u00a0=\u00a0xmlrpc_decode($file);if\u00a0($response\u00a0&&\u00a0xmlrpc_is_fault($response))\u00a0{\u00a0\u00a0\u00a0\u00a0trigger_error(\"xmlrpc:\u00a0$response[faultString]\u00a0($response[faultCode])\");}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0print_r($response);}?>                        See Also            stream_context_create() - Create a streams context     file_get_contents() - Reads entire file into a string     xmlrpc_decode() - Decodes XML into native PHP types"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-decode.php","title":"xmlrpc_decode","description":"xmlrpc_decode   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_decode \u2014 Decodes XML into native PHP types        Description       mixed xmlrpc_decode     ( string $xml    [, string $encoding = \"iso-8859-1\"   ] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    xml                      XML response returned by XMLRPC method.                                encoding                      Input encoding supported by iconv.                                      Return Values       Returns either an array, or an integer, or a string, or a boolean according    to the response returned by the XMLRPC method.            Examples       See example by xmlrpc_encode_request().            See Also            xmlrpc_encode_request() - Generates XML for a method request     xmlrpc_is_fault() - Determines if an array value represents an XMLRPC fault"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-is-fault.php","title":"xmlrpc_is_fault","description":"xmlrpc_is_fault   (PHP 4 >= 4.3.0, PHP 5)xmlrpc_is_fault \u2014 Determines if an array value represents an XMLRPC fault        Description       bool xmlrpc_is_fault     ( array $arg    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    arg                      Array returned by xmlrpc_decode().                                      Return Values       Returns TRUE if the argument means fault, FALSE otherwise. Fault    description is available in $arg[\"faultString\"], fault    code is in $arg[\"faultCode\"].            Examples       See example by xmlrpc_encode_request().            See Also            xmlrpc_decode() - Decodes XML into native PHP types"},{"url":"http:\/\/www.php.net\/manual\/en\/function.var-export.php","title":"var_export","description":"var_export   (PHP 4 >= 4.2.0, PHP 5)var_export \u2014 Outputs or returns a parsable string representation of a variable         Description       mixed var_export     ( mixed $expression    [, bool $return = false   ] )        var_export() gets structured information about the     given variable. It is similar to var_dump()    with one exception: the returned representation is valid PHP code.            Parameters                    expression                      The variable you want to export.                                return                      If used and set to TRUE, var_export() will return        the variable representation instead of outputing it.                                     Return Values       Returns the variable representation when the return     parameter is used and evaluates to TRUE. Otherwise, this function will    return NULL.            Notes   Note: When the return parameter is used, this function uses internal output buffering so it can not be used inside an ob_start() callback function.         Changelog                                 Version        Description                                    5.1.0                 Possibility to export classes and arrays containing classes using the         __set_state magic         method.                                             Examples            Example #1 var_export() Examples       <?php$a\u00a0=\u00a0array\u00a0(1,\u00a02,\u00a0array\u00a0(\"a\",\u00a0\"b\",\u00a0\"c\"));var_export($a);?>             The above example will output:       array (   0 => 1,   1 => 2,   2 =>    array (     0 => &#039;a&#039;,     1 => &#039;b&#039;,     2 => &#039;c&#039;,   ), )             <?php$b\u00a0=\u00a03.1;$v\u00a0=\u00a0var_export($b,\u00a0true);echo\u00a0$v;?>             The above example will output:       3.1                         Example #2 Exporting classes since PHP 5.1.0       <?phpclass\u00a0A\u00a0{\u00a0public\u00a0$var;\u00a0}$a\u00a0=\u00a0new\u00a0A;$a->var\u00a0=\u00a05;var_export($a);?>             The above example will output:       A::__set_state(array(    &#039;var&#039; => 5, ))                         Example #3 Using __set_state (since PHP 5.1.0)       <?phpclass\u00a0A{\u00a0\u00a0\u00a0\u00a0public\u00a0$var1;\u00a0\u00a0\u00a0\u00a0public\u00a0$var2;\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0__set_state($an_array)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$obj\u00a0=\u00a0new\u00a0A;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$obj->var1\u00a0=\u00a0$an_array['var1'];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$obj->var2\u00a0=\u00a0$an_array['var2'];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$obj;\u00a0\u00a0\u00a0\u00a0}}$a\u00a0=\u00a0new\u00a0A;$a->var1\u00a0=\u00a05;$a->var2\u00a0=\u00a0'foo';eval('$b\u00a0=\u00a0'\u00a0.\u00a0var_export($a,\u00a0true)\u00a0.\u00a0';');\u00a0\/\/\u00a0$b\u00a0=\u00a0A::__set_state(array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\u00a0\u00a0\u00a0'var1'\u00a0=>\u00a05,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\u00a0\u00a0\u00a0'var2'\u00a0=>\u00a0'foo',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0));var_dump($b);?>             The above example will output:       object(A)#2 (2) {   [\"var1\"]=>   int(5)   [\"var2\"]=>   string(3) \"foo\" }                      Notes   Note:          Variables of type resource couldn&#039;t be exported by this     function.          Note:          var_export() does not handle circular references as     it would be close to impossible to generate parsable PHP code for that.     If you want to do something with the full representation of an array     or object, use serialize().                See Also            print_r() - Prints human-readable information about a variable     serialize() - Generates a storable representation of a value     var_dump() - Dumps information about a variable"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-parse-method-descriptions.php","title":"xmlrpc_parse_method_descriptions","description":"xmlrpc_parse_method_descriptions   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_parse_method_descriptions \u2014 Decodes XML into a list of method descriptions        Description       array xmlrpc_parse_method_descriptions     ( string $xml    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-add-introspection-data.php","title":"xmlrpc_server_add_introspection_data","description":"xmlrpc_server_add_introspection_data   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_server_add_introspection_data \u2014 Adds introspection documentation        Description       int xmlrpc_server_add_introspection_data     ( resource $server    , array $desc    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-call-method.php","title":"xmlrpc_server_call_method","description":"xmlrpc_server_call_method   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_server_call_method \u2014 Parses XML requests and call methods        Description       string xmlrpc_server_call_method     ( resource $server    , string $xml    , mixed $user_data    [, array $output_options   ] )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-create.php","title":"xmlrpc_server_create","description":"xmlrpc_server_create   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_server_create \u2014 Creates an xmlrpc server        Description       resource xmlrpc_server_create     ( void    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-destroy.php","title":"xmlrpc_server_destroy","description":"xmlrpc_server_destroy   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_server_destroy \u2014 Destroys server resources        Description       int xmlrpc_server_destroy     ( resource $server    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-register-introspection-callback.php","title":"xmlrpc_server_register_introspection_callback","description":"xmlrpc_server_register_introspection_callback   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_server_register_introspection_callback \u2014 Register a PHP function to generate documentation        Description       bool xmlrpc_server_register_introspection_callback     ( resource $server    , string $function    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-register-method.php","title":"xmlrpc_server_register_method","description":"xmlrpc_server_register_method   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_server_register_method \u2014 Register a PHP function to resource method matching method_name        Description       bool xmlrpc_server_register_method     ( resource $server    , string $method_name    , string $function    )    WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.    WarningThis function is currently not documented; only its argument list is available."},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-set-type.php","title":"xmlrpc_set_type","description":"xmlrpc_set_type   (PHP 4 >= 4.1.0, PHP 5)xmlrpc_set_type \u2014 Sets xmlrpc type, base64 or datetime, for a PHP string value        Description       bool xmlrpc_set_type     ( string &$value    , string $type    )        Sets xmlrpc type, base64 or datetime, for a PHP string value.      WarningThis function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.          Parameters                    value                      Value to set the type                                type                      &#039;base64&#039; or &#039;datetime&#039;                                     Return Values       Returns TRUE on success or FALSE on failure.    If successful, value is converted to an object.            Examples            Example #1 A xmlrpc_set_type() example                 <?php$params\u00a0=\u00a0date(\"Ymd\\TH:i:s\",\u00a0time());xmlrpc_set_type($params,\u00a0'datetime');echo\u00a0xmlrpc_encode($params);?>             The above example will output something similar to:       <?xml version=\"1.0\" encoding=\"utf-8\"?> <params> <param>  <value>   <dateTime.iso8601>20090322T23:43:03<\/dateTime.iso8601>  <\/value> <\/param> <\/params>                      Errors\/Exceptions       Issues E_WARNING with type unsupported by XMLRPC."},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-emit-file.php","title":"yaml_emit_file","description":"yaml_emit_file   (PECL yaml >= 0.5.0)yaml_emit_file \u2014 Send the YAML representation of a value to a file         Description       bool yaml_emit_file     ( string $filename    , mixed $data    [, int $encoding = YAML_ANY_ENCODING    [, int $linebreak = YAML_ANY_BREAK   ]] )        Generate a YAML representation of the provided data    in the filename.            Parameters                    filename                      Path to the file.                                data                      The data being encoded. Can be any type except        a resource.                                encoding                      Output character encoding chosen from        YAML_ANY_ENCODING,        YAML_UTF8_ENCODING,        YAML_UTF16LE_ENCODING,        YAML_UTF16BE_ENCODING. Defaults to        YAML_ANY_ENCODING.                                linebreak                      Output linebreak style chosen from        YAML_ANY_BREAK,        YAML_CR_BREAK,        YAML_LN_BREAK,        YAML_CRLN_BREAK. Defaults to        YAML_ANY_BREAK.                                     Return Values      Returns TRUE on success.             See Also            yaml_emit() - Returns the YAML representation of a value     yaml_parse() - Parse a YAML stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-emit.php","title":"yaml_emit","description":"yaml_emit   (PECL yaml >= 0.5.0)yaml_emit \u2014 Returns the YAML representation of a value         Description       string yaml_emit     ( mixed $data    [, int $encoding = YAML_ANY_ENCODING    [, int $linebreak = YAML_ANY_BREAK   ]] )        Generate a YAML representation of the provided data.            Parameters                    data                      The data being encoded. Can be any type except        a resource.                                encoding                      Output character encoding chosen from        YAML_ANY_ENCODING,        YAML_UTF8_ENCODING,        YAML_UTF16LE_ENCODING,        YAML_UTF16BE_ENCODING. Defaults to        YAML_ANY_ENCODING.                                linebreak                      Output linebreak style chosen from        YAML_ANY_BREAK,        YAML_CR_BREAK,        YAML_LN_BREAK,        YAML_CRLN_BREAK. Defaults to        YAML_ANY_BREAK.                                     Return Values       Returns a YAML encoded string on success.            Examples            Example #1 yaml_emit() example       <?php$addr\u00a0=\u00a0array(\u00a0\u00a0\u00a0\u00a0\"given\"\u00a0=>\u00a0\"Chris\",\u00a0\u00a0\u00a0\u00a0\"family\"=>\u00a0\"Dumars\",\u00a0\u00a0\u00a0\u00a0\"address\"=>\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"lines\"=>\u00a0\"458\u00a0Walkman\u00a0Dr.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Suite\u00a0#292\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"city\"=>\u00a0\"Royal\u00a0Oak\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"state\"=>\u00a0\"MI\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"postal\"=>\u00a048046,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0);$invoice\u00a0=\u00a0array\u00a0(\u00a0\u00a0\u00a0\u00a0\"invoice\"=>\u00a034843,\u00a0\u00a0\u00a0\u00a0\"date\"=>\u00a0980208000,\u00a0\u00a0\u00a0\u00a0\"bill-to\"=>\u00a0$addr,\u00a0\u00a0\u00a0\u00a0\"ship-to\"=>\u00a0$addr,\u00a0\u00a0\u00a0\u00a0\"product\"=>\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"sku\"=>\u00a0\"BL394D\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"quantity\"=>\u00a04,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"description\"=>\u00a0\"Basketball\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"price\"=>\u00a0450,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"sku\"=>\u00a0\"BL4438H\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"quantity\"=>\u00a01,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"description\"=>\u00a0\"Super\u00a0Hoop\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"price\"=>\u00a02392,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0\u00a0\u00a0\"tax\"=>\u00a0251.42,\u00a0\u00a0\u00a0\u00a0\"total\"=>\u00a04443.52,\u00a0\u00a0\u00a0\u00a0\"comments\"=>\u00a0\"Late\u00a0afternoon\u00a0is\u00a0best.\u00a0Backup\u00a0contact\u00a0is\u00a0Nancy\u00a0Billsmer\u00a0@\u00a0338-4338.\",\u00a0\u00a0);var_dump(yaml_emit($invoice));?>             The above example will output something similar to:       string(628) \"--- invoice: 34843 date: 980208000 bill-to:   given: Chris   family: Dumars   address:     lines: |-       458 Walkman Dr.               Suite #292     city: Royal Oak     state: MI     postal: 48046 ship-to:   given: Chris   family: Dumars   address:     lines: |-       458 Walkman Dr.               Suite #292     city: Royal Oak     state: MI     postal: 48046 product: - sku: BL394D   quantity: 4   description: Basketball   price: 450 - sku: BL4438H   quantity: 1   description: Super Hoop   price: 2392 tax: 251.420000 total: 4443.520000 comments: Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338. ... \"                      See Also            yaml_emit_file() - Send the YAML representation of a value to a file     yaml_parse() - Parse a YAML stream"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-parse-file.php","title":"yaml_parse_file","description":"yaml_parse_file   (PECL yaml >= 0.4.0)yaml_parse_file \u2014 Parse a YAML stream from a file         Description       mixed yaml_parse_file     ( string $filename    [, int $pos = 0    [, int &$ndocs    [, array $callbacks   ]]] )        Convert all or part of a YAML document stream read from a file to a PHP variable.            Parameters                    filename                      Path to the file.                                pos                      Document to extract from stream (-1 for all        documents, 0 for first document, ...).                                ndocs                      If ndocs is provided, then it is filled with the        number of documents found in stream.                                callbacks                      Content handlers for YAML nodes. Associative array of YAML        tag => callback mappings.                                     Return Values       Returns the value encoded in input in appropriate    PHP type or FALSE on failure. If pos is -1 an    array will be returned with one entry for each document found    in the stream.            See Also            yaml_parse() - Parse a YAML stream     yaml_parse_url() - Parse a Yaml stream from a URL     yaml_emit() - Returns the YAML representation of a value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-parse-url.php","title":"yaml_parse_url","description":"yaml_parse_url   (PECL yaml >= 0.4.0)yaml_parse_url \u2014 Parse a Yaml stream from a URL         Description       mixed yaml_parse_url     ( string $url    [, int $pos = 0    [, int &$ndocs    [, array $callbacks   ]]] )        Convert all or part of a YAML document stream read from a URL to a PHP variable.            Parameters                    url                      url should be of the form \"scheme:\/\/...\". PHP        will search for a protocol handler (also known as a wrapper) for that        scheme. If no wrappers for that protocol are registered, PHP will emit        a notice to help you track potential problems in your script and then        continue as though filename specifies a regular file.                                pos                      Document to extract from stream (-1 for all        documents, 0 for first document, ...).                                ndocs                      If ndocs is provided, then it is filled with the        number of documents found in stream.                                callbacks                      Content handlers for YAML nodes. Associative array of YAML        tag => callback mappings.                                     Return Values       Returns the value encoded in input in appropriate    PHP type or FALSE on failure. If pos is -1 an    array will be returned with one entry for each document found    in the stream.            See Also            yaml_parse() - Parse a YAML stream     yaml_parse_file() - Parse a YAML stream from a file     yaml_emit() - Returns the YAML representation of a value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-parse.php","title":"yaml_parse","description":"yaml_parse   (PECL yaml >= 0.4.0)yaml_parse \u2014 Parse a YAML stream         Description       mixed yaml_parse     ( string $input    [, int $pos = 0    [, int &$ndocs    [, array $callbacks   ]]] )        Convert all or part of a YAML document stream to a PHP variable.            Parameters                    input                      The string to parse as a YAML document stream.                                pos                      Document to extract from stream (-1 for all        documents, 0 for first document, ...).                                ndocs                      If ndocs is provided, then it is filled with the        number of documents found in stream.                                callbacks                      Content handlers for YAML nodes. Associative array of YAML        tag => callback mappings.                                     Return Values       Returns the value encoded in input in appropriate    PHP type or FALSE on failure. If pos is -1 an    array will be returned with one entry for each document found    in the stream.            Examples            Example #1 yaml_parse() example       <?php$yaml\u00a0=\u00a0<<<EOD---invoice:\u00a034843date:\u00a0\"2001-01-23\"bill-to:\u00a0&id001\u00a0\u00a0given:\u00a0Chris\u00a0\u00a0family:\u00a0Dumars\u00a0\u00a0address:\u00a0\u00a0\u00a0\u00a0lines:\u00a0|-\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0458\u00a0Walkman\u00a0Dr.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Suite\u00a0#292\u00a0\u00a0\u00a0\u00a0city:\u00a0Royal\u00a0Oak\u00a0\u00a0\u00a0\u00a0state:\u00a0MI\u00a0\u00a0\u00a0\u00a0postal:\u00a048046ship-to:\u00a0*id001product:-\u00a0sku:\u00a0BL394D\u00a0\u00a0quantity:\u00a04\u00a0\u00a0description:\u00a0Basketball\u00a0\u00a0price:\u00a0450-\u00a0sku:\u00a0BL4438H\u00a0\u00a0quantity:\u00a01\u00a0\u00a0description:\u00a0Super\u00a0Hoop\u00a0\u00a0price:\u00a02392tax:\u00a0251.420000total:\u00a04443.520000comments:\u00a0Late\u00a0afternoon\u00a0is\u00a0best.\u00a0Backup\u00a0contact\u00a0is\u00a0Nancy\u00a0Billsmer\u00a0@\u00a0338-4338....EOD;$parsed\u00a0=\u00a0yaml_parse($yaml);var_dump($parsed);?>             The above example will output something similar to:       array(8) {   [\"invoice\"]=>   int(34843)   [\"date\"]=>   string(10) \"2001-01-23\"   [\"bill-to\"]=>   &array(3) {     [\"given\"]=>     string(5) \"Chris\"     [\"family\"]=>     string(6) \"Dumars\"     [\"address\"]=>     array(4) {       [\"lines\"]=>       string(34) \"458 Walkman Dr.         Suite #292\"       [\"city\"]=>       string(9) \"Royal Oak\"       [\"state\"]=>       string(2) \"MI\"       [\"postal\"]=>       int(48046)     }   }   [\"ship-to\"]=>   &array(3) {     [\"given\"]=>     string(5) \"Chris\"     [\"family\"]=>     string(6) \"Dumars\"     [\"address\"]=>     array(4) {       [\"lines\"]=>       string(34) \"458 Walkman Dr.         Suite #292\"       [\"city\"]=>       string(9) \"Royal Oak\"       [\"state\"]=>       string(2) \"MI\"       [\"postal\"]=>       int(48046)     }   }   [\"product\"]=>   array(2) {     [0]=>     array(4) {       [\"sku\"]=>       string(6) \"BL394D\"       [\"quantity\"]=>       int(4)       [\"description\"]=>       string(10) \"Basketball\"       [\"price\"]=>       int(450)     }     [1]=>     array(4) {       [\"sku\"]=>       string(7) \"BL4438H\"       [\"quantity\"]=>       int(1)       [\"description\"]=>       string(10) \"Super Hoop\"       [\"price\"]=>       int(2392)     }   }   [\"tax\"]=>   float(251.42)   [\"total\"]=>   float(4443.52)   [\"comments\"]=>   string(68) \"Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\" }                      See Also            yaml_parse_file() - Parse a YAML stream from a file     yaml_parse_url() - Parse a Yaml stream from a URL     yaml_emit() - Returns the YAML representation of a value"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzclose.php","title":"gzclose","description":"gzclose   (PHP 4, PHP 5)gzclose \u2014 Close an open gz-file pointer        Description       bool gzclose     ( resource $zp    )        Closes the given gz-file pointer.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples            Example #1 gzclose() example       <?php$gz\u00a0=\u00a0gzopen('somefile.gz','w9');gzputs\u00a0($gz,\u00a0'I\u00a0was\u00a0added\u00a0to\u00a0somefile.gz');gzclose($gz);?>                       See Also            gzopen() - Open gz-file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzdeflate.php","title":"gzdeflate","description":"gzdeflate   (PHP 4 >= 4.0.4, PHP 5)gzdeflate \u2014 Deflate a string        Description       string gzdeflate     ( string $data    [, int $level = -1   ] )        This function compress the given string using the DEFLATE    data format.          For details on the DEFLATE compression algorithm see the document    \"\u00bb\u00a0DEFLATE Compressed Data Format    Specification version 1.3\" (RFC 1951).           Parameters                    data                      The data to deflate.                                level                      The level of compression. Can be given as 0 for no compression up to 9        for maximum compression. If not given, the default compression level will        be the default compression level of the zlib library.                                    Return Values       The deflated string or FALSE if an error occurred.           Examples            Example #1 gzdeflate() example       <?php$compressed\u00a0=\u00a0gzdeflate('Compress\u00a0me',\u00a09);echo\u00a0$compressed;?>                       See Also            gzinflate() - Inflate a deflated string     gzcompress() - Compress a string     gzuncompress() - Uncompress a compressed string     gzencode() - Create a gzip compressed string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzcompress.php","title":"gzcompress","description":"gzcompress   (PHP 4 >= 4.0.1, PHP 5)gzcompress \u2014 Compress a string        Description       string gzcompress     ( string $data    [, int $level = -1   ] )        This function compress the given string using the ZLIB    data format.          For details on the ZLIB compression algorithm see the document    \"\u00bb\u00a0ZLIB Compressed Data Format    Specification version 3.3\" (RFC 1950).      Note:          This is not the same as gzip compression,     which includes some header data. See gzencode()     for gzip compression.               Parameters                    data                      The data to compress.                                level                      The level of compression. Can be given as 0 for no compression up to 9        for maximum compression.                                    Return Values       The compressed string or FALSE if an error occurred.           Examples            Example #1 gzcompress() example       <?php$compressed\u00a0=\u00a0gzcompress('Compress\u00a0me',\u00a09);echo\u00a0$compressed;?>                       See Also            gzdeflate() - Deflate a string     gzinflate() - Inflate a deflated string     gzuncompress() - Uncompress a compressed string     gzencode() - Create a gzip compressed string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzeof.php","title":"gzeof","description":"gzeof   (PHP 4, PHP 5)gzeof \u2014 Test for EOF on a gz-file pointer        Description       int gzeof     ( resource $zp    )        Tests the given GZ file pointer for EOF.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                    Return Values        Returns TRUE if the gz-file pointer is at EOF or an error occurs;    otherwise returns FALSE.           Examples            Example #1 gzeof() example       <?php$gz\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');while\u00a0(!gzeof($gz))\u00a0{\u00a0\u00a0echo\u00a0gzgetc($gz);}gzclose($gz);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzdecode.php","title":"gzdecode","description":"gzdecode   (No version information available, might only be in SVN)gzdecode \u2014 Decodes a gzip compressed string        Description       string gzdecode     ( string $data    [, int $length   ] )           This function returns a decoded version of the input    data.           Parameters                    data                      The data to decode, encoded by gzencode().                                length                      The maximum length of data to decode.                                    Return Values       The decoded string, or FALSE if an error occurred.            See Also            gzencode() - Create a gzip compressed string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzencode.php","title":"gzencode","description":"gzencode   (PHP 4 >= 4.0.4, PHP 5)gzencode \u2014 Create a gzip compressed string         Description       string gzencode     ( string $data    [, int $level = -1    [, int $encoding_mode = FORCE_GZIP   ]] )           This function returns a compressed version of the input    data compatible with the output of the    gzip program.          For more information on the GZIP file format, see the document:    \u00bb\u00a0GZIP file format specification    version 4.3 (RFC 1952).            Parameters                    data                      The data to encode.                                level                      The level of compression. Can be given as 0 for no compression up to 9        for maximum compression. If not given, the default compression level will        be the default compression level of the zlib library.                                encoding_mode                      The encoding mode. Can be FORCE_GZIP (the default)        or FORCE_DEFLATE.                       If you use FORCE_DEFLATE, you get a standard zlib        deflated string (inclusive zlib headers) after the gzip file header but        without the trailing crc32 checksum.                                     Return Values       The encoded string, or FALSE if an error occurred.            Changelog                                 Version        Description                                    4.2.0                 The encoding_mode parameter was added                                            Examples       The resulting data contains the appropriate headers and data    structure to make a standard .gz file, e.g.:         Example #1 Creating a gzip file       <?php$data\u00a0=\u00a0implode(\"\",\u00a0file(\"bigfile.txt\"));$gzdata\u00a0=\u00a0gzencode($data,\u00a09);$fp\u00a0=\u00a0fopen(\"bigfile.txt.gz\",\u00a0\"w\");fwrite($fp,\u00a0$gzdata);fclose($fp);?>                        See Also            gzdecode() - Decodes a gzip compressed string     gzdeflate() - Deflate a string     gzinflate() - Inflate a deflated string     gzuncompress() - Uncompress a compressed string     gzcompress() - Compress a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzfile.php","title":"gzfile","description":"gzfile    (PHP 4, PHP 5)gzfile \u2014 Read entire gz-file into an array        Description       array gzfile     ( string $filename    [, int $use_include_path = 0   ] )         This function is identical to readgzfile(), except that    it returns the file in an array.           Parameters                    filename                      The file name.                                use_include_path                      You can set this optional parameter to 1, if you        want to search for the file in the include_path too.                                    Return Values       An array containing the file, one line per cell.           Examples            Example #1 gzfile() example       <?php$lines\u00a0=\u00a0gzfile('somefile.gz');foreach\u00a0($lines\u00a0as\u00a0$line)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$line;}?>                       See Also            readgzfile() - Output a gz-file     gzopen() - Open gz-file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzgetc.php","title":"gzgetc","description":"gzgetc   (PHP 4, PHP 5)gzgetc \u2014 Get character from gz-file pointer        Description       string gzgetc     ( resource $zp    )        Returns a string containing a single (uncompressed) character    read from the given gz-file pointer.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                    Return Values       The uncompressed character or FALSE on EOF (unlike gzeof()).           Examples            Example #1 gzgetc() example       <?php$gz\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');while\u00a0(!gzeof($gz))\u00a0{\u00a0\u00a0echo\u00a0gzgetc($gz);}gzclose($gz);?>                       See Also            gzopen() - Open gz-file     gzgets() - Get line from file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzgetss.php","title":"gzgetss","description":"gzgetss   (PHP 4, PHP 5)gzgetss \u2014     Get line from gz-file pointer and strip HTML tags           Description       string gzgetss     ( resource $zp    , int $length    [, string $allowable_tags   ] )        Identical to gzgets(), except that    gzgetss() attempts to strip any HTML and PHP    tags from the text it reads.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                length                      The length of data to get.                                allowable_tags                      You can use this optional parameter to specify tags which should not         be stripped.                                    Return Values       The uncompressed and striped string, or FALSE on error.           Examples            Example #1 gzgetss() example       <?php$handle\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');while\u00a0(!gzeof($handle))\u00a0{\u00a0\u00a0\u00a0$buffer\u00a0=\u00a0gzgetss($handle,\u00a04096);\u00a0\u00a0\u00a0echo\u00a0$buffer;}gzclose($handle);?>                       See Also            gzopen() - Open gz-file     gzgets() - Get line from file pointer     strip_tags() - Strip HTML and PHP tags from a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzgets.php","title":"gzgets","description":"gzgets   (PHP 4, PHP 5)gzgets \u2014 Get line from file pointer        Description       string gzgets     ( resource $zp    , int $length    )        Gets a (uncompressed) string of up to length - 1 bytes read from the given    file pointer. Reading ends when length - 1 bytes have been read, on a     newline, or on EOF (whichever comes first).           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                length                      The length of data to get.                                    Return Values       The uncompressed string, or FALSE on error.           Examples            Example #1 gzgets() example       <?php$handle\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');while\u00a0(!gzeof($handle))\u00a0{\u00a0\u00a0\u00a0$buffer\u00a0=\u00a0gzgets($handle,\u00a04096);\u00a0\u00a0\u00a0echo\u00a0$buffer;}gzclose($handle);?>                       See Also            gzopen() - Open gz-file     gzgetc() - Get character from gz-file pointer     gzwrite() - Binary-safe gz-file write"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzopen.php","title":"gzopen","description":"gzopen   (PHP 4, PHP 5)gzopen \u2014 Open gz-file        Description       resource gzopen     ( string $filename    , string $mode    [, int $use_include_path = 0   ] )        Opens a gzip (.gz) file for reading or writing.           gzopen() can be used to read a file which is    not in gzip format; in this case gzread() will    directly read from the file without decompression.           Parameters                    filename                      The file name.                                mode                      As in fopen() (rb or         wb) but can also include a compression level         (wb9) or a strategy: f for        filtered data as in wb6f, h for        Huffman only compression as in wb1h.        (See the description of deflateInit2        in zlib.h for         more information about the strategy parameter.)                                use_include_path                      You can set this optional parameter to 1, if you        want to search for the file in the include_path too.                                    Return Values       Returns a file pointer to the file opened, after that, everything you read    from this file descriptor will be transparently decompressed and what you     write gets compressed.          If the open fails, the function returns FALSE.           Examples            Example #1 gzopen() Example       <?php$fp\u00a0=\u00a0gzopen(\"\/tmp\/file.gz\",\u00a0\"r\");?>                       See Also            gzclose() - Close an open gz-file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzinflate.php","title":"gzinflate","description":"gzinflate   (PHP 4 >= 4.0.4, PHP 5)gzinflate \u2014 Inflate a deflated string        Description       string gzinflate     ( string $data    [, int $length = 0   ] )           This function inflate a deflated string.             Parameters                    data                      The data compressed by gzdeflate().                                length                      The maximum length of data to decode.                                    Return Values       The original uncompressed data or FALSE on error.          The function will return an error if the uncompressed data is more than    32768 times the length of the compressed input data     or more than the optional parameter length.           Examples            Example #1 gzinflate() example       <?php$compressed\u00a0\u00a0\u00a0=\u00a0gzdeflate('Compress\u00a0me',\u00a09);$uncompressed\u00a0=\u00a0gzinflate($compressed);echo\u00a0$uncompressed;?>                       See Also            gzdeflate() - Deflate a string     gzcompress() - Compress a string     gzuncompress() - Uncompress a compressed string     gzencode() - Create a gzip compressed string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzpassthru.php","title":"gzpassthru","description":"gzpassthru   (PHP 4, PHP 5)gzpassthru \u2014     Output all remaining data on a gz-file pointer           Description       int gzpassthru     ( resource $zp    )        Reads to EOF on the given gz-file pointer from the current position and    writes the (uncompressed) results to standard output.      Note:          You may need to call gzrewind() to reset the file     pointer to the beginning of the file if you have already written data      to it.           Tip         If you just want to dump the contents of a file to the output buffer,      without first modifying it or seeking to a particular offset, you may      want to use the readgzfile() function, which saves      you the gzopen() call.               Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                    Return Values       The number of uncompressed characters read from gz    and passed through to the input, or FALSE on error.           Examples            Example #1 gzpassthru() example       <?php$fp\u00a0=\u00a0gzopen('file.gz',\u00a0'r');gzpassthru($fp);gzclose($fp);?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzputs.php","title":"gzputs","description":"gzputs   (PHP 4, PHP 5)gzputs \u2014 Alias of gzwrite()         Description       This function is an alias of:     gzwrite()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzrewind.php","title":"gzrewind","description":"gzrewind   (PHP 4, PHP 5)gzrewind \u2014 Rewind the position of a gz-file pointer        Description       bool gzrewind     ( resource $zp    )            Sets the file position indicator of the given gz-file pointer to the     beginning of the file stream.            Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            gzseek() - Seek on a gz-file pointer     gztell() - Tell gz-file pointer read\/write position"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzseek.php","title":"gzseek","description":"gzseek   (PHP 4, PHP 5)gzseek \u2014 Seek on a gz-file pointer        Description       int gzseek     ( resource $zp    , int $offset    [, int $whence = SEEK_SET   ] )        Sets the file position indicator for the given file pointer to the    given offset byte into the file stream. Equivalent to calling (in C)    gzseek(zp, offset, SEEK_SET).          If the file is opened for reading, this function is emulated but    can be extremely slow. If the file is opened for writing, only    forward seeks are supported; gzseek() then compresses    a sequence of zeroes up to the new starting position.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                offset                      The seeked offset.                                whence                      whence values are:                 SEEK_SET - Set position equal to offset bytes.         SEEK_CUR - Set position to current location plus offset.                              If whence is not specified, it is assumed to be        SEEK_SET.                                    Return Values       Upon success, returns 0; otherwise, returns -1. Note that seeking    past EOF is not considered an error.           Examples            Example #1 gzseek() example       <?php$gz\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');gzseek($gz,2);echo\u00a0gzgetc($gz);gzclose($gz);?>                       See Also            gztell() - Tell gz-file pointer read\/write position     gzrewind() - Rewind the position of a gz-file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gztell.php","title":"gztell","description":"gztell   (PHP 4, PHP 5)gztell \u2014 Tell gz-file pointer read\/write position        Description       int gztell     ( resource $zp    )        Gets the position of the given file pointer; i.e., its offset into the    uncompressed file stream.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                    Return Values       The position of the file pointer or FALSE if an error occurs.           See Also            gzopen() - Open gz-file     gzseek() - Seek on a gz-file pointer     gzrewind() - Rewind the position of a gz-file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzread.php","title":"gzread","description":"gzread   (PHP 4, PHP 5)gzread \u2014 Binary-safe gz-file read        Description       string gzread     ( resource $zp    , int $length    )        gzread() reads up to length bytes    from the given gz-file pointer. Reading stops when    length (uncompressed) bytes have been read    or EOF is reached, whichever comes first.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                length                      The number of bytes to read.                                    Return Values       The data that have been read.           Examples            Example #1 gzread() example       <?php\/\/\u00a0get\u00a0contents\u00a0of\u00a0a\u00a0gz-file\u00a0into\u00a0a\u00a0string$filename\u00a0=\u00a0\"\/usr\/local\/something.txt.gz\";$zd\u00a0=\u00a0gzopen($filename,\u00a0\"r\");$contents\u00a0=\u00a0gzread($zd,\u00a010000);gzclose($zd);?>                       See Also            gzwrite() - Binary-safe gz-file write     gzopen() - Open gz-file     gzgets() - Get line from file pointer     gzgetss() - Get line from gz-file pointer and strip HTML tags     gzfile() - Read entire gz-file into an array     gzpassthru() - Output all remaining data on a gz-file pointer"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzuncompress.php","title":"gzuncompress","description":"gzuncompress   (PHP 4 >= 4.0.1, PHP 5)gzuncompress \u2014 Uncompress a compressed string        Description       string gzuncompress     ( string $data    [, int $length = 0   ] )           This function uncompress a compressed string.             Parameters                    data                      The data compressed by gzcompress().                                length                      The maximum length of data to decode.                                    Return Values       The original uncompressed data or FALSE on error.          The function will return an error if the uncompressed data is more than    32768 times the length of the compressed input data     or more than the optional parameter length.           Examples            Example #1 gzuncompress() example       <?php$compressed\u00a0\u00a0\u00a0=\u00a0gzcompress('Compress\u00a0me',\u00a09);$uncompressed\u00a0=\u00a0gzuncompress($compressed);echo\u00a0$uncompressed;?>                       See Also            gzcompress() - Compress a string     gzinflate() - Inflate a deflated string     gzdeflate() - Deflate a string     gzencode() - Create a gzip compressed string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zlib-get-coding-type.php","title":"zlib_get_coding_type","description":"zlib_get_coding_type   (PHP 4 >= 4.3.2, PHP 5)zlib_get_coding_type \u2014 Returns the coding type used for output compression        Description       string zlib_get_coding_type     ( void    )        Returns the coding type used for output compression.             Return Values       Possible return values are gzip, deflate,    or FALSE.           See Also                  The zlib.output_compression       directive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readgzfile.php","title":"readgzfile","description":"readgzfile   (PHP 4, PHP 5)readgzfile \u2014 Output a gz-file        Description       int readgzfile     ( string $filename    [, int $use_include_path = 0   ] )         Reads a file, decompresses it and writes it to standard output.          readgzfile() can be used to read a file which is not in    gzip format; in this case readgzfile() will directly     read from the file without decompression.           Parameters                    filename                      The file name. This file will be opened from the filesystem and its        contents written to standard output.                                use_include_path                      You can set this optional parameter to 1, if you        want to search for the file in the include_path too.                                    Return Values        Returns the number of (uncompressed) bytes read from the file. If    an error occurs, FALSE is returned and unless the function was    called as @readgzfile, an error message is    printed.           See Also            gzpassthru() - Output all remaining data on a gz-file pointer     gzfile() - Read entire gz-file into an array     gzopen() - Open gz-file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzwrite.php","title":"gzwrite","description":"gzwrite   (PHP 4, PHP 5)gzwrite \u2014 Binary-safe gz-file write        Description       int gzwrite     ( resource $zp    , string $string    [, int $length   ] )        gzwrite() writes the contents of    string to the given gz-file.           Parameters                    zp                      The gz-file pointer. It must be valid, and must point to a file        successfully opened by gzopen().                                string                      The string to write.                                length                      The number of uncompressed bytes to write. If supplied, writing will         stop after length (uncompressed) bytes have been        written or the end of string is reached,        whichever comes first.              Note:                  Note that if the length argument is given,         then the magic_quotes_runtime         configuration option will be ignored and no slashes will be         stripped from string.                                            Return Values        Returns the number of (uncompressed) bytes written to the given gz-file     stream.           Examples            Example #1 gzwrite() example       <?php$string\u00a0=\u00a0'Some\u00a0information\u00a0to\u00a0compress';$gz\u00a0=\u00a0gzopen('somefile.gz','w9');gzwrite($gz,\u00a0$string);gzclose($gz);?>                       See Also            gzread() - Binary-safe gz-file read     gzopen() - Open gz-file"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-addfromstring.php","title":"ZipArchive::addFromString","description":"ZipArchive::addFromString   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::addFromString \u2014 Add a file to a ZIP archive using its contents        Description       bool ZipArchive::addFromString     ( string $localname    , string $contents    )        Add a file to a ZIP archive using its contents.           Parameters                    localname                      The name of the entry to create.                                contents                      The contents to use to create the entry. It is used in a binary        safe mode.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Add an entry to a new archive        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip',\u00a0ZipArchive::CREATE);if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->addFromString('test.txt',\u00a0'file\u00a0content\u00a0goes\u00a0here');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>                         Example #2 Add file to a directory inside an archive        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->addFromString('dir\/test.txt',\u00a0'file\u00a0content\u00a0goes\u00a0here');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-addemptydir.php","title":"ZipArchive::addEmptyDir","description":"ZipArchive::addEmptyDir   (PHP 5 >= 5.2.0, PECL zip >= 1.8.0)ZipArchive::addEmptyDir \u2014 Add a new directory        Description       bool ZipArchive::addEmptyDir     ( string $dirname    )        Adds an empty directory in the archive.            Parameters                    dirname                      The directory to add.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples       Example #1 Create a new directory in an archive      <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0if($zip->addEmptyDir('newDirectory'))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Created\u00a0a\u00a0new\u00a0root\u00a0directory';\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0create\u00a0the\u00a0directory';\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-deleteindex.php","title":"ZipArchive::deleteIndex","description":"ZipArchive::deleteIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::deleteIndex \u2014 delete an entry in the archive using its index        Description       bool ZipArchive::deleteIndex     ( int $index    )        Delete an entry in the archive using its index.           Parameters                    index                      Index of the entry to delete.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Delete file from archive using its index        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->deleteIndex(2);\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-addfile.php","title":"ZipArchive::addFile","description":"ZipArchive::addFile   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::addFile \u2014 Adds a file to a ZIP archive from the given path        Description       bool ZipArchive::addFile     ( string $filename    [, string $localname = NULL    [, int $start = 0    [, int $length = 0   ]]] )        Adds a file to a ZIP archive from a given path.           Parameters                    filename                      The path to the file to add.                                localname                      If supplied, this is the local name inside the ZIP archive that will override the filename.                                start                      This parameter is not used but is required to extend ZipArchive.                                length                      This parameter is not used but is required to extend ZipArchive.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           This example opens a ZIP file archive      test.zip and add      the file \/path\/to\/index.txt.      as newname.txt.                Example #1 Open and extract        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->addFile('\/path\/to\/index.txt',\u00a0'newname.txt');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>                        Notes   Note:          When a file is set to be added to the archive, PHP will attempt to lock      the file and it is only released once the ZIP operation is done. In short,      it means you can first delete an added file after the archive is closed."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-deletename.php","title":"ZipArchive::deleteName","description":"ZipArchive::deleteName   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::deleteName \u2014 delete an entry in the archive using its name        Description       bool ZipArchive::deleteName     ( string $name    )        Delete an entry in the archive using its name.           Parameters                    name                      Name of the entry to delete.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Deleting a file and directory from an archive, using names        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test1.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->deleteName('testfromfile.php');\u00a0\u00a0\u00a0\u00a0$zip->deleteName('testDir\/');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getarchivecomment.php","title":"ZipArchive::getArchiveComment","description":"ZipArchive::getArchiveComment   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::getArchiveComment \u2014 Returns the Zip archive comment        Description       string ZipArchive::getArchiveComment     ([ int $flags   ] )        Returns the Zip archive comment.            Parameters                    flags                      If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged        comment is returned.                                     Return Values       Returns the Zip archive comment or FALSE on failure.            Examples       Example #1 Dump an archive comment      <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test_with_comment.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($zip->getArchiveComment());\u00a0\u00a0\u00a0\u00a0\/*\u00a0Or\u00a0using\u00a0the\u00a0archive\u00a0property\u00a0*\/\u00a0\u00a0\u00a0\u00a0var_dump($zip->comment);}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getcommentindex.php","title":"ZipArchive::getCommentIndex","description":"ZipArchive::getCommentIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)ZipArchive::getCommentIndex \u2014 Returns the comment of an entry using the entry index        Description       string ZipArchive::getCommentIndex     ( int $index    [, int $flags   ] )        Returns the comment of an entry using the entry index.           Parameters                    index                      Index of the entry                                flags                      If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged        comment is returned.                                    Return Values       Returns the comment on success or FALSE on failure.           Examples           Example #1 Dump an entry comment        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test1.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($zip->getCommentIndex(1));}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getcommentname.php","title":"ZipArchive::getCommentName","description":"ZipArchive::getCommentName   (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)ZipArchive::getCommentName \u2014 Returns the comment of an entry using the entry name        Description       string ZipArchive::getCommentName     ( string $name    [, int $flags   ] )        Returns the comment of an entry using the entry name.           Parameters                    name                      Name of the entry                                flags                      If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged        comment is returned.                                    Return Values       Returns the comment on success or FALSE on failure.           Examples           Example #1 Dump an entry comment        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test1.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0var_dump($zip->getCommentName('test\/entry1.txt'));}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getfromname.php","title":"ZipArchive::getFromName","description":"ZipArchive::getFromName   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::getFromName \u2014 Returns the entry contents using its name        Description       mixed ZipArchive::getFromName     ( string $name    [, int $length = 0    [, int $flags   ]] )        Returns the entry contents using its name.           Parameters                    name                      Name of the entry                                length                      The length to be read from the entry. If 0, then the        entire entry is read.                                flags                      The flags to use to open the archive. the following values may        be ORed to it.                                      ZIPARCHIVE::FL_UNCHANGED                                                 ZIPARCHIVE::FL_COMPRESSED                                                               Return Values       Returns the contents of the entry on success or FALSE on failure.           Examples           Example #1 Get the file contents        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test1.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$zip->getFromName('testfromfile.php');\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>                         Example #2 Convert an image from a zip entry        <?php$z\u00a0=\u00a0new\u00a0ZipArchive();if\u00a0($z->open(dirname(__FILE__)\u00a0.\u00a0'\/test_im.zip'))\u00a0{\u00a0\u00a0\u00a0\u00a0$im_string\u00a0=\u00a0$z->getFromName(\"pear_item.gif\");\u00a0\u00a0\u00a0\u00a0$im\u00a0=\u00a0imagecreatefromstring($im_string);\u00a0\u00a0\u00a0\u00a0imagepng($im,\u00a0'b.png');}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getfromindex.php","title":"ZipArchive::getFromIndex","description":"ZipArchive::getFromIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.3.0)ZipArchive::getFromIndex \u2014 Returns the entry contents using its index        Description       mixed ZipArchive::getFromIndex     ( int $index    [, int $length = 0    [, int $flags   ]] )        Returns the entry contents using its index.           Parameters                    index                      Index of the entry                                length                      The length to be read from the entry. If 0, then the        entire entry is read.                                flags                      The flags to use to open the archive. the following values may        be ORed to it.                                      ZIPARCHIVE::FL_UNCHANGED                                                 ZIPARCHIVE::FL_COMPRESSED                                                               Return Values       Returns the contents of the entry on success or FALSE on failure.           Examples           Example #1 Get the file contents        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$zip->getFromIndex(2);\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getnameindex.php","title":"ZipArchive::getNameIndex","description":"ZipArchive::getNameIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::getNameIndex \u2014 Returns the name of an entry using its index        Description       string ZipArchive::getNameIndex     ( int $index    [, int $flags   ] )        Returns the name of an entry using its index.           Parameters                    index                      Index of the entry.                                flags                      If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged        name is returned.                                    Return Values       Returns the name on success or FALSE on failure.           Examples            Example #1 getnameindex() example       <?phpif\u00a0($zip->open('test.zip')\u00a0==\u00a0TRUE)\u00a0{\u00a0for\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0$zip->numFiles;\u00a0$i++;)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0$filename\u00a0=\u00a0$zip->getNameIndex($i);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0...\u00a0}}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getstatusstring.php","title":"ZipArchive::getStatusString","description":"ZipArchive::getStatusString   (PHP 5 >= 5.2.7)ZipArchive::getStatusString \u2014 Returns the status error message, system and\/or zip messages        Description       string ZipArchive::getStatusString     ( void    )        Returns the status error message, system and\/or zip messages.            Parameters   This function has no parameters.         Return Values       Returns a string with the status message on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getstream.php","title":"ZipArchive::getStream","description":"ZipArchive::getStream   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::getStream \u2014 Get a file handler to the entry defined by its name (read only).        Description       resource ZipArchive::getStream     ( string $name    )        Get a file handler to the entry defined by its name. For now it only    supports read operations.           Parameters                    name                      The name of the entry to use.                                    Return Values       Returns a file pointer (resource) on success or FALSE on failure.           Examples           Example #1 Get the entry contents with fread() and store it        <?php$content\u00a0=\u00a0'';$z\u00a0=\u00a0new\u00a0ZipArchive();if\u00a0($z->open('test.zip'))\u00a0{\u00a0\u00a0\u00a0\u00a0$fp\u00a0=\u00a0$z->getStream('test');\u00a0\u00a0\u00a0\u00a0if(!$fp)\u00a0exit(\"failed\\n\");\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$contents\u00a0.=\u00a0fread($fp,\u00a02);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0fclose($fp);\u00a0\u00a0\u00a0\u00a0file_put_contents('t',$contents);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"done.\\n\";}?>                         Example #2 Same as the previous example but with fopen() and the zip      stream wrapper        <?php$fp\u00a0=\u00a0fopen('zip:\/\/'\u00a0.\u00a0dirname(__FILE__)\u00a0.\u00a0'\/test.zip#test',\u00a0'r');if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0exit(\"cannot\u00a0open\\n\");}while\u00a0(!feof($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0$contents\u00a0.=\u00a0fread($fp,\u00a02);\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$contents\\n\";}fclose($fp);echo\u00a0\"done.\\n\";?>                         Example #3 Stream wrapper and image, can be used with the xml function      as well        <?php$im\u00a0=\u00a0imagecreatefromgif('zip:\/\/'\u00a0.\u00a0dirname(__FILE__)\u00a0.\u00a0'\/test_im.zip#pear_item.gif');imagepng($im,\u00a0'a.png');?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-extractto.php","title":"ZipArchive::extractTo","description":"ZipArchive::extractTo   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::extractTo \u2014 Extract the archive contents        Description       bool ZipArchive::extractTo     ( string $destination    [, mixed $entries   ] )        Extract the complete archive or the given files to the specified    destination.           Parameters                    destination                      Location where to extract the files.                                entries                      The entries to extract. It accepts either a single entry name or        an array of names.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Extract all entries        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open('test.zip')\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->extractTo('\/my\/destination\/dir\/');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>                         Example #2 Extract two entries        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test_im.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->extractTo('\/my\/destination\/dir\/',\u00a0array('pear_item.gif',\u00a0'testfromfile.php'));\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-locatename.php","title":"ZipArchive::locateName","description":"ZipArchive::locateName   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::locateName \u2014 Returns the index of the entry in the archive        Description       mixed ZipArchive::locateName     ( string $name    [, int $flags   ] )        Locates an entry using its name.           Parameters                    name                      The name of the entry to look up                                flags                      The flags are specified by ORing the following values,        or 0 for none of them.                                      ZIPARCHIVE::FL_NOCASE                                                 ZIPARCHIVE::FL_NODIR                                                               Return Values       Returns the index of the entry on success or FALSE on failure.           Examples           Example #1 Create an archive and then use it with ZipArchive::locateName()        <?php$file\u00a0=\u00a0'testlocate.zip';$zip\u00a0=\u00a0new\u00a0ZipArchive;if\u00a0($zip->open($file,\u00a0ZIPARCHIVE::CREATE)\u00a0!==\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0exit('failed');}$zip->addFromString('entry1.txt',\u00a0'entry\u00a0#1');$zip->addFromString('entry2.txt',\u00a0'entry\u00a0#2');$zip->addFromString('dir\/entry2d.txt',\u00a0'entry\u00a0#2');if\u00a0(!$zip->status\u00a0==\u00a0ZIPARCHIVE::ER_OK)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0write\u00a0zip\\n\";}$zip->close();if\u00a0($zip->open($file)\u00a0!==\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0exit('failed');}echo\u00a0$zip->locateName('entry1.txt')\u00a0.\u00a0\"\\n\";echo\u00a0$zip->locateName('eNtry2.txt')\u00a0.\u00a0\"\\n\";echo\u00a0$zip->locateName('eNtry2.txt',\u00a0ZIPARCHIVE::FL_NOCASE)\u00a0.\u00a0\"\\n\";echo\u00a0$zip->locateName('enTRy2d.txt',\u00a0ZIPARCHIVE::FL_NOCASE|ZIPARCHIVE::FL_NODIR)\u00a0.\u00a0\"\\n\";$zip->close();?>                   The above example will output:       0  1 2"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-renameindex.php","title":"ZipArchive::renameIndex","description":"ZipArchive::renameIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::renameIndex \u2014 Renames an entry defined by its index        Description       bool ZipArchive::renameIndex     ( int $index    , string $newname    )        Renames an entry defined by its index.           Parameters                    index                      Index of the entry to rename.                                newname                      New name.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Rename one entry        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->renameIndex(2,'newname.txt');\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-close.php","title":"ZipArchive::close","description":"ZipArchive::close   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::close \u2014 Close the active archive (opened or newly created)        Description       bool ZipArchive::close     ( void    )        Close opened or created archive and save changes. This method is    automatically called at the end of the script.            Parameters   This function has no parameters.         Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-open.php","title":"ZipArchive::open","description":"ZipArchive::open   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::open \u2014 Open a ZIP file archive        Description       mixed ZipArchive::open     ( string $filename    [, int $flags   ] )        Opens a new zip archive for reading, writing or modifying.           Parameters                    filename                      The file name of the ZIP archive to open.                                flags                      The mode to use to open the archive.                                      ZIPARCHIVE::OVERWRITE                                                 ZIPARCHIVE::CREATE                                                 ZIPARCHIVE::EXCL                                                 ZIPARCHIVE::CHECKCONS                                                               Return Values                    Error codes                       Returns TRUE on success or the error code.                                      ZIPARCHIVE::ER_EXISTS                               File already exists.                                                 ZIPARCHIVE::ER_INCONS                               Zip archive inconsistent.                                                 ZIPARCHIVE::ER_INVAL                               Invalid argument.                                                 ZIPARCHIVE::ER_MEMORY                               Malloc failure.                                                 ZIPARCHIVE::ER_NOENT                               No such file.                                                 ZIPARCHIVE::ER_NOZIP                               Not a zip archive.                                                 ZIPARCHIVE::ER_OPEN                               Can&#039;t open file.                                                 ZIPARCHIVE::ER_READ                               Read error.                                                 ZIPARCHIVE::ER_SEEK                               Seek error.                                                               Examples           Example #1 Open and extract        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';\u00a0\u00a0\u00a0\u00a0$zip->extractTo('test');\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>                         Example #2 Create an archive        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip',\u00a0ZipArchive::CREATE);if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->addFromString('test.txt',\u00a0'file\u00a0content\u00a0goes\u00a0here');\u00a0\u00a0\u00a0\u00a0$zip->addFile('data.txt',\u00a0'entryname.txt');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-renamename.php","title":"ZipArchive::renameName","description":"ZipArchive::renameName   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::renameName \u2014 Renames an entry defined by its name        Description       bool ZipArchive::renameName     ( string $name    , string $newname    )        Renames an entry defined by its name.           Parameters                    name                      Name of the entry to rename.                                newname                      New name.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Rename one entry        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->renameName('currentname.txt','newname.txt');\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-setarchivecomment.php","title":"ZipArchive::setArchiveComment","description":"ZipArchive::setArchiveComment   (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)ZipArchive::setArchiveComment \u2014 Set the comment of a ZIP archive        Description       mixed ZipArchive::setArchiveComment     ( string $comment    )        Set the comment of a ZIP archive.           Parameters                    comment                      The contents of the comment.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Create an archive and set a comment        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip',\u00a0ZipArchive::CREATE);if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->addFromString('test.txt',\u00a0'file\u00a0content\u00a0goes\u00a0here');\u00a0\u00a0\u00a0\u00a0$zip->setArchiveComment('new\u00a0archive\u00a0comment');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-setcommentindex.php","title":"ZipArchive::setCommentIndex","description":"ZipArchive::setCommentIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)ZipArchive::setCommentIndex \u2014 Set the comment of an entry defined by its index        Description       mixed ZipArchive::setCommentIndex     ( int $index    , string $comment    )        Set the comment of an entry defined by its index.           Parameters                    index                      Index of the entry.                                comment                      The contents of the comment.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Open an archive and set a comment for an entry        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->setCommentIndex(2,\u00a0'new\u00a0entry\u00a0comment');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-setCommentName.php","title":"ZipArchive::setCommentName","description":"ZipArchive::setCommentName   (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)ZipArchive::setCommentName \u2014 Set the comment of an entry defined by its name        Description       mixed ZipArchive::setCommentName     ( string $name    , string $comment    )        Set the comment of an entry defined by its name.           Parameters                    name                      Name of the entry.                                comment                      The contents of the comment.                                    Return Values       Returns TRUE on success or FALSE on failure.           Examples           Example #1 Open an archive and set a comment for an entry        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0$zip->setCommentName('entry1.txt',\u00a0'new\u00a0entry\u00a0comment');\u00a0\u00a0\u00a0\u00a0$zip->close();\u00a0\u00a0\u00a0\u00a0echo\u00a0'ok';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed';}?>"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-statname.php","title":"ZipArchive::statName","description":"ZipArchive::statName   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::statName \u2014 Get the details of an entry defined by its name.        Description       mixed ZipArchive::statName     ( name $name    [, int $flags   ] )         The function obtains information about the entry defined by its     name.           Parameters                    name                      Name of the entry                                flags                      The flags argument specifies how the name lookup should be done.        Also, ZIPARCHIVE::FL_UNCHANGED may be ORed to it to request        information  about  the  original  file  in  the archive,        ignoring any changes made.                                      ZIPARCHIVE::FL_NOCASE                                                 ZIPARCHIVE::FL_NODIR                                                 ZIPARCHIVE::FL_UNCHANGED                                                               Return Values       Returns an array containing the entry details  or FALSE on failure.           Examples           Example #1 Dump the stat info of an entry        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0print_r($zip->statName('foobar\/baz'));\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>                The above example will output something similar to:        Array (     [name] => foobar\/baz     [index] => 3     [crc] => 499465816     [size] => 27     [mtime] => 1123164748     [comp_size] => 24     [comp_method] => 8 )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-statindex.php","title":"ZipArchive::statIndex","description":"ZipArchive::statIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::statIndex \u2014 Get the details of an entry defined by its index.        Description       mixed ZipArchive::statIndex     ( int $index    [, int $flags   ] )         The  function  obtains  information  about the entry defined by its     index.           Parameters                    index                      Index of the entry                                flags                      ZIPARCHIVE::FL_UNCHANGED may be ORed to it to request        information  about  the  original  file  in  the archive,        ignoring any changes made.                                    Return Values       Returns an array containing the entry details or FALSE on failure.           Examples           Example #1 Dump the stat info of an entry        <?php$zip\u00a0=\u00a0new\u00a0ZipArchive;$res\u00a0=\u00a0$zip->open('test.zip');if\u00a0($res\u00a0===\u00a0TRUE)\u00a0{\u00a0\u00a0\u00a0\u00a0print_r($zip->statIndex(3));\u00a0\u00a0\u00a0\u00a0$zip->close();}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'failed,\u00a0code:'\u00a0.\u00a0$res;}?>                The above example will output something similar to:        Array (     [name] => foobar\/baz     [index] => 3     [crc] => 499465816     [size] => 27     [mtime] => 1123164748     [comp_size] => 24     [comp_method] => 8 )"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangeall.php","title":"ZipArchive::unchangeAll","description":"ZipArchive::unchangeAll   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::unchangeAll \u2014 Undo all changes done in the archive        Description       mixed ZipArchive::unchangeAll     ( void    )        Undo all changes done in the archive.            Parameters   This function has no parameters.         Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangearchive.php","title":"ZipArchive::unchangeArchive","description":"ZipArchive::unchangeArchive   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::unchangeArchive \u2014 Revert all global changes done in the archive.        Description       mixed ZipArchive::unchangeArchive     ( void    )        Revert all global changes to the archive.  For now, this    only reverts archive comment changes.            Parameters   This function has no parameters.         Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangeindex.php","title":"ZipArchive::unchangeIndex","description":"ZipArchive::unchangeIndex   (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)ZipArchive::unchangeIndex \u2014 Revert all changes done to an entry at the given index        Description       mixed ZipArchive::unchangeIndex     ( int $index    )        Revert all changes done to an entry at the given index.           Parameters                    index                      Index of the entry.                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangename.php","title":"ZipArchive::unchangeName","description":"ZipArchive::unchangeName   (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)ZipArchive::unchangeName \u2014 Revert all changes done to an entry with the given name.        Description       mixed ZipArchive::unchangeName     ( string $name    )        Revert all changes done to an entry.           Parameters                    name                      Name of the entry.                                    Return Values       Returns TRUE on success or FALSE on failure."},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-close.php","title":"zip_close","description":"zip_close   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_close \u2014 Close a ZIP file archive        Description       void zip_close     ( resource $zip    )        Closes the given ZIP file archive.           Parameters                    zip                      A ZIP file previously opened with zip_open().                                    Return Values       No value is returned.           See Also            zip_open() - Open a ZIP file archive     zip_read() - Read next entry in a ZIP file archive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-close.php","title":"zip_entry_close","description":"zip_entry_close   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_close \u2014 Close a directory entry        Description       bool zip_entry_close     ( resource $zip_entry    )        Closes the specified directory entry.           Parameters                    zip_entry                      A directory entry previously opened zip_entry_open().                                    Return Values       Returns TRUE on success or FALSE on failure.           See Also            zip_entry_open() - Open a directory entry for reading     zip_entry_read() - Read from an open directory entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-compressedsize.php","title":"zip_entry_compressedsize","description":"zip_entry_compressedsize   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_compressedsize \u2014 Retrieve the compressed size of a directory entry        Description       int zip_entry_compressedsize     ( resource $zip_entry    )        Returns the compressed size of the specified directory entry.           Parameters                    zip_entry                      A directory entry returned by zip_read().                                    Return Values       The compressed size.           See Also            zip_open() - Open a ZIP file archive     zip_read() - Read next entry in a ZIP file archive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-filesize.php","title":"zip_entry_filesize","description":"zip_entry_filesize   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_filesize \u2014 Retrieve the actual file size of a directory entry        Description       int zip_entry_filesize     ( resource $zip_entry    )        Returns the actual size of the specified directory entry.           Parameters                    zip_entry                      A directory entry returned by zip_read().                                    Return Values       The size of the directory entry.           See Also            zip_open() - Open a ZIP file archive     zip_read() - Read next entry in a ZIP file archive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-compressionmethod.php","title":"zip_entry_compressionmethod","description":"zip_entry_compressionmethod   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_compressionmethod \u2014 Retrieve the compression method of a directory entry        Description       string zip_entry_compressionmethod     ( resource $zip_entry    )        Returns the compression method of the directory entry specified    by zip_entry.           Parameters                    zip_entry                      A directory entry returned by zip_read().                                    Return Values       The compression method.           See Also            zip_open() - Open a ZIP file archive     zip_read() - Read next entry in a ZIP file archive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-name.php","title":"zip_entry_name","description":"zip_entry_name                    (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_name \u2014 Retrieve the name of a directory entry        Description       string zip_entry_name     ( resource $zip_entry    )        Returns the name of the specified directory entry.           Parameters                    zip_entry                      A directory entry returned by zip_read().                                    Return Values       The name of the directory entry.           See Also            zip_open() - Open a ZIP file archive     zip_read() - Read next entry in a ZIP file archive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-open.php","title":"zip_entry_open","description":"zip_entry_open   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_open \u2014 Open a directory entry for reading        Description       bool zip_entry_open           ( resource $zip    , resource $zip_entry    [, string $mode   ] )        Opens a directory entry in a zip file for reading.           Parameters                    zip                      A valid resource handle returned by zip_open().                                zip_entry                      A directory entry returned by zip_read().                                mode                      Any of the modes specified in the documentation of        fopen().              Note:                  Currently, mode is ignored and is always         \"rb\". This is due to the fact that zip support         in PHP is read only access.                                            Return Values       Returns TRUE on success or FALSE on failure.      Note:          Unlike fopen() and other similar functions,     the return value of zip_entry_open() only     indicates the result of the operation and is not needed for     reading or closing the directory entry.               See Also            zip_entry_close() - Close a directory entry     zip_entry_read() - Read from an open directory entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-read.php","title":"zip_entry_read","description":"zip_entry_read   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_entry_read \u2014 Read from an open directory entry        Description       string zip_entry_read     ( resource $zip_entry    [, int $length   ] )        Reads from an open directory entry.           Parameters                    zip_entry                      A directory entry returned by zip_read().                                length                      The number of bytes to return. If not specified, this function will         attempt to read 1024 bytes.              Note:                  This should be the uncompressed length you wish to read.                                            Return Values       Returns the data read, or FALSE if the end of the file is    reached.           See Also            zip_entry_open() - Open a directory entry for reading     zip_entry_close() - Close a directory entry     zip_entry_filesize() - Retrieve the actual file size of a directory entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-read.php","title":"zip_read","description":"zip_read   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_read \u2014 Read next entry in a ZIP file archive        Description       mixed zip_read     ( resource $zip    )        Reads the next entry in a zip file archive.           Parameters                    zip                      A ZIP file previously opened with zip_open().                                    Return Values       Returns a directory entry resource for later use with the    zip_entry_... functions, or FALSE if    there are no more entries to read, or an error code if an error    occurred.           See Also            zip_open() - Open a ZIP file archive     zip_close() - Close a ZIP file archive     zip_entry_open() - Open a directory entry for reading     zip_entry_read() - Read from an open directory entry"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-open.php","title":"zip_open","description":"zip_open   (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)zip_open \u2014 Open a ZIP file archive        Description       mixed zip_open     ( string $filename    )        Opens a new zip archive for reading.            Parameters                    filename                      The file name of the ZIP archive to open.                                    Return Values       Returns a resource handle for later use with    zip_read() and zip_close()    or returns the number of error if filename does not    exist or in case of other error.           See Also            zip_read() - Read next entry in a ZIP file archive     zip_close() - Close a ZIP file archive"},{"url":"http:\/\/www.php.net\/manual\/en\/function.syslog.php","title":"syslog","description":"syslog   (PHP 4, PHP 5)syslog \u2014 Generate a system log message          Description       bool syslog     ( int $priority    , string $message    )        syslog() generates a log message that will be    distributed by the system logger.          For information on setting up a user defined log handler, see the    syslog.conf    (5) Unix manual page.  More    information on the syslog facilities and option can be found in the man    pages for syslog    (3) on Unix machines.            Parameters                    priority                      priority is a combination of the facility and        the level. Possible values are:                 syslog() Priorities (in descending order)                                          Constant            Description                                                        LOG_EMERG            system is unusable                                   LOG_ALERT            action must be taken immediately                                   LOG_CRIT            critical conditions                                   LOG_ERR            error conditions                                   LOG_WARNING            warning conditions                                   LOG_NOTICE            normal, but significant, condition                                   LOG_INFO            informational message                                   LOG_DEBUG            debug-level message                                                                        message                      The message to send, except that the two characters        %m will be replaced by the error message string        (strerror) corresponding to the present value of        errno.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 Using syslog()       <?php\/\/\u00a0open\u00a0syslog,\u00a0include\u00a0the\u00a0process\u00a0ID\u00a0and\u00a0also\u00a0send\/\/\u00a0the\u00a0log\u00a0to\u00a0standard\u00a0error,\u00a0and\u00a0use\u00a0a\u00a0user\u00a0defined\/\/\u00a0logging\u00a0mechanismopenlog(\"myScriptLog\",\u00a0LOG_PID\u00a0|\u00a0LOG_PERROR,\u00a0LOG_LOCAL0);\/\/\u00a0some\u00a0codeif\u00a0(authorized_client())\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0do\u00a0something}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\/\/\u00a0unauthorized\u00a0client!\u00a0\u00a0\u00a0\u00a0\/\/\u00a0log\u00a0the\u00a0attempt\u00a0\u00a0\u00a0\u00a0$access\u00a0=\u00a0date(\"Y\/m\/d\u00a0H:i:s\");\u00a0\u00a0\u00a0\u00a0syslog(LOG_WARNING,\u00a0\"Unauthorized\u00a0client:\u00a0$access\u00a0{$_SERVER['REMOTE_ADDR']}\u00a0({$_SERVER['HTTP_USER_AGENT']})\");}closelog();?>                        Notes       On Windows NT, the syslog service is emulated using the Event    Log.      Note:          Use of LOG_LOCAL0 through     LOG_LOCAL7 for the facility     parameter of openlog() is not available     in Windows.                See Also            openlog() - Open connection to system logger     closelog() - Close connection to system logger"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-split.php","title":"preg_split","description":"preg_split   (PHP 4, PHP 5)preg_split \u2014 Split string by a regular expression         Description       array preg_split     ( string $pattern    , string $subject    [, int $limit = -1    [, int $flags = 0   ]] )        Split the given string by a regular expression.            Parameters                    pattern                      The pattern to search for, as a string.                                subject                      The input string.                                limit                      If specified, then only substrings up to limit        are returned with the rest of the string being placed in the last        substring.  A limit of -1, 0 or NULL means \"no limit\"        and, as is standard across PHP, you can use NULL to skip to the         flags parameter.                                flags                      flags can be any combination of the following        flags (combined with the | bitwise operator):                             PREG_SPLIT_NO_EMPTY                                 If this flag is set, only non-empty pieces will be returned by           preg_split().                                                    PREG_SPLIT_DELIM_CAPTURE                                 If this flag is set, parenthesized expression in the delimiter pattern           will be captured and returned as well.                                                    PREG_SPLIT_OFFSET_CAPTURE                                  If this flag is set, for every occurring match the appendant string            offset will also be returned. Note that this changes the return            value in an array where every element is an array consisting of the            matched string at offset 0 and its string offset            into subject at offset 1.                                                                              Return Values       Returns an array containing substrings of subject    split along boundaries matched by pattern.            Changelog                                 Version        Description                                    4.3.0                 The PREG_SPLIT_OFFSET_CAPTURE was added                               4.0.5                 The PREG_SPLIT_DELIM_CAPTURE was added                                            Examples            Example #1 preg_split() example : Get the parts of a search string       <?php\/\/\u00a0split\u00a0the\u00a0phrase\u00a0by\u00a0any\u00a0number\u00a0of\u00a0commas\u00a0or\u00a0space\u00a0characters,\/\/\u00a0which\u00a0include\u00a0\"\u00a0\",\u00a0\\r,\u00a0\\t,\u00a0\\n\u00a0and\u00a0\\f$keywords\u00a0=\u00a0preg_split(\"\/[\\s,]+\/\",\u00a0\"hypertext\u00a0language,\u00a0programming\");?>                           Example #2 Splitting a string into component characters       <?php$str\u00a0=\u00a0'string';$chars\u00a0=\u00a0preg_split('\/\/',\u00a0$str,\u00a0-1,\u00a0PREG_SPLIT_NO_EMPTY);print_r($chars);?>                           Example #3 Splitting a string into matches and their offsets       <?php$str\u00a0=\u00a0'hypertext\u00a0language\u00a0programming';$chars\u00a0=\u00a0preg_split('\/\u00a0\/',\u00a0$str,\u00a0-1,\u00a0PREG_SPLIT_OFFSET_CAPTURE);print_r($chars);?>             The above example will output:       Array (     [0] => Array         (             [0] => hypertext             [1] => 0         )      [1] => Array         (             [0] => language             [1] => 10         )      [2] => Array         (             [0] => programming             [1] => 19         )  )                      Notes   Tip         If you don&#039;t need the power of regular expressions, you can choose     faster (albeit simpler) alternatives like explode()     or str_split().                See Also            PCRE Patterns     implode() - Join array elements with a string     preg_match() - Perform a regular expression match     preg_match_all() - Perform a global regular expression match     preg_replace() - Perform a regular expression search and replace     preg_last_error() - Returns the error code of the last PCRE regex execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.split.php","title":"split","description":"split   (PHP 4, PHP 5)split \u2014 Split string into array by regular expression          Description       array split     ( string $pattern    , string $string    [, int $limit = -1   ] )        Splits a string into array by regular expression.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    pattern                      Case sensitive regular expression.                      If you want to split on any of the characters which are considered        special by regular expressions, you&#039;ll need to escape them first. If        you think split() (or any other regex function, for        that matter) is doing something weird, please read the file        regex.7, included in the         regex\/ subdirectory of the PHP distribution. It&#039;s        in manpage format, so you&#039;ll want to do something along the lines of        man \/usr\/local\/src\/regex\/regex.7 in order to read it.                                string                      The input string.                                limit                      If limit is set, the returned array will        contain a maximum of limit elements with the        last element containing the whole rest of        string.                                     Return Values       Returns an array of strings, each of which is a substring of    string formed by splitting it on boundaries formed    by the case-sensitive regular expression pattern.          If there are n occurrences of    pattern, the returned array will contain    n+1 items. For example, if    there is no occurrence of pattern, an array with    only one element will be returned. Of course, this is also true if    string is empty. If an error occurs,    split() returns FALSE.            Examples            Example #1 split() example           To split off the first four fields from a line from      \/etc\/passwd:            <?phplist($user,\u00a0$pass,\u00a0$uid,\u00a0$gid,\u00a0$extra)\u00a0=\u00a0\u00a0\u00a0\u00a0split(\":\",\u00a0$passwd_line,\u00a05);?>                           Example #2 split() example           To parse a date which may be delimited with slashes, dots, or hyphens:            <?php\/\/\u00a0Delimiters\u00a0may\u00a0be\u00a0slash,\u00a0dot,\u00a0or\u00a0hyphen$date\u00a0=\u00a0\"04\/30\/1973\";list($month,\u00a0$day,\u00a0$year)\u00a0=\u00a0split('[\/.-]',\u00a0$date);echo\u00a0\"Month:\u00a0$month;\u00a0Day:\u00a0$day;\u00a0Year:\u00a0$year<br\u00a0\/>\\n\";?>                        Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE.   Tip         preg_split(), which uses a Perl-compatible regular     expression syntax, is often a faster alternative to     split().  If you don&#039;t require the power of regular     expressions, it is faster to use explode(), which     doesn&#039;t incur the overhead of the regular expression engine.          Tip         For users looking for a way to emulate Perl&#039;s @chars =     split(&#039;&#039;, $str) behaviour, please see the examples for     preg_split() or str_split().                See Also            preg_split() - Split string by a regular expression     spliti() - Split string into array by regular expression case insensitive     str_split() - Convert a string to an array     explode() - Split a string by string     implode() - Join array elements with a string     chunk_split() - Split a string into smaller chunks     wordwrap() - Wraps a string to a given number of characters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.headers-list.php","title":"headers_list","description":"headers_list   (PHP 5)headers_list \u2014 Returns a list of response headers sent (or ready to send)          Description       array headers_list     ( void    )        headers_list() will return a list of headers to be sent    to the browser \/ client.  To determine whether or not these headers have    been sent yet, use headers_sent().            Return Values       Returns a numerically indexed array of headers.            Examples            Example #1 Examples using headers_list()       <?php\/*\u00a0setcookie()\u00a0will\u00a0add\u00a0a\u00a0response\u00a0header\u00a0on\u00a0its\u00a0own\u00a0*\/setcookie('foo',\u00a0'bar');\/*\u00a0Define\u00a0a\u00a0custom\u00a0response\u00a0header\u00a0\u00a0\u00a0This\u00a0will\u00a0be\u00a0ignored\u00a0by\u00a0most\u00a0clients\u00a0*\/header(\"X-Sample-Test:\u00a0foo\");\/*\u00a0Specify\u00a0plain\u00a0text\u00a0content\u00a0in\u00a0our\u00a0response\u00a0*\/header('Content-type:\u00a0text\/plain');\/*\u00a0What\u00a0headers\u00a0are\u00a0going\u00a0to\u00a0be\u00a0sent?\u00a0*\/var_dump(headers_list());?>             The above example will output:       array(4) {   [0]=>   string(23) \"X-Powered-By: PHP\/5.1.3\"   [1]=>   string(19) \"Set-Cookie: foo=bar\"   [2]=>   string(18) \"X-Sample-Test: foo\"   [3]=>   string(24) \"Content-type: text\/plain\" }                       Notes   Note:          Headers will only be accessible and output when a SAPI that supports them     is in use.                 See Also            headers_sent() - Checks if or where headers have been sent     header() - Send a raw HTTP header     setcookie() - Send a cookie     apache_response_headers() - Fetch all HTTP response headers     http_response_code() - Get or Set the HTTP response code"},{"url":"http:\/\/www.php.net\/manual\/en\/function.headers-sent.php","title":"headers_sent","description":"headers_sent   (PHP 4, PHP 5)headers_sent \u2014 Checks if or where headers have been sent          Description       bool headers_sent     ([ string &$file    [, int &$line   ]] )        Checks if or where headers have been sent.          You can&#039;t add any more header lines using the header()    function once the header block has already been sent. Using this function    you can at least prevent getting HTTP header related error messages.    Another option is to use Output Buffering.            Parameters                    file                      If the optional file and        line parameters are set,         headers_sent() will put the PHP source file name        and line number where output started in the file        and line variables.                                line                      The line number where the output started.                                     Return Values       headers_sent() will return FALSE if no HTTP headers    have already been sent or TRUE otherwise.            Changelog                                 Version        Description                                    4.3.0                 The optional file and line         parameters were added.                                            Examples            Example #1 Examples using headers_sent()       <?php\/\/\u00a0If\u00a0no\u00a0headers\u00a0are\u00a0sent,\u00a0send\u00a0oneif\u00a0(!headers_sent())\u00a0{\u00a0\u00a0\u00a0\u00a0header('Location:\u00a0http:\/\/www.example.com\/');\u00a0\u00a0\u00a0\u00a0exit;}\/\/\u00a0An\u00a0example\u00a0using\u00a0the\u00a0optional\u00a0file\u00a0and\u00a0line\u00a0parameters,\u00a0as\u00a0of\u00a0PHP\u00a04.3.0\/\/\u00a0Note\u00a0that\u00a0$filename\u00a0and\u00a0$linenum\u00a0are\u00a0passed\u00a0in\u00a0for\u00a0later\u00a0use.\/\/\u00a0Do\u00a0not\u00a0assign\u00a0them\u00a0values\u00a0beforehand.if\u00a0(!headers_sent($filename,\u00a0$linenum))\u00a0{\u00a0\u00a0\u00a0\u00a0header('Location:\u00a0http:\/\/www.example.com\/');\u00a0\u00a0\u00a0\u00a0exit;\/\/\u00a0You\u00a0would\u00a0most\u00a0likely\u00a0trigger\u00a0an\u00a0error\u00a0here.}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Headers\u00a0already\u00a0sent\u00a0in\u00a0$filename\u00a0on\u00a0line\u00a0$linenum\\n\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cannot\u00a0redirect,\u00a0for\u00a0now\u00a0please\u00a0click\u00a0this\u00a0<a\u00a0\"\u00a0.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"href=\\\"http:\/\/www.example.com\\\">link<\/a>\u00a0instead\\n\";\u00a0\u00a0\u00a0\u00a0exit;}?>                         Notes   Note:          Headers will only be accessible and output when a SAPI that supports them     is in use.                 See Also            ob_start() - Turn on output buffering     trigger_error() - Generates a user-level error\/warning\/notice message     headers_list() - Returns a list of response headers sent (or ready to send)           header() - Send a raw HTTP header for a more detailed discussion of the      matters involved."},{"url":"http:\/\/www.php.net\/manual\/en\/function.bson-decode.php","title":"bson_decode","description":"bson_decode   (PECL mongo >=1.0.1)bson_decode \u2014 Deserializes a BSON object into a PHP array         Description       array bson_decode     ( string $bson    )        This function is very beta and entirely useless for 99% of users.  It is only    useful if you&#039;re doing something weird, such as writing your own driver on     top of the PHP driver.            Parameters                    bson                      The BSON to be deserialized.                                      Return Values       Returns the deserialized BSON object."},{"url":"http:\/\/www.php.net\/manual\/en\/function.setrawcookie.php","title":"setrawcookie","description":"setrawcookie   (PHP 5)setrawcookie \u2014 Send a cookie without urlencoding the cookie value          Description       bool setrawcookie     ( string $name    [, string $value    [, int $expire = 0    [, string $path    [, string $domain    [, bool $secure = false    [, bool $httponly = false   ]]]]]] )        setrawcookie() is exactly the same as    setcookie() except that the cookie value will not be    automatically urlencoded when sent to the browser.            Parameters       For parameter information, see the setcookie()    documentation.            Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    5.2.0                 The httponly parameter was added.                                            See Also            setcookie() - Send a cookie"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bson-encode.php","title":"bson_encode","description":"bson_encode   (PECL mongo >=1.0.1)bson_encode \u2014 Serializes a PHP variable into a BSON string         Description       string bson_encode     ( mixed $anything    )        This function is very beta and entirely useless for 99% of users.  It is only    useful if you&#039;re doing something weird, such as writing your own driver on     top of the PHP driver.            Parameters                    anything                      The variable to be serialized.                                      Return Values       Returns the serialized string."},{"url":"http:\/\/www.php.net\/manual\/en\/function.setcookie.php","title":"setcookie","description":"setcookie   (PHP 4, PHP 5)setcookie \u2014 Send a cookie          Description       bool setcookie     ( string $name    [, string $value    [, int $expire = 0    [, string $path    [, string $domain    [, bool $secure = false    [, bool $httponly = false   ]]]]]] )        setcookie() defines a cookie to be sent along with the    rest of the HTTP headers. Like other headers, cookies must be sent    before any output from your script (this is a    protocol restriction). This requires that you place calls to this function    prior to any output, including <html> and    <head> tags as well as any whitespace.          Once the cookies have been set, they can be accessed on the next page load    with the $_COOKIE or    $HTTP_COOKIE_VARS arrays.  Note,    superglobals    such as $_COOKIE became available in PHP 4.1.0.    Cookie    values also exist in $_REQUEST.            Parameters       All the arguments except the name argument are    optional. You may also replace an argument with an empty string    (\"\") in order to skip that argument.    Because the expire argument is integer, it cannot    be skipped with an empty string, use a zero (0)    instead.          \u00bb\u00a0RFC 6265 provides the normative    reference on how each setcookie() parameter is    interpreted.                 name                      The name of the cookie.                                value                      The value of the cookie.  This value is stored on the clients computer;        do not store sensitive information.  Assuming the        name is &#039;cookiename&#039;, this        value is retrieved through $_COOKIE['cookiename']                                expire                      The time the cookie expires.  This is a Unix timestamp so is        in number of seconds since the epoch.  In other words, you&#039;ll        most likely set this with the time() function        plus the number of seconds before you want it to expire.  Or        you might use mktime().        time()+60*60*24*30 will set the cookie to        expire in 30 days. If set to 0, or omitted, the cookie will expire at        the end of the session (when the browser closes).                      Note:                    You may notice the expire parameter takes on a          Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY          HH:MM:SS GMT, this is because PHP does this conversion          internally.                                                 path                      The path on the server in which the cookie will be available on.        If set to &#039;\/&#039;, the cookie will be available        within the entire domain.  If set to        &#039;\/foo\/&#039;, the cookie will only be available        within the \/foo\/ directory and all        sub-directories such as \/foo\/bar\/ of        domain.  The default value is the        current directory that the cookie is being set in.                                domain                      The domain that the cookie is available to. Setting the domain to        &#039;www.example.com&#039; will make the cookie        available in the www subdomain and higher subdomains.        Cookies available to a lower domain, such as        &#039;example.com&#039; will be available to higher subdomains,        such as &#039;www.example.com&#039;.                Older browsers still implementing the deprecated        \u00bb\u00a0RFC 2109 may require a leading        . to match all subdomains.                                secure                      Indicates that the cookie should only be transmitted over a        secure HTTPS connection from the client. When set to TRUE, the        cookie will only be set if a secure connection exists.        On the server-side, it&#039;s on the programmer to send this        kind of cookie only on secure connection (e.g. with respect to        $_SERVER[\"HTTPS\"]).                                httponly                      When TRUE the cookie will be made accessible only through the HTTP        protocol. This means that the cookie won&#039;t be accessible by        scripting languages, such as JavaScript. It has been suggested that        this setting can effectively help to reduce identity theft through        XSS attacks (although it is not supported by all browsers), but that        claim is often disputed. Added in PHP 5.2.0.        TRUE or FALSE                                     Return Values       If output exists prior to calling this function,    setcookie() will fail and return FALSE. If    setcookie() successfully runs, it will return TRUE.    This does not indicate whether the user accepted the cookie.            Examples       Some examples follow how to send cookies:         Example #1 setcookie() send example       <?php$value\u00a0=\u00a0'something\u00a0from\u00a0somewhere';setcookie(\"TestCookie\",\u00a0$value);setcookie(\"TestCookie\",\u00a0$value,\u00a0time()+3600);\u00a0\u00a0\/*\u00a0expire\u00a0in\u00a01\u00a0hour\u00a0*\/setcookie(\"TestCookie\",\u00a0$value,\u00a0time()+3600,\u00a0\"\/~rasmus\/\",\u00a0\"example.com\",\u00a01);?>                      Note that the value portion of the cookie will automatically be    urlencoded when you send the cookie, and when it is received, it    is automatically decoded and assigned to a variable by the same    name as the cookie name. If you don&#039;t want this, you can use    setrawcookie() instead if you are using PHP 5. To see    the contents of our test cookie in a script, simply use one of the    following examples:                 <?php\/\/\u00a0Print\u00a0an\u00a0individual\u00a0cookieecho\u00a0$_COOKIE[\"TestCookie\"];echo\u00a0$HTTP_COOKIE_VARS[\"TestCookie\"];\/\/\u00a0Another\u00a0way\u00a0to\u00a0debug\/test\u00a0is\u00a0to\u00a0view\u00a0all\u00a0cookiesprint_r($_COOKIE);?>                           Example #2 setcookie() delete example           When deleting a cookie you should assure that the expiration date      is in the past, to trigger the removal mechanism in your browser.      Examples follow how to delete cookies sent in previous example:            <?php\/\/\u00a0set\u00a0the\u00a0expiration\u00a0date\u00a0to\u00a0one\u00a0hour\u00a0agosetcookie\u00a0(\"TestCookie\",\u00a0\"\",\u00a0time()\u00a0-\u00a03600);setcookie\u00a0(\"TestCookie\",\u00a0\"\",\u00a0time()\u00a0-\u00a03600,\u00a0\"\/~rasmus\/\",\u00a0\"example.com\",\u00a01);?>                           Example #3 setcookie() and arrays           You may also set array cookies by using array notation in the      cookie name. This has the effect of setting as many cookies as      you have array elements, but when the cookie is received by your      script, the values are all placed in an array with the cookie&#039;s      name:            <?php\/\/\u00a0set\u00a0the\u00a0cookiessetcookie(\"cookie[three]\",\u00a0\"cookiethree\");setcookie(\"cookie[two]\",\u00a0\"cookietwo\");setcookie(\"cookie[one]\",\u00a0\"cookieone\");\/\/\u00a0after\u00a0the\u00a0page\u00a0reloads,\u00a0print\u00a0them\u00a0outif\u00a0(isset($_COOKIE['cookie']))\u00a0{\u00a0\u00a0\u00a0\u00a0foreach\u00a0($_COOKIE['cookie']\u00a0as\u00a0$name\u00a0=>\u00a0$value)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$name\u00a0=\u00a0htmlspecialchars($name);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a0htmlspecialchars($value);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$name\u00a0:\u00a0$value\u00a0<br\u00a0\/>\\n\";\u00a0\u00a0\u00a0\u00a0}}?>             The above example will output:       three : cookiethree two : cookietwo one : cookieone                      Changelog                                 Version        Description                                    5.2.0                 The httponly parameter was added.                                            Notes   Note:          You can use output buffering to send output prior to the     call of this function, with the overhead of all of your output to the     browser being buffered in the server until you send it. You can do this     by calling ob_start() and     ob_end_flush() in your script, or setting the     output_buffering configuration directive on in your     php.ini or server configuration files.          Note:          If the PHP directive register_globals     is set to on then cookie values will also be made into     variables.  In our examples below, $TestCookie will     exist.  It&#039;s recommended to use $_COOKIE.              Common Pitfalls:                      Cookies will not become visible until the next loading of a page that       the cookie should be visible for.  To test if a cookie was successfully       set, check for the cookie on a next loading page before the cookie       expires.  Expire time is set via the expire       parameter.  A nice way to debug the existence of cookies is by       simply calling print_r($_COOKIE);.                             Cookies must be deleted with the same parameters as they were set with.       If the value argument is an empty string, or FALSE, and all other arguments       match a previous call to setcookie, then the cookie with the specified       name will be deleted from the remote client.       This is internally achieved by setting value to &#039;deleted&#039; and expiration       time to one year in past.                             Because setting a cookie with a value of FALSE will try to delete the cookie,       you should not use boolean values. Instead, use 0 for FALSE       and 1 for TRUE.                             Cookies names can be set as array names and will be available to your       PHP scripts as arrays but separate cookies are stored on the user&#039;s       system. Consider explode() to set one cookie with       multiple names and values. It is not recommended to use       serialize() for this purpose, because it can result       in security holes.                         Multiple calls to setcookie() are performed in the order called.            See Also            header() - Send a raw HTTP header     setrawcookie() - Send a cookie without urlencoding the cookie value     cookies section     \u00bb\u00a0RFC 6265     \u00bb\u00a0RFC 2109"},{"url":"http:\/\/www.php.net\/manual\/en\/function.header.php","title":"header","description":"header   (PHP 4, PHP 5)header \u2014 Send a raw HTTP header          Description       void header     ( string $string    [, bool $replace = true    [, int $http_response_code   ]] )        header() is used to send a raw HTTP    header. See the \u00bb\u00a0HTTP\/1.1 specification    for more information on HTTP headers.          Remember that header() must be called before any    actual output is sent, either by normal HTML tags, blank lines in a    file, or from PHP. It is a very common error to read code with    include(), or require(),     functions, or another file access function, and have spaces or empty    lines that are output before header() is called.    The same problem exists when using a single PHP\/HTML file.           <html><?php\/*\u00a0This\u00a0will\u00a0give\u00a0an\u00a0error.\u00a0Note\u00a0the\u00a0output\u00a0*\u00a0above,\u00a0which\u00a0is\u00a0before\u00a0the\u00a0header()\u00a0call\u00a0*\/header('Location:\u00a0http:\/\/www.example.com\/');?>                        Parameters                    string                      The header string.                      There are two special-case header calls.  The first is a header        that starts with the string \"HTTP\/\" (case is not        significant), which will be used to figure out the HTTP status        code to send. For example, if you have configured Apache to        use a PHP script to handle requests for missing files (using        the ErrorDocument directive), you may want to        make sure that your script generates the proper status code.                                 <?phpheader(\"HTTP\/1.0\u00a0404\u00a0Not\u00a0Found\");?>                                          For FastCGI you must use the following for a 404 response:                   <?phpheader(\"Status:\u00a0404\u00a0Not\u00a0Found\");?>                                                   The second special case is the \"Location:\" header.  Not only does        it send this header back to the browser, but it also returns a        REDIRECT (302) status code to the browser        unless the 201 or        a 3xx status code has already been set.                                 <?phpheader(\"Location:\u00a0http:\/\/www.example.com\/\");\u00a0\/*\u00a0Redirect\u00a0browser\u00a0*\/\/*\u00a0Make\u00a0sure\u00a0that\u00a0code\u00a0below\u00a0does\u00a0not\u00a0get\u00a0executed\u00a0when\u00a0we\u00a0redirect.\u00a0*\/exit;?>                                                    replace                      The optional replace parameter indicates        whether the header should replace a previous similar header, or        add a second header of the same type.  By default it will replace,        but if you pass in FALSE as the second argument you can force        multiple headers of the same type.  For example:                                 <?phpheader('WWW-Authenticate:\u00a0Negotiate');header('WWW-Authenticate:\u00a0NTLM',\u00a0false);?>                                                    http_response_code                      Forces the HTTP response code to the specified value. Note that this         parameter only has an effect if the string is         not empty.                                     Return Values       No value is returned.            Changelog                                 Version        Description                                    4.4.2 and 5.1.2                 This function now prevents more than one header to be sent at once as         a protection against header injection attacks.                               4.3.0                 The http_response_code parameter was added.                               4.0.4                 The replace parameter was added.                                            Examples            Example #1 Download dialog           If you want the user to be prompted to save the data you are      sending, such as a generated PDF file, you can use the \u00bb\u00a0Content-Disposition header to      supply a recommended filename and force the browser to display the      save dialog.            <?php\/\/\u00a0We'll\u00a0be\u00a0outputting\u00a0a\u00a0PDFheader('Content-type:\u00a0application\/pdf');\/\/\u00a0It\u00a0will\u00a0be\u00a0called\u00a0downloaded.pdfheader('Content-Disposition:\u00a0attachment;\u00a0filename=\"downloaded.pdf\"');\/\/\u00a0The\u00a0PDF\u00a0source\u00a0is\u00a0in\u00a0original.pdfreadfile('original.pdf');?>                           Example #2 Caching directives           PHP scripts often generate dynamic content that must not be cached      by the client browser or any proxy caches between the server and the      client browser. Many proxies and clients can be forced to disable      caching with:            <?phpheader(\"Cache-Control:\u00a0no-cache,\u00a0must-revalidate\");\u00a0\/\/\u00a0HTTP\/1.1header(\"Expires:\u00a0Sat,\u00a026\u00a0Jul\u00a01997\u00a005:00:00\u00a0GMT\");\u00a0\/\/\u00a0Date\u00a0in\u00a0the\u00a0past?>                   Note:                You may find that your pages aren&#039;t cached even if you don&#039;t        output all of the headers above. There are a number of options        that users may be able to set for their browser that change its        default caching behavior. By sending the headers above, you should        override any settings that may otherwise cause the output of your        script to be cached.                      Additionally, session_cache_limiter() and        the session.cache_limiter configuration        setting can be used to automatically generate the correct        caching-related headers when sessions are being used.                                  Notes   Note:          Headers will only be accessible and output when a SAPI that supports them     is in use.           Note:          You can use output buffering to get around this problem,     with the overhead of all of your output to the browser being buffered     in the server until you send it. You can do this by calling     ob_start() and ob_end_flush()     in your script, or setting the output_buffering     configuration directive on in your php.ini or     server configuration files.          Note:          The HTTP status header line will always be the first sent     to the client, regardless of the actual header()     call being the first or not. The status may be overridden     by calling header() with a new status line     at any time unless the HTTP headers have already been sent.          Note:          There is a bug in Microsoft Internet Explorer 4.01 that prevents     this from working. There is no workaround. There is also a bug     in Microsoft Internet Explorer 5.5 that interferes with this,     which can be resolved by upgrading to Service Pack 2 or later.          Note:          If safe mode is enabled the     uid of the script is added to the realm part     of the WWW-Authenticate header if you set     this header (used for HTTP Authentication).          Note:          HTTP\/1.1 requires an absolute URI as argument to     \u00bb\u00a0Location:     including the scheme, hostname and absolute path, but     some clients accept relative URIs. You can usually use     $_SERVER['HTTP_HOST'],     $_SERVER['PHP_SELF']     and dirname() to make an absolute URI from a     relative one yourself:             <?php\/*\u00a0Redirect\u00a0to\u00a0a\u00a0different\u00a0page\u00a0in\u00a0the\u00a0current\u00a0directory\u00a0that\u00a0was\u00a0requested\u00a0*\/$host\u00a0\u00a0=\u00a0$_SERVER['HTTP_HOST'];$uri\u00a0\u00a0\u00a0=\u00a0rtrim(dirname($_SERVER['PHP_SELF']),\u00a0'\/\\\\');$extra\u00a0=\u00a0'mypage.php';header(\"Location:\u00a0http:\/\/$host$uri\/$extra\");exit;?>                        Note:          Session ID is not passed with Location header even if session.use_trans_sid is     enabled. It must by passed manually using SID     constant.                See Also            headers_sent() - Checks if or where headers have been sent     setcookie() - Send a cookie           The section on HTTP      authentication"},{"url":"http:\/\/www.php.net\/manual\/en\/function.closelog.php","title":"closelog","description":"closelog   (PHP 4, PHP 5)closelog \u2014 Close connection to system logger          Description       bool closelog     ( void    )        closelog() closes the descriptor being used to write to    the system logger.  The use of closelog() is optional.            Return Values       Returns TRUE on success or FALSE on failure.            See Also            syslog() - Generate a system log message     openlog() - Open connection to system logger"},{"url":"http:\/\/www.php.net\/manual\/en\/function.checkdnsrr.php","title":"checkdnsrr","description":"checkdnsrr   (PHP 4, PHP 5)checkdnsrr \u2014 Check DNS records corresponding to a given Internet host name or IP address          Description       bool checkdnsrr     ( string $host    [, string $type = \"MX\"   ] )        Searches DNS for records of type type    corresponding to host.             Parameters                    host                      host may either be the IP address in        dotted-quad notation or the host name.                                type                      type may be any one of: A, MX, NS, SOA,        PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.                                     Return Values       Returns TRUE if any records are found; returns FALSE if no records    were found or if an error occurred.            Changelog                                 Version        Description                                    5.3.0                  This function is now available on Windows platforms.                               5.2.4                 TXT type was added.                               5.0.0                 AAAA type was added.                                            Notes   Note:          For compatibility with Windows before this was implemented, then try the     \u00bb\u00a0PEAR class     \u00bb\u00a0Net_DNS.                See Also            dns_get_record() - Fetch DNS Resource Records associated with a hostname     getmxrr() - Get MX records corresponding to a given Internet host name     gethostbyaddr() - Get the Internet host name corresponding to a given IP address     gethostbyname() - Get the IPv4 address corresponding to a given Internet host name     gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host    name     the named(8) manual page"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dns-check-record.php","title":"dns_check_record","description":"dns_check_record   (PHP 5)dns_check_record \u2014 Alias of checkdnsrr()          Description       This function is an alias of:     checkdnsrr()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.dns-get-mx.php","title":"dns_get_mx","description":"dns_get_mx   (PHP 5)dns_get_mx \u2014 Alias of getmxrr()          Description       This function is an alias of:     getmxrr()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.define-syslog-variables.php","title":"define_syslog_variables","description":"define_syslog_variables   (PHP 4, PHP 5)define_syslog_variables \u2014 Initializes all syslog related variables          Description       void define_syslog_variables     ( void    )        Initializes all variables used in the syslog functions.            Return Values       No value is returned.          Syslog variables                      Variable       Constant equal       Meaning       Notes                               $LOG_EMERG       LOG_EMERG       System is unusable       \u00a0                    $LOG_ALERT       LOG_ALERT       Immediate action required       \u00a0                    $LOG_CRIT       LOG_CRIT       Critical conditions       \u00a0                    $LOG_ERR       LOG_ERR       \u00a0       \u00a0                    $LOG_WARNING       LOG_WARNING       \u00a0       \u00a0                    $LOG_NOTICE       LOG_NOTICE       \u00a0       \u00a0                    $LOG_INFO       LOG_INFO       \u00a0       \u00a0                    $LOG_DEBUG       LOG_DEBUG       \u00a0       \u00a0                    $LOG_KERN       LOG_KERN       \u00a0       \u00a0                    $LOG_USER       LOG_USER       Genetic user level       \u00a0                    $LOG_MAIL       LOG_MAIL       Log to email       \u00a0                    $LOG_DAEMON       LOG_DAEMON       Other system daemons       \u00a0                    $LOG_AUTH       LOG_AUTH       \u00a0       \u00a0                    $LOG_SYSLOG       LOG_SYSLOG       \u00a0       Not available on Netware                    $LOG_LPR       LOG_LPR       \u00a0       \u00a0                    $LOG_NEWS       LOG_NEWS       Usenet new       Not available on HP-UX                    $LOG_CRON       LOG_CRON       \u00a0       Not available on all platforms                    $LOG_AUTHPRIV       LOG_AUTHPRIV       \u00a0       Not available on AIX                    $LOG_LOCAL0       LOG_LOCAL0       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL1       LOG_LOCAL1       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL2       LOG_LOCAL2       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL3       LOG_LOCAL3       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL4       LOG_LOCAL4       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL5       LOG_LOCAL5       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL6       LOG_LOCAL6       \u00a0       Not available on Windows and Netware                    $LOG_LOCAL7       LOG_LOCAL7       \u00a0       Not available on Windows and Netware                    $LOG_PID       LOG_PID       \u00a0       \u00a0                    $LOG_CONS       LOG_CONS       \u00a0       \u00a0                    $LOG_ODELAY       LOG_ODELAY       \u00a0       \u00a0                    $LOG_NDELAY       LOG_NDELAY       \u00a0       \u00a0                    $LOG_NOWAIT       LOG_NOWAIT       \u00a0       Not available on BeOS                    $LOG_PERROR       LOG_PERROR       \u00a0       Not available on AIX                       WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Examples            Example #1 define_syslog_variables() example       <?php\/\/\u00a0Check\u00a0if\u00a0syslog\u00a0variables\u00a0already\u00a0is\u00a0definedif(!get_cfg_var('define_syslog_variables')){\u00a0\u00a0\u00a0\u00a0define_syslog_variables();}\/\/\u00a0Open\u00a0the\u00a0logopenlog('',\u00a0$LOG_ODELAY,\u00a0$LOG_MAIL\u00a0|\u00a0$LOG_USER);\/\/\u00a0Continue\u00a0script\u00a0...?>                        Changelog                                 Version        Description                                           5.3.0                 This function now throws an E_DEPRECATED notice.                                            See Also            openlog() - Open connection to system logger     syslog() - Generate a system log message     closelog() - Close connection to system logger"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dns-get-record.php","title":"dns_get_record","description":"dns_get_record   (PHP 5)dns_get_record \u2014 Fetch DNS Resource Records associated with a hostname          Description       array dns_get_record     ( string $hostname    [, int $type = DNS_ANY    [, array &$authns    [, array &$addtl   ]]] )        Fetch DNS Resource Records associated with the given    hostname.            Parameters                    hostname                      hostname should be a valid DNS hostname such        as \"www.example.com\". Reverse lookups can be generated        using in-addr.arpa notation, but        gethostbyaddr() is more suitable for        the majority of reverse lookups.              Note:                  Per DNS standards, email addresses are given in user.host format (for         example: hostmaster.example.com as opposed to hostmaster@example.com),         be sure to check this value and modify if necessary before using it         with a functions such as mail().                                        type                      By default, dns_get_record() will search for any        resource records associated with hostname.         To limit the query, specify the optional type        parameter. May be any one of the following:        DNS_A, DNS_CNAME,        DNS_HINFO, DNS_MX,        DNS_NS, DNS_PTR,        DNS_SOA, DNS_TXT,        DNS_AAAA, DNS_SRV,        DNS_NAPTR, DNS_A6,        DNS_ALL or DNS_ANY.              Note:                  Because of eccentricities in the performance of libresolv         between platforms, DNS_ANY will not         always return every record, the slower DNS_ALL         will collect all records more reliably.                                        authns                      Passed by reference and, if given, will be populated with Resource        Records for the Authoritative Name Servers.                                addtl                      Passed by reference and, if given, will be populated with any        Additional Records.                                     Return Values       This function returns an array of associative arrays,     or FALSE on failure. Each associative array contains    at minimum the following keys:         Basic DNS attributes                          Attribute        Meaning                                    host                 The record in the DNS namespace to which the rest of the associated data refers.                               class                 dns_get_record() only returns Internet class records and as         such this parameter will always return IN.                               type                 String containing the record type.  Additional attributes will also be contained         in the resulting array dependant on the value of type. See table below.                               ttl                 \"Time To Live\" remaining for this record. This will not equal         the record&#039;s original ttl, but will rather equal the original ttl minus whatever         length of time has passed since the authoritative name server was queried.                                               Other keys in associative arrays dependant on &#039;type&#039;                          Type        Extra Columns                                    A                 ip: An IPv4 addresses in dotted decimal notation.                               MX                 pri: Priority of mail exchanger.         Lower numbers indicate greater priority.         target: FQDN of the mail exchanger.         See also dns_get_mx().                               CNAME                 target: FQDN of location in DNS namespace to which         the record is aliased.                               NS                 target: FQDN of the name server which is authoritative         for this hostname.                               PTR                 target: Location within the DNS namespace to which         this record points.                                TXT                 txt: Arbitrary string data associated with this record.                               HINFO                 cpu: IANA number designating the CPU of the machine         referenced by this record.         os: IANA number designating the Operating System on         the machine referenced by this record.         See IANA&#039;s \u00bb\u00a0Operating System         Names for the meaning of these values.                               SOA                 mname: FQDN of the machine from which the resource         records originated.         rname: Email address of the administrative contain         for this domain.         serial: Serial # of this revision of the requested         domain.         refresh: Refresh interval (seconds) secondary name         servers should use when updating remote copies of this domain.         retry: Length of time (seconds) to wait after a         failed refresh before making a second attempt.         expire: Maximum length of time (seconds) a secondary         DNS server should retain remote copies of the zone data without a         successful refresh before discarding.         minimum-ttl: Minimum length of time (seconds) a         client can continue to use a DNS resolution before it should request         a new resolution from the server.  Can be overridden by individual         resource records.                               AAAA                 ipv6: IPv6 address                               A6(PHP >= 5.1.0)                 masklen: Length (in bits) to inherit from the target         specified by chain.         ipv6: Address for this specific record to merge with         chain.         chain: Parent record to merge with         ipv6 data.                               SRV                 pri: (Priority) lowest priorities should be used first.         weight: Ranking to weight which of commonly prioritized         targets should be chosen at random.         target and port: hostname and port         where the requested service can be found.         For additional information see: \u00bb\u00a0RFC 2782                               NAPTR                 order and pref: Equivalent to         pri and weight above.         flags, services, regex,         and replacement: Parameters as defined by         \u00bb\u00a0RFC 2915.                                            Changelog                                 Version        Description                                    5.3.0                  This function is now available on Windows platforms.                               5.3.0                 Prior to this release, if the authns parameter         was given, the addtl parameter was also         required.                                            Examples            Example #1 Using dns_get_record()       <?php$result\u00a0=\u00a0dns_get_record(\"php.net\");print_r($result);?>             The above example will output something similar to:       Array (     [0] => Array         (             [host] => php.net             [type] => MX             [pri] => 5             [target] => pair2.php.net             [class] => IN             [ttl] => 6765         )      [1] => Array         (             [host] => php.net             [type] => A             [ip] => 64.246.30.37             [class] => IN             [ttl] => 8125         )  )                   Example #2 Using dns_get_record() and DNS_ANY           Since it&#039;s very common to want the IP address of a mail server      once the MX record has been resolved, dns_get_record()      also returns an array in addtl which      contains associate records.  authns      is returned as well containing a list of authoritative name      servers.            <?php\/*\u00a0Request\u00a0\"ANY\"\u00a0record\u00a0for\u00a0php.net,\u00a0\u00a0\u00a0and\u00a0create\u00a0$authns\u00a0and\u00a0$addtl\u00a0arrays\u00a0\u00a0\u00a0containing\u00a0list\u00a0of\u00a0name\u00a0servers\u00a0and\u00a0\u00a0\u00a0any\u00a0additional\u00a0records\u00a0which\u00a0go\u00a0with\u00a0\u00a0\u00a0them\u00a0*\/$result\u00a0=\u00a0dns_get_record(\"php.net\",\u00a0DNS_ANY,\u00a0$authns,\u00a0$addtl);echo\u00a0\"Result\u00a0=\u00a0\";print_r($result);echo\u00a0\"Auth\u00a0NS\u00a0=\u00a0\";print_r($authns);echo\u00a0\"Additional\u00a0=\u00a0\";print_r($addtl);?>             The above example will output something similar to:       Result = Array (     [0] => Array         (             [host] => php.net             [type] => MX             [pri] => 5             [target] => pair2.php.net             [class] => IN             [ttl] => 6765         )      [1] => Array         (             [host] => php.net             [type] => A             [ip] => 64.246.30.37             [class] => IN             [ttl] => 8125         )  ) Auth NS = Array (     [0] => Array         (             [host] => php.net             [type] => NS             [target] => remote1.easydns.com             [class] => IN             [ttl] => 10722         )      [1] => Array         (             [host] => php.net             [type] => NS             [target] => remote2.easydns.com             [class] => IN             [ttl] => 10722         )      [2] => Array         (             [host] => php.net             [type] => NS             [target] => ns1.easydns.com             [class] => IN             [ttl] => 10722         )      [3] => Array         (             [host] => php.net             [type] => NS             [target] => ns2.easydns.com             [class] => IN             [ttl] => 10722         )  ) Additional = Array (     [0] => Array         (             [host] => pair2.php.net             [type] => A             [ip] => 216.92.131.5             [class] => IN             [ttl] => 6766         )      [1] => Array         (             [host] => remote1.easydns.com             [type] => A             [ip] => 64.39.29.212             [class] => IN             [ttl] => 100384         )      [2] => Array         (             [host] => remote2.easydns.com             [type] => A             [ip] => 212.100.224.80             [class] => IN             [ttl] => 81241         )      [3] => Array         (             [host] => ns1.easydns.com             [type] => A             [ip] => 216.220.40.243             [class] => IN             [ttl] => 81241         )      [4] => Array         (             [host] => ns2.easydns.com             [type] => A             [ip] => 216.220.40.244             [class] => IN             [ttl] => 81241         )  )                      Notes   Note:          For compatibility with versions before PHP 5.3.0 on some operating systems,     try the \u00bb\u00a0PEAR class     \u00bb\u00a0Net_DNS.                See Also            dns_get_mx() - Alias of getmxrr     dns_check_record() - Alias of checkdnsrr"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostbynamel.php","title":"gethostbynamel","description":"gethostbynamel   (PHP 4, PHP 5)gethostbynamel \u2014     Get a list of IPv4 addresses corresponding to a given Internet host    name           Description       array gethostbynamel     ( string $hostname    )        Returns a list of IPv4 addresses to which the Internet host    specified by hostname resolves.             Parameters                    hostname                      The host name.                                     Return Values       Returns an array of IPv4 addresses or FALSE if    hostname could not be resolved.            Examples            Example #1 gethostbynamel() example       <?php$hosts\u00a0=\u00a0gethostbynamel('www.example.com');print_r($hosts);?>             The above example will output:       Array (     [0] => 192.0.34.166 )                      See Also            gethostbyname() - Get the IPv4 address corresponding to a given Internet host name     gethostbyaddr() - Get the Internet host name corresponding to a given IP address     checkdnsrr() - Check DNS records corresponding to a given Internet host name or IP address     getmxrr() - Get MX records corresponding to a given Internet host name     the named(8) manual page"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostname.php","title":"gethostname","description":"gethostname   (PHP >= 5.3.0)gethostname \u2014 Gets the host name          Description       string gethostname     ( void    )        gethostname() gets the standard host name for     the local machine.            Return Values       Returns a string with the hostname on success, otherwise FALSE is     returned.            Examples            Example #1 A simple gethostname() example       <?phpecho\u00a0gethostname();\u00a0\/\/\u00a0may\u00a0output\u00a0e.g,:\u00a0sandie\/\/\u00a0Or,\u00a0an\u00a0option\u00a0that\u00a0also\u00a0works\u00a0before\u00a0PHP\u00a05.3echo\u00a0php_uname('n');\u00a0\/\/\u00a0may\u00a0output\u00a0e.g,:\u00a0sandie?>                        See Also            gethostbyname() - Get the IPv4 address corresponding to a given Internet host name     gethostbyaddr() - Get the Internet host name corresponding to a given IP address     php_uname() - Returns information about the operating system PHP is running on"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostbyaddr.php","title":"gethostbyaddr","description":"gethostbyaddr   (PHP 4, PHP 5)gethostbyaddr \u2014     Get the Internet host name corresponding to a given IP address           Description       string gethostbyaddr     ( string $ip_address    )        Returns the host name of the Internet host specified by    ip_address.            Parameters                    ip_address                      The host IP address.                                     Return Values       Returns the host name or the unmodified ip_address    on failure.            Examples            Example #1 A simple gethostbyaddr() example       <?php$hostname\u00a0=\u00a0gethostbyaddr($_SERVER['REMOTE_ADDR']);echo\u00a0$hostname;?>                        See Also            gethostbyname() - Get the IPv4 address corresponding to a given Internet host name     gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host    name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostbyname.php","title":"gethostbyname","description":"gethostbyname   (PHP 4, PHP 5)gethostbyname \u2014     Get the IPv4 address corresponding to a given Internet host name            Description       string gethostbyname     ( string $hostname    )        Returns the IPv4 address of the Internet host specified by    hostname.            Parameters                    hostname                      The host name.                                     Return Values       Returns the IPv4 address or a string containing the unmodified    hostname on failure.            Examples            Example #1 A simple gethostbyname() example       <?php$ip\u00a0=\u00a0gethostbyname('www.example.com');echo\u00a0$ip;?>                        See Also            gethostbyaddr() - Get the Internet host name corresponding to a given IP address     gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host    name     inet_pton() - Converts a human readable IP address to its packed in_addr representation     inet_ntop() - Converts a packed internet address to a human readable representation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getprotobyname.php","title":"getprotobyname","description":"getprotobyname   (PHP 4, PHP 5)getprotobyname \u2014 Get protocol number associated with protocol name          Description       int getprotobyname     ( string $name    )        getprotobyname() returns the protocol number    associated with the protocol name as per    \/etc\/protocols.            Parameters                    name                      The protocol name.                                     Return Values       Returns the protocol number or -1 if the protocol is not found.            Examples            Example #1 getprotobyname() example       <?php$protocol\u00a0=\u00a0'tcp';$get_prot\u00a0=\u00a0getprotobyname($protocol);if\u00a0($get_prot\u00a0==\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Invalid\u00a0Protocol';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Protocol\u00a0#'\u00a0.\u00a0$get_prot;}?>                        See Also            getprotobynumber() - Get protocol name associated with protocol number"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getprotobynumber.php","title":"getprotobynumber","description":"getprotobynumber   (PHP 4, PHP 5)getprotobynumber \u2014 Get protocol name associated with protocol number          Description       string getprotobynumber     ( int $number    )        getprotobynumber() returns the protocol name    associated with protocol number as per    \/etc\/protocols.            Parameters                    number                      The protocol number.                                     Return Values       Returns the protocol name as a string,  or FALSE on failure.            See Also            getprotobyname() - Get protocol number associated with protocol name"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getservbyname.php","title":"getservbyname","description":"getservbyname   (PHP 4, PHP 5)getservbyname \u2014 Get port number associated with an Internet service and protocol          Description       int getservbyname     ( string $service    , string $protocol    )        getservbyname() returns the Internet port    which corresponds to service for the    specified protocol as per    \/etc\/services.            Parameters                    service                      The Internet service name, as a string.                                protocol                      protocol is either \"tcp\"        or \"udp\" (in lowercase).                                     Return Values       Returns the port number, or FALSE if service or    protocol is not found.            Examples            Example #1 getservbyname() example       <?php$services\u00a0=\u00a0array('http',\u00a0'ftp',\u00a0'ssh',\u00a0'telnet',\u00a0'imap','smtp',\u00a0'nicname',\u00a0'gopher',\u00a0'finger',\u00a0'pop3',\u00a0'www');foreach\u00a0($services\u00a0as\u00a0$service)\u00a0{\u00a0\u00a0\u00a0\u00a0$port\u00a0=\u00a0getservbyname($service,\u00a0'tcp');\u00a0\u00a0\u00a0\u00a0echo\u00a0$service\u00a0.\u00a0\":\u00a0\"\u00a0.\u00a0$port\u00a0.\u00a0\"<br\u00a0\/>\\n\";}?>                        See Also            getservbyport() - Get Internet service which corresponds to port and protocol           \u00bb\u00a0http:\/\/www.iana.org\/assignments\/port-numbers      for a complete list of port numbers."},{"url":"http:\/\/www.php.net\/manual\/en\/function.getservbyport.php","title":"getservbyport","description":"getservbyport   (PHP 4, PHP 5)getservbyport \u2014 Get Internet service which corresponds to port and protocol          Description       string getservbyport     ( int $port    , string $protocol    )        getservbyport() returns the Internet service    associated with port for the specified    protocol as per \/etc\/services.            Parameters                    port                      The port number.                                protocol                      protocol is either \"tcp\"        or \"udp\" (in lowercase).                                     Return Values       Returns the Internet service name as a string.            See Also            getservbyname() - Get port number associated with an Internet service and protocol"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getmxrr.php","title":"getmxrr","description":"getmxrr   (PHP 4, PHP 5)getmxrr \u2014 Get MX records corresponding to a given Internet host name          Description       bool getmxrr     ( string $hostname    , array &$mxhosts    [, array &$weight   ] )        Searches DNS for MX records corresponding to     hostname.             Parameters                    hostname                      The Internet host name.                                mxhosts                      A list of the MX records found is placed into the array        mxhosts.                                 weight                      If the weight array is given, it will be filled        with the weight information gathered.                                     Return Values       Returns TRUE if any records are found; returns FALSE if no records    were found or if an error occurred.            Changelog                                 Version        Description                                    5.3.0                  This function is now available on Windows platforms.                                            Notes   Note:          This function should not be used for the purposes of address     verification.  Only the mailexchangers found in DNS are returned,     however, according to \u00bb\u00a0RFC 2821     when no mail exchangers are listed, hostname     itself should be used as the only mail exchanger with a priority of     0.          Note:          For compatibility with Windows before this was implemented, then try the     \u00bb\u00a0PEAR class     \u00bb\u00a0Net_DNS.                See Also            checkdnsrr() - Check DNS records corresponding to a given Internet host name or IP address     dns_get_record() - Fetch DNS Resource Records associated with a hostname     gethostbyname() - Get the IPv4 address corresponding to a given Internet host name     gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host    name     gethostbyaddr() - Get the Internet host name corresponding to a given IP address     the named(8) manual page"},{"url":"http:\/\/www.php.net\/manual\/en\/function.header-remove.php","title":"header_remove","description":"header_remove   (PHP 5 >= 5.3.0)header_remove \u2014 Remove previously set headers         Description       void header_remove     ([ string $name   ] )        Removes an HTTP header previously set using header().            Parameters                    name                      The header name to be removed.              Note:                  This parameter is case-insensitive.                                             Return Values       No value is returned.            Examples            Example #1 Unsetting specific header.       <?phpheader(\"X-Foo:\u00a0Bar\");header(\"X-Bar:\u00a0Baz\");header_remove(\"X-Foo\");\u00a0?>             The above example will output something similar to:       X-Bar: Baz                   Example #2 Unsetting all previously set headers.       <?phpheader(\"X-Foo:\u00a0Bar\");header(\"X-Bar:\u00a0Baz\");header_remove();\u00a0?>             The above example will output something similar to:                            Notes   Caution         This function will remove all headers set by PHP,     including cookies, session and the X-Powered-By headers.          Note:          Headers will only be accessible and output when a SAPI that supports them     is in use.                 See Also            header() - Send a raw HTTP header     headers_sent() - Checks if or where headers have been sent"},{"url":"http:\/\/www.php.net\/manual\/en\/function.header-register-callback.php","title":"header_register_callback","description":"header_register_callback   (No version information available, might only be in SVN)header_register_callback \u2014 Call a header function         Description       bool header_register_callback     ( callback $callback    )        Registers a function that will be called when PHP starts sending output.          The callback is executed just after PHP prepares all    headers to be sent, and before any other output is sent, creating a window    to manipulate the outgoing headers before being sent.            Parameters              callback                   Function called just before the headers are sent. It gets no parameters       and the return value is ignored.                              Return Values       Returns TRUE on success or FALSE on failure.             Examples       Example #1 header_register_callback() example      <?phpheader('Content-Type:\u00a0text\/plain');header('X-Test:\u00a0foo');function\u00a0foo()\u00a0{\u00a0foreach\u00a0(headers_list()\u00a0as\u00a0$header)\u00a0{\u00a0\u00a0\u00a0if\u00a0(strpos($header,\u00a0'X-Powered-By:')\u00a0!==\u00a0false)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0header_remove('X-Powered-By');\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0header_remove('X-Test');\u00a0}}$result\u00a0=\u00a0header_register_callback('foo');echo\u00a0\"a\";?>           The above example will output something similar to:      Content-Type: text\/plain  a                 Notes       header_register_callback() is executed just as the    headers are about to be sent out, so any output from this function can    break output.      Note:          Headers will only be accessible and output when a SAPI that supports them     is in use.                 See Also       headers_list() - Returns a list of response headers sent (or ready to send)    header_remove() - Remove previously set headers    header() - Send a raw HTTP header"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-response-code.php","title":"http_response_code","description":"http_response_code   (No version information available, might only be in SVN)http_response_code \u2014 Get or Set the HTTP response code         Description       int http_response_code     ([ int $response_code   ] )       If you pass no parameters then http_response_code will get the current status code.   If you pass a parameter it will set the response code.             Parameters                    response_code                      The optional response_code will set the response code.                                 <?phphttp_response_code(404);?>                                                            Return Values       The current response code. By default the return value is int(200).            Examples            Example #1 Examples using headers_list()       <?php\/\/\u00a0Get\u00a0the\u00a0current\u00a0default\u00a0response\u00a0codevar_dump(http_response_code());\u00a0\/\/\u00a0int(200)\/\/\u00a0Set\u00a0our\u00a0response\u00a0codehttp_response_code(404);\/\/\u00a0Get\u00a0our\u00a0new\u00a0response\u00a0codevar_dump(http_response_code());\u00a0\/\/\u00a0int(404)?>             The above example will output:                 See Also            header() - Send a raw HTTP header     headers_list() - Returns a list of response headers sent (or ready to send)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.inet-pton.php","title":"inet_pton","description":"inet_pton   (PHP 5 >= 5.1.0)inet_pton \u2014 Converts a human readable IP address to its packed in_addr representation          Description       string inet_pton     ( string $address    )        This function converts a human readable IPv4 or IPv6 address (if PHP    was built with IPv6 support enabled) into an address family appropriate    32bit or 128bit binary structure.            Parameters                    address                      A human readable IPv4 or IPv6 address.                                     Return Values       Returns the in_addr representation of the given    address, or FALSE if a syntactically invalid    address is given (for example, an IPv4 address    without dots or an IPv6 address without colons).            Examples            Example #1 inet_pton() Example        <?php$in_addr\u00a0=\u00a0inet_pton('127.0.0.1');\u00a0$in6_addr\u00a0=\u00a0inet_pton('::1');?>                           Changelog                                 Version        Description                                    5.3.0                  This function is now available on Windows platforms.                                            See Also            ip2long() - Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address     long2ip() - Converts an (IPv4) Internet network address into a string in Internet standard dotted format     inet_ntop() - Converts a packed internet address to a human readable representation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.inet-ntop.php","title":"inet_ntop","description":"inet_ntop   (PHP 5 >= 5.1.0)inet_ntop \u2014 Converts a packed internet address to a human readable representation          Description       string inet_ntop     ( string $in_addr    )        This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP    was built with IPv6 support enabled) into an address family appropriate    string representation.              Parameters                    in_addr                      A 32bit IPv4, or 128bit IPv6 address.                                     Return Values       Returns a string representation of the address or FALSE on failure.            Examples            Example #1 inet_ntop() Example       <?php$packed\u00a0=\u00a0chr(127)\u00a0.\u00a0chr(0)\u00a0.\u00a0chr(0)\u00a0.\u00a0chr(1);$expanded\u00a0=\u00a0inet_ntop($packed);\/*\u00a0Outputs:\u00a0127.0.0.1\u00a0*\/echo\u00a0$expanded;$packed\u00a0=\u00a0str_repeat(chr(0),\u00a015)\u00a0.\u00a0chr(1);$expanded\u00a0=\u00a0inet_ntop($packed);\/*\u00a0Outputs:\u00a0::1\u00a0*\/echo\u00a0$expanded;?>                        Changelog                                 Version        Description                                    5.3.0                  This function is now available on Windows platforms.                                            See Also            long2ip() - Converts an (IPv4) Internet network address into a string in Internet standard dotted format     ip2long() - Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address     inet_pton() - Converts a human readable IP address to its packed in_addr representation"},{"url":"http:\/\/www.php.net\/manual\/en\/function.long2ip.php","title":"long2ip","description":"long2ip   (PHP 4, PHP 5)long2ip \u2014 Converts an (IPv4) Internet network address into a string in Internet standard dotted format          Description       string long2ip     ( string $proper_address    )        The function long2ip() generates an Internet address    in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address    representation.            Parameters                    proper_address                      A proper address representation.                                     Return Values       Returns the Internet IP address as a string.            See Also            ip2long() - Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fsockopen.php","title":"fsockopen","description":"fsockopen   (PHP 4, PHP 5)fsockopen \u2014 Open Internet or Unix domain socket connection          Description       resource fsockopen     ( string $hostname    [, int $port = -1    [, int &$errno    [, string &$errstr    [, float $timeout = ini_get(\"default_socket_timeout\")   ]]]] )        Initiates a socket connection to the resource specified by    hostname.          PHP supports targets in the Internet and Unix domains as described in    List of Supported Socket Transports.  A list of supported transports can also be    retrieved using stream_get_transports().          The socket will by default be opened in blocking mode.  You can    switch it to non-blocking mode by using    stream_set_blocking().           Parameters                    hostname                      If OpenSSL support is        installed, you may prefix the hostname        with either ssl:\/\/ or tls:\/\/ to        use an SSL or TLS client connection over TCP\/IP to connect to the        remote host.                                port                      The port number.                                errno                      If provided, holds the system level error number that occurred in the        system-level connect() call.                      If the value returned in errno is        0 and the function returned FALSE, it is an        indication that the error occurred before the         connect() call. This is most likely due to a        problem initializing the socket.                                errstr                      The error message as a string.                                timeout                      The connection timeout, in seconds.              Note:                  If you need to set a timeout for reading\/writing data over the         socket, use stream_set_timeout(), as the          timeout parameter to         fsockopen() only applies while connecting the         socket.                                            Return Values       fsockopen() returns a file pointer which may be used    together with the other file functions (such as    fgets(), fgetss(),    fwrite(), fclose(), and    feof()). If the call fails, it will return FALSE           Errors\/Exceptions       Throws E_WARNING if hostname is    not a valid domain.           Changelog                                 Version        Description                                    4.3.0                 Added support for the timeout parameter on         win32.                               4.3.0                 SSL and TLS over TCP\/IP support was added.                                           Examples            Example #1 fsockopen() Example       <?php$fp\u00a0=\u00a0fsockopen(\"www.example.com\",\u00a080,\u00a0$errno,\u00a0$errstr,\u00a030);if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$errstr\u00a0($errno)<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0$out\u00a0=\u00a0\"GET\u00a0\/\u00a0HTTP\/1.1\\r\\n\";\u00a0\u00a0\u00a0\u00a0$out\u00a0.=\u00a0\"Host:\u00a0www.example.com\\r\\n\";\u00a0\u00a0\u00a0\u00a0$out\u00a0.=\u00a0\"Connection:\u00a0Close\\r\\n\\r\\n\";\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0$out);\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($fp,\u00a0128);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0fclose($fp);}?>                           Example #2 Using UDP connection           The example below shows how to retrieve the day and time from the UDP      service \"daytime\" (port 13) in your own machine.            <?php$fp\u00a0=\u00a0fsockopen(\"udp:\/\/127.0.0.1\",\u00a013,\u00a0$errno,\u00a0$errstr);if\u00a0(!$fp)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"ERROR:\u00a0$errno\u00a0-\u00a0$errstr<br\u00a0\/>\\n\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"\\n\");\u00a0\u00a0\u00a0\u00a0echo\u00a0fread($fp,\u00a026);\u00a0\u00a0\u00a0\u00a0fclose($fp);}?>                       Notes   Note:          Depending on the environment, the Unix domain or the optional     connect timeout may not be available.          Warning         UDP sockets will sometimes appear to have opened without an error,     even if the remote host is unreachable.  The error will only     become apparent when you read or write data to\/from the socket.     The reason for this is because UDP is a \"connectionless\" protocol,     which means that the operating system does not try to establish     a link for the socket until it actually needs to send or receive data.          Note: When specifying a numerical IPv6 address (e.g. fe80::1), you must enclose the IP in square brackets\u2014for example, tcp:\/\/[fe80::1]:80.        See Also            pfsockopen() - Open persistent Internet or Unix domain socket connection     stream_set_blocking() - Set blocking\/non-blocking mode on a stream     stream_set_timeout() - Set timeout period on a stream     fgets() - Gets line from file pointer     fgetss() - Gets line from file pointer and strip HTML tags     fwrite() - Binary-safe file write     fclose() - Closes an open file pointer     feof() - Tests for end-of-file on a file pointer     The Curl extension"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openlog.php","title":"openlog","description":"openlog   (PHP 4, PHP 5)openlog \u2014 Open connection to system logger          Description       bool openlog     ( string $ident    , int $option    , int $facility    )        openlog() opens a connection to the system    logger for a program.             The use of openlog() is optional. It    will automatically be called by syslog() if    necessary, in which case ident will default    to FALSE.            Parameters                    ident                      The string ident is added to each message.                                 option                      The option argument is used to indicate        what logging options will be used when generating a log message.                 openlog() Options                                          Constant            Description                                                        LOG_CONS                         if there is an error while sending data to the system logger,             write directly to the system console                                               LOG_NDELAY                         open the connection to the logger immediately                                               LOG_ODELAY                         (default) delay opening the connection until the first             message is logged                                               LOG_PERROR            print log message also to standard error                                   LOG_PID            include PID with each message                                                You can use one or more of this options. When using multiple options        you need to OR them, i.e. to open the connection        immediately, write to the console and include the PID in each message,        you will use: LOG_CONS | LOG_NDELAY | LOG_PID                                facility                      The facility argument is used to specify what        type of program is logging the message. This allows you to specify        (in your machine&#039;s syslog configuration) how messages coming from        different facilities will be handled.                 openlog() Facilities                                          Constant            Description                                                        LOG_AUTH                         security\/authorization messages (use              LOG_AUTHPRIV instead             in systems where that constant is defined)                                               LOG_AUTHPRIV            security\/authorization messages (private)                                   LOG_CRON            clock daemon (cron and at)                                   LOG_DAEMON            other system daemons                                   LOG_KERN            kernel messages                                   LOG_LOCAL0 ... LOG_LOCAL7            reserved for local use, these are not available in Windows                                   LOG_LPR            line printer subsystem                                   LOG_MAIL            mail subsystem                                   LOG_NEWS            USENET news subsystem                                   LOG_SYSLOG            messages generated internally by syslogd                                   LOG_USER            generic user-level messages                                   LOG_UUCP            UUCP subsystem                                                      Note:                  LOG_USER is the only valid log type under Windows         operating systems                                             Return Values       Returns TRUE on success or FALSE on failure.            See Also            syslog() - Generate a system log message     closelog() - Close connection to system logger"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pfsockopen.php","title":"pfsockopen","description":"pfsockopen   (PHP 4, PHP 5)pfsockopen \u2014 Open persistent Internet or Unix domain socket connection          Description       resource pfsockopen     ( string $hostname    [, int $port = -1    [, int &$errno    [, string &$errstr    [, float $timeout = ini_get(\"default_socket_timeout\")   ]]]] )        This function behaves exactly as fsockopen() with the    difference that the connection is not closed after the script finishes.    It is the persistent version of fsockopen().            Parameters       For parameter information, see the fsockopen()    documentation.            See Also            fsockopen() - Open Internet or Unix domain socket connection"},{"url":"http:\/\/www.php.net\/manual\/en\/function.socket-get-status.php","title":"socket_get_status","description":"socket_get_status   (PHP 4, PHP 5)socket_get_status \u2014 Alias of stream_get_meta_data()         Description       This function is an alias of:     stream_get_meta_data()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.socket-set-timeout.php","title":"socket_set_timeout","description":"socket_set_timeout   (PHP 4, PHP 5)socket_set_timeout \u2014 Alias of stream_set_timeout()          Description       This function is an alias of:     stream_set_timeout()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.socket-set-blocking.php","title":"socket_set_blocking","description":"socket_set_blocking   (PHP 4, PHP 5)socket_set_blocking \u2014 Alias of stream_set_blocking()          Description       This function is an alias of:      stream_set_blocking()."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-alarm.php","title":"pcntl_alarm","description":"pcntl_alarm   (PHP 4 >= 4.3.0, PHP 5)pcntl_alarm \u2014 Set an alarm clock for delivery of a signal          Description       int pcntl_alarm     ( int $seconds    )        Creates a timer that will send a SIGALRM signal to    the process after the given number of seconds.    Any call to pcntl_alarm() will cancel any previously    set alarm.            Parameters                    seconds                      The number of seconds to wait. If seconds is        zero, no new alarm is created.                                     Return Values       Returns the time in seconds that any previously scheduled alarm had    remaining before it was to be delivered, or 0 if there    was no previously scheduled alarm."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-exec.php","title":"pcntl_exec","description":"pcntl_exec   (PHP 4 >= 4.2.0, PHP 5)pcntl_exec \u2014 Executes specified program in current process space          Description       void pcntl_exec     ( string $path    [, array $args    [, array $envs   ]] )        Executes the program with the given arguments.            Parameters                    path                      path must be the path to a binary executable or a        script with a valid path pointing to an executable in the shebang (        #!\/usr\/local\/bin\/perl for example) as the first line.  See your system&#039;s        man execve(2) page for additional information.                                args                      args is an array of argument strings passed to the        program.                                envs                      envs is an array of strings which are passed as        environment to the program.  The array is in the format of name => value,        the key being the name of the environmental variable and the value being        the value of that variable.                                     Return Values       Returns FALSE on error and does not return on success."},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-getpriority.php","title":"pcntl_getpriority","description":"pcntl_getpriority   (PHP 5)pcntl_getpriority \u2014 Get the priority of any process          Description       int pcntl_getpriority     ([ int $pid = getmypid()    [, int $process_identifier = PRIO_PROCESS   ]] )        pcntl_getpriority() gets the priority of    pid. Because priority levels can differ between    system types and kernel versions, please see your system&#039;s getpriority(2)    man page for specific details.            Parameters                    pid                      If not specified, the pid of the current process is used.                                process_identifier                      One of PRIO_PGRP, PRIO_USER        or PRIO_PROCESS.                                     Return Values       pcntl_getpriority() returns the priority of the process    or FALSE on error.  A lower numerical value causes more favorable    scheduling.      WarningThis function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or \"\". Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.         See Also            pcntl_setpriority() - Change the priority of any process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-setpriority.php","title":"pcntl_setpriority","description":"pcntl_setpriority   (PHP 5)pcntl_setpriority \u2014 Change the priority of any process          Description       bool pcntl_setpriority     ( int $priority    [, int $pid = getmypid()    [, int $process_identifier = PRIO_PROCESS   ]] )        pcntl_setpriority() sets the priority of    pid.             Parameters                    priority                      priority is generally a value in the range        -20 to 20. The default priority        is 0 while a lower numerical value causes more        favorable scheduling.  Because priority levels can differ between        system types and kernel versions, please see your system&#039;s setpriority(2)        man page for specific details.                                pid                      If not specified, the pid of the current process is used.                                process_identifier                      One of PRIO_PGRP, PRIO_USER        or PRIO_PROCESS.                                     Return Values       Returns TRUE on success or FALSE on failure.            See Also            pcntl_getpriority() - Get the priority of any process"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-fork.php","title":"pcntl_fork","description":"pcntl_fork   (PHP 4 >= 4.1.0, PHP 5)pcntl_fork \u2014 Forks the currently running process          Description       int pcntl_fork     ( void    )        The pcntl_fork() function creates a child    process that differs from the parent process only in its PID and    PPID. Please see your system&#039;s fork(2) man page for specific details as to    how fork works on your system.            Return Values       On success, the PID of the child process is returned in the    parent&#039;s thread of execution, and a 0 is returned in the child&#039;s    thread of execution.  On failure, a -1 will be returned in the    parent&#039;s context, no child process will be created, and a PHP    error is raised.            Examples            Example #1 pcntl_fork() example       <?php$pid\u00a0=\u00a0pcntl_fork();if\u00a0($pid\u00a0==\u00a0-1)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0die('could\u00a0not\u00a0fork');}\u00a0else\u00a0if\u00a0($pid)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0we\u00a0are\u00a0the\u00a0parent\u00a0\u00a0\u00a0\u00a0\u00a0pcntl_wait($status);\u00a0\/\/Protect\u00a0against\u00a0Zombie\u00a0children}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0we\u00a0are\u00a0the\u00a0child}?>                        See Also            pcntl_waitpid() - Waits on or returns the status of a forked child     pcntl_signal() - Installs a signal handler     setproctitle() - Set the process title"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-signal-dispatch.php","title":"pcntl_signal_dispatch","description":"pcntl_signal_dispatch   (PHP 5 >= 5.3.0)pcntl_signal_dispatch \u2014 Calls signal handlers for pending signals          Description       bool pcntl_signal_dispatch     ( void    )        The pcntl_signal_dispatch() function calls the signal     handlers installed by pcntl_signal() for each pending    signal.            Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 pcntl_signal_dispatch() example       <?phpecho\u00a0\"Installing\u00a0signal\u00a0handler...\\n\";pcntl_signal(SIGHUP,\u00a0\u00a0function($signo)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"signal\u00a0handler\u00a0called\\n\";});echo\u00a0\"Generating\u00a0signal\u00a0SIGHUP\u00a0to\u00a0self...\\n\";posix_kill(posix_getpid(),\u00a0SIGHUP);echo\u00a0\"Dispatching...\\n\";pcntl_signal_dispatch();echo\u00a0\"Done\\n\";?>             The above example will output something similar to:       Installing signal handler... Generating signal SIGHUP to self... Dispatching... signal handler called Done                      See Also            pcntl_signal() - Installs a signal handler     pcntl_sigprocmask() - Sets and retrieves blocked signals     pcntl_sigwaitinfo() - Waits for signals     pcntl_sigtimedwait() - Waits for signals, with a timeout"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ip2long.php","title":"ip2long","description":"ip2long   (PHP 4, PHP 5)ip2long \u2014 Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address          Description       int ip2long     ( string $ip_address    )        The function ip2long() generates an IPv4 Internet    network address from its Internet standard format (dotted string)    representation.           ip2long() will also work with non-complete IP    addresses. Read \u00bb\u00a0http:\/\/publibn.boulder.ibm.com\/doc_link\/en_US\/a_doc_lib\/libs\/commtrf2\/inet_addr.htm    for more info.            Parameters                    ip_address                      A standard format address.                                     Return Values       Returns the IPv4 address or FALSE if ip_address    is invalid.            Changelog                                 Version        Description                                    5.2.10                 Prior to this version, ip2long() would sometimes return         a valid number even if passed an value which was not an (IPv4) Internet Protocol         dotted address.                               5.0.0                 Prior to this version, ip2long() returned -1 on         failure.                                            Examples            Example #1 ip2long() Example       <?php$ip\u00a0=\u00a0gethostbyname('www.example.com');$out\u00a0=\u00a0\"The\u00a0following\u00a0URLs\u00a0are\u00a0equivalent:<br\u00a0\/>\\n\";$out\u00a0.=\u00a0'http:\/\/www.example.com\/,\u00a0http:\/\/'\u00a0.\u00a0$ip\u00a0.\u00a0'\/,\u00a0and\u00a0http:\/\/'\u00a0.\u00a0sprintf(\"%u\",\u00a0ip2long($ip))\u00a0.\u00a0\"\/<br\u00a0\/>\\n\";echo\u00a0$out;?>                           Example #2 Displaying an IP address           This second example shows how to print a converted address with the      printf() function in both PHP 4 and PHP 5:            <?php$ip\u00a0\u00a0\u00a0=\u00a0gethostbyname('www.example.com');$long\u00a0=\u00a0ip2long($ip);if\u00a0($long\u00a0==\u00a0-1\u00a0||\u00a0$long\u00a0===\u00a0FALSE)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0'Invalid\u00a0IP,\u00a0please\u00a0try\u00a0again';}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0$ip\u00a0\u00a0\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0192.0.34.166\u00a0\u00a0\u00a0\u00a0echo\u00a0$long\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0-1073732954\u00a0\u00a0\u00a0\u00a0printf(\"%u\\n\",\u00a0ip2long($ip));\u00a0\/\/\u00a03221234342}?>                           Example #3 IP validation           ip2long() should not be used as the sole form      of IP validation. Combine it with long2ip():            <?php\/\/\u00a0make\u00a0sure\u00a0IPs\u00a0are\u00a0valid.\u00a0also\u00a0converts\u00a0a\u00a0non-complete\u00a0IP\u00a0into\/\/\u00a0a\u00a0proper\u00a0dotted\u00a0quad\u00a0as\u00a0explained\u00a0below.$ip\u00a0=\u00a0long2ip(ip2long(\"127.0.0.1\"));\u00a0\/\/\u00a0\"127.0.0.1\"$ip\u00a0=\u00a0long2ip(ip2long(\"10.0.0\"));\u00a0\/\/\u00a0\"10.0.0.0\"$ip\u00a0=\u00a0long2ip(ip2long(\"10.0.256\"));\u00a0\/\/\u00a0\"10.0.1.0\"?>                        Notes   Note:          Because PHP&#039;s integer type is signed, and many IP addresses     will result in negative integers on 32-bit architectures, you need to use     the \"%u\" formatter of sprintf() or     printf() to get the string representation of the     unsigned IP address.          Note:          ip2long() will return FALSE for the IP     255.255.255.255 in PHP 5 <= 5.0.2. It was fixed in     PHP 5.0.3 where it returns -1 (same as PHP 4).                See Also            long2ip() - Converts an (IPv4) Internet network address into a string in Internet standard dotted format     sprintf() - Return a formatted string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-sigprocmask.php","title":"pcntl_sigprocmask","description":"pcntl_sigprocmask   (PHP 5 >= 5.3.0)pcntl_sigprocmask \u2014 Sets and retrieves blocked signals          Description       bool pcntl_sigprocmask     ( int $how    , array $set    [, array &$oldset   ] )        The pcntl_sigprocmask() function adds, removes or sets blocked    signals, depending on the how parameter.            Parameters                    how                      Sets the behavior of pcntl_sigprocmask(). Possible        values:                  SIG_BLOCK: Add the signals to the          currently blocked signals.         SIG_UNBLOCK: Remove the signals from the          currently blocked signals.         SIG_SETMASK: Replace the currently          blocked signals by the given list of signals.                                        set                      List of signals.                                oldset                      The oldset parameter is set to an array        containing the list of the previously blocked signals.                                     Return Values       Returns TRUE on success or FALSE on failure.            Examples            Example #1 pcntl_sigprocmask() example       <?phppcntl_sigprocmask(SIG_BLOCK,\u00a0array(SIGHUP));$oldset\u00a0=\u00a0array();pcntl_sigprocmask(SIG_UNBLOCK,\u00a0array(SIGHUP),\u00a0$oldset);?>                        See Also            pcntl_sigwaitinfo() - Waits for signals     pcntl_sigtimedwait() - Waits for signals, with a timeout"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-sigtimedwait.php","title":"pcntl_sigtimedwait","description":"pcntl_sigtimedwait   (PHP 5 >= 5.3.0)pcntl_sigtimedwait \u2014 Waits for signals, with a timeout          Description       int pcntl_sigtimedwait     ( array $set    [, array &$siginfo    [, int $seconds = 0    [, int $nanoseconds = 0   ]]] )        The pcntl_sigtimedwait() function operates in exactly    the same way as pcntl_sigwaitinfo() except that it takes    two additional parameters, seconds and    nanoseconds, which enable an upper bound to be placed    on the time for which the script is suspended.            Parameters                    set                      Array of signals to wait for.                                siginfo                      The siginfo is set to an array containing        informations about the signal. See        pcntl_sigwaitinfo().                                seconds                      Timeout in seconds.                                nanoseconds                      Timeout in nanoseconds.                                     Return Values       On success, pcntl_sigtimedwait() returns a signal number.            See Also            pcntl_sigprocmask() - Sets and retrieves blocked signals     pcntl_sigwaitinfo() - Waits for signals"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-sigwaitinfo.php","title":"pcntl_sigwaitinfo","description":"pcntl_sigwaitinfo   (PHP 5 >= 5.3.0)pcntl_sigwaitinfo \u2014 Waits for signals          Description       int pcntl_sigwaitinfo     ( array $set    [, array &$siginfo   ] )        The pcntl_sigwaitinfo() function suspends execution of the    calling script until one of the signals given in set    are delivered. If one of the signal is already pending (e.g. blocked by    pcntl_sigprocmask()),    pcntl_sigwaitinfo() will return immediately.            Parameters                    set                      Array of signals to wait for.                                siginfo                      The siginfo parameter is set to an array containing        informations about the signal.                      The following elements are set for all signals:                 signo: Signal number         errno: An error number         code: Signal code                              The following elements may be set for the SIGCHLD signal:                 status: Exit value or signal         utime: User time consumed         stime: System time consumed         pid: Sending process ID         uid: Real user ID of sending process                              The following elements may be set for the SIGILL,        SIGFPE, SIGSEGV and        SIGBUS signals:                 addr: Memory location which caused fault                              The following element may be set for the SIGPOLL        signal:                 band: Band event         fd: File descriptor number                                             Return Values       On success, pcntl_sigwaitinfo() returns a signal number.            Examples            Example #1 pcntl_sigwaitinfo() example       <?phpecho\u00a0\"Blocking\u00a0SIGHUP\u00a0signal\\n\";pcntl_sigprocmask(SIG_BLOCK,\u00a0array(SIGHUP));echo\u00a0\"Sending\u00a0SIGHUP\u00a0to\u00a0self\\n\";posix_kill(posix_getpid(),\u00a0SIGHUP);echo\u00a0\"Waiting\u00a0for\u00a0signals\\n\";$info\u00a0=\u00a0array();pcntl_sigwaitinfo(array(SIGHUP),\u00a0$info);?>                        See Also            pcntl_sigprocmask() - Sets and retrieves blocked signals     pcntl_sigtimedwait() - Waits for signals, with a timeout"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-signal.php","title":"pcntl_signal","description":"pcntl_signal   (PHP 4 >= 4.1.0, PHP 5)pcntl_signal \u2014 Installs a signal handler          Description       bool pcntl_signal     ( int $signo    , callback $handler    [, bool $restart_syscalls = true   ] )        The pcntl_signal() function installs a new    signal handler for the signal indicated by signo.               Parameters                    signo                      The signal number.                                handler                      The signal handler which may be the name of a user created function,        or method, or either of the two global constants         SIG_IGN or SIG_DFL.               Note:                  Note that when you set a handler to an object method, that object&#039;s         reference count is increased which makes it persist until you either         change the handler to something else, or your script ends.                                        restart_syscalls                      Specifies whether system call restarting should be used when this        signal arrives.                                     Return Values       Returns TRUE on success or FALSE on failure.            Changelog                                 Version        Description                                    4.3.0                 The restart_syscalls parameter was added.                               4.3.0                 The ability to use an object method as a callback became available.                               4.3.0                 As of PHP 4.3.0 PCNTL uses ticks as the signal handle callback         mechanism, which is much faster than the previous mechanism. This         change follows the same semantics as using         \"user ticks\".         You must use the declare() statement to         specify the locations in your program where callbacks are allowed to         occur for the signal handler to function properly (as used in the         above example).                                            Examples            Example #1 pcntl_signal() example       <?php\/\/\u00a0tick\u00a0use\u00a0required\u00a0as\u00a0of\u00a0PHP\u00a04.3.0declare(ticks\u00a0=\u00a01);\/\/\u00a0signal\u00a0handler\u00a0functionfunction\u00a0sig_handler($signo){\u00a0\u00a0\u00a0\u00a0\u00a0switch\u00a0($signo)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0SIGTERM:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0shutdown\u00a0tasks\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0SIGHUP:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0restart\u00a0tasks\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0SIGUSR1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Caught\u00a0SIGUSR1...\\n\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0all\u00a0other\u00a0signals\u00a0\u00a0\u00a0\u00a0\u00a0}}echo\u00a0\"Installing\u00a0signal\u00a0handler...\\n\";\/\/\u00a0setup\u00a0signal\u00a0handlerspcntl_signal(SIGTERM,\u00a0\"sig_handler\");pcntl_signal(SIGHUP,\u00a0\u00a0\"sig_handler\");pcntl_signal(SIGUSR1,\u00a0\"sig_handler\");\/\/\u00a0or\u00a0use\u00a0an\u00a0object,\u00a0available\u00a0as\u00a0of\u00a0PHP\u00a04.3.0\/\/\u00a0pcntl_signal(SIGUSR1,\u00a0array($obj,\u00a0\"do_something\");echo\"Generating\u00a0signal\u00a0SIGTERM\u00a0to\u00a0self...\\n\";\/\/\u00a0send\u00a0SIGUSR1\u00a0to\u00a0current\u00a0process\u00a0idposix_kill(posix_getpid(),\u00a0SIGUSR1);echo\u00a0\"Done\\n\";?>                        See Also            pcntl_fork() - Forks the currently running process     pcntl_waitpid() - Waits on or returns the status of a forked child"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-waitpid.php","title":"pcntl_waitpid","description":"pcntl_waitpid   (PHP 4 >= 4.1.0, PHP 5)pcntl_waitpid \u2014 Waits on or returns the status of a forked child          Description       int pcntl_waitpid     ( int $pid    , int &$status    [, int $options = 0   ] )        Suspends execution of the current process until a child as specified by    the pid argument has exited, or until a signal is    delivered whose action is to terminate the current process or to call a    signal handling function.          If a child as requested by pid has already exited    by the time of the call (a so-called \"zombie\" process), the function    returns immediately.  Any system resources used by the child are freed.    Please see your system&#039;s waitpid(2) man page for specific details as to    how waitpid works on your system.            Parameters                    pid                      The value of pid can be one of the following:                 possible values for pid                                          < -1                         wait for any child process whose process group ID is equal to             the absolute value of pid.                                               -1                         wait for any child process; this is the same behaviour that             the wait function exhibits.                                               0                         wait for any child process whose process group ID is equal to             that of the calling process.                                               > 0                         wait for the child whose process ID is equal to the value of             pid.                                                                  Note:                  Specifying -1 as the pid is         equivalent to the functionality pcntl_wait() provides         (minus options).                                        status                      pcntl_waitpid() will store status information        in the status parameter which can be        evaluated using the following functions:        pcntl_wifexited(),        pcntl_wifstopped(),        pcntl_wifsignaled(),        pcntl_wexitstatus(),        pcntl_wtermsig() and        pcntl_wstopsig().                                options                      The value of options is the value of zero        or more of the following two global constants        OR&#039;ed together:                 possible values for options                                          WNOHANG                         return immediately if no child has exited.                                               WUNTRACED                         return for children which are stopped, and whose status has             not been reported.                                                                                         Return Values       pcntl_waitpid() returns the process ID of the    child which exited, -1 on error or zero if WNOHANG was used and no    child was available            See Also            pcntl_fork() - Forks the currently running process     pcntl_signal() - Installs a signal handler     pcntl_wifexited() - Checks if status code represents a normal exit     pcntl_wifstopped() - Checks whether the child process is currently stopped     pcntl_wifsignaled() - Checks whether the status code represents a termination due to a signal     pcntl_wexitstatus() - Returns the return code of a terminated child     pcntl_wtermsig() - Returns the signal which caused the child to terminate     pcntl_wstopsig() - Returns the signal which caused the child to stop"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wexitstatus.php","title":"pcntl_wexitstatus","description":"pcntl_wexitstatus   (PHP 4 >= 4.1.0, PHP 5)pcntl_wexitstatus \u2014 Returns the return code of a terminated child          Description       int pcntl_wexitstatus     ( int $status    )        Returns the return code of a terminated child.  This function is    only useful if pcntl_wifexited() returned    TRUE.            Parameters                    status              The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().                              Return Values       Returns the return code, as an integer.            See Also            pcntl_waitpid() - Waits on or returns the status of a forked child     pcntl_wifexited() - Checks if status code represents a normal exit"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wifexited.php","title":"pcntl_wifexited","description":"pcntl_wifexited   (PHP 4 >= 4.1.0, PHP 5)pcntl_wifexited \u2014 Checks if status code represents a normal exit          Description       bool pcntl_wifexited     ( int $status    )        Checks whether the child status code represents a normal exit.            Parameters                    status              The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().                              Return Values       Returns TRUE if the child status code represents a normal exit, FALSE    otherwise.            See Also            pcntl_waitpid() - Waits on or returns the status of a forked child     pcntl_wexitstatus() - Returns the return code of a terminated child"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wifsignaled.php","title":"pcntl_wifsignaled","description":"pcntl_wifsignaled   (PHP 4 >= 4.1.0, PHP 5)pcntl_wifsignaled \u2014 Checks whether the status code represents a termination due to a signal          Description       bool pcntl_wifsignaled     ( int $status    )        Checks whether the child process exited because of a signal which was not    caught.            Parameters                    status              The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().                              Return Values       Returns TRUE if the child process exited because of a signal which was    not caught, FALSE otherwise.            See Also            pcntl_waitpid() - Waits on or returns the status of a forked child     pcntl_signal() - Installs a signal handler"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wifstopped.php","title":"pcntl_wifstopped","description":"pcntl_wifstopped   (PHP 4 >= 4.1.0, PHP 5)pcntl_wifstopped \u2014 Checks whether the child process is currently stopped          Description       bool pcntl_wifstopped     ( int $status    )        Checks whether the child process which caused the return is currently    stopped; this is only possible if the call to    pcntl_waitpid() was done using the option    WUNTRACED.            Parameters                    status              The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().                              Return Values       Returns TRUE if the child process which caused the return is    currently stopped, FALSE otherwise.            See Also            pcntl_waitpid() - Waits on or returns the status of a forked child"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wstopsig.php","title":"pcntl_wstopsig","description":"pcntl_wstopsig   (PHP 4 >= 4.1.0, PHP 5)pcntl_wstopsig \u2014 Returns the signal which caused the child to stop          Description       int pcntl_wstopsig     ( int $status    )        Returns the number of the signal which caused the child to stop.    This function is only useful if    pcntl_wifstopped() returned TRUE.            Parameters                    status              The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().                              Return Values       Returns the signal number.            See Also            pcntl_waitpid() - Waits on or returns the status of a forked child     pcntl_wifstopped() - Checks whether the child process is currently stopped"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wtermsig.php","title":"pcntl_wtermsig","description":"pcntl_wtermsig   (PHP 4 >= 4.1.0, PHP 5)pcntl_wtermsig \u2014 Returns the signal which caused the child to terminate          Description       int pcntl_wtermsig     ( int $status    )        Returns the number of the signal that caused the child process to    terminate. This function is only useful if    pcntl_wifsignaled() returned TRUE.            Parameters                    status              The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().                              Return Values       Returns the signal number, as an integer.            See Also            pcntl_waitpid() - Waits on or returns the status of a forked child     pcntl_signal() - Installs a signal handler     pcntl_wifsignaled() - Checks whether the status code represents a termination due to a signal"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wait.php","title":"pcntl_wait","description":"pcntl_wait   (PHP 5)pcntl_wait \u2014 Waits on or returns the status of a forked child          Description       int pcntl_wait     ( int &$status    [, int $options = 0   ] )        The wait function suspends execution of the current process until a    child has exited, or until a signal is delivered whose action is to    terminate the current process or to call a signal handling function.  If a    child has already exited by the time of the call (a so-called \"zombie\"    process), the function returns immediately.  Any system resources used by    the child are freed.  Please see your system&#039;s wait(2) man page for    specific details as to how wait works on your system.      Note:          This function is equivalent to calling pcntl_waitpid()     with a -1 pid and no     options.                Parameters                    status                      pcntl_wait() will store status information        in the status parameter which can be        evaluated using the following functions:        pcntl_wifexited(),        pcntl_wifstopped(),        pcntl_wifsignaled(),        pcntl_wexitstatus(),        pcntl_wtermsig() and        pcntl_wstopsig().                                options                      If wait3 is available on your system (mostly BSD-style systems), you can        provide the optional options parameter.  If this        parameter is not provided, wait will be used for the system call.  If        wait3 is not available, providing a value for options         will have no effect. The value of options         is the value of zero or more of the following two constants        OR&#039;ed together:                 Possible values for options                                          WNOHANG                         Return immediately if no child has exited.                                               WUNTRACED                         Return for children which are stopped, and whose status has             not been reported.                                                                                         Return Values       pcntl_wait() returns the process ID of the    child which exited, -1 on error or zero if WNOHANG was provided as an    option (on wait3-available systems) and no child was available.            See Also            pcntl_fork() - Forks the currently running process     pcntl_signal() - Installs a signal handler     pcntl_wifexited() - Checks if status code represents a normal exit     pcntl_wifstopped() - Checks whether the child process is currently stopped     pcntl_wifsignaled() - Checks whether the status code represents a termination due to a signal     pcntl_wexitstatus() - Returns the return code of a terminated child     pcntl_wtermsig() - Returns the signal which caused the child to terminate     pcntl_wstopsig() - Returns the signal which caused the child to stop     pcntl_waitpid() - Waits on or returns the status of a forked child"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eregi-replace.php","title":"eregi_replace","description":"eregi_replace   (PHP 4, PHP 5)eregi_replace \u2014 Replace regular expression case insensitive          Description       string eregi_replace     ( string $pattern    , string $replacement    , string $string    )        This function is identical to ereg_replace()    except that this ignores case distinction when matching    alphabetic characters.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    pattern                      A POSIX extended regular expression.                                replacement                      If pattern contains parenthesized substrings,        replacement may contain substrings of the form        \\\\digit, which will be        replaced by the text matching the digit&#039;th parenthesized substring;         \\\\0 will produce the entire contents of string.        Up to nine substrings may be used. Parentheses may be nested, in which        case they are counted by the opening parenthesis.                                string                      The input string.                                     Return Values       The modified string is returned. If no matches are found in     string, then it will be returned unchanged.            Examples            Example #1 Highlight search results       <?php$pattern\u00a0=\u00a0'(>[^<]*)('.\u00a0quotemeta($_GET['search'])\u00a0.')';$replacement\u00a0=\u00a0'\\\\1<span\u00a0class=\"search\">\\\\2<\/span>';$body\u00a0=\u00a0eregi_replace($pattern,\u00a0$replacement,\u00a0$body);?>                        Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE.         See Also            ereg() - Regular expression match     eregi() - Case insensitive regular expression match     ereg_replace() - Replace regular expression"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ereg-replace.php","title":"ereg_replace","description":"ereg_replace   (PHP 4, PHP 5)ereg_replace \u2014 Replace regular expression          Description       string ereg_replace     ( string $pattern    , string $replacement    , string $string    )        This function scans string for matches to    pattern, then replaces the matched text    with replacement.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    pattern                      A POSIX extended regular expression.                                replacement                      If pattern contains parenthesized substrings,        replacement may contain substrings of the form        \\\\digit, which will be        replaced by the text matching the digit&#039;th parenthesized substring;         \\\\0 will produce the entire contents of string.        Up to nine substrings may be used. Parentheses may be nested, in which        case they are counted by the opening parenthesis.                                string                      The input string.                                     Return Values       The modified string is returned. If no matches are found in     string, then it will be returned unchanged.            Examples       For example, the following code snippet prints \"This was a test\"    three times:               Example #1 ereg_replace() example       <?php$string\u00a0=\u00a0\"This\u00a0is\u00a0a\u00a0test\";echo\u00a0str_replace(\"\u00a0is\",\u00a0\"\u00a0was\",\u00a0$string);echo\u00a0ereg_replace(\"(\u00a0)is\",\u00a0\"\\\\1was\",\u00a0$string);echo\u00a0ereg_replace(\"((\u00a0)is)\",\u00a0\"\\\\2was\",\u00a0$string);?>                      One thing to take note of is that if you use an integer value as    the replacement parameter, you may not get    the results you expect. This is because    ereg_replace() will interpret the number as    the ordinal value of a character, and apply that. For instance:               Example #2 ereg_replace() example       <?php\/*\u00a0This\u00a0will\u00a0not\u00a0work\u00a0as\u00a0expected.\u00a0*\/$num\u00a0=\u00a04;$string\u00a0=\u00a0\"This\u00a0string\u00a0has\u00a0four\u00a0words.\";$string\u00a0=\u00a0ereg_replace('four',\u00a0$num,\u00a0$string);echo\u00a0$string;\u00a0\u00a0\u00a0\/*\u00a0Output:\u00a0'This\u00a0string\u00a0has\u00a0\u00a0\u00a0words.'\u00a0*\/\/*\u00a0This\u00a0will\u00a0work.\u00a0*\/$num\u00a0=\u00a0'4';$string\u00a0=\u00a0\"This\u00a0string\u00a0has\u00a0four\u00a0words.\";$string\u00a0=\u00a0ereg_replace('four',\u00a0$num,\u00a0$string);echo\u00a0$string;\u00a0\u00a0\u00a0\/*\u00a0Output:\u00a0'This\u00a0string\u00a0has\u00a04\u00a0words.'\u00a0*\/?>                           Example #3 Replace URLs with links       <?php$text\u00a0=\u00a0ereg_replace(\"[[:alpha:]]+:\/\/[^<>[:space:]]+[[:alnum:]\/]\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"<a\u00a0href=\\\"\\\\0\\\">\\\\0<\/a>\",\u00a0$text);?>                        Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE.   Tip         preg_replace(), which uses a Perl-compatible     regular expression syntax, is often a faster alternative to     ereg_replace().                See Also            ereg() - Regular expression match     eregi() - Case insensitive regular expression match     eregi_replace() - Replace regular expression case insensitive     str_replace() - Replace all occurrences of the search string with the replacement string     preg_match() - Perform a regular expression match"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ereg.php","title":"ereg","description":"ereg   (PHP 4, PHP 5)ereg \u2014 Regular expression match          Description       int ereg     ( string $pattern    , string $string    [, array &$regs   ] )        Searches a string for matches to the regular    expression given in pattern in a case-sensitive    way.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    pattern                      Case sensitive regular expression.                                string                      The input string.                                regs                      If matches are found for parenthesized substrings of        pattern and the function is called with the        third argument regs, the matches will be stored        in the elements of the array regs.                       $regs[1] will contain the substring which starts at        the first left parenthesis; $regs[2] will contain        the substring starting at the second, and so on.        $regs[0] will contain a copy of the complete string        matched.                                     Return Values       Returns the length of the matched string if a match for    pattern was found in string,    or FALSE if no matches were found or an error occurred.          If the optional parameter regs was not passed or    the length of the matched string is 0, this function returns 1.            Changelog                                 Version        Description                                    4.1.0                 Up to (and including) PHP 4.1.0 $regs will be         filled with exactly ten elements, even though more or fewer than         ten parenthesized substrings may actually have matched. This has         no effect on ereg()&#039;s ability to match more         substrings. If no matches are found, $regs         will not be altered by ereg().                                            Examples            Example #1 ereg() example           The following code snippet takes a date in ISO format (YYYY-MM-DD) and      prints it in DD.MM.YYYY format:            <?phpif\u00a0(ereg\u00a0(\"([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})\",\u00a0$date,\u00a0$regs))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$regs[3].$regs[2].$regs[1]\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Invalid\u00a0date\u00a0format:\u00a0$date\";}?>                        Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE.   Note:          preg_match(), which uses a Perl-compatible     regular expression syntax, is often a faster alternative to     ereg().                See Also            eregi() - Case insensitive regular expression match     ereg_replace() - Replace regular expression     eregi_replace() - Replace regular expression case insensitive     preg_match() - Perform a regular expression match     strpos() - Find position of first occurrence of a string     strstr() - Find first occurrence of a string     quotemeta() - Quote meta characters"},{"url":"http:\/\/www.php.net\/manual\/en\/function.spliti.php","title":"spliti","description":"spliti   (PHP 4 >= 4.0.1, PHP 5)spliti \u2014 Split string into array by regular expression case insensitive          Description       array spliti     ( string $pattern    , string $string    [, int $limit = -1   ] )        Splits a string into array by regular expression.          This function is identical to split() except that this    ignores case distinction when matching alphabetic characters.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    pattern                      Case insensitive regular expression.                      If you want to split on any of the characters which are considered        special by regular expressions, you&#039;ll need to escape them first. If        you think spliti() (or any other regex function, for        that matter) is doing something weird, please read the file        regex.7, included in the         regex\/ subdirectory of the PHP distribution. It&#039;s        in manpage format, so you&#039;ll want to do something along the lines of        man \/usr\/local\/src\/regex\/regex.7 in order to read it.                                string                      The input string.                                limit                      If limit is set, the returned array will        contain a maximum of limit elements with the        last element containing the whole rest of        string.                                     Return Values       Returns an array of strings, each of which is a substring of    string formed by splitting it on boundaries formed    by the case insensitive regular expression pattern.          If there are n occurrences of    pattern, the returned array will contain    n+1 items. For example, if    there is no occurrence of pattern, an array with    only one element will be returned. Of course, this is also true if    string is empty. If an error occurs,    spliti() returns FALSE.            Examples       This example splits a string using &#039;a&#039; as the separator :         Example #1 spliti() example       <?php$string\u00a0=\u00a0\"aBBBaCCCADDDaEEEaGGGA\";$chunks\u00a0=\u00a0spliti\u00a0(\"a\",\u00a0$string,\u00a05);print_r($chunks);?>             The above example will output:       Array (   [0] =>   [1] => BBB   [2] => CCC   [3] => DDD   [4] => EEEaGGGA )                      Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE.         See Also            preg_split() - Split string by a regular expression     split() - Split string into array by regular expression     explode() - Split a string by string     implode() - Join array elements with a string"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eregi.php","title":"eregi","description":"eregi   (PHP 4, PHP 5)eregi \u2014 Case insensitive regular expression match          Description       int eregi     ( string $pattern    , string $string    [, array &$regs   ] )        This function is identical to ereg() except that it    ignores case distinction when matching alphabetic characters.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    pattern                      Case insensitive regular expression.                                string                      The input string.                                regs                      If matches are found for parenthesized substrings of        pattern and the function is called with the        third argument regs, the matches will be stored        in the elements of the array regs.                       $regs[1] will contain the substring which starts at the first left        parenthesis; $regs[2] will contain the substring starting at the        second, and so on. $regs[0] will contain a copy of the complete string        matched.                                     Return Values       Returns the length of the matched string if a match for    pattern was found in string,    or FALSE if no matches were found or an error occurred.          If the optional parameter regs was not passed or    the length of the matched string is 0, this function returns 1.            Examples            Example #1 eregi() example       <?php$string\u00a0=\u00a0'XYZ';if\u00a0(eregi('z',\u00a0$string))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'$string'\u00a0contains\u00a0a\u00a0'z'\u00a0or\u00a0'Z'!\";}?>                        Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE.         See Also            ereg() - Regular expression match     ereg_replace() - Replace regular expression     eregi_replace() - Replace regular expression case insensitive     stripos() - Find position of first occurrence of a case-insensitive string     stristr() - Case-insensitive strstr"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sql-regcase.php","title":"sql_regcase","description":"sql_regcase   (PHP 4, PHP 5)sql_regcase \u2014 Make regular expression for case insensitive match          Description       string sql_regcase     ( string $string    )        Creates a regular expression for a case insensitive match.      WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.         Parameters                    string                      The input string.                                     Return Values       Returns a valid regular expression which will match    string, ignoring case. This expression is    string with each alphabetic character converted to    a bracket expression; this bracket expression contains that character&#039;s    uppercase and lowercase form.  Other characters remain unchanged.            Examples            Example #1 sql_regcase() example       <?phpecho\u00a0sql_regcase(\"Foo\u00a0-\u00a0bar.\");?>             The above example will output:       [Ff][Oo][Oo] - [Bb][Aa][Rr].                    This can be used to achieve case insensitive pattern matching in    products which support only case sensitive regular expressions.            Notes   Note: As of PHP 5.3.0, the regex extension is deprecated in favor of the  PCRE extension. Calling this function  will issue an E_DEPRECATED notice. See the list of differences for help on converting to PCRE."},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-filter.php","title":"preg_filter","description":"preg_filter   (PHP 5 >= 5.3.0)preg_filter \u2014 Perform a regular expression search and replace         Description       mixed preg_filter     ( mixed $pattern    , mixed $replacement    , mixed $subject    [, int $limit = -1    [, int &$count   ]] )        preg_filter() is identical to preg_replace()    except it only returns the (possibly transformed) subjects where there was    a match. For details about how this function works, read the    preg_replace() documentation.            Return Values       Returns an array if the subject    parameter is an array, or a string otherwise.          If no matches are found or an error occurred, an empty array     is returned when subject is an array    or NULL otherwise.            Examples            Example #1       Example comparing preg_filter()       with preg_replace()            <?php$subject\u00a0=\u00a0array('1',\u00a0'a',\u00a0'2',\u00a0'b',\u00a0'3',\u00a0'A',\u00a0'B',\u00a0'4');\u00a0$pattern\u00a0=\u00a0array('\/\\d\/',\u00a0'\/[a-z]\/',\u00a0'\/[1a]\/');\u00a0$replace\u00a0=\u00a0array('A:$0',\u00a0'B:$0',\u00a0'C:$0');\u00a0echo\u00a0\"preg_filter\u00a0returns\\n\";print_r(preg_filter($pattern,\u00a0$replace,\u00a0$subject));\u00a0echo\u00a0\"preg_replace\u00a0returns\\n\";print_r(preg_replace($pattern,\u00a0$replace,\u00a0$subject));\u00a0?>             The above example will output:       preg_filter returns Array (     [0] => A:C:1     [1] => B:C:a     [2] => A:2     [3] => B:b     [4] => A:3     [7] => A:4 ) preg_replace returns Array (     [0] => A:C:1     [1] => B:C:a     [2] => A:2     [3] => B:b     [4] => A:3     [5] => A     [6] => B     [7] => A:4 )                      See Also            PCRE Patterns     preg_replace() - Perform a regular expression search and replace     preg_replace_callback() - Perform a regular expression search and replace using a callback     preg_grep() - Return array entries that match the pattern     preg_last_error() - Returns the error code of the last PCRE regex execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-last-error.php","title":"preg_last_error","description":"preg_last_error   (PHP 5 >= 5.2.0)preg_last_error \u2014 Returns the error code of the last PCRE regex execution         Description       int preg_last_error     ( void    )        Returns the error code of the last PCRE regex execution.               Example #1 preg_last_error() example       <?phppreg_match('\/(?:\\D+|<\\d+>)*[!?]\/',\u00a0'foobar\u00a0foobar\u00a0foobar');if\u00a0(preg_last_error()\u00a0==\u00a0PREG_BACKTRACK_LIMIT_ERROR)\u00a0{\u00a0\u00a0\u00a0\u00a0print\u00a0'Backtrack\u00a0limit\u00a0was\u00a0exhausted!';}?>             The above example will output:       Backtrack limit was exhausted!                        Return Values       Returns one of the following constants (explained on their own page):         PREG_NO_ERROR     PREG_INTERNAL_ERROR     PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)     PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)     PREG_BAD_UTF8_ERROR     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-quote.php","title":"preg_quote","description":"preg_quote   (PHP 4, PHP 5)preg_quote \u2014 Quote regular expression characters         Description       string preg_quote     ( string $str   [, string $delimiter = NULL   ] )        preg_quote() takes str    and puts a backslash in front of every character that is part of    the regular expression syntax.  This is useful if you have a    run-time string that you need to match in some text and the    string may contain special regex characters.          The special regular expression characters are:    . \\ + * ? [ ^ ] $ ( ) { } = ! < > | : -            Parameters                    str                      The input string.                                delimiter                      If the optional delimiter is specified, it        will also be escaped.  This is useful for escaping the delimiter        that is required by the PCRE functions. The \/ is the most commonly        used delimiter.                                     Return Values       Returns the quoted string.            Changelog                                 Version        Description                                    5.3.0                 The - character is now quoted                                            Examples            Example #1 preg_quote() example       <?php$keywords\u00a0=\u00a0'$40\u00a0for\u00a0a\u00a0g3\/400';$keywords\u00a0=\u00a0preg_quote($keywords,\u00a0'\/');echo\u00a0$keywords;\u00a0\/\/\u00a0returns\u00a0\\$40\u00a0for\u00a0a\u00a0g3\\\/400?>                           Example #2 Italicizing a word within some text       <?php\/\/\u00a0In\u00a0this\u00a0example,\u00a0preg_quote($word)\u00a0is\u00a0used\u00a0to\u00a0keep\u00a0the\/\/\u00a0asterisks\u00a0from\u00a0having\u00a0special\u00a0meaning\u00a0to\u00a0the\u00a0regular\/\/\u00a0expression.$textbody\u00a0=\u00a0\"This\u00a0book\u00a0is\u00a0*very*\u00a0difficult\u00a0to\u00a0find.\";$word\u00a0=\u00a0\"*very*\";$textbody\u00a0=\u00a0preg_replace\u00a0(\"\/\"\u00a0.\u00a0preg_quote($word)\u00a0.\u00a0\"\/\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"<i>\"\u00a0.\u00a0$word\u00a0.\u00a0\"<\/i>\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$textbody);?>                        Notes   Note: This function is binary-safe."},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-replace-callback.php","title":"preg_replace_callback","description":"preg_replace_callback   (PHP 4 >= 4.0.5, PHP 5)preg_replace_callback \u2014 Perform a regular expression search and replace using a callback         Description       mixed preg_replace_callback     ( mixed $pattern    , callback $callback    , mixed $subject    [, int $limit = -1    [, int &$count   ]] )        The behavior of this function is almost identical to    preg_replace(), except for the fact that instead of    replacement parameter, one should specify a    callback.            Parameters                    pattern                      The pattern to search for. It can be either a string or an array with        strings.                                callback                      A callback that will be called and passed an array of matched elements        in the subject string. The callback should        return the replacement string.                      You&#039;ll often need the callback function        for a preg_replace_callback() in just one place.        In this case you can use an        anonymous function (since        PHP 5.3.0) or create_function() to        declare an anonymous function as callback within the call to        preg_replace_callback(). By doing it this way        you have all information for the call in one place and do not        clutter the function namespace with a callback function&#039;s name        not used anywhere else.                               Example #1 preg_replace_callback() and          create_function()           <?php\/*\u00a0a\u00a0unix-style\u00a0command\u00a0line\u00a0filter\u00a0to\u00a0convert\u00a0uppercase\u00a0*\u00a0letters\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0paragraphs\u00a0to\u00a0lowercase\u00a0*\/$fp\u00a0=\u00a0fopen(\"php:\/\/stdin\",\u00a0\"r\")\u00a0or\u00a0die(\"can't\u00a0read\u00a0stdin\");while\u00a0(!feof($fp))\u00a0{\u00a0\u00a0\u00a0\u00a0$line\u00a0=\u00a0fgets($fp);\u00a0\u00a0\u00a0\u00a0$line\u00a0=\u00a0preg_replace_callback(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'|<p>\\s*\\w|',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0create_function(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0single\u00a0quotes\u00a0are\u00a0essential\u00a0here,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0or\u00a0alternative\u00a0escape\u00a0all\u00a0$\u00a0as\u00a0\\$\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'$matches',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'return\u00a0strtolower($matches[0]);'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$line\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0echo\u00a0$line;}fclose($fp);?>                                                    subject                      The string or an array with strings to search and replace.                                limit                      The maximum possible replacements for each pattern in each        subject string. Defaults to        -1 (no limit).                                count                      If specified, this variable will be filled with the number of        replacements done.                                     Return Values       preg_replace_callback() returns an array if the    subject parameter is an array, or a string    otherwise. On errors the return value is NULL          If matches are found, the new subject will be returned, otherwise    subject will be returned unchanged.             Changelog                                 Version        Description                                    5.1.0                 The count parameter was added                                            Examples            Example #2 preg_replace_callback() example       <?php\/\/\u00a0this\u00a0text\u00a0was\u00a0used\u00a0in\u00a02002\/\/\u00a0we\u00a0want\u00a0to\u00a0get\u00a0this\u00a0up\u00a0to\u00a0date\u00a0for\u00a02003$text\u00a0=\u00a0\"April\u00a0fools\u00a0day\u00a0is\u00a004\/01\/2002\\n\";$text.=\u00a0\"Last\u00a0christmas\u00a0was\u00a012\/24\/2001\\n\";\/\/\u00a0the\u00a0callback\u00a0functionfunction\u00a0next_year($matches){\u00a0\u00a0\/\/\u00a0as\u00a0usual:\u00a0$matches[0]\u00a0is\u00a0the\u00a0complete\u00a0match\u00a0\u00a0\/\/\u00a0$matches[1]\u00a0the\u00a0match\u00a0for\u00a0the\u00a0first\u00a0subpattern\u00a0\u00a0\/\/\u00a0enclosed\u00a0in\u00a0'(...)'\u00a0and\u00a0so\u00a0on\u00a0\u00a0return\u00a0$matches[1].($matches[2]+1);}echo\u00a0preg_replace_callback(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"|(\\d{2}\/\\d{2}\/)(\\d{4})|\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"next_year\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$text);?>             The above example will output:       April fools day is 04\/01\/2003 Last christmas was 12\/24\/2002                         Example #3 preg_replace_callback() using recursive structure      to handle encapsulated BB code       <?php$input\u00a0=\u00a0\"plain\u00a0[indent]\u00a0deep\u00a0[indent]\u00a0deeper\u00a0[\/indent]\u00a0deep\u00a0[\/indent]\u00a0plain\";function\u00a0parseTagsRecursive($input){\u00a0\u00a0\u00a0\u00a0$regex\u00a0=\u00a0'#\\[indent]((?:[^[]|\\[(?!\/?indent])|(?R))+)\\[\/indent]#';\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($input))\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$input\u00a0=\u00a0'<div\u00a0style=\"margin-left:\u00a010px\">'.$input[1].'<\/div>';\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return\u00a0preg_replace_callback($regex,\u00a0'parseTagsRecursive',\u00a0$input);}$output\u00a0=\u00a0parseTagsRecursive($input);echo\u00a0$output;?>                        See Also            PCRE Patterns     preg_replace() - Perform a regular expression search and replace     preg_last_error() - Returns the error code of the last PCRE regex execution     create_function() - Create an anonymous (lambda-style) function     Anonymous functions     information about the callback type"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-match-all.php","title":"preg_match_all","description":"preg_match_all   (PHP 4, PHP 5)preg_match_all \u2014 Perform a global regular expression match         Description       int preg_match_all     ( string $pattern    , string $subject    [, array &$matches    [, int $flags = PREG_PATTERN_ORDER    [, int $offset = 0   ]]] )        Searches subject for all matches to the regular    expression given in pattern and puts them in    matches in the order specified by    flags.          After the first match is found, the subsequent searches  are continued    on from end of the last match.            Parameters                    pattern                      The pattern to search for, as a string.                                subject                      The input string.                                matches                      Array of all matches in multi-dimensional array ordered according to        flags.                                flags                      Can be a combination of the following flags (note that it doesn&#039;t make        sense to use PREG_PATTERN_ORDER together with        PREG_SET_ORDER):                             PREG_PATTERN_ORDER                                  Orders results so that $matches[0] is an array of full            pattern matches, $matches[1] is an array of strings matched by            the first parenthesized subpattern, and so on.                                                 <?phppreg_match_all(\"|<[^>]+>(.*)<\/[^>]+>|U\",\u00a0\u00a0\u00a0\u00a0\"<b>example:\u00a0<\/b><div\u00a0align=left>this\u00a0is\u00a0a\u00a0test<\/div>\",\u00a0\u00a0\u00a0\u00a0$out,\u00a0PREG_PATTERN_ORDER);echo\u00a0$out[0][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[0][1]\u00a0.\u00a0\"\\n\";echo\u00a0$out[1][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[1][1]\u00a0.\u00a0\"\\n\";?>                             The above example will output:               <b>example: <\/b>, <div align=left>this is a test<\/div> example: , this is a test                                         So, $out[0] contains array of strings that matched full pattern,              and $out[1] contains array of strings enclosed by tags.                                                                             PREG_SET_ORDER                                  Orders results so that $matches[0] is an array of first set            of matches, $matches[1] is an array of second set of matches,            and so on.                           <?phppreg_match_all(\"|<[^>]+>(.*)<\/[^>]+>|U\",\u00a0\u00a0\u00a0\u00a0\"<b>example:\u00a0<\/b><div\u00a0align=\\\"left\\\">this\u00a0is\u00a0a\u00a0test<\/div>\",\u00a0\u00a0\u00a0\u00a0$out,\u00a0PREG_SET_ORDER);echo\u00a0$out[0][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[0][1]\u00a0.\u00a0\"\\n\";echo\u00a0$out[1][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[1][1]\u00a0.\u00a0\"\\n\";?>                             The above example will output:               <b>example: <\/b>, example: <div align=\"left\">this is a test<\/div>, this is a test                                                                              PREG_OFFSET_CAPTURE                                  If this flag is passed, for every occurring match the appendant string            offset will also be returned. Note that this changes the value of            matches into an array where every element is an            array consisting of the matched string at offset 0            and its string offset into subject at offset            1.                                                               If no order flag is given, PREG_PATTERN_ORDER is        assumed.                                offset                      Normally, the search starts from the beginning of the subject string.        The optional parameter offset can be used to        specify the alternate place from which to start the search (in bytes).              Note:                  Using offset is not equivalent to passing         substr($subject, $offset) to         preg_match_all() in place of the subject string,         because pattern can contain assertions such as         ^, $ or         (?<=x). See preg_match()         for examples.                                             Return Values       Returns the number of full pattern matches (which might be zero),    or FALSE if an error occurred.            Changelog                                 Version        Description                                    5.4.0                 The matches parameter became optional.                               5.3.6                 Returns FALSE if offset         is higher than         subject length.                               5.2.2                 Named subpatterns now accept the         syntax (?<name>)         and (?&#039;name&#039;) as well         as (?P<name>). Previous versions         accepted only (?P<name>).                               4.3.3                 The offset parameter was added                               4.3.0                 The PREG_OFFSET_CAPTURE flag was added                                            Examples            Example #1 Getting all phone numbers out of some text.       <?phppreg_match_all(\"\/\\(?\u00a0\u00a0(\\d{3})?\u00a0\u00a0\\)?\u00a0\u00a0(?(1)\u00a0\u00a0[\\-\\s]\u00a0)\u00a0\\d{3}-\\d{4}\/x\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Call\u00a0555-1212\u00a0or\u00a01-800-555-1212\",\u00a0$phones);?>                           Example #2 Find matching HTML tags (greedy)       <?php\/\/\u00a0The\u00a0\\\\2\u00a0is\u00a0an\u00a0example\u00a0of\u00a0backreferencing.\u00a0This\u00a0tells\u00a0pcre\u00a0that\/\/\u00a0it\u00a0must\u00a0match\u00a0the\u00a0second\u00a0set\u00a0of\u00a0parentheses\u00a0in\u00a0the\u00a0regular\u00a0expression\/\/\u00a0itself,\u00a0which\u00a0would\u00a0be\u00a0the\u00a0([\\w]+)\u00a0in\u00a0this\u00a0case.\u00a0The\u00a0extra\u00a0backslash\u00a0is\/\/\u00a0required\u00a0because\u00a0the\u00a0string\u00a0is\u00a0in\u00a0double\u00a0quotes.$html\u00a0=\u00a0\"<b>bold\u00a0text<\/b><a\u00a0href=howdy.html>click\u00a0me<\/a>\";preg_match_all(\"\/(<([\\w]+)[^>]*>)(.*?)(<\\\/\\\\2>)\/\",\u00a0$html,\u00a0$matches,\u00a0PREG_SET_ORDER);foreach\u00a0($matches\u00a0as\u00a0$val)\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"matched:\u00a0\"\u00a0.\u00a0$val[0]\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a01:\u00a0\"\u00a0.\u00a0$val[1]\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a02:\u00a0\"\u00a0.\u00a0$val[2]\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a03:\u00a0\"\u00a0.\u00a0$val[3]\u00a0.\u00a0\"\\n\";\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a04:\u00a0\"\u00a0.\u00a0$val[4]\u00a0.\u00a0\"\\n\\n\";}?>             The above example will output:       matched: <b>bold text<\/b> part 1: <b> part 2: b part 3: bold text part 4: <\/b>  matched: <a href=howdy.html>click me<\/a> part 1: <a href=howdy.html> part 2: a part 3: click me part 4: <\/a>                         Example #3 Using named subpattern       <?php$str\u00a0=\u00a0<<<FOOa:\u00a01b:\u00a02c:\u00a03FOO;preg_match_all('\/(?P<name>\\w+):\u00a0(?P<digit>\\d+)\/',\u00a0$str,\u00a0$matches);\/*\u00a0This\u00a0also\u00a0works\u00a0in\u00a0PHP\u00a05.2.2\u00a0(PCRE\u00a07.0)\u00a0and\u00a0later,\u00a0however\u00a0\u00a0*\u00a0the\u00a0above\u00a0form\u00a0is\u00a0recommended\u00a0for\u00a0backwards\u00a0compatibility\u00a0*\/\/\/\u00a0preg_match_all('\/(?<name>\\w+):\u00a0(?<digit>\\d+)\/',\u00a0$str,\u00a0$matches);print_r($matches);?>             The above example will output:       Array (     [0] => Array         (             [0] => a: 1             [1] => b: 2             [2] => c: 3         )      [name] => Array         (             [0] => a             [1] => b             [2] => c         )      [1] => Array         (             [0] => a             [1] => b             [2] => c         )      [digit] => Array         (             [0] => 1             [1] => 2             [2] => 3         )      [2] => Array         (             [0] => 1             [1] => 2             [2] => 3         )  )                      See Also            PCRE Patterns     preg_match() - Perform a regular expression match     preg_replace() - Perform a regular expression search and replace     preg_split() - Split string by a regular expression     preg_last_error() - Returns the error code of the last PCRE regex execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-grep.php","title":"preg_grep","description":"preg_grep   (PHP 4, PHP 5)preg_grep \u2014 Return array entries that match the pattern          Description       array preg_grep     ( string $pattern    , array $input    [, int $flags = 0   ] )        Returns the array consisting of the elements of the     input array that match the given    pattern.            Parameters                    pattern                      The pattern to search for, as a string.                                input                      The input array.                                flags                      If set to PREG_GREP_INVERT, this function returns        the elements of the input array that do not match        the given pattern.                                     Return Values       Returns an array indexed using the keys from the    input array.              Changelog                                 Version        Description                                    4.2.0                 The flags parameter was added.                               4.0.4                           Prior to this version, the returned array was indexed regardless of          the keys of the input array.                            If you want to reproduce this old behavior, use           array_values() on the returned array to reindex           the values.                                                      Examples            Example #1 preg_grep() example       <?php\/\/\u00a0return\u00a0all\u00a0array\u00a0elements\/\/\u00a0containing\u00a0floating\u00a0point\u00a0numbers$fl_array\u00a0=\u00a0preg_grep(\"\/^(\\d+)?\\.\\d+$\/\",\u00a0$array);?>                         See Also            PCRE Patterns     preg_match_all() - Perform a global regular expression match     preg_filter() - Perform a regular expression search and replace     preg_last_error() - Returns the error code of the last PCRE regex execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-match.php","title":"preg_match","description":"preg_match   (PHP 4, PHP 5)preg_match \u2014 Perform a regular expression match         Description       int preg_match     ( string $pattern    , string $subject    [, array &$matches    [, int $flags = 0    [, int $offset = 0   ]]] )        Searches subject for a match to the regular    expression given in pattern.            Parameters                    pattern                      The pattern to search for, as a string.                                subject                      The input string.                                matches                      If matches is provided, then it is filled with        the results of search. $matches[0] will contain the        text that matched the full pattern, $matches[1]        will have the text that matched the first captured parenthesized        subpattern, and so on.                                flags                      flags can be the following flag:                             PREG_OFFSET_CAPTURE                                  If this flag is passed, for every occurring match the appendant string            offset will also be returned. Note that this changes the value of            matches into an array where every element is an            array consisting of the matched string at offset 0            and its string offset into subject at offset            1.                                                                         offset                      Normally, the search starts from the beginning of the subject string.        The optional parameter offset can be used to        specify the alternate place from which to start the search (in bytes).              Note:                  Using offset is not equivalent to passing         substr($subject, $offset) to         preg_match() in place of the subject string,         because pattern can contain assertions such as         ^, $ or         (?<=x). Compare:                     <?php$subject\u00a0=\u00a0\"abcdef\";$pattern\u00a0=\u00a0'\/^def\/';preg_match($pattern,\u00a0$subject,\u00a0$matches,\u00a0PREG_OFFSET_CAPTURE,\u00a03);print_r($matches);?>                       The above example will output:            Array ( )                                while this example                      <?php$subject\u00a0=\u00a0\"abcdef\";$pattern\u00a0=\u00a0'\/^def\/';preg_match($pattern,\u00a0substr($subject,3),\u00a0$matches,\u00a0PREG_OFFSET_CAPTURE);print_r($matches);?>                                  will produce                      Array (     [0] => Array         (             [0] => def             [1] => 0         )  )                                                                 Return Values       preg_match() returns the number of times    pattern matches. That will be either 0 times    (no match) or 1 time because preg_match() will stop    searching after the first match. preg_match_all()    on the contrary will continue until it reaches the end of    subject.    preg_match() returns FALSE if an error occurred.            Changelog                                 Version        Description                                    5.3.6                 Returns FALSE if offset is higher than         subject length.                               5.2.2                 Named subpatterns now accept the         syntax (?<name>)         and (?&#039;name&#039;) as well         as (?P<name>). Previous versions         accepted only (?P<name>).                               4.3.3                 The offset parameter was added                               4.3.0                 The PREG_OFFSET_CAPTURE flag was added                               4.3.0                 The flags parameter was added                                            Examples            Example #1 Find the string of text \"php\"       <?php\/\/\u00a0The\u00a0\"i\"\u00a0after\u00a0the\u00a0pattern\u00a0delimiter\u00a0indicates\u00a0a\u00a0case-insensitive\u00a0searchif\u00a0(preg_match(\"\/php\/i\",\u00a0\"PHP\u00a0is\u00a0the\u00a0web\u00a0scripting\u00a0language\u00a0of\u00a0choice.\"))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0found.\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0not\u00a0found.\";}?>                           Example #2 Find the word \"web\"       <?php\/*\u00a0The\u00a0\\b\u00a0in\u00a0the\u00a0pattern\u00a0indicates\u00a0a\u00a0word\u00a0boundary,\u00a0so\u00a0only\u00a0the\u00a0distinct\u00a0*\u00a0word\u00a0\"web\"\u00a0is\u00a0matched,\u00a0and\u00a0not\u00a0a\u00a0word\u00a0partial\u00a0like\u00a0\"webbing\"\u00a0or\u00a0\"cobweb\"\u00a0*\/if\u00a0(preg_match(\"\/\\bweb\\b\/i\",\u00a0\"PHP\u00a0is\u00a0the\u00a0web\u00a0scripting\u00a0language\u00a0of\u00a0choice.\"))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0found.\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0not\u00a0found.\";}if\u00a0(preg_match(\"\/\\bweb\\b\/i\",\u00a0\"PHP\u00a0is\u00a0the\u00a0website\u00a0scripting\u00a0language\u00a0of\u00a0choice.\"))\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0found.\";}\u00a0else\u00a0{\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0not\u00a0found.\";}?>                           Example #3 Getting the domain name out of a URL       <?php\/\/\u00a0get\u00a0host\u00a0name\u00a0from\u00a0URLpreg_match('@^(?:http:\/\/)?([^\/]+)@i',\u00a0\u00a0\u00a0\u00a0\"http:\/\/www.php.net\/index.html\",\u00a0$matches);$host\u00a0=\u00a0$matches[1];\/\/\u00a0get\u00a0last\u00a0two\u00a0segments\u00a0of\u00a0host\u00a0namepreg_match('\/[^.]+\\.[^.]+$\/',\u00a0$host,\u00a0$matches);echo\u00a0\"domain\u00a0name\u00a0is:\u00a0{$matches[0]}\\n\";?>             The above example will output:       domain name is: php.net                         Example #4 Using named subpattern       <?php$str\u00a0=\u00a0'foobar:\u00a02008';preg_match('\/(?P<name>\\w+):\u00a0(?P<digit>\\d+)\/',\u00a0$str,\u00a0$matches);\/*\u00a0This\u00a0also\u00a0works\u00a0in\u00a0PHP\u00a05.2.2\u00a0(PCRE\u00a07.0)\u00a0and\u00a0later,\u00a0however\u00a0\u00a0*\u00a0the\u00a0above\u00a0form\u00a0is\u00a0recommended\u00a0for\u00a0backwards\u00a0compatibility\u00a0*\/\/\/\u00a0preg_match('\/(?<name>\\w+):\u00a0(?<digit>\\d+)\/',\u00a0$str,\u00a0$matches);print_r($matches);?>             The above example will output:       Array (     [0] => foobar: 2008     [name] => foobar     [1] => foobar     [digit] => 2008     [2] => 2008 )                      Notes   Tip         Do not use preg_match() if you only want to check if     one string is contained in another string. Use     strpos() or strstr() instead as     they will be faster.                See Also            PCRE Patterns     preg_match_all() - Perform a global regular expression match     preg_replace() - Perform a regular expression search and replace     preg_split() - Split string by a regular expression     preg_last_error() - Returns the error code of the last PCRE regex execution"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-replace.php","title":"preg_replace","description":"preg_replace   (PHP 4, PHP 5)preg_replace \u2014 Perform a regular expression search and replace         Description       mixed preg_replace     ( mixed $pattern    , mixed $replacement    , mixed $subject    [, int $limit = -1    [, int &$count   ]] )        Searches subject for matches to    pattern and replaces them with    replacement.            Parameters                    pattern                      The pattern to search for. It can be either a string or an array with        strings.                      Several PCRE modifiers        are also available, including &#039;e&#039; (PREG_REPLACE_EVAL), which        is specific to this function.                                replacement                      The string or an array with strings to replace. If this parameter is a        string and the pattern parameter is an array,        all patterns will be replaced by that string. If both        pattern and replacement        parameters are arrays, each pattern will be        replaced by the replacement counterpart. If        there are fewer elements in the replacement        array than in the pattern array, any extra        patterns will be replaced by an empty string.                      replacement may contain references of the form        \\\\n or (since PHP 4.0.4)        $n, with the latter form        being the preferred one. Every such reference will be replaced by the text        captured by the n&#039;th parenthesized pattern.        n can be from 0 to 99, and        \\\\0 or $0 refers to the text matched        by the whole pattern. Opening parentheses are counted from left to right        (starting from 1) to obtain the number of the capturing subpattern.        To use backslash in replacement, it must be doubled        (\"\\\\\\\\\" PHP string).                      When working with a replacement pattern where a backreference is         immediately followed by another number (i.e.: placing a literal number        immediately after a matched pattern), you cannot use the familiar         \\\\1 notation for your backreference.          \\\\11, for example, would confuse        preg_replace() since it does not know whether you        want the \\\\1 backreference followed by a literal         1, or the \\\\11 backreference        followed by nothing.  In this case the solution is to use         \\${1}1.  This creates an isolated         $1 backreference, leaving the 1        as a literal.                      When using the e modifier, this function escapes        some characters (namely &#039;, \",        \\ and NULL) in the strings that replace the        backreferences. This is done to ensure that no syntax errors arise        from backreference usage with either single or double quotes (e.g.        &#039;strlen(\\&#039;$1\\&#039;)+strlen(\"$2\")&#039;). Make sure you are        aware of PHP&#039;s string        syntax to know exactly how the interpreted string will look.                                subject                      The string or an array with strings to search and replace.                      If subject is an array, then the search and        replace is performed on every entry of subject,        and the return value is an array as well.                                limit                      The maximum possible replacements for each pattern in each        subject string. Defaults to        -1 (no limit).                                count                      If specified, this variable will be filled with the number of        replacements done.                                     Return Values       preg_replace() returns an array if the    subject parameter is an array, or a string    otherwise.          If matches are found, the new subject will    be returned, otherwise subject will be    returned unchanged or NULL if an error occurred.            Changelog                                 Version        Description                                    5.1.0                 Added the count parameter                               4.0.4                 Added the &#039;$n&#039; form for the replacement parameter                               4.0.2                 Added the limit parameter                                            Examples            Example #1 Using backreferences followed by numeric literals       <?php$string\u00a0=\u00a0'April\u00a015,\u00a02003';$pattern\u00a0=\u00a0'\/(\\w+)\u00a0(\\d+),\u00a0(\\d+)\/i';$replacement\u00a0=\u00a0'${1}1,$3';echo\u00a0preg_replace($pattern,\u00a0$replacement,\u00a0$string);?>             The above example will output:       April1,2003                         Example #2 Using indexed arrays with preg_replace()       <?php$string\u00a0=\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.';$patterns\u00a0=\u00a0array();$patterns[0]\u00a0=\u00a0'\/quick\/';$patterns[1]\u00a0=\u00a0'\/brown\/';$patterns[2]\u00a0=\u00a0'\/fox\/';$replacements\u00a0=\u00a0array();$replacements[2]\u00a0=\u00a0'bear';$replacements[1]\u00a0=\u00a0'black';$replacements[0]\u00a0=\u00a0'slow';echo\u00a0preg_replace($patterns,\u00a0$replacements,\u00a0$string);?>             The above example will output:       The bear black slow jumped over the lazy dog.                 By ksorting patterns and replacements, we should get what we wanted.            <?phpksort($patterns);ksort($replacements);echo\u00a0preg_replace($patterns,\u00a0$replacements,\u00a0$string);?>             The above example will output:       The slow black bear jumped over the lazy dog.                         Example #3 Replacing several values       <?php$patterns\u00a0=\u00a0array\u00a0('\/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})\/',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\/^\\s*{(\\w+)}\\s*=\/');$replace\u00a0=\u00a0array\u00a0('\\3\/\\4\/\\1\\2',\u00a0'$\\1\u00a0=');echo\u00a0preg_replace($patterns,\u00a0$replace,\u00a0'{startDate}\u00a0=\u00a01999-5-27');?>             The above example will output:       $startDate = 5\/27\/1999                         Example #4 Strip whitespace           This example strips excess whitespace from a string.            <?php$str\u00a0=\u00a0'foo\u00a0\u00a0\u00a0o';$str\u00a0=\u00a0preg_replace('\/\\s\\s+\/',\u00a0'\u00a0',\u00a0$str);\/\/\u00a0This\u00a0will\u00a0be\u00a0'foo\u00a0o'\u00a0nowecho\u00a0$str;?>                           Example #5 Using the count parameter       <?php$count\u00a0=\u00a00;echo\u00a0preg_replace(array('\/\\d\/',\u00a0'\/\\s\/'),\u00a0'*',\u00a0'xp\u00a04\u00a0to',\u00a0-1\u00a0,\u00a0$count);echo\u00a0$count;\u00a0\/\/3?>             The above example will output:       xp***to 3                      Notes   Note:          When using arrays with pattern and     replacement, the keys are processed in the order     they appear in the array. This is not necessarily the     same as the numerical index order. If you use indexes to identify which     pattern should be replaced by which     replacement, you should perform a     ksort() on each array prior to calling     preg_replace().                See Also            PCRE Patterns     preg_filter() - Perform a regular expression search and replace     preg_match() - Perform a regular expression match     preg_replace_callback() - Perform a regular expression search and replace using a callback     preg_split() - Split string by a regular expression     preg_last_error() - Returns the error code of the last PCRE regex execution"}]